(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/*!
 * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md.
 */


(function (t) {
    t["ru"] = Object.assign(t["ru"] || {}, require('../../ru'))
})(window.CKEDITOR_TRANSLATIONS || (window.CKEDITOR_TRANSLATIONS = {}));
(function t(e, i) {
    if (typeof exports === "object" && typeof module === "object") module.exports = i(); else if (typeof define === "function" && define.amd) define([], i); else if (typeof exports === "object") exports["BalloonEditor"] = i(); else e["BalloonEditor"] = i()
})(window, (function () {
    return function (t) {
        var e = {};

        function i(n) {
            if (e[n]) {
                return e[n].exports
            }
            var o = e[n] = {i: n, l: false, exports: {}};
            t[n].call(o.exports, o, o.exports, i);
            o.l = true;
            return o.exports
        }

        i.m = t;
        i.c = e;
        i.d = function (t, e, n) {
            if (!i.o(t, e)) {
                Object.defineProperty(t, e, {enumerable: true, get: n})
            }
        };
        i.r = function (t) {
            if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                Object.defineProperty(t, Symbol.toStringTag, {value: "Module"})
            }
            Object.defineProperty(t, "__esModule", {value: true})
        };
        i.t = function (t, e) {
            if (e & 1) t = i(t);
            if (e & 8) return t;
            if (e & 4 && typeof t === "object" && t && t.__esModule) return t;
            var n = Object.create(null);
            i.r(n);
            Object.defineProperty(n, "default", {enumerable: true, value: t});
            if (e & 2 && typeof t != "string") for (var o in t) i.d(n, o, function (e) {
                return t[e]
            }.bind(null, o));
            return n
        };
        i.n = function (t) {
            var e = t && t.__esModule ? function e() {
                return t["default"]
            } : function e() {
                return t
            };
            i.d(e, "a", e);
            return e
        };
        i.o = function (t, e) {
            return Object.prototype.hasOwnProperty.call(t, e)
        };
        i.p = "";
        return i(i.s = 114)
    }([function (t, e, i) {
        "use strict";
        i.d(e, "b", (function () {
            return o
        }));
        i.d(e, "a", (function () {
            return r
        }));
        const n = "https://ckeditor.com/docs/ckeditor5/latest/framework/guides/support/error-codes.html";

        class o extends Error {
            constructor(t, e, i) {
                t = r(t);
                if (i) {
                    t += " " + JSON.stringify(i)
                }
                super(t);
                this.name = "CKEditorError";
                this.context = e;
                this.data = i
            }

            is(t) {
                return t === "CKEditorError"
            }

            static rethrowUnexpectedError(t, e) {
                if (t.is && t.is("CKEditorError")) {
                    throw t
                }
                const i = new o(t.message, e);
                i.stack = t.stack;
                throw i
            }
        }

        function r(t) {
            const e = t.match(/^([^:]+):/);
            if (!e) {
                return t
            }
            return t + ` Read more: ${n}#error-${e[1]}\n`
        }
    }, function (t, e, i) {
        "use strict";
        var n = function t() {
            var e;
            return function t() {
                if (typeof e === "undefined") {
                    e = Boolean(window && document && document.all && !window.atob)
                }
                return e
            }
        }();
        var o = function t() {
            var e = {};
            return function t(i) {
                if (typeof e[i] === "undefined") {
                    var n = document.querySelector(i);
                    if (window.HTMLIFrameElement && n instanceof window.HTMLIFrameElement) {
                        try {
                            n = n.contentDocument.head
                        } catch (t) {
                            n = null
                        }
                    }
                    e[i] = n
                }
                return e[i]
            }
        }();
        var r = [];

        function s(t) {
            var e = -1;
            for (var i = 0; i < r.length; i++) {
                if (r[i].identifier === t) {
                    e = i;
                    break
                }
            }
            return e
        }

        function a(t, e) {
            var i = {};
            var n = [];
            for (var o = 0; o < t.length; o++) {
                var a = t[o];
                var c = e.base ? a[0] + e.base : a[0];
                var l = i[c] || 0;
                var d = "".concat(c, " ").concat(l);
                i[c] = l + 1;
                var u = s(d);
                var h = {css: a[1], media: a[2], sourceMap: a[3]};
                if (u !== -1) {
                    r[u].references++;
                    r[u].updater(h)
                } else {
                    r.push({identifier: d, updater: m(h, e), references: 1})
                }
                n.push(d)
            }
            return n
        }

        function c(t) {
            var e = document.createElement("style");
            var n = t.attributes || {};
            if (typeof n.nonce === "undefined") {
                var r = true ? i.nc : undefined;
                if (r) {
                    n.nonce = r
                }
            }
            Object.keys(n).forEach((function (t) {
                e.setAttribute(t, n[t])
            }));
            if (typeof t.insert === "function") {
                t.insert(e)
            } else {
                var s = o(t.insert || "head");
                if (!s) {
                    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.")
                }
                s.appendChild(e)
            }
            return e
        }

        function l(t) {
            if (t.parentNode === null) {
                return false
            }
            t.parentNode.removeChild(t)
        }

        var d = function t() {
            var e = [];
            return function t(i, n) {
                e[i] = n;
                return e.filter(Boolean).join("\n")
            }
        }();

        function u(t, e, i, n) {
            var o = i ? "" : n.media ? "@media ".concat(n.media, " {").concat(n.css, "}") : n.css;
            if (t.styleSheet) {
                t.styleSheet.cssText = d(e, o)
            } else {
                var r = document.createTextNode(o);
                var s = t.childNodes;
                if (s[e]) {
                    t.removeChild(s[e])
                }
                if (s.length) {
                    t.insertBefore(r, s[e])
                } else {
                    t.appendChild(r)
                }
            }
        }

        function h(t, e, i) {
            var n = i.css;
            var o = i.media;
            var r = i.sourceMap;
            if (o) {
                t.setAttribute("media", o)
            } else {
                t.removeAttribute("media")
            }
            if (r && btoa) {
                n += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r)))), " */")
            }
            if (t.styleSheet) {
                t.styleSheet.cssText = n
            } else {
                while (t.firstChild) {
                    t.removeChild(t.firstChild)
                }
                t.appendChild(document.createTextNode(n))
            }
        }

        var f = null;
        var g = 0;

        function m(t, e) {
            var i;
            var n;
            var o;
            if (e.singleton) {
                var r = g++;
                i = f || (f = c(e));
                n = u.bind(null, i, r, false);
                o = u.bind(null, i, r, true)
            } else {
                i = c(e);
                n = h.bind(null, i, e);
                o = function t() {
                    l(i)
                }
            }
            n(t);
            return function e(i) {
                if (i) {
                    if (i.css === t.css && i.media === t.media && i.sourceMap === t.sourceMap) {
                        return
                    }
                    n(t = i)
                } else {
                    o()
                }
            }
        }

        t.exports = function (t, e) {
            e = e || {};
            if (!e.singleton && typeof e.singleton !== "boolean") {
                e.singleton = n()
            }
            t = t || [];
            var i = a(t, e);
            return function t(n) {
                n = n || [];
                if (Object.prototype.toString.call(n) !== "[object Array]") {
                    return
                }
                for (var o = 0; o < i.length; o++) {
                    var c = i[o];
                    var l = s(c);
                    r[l].references--
                }
                var d = a(n, e);
                for (var u = 0; u < i.length; u++) {
                    var h = i[u];
                    var f = s(h);
                    if (r[f].references === 0) {
                        r[f].updater();
                        r.splice(f, 1)
                    }
                }
                i = d
            }
        }
    }, , function (t, e, i) {
        "use strict";
        var n = i(7);
        var o = typeof self == "object" && self && self.Object === Object && self;
        var r = n["a"] || o || Function("return this")();
        e["a"] = r
    }, function (t, e, i) {
        "use strict";
        (function (t) {
            var n = i(3);
            var o = i(14);
            var r = typeof exports == "object" && exports && !exports.nodeType && exports;
            var s = r && typeof t == "object" && t && !t.nodeType && t;
            var a = s && s.exports === r;
            var c = a ? n["a"].Buffer : undefined;
            var l = c ? c.isBuffer : undefined;
            var d = l || o["a"];
            e["a"] = d
        }).call(this, i(9)(t))
    }, function (t, e, i) {
        "use strict";
        (function (t) {
            var n = i(7);
            var o = typeof exports == "object" && exports && !exports.nodeType && exports;
            var r = o && typeof t == "object" && t && !t.nodeType && t;
            var s = r && r.exports === o;
            var a = s && n["a"].process;
            var c = function () {
                try {
                    var t = r && r.require && r.require("util").types;
                    if (t) {
                        return t
                    }
                    return a && a.binding && a.binding("util")
                } catch (t) {
                }
            }();
            e["a"] = c
        }).call(this, i(9)(t))
    }, function (t, e, i) {
        "use strict";
        (function (t) {
            var e = i(0);
            const n = "18.0.0";
            const o = typeof window === "object" ? window : t;
            if (o.CKEDITOR_VERSION) {
                throw new e["b"]("ckeditor-duplicated-modules: Some CKEditor 5 modules are duplicated.", null)
            } else {
                o.CKEDITOR_VERSION = n
            }
        }).call(this, i(10))
    }, function (t, e, i) {
        "use strict";
        (function (t) {
            var i = typeof t == "object" && t && t.Object === Object && t;
            e["a"] = i
        }).call(this, i(10))
    }, function (t, e, i) {
        "use strict";
        (function (t) {
            var n = i(3);
            var o = typeof exports == "object" && exports && !exports.nodeType && exports;
            var r = o && typeof t == "object" && t && !t.nodeType && t;
            var s = r && r.exports === o;
            var a = s ? n["a"].Buffer : undefined, c = a ? a.allocUnsafe : undefined;

            function l(t, e) {
                if (e) {
                    return t.slice()
                }
                var i = t.length, n = c ? c(i) : new t.constructor(i);
                t.copy(n);
                return n
            }

            e["a"] = l
        }).call(this, i(9)(t))
    }, function (t, e) {
        t.exports = function (t) {
            if (!t.webpackPolyfill) {
                var e = Object.create(t);
                if (!e.children) e.children = [];
                Object.defineProperty(e, "loaded", {
                    enumerable: true, get: function () {
                        return e.l
                    }
                });
                Object.defineProperty(e, "id", {
                    enumerable: true, get: function () {
                        return e.i
                    }
                });
                Object.defineProperty(e, "exports", {enumerable: true});
                e.webpackPolyfill = 1
            }
            return e
        }
    }, function (t, e) {
        var i;
        i = function () {
            return this
        }();
        try {
            i = i || new Function("return this")()
        } catch (t) {
            if (typeof window === "object") i = window
        }
        t.exports = i
    }, function (t, e, i) {
        var n = i(1);
        var o = i(55);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e, i) {
        var n = i(1);
        var o = i(108);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e, i) {
        var n = i(1);
        var o = i(109);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e, i) {
        "use strict";

        function n() {
            return false
        }

        e["a"] = n
    }, function (t, e, i) {
        var n = i(1);
        var o = i(16);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck-hidden{display:none!important}.ck.ck-reset,.ck.ck-reset_all,.ck.ck-reset_all *{box-sizing:border-box;width:auto;height:auto;position:static}:root{--ck-z-default:1;--ck-z-modal:calc(var(--ck-z-default) + 999);--ck-color-base-foreground:#fafafa;--ck-color-base-background:#fff;--ck-color-base-border:#c4c4c4;--ck-color-base-action:#61b045;--ck-color-base-focus:#6cb5f9;--ck-color-base-text:#333;--ck-color-base-active:#198cf0;--ck-color-base-active-focus:#0e7fe1;--ck-color-base-error:#db3700;--ck-color-focus-border:#1f89e5;--ck-color-focus-outer-shadow:#bcdefb;--ck-color-focus-disabled-shadow:rgba(119,186,248,0.3);--ck-color-focus-error-shadow:rgba(255,64,31,0.3);--ck-color-text:var(--ck-color-base-text);--ck-color-shadow-drop:rgba(0,0,0,0.15);--ck-color-shadow-drop-active:rgba(0,0,0,0.2);--ck-color-shadow-inner:rgba(0,0,0,0.1);--ck-color-button-default-background:transparent;--ck-color-button-default-hover-background:#e6e6e6;--ck-color-button-default-active-background:#d9d9d9;--ck-color-button-default-active-shadow:#bfbfbf;--ck-color-button-default-disabled-background:transparent;--ck-color-button-on-background:#dedede;--ck-color-button-on-hover-background:#c4c4c4;--ck-color-button-on-active-background:#bababa;--ck-color-button-on-active-shadow:#a1a1a1;--ck-color-button-on-disabled-background:#dedede;--ck-color-button-action-background:var(--ck-color-base-action);--ck-color-button-action-hover-background:#579e3d;--ck-color-button-action-active-background:#53973b;--ck-color-button-action-active-shadow:#498433;--ck-color-button-action-disabled-background:#7ec365;--ck-color-button-action-text:var(--ck-color-base-background);--ck-color-button-save:#008a00;--ck-color-button-cancel:#db3700;--ck-color-switch-button-off-background:#b0b0b0;--ck-color-switch-button-off-hover-background:#a3a3a3;--ck-color-switch-button-on-background:var(--ck-color-button-action-background);--ck-color-switch-button-on-hover-background:#579e3d;--ck-color-switch-button-inner-background:var(--ck-color-base-background);--ck-color-switch-button-inner-shadow:rgba(0,0,0,0.1);--ck-color-dropdown-panel-background:var(--ck-color-base-background);--ck-color-dropdown-panel-border:var(--ck-color-base-border);--ck-color-input-background:var(--ck-color-base-background);--ck-color-input-border:#c7c7c7;--ck-color-input-error-border:var(--ck-color-base-error);--ck-color-input-text:var(--ck-color-base-text);--ck-color-input-disabled-background:#f2f2f2;--ck-color-input-disabled-border:#c7c7c7;--ck-color-input-disabled-text:#5c5c5c;--ck-color-list-background:var(--ck-color-base-background);--ck-color-list-button-hover-background:var(--ck-color-button-default-hover-background);--ck-color-list-button-on-background:var(--ck-color-base-active);--ck-color-list-button-on-background-focus:var(--ck-color-base-active-focus);--ck-color-list-button-on-text:var(--ck-color-base-background);--ck-color-panel-background:var(--ck-color-base-background);--ck-color-panel-border:var(--ck-color-base-border);--ck-color-toolbar-background:var(--ck-color-base-foreground);--ck-color-toolbar-border:var(--ck-color-base-border);--ck-color-tooltip-background:var(--ck-color-base-text);--ck-color-tooltip-text:var(--ck-color-base-background);--ck-color-engine-placeholder-text:#707070;--ck-color-upload-bar-background:#6cb5f9;--ck-color-link-default:#0000f0;--ck-color-link-selected-background:rgba(31,177,255,0.1);--ck-disabled-opacity:.5;--ck-focus-outer-shadow-geometry:0 0 0 3px;--ck-focus-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-outer-shadow);--ck-focus-disabled-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-disabled-shadow);--ck-focus-error-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-error-shadow);--ck-focus-ring:1px solid var(--ck-color-focus-border);--ck-font-size-base:13px;--ck-line-height-base:1.84615;--ck-font-face:Helvetica,Arial,Tahoma,Verdana,Sans-Serif;--ck-font-size-tiny:0.7em;--ck-font-size-small:0.75em;--ck-font-size-normal:1em;--ck-font-size-big:1.4em;--ck-font-size-large:1.8em;--ck-ui-component-min-height:2.3em}.ck.ck-reset,.ck.ck-reset_all,.ck.ck-reset_all *{margin:0;padding:0;border:0;background:transparent;text-decoration:none;vertical-align:middle;transition:none;word-wrap:break-word}.ck.ck-reset_all,.ck.ck-reset_all *{border-collapse:collapse;font:normal normal normal var(--ck-font-size-base)/var(--ck-line-height-base) var(--ck-font-face);color:var(--ck-color-text);text-align:left;white-space:nowrap;cursor:auto;float:none}.ck.ck-reset_all .ck-rtl *{text-align:right}.ck.ck-reset_all iframe{vertical-align:inherit}.ck.ck-reset_all textarea{white-space:pre-wrap}.ck.ck-reset_all input[type=password],.ck.ck-reset_all input[type=text],.ck.ck-reset_all textarea{cursor:text}.ck.ck-reset_all input[type=password][disabled],.ck.ck-reset_all input[type=text][disabled],.ck.ck-reset_all textarea[disabled]{cursor:default}.ck.ck-reset_all fieldset{padding:10px;border:2px groove #dfdee3}.ck.ck-reset_all button::-moz-focus-inner{padding:0;border:0}.ck[dir=rtl],.ck[dir=rtl] .ck{text-align:right}:root{--ck-border-radius:2px;--ck-inner-shadow:2px 2px 3px var(--ck-color-shadow-inner) inset;--ck-drop-shadow:0 1px 2px 1px var(--ck-color-shadow-drop);--ck-drop-shadow-active:0 3px 6px 1px var(--ck-color-shadow-drop-active);--ck-spacing-unit:0.6em;--ck-spacing-large:calc(var(--ck-spacing-unit)*1.5);--ck-spacing-standard:var(--ck-spacing-unit);--ck-spacing-medium:calc(var(--ck-spacing-unit)*0.8);--ck-spacing-small:calc(var(--ck-spacing-unit)*0.5);--ck-spacing-tiny:calc(var(--ck-spacing-unit)*0.3);--ck-spacing-extra-tiny:calc(var(--ck-spacing-unit)*0.16)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(18);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ':root{--ck-balloon-panel-arrow-z-index:calc(var(--ck-z-default) - 3)}.ck.ck-balloon-panel{display:none;position:absolute;z-index:var(--ck-z-modal)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{content:"";position:absolute}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_n]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_n]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_s]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_s]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel.ck-balloon-panel_visible{display:block}:root{--ck-balloon-arrow-offset:2px;--ck-balloon-arrow-height:10px;--ck-balloon-arrow-half-width:8px}.ck.ck-balloon-panel{border-radius:0}.ck-rounded-corners .ck.ck-balloon-panel,.ck.ck-balloon-panel.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-balloon-panel{box-shadow:var(--ck-drop-shadow),0 0;min-height:15px;background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{width:0;height:0;border-style:solid}.ck.ck-balloon-panel[class*=arrow_n]:after,.ck.ck-balloon-panel[class*=arrow_n]:before{border-left-width:var(--ck-balloon-arrow-half-width);border-bottom-width:var(--ck-balloon-arrow-height);border-right-width:var(--ck-balloon-arrow-half-width);border-top-width:0}.ck.ck-balloon-panel[class*=arrow_n]:before{border-bottom-color:var(--ck-color-panel-border)}.ck.ck-balloon-panel[class*=arrow_n]:after,.ck.ck-balloon-panel[class*=arrow_n]:before{border-left-color:transparent;border-right-color:transparent;border-top-color:transparent}.ck.ck-balloon-panel[class*=arrow_n]:after{border-bottom-color:var(--ck-color-panel-background);margin-top:var(--ck-balloon-arrow-offset)}.ck.ck-balloon-panel[class*=arrow_s]:after,.ck.ck-balloon-panel[class*=arrow_s]:before{border-left-width:var(--ck-balloon-arrow-half-width);border-bottom-width:0;border-right-width:var(--ck-balloon-arrow-half-width);border-top-width:var(--ck-balloon-arrow-height)}.ck.ck-balloon-panel[class*=arrow_s]:before{border-top-color:var(--ck-color-panel-border)}.ck.ck-balloon-panel[class*=arrow_s]:after,.ck.ck-balloon-panel[class*=arrow_s]:before{border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent}.ck.ck-balloon-panel[class*=arrow_s]:after{border-top-color:var(--ck-color-panel-background);margin-bottom:var(--ck-balloon-arrow-offset)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:before{left:50%;margin-left:calc(-1*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:before{left:calc(2*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:before{right:calc(2*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:before{left:50%;margin-left:calc(-1*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:before{left:calc(2*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:before{right:calc(2*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_sme:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_sme:before{right:25%;margin-right:calc(2*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_smw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_smw:before{left:25%;margin-left:calc(2*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nme:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nme:before{right:25%;margin-right:calc(2*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nmw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nmw:before{left:25%;margin-left:calc(2*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}'
    }, function (t, e, i) {
        var n = i(1);
        var o = i(20);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-icon{vertical-align:middle}:root{--ck-icon-size:calc(var(--ck-line-height-base)*var(--ck-font-size-normal))}.ck.ck-icon{width:var(--ck-icon-size);height:var(--ck-icon-size);font-size:.8333350694em;will-change:transform}.ck.ck-icon,.ck.ck-icon *{color:inherit;cursor:inherit}.ck.ck-icon :not([fill]){fill:currentColor}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(22);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = '.ck.ck-tooltip,.ck.ck-tooltip .ck-tooltip__text:after{position:absolute;pointer-events:none;-webkit-backface-visibility:hidden}.ck.ck-tooltip{visibility:hidden;opacity:0;display:none;z-index:var(--ck-z-modal)}.ck.ck-tooltip .ck-tooltip__text{display:inline-block}.ck.ck-tooltip .ck-tooltip__text:after{content:"";width:0;height:0}:root{--ck-tooltip-arrow-size:5px}.ck.ck-tooltip{left:50%;top:0;transition:opacity .2s ease-in-out .2s}.ck.ck-tooltip .ck-tooltip__text{border-radius:0}.ck-rounded-corners .ck.ck-tooltip .ck-tooltip__text,.ck.ck-tooltip .ck-tooltip__text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-tooltip .ck-tooltip__text{font-size:.9em;line-height:1.5;color:var(--ck-color-tooltip-text);padding:var(--ck-spacing-small) var(--ck-spacing-medium);background:var(--ck-color-tooltip-background);position:relative;left:-50%}.ck.ck-tooltip .ck-tooltip__text:after{transition:opacity .2s ease-in-out .2s;border-style:solid;left:50%}.ck.ck-tooltip.ck-tooltip_s{bottom:calc(-1*var(--ck-tooltip-arrow-size));transform:translateY(100%)}.ck.ck-tooltip.ck-tooltip_s .ck-tooltip__text:after{top:calc(-1*var(--ck-tooltip-arrow-size));transform:translateX(-50%);border-left-color:transparent;border-bottom-color:var(--ck-color-tooltip-background);border-right-color:transparent;border-top-color:transparent;border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:var(--ck-tooltip-arrow-size);border-right-width:var(--ck-tooltip-arrow-size);border-top-width:0}.ck.ck-tooltip.ck-tooltip_n{top:calc(-1*var(--ck-tooltip-arrow-size));transform:translateY(-100%)}.ck.ck-tooltip.ck-tooltip_n .ck-tooltip__text:after{bottom:calc(-1*var(--ck-tooltip-arrow-size));transform:translateX(-50%);border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;border-top-color:var(--ck-color-tooltip-background);border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:0;border-right-width:var(--ck-tooltip-arrow-size);border-top-width:var(--ck-tooltip-arrow-size)}'
    }, function (t, e, i) {
        var n = i(1);
        var o = i(24);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-button,a.ck.ck-button{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.ck.ck-button .ck-tooltip,a.ck.ck-button .ck-tooltip{display:block}@media (hover:none){.ck.ck-button .ck-tooltip,a.ck.ck-button .ck-tooltip{display:none}}.ck.ck-button,a.ck.ck-button{position:relative;display:inline-flex;align-items:center;justify-content:left}.ck.ck-button .ck-button__label,a.ck.ck-button .ck-button__label{display:none}.ck.ck-button.ck-button_with-text .ck-button__label,a.ck.ck-button.ck-button_with-text .ck-button__label{display:inline-block}.ck.ck-button:not(.ck-button_with-text),a.ck.ck-button:not(.ck-button_with-text){justify-content:center}.ck.ck-button:hover .ck-tooltip,a.ck.ck-button:hover .ck-tooltip{visibility:visible;opacity:1}.ck.ck-button:focus:not(:hover) .ck-tooltip,a.ck.ck-button:focus:not(:hover) .ck-tooltip{display:none}.ck.ck-button,a.ck.ck-button{background:var(--ck-color-button-default-background)}.ck.ck-button:not(.ck-disabled):hover,a.ck.ck-button:not(.ck-disabled):hover{background:var(--ck-color-button-default-hover-background)}.ck.ck-button:not(.ck-disabled):active,a.ck.ck-button:not(.ck-disabled):active{background:var(--ck-color-button-default-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-default-active-shadow)}.ck.ck-button.ck-disabled,a.ck.ck-button.ck-disabled{background:var(--ck-color-button-default-disabled-background)}.ck.ck-button,a.ck.ck-button{border-radius:0}.ck-rounded-corners .ck.ck-button,.ck-rounded-corners a.ck.ck-button,.ck.ck-button.ck-rounded-corners,a.ck.ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-button,a.ck.ck-button{white-space:nowrap;cursor:default;vertical-align:middle;padding:var(--ck-spacing-tiny);text-align:center;min-width:var(--ck-ui-component-min-height);min-height:var(--ck-ui-component-min-height);line-height:1;font-size:inherit;border:1px solid transparent;transition:box-shadow .2s ease-in-out,border .2s ease-in-out;-webkit-appearance:none}.ck.ck-button:active,.ck.ck-button:focus,a.ck.ck-button:active,a.ck.ck-button:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),0 0}.ck.ck-button .ck-button__icon use,.ck.ck-button .ck-button__icon use *,a.ck.ck-button .ck-button__icon use,a.ck.ck-button .ck-button__icon use *{color:inherit}.ck.ck-button .ck-button__label,a.ck.ck-button .ck-button__label{font-size:inherit;font-weight:inherit;color:inherit;cursor:inherit;vertical-align:middle}[dir=ltr] .ck.ck-button .ck-button__label,[dir=ltr] a.ck.ck-button .ck-button__label{text-align:left}[dir=rtl] .ck.ck-button .ck-button__label,[dir=rtl] a.ck.ck-button .ck-button__label{text-align:right}.ck.ck-button .ck-button__keystroke,a.ck.ck-button .ck-button__keystroke{color:inherit}[dir=ltr] .ck.ck-button .ck-button__keystroke,[dir=ltr] a.ck.ck-button .ck-button__keystroke{margin-left:var(--ck-spacing-large)}[dir=rtl] .ck.ck-button .ck-button__keystroke,[dir=rtl] a.ck.ck-button .ck-button__keystroke{margin-right:var(--ck-spacing-large)}.ck.ck-button .ck-button__keystroke,a.ck.ck-button .ck-button__keystroke{font-weight:700;opacity:.7}.ck.ck-button.ck-disabled:active,.ck.ck-button.ck-disabled:focus,a.ck.ck-button.ck-disabled:active,a.ck.ck-button.ck-disabled:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),0 0}.ck.ck-button.ck-disabled .ck-button__icon,a.ck.ck-button.ck-disabled .ck-button__icon{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-disabled .ck-button__label,a.ck.ck-button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-disabled .ck-button__keystroke,a.ck.ck-button.ck-disabled .ck-button__keystroke{opacity:.3}.ck.ck-button.ck-button_with-text,a.ck.ck-button.ck-button_with-text{padding:var(--ck-spacing-tiny) var(--ck-spacing-standard)}[dir=ltr] .ck.ck-button.ck-button_with-text .ck-button__icon,[dir=ltr] a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-left:calc(-1*var(--ck-spacing-small));margin-right:var(--ck-spacing-small)}[dir=rtl] .ck.ck-button.ck-button_with-text .ck-button__icon,[dir=rtl] a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-right:calc(-1*var(--ck-spacing-small));margin-left:var(--ck-spacing-small)}.ck.ck-button.ck-button_with-keystroke .ck-button__label,a.ck.ck-button.ck-button_with-keystroke .ck-button__label{flex-grow:1}.ck.ck-button.ck-on,a.ck.ck-button.ck-on{background:var(--ck-color-button-on-background)}.ck.ck-button.ck-on:not(.ck-disabled):hover,a.ck.ck-button.ck-on:not(.ck-disabled):hover{background:var(--ck-color-button-on-hover-background)}.ck.ck-button.ck-on:not(.ck-disabled):active,a.ck.ck-button.ck-on:not(.ck-disabled):active{background:var(--ck-color-button-on-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-on-active-shadow)}.ck.ck-button.ck-on.ck-disabled,a.ck.ck-button.ck-on.ck-disabled{background:var(--ck-color-button-on-disabled-background)}.ck.ck-button.ck-button-save,a.ck.ck-button.ck-button-save{color:var(--ck-color-button-save)}.ck.ck-button.ck-button-cancel,a.ck.ck-button.ck-button-cancel{color:var(--ck-color-button-cancel)}.ck.ck-button-action,a.ck.ck-button-action{background:var(--ck-color-button-action-background)}.ck.ck-button-action:not(.ck-disabled):hover,a.ck.ck-button-action:not(.ck-disabled):hover{background:var(--ck-color-button-action-hover-background)}.ck.ck-button-action:not(.ck-disabled):active,a.ck.ck-button-action:not(.ck-disabled):active{background:var(--ck-color-button-action-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-action-active-shadow)}.ck.ck-button-action.ck-disabled,a.ck.ck-button-action.ck-disabled{background:var(--ck-color-button-action-disabled-background)}.ck.ck-button-action,a.ck.ck-button-action{color:var(--ck-color-button-action-text)}.ck.ck-button-bold,a.ck.ck-button-bold{font-weight:700}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(26);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck .ck-balloon-rotator__navigation{display:flex;align-items:center;justify-content:center}.ck .ck-balloon-rotator__content .ck-toolbar{justify-content:center}.ck .ck-balloon-rotator__navigation{background:var(--ck-color-toolbar-background);border-bottom:1px solid var(--ck-color-toolbar-border);padding:0 var(--ck-spacing-small)}.ck .ck-balloon-rotator__navigation>*{margin-right:var(--ck-spacing-small);margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck .ck-balloon-rotator__navigation .ck-balloon-rotator__counter{margin-right:var(--ck-spacing-standard);margin-left:var(--ck-spacing-small)}.ck .ck-balloon-rotator__content .ck.ck-annotation-wrapper{box-shadow:none}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(28);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck .ck-fake-panel{position:absolute;z-index:calc(var(--ck-z-modal) - 1)}.ck .ck-fake-panel div{position:absolute}.ck .ck-fake-panel div:first-child{z-index:2}.ck .ck-fake-panel div:nth-child(2){z-index:1}:root{--ck-balloon-fake-panel-offset-horizontal:6px;--ck-balloon-fake-panel-offset-vertical:6px}.ck .ck-fake-panel div{box-shadow:var(--ck-drop-shadow),0 0;min-height:15px;background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border);border-radius:var(--ck-border-radius);width:100%;height:100%}.ck .ck-fake-panel div:first-child{margin-left:var(--ck-balloon-fake-panel-offset-horizontal);margin-top:var(--ck-balloon-fake-panel-offset-vertical)}.ck .ck-fake-panel div:nth-child(2){margin-left:calc(var(--ck-balloon-fake-panel-offset-horizontal)*2);margin-top:calc(var(--ck-balloon-fake-panel-offset-vertical)*2)}.ck .ck-fake-panel div:nth-child(3){margin-left:calc(var(--ck-balloon-fake-panel-offset-horizontal)*3);margin-top:calc(var(--ck-balloon-fake-panel-offset-vertical)*3)}.ck .ck-balloon-panel_arrow_s+.ck-fake-panel,.ck .ck-balloon-panel_arrow_se+.ck-fake-panel,.ck .ck-balloon-panel_arrow_sw+.ck-fake-panel{--ck-balloon-fake-panel-offset-vertical:-6px}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(30);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-dropdown{display:inline-block;position:relative}.ck.ck-dropdown .ck-dropdown__arrow{pointer-events:none;z-index:var(--ck-z-default)}.ck.ck-dropdown .ck-button.ck-dropdown__button{width:100%}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on .ck-tooltip{display:none}.ck.ck-dropdown .ck-dropdown__panel{-webkit-backface-visibility:hidden;display:none;z-index:var(--ck-z-modal);position:absolute}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel-visible{display:inline-block}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw{bottom:100%}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{top:100%;bottom:auto}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se{left:0}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{right:0}:root{--ck-dropdown-arrow-size:calc(0.5*var(--ck-icon-size))}.ck.ck-dropdown{font-size:inherit}.ck.ck-dropdown .ck-dropdown__arrow{width:var(--ck-dropdown-arrow-size)}[dir=ltr] .ck.ck-dropdown .ck-dropdown__arrow{right:var(--ck-spacing-standard);margin-left:var(--ck-spacing-small)}[dir=rtl] .ck.ck-dropdown .ck-dropdown__arrow{left:var(--ck-spacing-standard);margin-right:var(--ck-spacing-small)}.ck.ck-dropdown.ck-disabled .ck-dropdown__arrow{opacity:var(--ck-disabled-opacity)}[dir=ltr] .ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-left:var(--ck-spacing-small)}[dir=rtl] .ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-right:var(--ck-spacing-small)}.ck.ck-dropdown .ck-button.ck-dropdown__button .ck-button__label{width:7em;overflow:hidden;text-overflow:ellipsis}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on{border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown__panel{border-radius:0}.ck-rounded-corners .ck.ck-dropdown__panel,.ck.ck-dropdown__panel.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-dropdown__panel{box-shadow:var(--ck-drop-shadow),0 0;background:var(--ck-color-dropdown-panel-background);border:1px solid var(--ck-color-dropdown-panel-border);bottom:0;min-width:100%}.ck.ck-dropdown__panel.ck-dropdown__panel_se{border-top-left-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_sw{border-top-right-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_ne{border-bottom-left-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_nw{border-bottom-right-radius:0}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(32);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-list{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-direction:column}.ck.ck-list .ck-list__item,.ck.ck-list .ck-list__separator{display:block}.ck.ck-list .ck-list__item>:focus{position:relative;z-index:var(--ck-z-default)}.ck.ck-list{border-radius:0}.ck-rounded-corners .ck.ck-list,.ck.ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-list{list-style-type:none;background:var(--ck-color-list-background)}.ck.ck-list__item{cursor:default;min-width:12em}.ck.ck-list__item .ck-button{min-height:unset;width:100%;text-align:left;border-radius:0;padding:calc(0.2*var(--ck-line-height-base)*var(--ck-font-size-base)) calc(0.4*var(--ck-line-height-base)*var(--ck-font-size-base))}.ck.ck-list__item .ck-button .ck-button__label{line-height:calc(1.2*var(--ck-line-height-base)*var(--ck-font-size-base))}.ck.ck-list__item .ck-button:active{box-shadow:none}.ck.ck-list__item .ck-button.ck-on{background:var(--ck-color-list-button-on-background);color:var(--ck-color-list-button-on-text)}.ck.ck-list__item .ck-button.ck-on:active{box-shadow:none}.ck.ck-list__item .ck-button.ck-on:hover:not(.ck-disabled){background:var(--ck-color-list-button-on-background-focus)}.ck.ck-list__item .ck-button.ck-on:focus:not(.ck-disabled){border-color:var(--ck-color-base-background)}.ck.ck-list__item .ck-button:hover:not(.ck-disabled){background:var(--ck-color-list-button-hover-background)}.ck.ck-list__item .ck-switchbutton.ck-on{background:var(--ck-color-list-background);color:inherit}.ck.ck-list__item .ck-switchbutton.ck-on:hover:not(.ck-disabled){background:var(--ck-color-list-button-hover-background);color:inherit}.ck.ck-list__separator{height:1px;width:100%;background:var(--ck-color-base-border)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(34);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{display:block}:root{--ck-switch-button-toggle-width:2.6153846154em;--ck-switch-button-toggle-inner-size:1.0769230769em;--ck-switch-button-toggle-spacing:1px;--ck-switch-button-translation:1.3846153847em}[dir=ltr] .ck.ck-button.ck-switchbutton .ck-button__label{margin-right:calc(2*var(--ck-spacing-large))}[dir=rtl] .ck.ck-button.ck-switchbutton .ck-button__label{margin-left:calc(2*var(--ck-spacing-large))}.ck.ck-button.ck-switchbutton .ck-button__toggle{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle.ck-rounded-corners{border-radius:var(--ck-border-radius)}[dir=ltr] .ck.ck-button.ck-switchbutton .ck-button__toggle{margin-left:auto}[dir=rtl] .ck.ck-button.ck-switchbutton .ck-button__toggle{margin-right:auto}.ck.ck-button.ck-switchbutton .ck-button__toggle{transition:background .4s ease;width:var(--ck-switch-button-toggle-width);background:var(--ck-color-switch-button-off-background)}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner.ck-rounded-corners{border-radius:var(--ck-border-radius);border-radius:calc(0.5*var(--ck-border-radius))}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{margin:var(--ck-switch-button-toggle-spacing);width:var(--ck-switch-button-toggle-inner-size);height:var(--ck-switch-button-toggle-inner-size);background:var(--ck-color-switch-button-inner-background);transition:all .3s ease}.ck.ck-button.ck-switchbutton .ck-button__toggle:hover{background:var(--ck-color-switch-button-off-hover-background)}.ck.ck-button.ck-switchbutton .ck-button__toggle:hover .ck-button__toggle__inner{box-shadow:0 0 0 5px var(--ck-color-switch-button-inner-shadow)}.ck.ck-button.ck-switchbutton.ck-disabled .ck-button__toggle{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle{background:var(--ck-color-switch-button-on-background)}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle:hover{background:var(--ck-color-switch-button-on-hover-background)}[dir=ltr] .ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(var(--ck-switch-button-translation))}[dir=rtl] .ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(calc(-1*var(--ck-switch-button-translation)))}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(36);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-toolbar-dropdown .ck.ck-toolbar .ck.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar-dropdown .ck-dropdown__panel .ck-button:focus{z-index:calc(var(--ck-z-default) + 1)}.ck.ck-toolbar-dropdown .ck-toolbar{border:0}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(38);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-dropdown .ck-dropdown__panel .ck-list{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list,.ck.ck-dropdown .ck-dropdown__panel .ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-top-right-radius:0}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(40);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-toolbar{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-flow:row nowrap;align-items:center}.ck.ck-toolbar>.ck-toolbar__items{display:flex;flex-flow:row wrap;align-items:center;flex-grow:1}.ck.ck-toolbar .ck.ck-toolbar__separator{display:inline-block}.ck.ck-toolbar .ck.ck-toolbar__separator:first-child,.ck.ck-toolbar .ck.ck-toolbar__separator:last-child{display:none}.ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar.ck-toolbar_vertical>.ck-toolbar__items{flex-direction:column}.ck.ck-toolbar.ck-toolbar_floating>.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown>.ck-dropdown__button .ck-dropdown__arrow{display:none}.ck.ck-toolbar{border-radius:0}.ck-rounded-corners .ck.ck-toolbar,.ck.ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-toolbar{background:var(--ck-color-toolbar-background);padding:0 var(--ck-spacing-small);border:1px solid var(--ck-color-toolbar-border)}.ck.ck-toolbar .ck.ck-toolbar__separator{align-self:stretch;width:1px;min-width:1px;margin-top:0;margin-bottom:0;background:var(--ck-color-toolbar-border)}.ck.ck-toolbar>.ck-toolbar__items>*{margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small);margin-right:var(--ck-spacing-small)}.ck.ck-toolbar>.ck-toolbar__items:empty+.ck.ck-toolbar__separator{display:none}.ck.ck-toolbar>.ck-toolbar__items>*,.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown{margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck.ck-toolbar.ck-toolbar_vertical{padding:0}.ck.ck-toolbar.ck-toolbar_vertical>.ck-toolbar__items>.ck{width:100%;margin:0;border-radius:0;border:0}.ck.ck-toolbar.ck-toolbar_compact{padding:0}.ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>*{margin:0}.ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>:not(:first-child):not(:last-child){border-radius:0}.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown>.ck.ck-button.ck-dropdown__button{padding-left:var(--ck-spacing-tiny)}.ck-toolbar-container .ck.ck-toolbar{border:0}.ck.ck-toolbar[dir=rtl]>.ck-toolbar__items>.ck,[dir=rtl] .ck.ck-toolbar>.ck-toolbar__items>.ck{margin-right:0}.ck.ck-toolbar[dir=rtl]:not(.ck-toolbar_compact)>.ck-toolbar__items>.ck,[dir=rtl] .ck.ck-toolbar:not(.ck-toolbar_compact)>.ck-toolbar__items>.ck{margin-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=rtl]>.ck-toolbar__items>.ck:last-child,[dir=rtl] .ck.ck-toolbar>.ck-toolbar__items>.ck:last-child{margin-left:0}.ck.ck-toolbar[dir=rtl].ck-toolbar_compact>.ck-toolbar__items>.ck:first-child,[dir=rtl] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:first-child{border-top-left-radius:0;border-bottom-left-radius:0}.ck.ck-toolbar[dir=rtl].ck-toolbar_compact>.ck-toolbar__items>.ck:last-child,[dir=rtl] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:last-child{border-top-right-radius:0;border-bottom-right-radius:0}.ck.ck-toolbar[dir=rtl]>.ck.ck-toolbar__separator,[dir=rtl] .ck.ck-toolbar>.ck.ck-toolbar__separator{margin-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=rtl].ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child),[dir=rtl] .ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child){margin-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=ltr]>.ck-toolbar__items>.ck:last-child,[dir=ltr] .ck.ck-toolbar>.ck-toolbar__items>.ck:last-child{margin-right:0}.ck.ck-toolbar[dir=ltr].ck-toolbar_compact>.ck-toolbar__items>.ck:first-child,[dir=ltr] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:first-child{border-top-right-radius:0;border-bottom-right-radius:0}.ck.ck-toolbar[dir=ltr].ck-toolbar_compact>.ck-toolbar__items>.ck:last-child,[dir=ltr] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:last-child{border-top-left-radius:0;border-bottom-left-radius:0}.ck.ck-toolbar[dir=ltr]>.ck.ck-toolbar__separator,[dir=ltr] .ck.ck-toolbar>.ck.ck-toolbar__separator{margin-right:var(--ck-spacing-small)}.ck.ck-toolbar[dir=ltr].ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child),[dir=ltr] .ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child){margin-right:var(--ck-spacing-small)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(42);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-placeholder:before,.ck .ck-placeholder:before{content:attr(data-placeholder);pointer-events:none}.ck.ck-read-only .ck-placeholder:before{display:none}.ck.ck-placeholder:before,.ck .ck-placeholder:before{cursor:text;color:var(--ck-color-engine-placeholder-text)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(44);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-editor__editable:not(.ck-editor__nested-editable){border-radius:0}.ck-rounded-corners .ck.ck-editor__editable:not(.ck-editor__nested-editable),.ck.ck-editor__editable:not(.ck-editor__nested-editable).ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-editor__editable:not(.ck-editor__nested-editable).ck-focused{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0}.ck.ck-editor__editable_inline{overflow:auto;padding:0 var(--ck-spacing-standard);border:1px solid transparent}.ck.ck-editor__editable_inline[dir=ltr]{text-align:left}.ck.ck-editor__editable_inline[dir=rtl]{text-align:right}.ck.ck-editor__editable_inline>:first-child{margin-top:var(--ck-spacing-large)}.ck.ck-editor__editable_inline>:last-child{margin-bottom:var(--ck-spacing-large)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_n]:after{border-bottom-color:var(--ck-color-base-foreground)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_s]:after{border-top-color:var(--ck-color-base-foreground)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(46);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck-content blockquote{overflow:hidden;padding-right:1.5em;padding-left:1.5em;margin-left:0;margin-right:0;font-style:italic;border-left:5px solid #ccc}.ck-content[dir=rtl] blockquote{border-left:0;border-right:5px solid #ccc}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(48);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-color-grid{display:grid}:root{--ck-color-grid-tile-size:24px;--ck-color-color-grid-check-icon:#000}.ck.ck-color-grid{grid-gap:5px;padding:8px}.ck.ck-color-grid__tile{width:var(--ck-color-grid-tile-size);height:var(--ck-color-grid-tile-size);min-width:var(--ck-color-grid-tile-size);min-height:var(--ck-color-grid-tile-size);padding:0;transition:box-shadow .2s ease;border:0}.ck.ck-color-grid__tile.ck-disabled{cursor:unset;transition:unset}.ck.ck-color-grid__tile.ck-color-table__color-tile_bordered{box-shadow:0 0 0 1px var(--ck-color-base-border)}.ck.ck-color-grid__tile .ck.ck-icon{display:none;color:var(--ck-color-color-grid-check-icon)}.ck.ck-color-grid__tile.ck-on{box-shadow:inset 0 0 0 1px var(--ck-color-base-background),0 0 0 2px var(--ck-color-base-text)}.ck.ck-color-grid__tile.ck-on .ck.ck-icon{display:block}.ck.ck-color-grid__tile.ck-on,.ck.ck-color-grid__tile:focus:not(.ck-disabled),.ck.ck-color-grid__tile:hover:not(.ck-disabled){border:0}.ck.ck-color-grid__tile:focus:not(.ck-disabled),.ck.ck-color-grid__tile:hover:not(.ck-disabled){box-shadow:inset 0 0 0 1px var(--ck-color-base-background),0 0 0 2px var(--ck-color-focus-border)}.ck.ck-color-grid__label{padding:0 var(--ck-spacing-standard)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(50);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-label{display:block}.ck.ck-voice-label{display:none}.ck.ck-label{font-weight:700}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(52);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck .ck-button.ck-color-table__remove-color{display:flex;align-items:center;width:100%}label.ck.ck-color-grid__label{font-weight:unset}.ck .ck-button.ck-color-table__remove-color{padding:calc(var(--ck-spacing-standard)/2) var(--ck-spacing-standard);border-bottom-left-radius:0;border-bottom-right-radius:0}.ck .ck-button.ck-color-table__remove-color:not(:focus){border-bottom:1px solid var(--ck-color-base-border)}[dir=ltr] .ck .ck-button.ck-color-table__remove-color .ck.ck-icon{margin-right:var(--ck-spacing-standard)}[dir=rtl] .ck .ck-button.ck-color-table__remove-color .ck.ck-icon{margin-left:var(--ck-spacing-standard)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(54);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".text-tiny{font-size:.7em}.text-small{font-size:.85em}.text-big{font-size:1.4em}.text-huge{font-size:1.8em}"
    }, function (t, e) {
        t.exports = ".ck.ck-heading_heading1{font-size:20px}.ck.ck-heading_heading2{font-size:17px}.ck.ck-heading_heading3{font-size:14px}.ck[class*=ck-heading_heading]{font-weight:700}.ck.ck-dropdown.ck-heading-dropdown .ck-dropdown__button .ck-button__label{width:8em}.ck.ck-dropdown.ck-heading-dropdown .ck-dropdown__panel .ck-list__item{min-width:18em}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(57);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck-editor__editable .ck-horizontal-line{overflow:hidden}.ck-content hr{border:solid #5e5e5e;border-width:1px 0 0;margin:0}.ck-editor__editable .ck-horizontal-line{padding:5px 0}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(59);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ":root{--ck-color-resizer:var(--ck-color-focus-border);--ck-resizer-size:10px;--ck-resizer-border-width:1px;--ck-resizer-border-radius:2px;--ck-resizer-offset:calc(var(--ck-resizer-size)/-2 - 2px);--ck-resizer-tooltip-offset:10px;--ck-color-resizer-tooltip-background:#262626;--ck-color-resizer-tooltip-text:#f2f2f2}.ck .ck-widget.ck-widget_with-selection-handle{position:relative}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{position:absolute}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon{display:block}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected .ck-widget__selection-handle,.ck .ck-widget.ck-widget_with-selection-handle:hover .ck-widget__selection-handle{visibility:visible}.ck .ck-size-view{background:var(--ck-color-resizer-tooltip-background);color:var(--ck-color-resizer-tooltip-text);border:1px solid var(--ck-color-resizer-tooltip-text);border-radius:var(--ck-resizer-border-radius);font-size:var(--ck-font-size-tiny);display:block;padding:var(--ck-spacing-small)}.ck .ck-size-view.ck-orientation-bottom-left,.ck .ck-size-view.ck-orientation-bottom-right,.ck .ck-size-view.ck-orientation-top-left,.ck .ck-size-view.ck-orientation-top-right{position:absolute}.ck .ck-size-view.ck-orientation-top-left{top:var(--ck-resizer-tooltip-offset);left:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-top-right{top:var(--ck-resizer-tooltip-offset);right:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-bottom-right{bottom:var(--ck-resizer-tooltip-offset);right:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-bottom-left{bottom:var(--ck-resizer-tooltip-offset);left:var(--ck-resizer-tooltip-offset)}:root{--ck-widget-outline-thickness:3px;--ck-widget-handler-icon-size:16px;--ck-widget-handler-animation-duration:200ms;--ck-widget-handler-animation-curve:ease;--ck-color-widget-blurred-border:#dedede;--ck-color-widget-hover-border:#ffc83d;--ck-color-widget-editable-focus-background:var(--ck-color-base-background);--ck-color-widget-drag-handler-icon-color:var(--ck-color-base-background)}.ck .ck-widget{outline-width:var(--ck-widget-outline-thickness);outline-style:solid;outline-color:transparent;transition:outline-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_selected,.ck .ck-widget.ck-widget_selected:hover{outline:var(--ck-widget-outline-thickness) solid var(--ck-color-focus-border)}.ck .ck-widget:hover{outline-color:var(--ck-color-widget-hover-border)}.ck .ck-editor__nested-editable{border:1px solid transparent}.ck .ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck .ck-editor__nested-editable:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0;background-color:var(--ck-color-widget-editable-focus-background)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{padding:4px;box-sizing:border-box;background-color:transparent;opacity:0;transition:background-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),visibility var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),opacity var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve);border-radius:var(--ck-border-radius) var(--ck-border-radius) 0 0;transform:translateY(-100%);left:calc(0px - var(--ck-widget-outline-thickness))}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon{width:var(--ck-widget-handler-icon-size);height:var(--ck-widget-handler-icon-size);color:var(--ck-color-widget-drag-handler-icon-color)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator{opacity:0;transition:opacity .3s var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle:hover .ck-icon .ck-icon__selected-indicator{opacity:1}.ck .ck-widget.ck-widget_with-selection-handle:hover .ck-widget__selection-handle{opacity:1;background-color:var(--ck-color-widget-hover-border)}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected .ck-widget__selection-handle,.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected:hover .ck-widget__selection-handle{opacity:1;background-color:var(--ck-color-focus-border)}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected .ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator,.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected:hover .ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator{opacity:1}.ck-editor__editable>.ck-widget.ck-widget_with-selection-handle:first-child,.ck-editor__editable blockquote>.ck-widget.ck-widget_with-selection-handle:first-child{margin-top:calc(1em + var(--ck-widget-handler-icon-size))}.ck[dir=rtl] .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{left:auto;right:calc(0px - var(--ck-widget-outline-thickness))}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover{outline-color:var(--ck-color-widget-blurred-border)}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected.ck-widget_with-selection-handle .ck-widget__selection-handle,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected.ck-widget_with-selection-handle .ck-widget__selection-handle:hover,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover.ck-widget_with-selection-handle .ck-widget__selection-handle,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover.ck-widget_with-selection-handle .ck-widget__selection-handle:hover{background:var(--ck-color-widget-blurred-border)}.ck-editor__editable.ck-read-only .ck-widget{--ck-widget-outline-thickness:0}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(61);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-labeled-input .ck-labeled-input__status{font-size:var(--ck-font-size-small);margin-top:var(--ck-spacing-small);white-space:normal}.ck.ck-labeled-input .ck-labeled-input__status_error{color:var(--ck-color-base-error)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(63);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ":root{--ck-input-text-width:18em}.ck.ck-input-text{border-radius:0}.ck-rounded-corners .ck.ck-input-text,.ck.ck-input-text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-input-text{box-shadow:var(--ck-inner-shadow),0 0;background:var(--ck-color-input-background);border:1px solid var(--ck-color-input-border);padding:var(--ck-spacing-extra-tiny) var(--ck-spacing-medium);min-width:var(--ck-input-text-width);min-height:var(--ck-ui-component-min-height);transition:box-shadow .2s ease-in-out,border .2s ease-in-out}.ck.ck-input-text:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),var(--ck-inner-shadow)}.ck.ck-input-text[readonly]{border:1px solid var(--ck-color-input-disabled-border);background:var(--ck-color-input-disabled-background);color:var(--ck-color-input-disabled-text)}.ck.ck-input-text[readonly]:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),var(--ck-inner-shadow)}.ck.ck-input-text.ck-error{border-color:var(--ck-color-input-error-border);animation:ck-text-input-shake .3s ease both}.ck.ck-input-text.ck-error:focus{box-shadow:var(--ck-focus-error-outer-shadow),var(--ck-inner-shadow)}@keyframes ck-text-input-shake{20%{transform:translateX(-2px)}40%{transform:translateX(2px)}60%{transform:translateX(-1px)}80%{transform:translateX(1px)}}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(65);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-text-alternative-form{display:flex;flex-direction:row;flex-wrap:nowrap}.ck.ck-text-alternative-form .ck-labeled-input{display:inline-block}.ck.ck-text-alternative-form .ck-label{display:none}@media screen and (max-width:600px){.ck.ck-text-alternative-form{flex-wrap:wrap}.ck.ck-text-alternative-form .ck-labeled-input{flex-basis:100%}.ck.ck-text-alternative-form .ck-button{flex-basis:50%}}.ck.ck-text-alternative-form{padding:var(--ck-spacing-standard)}.ck.ck-text-alternative-form:focus{outline:none}[dir=ltr] .ck.ck-text-alternative-form>:not(:first-child),[dir=rtl] .ck.ck-text-alternative-form>:not(:last-child){margin-left:var(--ck-spacing-standard)}@media screen and (max-width:600px){.ck.ck-text-alternative-form{padding:0;width:calc(0.8*var(--ck-input-text-width))}.ck.ck-text-alternative-form .ck-labeled-input{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) 0}.ck.ck-text-alternative-form .ck-labeled-input .ck-input-text{min-width:0;width:100%}.ck.ck-text-alternative-form .ck-button{padding:var(--ck-spacing-standard);margin-top:var(--ck-spacing-standard);border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border)}[dir=ltr] .ck.ck-text-alternative-form .ck-button{margin-left:0}[dir=ltr] .ck.ck-text-alternative-form .ck-button:first-of-type{border-right:1px solid var(--ck-color-base-border)}[dir=rtl] .ck.ck-text-alternative-form .ck-button{margin-left:0}[dir=rtl] .ck.ck-text-alternative-form .ck-button:last-of-type{border-right:1px solid var(--ck-color-base-border)}}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(67);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck-content .image{display:table;clear:both;text-align:center;margin:1em auto}.ck-content .image>img{display:block;margin:0 auto;max-width:100%;min-width:50px}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(69);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ":root{--ck-image-style-spacing:1.5em}.ck-content .image-style-align-center,.ck-content .image-style-align-left,.ck-content .image-style-align-right,.ck-content .image-style-side{max-width:50%}.ck-content .image-style-side{float:right;margin-left:var(--ck-image-style-spacing)}.ck-content .image-style-align-left{float:left;margin-right:var(--ck-image-style-spacing)}.ck-content .image-style-align-center{margin-left:auto;margin-right:auto}.ck-content .image-style-align-right{float:right;margin-left:var(--ck-image-style-spacing)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(71);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck .ck-widget_with-resizer{position:relative}.ck .ck-widget__resizer{display:none;position:absolute;pointer-events:none;left:0;top:0;outline:1px solid var(--ck-color-resizer)}.ck-focused .ck-widget_with-resizer.ck-widget_selected>.ck-widget__resizer{display:block}.ck .ck-widget__resizer__handle{position:absolute;pointer-events:all;width:var(--ck-resizer-size);height:var(--ck-resizer-size);background:var(--ck-color-focus-border);border:var(--ck-resizer-border-width) solid #fff;border-radius:var(--ck-resizer-border-radius)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-left{top:var(--ck-resizer-offset);left:var(--ck-resizer-offset);cursor:nwse-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-right{top:var(--ck-resizer-offset);right:var(--ck-resizer-offset);cursor:nesw-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-right{bottom:var(--ck-resizer-offset);right:var(--ck-resizer-offset);cursor:nwse-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-left{bottom:var(--ck-resizer-offset);left:var(--ck-resizer-offset);cursor:nesw-resize}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(73);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck-content .image.image_resized{max-width:100%;display:block;box-sizing:border-box}.ck-content .image.image_resized img{width:100%}.ck-content .image.image_resized>figcaption{display:block}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(75);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-editor__editable .image{position:relative}.ck.ck-editor__editable .image .ck-progress-bar{position:absolute;top:0;left:0}.ck.ck-editor__editable .image.ck-appear{animation:fadeIn .7s}.ck.ck-editor__editable .image .ck-progress-bar{height:2px;width:0;background:var(--ck-color-upload-bar-background);transition:width .1s}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(77);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = '.ck-image-upload-complete-icon{display:block;position:absolute;top:10px;right:10px;border-radius:50%}.ck-image-upload-complete-icon:after{content:"";position:absolute}:root{--ck-color-image-upload-icon:#fff;--ck-color-image-upload-icon-background:#008a00;--ck-image-upload-icon-size:20px;--ck-image-upload-icon-width:2px}.ck-image-upload-complete-icon{width:var(--ck-image-upload-icon-size);height:var(--ck-image-upload-icon-size);opacity:0;background:var(--ck-color-image-upload-icon-background);animation-name:ck-upload-complete-icon-show,ck-upload-complete-icon-hide;animation-fill-mode:forwards,forwards;animation-duration:.5s,.5s;font-size:var(--ck-image-upload-icon-size);animation-delay:0ms,3s}.ck-image-upload-complete-icon:after{left:25%;top:50%;opacity:0;height:0;width:0;transform:scaleX(-1) rotate(135deg);transform-origin:left top;border-top:var(--ck-image-upload-icon-width) solid var(--ck-color-image-upload-icon);border-right:var(--ck-image-upload-icon-width) solid var(--ck-color-image-upload-icon);animation-name:ck-upload-complete-icon-check;animation-duration:.5s;animation-delay:.5s;animation-fill-mode:forwards;box-sizing:border-box}@keyframes ck-upload-complete-icon-show{0%{opacity:0}to{opacity:1}}@keyframes ck-upload-complete-icon-hide{0%{opacity:1}to{opacity:0}}@keyframes ck-upload-complete-icon-check{0%{opacity:1;width:0;height:0}33%{width:.3em;height:0}to{opacity:1;width:.3em;height:.45em}}'
    }, function (t, e, i) {
        var n = i(1);
        var o = i(79);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = '.ck .ck-upload-placeholder-loader{position:absolute;display:flex;align-items:center;justify-content:center;top:0;left:0}.ck .ck-upload-placeholder-loader:before{content:"";position:relative}:root{--ck-color-upload-placeholder-loader:#b3b3b3;--ck-upload-placeholder-loader-size:32px}.ck .ck-image-upload-placeholder{width:100%;margin:0}.ck .ck-upload-placeholder-loader{width:100%;height:100%}.ck .ck-upload-placeholder-loader:before{width:var(--ck-upload-placeholder-loader-size);height:var(--ck-upload-placeholder-loader-size);border-radius:50%;border-top:3px solid var(--ck-color-upload-placeholder-loader);border-right:2px solid transparent;animation:ck-upload-placeholder-loader 1s linear infinite}@keyframes ck-upload-placeholder-loader{to{transform:rotate(1turn)}}'
    }, function (t, e, i) {
        var n = i(1);
        var o = i(81);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck .ck-link_selected{background:var(--ck-color-link-selected-background)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(83);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-link-form{display:flex}.ck.ck-link-form .ck-label{display:none}@media screen and (max-width:600px){.ck.ck-link-form{flex-wrap:wrap}.ck.ck-link-form .ck-labeled-input{flex-basis:100%}.ck.ck-link-form .ck-button{flex-basis:50%}}.ck.ck-link-form_layout-vertical{display:block}.ck.ck-link-form{padding:var(--ck-spacing-standard)}.ck.ck-link-form:focus{outline:none}[dir=ltr] .ck.ck-link-form>:not(:first-child),[dir=rtl] .ck.ck-link-form>:not(:last-child){margin-left:var(--ck-spacing-standard)}@media screen and (max-width:600px){.ck.ck-link-form{padding:0;width:calc(0.8*var(--ck-input-text-width))}.ck.ck-link-form .ck-labeled-input{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) 0}.ck.ck-link-form .ck-labeled-input .ck-input-text{min-width:0;width:100%}.ck.ck-link-form .ck-button{padding:var(--ck-spacing-standard);margin-top:var(--ck-spacing-standard);border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border)}[dir=ltr] .ck.ck-link-form .ck-button{margin-left:0}[dir=ltr] .ck.ck-link-form .ck-button:first-of-type{border-right:1px solid var(--ck-color-base-border)}[dir=rtl] .ck.ck-link-form .ck-button{margin-left:0}[dir=rtl] .ck.ck-link-form .ck-button:last-of-type{border-right:1px solid var(--ck-color-base-border)}}.ck.ck-link-form_layout-vertical{padding:0;min-width:var(--ck-input-text-width)}.ck.ck-link-form_layout-vertical .ck-labeled-input{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) var(--ck-spacing-small)}.ck.ck-link-form_layout-vertical .ck-labeled-input .ck-input-text{min-width:0;width:100%}.ck.ck-link-form_layout-vertical .ck-button{padding:var(--ck-spacing-standard);margin:0;border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border);width:50%}[dir=ltr] .ck.ck-link-form_layout-vertical .ck-button{margin-left:0}[dir=ltr] .ck.ck-link-form_layout-vertical .ck-button:first-of-type{border-right:1px solid var(--ck-color-base-border)}[dir=rtl] .ck.ck-link-form_layout-vertical .ck-button{margin-left:0}[dir=rtl] .ck.ck-link-form_layout-vertical .ck-button:last-of-type{border-right:1px solid var(--ck-color-base-border)}.ck.ck-link-form_layout-vertical .ck.ck-list{margin-left:0}.ck.ck-link-form_layout-vertical .ck.ck-list .ck-button.ck-switchbutton{border:0;width:100%}.ck.ck-link-form_layout-vertical .ck.ck-list .ck-button.ck-switchbutton:hover{background:none}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(85);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-link-actions{display:flex;flex-direction:row;flex-wrap:nowrap}.ck.ck-link-actions .ck-link-actions__preview{display:inline-block}.ck.ck-link-actions .ck-link-actions__preview .ck-button__label{overflow:hidden}@media screen and (max-width:600px){.ck.ck-link-actions{flex-wrap:wrap}.ck.ck-link-actions .ck-link-actions__preview{flex-basis:100%}.ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){flex-basis:50%}}.ck.ck-link-actions{padding:var(--ck-spacing-standard)}.ck.ck-link-actions .ck-button.ck-link-actions__preview{padding-left:0;padding-right:0}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label{padding:0 var(--ck-spacing-medium);color:var(--ck-color-link-default);text-overflow:ellipsis;cursor:pointer;max-width:var(--ck-input-text-width);min-width:3em;text-align:center}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label:hover{text-decoration:underline}.ck.ck-link-actions .ck-button.ck-link-actions__preview,.ck.ck-link-actions .ck-button.ck-link-actions__preview:active,.ck.ck-link-actions .ck-button.ck-link-actions__preview:focus,.ck.ck-link-actions .ck-button.ck-link-actions__preview:hover{background:none}.ck.ck-link-actions .ck-button.ck-link-actions__preview:active{box-shadow:none}.ck.ck-link-actions .ck-button.ck-link-actions__preview:focus .ck-button__label{text-decoration:underline}.ck.ck-link-actions:focus{outline:none}[dir=ltr] .ck.ck-link-actions .ck-button:not(:first-child),[dir=rtl] .ck.ck-link-actions .ck-button:not(:last-child){margin-left:var(--ck-spacing-standard)}@media screen and (max-width:600px){.ck.ck-link-actions{padding:0;width:calc(0.8*var(--ck-input-text-width))}.ck.ck-link-actions .ck-button.ck-link-actions__preview{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) 0}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label{min-width:0;max-width:100%}.ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){padding:var(--ck-spacing-standard);margin-top:var(--ck-spacing-standard);border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border)}[dir=ltr] .ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){margin-left:0}[dir=ltr] .ck.ck-link-actions .ck-button:not(.ck-link-actions__preview):first-of-type{border-right:1px solid var(--ck-color-base-border)}[dir=rtl] .ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){margin-left:0}[dir=rtl] .ck.ck-link-actions .ck-button:not(.ck-link-actions__preview):last-of-type{border-right:1px solid var(--ck-color-base-border)}}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(87);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-character-grid .ck-character-grid__tiles{display:grid;grid-template-columns:repeat(10,1fr)}:root{--ck-character-grid-tile-size:24px}.ck.ck-character-grid{overflow-y:auto;overflow-x:hidden;width:350px;max-height:200px}.ck.ck-character-grid .ck-character-grid__tiles{margin:var(--ck-spacing-standard);grid-gap:var(--ck-spacing-standard)}.ck.ck-character-grid .ck-character-grid__tile{width:var(--ck-character-grid-tile-size);height:var(--ck-character-grid-tile-size);min-width:var(--ck-character-grid-tile-size);min-height:var(--ck-character-grid-tile-size);font-size:1.2em;padding:0;transition:box-shadow .2s ease;border:0}.ck.ck-character-grid .ck-character-grid__tile:focus:not(.ck-disabled),.ck.ck-character-grid .ck-character-grid__tile:hover:not(.ck-disabled){border:0;box-shadow:inset 0 0 0 1px var(--ck-color-base-background),0 0 0 2px var(--ck-color-focus-border)}.ck.ck-character-grid .ck-character-grid__tile .ck-button__label{line-height:var(--ck-character-grid-tile-size);width:100%;text-align:center}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(89);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-character-info{display:flex;justify-content:space-between;padding:var(--ck-spacing-small) var(--ck-spacing-standard);border-top:1px solid var(--ck-color-base-border)}.ck.ck-character-info>*{text-transform:uppercase;font-size:var(--ck-font-size-small)}.ck.ck-character-info .ck-character-info__name{max-width:280px;text-overflow:ellipsis;overflow:hidden}.ck.ck-character-info .ck-character-info__code{opacity:.6}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(91);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-special-characters-navigation{display:flex;flex-direction:row;flex-wrap:nowrap;align-items:center;justify-content:space-between;border-bottom:1px solid var(--ck-color-base-border);padding:var(--ck-spacing-standard)}[dir=ltr] .ck.ck-special-characters-navigation{padding-left:var(--ck-spacing-large)}[dir=rtl] .ck.ck-special-characters-navigation{padding-right:var(--ck-spacing-large)}.ck.ck-special-characters-navigation>.ck-label{max-width:160px;text-overflow:ellipsis;overflow:hidden}.ck.ck-special-characters-navigation>.ck-dropdown .ck-dropdown__panel{max-height:250px;overflow-y:auto;overflow-x:hidden}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(93);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ":root{--ck-color-table-focused-cell-background:rgba(158,207,250,0.3)}.ck-widget.table td.ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck-widget.table td.ck-editor__nested-editable:focus,.ck-widget.table th.ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck-widget.table th.ck-editor__nested-editable:focus{background:var(--ck-color-table-focused-cell-background);border-style:none;outline:1px solid var(--ck-color-focus-border);outline-offset:-1px}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(95);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck .ck-insert-table-dropdown__grid{display:flex;flex-direction:row;flex-wrap:wrap}:root{--ck-insert-table-dropdown-padding:10px;--ck-insert-table-dropdown-box-height:11px;--ck-insert-table-dropdown-box-width:12px;--ck-insert-table-dropdown-box-margin:1px}.ck .ck-insert-table-dropdown__grid{width:calc(var(--ck-insert-table-dropdown-box-width)*10 + var(--ck-insert-table-dropdown-box-margin)*20 + var(--ck-insert-table-dropdown-padding)*2);padding:var(--ck-insert-table-dropdown-padding) var(--ck-insert-table-dropdown-padding) 0}.ck .ck-insert-table-dropdown__label{text-align:center}.ck .ck-insert-table-dropdown-grid-box{width:var(--ck-insert-table-dropdown-box-width);height:var(--ck-insert-table-dropdown-box-height);margin:var(--ck-insert-table-dropdown-box-margin);border:1px solid var(--ck-color-base-border);border-radius:1px}.ck .ck-insert-table-dropdown-grid-box.ck-on{border-color:var(--ck-color-focus-border);background:var(--ck-color-focus-outer-shadow)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(97);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ":root{--ck-table-selected-cell-background:#cee5fd}.ck.ck-editor__editable .table table td.ck-editor__editable_selected,.ck.ck-editor__editable .table table th.ck-editor__editable_selected{background-color:var(--ck-table-selected-cell-background)!important;caret-color:transparent;outline:unset;box-shadow:unset}.ck.ck-editor__editable .table table td.ck-editor__editable_selected ::selection,.ck.ck-editor__editable .table table th.ck-editor__editable_selected ::selection{background-color:transparent}.ck.ck-editor__editable .table table td.ck-editor__editable_selected .ck-widget_selected,.ck.ck-editor__editable .table table th.ck-editor__editable_selected .ck-widget_selected{outline:unset}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(99);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck-content .table{margin:1em auto;display:table}.ck-content .table table{border-collapse:collapse;border-spacing:0;width:100%;height:100%;border:1px double #b3b3b3}.ck-content .table table td,.ck-content .table table th{min-width:2em;padding:.4em;border-color:#bfbfbf}.ck-content .table table th{font-weight:700;background:hsla(0,0%,0%,5%)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(101);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-labeled-view .ck-labeled-view__status{font-size:var(--ck-font-size-small);margin-top:var(--ck-spacing-small);white-space:normal}.ck.ck-labeled-view .ck-labeled-view__status_error{color:var(--ck-color-base-error)}.ck.ck-labeled-view>.ck.ck-label{width:100%;text-overflow:ellipsis;overflow:hidden}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(103);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-input-color{width:100%;display:flex}.ck.ck-input-color>input.ck.ck-input-text{min-width:auto;flex-grow:1}.ck.ck-input-color>input.ck.ck-input-text:active,.ck.ck-input-color>input.ck.ck-input-text:focus{z-index:var(--ck-z-default)}.ck.ck-input-color>div.ck.ck-dropdown{min-width:auto}.ck.ck-input-color>div.ck.ck-dropdown>.ck-input-color__button .ck-dropdown__arrow{display:none}.ck.ck-input-color .ck.ck-input-color__button .ck.ck-input-color__button__preview{position:relative;overflow:hidden}.ck.ck-input-color .ck.ck-input-color__button .ck.ck-input-color__button__preview>.ck.ck-input-color__button__preview__no-color-indicator{position:absolute;display:block}[dir=ltr] .ck.ck-input-color>.ck.ck-input-text{border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .ck.ck-input-color>.ck.ck-input-text{border-top-left-radius:0;border-bottom-left-radius:0}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button{padding:0}[dir=ltr] .ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button{border-top-left-radius:0;border-bottom-left-radius:0;margin-left:-1px}[dir=rtl] .ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button{border-top-right-radius:0;border-bottom-right-radius:0;margin-right:-1px}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button.ck-disabled{background:var(--ck-color-input-disabled-background)}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button>.ck.ck-input-color__button__preview{border-radius:0}.ck-rounded-corners .ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button>.ck.ck-input-color__button__preview,.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button>.ck.ck-input-color__button__preview.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button>.ck.ck-input-color__button__preview{width:20px;height:20px;border:1px solid var(--ck-color-input-border)}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button>.ck.ck-input-color__button__preview>.ck.ck-input-color__button__preview__no-color-indicator{top:-30%;left:50%;height:150%;width:8%;background:red;border-radius:2px;transform:rotate(45deg);transform-origin:50%}.ck.ck-input-color .ck.ck-input-color__remove-color{width:100%;border-bottom:1px solid var(--ck-color-input-border);padding:calc(var(--ck-spacing-standard)/2) var(--ck-spacing-standard);border-bottom-left-radius:0;border-bottom-right-radius:0}[dir=ltr] .ck.ck-input-color .ck.ck-input-color__remove-color{border-top-right-radius:0}[dir=rtl] .ck.ck-input-color .ck.ck-input-color__remove-color{border-top-left-radius:0}.ck.ck-input-color .ck.ck-input-color__remove-color .ck.ck-icon{margin-right:var(--ck-spacing-standard)}[dir=rtl] .ck.ck-input-color .ck.ck-input-color__remove-color .ck.ck-icon{margin-right:0;margin-left:var(--ck-spacing-standard)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(105);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-form__row{display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:space-between}.ck.ck-form__row>:not(.ck-label){flex-grow:1}.ck.ck-form__row.ck-table-form__action-row .ck-button-cancel,.ck.ck-form__row.ck-table-form__action-row .ck-button-save{justify-content:center}.ck.ck-form__row{padding:var(--ck-spacing-standard) var(--ck-spacing-large) 0}[dir=ltr] .ck.ck-form__row>:not(.ck-label)+*{margin-left:var(--ck-spacing-large)}[dir=rtl] .ck.ck-form__row>:not(.ck-label)+*{margin-right:var(--ck-spacing-large)}.ck.ck-form__row>.ck-label{width:100%;min-width:100%}.ck.ck-form__row.ck-table-form__action-row{margin-top:var(--ck-spacing-large)}.ck.ck-form__row.ck-table-form__action-row .ck-button .ck-button__label{color:var(--ck-color-text)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(107);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ":root{--ck-table-form-header-height:38px}.ck.ck-form__header{padding:0 var(--ck-spacing-large);height:var(--ck-table-form-header-height);line-height:var(--ck-table-form-header-height);border-bottom:1px solid var(--ck-color-base-border)}.ck.ck-form__header .ck-form__header__label{font-weight:700}"
    }, function (t, e) {
        t.exports = ".ck.ck-form{padding:0 0 var(--ck-spacing-large)}.ck.ck-form:focus{outline:none}.ck.ck-form .ck.ck-input-text{min-width:100%;width:0}.ck.ck-form .ck.ck-dropdown{min-width:100%}.ck.ck-form .ck.ck-dropdown .ck-dropdown__button:not(:focus){border:1px solid var(--ck-color-base-border)}.ck.ck-form .ck.ck-dropdown .ck-dropdown__button .ck-button__label{width:100%}"
    }, function (t, e) {
        t.exports = '.ck.ck-table-form .ck-form__row.ck-table-form__border-row{flex-wrap:wrap}.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-labeled-view{display:flex;flex-direction:column-reverse}.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-labeled-view .ck.ck-dropdown,.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-table-form__border-style,.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-table-form__border-width{flex-grow:0}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row{flex-wrap:wrap;align-items:center}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-labeled-view{display:flex;flex-direction:column-reverse;align-items:center}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-labeled-view .ck.ck-dropdown,.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-table-form__dimension-operator{flex-grow:0}.ck.ck-table-form .ck.ck-labeled-view{position:relative}.ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status{position:absolute;left:50%;bottom:calc(-1*var(--ck-table-properties-error-arrow-size));transform:translate(-50%,100%);z-index:1}.ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status:after{content:"";position:absolute;top:calc(-1*var(--ck-table-properties-error-arrow-size));left:50%;transform:translateX(-50%)}:root{--ck-table-properties-error-arrow-size:6px;--ck-table-properties-min-error-width:150px}.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-labeled-view>.ck-label{font-size:var(--ck-font-size-tiny);text-align:center}.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-table-form__border-style{width:80px;min-width:80px}.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-table-form__border-width{width:50px;min-width:50px}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row{padding:0}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-labeled-view>.ck-label{font-size:10px;text-align:center}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-table-form__dimensions-row__height,.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-table-form__dimensions-row__width{margin:0}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-table-form__dimension-operator{align-self:start;display:inline-block;height:var(--ck-ui-component-min-height);line-height:var(--ck-ui-component-min-height);margin:0 var(--ck-spacing-small)}.ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status{border-radius:0}.ck-rounded-corners .ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status,.ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status{background:var(--ck-color-base-error);color:var(--ck-color-base-background);padding:var(--ck-spacing-small) var(--ck-spacing-medium);min-width:var(--ck-table-properties-min-error-width);text-align:center}.ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status:after{border-left:var(--ck-table-properties-error-arrow-size) solid transparent;border-bottom:var(--ck-table-properties-error-arrow-size) solid var(--ck-color-base-error);border-right:var(--ck-table-properties-error-arrow-size) solid transparent;border-top:0 solid transparent}.ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status{animation:ck-table-form-labeled-view-status-appear .15s ease both}.ck.ck-table-form .ck.ck-labeled-view .ck-input.ck-error:not(:focus)+.ck.ck-labeled-view__status{display:none}@keyframes ck-table-form-labeled-view-status-appear{0%{opacity:0}to{opacity:1}}'
    }, function (t, e, i) {
        var n = i(1);
        var o = i(111);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-table-cell-properties-form .ck-form__row.ck-table-cell-properties-form__alignment-row{flex-wrap:wrap}.ck.ck-table-cell-properties-form .ck-form__row.ck-table-cell-properties-form__alignment-row .ck.ck-toolbar{flex-grow:0}.ck.ck-table-cell-properties-form{width:320px}.ck.ck-table-cell-properties-form .ck-form__row.ck-table-cell-properties-form__padding-row{padding:0;width:35%}.ck.ck-table-cell-properties-form .ck-form__row.ck-table-cell-properties-form__alignment-row .ck.ck-toolbar{background:none}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(113);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row{flex-wrap:wrap;flex-basis:0;align-content:baseline}.ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row .ck.ck-toolbar .ck-toolbar__items{flex-wrap:nowrap}.ck.ck-table-properties-form{width:320px}.ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row{padding:0}.ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row .ck.ck-toolbar{background:none}.ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row .ck.ck-toolbar .ck-toolbar__items>*{width:40px}"
    }, function (t, e, i) {
        "use strict";
        i.r(e);
        i.d(e, "default", (function () {
            return _I
        }));
        var n = i(3);
        var o = n["a"].Symbol;
        var r = o;
        var s = Object.prototype;
        var a = s.hasOwnProperty;
        var c = s.toString;
        var l = r ? r.toStringTag : undefined;

        function d(t) {
            var e = a.call(t, l), i = t[l];
            try {
                t[l] = undefined;
                var n = true
            } catch (t) {
            }
            var o = c.call(t);
            if (n) {
                if (e) {
                    t[l] = i
                } else {
                    delete t[l]
                }
            }
            return o
        }

        var u = d;
        var h = Object.prototype;
        var f = h.toString;

        function g(t) {
            return f.call(t)
        }

        var m = g;
        var p = "[object Null]", b = "[object Undefined]";
        var w = r ? r.toStringTag : undefined;

        function k(t) {
            if (t == null) {
                return t === undefined ? b : p
            }
            return w && w in Object(t) ? u(t) : m(t)
        }

        var _ = k;

        function v(t, e) {
            return function (i) {
                return t(e(i))
            }
        }

        var y = v;
        var x = y(Object.getPrototypeOf, Object);
        var C = x;

        function A(t) {
            return t != null && typeof t == "object"
        }

        var T = A;
        var P = "[object Object]";
        var S = Function.prototype, E = Object.prototype;
        var R = S.toString;
        var O = E.hasOwnProperty;
        var I = R.call(Object);

        function V(t) {
            if (!T(t) || _(t) != P) {
                return false
            }
            var e = C(t);
            if (e === null) {
                return true
            }
            var i = O.call(e, "constructor") && e.constructor;
            return typeof i == "function" && i instanceof i && R.call(i) == I
        }

        var N = V;

        function M() {
            this.__data__ = [];
            this.size = 0
        }

        var B = M;

        function z(t, e) {
            return t === e || t !== t && e !== e
        }

        var L = z;

        function F(t, e) {
            var i = t.length;
            while (i--) {
                if (L(t[i][0], e)) {
                    return i
                }
            }
            return -1
        }

        var D = F;
        var j = Array.prototype;
        var H = j.splice;

        function W(t) {
            var e = this.__data__, i = D(e, t);
            if (i < 0) {
                return false
            }
            var n = e.length - 1;
            if (i == n) {
                e.pop()
            } else {
                H.call(e, i, 1)
            }
            --this.size;
            return true
        }

        var q = W;

        function U(t) {
            var e = this.__data__, i = D(e, t);
            return i < 0 ? undefined : e[i][1]
        }

        var $ = U;

        function G(t) {
            return D(this.__data__, t) > -1
        }

        var K = G;

        function J(t, e) {
            var i = this.__data__, n = D(i, t);
            if (n < 0) {
                ++this.size;
                i.push([t, e])
            } else {
                i[n][1] = e
            }
            return this
        }

        var Y = J;

        function Q(t) {
            var e = -1, i = t == null ? 0 : t.length;
            this.clear();
            while (++e < i) {
                var n = t[e];
                this.set(n[0], n[1])
            }
        }

        Q.prototype.clear = B;
        Q.prototype["delete"] = q;
        Q.prototype.get = $;
        Q.prototype.has = K;
        Q.prototype.set = Y;
        var X = Q;

        function Z() {
            this.__data__ = new X;
            this.size = 0
        }

        var tt = Z;

        function et(t) {
            var e = this.__data__, i = e["delete"](t);
            this.size = e.size;
            return i
        }

        var it = et;

        function nt(t) {
            return this.__data__.get(t)
        }

        var ot = nt;

        function rt(t) {
            return this.__data__.has(t)
        }

        var st = rt;

        function at(t) {
            var e = typeof t;
            return t != null && (e == "object" || e == "function")
        }

        var ct = at;
        var lt = "[object AsyncFunction]", dt = "[object Function]", ut = "[object GeneratorFunction]",
            ht = "[object Proxy]";

        function ft(t) {
            if (!ct(t)) {
                return false
            }
            var e = _(t);
            return e == dt || e == ut || e == lt || e == ht
        }

        var gt = ft;
        var mt = n["a"]["__core-js_shared__"];
        var pt = mt;
        var bt = function () {
            var t = /[^.]+$/.exec(pt && pt.keys && pt.keys.IE_PROTO || "");
            return t ? "Symbol(src)_1." + t : ""
        }();

        function wt(t) {
            return !!bt && bt in t
        }

        var kt = wt;
        var _t = Function.prototype;
        var vt = _t.toString;

        function yt(t) {
            if (t != null) {
                try {
                    return vt.call(t)
                } catch (t) {
                }
                try {
                    return t + ""
                } catch (t) {
                }
            }
            return ""
        }

        var xt = yt;
        var Ct = /[\\^$.*+?()[\]{}|]/g;
        var At = /^\[object .+?Constructor\]$/;
        var Tt = Function.prototype, Pt = Object.prototype;
        var St = Tt.toString;
        var Et = Pt.hasOwnProperty;
        var Rt = RegExp("^" + St.call(Et).replace(Ct, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");

        function Ot(t) {
            if (!ct(t) || kt(t)) {
                return false
            }
            var e = gt(t) ? Rt : At;
            return e.test(xt(t))
        }

        var It = Ot;

        function Vt(t, e) {
            return t == null ? undefined : t[e]
        }

        var Nt = Vt;

        function Mt(t, e) {
            var i = Nt(t, e);
            return It(i) ? i : undefined
        }

        var Bt = Mt;
        var zt = Bt(n["a"], "Map");
        var Lt = zt;
        var Ft = Bt(Object, "create");
        var Dt = Ft;

        function jt() {
            this.__data__ = Dt ? Dt(null) : {};
            this.size = 0
        }

        var Ht = jt;

        function Wt(t) {
            var e = this.has(t) && delete this.__data__[t];
            this.size -= e ? 1 : 0;
            return e
        }

        var qt = Wt;
        var Ut = "__lodash_hash_undefined__";
        var $t = Object.prototype;
        var Gt = $t.hasOwnProperty;

        function Kt(t) {
            var e = this.__data__;
            if (Dt) {
                var i = e[t];
                return i === Ut ? undefined : i
            }
            return Gt.call(e, t) ? e[t] : undefined
        }

        var Jt = Kt;
        var Yt = Object.prototype;
        var Qt = Yt.hasOwnProperty;

        function Xt(t) {
            var e = this.__data__;
            return Dt ? e[t] !== undefined : Qt.call(e, t)
        }

        var Zt = Xt;
        var te = "__lodash_hash_undefined__";

        function ee(t, e) {
            var i = this.__data__;
            this.size += this.has(t) ? 0 : 1;
            i[t] = Dt && e === undefined ? te : e;
            return this
        }

        var ie = ee;

        function ne(t) {
            var e = -1, i = t == null ? 0 : t.length;
            this.clear();
            while (++e < i) {
                var n = t[e];
                this.set(n[0], n[1])
            }
        }

        ne.prototype.clear = Ht;
        ne.prototype["delete"] = qt;
        ne.prototype.get = Jt;
        ne.prototype.has = Zt;
        ne.prototype.set = ie;
        var oe = ne;

        function re() {
            this.size = 0;
            this.__data__ = {hash: new oe, map: new (Lt || X), string: new oe}
        }

        var se = re;

        function ae(t) {
            var e = typeof t;
            return e == "string" || e == "number" || e == "symbol" || e == "boolean" ? t !== "__proto__" : t === null
        }

        var ce = ae;

        function le(t, e) {
            var i = t.__data__;
            return ce(e) ? i[typeof e == "string" ? "string" : "hash"] : i.map
        }

        var de = le;

        function ue(t) {
            var e = de(this, t)["delete"](t);
            this.size -= e ? 1 : 0;
            return e
        }

        var he = ue;

        function fe(t) {
            return de(this, t).get(t)
        }

        var ge = fe;

        function me(t) {
            return de(this, t).has(t)
        }

        var pe = me;

        function be(t, e) {
            var i = de(this, t), n = i.size;
            i.set(t, e);
            this.size += i.size == n ? 0 : 1;
            return this
        }

        var we = be;

        function ke(t) {
            var e = -1, i = t == null ? 0 : t.length;
            this.clear();
            while (++e < i) {
                var n = t[e];
                this.set(n[0], n[1])
            }
        }

        ke.prototype.clear = se;
        ke.prototype["delete"] = he;
        ke.prototype.get = ge;
        ke.prototype.has = pe;
        ke.prototype.set = we;
        var _e = ke;
        var ve = 200;

        function ye(t, e) {
            var i = this.__data__;
            if (i instanceof X) {
                var n = i.__data__;
                if (!Lt || n.length < ve - 1) {
                    n.push([t, e]);
                    this.size = ++i.size;
                    return this
                }
                i = this.__data__ = new _e(n)
            }
            i.set(t, e);
            this.size = i.size;
            return this
        }

        var xe = ye;

        function Ce(t) {
            var e = this.__data__ = new X(t);
            this.size = e.size
        }

        Ce.prototype.clear = tt;
        Ce.prototype["delete"] = it;
        Ce.prototype.get = ot;
        Ce.prototype.has = st;
        Ce.prototype.set = xe;
        var Ae = Ce;

        function Te(t, e) {
            var i = -1, n = t == null ? 0 : t.length;
            while (++i < n) {
                if (e(t[i], i, t) === false) {
                    break
                }
            }
            return t
        }

        var Pe = Te;
        var Se = function () {
            try {
                var t = Bt(Object, "defineProperty");
                t({}, "", {});
                return t
            } catch (t) {
            }
        }();
        var Ee = Se;

        function Re(t, e, i) {
            if (e == "__proto__" && Ee) {
                Ee(t, e, {configurable: true, enumerable: true, value: i, writable: true})
            } else {
                t[e] = i
            }
        }

        var Oe = Re;
        var Ie = Object.prototype;
        var Ve = Ie.hasOwnProperty;

        function Ne(t, e, i) {
            var n = t[e];
            if (!(Ve.call(t, e) && L(n, i)) || i === undefined && !(e in t)) {
                Oe(t, e, i)
            }
        }

        var Me = Ne;

        function Be(t, e, i, n) {
            var o = !i;
            i || (i = {});
            var r = -1, s = e.length;
            while (++r < s) {
                var a = e[r];
                var c = n ? n(i[a], t[a], a, i, t) : undefined;
                if (c === undefined) {
                    c = t[a]
                }
                if (o) {
                    Oe(i, a, c)
                } else {
                    Me(i, a, c)
                }
            }
            return i
        }

        var ze = Be;

        function Le(t, e) {
            var i = -1, n = Array(t);
            while (++i < t) {
                n[i] = e(i)
            }
            return n
        }

        var Fe = Le;
        var De = "[object Arguments]";

        function je(t) {
            return T(t) && _(t) == De
        }

        var He = je;
        var We = Object.prototype;
        var qe = We.hasOwnProperty;
        var Ue = We.propertyIsEnumerable;
        var $e = He(function () {
            return arguments
        }()) ? He : function (t) {
            return T(t) && qe.call(t, "callee") && !Ue.call(t, "callee")
        };
        var Ge = $e;
        var Ke = Array.isArray;
        var Je = Ke;
        var Ye = i(4);
        var Qe = 9007199254740991;
        var Xe = /^(?:0|[1-9]\d*)$/;

        function Ze(t, e) {
            var i = typeof t;
            e = e == null ? Qe : e;
            return !!e && (i == "number" || i != "symbol" && Xe.test(t)) && (t > -1 && t % 1 == 0 && t < e)
        }

        var ti = Ze;
        var ei = 9007199254740991;

        function ii(t) {
            return typeof t == "number" && t > -1 && t % 1 == 0 && t <= ei
        }

        var ni = ii;
        var oi = "[object Arguments]", ri = "[object Array]", si = "[object Boolean]", ai = "[object Date]",
            ci = "[object Error]", li = "[object Function]", di = "[object Map]", ui = "[object Number]",
            hi = "[object Object]", fi = "[object RegExp]", gi = "[object Set]", mi = "[object String]",
            pi = "[object WeakMap]";
        var bi = "[object ArrayBuffer]", wi = "[object DataView]", ki = "[object Float32Array]",
            _i = "[object Float64Array]", vi = "[object Int8Array]", yi = "[object Int16Array]",
            xi = "[object Int32Array]", Ci = "[object Uint8Array]", Ai = "[object Uint8ClampedArray]",
            Ti = "[object Uint16Array]", Pi = "[object Uint32Array]";
        var Si = {};
        Si[ki] = Si[_i] = Si[vi] = Si[yi] = Si[xi] = Si[Ci] = Si[Ai] = Si[Ti] = Si[Pi] = true;
        Si[oi] = Si[ri] = Si[bi] = Si[si] = Si[wi] = Si[ai] = Si[ci] = Si[li] = Si[di] = Si[ui] = Si[hi] = Si[fi] = Si[gi] = Si[mi] = Si[pi] = false;

        function Ei(t) {
            return T(t) && ni(t.length) && !!Si[_(t)]
        }

        var Ri = Ei;

        function Oi(t) {
            return function (e) {
                return t(e)
            }
        }

        var Ii = Oi;
        var Vi = i(5);
        var Ni = Vi["a"] && Vi["a"].isTypedArray;
        var Mi = Ni ? Ii(Ni) : Ri;
        var Bi = Mi;
        var zi = Object.prototype;
        var Li = zi.hasOwnProperty;

        function Fi(t, e) {
            var i = Je(t), n = !i && Ge(t), o = !i && !n && Object(Ye["a"])(t), r = !i && !n && !o && Bi(t),
                s = i || n || o || r, a = s ? Fe(t.length, String) : [], c = a.length;
            for (var l in t) {
                if ((e || Li.call(t, l)) && !(s && (l == "length" || o && (l == "offset" || l == "parent") || r && (l == "buffer" || l == "byteLength" || l == "byteOffset") || ti(l, c)))) {
                    a.push(l)
                }
            }
            return a
        }

        var Di = Fi;
        var ji = Object.prototype;

        function Hi(t) {
            var e = t && t.constructor, i = typeof e == "function" && e.prototype || ji;
            return t === i
        }

        var Wi = Hi;
        var qi = y(Object.keys, Object);
        var Ui = qi;
        var $i = Object.prototype;
        var Gi = $i.hasOwnProperty;

        function Ki(t) {
            if (!Wi(t)) {
                return Ui(t)
            }
            var e = [];
            for (var i in Object(t)) {
                if (Gi.call(t, i) && i != "constructor") {
                    e.push(i)
                }
            }
            return e
        }

        var Ji = Ki;

        function Yi(t) {
            return t != null && ni(t.length) && !gt(t)
        }

        var Qi = Yi;

        function Xi(t) {
            return Qi(t) ? Di(t) : Ji(t)
        }

        var Zi = Xi;

        function tn(t, e) {
            return t && ze(e, Zi(e), t)
        }

        var en = tn;

        function nn(t) {
            var e = [];
            if (t != null) {
                for (var i in Object(t)) {
                    e.push(i)
                }
            }
            return e
        }

        var on = nn;
        var rn = Object.prototype;
        var sn = rn.hasOwnProperty;

        function an(t) {
            if (!ct(t)) {
                return on(t)
            }
            var e = Wi(t), i = [];
            for (var n in t) {
                if (!(n == "constructor" && (e || !sn.call(t, n)))) {
                    i.push(n)
                }
            }
            return i
        }

        var cn = an;

        function ln(t) {
            return Qi(t) ? Di(t, true) : cn(t)
        }

        var dn = ln;

        function un(t, e) {
            return t && ze(e, dn(e), t)
        }

        var hn = un;
        var fn = i(8);

        function gn(t, e) {
            var i = -1, n = t.length;
            e || (e = Array(n));
            while (++i < n) {
                e[i] = t[i]
            }
            return e
        }

        var mn = gn;

        function pn(t, e) {
            var i = -1, n = t == null ? 0 : t.length, o = 0, r = [];
            while (++i < n) {
                var s = t[i];
                if (e(s, i, t)) {
                    r[o++] = s
                }
            }
            return r
        }

        var bn = pn;

        function wn() {
            return []
        }

        var kn = wn;
        var _n = Object.prototype;
        var vn = _n.propertyIsEnumerable;
        var yn = Object.getOwnPropertySymbols;
        var xn = !yn ? kn : function (t) {
            if (t == null) {
                return []
            }
            t = Object(t);
            return bn(yn(t), (function (e) {
                return vn.call(t, e)
            }))
        };
        var Cn = xn;

        function An(t, e) {
            return ze(t, Cn(t), e)
        }

        var Tn = An;

        function Pn(t, e) {
            var i = -1, n = e.length, o = t.length;
            while (++i < n) {
                t[o + i] = e[i]
            }
            return t
        }

        var Sn = Pn;
        var En = Object.getOwnPropertySymbols;
        var Rn = !En ? kn : function (t) {
            var e = [];
            while (t) {
                Sn(e, Cn(t));
                t = C(t)
            }
            return e
        };
        var On = Rn;

        function In(t, e) {
            return ze(t, On(t), e)
        }

        var Vn = In;

        function Nn(t, e, i) {
            var n = e(t);
            return Je(t) ? n : Sn(n, i(t))
        }

        var Mn = Nn;

        function Bn(t) {
            return Mn(t, Zi, Cn)
        }

        var zn = Bn;

        function Ln(t) {
            return Mn(t, dn, On)
        }

        var Fn = Ln;
        var Dn = Bt(n["a"], "DataView");
        var jn = Dn;
        var Hn = Bt(n["a"], "Promise");
        var Wn = Hn;
        var qn = Bt(n["a"], "Set");
        var Un = qn;
        var $n = Bt(n["a"], "WeakMap");
        var Gn = $n;
        var Kn = "[object Map]", Jn = "[object Object]", Yn = "[object Promise]", Qn = "[object Set]",
            Xn = "[object WeakMap]";
        var Zn = "[object DataView]";
        var to = xt(jn), eo = xt(Lt), io = xt(Wn), no = xt(Un), oo = xt(Gn);
        var ro = _;
        if (jn && ro(new jn(new ArrayBuffer(1))) != Zn || Lt && ro(new Lt) != Kn || Wn && ro(Wn.resolve()) != Yn || Un && ro(new Un) != Qn || Gn && ro(new Gn) != Xn) {
            ro = function (t) {
                var e = _(t), i = e == Jn ? t.constructor : undefined, n = i ? xt(i) : "";
                if (n) {
                    switch (n) {
                        case to:
                            return Zn;
                        case eo:
                            return Kn;
                        case io:
                            return Yn;
                        case no:
                            return Qn;
                        case oo:
                            return Xn
                    }
                }
                return e
            }
        }
        var so = ro;
        var ao = Object.prototype;
        var co = ao.hasOwnProperty;

        function lo(t) {
            var e = t.length, i = new t.constructor(e);
            if (e && typeof t[0] == "string" && co.call(t, "index")) {
                i.index = t.index;
                i.input = t.input
            }
            return i
        }

        var uo = lo;
        var ho = n["a"].Uint8Array;
        var fo = ho;

        function go(t) {
            var e = new t.constructor(t.byteLength);
            new fo(e).set(new fo(t));
            return e
        }

        var mo = go;

        function po(t, e) {
            var i = e ? mo(t.buffer) : t.buffer;
            return new t.constructor(i, t.byteOffset, t.byteLength)
        }

        var bo = po;
        var wo = /\w*$/;

        function ko(t) {
            var e = new t.constructor(t.source, wo.exec(t));
            e.lastIndex = t.lastIndex;
            return e
        }

        var _o = ko;
        var vo = r ? r.prototype : undefined, yo = vo ? vo.valueOf : undefined;

        function xo(t) {
            return yo ? Object(yo.call(t)) : {}
        }

        var Co = xo;

        function Ao(t, e) {
            var i = e ? mo(t.buffer) : t.buffer;
            return new t.constructor(i, t.byteOffset, t.length)
        }

        var To = Ao;
        var Po = "[object Boolean]", So = "[object Date]", Eo = "[object Map]", Ro = "[object Number]",
            Oo = "[object RegExp]", Io = "[object Set]", Vo = "[object String]", No = "[object Symbol]";
        var Mo = "[object ArrayBuffer]", Bo = "[object DataView]", zo = "[object Float32Array]",
            Lo = "[object Float64Array]", Fo = "[object Int8Array]", Do = "[object Int16Array]",
            jo = "[object Int32Array]", Ho = "[object Uint8Array]", Wo = "[object Uint8ClampedArray]",
            qo = "[object Uint16Array]", Uo = "[object Uint32Array]";

        function $o(t, e, i) {
            var n = t.constructor;
            switch (e) {
                case Mo:
                    return mo(t);
                case Po:
                case So:
                    return new n(+t);
                case Bo:
                    return bo(t, i);
                case zo:
                case Lo:
                case Fo:
                case Do:
                case jo:
                case Ho:
                case Wo:
                case qo:
                case Uo:
                    return To(t, i);
                case Eo:
                    return new n;
                case Ro:
                case Vo:
                    return new n(t);
                case Oo:
                    return _o(t);
                case Io:
                    return new n;
                case No:
                    return Co(t)
            }
        }

        var Go = $o;
        var Ko = Object.create;
        var Jo = function () {
            function t() {
            }

            return function (e) {
                if (!ct(e)) {
                    return {}
                }
                if (Ko) {
                    return Ko(e)
                }
                t.prototype = e;
                var i = new t;
                t.prototype = undefined;
                return i
            }
        }();
        var Yo = Jo;

        function Qo(t) {
            return typeof t.constructor == "function" && !Wi(t) ? Yo(C(t)) : {}
        }

        var Xo = Qo;
        var Zo = "[object Map]";

        function tr(t) {
            return T(t) && so(t) == Zo
        }

        var er = tr;
        var ir = Vi["a"] && Vi["a"].isMap;
        var nr = ir ? Ii(ir) : er;
        var or = nr;
        var rr = "[object Set]";

        function sr(t) {
            return T(t) && so(t) == rr
        }

        var ar = sr;
        var cr = Vi["a"] && Vi["a"].isSet;
        var lr = cr ? Ii(cr) : ar;
        var dr = lr;
        var ur = 1, hr = 2, fr = 4;
        var gr = "[object Arguments]", mr = "[object Array]", pr = "[object Boolean]", br = "[object Date]",
            wr = "[object Error]", kr = "[object Function]", _r = "[object GeneratorFunction]", vr = "[object Map]",
            yr = "[object Number]", xr = "[object Object]", Cr = "[object RegExp]", Ar = "[object Set]",
            Tr = "[object String]", Pr = "[object Symbol]", Sr = "[object WeakMap]";
        var Er = "[object ArrayBuffer]", Rr = "[object DataView]", Or = "[object Float32Array]",
            Ir = "[object Float64Array]", Vr = "[object Int8Array]", Nr = "[object Int16Array]",
            Mr = "[object Int32Array]", Br = "[object Uint8Array]", zr = "[object Uint8ClampedArray]",
            Lr = "[object Uint16Array]", Fr = "[object Uint32Array]";
        var Dr = {};
        Dr[gr] = Dr[mr] = Dr[Er] = Dr[Rr] = Dr[pr] = Dr[br] = Dr[Or] = Dr[Ir] = Dr[Vr] = Dr[Nr] = Dr[Mr] = Dr[vr] = Dr[yr] = Dr[xr] = Dr[Cr] = Dr[Ar] = Dr[Tr] = Dr[Pr] = Dr[Br] = Dr[zr] = Dr[Lr] = Dr[Fr] = true;
        Dr[wr] = Dr[kr] = Dr[Sr] = false;

        function jr(t, e, i, n, o, r) {
            var s, a = e & ur, c = e & hr, l = e & fr;
            if (i) {
                s = o ? i(t, n, o, r) : i(t)
            }
            if (s !== undefined) {
                return s
            }
            if (!ct(t)) {
                return t
            }
            var d = Je(t);
            if (d) {
                s = uo(t);
                if (!a) {
                    return mn(t, s)
                }
            } else {
                var u = so(t), h = u == kr || u == _r;
                if (Object(Ye["a"])(t)) {
                    return Object(fn["a"])(t, a)
                }
                if (u == xr || u == gr || h && !o) {
                    s = c || h ? {} : Xo(t);
                    if (!a) {
                        return c ? Vn(t, hn(s, t)) : Tn(t, en(s, t))
                    }
                } else {
                    if (!Dr[u]) {
                        return o ? t : {}
                    }
                    s = Go(t, u, a)
                }
            }
            r || (r = new Ae);
            var f = r.get(t);
            if (f) {
                return f
            }
            r.set(t, s);
            if (dr(t)) {
                t.forEach((function (n) {
                    s.add(jr(n, e, i, n, t, r))
                }))
            } else if (or(t)) {
                t.forEach((function (n, o) {
                    s.set(o, jr(n, e, i, o, t, r))
                }))
            }
            var g = l ? c ? Fn : zn : c ? keysIn : Zi;
            var m = d ? undefined : g(t);
            Pe(m || t, (function (n, o) {
                if (m) {
                    o = n;
                    n = t[o]
                }
                Me(s, o, jr(n, e, i, o, t, r))
            }));
            return s
        }

        var Hr = jr;
        var Wr = 1, qr = 4;

        function Ur(t, e) {
            e = typeof e == "function" ? e : undefined;
            return Hr(t, Wr | qr, e)
        }

        var $r = Ur;

        function Gr(t) {
            return T(t) && t.nodeType === 1 && !N(t)
        }

        var Kr = Gr;

        class Jr {
            constructor(t, e) {
                this._config = {};
                if (e) {
                    this.define(Yr(e))
                }
                if (t) {
                    this._setObjectToTarget(this._config, t)
                }
            }

            set(t, e) {
                this._setToTarget(this._config, t, e)
            }

            define(t, e) {
                const i = true;
                this._setToTarget(this._config, t, e, i)
            }

            get(t) {
                return this._getFromSource(this._config, t)
            }

            * names() {
                for (const t of Object.keys(this._config)) {
                    yield t
                }
            }

            _setToTarget(t, e, i, n = false) {
                if (N(e)) {
                    this._setObjectToTarget(t, e, n);
                    return
                }
                const o = e.split(".");
                e = o.pop();
                for (const e of o) {
                    if (!N(t[e])) {
                        t[e] = {}
                    }
                    t = t[e]
                }
                if (N(i)) {
                    if (!N(t[e])) {
                        t[e] = {}
                    }
                    t = t[e];
                    this._setObjectToTarget(t, i, n);
                    return
                }
                if (n && typeof t[e] != "undefined") {
                    return
                }
                t[e] = i
            }

            _getFromSource(t, e) {
                const i = e.split(".");
                e = i.pop();
                for (const e of i) {
                    if (!N(t[e])) {
                        t = null;
                        break
                    }
                    t = t[e]
                }
                return t ? Yr(t[e]) : undefined
            }

            _setObjectToTarget(t, e, i) {
                Object.keys(e).forEach(n => {
                    this._setToTarget(t, n, e[n], i)
                })
            }
        }

        function Yr(t) {
            return $r(t, Qr)
        }

        function Qr(t) {
            return Kr(t) ? t : undefined
        }

        function Xr() {
            return function t() {
                t.called = true
            }
        }

        var Zr = Xr;

        class ts {
            constructor(t, e) {
                this.source = t;
                this.name = e;
                this.path = [];
                this.stop = Zr();
                this.off = Zr()
            }
        }

        const es = new Array(256).fill().map((t, e) => ("0" + e.toString(16)).slice(-2));

        function is() {
            const t = Math.random() * 4294967296 >>> 0;
            const e = Math.random() * 4294967296 >>> 0;
            const i = Math.random() * 4294967296 >>> 0;
            const n = Math.random() * 4294967296 >>> 0;
            return "e" + es[t >> 0 & 255] + es[t >> 8 & 255] + es[t >> 16 & 255] + es[t >> 24 & 255] + es[e >> 0 & 255] + es[e >> 8 & 255] + es[e >> 16 & 255] + es[e >> 24 & 255] + es[i >> 0 & 255] + es[i >> 8 & 255] + es[i >> 16 & 255] + es[i >> 24 & 255] + es[n >> 0 & 255] + es[n >> 8 & 255] + es[n >> 16 & 255] + es[n >> 24 & 255]
        }

        const ns = {
            get(t) {
                if (typeof t != "number") {
                    return this[t] || this.normal
                } else {
                    return t
                }
            }, highest: 1e5, high: 1e3, normal: 0, low: -1e3, lowest: -1e5
        };
        var os = ns;
        var rs = i(6);
        var ss = i(0);
        const as = Symbol("listeningTo");
        const cs = Symbol("emitterId");
        const ls = {
            on(t, e, i = {}) {
                this.listenTo(this, t, e, i)
            }, once(t, e, i) {
                let n = false;
                const o = function (t, ...i) {
                    if (!n) {
                        n = true;
                        t.off();
                        e.call(this, t, ...i)
                    }
                };
                this.listenTo(this, t, o, i)
            }, off(t, e) {
                this.stopListening(this, t, e)
            }, listenTo(t, e, i, n = {}) {
                let o, r;
                if (!this[as]) {
                    this[as] = {}
                }
                const s = this[as];
                if (!fs(t)) {
                    hs(t)
                }
                const a = fs(t);
                if (!(o = s[a])) {
                    o = s[a] = {emitter: t, callbacks: {}}
                }
                if (!(r = o.callbacks[e])) {
                    r = o.callbacks[e] = []
                }
                r.push(i);
                ps(t, e);
                const c = bs(t, e);
                const l = os.get(n.priority);
                const d = {callback: i, priority: l};
                for (const t of c) {
                    let e = false;
                    for (let i = 0; i < t.length; i++) {
                        if (t[i].priority < l) {
                            t.splice(i, 0, d);
                            e = true;
                            break
                        }
                    }
                    if (!e) {
                        t.push(d)
                    }
                }
            }, stopListening(t, e, i) {
                const n = this[as];
                let o = t && fs(t);
                const r = n && o && n[o];
                const s = r && e && r.callbacks[e];
                if (!n || t && !r || e && !s) {
                    return
                }
                if (i) {
                    _s(t, e, i)
                } else if (s) {
                    while (i = s.pop()) {
                        _s(t, e, i)
                    }
                    delete r.callbacks[e]
                } else if (r) {
                    for (e in r.callbacks) {
                        this.stopListening(t, e)
                    }
                    delete n[o]
                } else {
                    for (o in n) {
                        this.stopListening(n[o].emitter)
                    }
                    delete this[as]
                }
            }, fire(t, ...e) {
                try {
                    const i = t instanceof ts ? t : new ts(this, t);
                    const n = i.name;
                    let o = ws(this, n);
                    i.path.push(this);
                    if (o) {
                        const t = [i, ...e];
                        o = Array.from(o);
                        for (let e = 0; e < o.length; e++) {
                            o[e].callback.apply(this, t);
                            if (i.off.called) {
                                delete i.off.called;
                                _s(this, n, o[e].callback)
                            }
                            if (i.stop.called) {
                                break
                            }
                        }
                    }
                    if (this._delegations) {
                        const t = this._delegations.get(n);
                        const o = this._delegations.get("*");
                        if (t) {
                            ks(t, i, e)
                        }
                        if (o) {
                            ks(o, i, e)
                        }
                    }
                    return i.return
                } catch (t) {
                    ss["b"].rethrowUnexpectedError(t, this)
                }
            }, delegate(...t) {
                return {
                    to: (e, i) => {
                        if (!this._delegations) {
                            this._delegations = new Map
                        }
                        t.forEach(t => {
                            const n = this._delegations.get(t);
                            if (!n) {
                                this._delegations.set(t, new Map([[e, i]]))
                            } else {
                                n.set(e, i)
                            }
                        })
                    }
                }
            }, stopDelegating(t, e) {
                if (!this._delegations) {
                    return
                }
                if (!t) {
                    this._delegations.clear()
                } else if (!e) {
                    this._delegations.delete(t)
                } else {
                    const i = this._delegations.get(t);
                    if (i) {
                        i.delete(e)
                    }
                }
            }
        };
        var ds = ls;

        function us(t, e) {
            if (t[as] && t[as][e]) {
                return t[as][e].emitter
            }
            return null
        }

        function hs(t, e) {
            if (!t[cs]) {
                t[cs] = e || is()
            }
        }

        function fs(t) {
            return t[cs]
        }

        function gs(t) {
            if (!t._events) {
                Object.defineProperty(t, "_events", {value: {}})
            }
            return t._events
        }

        function ms() {
            return {callbacks: [], childEvents: []}
        }

        function ps(t, e) {
            const i = gs(t);
            if (i[e]) {
                return
            }
            let n = e;
            let o = null;
            const r = [];
            while (n !== "") {
                if (i[n]) {
                    break
                }
                i[n] = ms();
                r.push(i[n]);
                if (o) {
                    i[n].childEvents.push(o)
                }
                o = n;
                n = n.substr(0, n.lastIndexOf(":"))
            }
            if (n !== "") {
                for (const t of r) {
                    t.callbacks = i[n].callbacks.slice()
                }
                i[n].childEvents.push(o)
            }
        }

        function bs(t, e) {
            const i = gs(t)[e];
            if (!i) {
                return []
            }
            let n = [i.callbacks];
            for (let e = 0; e < i.childEvents.length; e++) {
                const o = bs(t, i.childEvents[e]);
                n = n.concat(o)
            }
            return n
        }

        function ws(t, e) {
            let i;
            if (!t._events || !(i = t._events[e]) || !i.callbacks.length) {
                if (e.indexOf(":") > -1) {
                    return ws(t, e.substr(0, e.lastIndexOf(":")))
                } else {
                    return null
                }
            }
            return i.callbacks
        }

        function ks(t, e, i) {
            for (let [n, o] of t) {
                if (!o) {
                    o = e.name
                } else if (typeof o == "function") {
                    o = o(e.name)
                }
                const t = new ts(e.source, o);
                t.path = [...e.path];
                n.fire(t, ...i)
            }
        }

        function _s(t, e, i) {
            const n = bs(t, e);
            for (const t of n) {
                for (let e = 0; e < t.length; e++) {
                    if (t[e].callback == i) {
                        t.splice(e, 1);
                        e--
                    }
                }
            }
        }

        function vs(t, ...e) {
            e.forEach(e => {
                Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e)).forEach(i => {
                    if (i in t.prototype) {
                        return
                    }
                    const n = Object.getOwnPropertyDescriptor(e, i);
                    n.enumerable = false;
                    Object.defineProperty(t.prototype, i, n)
                })
            })
        }

        class ys {
            constructor(t = {}) {
                this._items = [];
                this._itemMap = new Map;
                this._idProperty = t.idProperty || "id";
                this._bindToExternalToInternalMap = new WeakMap;
                this._bindToInternalToExternalMap = new WeakMap;
                this._skippedIndexesFromExternal = []
            }

            get length() {
                return this._items.length
            }

            get first() {
                return this._items[0] || null
            }

            get last() {
                return this._items[this.length - 1] || null
            }

            add(t, e) {
                let i;
                const n = this._idProperty;
                if (n in t) {
                    i = t[n];
                    if (typeof i != "string") {
                        throw new ss["b"]("collection-add-invalid-id", this)
                    }
                    if (this.get(i)) {
                        throw new ss["b"]("collection-add-item-already-exists", this)
                    }
                } else {
                    t[n] = i = is()
                }
                if (e === undefined) {
                    e = this._items.length
                } else if (e > this._items.length || e < 0) {
                    throw new ss["b"]("collection-add-item-invalid-index", this)
                }
                this._items.splice(e, 0, t);
                this._itemMap.set(i, t);
                this.fire("add", t, e);
                return this
            }

            get(t) {
                let e;
                if (typeof t == "string") {
                    e = this._itemMap.get(t)
                } else if (typeof t == "number") {
                    e = this._items[t]
                } else {
                    throw new ss["b"]("collection-get-invalid-arg: Index or id must be given.", this)
                }
                return e || null
            }

            has(t) {
                if (typeof t == "string") {
                    return this._itemMap.has(t)
                } else {
                    const e = this._idProperty;
                    const i = t[e];
                    return this._itemMap.has(i)
                }
            }

            getIndex(t) {
                let e;
                if (typeof t == "string") {
                    e = this._itemMap.get(t)
                } else {
                    e = t
                }
                return this._items.indexOf(e)
            }

            remove(t) {
                let e, i, n;
                let o = false;
                const r = this._idProperty;
                if (typeof t == "string") {
                    i = t;
                    n = this._itemMap.get(i);
                    o = !n;
                    if (n) {
                        e = this._items.indexOf(n)
                    }
                } else if (typeof t == "number") {
                    e = t;
                    n = this._items[e];
                    o = !n;
                    if (n) {
                        i = n[r]
                    }
                } else {
                    n = t;
                    i = n[r];
                    e = this._items.indexOf(n);
                    o = e == -1 || !this._itemMap.get(i)
                }
                if (o) {
                    throw new ss["b"]("collection-remove-404: Item not found.", this)
                }
                this._items.splice(e, 1);
                this._itemMap.delete(i);
                const s = this._bindToInternalToExternalMap.get(n);
                this._bindToInternalToExternalMap.delete(n);
                this._bindToExternalToInternalMap.delete(s);
                this.fire("remove", n, e);
                return n
            }

            map(t, e) {
                return this._items.map(t, e)
            }

            find(t, e) {
                return this._items.find(t, e)
            }

            filter(t, e) {
                return this._items.filter(t, e)
            }

            clear() {
                if (this._bindToCollection) {
                    this.stopListening(this._bindToCollection);
                    this._bindToCollection = null
                }
                while (this.length) {
                    this.remove(0)
                }
            }

            bindTo(t) {
                if (this._bindToCollection) {
                    throw new ss["b"]("collection-bind-to-rebind: The collection cannot be bound more than once.", this)
                }
                this._bindToCollection = t;
                return {
                    as: t => {
                        this._setUpBindToBinding(e => new t(e))
                    }, using: t => {
                        if (typeof t == "function") {
                            this._setUpBindToBinding(e => t(e))
                        } else {
                            this._setUpBindToBinding(e => e[t])
                        }
                    }
                }
            }

            _setUpBindToBinding(t) {
                const e = this._bindToCollection;
                const i = (i, n, o) => {
                    const r = e._bindToCollection == this;
                    const s = e._bindToInternalToExternalMap.get(n);
                    if (r && s) {
                        this._bindToExternalToInternalMap.set(n, s);
                        this._bindToInternalToExternalMap.set(s, n)
                    } else {
                        const i = t(n);
                        if (!i) {
                            this._skippedIndexesFromExternal.push(o);
                            return
                        }
                        let r = o;
                        for (const t of this._skippedIndexesFromExternal) {
                            if (o > t) {
                                r--
                            }
                        }
                        for (const t of e._skippedIndexesFromExternal) {
                            if (r >= t) {
                                r++
                            }
                        }
                        this._bindToExternalToInternalMap.set(n, i);
                        this._bindToInternalToExternalMap.set(i, n);
                        this.add(i, r);
                        for (let t = 0; t < e._skippedIndexesFromExternal.length; t++) {
                            if (r <= e._skippedIndexesFromExternal[t]) {
                                e._skippedIndexesFromExternal[t]++
                            }
                        }
                    }
                };
                for (const t of e) {
                    i(null, t, e.getIndex(t))
                }
                this.listenTo(e, "add", i);
                this.listenTo(e, "remove", (t, e, i) => {
                    const n = this._bindToExternalToInternalMap.get(e);
                    if (n) {
                        this.remove(n)
                    }
                    this._skippedIndexesFromExternal = this._skippedIndexesFromExternal.reduce((t, e) => {
                        if (i < e) {
                            t.push(e - 1)
                        }
                        if (i > e) {
                            t.push(e)
                        }
                        return t
                    }, [])
                })
            }

            [Symbol.iterator]() {
                return this._items[Symbol.iterator]()
            }
        }

        vs(ys, ds);

        class xs {
            constructor(t, e = [], i = []) {
                this._context = t;
                this._plugins = new Map;
                this._availablePlugins = new Map;
                for (const t of e) {
                    if (t.pluginName) {
                        this._availablePlugins.set(t.pluginName, t)
                    }
                }
                this._contextPlugins = new Map;
                for (const [t, e] of i) {
                    this._contextPlugins.set(t, e);
                    this._contextPlugins.set(e, t);
                    if (t.pluginName) {
                        this._availablePlugins.set(t.pluginName, t)
                    }
                }
            }

            * [Symbol.iterator]() {
                for (const t of this._plugins) {
                    if (typeof t[0] == "function") {
                        yield t
                    }
                }
            }

            get(t) {
                const e = this._plugins.get(t);
                if (!e) {
                    const e = "plugincollection-plugin-not-loaded: The requested plugin is not loaded.";
                    let i = t;
                    if (typeof t == "function") {
                        i = t.pluginName || t.name
                    }
                    throw new ss["b"](e, this._context, {plugin: i})
                }
                return e
            }

            has(t) {
                return this._plugins.has(t)
            }

            init(t, e = []) {
                const i = this;
                const n = this._context;
                const o = new Set;
                const r = [];
                const s = g(t);
                const a = g(e);
                const c = f(t);
                if (c) {
                    const t = "plugincollection-plugin-not-found: Some plugins are not available and could not be loaded.";
                    console.error(Object(ss["a"])(t), {plugins: c});
                    return Promise.reject(new ss["b"](t, n, {plugins: c}))
                }
                return Promise.all(s.map(l)).then(() => d(r, "init")).then(() => d(r, "afterInit")).then(() => r);

                function l(t) {
                    if (a.includes(t)) {
                        return
                    }
                    if (i._plugins.has(t) || o.has(t)) {
                        return
                    }
                    return u(t).catch(e => {
                        console.error(Object(ss["a"])("plugincollection-load: It was not possible to load the plugin."), {plugin: t});
                        throw e
                    })
                }

                function d(t, e) {
                    return t.reduce((t, n) => {
                        if (!n[e]) {
                            return t
                        }
                        if (i._contextPlugins.has(n)) {
                            return t
                        }
                        return t.then(n[e].bind(n))
                    }, Promise.resolve())
                }

                function u(t) {
                    return new Promise(s => {
                        o.add(t);
                        if (t.requires) {
                            t.requires.forEach(i => {
                                const o = h(i);
                                if (t.isContextPlugin && !o.isContextPlugin) {
                                    throw new ss["b"]("plugincollection-context-required: Context plugin can not require plugin which is not a context plugin", null, {
                                        plugin: o.name,
                                        requiredBy: t.name
                                    })
                                }
                                if (e.includes(o)) {
                                    throw new ss["b"]("plugincollection-required: Cannot load a plugin because one of its dependencies is listed in" + "the `removePlugins` option.", n, {
                                        plugin: o.name,
                                        requiredBy: t.name
                                    })
                                }
                                l(o)
                            })
                        }
                        const a = i._contextPlugins.get(t) || new t(n);
                        i._add(t, a);
                        r.push(a);
                        s()
                    })
                }

                function h(t) {
                    if (typeof t == "function") {
                        return t
                    }
                    return i._availablePlugins.get(t)
                }

                function f(t) {
                    const e = [];
                    for (const i of t) {
                        if (!h(i)) {
                            e.push(i)
                        }
                    }
                    return e.length ? e : null
                }

                function g(t) {
                    return t.map(t => h(t)).filter(t => !!t)
                }
            }

            destroy() {
                const t = [];
                for (const [, e] of this) {
                    if (typeof e.destroy == "function" && !this._contextPlugins.has(e)) {
                        t.push(e.destroy())
                    }
                }
                return Promise.all(t)
            }

            _add(t, e) {
                this._plugins.set(t, e);
                const i = t.pluginName;
                if (!i) {
                    return
                }
                if (this._plugins.has(i)) {
                    throw new ss["b"]("plugincollection-plugin-name-conflict: Two plugins with the same name were loaded.", null, {
                        pluginName: i,
                        plugin1: this._plugins.get(i).constructor,
                        plugin2: t
                    })
                }
                this._plugins.set(i, e)
            }
        }

        vs(xs, ds);
        if (!window.CKEDITOR_TRANSLATIONS) {
            window.CKEDITOR_TRANSLATIONS = {}
        }

        function Cs(t, e) {
            const i = window.CKEDITOR_TRANSLATIONS[t] || (window.CKEDITOR_TRANSLATIONS[t] = {});
            Object.assign(i, e)
        }

        function As(t, e) {
            const i = Ss();
            if (i === 1) {
                t = Object.keys(window.CKEDITOR_TRANSLATIONS)[0]
            }
            if (i === 0 || !Ps(t, e)) {
                return e.replace(/ \[context: [^\]]+\]$/, "")
            }
            const n = window.CKEDITOR_TRANSLATIONS[t];
            return n[e].replace(/ \[context: [^\]]+\]$/, "")
        }

        function Ts() {
            window.CKEDITOR_TRANSLATIONS = {}
        }

        function Ps(t, e) {
            return t in window.CKEDITOR_TRANSLATIONS && e in window.CKEDITOR_TRANSLATIONS[t]
        }

        function Ss() {
            return Object.keys(window.CKEDITOR_TRANSLATIONS).length
        }

        const Es = ["ar", "fa", "he", "ku", "ug"];

        class Rs {
            constructor(t = {}) {
                this.uiLanguage = t.uiLanguage || "en";
                this.contentLanguage = t.contentLanguage || this.uiLanguage;
                this.uiLanguageDirection = Os(this.uiLanguage);
                this.contentLanguageDirection = Os(this.contentLanguage);
                this.t = (...t) => this._t(...t)
            }

            get language() {
                console.warn("locale-deprecated-language-property: " + "The Locale#language property has been deprecated and will be removed in the near future. " + "Please use #uiLanguage and #contentLanguage properties instead.");
                return this.uiLanguage
            }

            _t(t, e) {
                let i = As(this.uiLanguage, t);
                if (e) {
                    i = i.replace(/%(\d+)/g, (t, i) => i < e.length ? e[i] : t)
                }
                return i
            }
        }

        function Os(t) {
            return Es.includes(t) ? "rtl" : "ltr"
        }

        class Is {
            constructor(t) {
                this.config = new Jr(t, this.constructor.defaultConfig);
                const e = this.constructor.builtinPlugins;
                this.config.define("plugins", e);
                this.plugins = new xs(this, e);
                const i = this.config.get("language") || {};
                this.locale = new Rs({
                    uiLanguage: typeof i === "string" ? i : i.ui,
                    contentLanguage: this.config.get("language.content")
                });
                this.t = this.locale.t;
                this.editors = new ys;
                this._contextOwner = null
            }

            initPlugins() {
                const t = this.config.get("plugins") || [];
                for (const e of t) {
                    if (typeof e != "function") {
                        throw new ss["b"]("context-initplugins-constructor-only: Only a constructor function is allowed as a context plugin.", null, {Plugin: e})
                    }
                    if (e.isContextPlugin !== true) {
                        throw new ss["b"]("context-initplugins-invalid-plugin: Only a plugin marked as a context plugin is allowed to be used with a context.", null, {Plugin: e})
                    }
                }
                return this.plugins.init(t)
            }

            destroy() {
                return Promise.all(Array.from(this.editors, t => t.destroy())).then(() => this.plugins.destroy())
            }

            _addEditor(t, e) {
                if (this._contextOwner) {
                    throw new ss["b"]("context-addEditor-private-context: Cannot add multiple editors to the context which is created by the editor.")
                }
                this.editors.add(t);
                if (e) {
                    this._contextOwner = t
                }
            }

            _removeEditor(t) {
                if (this.editors.has(t)) {
                    this.editors.remove(t)
                }
                if (this._contextOwner === t) {
                    return this.destroy()
                }
                return Promise.resolve()
            }

            _getEditorConfig() {
                const t = {};
                for (const e of this.config.names()) {
                    if (!["plugins", "removePlugins", "extraPlugins"].includes(e)) {
                        t[e] = this.config.get(e)
                    }
                }
                return t
            }

            static create(t) {
                return new Promise(e => {
                    const i = new this(t);
                    e(i.initPlugins().then(() => i))
                })
            }
        }

        function Vs(t, e) {
            const i = Math.min(t.length, e.length);
            for (let n = 0; n < i; n++) {
                if (t[n] != e[n]) {
                    return n
                }
            }
            if (t.length == e.length) {
                return "same"
            } else if (t.length < e.length) {
                return "prefix"
            } else {
                return "extension"
            }
        }

        var Ns = 4;

        function Ms(t) {
            return Hr(t, Ns)
        }

        var Bs = Ms;

        class zs {
            constructor(t) {
                this.document = t;
                this.parent = null
            }

            get index() {
                let t;
                if (!this.parent) {
                    return null
                }
                if ((t = this.parent.getChildIndex(this)) == -1) {
                    throw new ss["b"]("view-node-not-found-in-parent: The node's parent does not contain this node.", this)
                }
                return t
            }

            get nextSibling() {
                const t = this.index;
                return t !== null && this.parent.getChild(t + 1) || null
            }

            get previousSibling() {
                const t = this.index;
                return t !== null && this.parent.getChild(t - 1) || null
            }

            get root() {
                let t = this;
                while (t.parent) {
                    t = t.parent
                }
                return t
            }

            isAttached() {
                return this.root.is("rootElement")
            }

            getPath() {
                const t = [];
                let e = this;
                while (e.parent) {
                    t.unshift(e.index);
                    e = e.parent
                }
                return t
            }

            getAncestors(t = {includeSelf: false, parentFirst: false}) {
                const e = [];
                let i = t.includeSelf ? this : this.parent;
                while (i) {
                    e[t.parentFirst ? "push" : "unshift"](i);
                    i = i.parent
                }
                return e
            }

            getCommonAncestor(t, e = {}) {
                const i = this.getAncestors(e);
                const n = t.getAncestors(e);
                let o = 0;
                while (i[o] == n[o] && i[o]) {
                    o++
                }
                return o === 0 ? null : i[o - 1]
            }

            isBefore(t) {
                if (this == t) {
                    return false
                }
                if (this.root !== t.root) {
                    return false
                }
                const e = this.getPath();
                const i = t.getPath();
                const n = Vs(e, i);
                switch (n) {
                    case"prefix":
                        return true;
                    case"extension":
                        return false;
                    default:
                        return e[n] < i[n]
                }
            }

            isAfter(t) {
                if (this == t) {
                    return false
                }
                if (this.root !== t.root) {
                    return false
                }
                return !this.isBefore(t)
            }

            _remove() {
                this.parent._removeChildren(this.index)
            }

            _fireChange(t, e) {
                this.fire("change:" + t, e);
                if (this.parent) {
                    this.parent._fireChange(t, e)
                }
            }

            toJSON() {
                const t = Bs(this);
                delete t.parent;
                return t
            }

            is(t) {
                return t == "node" || t == "view:node"
            }
        }

        vs(zs, ds);

        class Ls extends zs {
            constructor(t, e) {
                super(t);
                this._textData = e
            }

            is(t) {
                return t == "text" || t == "view:text" || super.is(t)
            }

            get data() {
                return this._textData
            }

            get _data() {
                return this.data
            }

            set _data(t) {
                this._fireChange("text", this);
                this._textData = t
            }

            isSimilar(t) {
                if (!(t instanceof Ls)) {
                    return false
                }
                return this === t || this.data === t.data
            }

            _clone() {
                return new Ls(this.document, this.data)
            }
        }

        class Fs {
            constructor(t, e, i) {
                this.textNode = t;
                if (e < 0 || e > t.data.length) {
                    throw new ss["b"]("view-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.", this)
                }
                if (i < 0 || e + i > t.data.length) {
                    throw new ss["b"]("view-textproxy-wrong-length: Given length value is incorrect.", this)
                }
                this.data = t.data.substring(e, e + i);
                this.offsetInText = e
            }

            get offsetSize() {
                return this.data.length
            }

            get isPartial() {
                return this.data.length !== this.textNode.data.length
            }

            get parent() {
                return this.textNode.parent
            }

            get root() {
                return this.textNode.root
            }

            get document() {
                return this.textNode.document
            }

            is(t) {
                return t == "textProxy" || t == "view:textProxy"
            }

            getAncestors(t = {includeSelf: false, parentFirst: false}) {
                const e = [];
                let i = t.includeSelf ? this.textNode : this.parent;
                while (i !== null) {
                    e[t.parentFirst ? "push" : "unshift"](i);
                    i = i.parent
                }
                return e
            }
        }

        function Ds(t) {
            const e = new Map;
            for (const i in t) {
                e.set(i, t[i])
            }
            return e
        }

        function js(t) {
            return !!(t && t[Symbol.iterator])
        }

        function Hs(t) {
            if (js(t)) {
                return new Map(t)
            } else {
                return Ds(t)
            }
        }

        class Ws {
            constructor(...t) {
                this._patterns = [];
                this.add(...t)
            }

            add(...t) {
                for (let e of t) {
                    if (typeof e == "string" || e instanceof RegExp) {
                        e = {name: e}
                    }
                    if (e.classes && (typeof e.classes == "string" || e.classes instanceof RegExp)) {
                        e.classes = [e.classes]
                    }
                    this._patterns.push(e)
                }
            }

            match(...t) {
                for (const e of t) {
                    for (const t of this._patterns) {
                        const i = qs(e, t);
                        if (i) {
                            return {element: e, pattern: t, match: i}
                        }
                    }
                }
                return null
            }

            matchAll(...t) {
                const e = [];
                for (const i of t) {
                    for (const t of this._patterns) {
                        const n = qs(i, t);
                        if (n) {
                            e.push({element: i, pattern: t, match: n})
                        }
                    }
                }
                return e.length > 0 ? e : null
            }

            getElementName() {
                if (this._patterns.length !== 1) {
                    return null
                }
                const t = this._patterns[0];
                const e = t.name;
                return typeof t != "function" && e && !(e instanceof RegExp) ? e : null
            }
        }

        function qs(t, e) {
            if (typeof e == "function") {
                return e(t)
            }
            const i = {};
            if (e.name) {
                i.name = Us(e.name, t.name);
                if (!i.name) {
                    return null
                }
            }
            if (e.attributes) {
                i.attributes = $s(e.attributes, t);
                if (!i.attributes) {
                    return null
                }
            }
            if (e.classes) {
                i.classes = Gs(e.classes, t);
                if (!i.classes) {
                    return false
                }
            }
            if (e.styles) {
                i.styles = Ks(e.styles, t);
                if (!i.styles) {
                    return false
                }
            }
            return i
        }

        function Us(t, e) {
            if (t instanceof RegExp) {
                return t.test(e)
            }
            return t === e
        }

        function $s(t, e) {
            const i = [];
            for (const n in t) {
                const o = t[n];
                if (e.hasAttribute(n)) {
                    const t = e.getAttribute(n);
                    if (o === true) {
                        i.push(n)
                    } else if (o instanceof RegExp) {
                        if (o.test(t)) {
                            i.push(n)
                        } else {
                            return null
                        }
                    } else if (t === o) {
                        i.push(n)
                    } else {
                        return null
                    }
                } else {
                    return null
                }
            }
            return i
        }

        function Gs(t, e) {
            const i = [];
            for (const n of t) {
                if (n instanceof RegExp) {
                    const t = e.getClassNames();
                    for (const e of t) {
                        if (n.test(e)) {
                            i.push(e)
                        }
                    }
                    if (i.length === 0) {
                        return null
                    }
                } else if (e.hasClass(n)) {
                    i.push(n)
                } else {
                    return null
                }
            }
            return i
        }

        function Ks(t, e) {
            const i = [];
            for (const n in t) {
                const o = t[n];
                if (e.hasStyle(n)) {
                    const t = e.getStyle(n);
                    if (o instanceof RegExp) {
                        if (o.test(t)) {
                            i.push(n)
                        } else {
                            return null
                        }
                    } else if (t === o) {
                        i.push(n)
                    } else {
                        return null
                    }
                } else {
                    return null
                }
            }
            return i
        }

        var Js = "[object Symbol]";

        function Ys(t) {
            return typeof t == "symbol" || T(t) && _(t) == Js
        }

        var Qs = Ys;
        var Xs = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, Zs = /^\w*$/;

        function ta(t, e) {
            if (Je(t)) {
                return false
            }
            var i = typeof t;
            if (i == "number" || i == "symbol" || i == "boolean" || t == null || Qs(t)) {
                return true
            }
            return Zs.test(t) || !Xs.test(t) || e != null && t in Object(e)
        }

        var ea = ta;
        var ia = "Expected a function";

        function na(t, e) {
            if (typeof t != "function" || e != null && typeof e != "function") {
                throw new TypeError(ia)
            }
            var i = function () {
                var n = arguments, o = e ? e.apply(this, n) : n[0], r = i.cache;
                if (r.has(o)) {
                    return r.get(o)
                }
                var s = t.apply(this, n);
                i.cache = r.set(o, s) || r;
                return s
            };
            i.cache = new (na.Cache || _e);
            return i
        }

        na.Cache = _e;
        var oa = na;
        var ra = 500;

        function sa(t) {
            var e = oa(t, (function (t) {
                if (i.size === ra) {
                    i.clear()
                }
                return t
            }));
            var i = e.cache;
            return e
        }

        var aa = sa;
        var ca = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var la = /\\(\\)?/g;
        var da = aa((function (t) {
            var e = [];
            if (t.charCodeAt(0) === 46) {
                e.push("")
            }
            t.replace(ca, (function (t, i, n, o) {
                e.push(n ? o.replace(la, "$1") : i || t)
            }));
            return e
        }));
        var ua = da;

        function ha(t, e) {
            var i = -1, n = t == null ? 0 : t.length, o = Array(n);
            while (++i < n) {
                o[i] = e(t[i], i, t)
            }
            return o
        }

        var fa = ha;
        var ga = 1 / 0;
        var ma = r ? r.prototype : undefined, pa = ma ? ma.toString : undefined;

        function ba(t) {
            if (typeof t == "string") {
                return t
            }
            if (Je(t)) {
                return fa(t, ba) + ""
            }
            if (Qs(t)) {
                return pa ? pa.call(t) : ""
            }
            var e = t + "";
            return e == "0" && 1 / t == -ga ? "-0" : e
        }

        var wa = ba;

        function ka(t) {
            return t == null ? "" : wa(t)
        }

        var _a = ka;

        function va(t, e) {
            if (Je(t)) {
                return t
            }
            return ea(t, e) ? [t] : ua(_a(t))
        }

        var ya = va;

        function xa(t) {
            var e = t == null ? 0 : t.length;
            return e ? t[e - 1] : undefined
        }

        var Ca = xa;
        var Aa = 1 / 0;

        function Ta(t) {
            if (typeof t == "string" || Qs(t)) {
                return t
            }
            var e = t + "";
            return e == "0" && 1 / t == -Aa ? "-0" : e
        }

        var Pa = Ta;

        function Sa(t, e) {
            e = ya(e, t);
            var i = 0, n = e.length;
            while (t != null && i < n) {
                t = t[Pa(e[i++])]
            }
            return i && i == n ? t : undefined
        }

        var Ea = Sa;

        function Ra(t, e, i) {
            var n = -1, o = t.length;
            if (e < 0) {
                e = -e > o ? 0 : o + e
            }
            i = i > o ? o : i;
            if (i < 0) {
                i += o
            }
            o = e > i ? 0 : i - e >>> 0;
            e >>>= 0;
            var r = Array(o);
            while (++n < o) {
                r[n] = t[n + e]
            }
            return r
        }

        var Oa = Ra;

        function Ia(t, e) {
            return e.length < 2 ? t : Ea(t, Oa(e, 0, -1))
        }

        var Va = Ia;

        function Na(t, e) {
            e = ya(e, t);
            t = Va(t, e);
            return t == null || delete t[Pa(Ca(e))]
        }

        var Ma = Na;

        function Ba(t, e) {
            return t == null ? true : Ma(t, e)
        }

        var za = Ba;

        function La(t, e, i) {
            var n = t == null ? undefined : Ea(t, e);
            return n === undefined ? i : n
        }

        var Fa = La;

        function Da(t, e, i) {
            if (i !== undefined && !L(t[e], i) || i === undefined && !(e in t)) {
                Oe(t, e, i)
            }
        }

        var ja = Da;

        function Ha(t) {
            return function (e, i, n) {
                var o = -1, r = Object(e), s = n(e), a = s.length;
                while (a--) {
                    var c = s[t ? a : ++o];
                    if (i(r[c], c, r) === false) {
                        break
                    }
                }
                return e
            }
        }

        var Wa = Ha;
        var qa = Wa();
        var Ua = qa;

        function $a(t) {
            return T(t) && Qi(t)
        }

        var Ga = $a;

        function Ka(t, e) {
            if (e === "constructor" && typeof t[e] === "function") {
                return
            }
            if (e == "__proto__") {
                return
            }
            return t[e]
        }

        var Ja = Ka;

        function Ya(t) {
            return ze(t, dn(t))
        }

        var Qa = Ya;

        function Xa(t, e, i, n, o, r, s) {
            var a = Ja(t, i), c = Ja(e, i), l = s.get(c);
            if (l) {
                ja(t, i, l);
                return
            }
            var d = r ? r(a, c, i + "", t, e, s) : undefined;
            var u = d === undefined;
            if (u) {
                var h = Je(c), f = !h && Object(Ye["a"])(c), g = !h && !f && Bi(c);
                d = c;
                if (h || f || g) {
                    if (Je(a)) {
                        d = a
                    } else if (Ga(a)) {
                        d = mn(a)
                    } else if (f) {
                        u = false;
                        d = Object(fn["a"])(c, true)
                    } else if (g) {
                        u = false;
                        d = To(c, true)
                    } else {
                        d = []
                    }
                } else if (N(c) || Ge(c)) {
                    d = a;
                    if (Ge(a)) {
                        d = Qa(a)
                    } else if (!ct(a) || gt(a)) {
                        d = Xo(c)
                    }
                } else {
                    u = false
                }
            }
            if (u) {
                s.set(c, d);
                o(d, c, n, r, s);
                s["delete"](c)
            }
            ja(t, i, d)
        }

        var Za = Xa;

        function tc(t, e, i, n, o) {
            if (t === e) {
                return
            }
            Ua(e, (function (r, s) {
                o || (o = new Ae);
                if (ct(r)) {
                    Za(t, e, s, i, tc, n, o)
                } else {
                    var a = n ? n(Ja(t, s), r, s + "", t, e, o) : undefined;
                    if (a === undefined) {
                        a = r
                    }
                    ja(t, s, a)
                }
            }), dn)
        }

        var ec = tc;

        function ic(t) {
            return t
        }

        var nc = ic;

        function oc(t, e, i) {
            switch (i.length) {
                case 0:
                    return t.call(e);
                case 1:
                    return t.call(e, i[0]);
                case 2:
                    return t.call(e, i[0], i[1]);
                case 3:
                    return t.call(e, i[0], i[1], i[2])
            }
            return t.apply(e, i)
        }

        var rc = oc;
        var sc = Math.max;

        function ac(t, e, i) {
            e = sc(e === undefined ? t.length - 1 : e, 0);
            return function () {
                var n = arguments, o = -1, r = sc(n.length - e, 0), s = Array(r);
                while (++o < r) {
                    s[o] = n[e + o]
                }
                o = -1;
                var a = Array(e + 1);
                while (++o < e) {
                    a[o] = n[o]
                }
                a[e] = i(s);
                return rc(t, this, a)
            }
        }

        var cc = ac;

        function lc(t) {
            return function () {
                return t
            }
        }

        var dc = lc;
        var uc = !Ee ? nc : function (t, e) {
            return Ee(t, "toString", {configurable: true, enumerable: false, value: dc(e), writable: true})
        };
        var hc = uc;
        var fc = 800, gc = 16;
        var mc = Date.now;

        function pc(t) {
            var e = 0, i = 0;
            return function () {
                var n = mc(), o = gc - (n - i);
                i = n;
                if (o > 0) {
                    if (++e >= fc) {
                        return arguments[0]
                    }
                } else {
                    e = 0
                }
                return t.apply(undefined, arguments)
            }
        }

        var bc = pc;
        var wc = bc(hc);
        var kc = wc;

        function _c(t, e) {
            return kc(cc(t, e, nc), t + "")
        }

        var vc = _c;

        function yc(t, e, i) {
            if (!ct(i)) {
                return false
            }
            var n = typeof e;
            if (n == "number" ? Qi(i) && ti(e, i.length) : n == "string" && e in i) {
                return L(i[e], t)
            }
            return false
        }

        var xc = yc;

        function Cc(t) {
            return vc((function (e, i) {
                var n = -1, o = i.length, r = o > 1 ? i[o - 1] : undefined, s = o > 2 ? i[2] : undefined;
                r = t.length > 3 && typeof r == "function" ? (o--, r) : undefined;
                if (s && xc(i[0], i[1], s)) {
                    r = o < 3 ? undefined : r;
                    o = 1
                }
                e = Object(e);
                while (++n < o) {
                    var a = i[n];
                    if (a) {
                        t(e, a, n, r)
                    }
                }
                return e
            }))
        }

        var Ac = Cc;
        var Tc = Ac((function (t, e, i) {
            ec(t, e, i)
        }));
        var Pc = Tc;

        function Sc(t, e, i, n) {
            if (!ct(t)) {
                return t
            }
            e = ya(e, t);
            var o = -1, r = e.length, s = r - 1, a = t;
            while (a != null && ++o < r) {
                var c = Pa(e[o]), l = i;
                if (o != s) {
                    var d = a[c];
                    l = n ? n(d, c, a) : undefined;
                    if (l === undefined) {
                        l = ct(d) ? d : ti(e[o + 1]) ? [] : {}
                    }
                }
                Me(a, c, l);
                a = a[c]
            }
            return t
        }

        var Ec = Sc;

        function Rc(t, e, i) {
            return t == null ? t : Ec(t, e, i)
        }

        var Oc = Rc;

        class Ic {
            constructor(t) {
                this._styles = {};
                this._styleProcessor = t
            }

            get isEmpty() {
                const t = Object.entries(this._styles);
                const e = Array.from(t);
                return !e.length
            }

            get size() {
                if (this.isEmpty) {
                    return 0
                }
                return this.getStyleNames().length
            }

            setTo(t) {
                this.clear();
                const e = Array.from(Nc(t).entries());
                for (const [t, i] of e) {
                    this._styleProcessor.toNormalizedForm(t, i, this._styles)
                }
            }

            has(t) {
                if (this.isEmpty) {
                    return false
                }
                const e = this._styleProcessor.getReducedForm(t, this._styles);
                const i = e.find(([e]) => e === t);
                return Array.isArray(i)
            }

            set(t, e) {
                if (ct(t)) {
                    for (const [e, i] of Object.entries(t)) {
                        this._styleProcessor.toNormalizedForm(e, i, this._styles)
                    }
                } else {
                    this._styleProcessor.toNormalizedForm(t, e, this._styles)
                }
            }

            remove(t) {
                const e = Mc(t);
                za(this._styles, e);
                delete this._styles[t];
                this._cleanEmptyObjectsOnPath(e)
            }

            getNormalized(t) {
                return this._styleProcessor.getNormalized(t, this._styles)
            }

            toString() {
                if (this.isEmpty) {
                    return ""
                }
                return this._getStylesEntries().map(t => t.join(":")).sort().join(";") + ";"
            }

            getAsString(t) {
                if (this.isEmpty) {
                    return
                }
                if (this._styles[t] && !ct(this._styles[t])) {
                    return this._styles[t]
                }
                const e = this._styleProcessor.getReducedForm(t, this._styles);
                const i = e.find(([e]) => e === t);
                if (Array.isArray(i)) {
                    return i[1]
                }
            }

            getStyleNames() {
                if (this.isEmpty) {
                    return []
                }
                const t = this._getStylesEntries();
                return t.map(([t]) => t)
            }

            clear() {
                this._styles = {}
            }

            _getStylesEntries() {
                const t = [];
                const e = Object.keys(this._styles);
                for (const i of e) {
                    t.push(...this._styleProcessor.getReducedForm(i, this._styles))
                }
                return t
            }

            _cleanEmptyObjectsOnPath(t) {
                const e = t.split(".");
                const i = e.length > 1;
                if (!i) {
                    return
                }
                const n = e.splice(0, e.length - 1).join(".");
                const o = Fa(this._styles, n);
                if (!o) {
                    return
                }
                const r = !Array.from(Object.keys(o)).length;
                if (r) {
                    this.remove(n)
                }
            }
        }

        class Vc {
            constructor() {
                this._normalizers = new Map;
                this._extractors = new Map;
                this._reducers = new Map;
                this._consumables = new Map
            }

            toNormalizedForm(t, e, i) {
                if (ct(e)) {
                    Bc(i, Mc(t), e);
                    return
                }
                if (this._normalizers.has(t)) {
                    const n = this._normalizers.get(t);
                    const {path: o, value: r} = n(e);
                    Bc(i, o, r)
                } else {
                    Bc(i, t, e)
                }
            }

            getNormalized(t, e) {
                if (!t) {
                    return Pc({}, e)
                }
                if (e[t] !== undefined) {
                    return e[t]
                }
                if (this._extractors.has(t)) {
                    const i = this._extractors.get(t);
                    if (typeof i === "string") {
                        return Fa(e, i)
                    }
                    const n = i(t, e);
                    if (n) {
                        return n
                    }
                }
                return Fa(e, Mc(t))
            }

            getReducedForm(t, e) {
                const i = this.getNormalized(t, e);
                if (i === undefined) {
                    return []
                }
                if (this._reducers.has(t)) {
                    const e = this._reducers.get(t);
                    return e(i)
                }
                return [[t, i]]
            }

            getRelatedStyles(t) {
                return this._consumables.get(t) || []
            }

            setNormalizer(t, e) {
                this._normalizers.set(t, e)
            }

            setExtractor(t, e) {
                this._extractors.set(t, e)
            }

            setReducer(t, e) {
                this._reducers.set(t, e)
            }

            setStyleRelation(t, e) {
                this._mapStyleNames(t, e);
                for (const i of e) {
                    this._mapStyleNames(i, [t])
                }
            }

            _mapStyleNames(t, e) {
                if (!this._consumables.has(t)) {
                    this._consumables.set(t, [])
                }
                this._consumables.get(t).push(...e)
            }
        }

        function Nc(t) {
            let e = null;
            let i = 0;
            let n = 0;
            let o = null;
            const r = new Map;
            if (t === "") {
                return r
            }
            if (t.charAt(t.length - 1) != ";") {
                t = t + ";"
            }
            for (let s = 0; s < t.length; s++) {
                const a = t.charAt(s);
                if (e === null) {
                    switch (a) {
                        case":":
                            if (!o) {
                                o = t.substr(i, s - i);
                                n = s + 1
                            }
                            break;
                        case'"':
                        case"'":
                            e = a;
                            break;
                        case";": {
                            const e = t.substr(n, s - n);
                            if (o) {
                                r.set(o.trim(), e.trim())
                            }
                            o = null;
                            i = s + 1;
                            break
                        }
                    }
                } else if (a === e) {
                    e = null
                }
            }
            return r
        }

        function Mc(t) {
            return t.replace("-", ".")
        }

        function Bc(t, e, i) {
            let n = i;
            if (ct(i)) {
                n = Pc({}, Fa(t, e), i)
            }
            Oc(t, e, n)
        }

        class zc extends zs {
            constructor(t, e, i, n) {
                super(t);
                this.name = e;
                this._attrs = Lc(i);
                this._children = [];
                if (n) {
                    this._insertChild(0, n)
                }
                this._classes = new Set;
                if (this._attrs.has("class")) {
                    const t = this._attrs.get("class");
                    Fc(this._classes, t);
                    this._attrs.delete("class")
                }
                this._styles = new Ic(this.document.stylesProcessor);
                if (this._attrs.has("style")) {
                    this._styles.setTo(this._attrs.get("style"));
                    this._attrs.delete("style")
                }
                this._customProperties = new Map
            }

            get childCount() {
                return this._children.length
            }

            get isEmpty() {
                return this._children.length === 0
            }

            is(t, e = null) {
                const i = t.replace(/^view:/, "");
                if (!e) {
                    return i == "element" || i == this.name || super.is(t)
                } else {
                    return i == "element" && e == this.name
                }
            }

            getChild(t) {
                return this._children[t]
            }

            getChildIndex(t) {
                return this._children.indexOf(t)
            }

            getChildren() {
                return this._children[Symbol.iterator]()
            }

            * getAttributeKeys() {
                if (this._classes.size > 0) {
                    yield"class"
                }
                if (!this._styles.isEmpty) {
                    yield"style"
                }
                yield* this._attrs.keys()
            }

            * getAttributes() {
                yield* this._attrs.entries();
                if (this._classes.size > 0) {
                    yield["class", this.getAttribute("class")]
                }
                if (!this._styles.isEmpty) {
                    yield["style", this.getAttribute("style")]
                }
            }

            getAttribute(t) {
                if (t == "class") {
                    if (this._classes.size > 0) {
                        return [...this._classes].join(" ")
                    }
                    return undefined
                }
                if (t == "style") {
                    const t = this._styles.toString();
                    return t == "" ? undefined : t
                }
                return this._attrs.get(t)
            }

            hasAttribute(t) {
                if (t == "class") {
                    return this._classes.size > 0
                }
                if (t == "style") {
                    return !this._styles.isEmpty
                }
                return this._attrs.has(t)
            }

            isSimilar(t) {
                if (!(t instanceof zc)) {
                    return false
                }
                if (this === t) {
                    return true
                }
                if (this.name != t.name) {
                    return false
                }
                if (this._attrs.size !== t._attrs.size || this._classes.size !== t._classes.size || this._styles.size !== t._styles.size) {
                    return false
                }
                for (const [e, i] of this._attrs) {
                    if (!t._attrs.has(e) || t._attrs.get(e) !== i) {
                        return false
                    }
                }
                for (const e of this._classes) {
                    if (!t._classes.has(e)) {
                        return false
                    }
                }
                for (const e of this._styles.getStyleNames()) {
                    if (!t._styles.has(e) || t._styles.getAsString(e) !== this._styles.getAsString(e)) {
                        return false
                    }
                }
                return true
            }

            hasClass(...t) {
                for (const e of t) {
                    if (!this._classes.has(e)) {
                        return false
                    }
                }
                return true
            }

            getClassNames() {
                return this._classes.keys()
            }

            getStyle(t) {
                return this._styles.getAsString(t)
            }

            getNormalizedStyle(t) {
                return this._styles.getNormalized(t)
            }

            getStyleNames() {
                return this._styles.getStyleNames()
            }

            hasStyle(...t) {
                for (const e of t) {
                    if (!this._styles.has(e)) {
                        return false
                    }
                }
                return true
            }

            findAncestor(...t) {
                const e = new Ws(...t);
                let i = this.parent;
                while (i) {
                    if (e.match(i)) {
                        return i
                    }
                    i = i.parent
                }
                return null
            }

            getCustomProperty(t) {
                return this._customProperties.get(t)
            }

            * getCustomProperties() {
                yield* this._customProperties.entries()
            }

            getIdentity() {
                const t = Array.from(this._classes).sort().join(",");
                const e = this._styles.toString();
                const i = Array.from(this._attrs).map(t => `${t[0]}="${t[1]}"`).sort().join(" ");
                return this.name + (t == "" ? "" : ` class="${t}"`) + (!e ? "" : ` style="${e}"`) + (i == "" ? "" : ` ${i}`)
            }

            _clone(t = false) {
                const e = [];
                if (t) {
                    for (const i of this.getChildren()) {
                        e.push(i._clone(t))
                    }
                }
                const i = new this.constructor(this.document, this.name, this._attrs, e);
                i._classes = new Set(this._classes);
                i._styles.set(this._styles.getNormalized());
                i._customProperties = new Map(this._customProperties);
                i.getFillerOffset = this.getFillerOffset;
                return i
            }

            _appendChild(t) {
                return this._insertChild(this.childCount, t)
            }

            _insertChild(t, e) {
                this._fireChange("children", this);
                let i = 0;
                const n = Dc(this.document, e);
                for (const e of n) {
                    if (e.parent !== null) {
                        e._remove()
                    }
                    e.parent = this;
                    e.document = this.document;
                    this._children.splice(t, 0, e);
                    t++;
                    i++
                }
                return i
            }

            _removeChildren(t, e = 1) {
                this._fireChange("children", this);
                for (let i = t; i < t + e; i++) {
                    this._children[i].parent = null
                }
                return this._children.splice(t, e)
            }

            _setAttribute(t, e) {
                e = String(e);
                this._fireChange("attributes", this);
                if (t == "class") {
                    Fc(this._classes, e)
                } else if (t == "style") {
                    this._styles.setTo(e)
                } else {
                    this._attrs.set(t, e)
                }
            }

            _removeAttribute(t) {
                this._fireChange("attributes", this);
                if (t == "class") {
                    if (this._classes.size > 0) {
                        this._classes.clear();
                        return true
                    }
                    return false
                }
                if (t == "style") {
                    if (!this._styles.isEmpty) {
                        this._styles.clear();
                        return true
                    }
                    return false
                }
                return this._attrs.delete(t)
            }

            _addClass(t) {
                this._fireChange("attributes", this);
                t = Array.isArray(t) ? t : [t];
                t.forEach(t => this._classes.add(t))
            }

            _removeClass(t) {
                this._fireChange("attributes", this);
                t = Array.isArray(t) ? t : [t];
                t.forEach(t => this._classes.delete(t))
            }

            _setStyle(t, e) {
                this._fireChange("attributes", this);
                this._styles.set(t, e)
            }

            _removeStyle(t) {
                this._fireChange("attributes", this);
                t = Array.isArray(t) ? t : [t];
                t.forEach(t => this._styles.remove(t))
            }

            _setCustomProperty(t, e) {
                this._customProperties.set(t, e)
            }

            _removeCustomProperty(t) {
                return this._customProperties.delete(t)
            }
        }

        function Lc(t) {
            t = Hs(t);
            for (const [e, i] of t) {
                if (i === null) {
                    t.delete(e)
                } else if (typeof i != "string") {
                    t.set(e, String(i))
                }
            }
            return t
        }

        function Fc(t, e) {
            const i = e.split(/\s+/);
            t.clear();
            i.forEach(e => t.add(e))
        }

        function Dc(t, e) {
            if (typeof e == "string") {
                return [new Ls(t, e)]
            }
            if (!js(e)) {
                e = [e]
            }
            return Array.from(e).map(e => {
                if (typeof e == "string") {
                    return new Ls(t, e)
                }
                if (e instanceof Fs) {
                    return new Ls(t, e.data)
                }
                return e
            })
        }

        class jc extends zc {
            constructor(t, e, i, n) {
                super(t, e, i, n);
                this.getFillerOffset = Hc
            }

            is(t, e = null) {
                const i = t && t.replace(/^view:/, "");
                if (!e) {
                    return i == "containerElement" || super.is(t)
                } else {
                    return i == "containerElement" && e == this.name || super.is(t, e)
                }
            }
        }

        function Hc() {
            const t = [...this.getChildren()];
            const e = t[this.childCount - 1];
            if (e && e.is("element", "br")) {
                return this.childCount
            }
            for (const e of t) {
                if (!e.is("uiElement")) {
                    return null
                }
            }
            return this.childCount
        }

        var Wc = Ac((function (t, e) {
            ze(e, dn(e), t)
        }));
        var qc = Wc;
        const Uc = Symbol("observableProperties");
        const $c = Symbol("boundObservables");
        const Gc = Symbol("boundProperties");
        const Kc = {
            set(t, e) {
                if (ct(t)) {
                    Object.keys(t).forEach(e => {
                        this.set(e, t[e])
                    }, this);
                    return
                }
                Yc(this);
                const i = this[Uc];
                if (t in this && !i.has(t)) {
                    throw new ss["b"]("observable-set-cannot-override: Cannot override an existing property.", this)
                }
                Object.defineProperty(this, t, {
                    enumerable: true, configurable: true, get() {
                        return i.get(t)
                    }, set(e) {
                        const n = i.get(t);
                        let o = this.fire("set:" + t, t, e, n);
                        if (o === undefined) {
                            o = e
                        }
                        if (n !== o || !i.has(t)) {
                            i.set(t, o);
                            this.fire("change:" + t, t, o, n)
                        }
                    }
                });
                this[t] = e
            }, bind(...t) {
                if (!t.length || !tl(t)) {
                    throw new ss["b"]("observable-bind-wrong-properties: All properties must be strings.", this)
                }
                if (new Set(t).size !== t.length) {
                    throw new ss["b"]("observable-bind-duplicate-properties: Properties must be unique.", this)
                }
                Yc(this);
                const e = this[Gc];
                t.forEach(t => {
                    if (e.has(t)) {
                        throw new ss["b"]("observable-bind-rebind: Cannot bind the same property more than once.", this)
                    }
                });
                const i = new Map;
                t.forEach(t => {
                    const n = {property: t, to: []};
                    e.set(t, n);
                    i.set(t, n)
                });
                return {to: Qc, toMany: Xc, _observable: this, _bindProperties: t, _to: [], _bindings: i}
            }, unbind(...t) {
                if (!(Uc in this)) {
                    return
                }
                const e = this[Gc];
                const i = this[$c];
                if (t.length) {
                    if (!tl(t)) {
                        throw new ss["b"]("observable-unbind-wrong-properties: Properties must be strings.", this)
                    }
                    t.forEach(t => {
                        const n = e.get(t);
                        if (!n) {
                            return
                        }
                        let o, r, s, a;
                        n.to.forEach(t => {
                            o = t[0];
                            r = t[1];
                            s = i.get(o);
                            a = s[r];
                            a.delete(n);
                            if (!a.size) {
                                delete s[r]
                            }
                            if (!Object.keys(s).length) {
                                i.delete(o);
                                this.stopListening(o, "change")
                            }
                        });
                        e.delete(t)
                    })
                } else {
                    i.forEach((t, e) => {
                        this.stopListening(e, "change")
                    });
                    i.clear();
                    e.clear()
                }
            }, decorate(t) {
                const e = this[t];
                if (!e) {
                    throw new ss["b"]("observablemixin-cannot-decorate-undefined: Cannot decorate an undefined method.", this, {
                        object: this,
                        methodName: t
                    })
                }
                this.on(t, (t, i) => {
                    t.return = e.apply(this, i)
                });
                this[t] = function (...e) {
                    return this.fire(t, e)
                }
            }
        };
        qc(Kc, ds);
        var Jc = Kc;

        function Yc(t) {
            if (Uc in t) {
                return
            }
            Object.defineProperty(t, Uc, {value: new Map});
            Object.defineProperty(t, $c, {value: new Map});
            Object.defineProperty(t, Gc, {value: new Map})
        }

        function Qc(...t) {
            const e = el(...t);
            const i = Array.from(this._bindings.keys());
            const n = i.length;
            if (!e.callback && e.to.length > 1) {
                throw new ss["b"]("observable-bind-to-no-callback: Binding multiple observables only possible with callback.", this)
            }
            if (n > 1 && e.callback) {
                throw new ss["b"]("observable-bind-to-extra-callback: Cannot bind multiple properties and use a callback in one binding.", this)
            }
            e.to.forEach(t => {
                if (t.properties.length && t.properties.length !== n) {
                    throw new ss["b"]("observable-bind-to-properties-length: The number of properties must match.", this)
                }
                if (!t.properties.length) {
                    t.properties = this._bindProperties
                }
            });
            this._to = e.to;
            if (e.callback) {
                this._bindings.get(i[0]).callback = e.callback
            }
            rl(this._observable, this._to);
            nl(this);
            this._bindProperties.forEach(t => {
                ol(this._observable, t)
            })
        }

        function Xc(t, e, i) {
            if (this._bindings.size > 1) {
                throw new ss["b"]("observable-bind-to-many-not-one-binding: Cannot bind multiple properties with toMany().", this)
            }
            this.to(...Zc(t, e), i)
        }

        function Zc(t, e) {
            const i = t.map(t => [t, e]);
            return Array.prototype.concat.apply([], i)
        }

        function tl(t) {
            return t.every(t => typeof t == "string")
        }

        function el(...t) {
            if (!t.length) {
                throw new ss["b"]("observable-bind-to-parse-error: Invalid argument syntax in `to()`.", null)
            }
            const e = {to: []};
            let i;
            if (typeof t[t.length - 1] == "function") {
                e.callback = t.pop()
            }
            t.forEach(t => {
                if (typeof t == "string") {
                    i.properties.push(t)
                } else if (typeof t == "object") {
                    i = {observable: t, properties: []};
                    e.to.push(i)
                } else {
                    throw new ss["b"]("observable-bind-to-parse-error: Invalid argument syntax in `to()`.", null)
                }
            });
            return e
        }

        function il(t, e, i, n) {
            const o = t[$c];
            const r = o.get(i);
            const s = r || {};
            if (!s[n]) {
                s[n] = new Set
            }
            s[n].add(e);
            if (!r) {
                o.set(i, s)
            }
        }

        function nl(t) {
            let e;
            t._bindings.forEach((i, n) => {
                t._to.forEach(o => {
                    e = o.properties[i.callback ? 0 : t._bindProperties.indexOf(n)];
                    i.to.push([o.observable, e]);
                    il(t._observable, i, o.observable, e)
                })
            })
        }

        function ol(t, e) {
            const i = t[Gc];
            const n = i.get(e);
            let o;
            if (n.callback) {
                o = n.callback.apply(t, n.to.map(t => t[0][t[1]]))
            } else {
                o = n.to[0];
                o = o[0][o[1]]
            }
            if (t.hasOwnProperty(e)) {
                t[e] = o
            } else {
                t.set(e, o)
            }
        }

        function rl(t, e) {
            e.forEach(e => {
                const i = t[$c];
                let n;
                if (!i.get(e.observable)) {
                    t.listenTo(e.observable, "change", (o, r) => {
                        n = i.get(e.observable)[r];
                        if (n) {
                            n.forEach(e => {
                                ol(t, e.property)
                            })
                        }
                    })
                }
            })
        }

        class sl extends jc {
            constructor(t, e, i, n) {
                super(t, e, i, n);
                this.set("isReadOnly", false);
                this.set("isFocused", false);
                this.bind("isReadOnly").to(t);
                this.bind("isFocused").to(t, "isFocused", e => e && t.selection.editableElement == this);
                this.listenTo(t.selection, "change", () => {
                    this.isFocused = t.isFocused && t.selection.editableElement == this
                })
            }

            is(t, e = null) {
                const i = t && t.replace(/^view:/, "");
                if (!e) {
                    return i == "editableElement" || super.is(t)
                } else {
                    return i == "editableElement" && e == this.name || super.is(t, e)
                }
            }

            destroy() {
                this.stopListening()
            }
        }

        vs(sl, Jc);
        const al = Symbol("rootName");

        class cl extends sl {
            constructor(t, e) {
                super(t, e);
                this.rootName = "main"
            }

            is(t, e = null) {
                const i = t.replace(/^view:/, "");
                if (!e) {
                    return i == "rootElement" || super.is(t)
                } else {
                    return i == "rootElement" && e == this.name || super.is(t, e)
                }
            }

            get rootName() {
                return this.getCustomProperty(al)
            }

            set rootName(t) {
                this._setCustomProperty(al, t)
            }

            set _name(t) {
                this.name = t
            }
        }

        class ll {
            constructor(t = {}) {
                if (!t.boundaries && !t.startPosition) {
                    throw new ss["b"]("view-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.", null)
                }
                if (t.direction && t.direction != "forward" && t.direction != "backward") {
                    throw new ss["b"]("view-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.", t.startPosition, {direction: t.direction})
                }
                this.boundaries = t.boundaries || null;
                if (t.startPosition) {
                    this.position = dl._createAt(t.startPosition)
                } else {
                    this.position = dl._createAt(t.boundaries[t.direction == "backward" ? "end" : "start"])
                }
                this.direction = t.direction || "forward";
                this.singleCharacters = !!t.singleCharacters;
                this.shallow = !!t.shallow;
                this.ignoreElementEnd = !!t.ignoreElementEnd;
                this._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;
                this._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null
            }

            [Symbol.iterator]() {
                return this
            }

            skip(t) {
                let e, i, n;
                do {
                    n = this.position;
                    ({done: e, value: i} = this.next())
                } while (!e && t(i));
                if (!e) {
                    this.position = n
                }
            }

            next() {
                if (this.direction == "forward") {
                    return this._next()
                } else {
                    return this._previous()
                }
            }

            _next() {
                let t = this.position.clone();
                const e = this.position;
                const i = t.parent;
                if (i.parent === null && t.offset === i.childCount) {
                    return {done: true}
                }
                if (i === this._boundaryEndParent && t.offset == this.boundaries.end.offset) {
                    return {done: true}
                }
                let n;
                if (i instanceof Ls) {
                    if (t.isAtEnd) {
                        this.position = dl._createAfter(i);
                        return this._next()
                    }
                    n = i.data[t.offset]
                } else {
                    n = i.getChild(t.offset)
                }
                if (n instanceof zc) {
                    if (!this.shallow) {
                        t = new dl(n, 0)
                    } else {
                        t.offset++
                    }
                    this.position = t;
                    return this._formatReturnValue("elementStart", n, e, t, 1)
                } else if (n instanceof Ls) {
                    if (this.singleCharacters) {
                        t = new dl(n, 0);
                        this.position = t;
                        return this._next()
                    } else {
                        let i = n.data.length;
                        let o;
                        if (n == this._boundaryEndParent) {
                            i = this.boundaries.end.offset;
                            o = new Fs(n, 0, i);
                            t = dl._createAfter(o)
                        } else {
                            o = new Fs(n, 0, n.data.length);
                            t.offset++
                        }
                        this.position = t;
                        return this._formatReturnValue("text", o, e, t, i)
                    }
                } else if (typeof n == "string") {
                    let n;
                    if (this.singleCharacters) {
                        n = 1
                    } else {
                        const e = i === this._boundaryEndParent ? this.boundaries.end.offset : i.data.length;
                        n = e - t.offset
                    }
                    const o = new Fs(i, t.offset, n);
                    t.offset += n;
                    this.position = t;
                    return this._formatReturnValue("text", o, e, t, n)
                } else {
                    t = dl._createAfter(i);
                    this.position = t;
                    if (this.ignoreElementEnd) {
                        return this._next()
                    } else {
                        return this._formatReturnValue("elementEnd", i, e, t)
                    }
                }
            }

            _previous() {
                let t = this.position.clone();
                const e = this.position;
                const i = t.parent;
                if (i.parent === null && t.offset === 0) {
                    return {done: true}
                }
                if (i == this._boundaryStartParent && t.offset == this.boundaries.start.offset) {
                    return {done: true}
                }
                let n;
                if (i instanceof Ls) {
                    if (t.isAtStart) {
                        this.position = dl._createBefore(i);
                        return this._previous()
                    }
                    n = i.data[t.offset - 1]
                } else {
                    n = i.getChild(t.offset - 1)
                }
                if (n instanceof zc) {
                    if (!this.shallow) {
                        t = new dl(n, n.childCount);
                        this.position = t;
                        if (this.ignoreElementEnd) {
                            return this._previous()
                        } else {
                            return this._formatReturnValue("elementEnd", n, e, t)
                        }
                    } else {
                        t.offset--;
                        this.position = t;
                        return this._formatReturnValue("elementStart", n, e, t, 1)
                    }
                } else if (n instanceof Ls) {
                    if (this.singleCharacters) {
                        t = new dl(n, n.data.length);
                        this.position = t;
                        return this._previous()
                    } else {
                        let i = n.data.length;
                        let o;
                        if (n == this._boundaryStartParent) {
                            const e = this.boundaries.start.offset;
                            o = new Fs(n, e, n.data.length - e);
                            i = o.data.length;
                            t = dl._createBefore(o)
                        } else {
                            o = new Fs(n, 0, n.data.length);
                            t.offset--
                        }
                        this.position = t;
                        return this._formatReturnValue("text", o, e, t, i)
                    }
                } else if (typeof n == "string") {
                    let n;
                    if (!this.singleCharacters) {
                        const e = i === this._boundaryStartParent ? this.boundaries.start.offset : 0;
                        n = t.offset - e
                    } else {
                        n = 1
                    }
                    t.offset -= n;
                    const o = new Fs(i, t.offset, n);
                    this.position = t;
                    return this._formatReturnValue("text", o, e, t, n)
                } else {
                    t = dl._createBefore(i);
                    this.position = t;
                    return this._formatReturnValue("elementStart", i, e, t, 1)
                }
            }

            _formatReturnValue(t, e, i, n, o) {
                if (e instanceof Fs) {
                    if (e.offsetInText + e.data.length == e.textNode.data.length) {
                        if (this.direction == "forward" && !(this.boundaries && this.boundaries.end.isEqual(this.position))) {
                            n = dl._createAfter(e.textNode);
                            this.position = n
                        } else {
                            i = dl._createAfter(e.textNode)
                        }
                    }
                    if (e.offsetInText === 0) {
                        if (this.direction == "backward" && !(this.boundaries && this.boundaries.start.isEqual(this.position))) {
                            n = dl._createBefore(e.textNode);
                            this.position = n
                        } else {
                            i = dl._createBefore(e.textNode)
                        }
                    }
                }
                return {done: false, value: {type: t, item: e, previousPosition: i, nextPosition: n, length: o}}
            }
        }

        class dl {
            constructor(t, e) {
                this.parent = t;
                this.offset = e
            }

            get nodeAfter() {
                if (this.parent.is("text")) {
                    return null
                }
                return this.parent.getChild(this.offset) || null
            }

            get nodeBefore() {
                if (this.parent.is("text")) {
                    return null
                }
                return this.parent.getChild(this.offset - 1) || null
            }

            get isAtStart() {
                return this.offset === 0
            }

            get isAtEnd() {
                const t = this.parent.is("text") ? this.parent.data.length : this.parent.childCount;
                return this.offset === t
            }

            get root() {
                return this.parent.root
            }

            get editableElement() {
                let t = this.parent;
                while (!(t instanceof sl)) {
                    if (t.parent) {
                        t = t.parent
                    } else {
                        return null
                    }
                }
                return t
            }

            getShiftedBy(t) {
                const e = dl._createAt(this);
                const i = e.offset + t;
                e.offset = i < 0 ? 0 : i;
                return e
            }

            getLastMatchingPosition(t, e = {}) {
                e.startPosition = this;
                const i = new ll(e);
                i.skip(t);
                return i.position
            }

            getAncestors() {
                if (this.parent.is("documentFragment")) {
                    return [this.parent]
                } else {
                    return this.parent.getAncestors({includeSelf: true})
                }
            }

            getCommonAncestor(t) {
                const e = this.getAncestors();
                const i = t.getAncestors();
                let n = 0;
                while (e[n] == i[n] && e[n]) {
                    n++
                }
                return n === 0 ? null : e[n - 1]
            }

            is(t) {
                return t == "position" || t == "view:position"
            }

            isEqual(t) {
                return this.parent == t.parent && this.offset == t.offset
            }

            isBefore(t) {
                return this.compareWith(t) == "before"
            }

            isAfter(t) {
                return this.compareWith(t) == "after"
            }

            compareWith(t) {
                if (this.root !== t.root) {
                    return "different"
                }
                if (this.isEqual(t)) {
                    return "same"
                }
                const e = this.parent.is("node") ? this.parent.getPath() : [];
                const i = t.parent.is("node") ? t.parent.getPath() : [];
                e.push(this.offset);
                i.push(t.offset);
                const n = Vs(e, i);
                switch (n) {
                    case"prefix":
                        return "before";
                    case"extension":
                        return "after";
                    default:
                        return e[n] < i[n] ? "before" : "after"
                }
            }

            getWalker(t = {}) {
                t.startPosition = this;
                return new ll(t)
            }

            clone() {
                return new dl(this.parent, this.offset)
            }

            static _createAt(t, e) {
                if (t instanceof dl) {
                    return new this(t.parent, t.offset)
                } else {
                    const i = t;
                    if (e == "end") {
                        e = i.is("text") ? i.data.length : i.childCount
                    } else if (e == "before") {
                        return this._createBefore(i)
                    } else if (e == "after") {
                        return this._createAfter(i)
                    } else if (e !== 0 && !e) {
                        throw new ss["b"]("view-createPositionAt-offset-required: " + "View#createPositionAt() requires the offset when the first parameter is a view item.", i)
                    }
                    return new dl(i, e)
                }
            }

            static _createAfter(t) {
                if (t.is("textProxy")) {
                    return new dl(t.textNode, t.offsetInText + t.data.length)
                }
                if (!t.parent) {
                    throw new ss["b"]("view-position-after-root: You can not make position after root.", t, {root: t})
                }
                return new dl(t.parent, t.index + 1)
            }

            static _createBefore(t) {
                if (t.is("textProxy")) {
                    return new dl(t.textNode, t.offsetInText)
                }
                if (!t.parent) {
                    throw new ss["b"]("view-position-before-root: You can not make position before root.", t, {root: t})
                }
                return new dl(t.parent, t.index)
            }
        }

        class ul {
            constructor(t, e = null) {
                this.start = t.clone();
                this.end = e ? e.clone() : t.clone()
            }

            * [Symbol.iterator]() {
                yield* new ll({boundaries: this, ignoreElementEnd: true})
            }

            get isCollapsed() {
                return this.start.isEqual(this.end)
            }

            get isFlat() {
                return this.start.parent === this.end.parent
            }

            get root() {
                return this.start.root
            }

            getEnlarged() {
                let t = this.start.getLastMatchingPosition(hl, {direction: "backward"});
                let e = this.end.getLastMatchingPosition(hl);
                if (t.parent.is("text") && t.isAtStart) {
                    t = dl._createBefore(t.parent)
                }
                if (e.parent.is("text") && e.isAtEnd) {
                    e = dl._createAfter(e.parent)
                }
                return new ul(t, e)
            }

            getTrimmed() {
                let t = this.start.getLastMatchingPosition(hl);
                if (t.isAfter(this.end) || t.isEqual(this.end)) {
                    return new ul(t, t)
                }
                let e = this.end.getLastMatchingPosition(hl, {direction: "backward"});
                const i = t.nodeAfter;
                const n = e.nodeBefore;
                if (i && i.is("text")) {
                    t = new dl(i, 0)
                }
                if (n && n.is("text")) {
                    e = new dl(n, n.data.length)
                }
                return new ul(t, e)
            }

            isEqual(t) {
                return this == t || this.start.isEqual(t.start) && this.end.isEqual(t.end)
            }

            containsPosition(t) {
                return t.isAfter(this.start) && t.isBefore(this.end)
            }

            containsRange(t, e = false) {
                if (t.isCollapsed) {
                    e = false
                }
                const i = this.containsPosition(t.start) || e && this.start.isEqual(t.start);
                const n = this.containsPosition(t.end) || e && this.end.isEqual(t.end);
                return i && n
            }

            getDifference(t) {
                const e = [];
                if (this.isIntersecting(t)) {
                    if (this.containsPosition(t.start)) {
                        e.push(new ul(this.start, t.start))
                    }
                    if (this.containsPosition(t.end)) {
                        e.push(new ul(t.end, this.end))
                    }
                } else {
                    e.push(this.clone())
                }
                return e
            }

            getIntersection(t) {
                if (this.isIntersecting(t)) {
                    let e = this.start;
                    let i = this.end;
                    if (this.containsPosition(t.start)) {
                        e = t.start
                    }
                    if (this.containsPosition(t.end)) {
                        i = t.end
                    }
                    return new ul(e, i)
                }
                return null
            }

            getWalker(t = {}) {
                t.boundaries = this;
                return new ll(t)
            }

            getCommonAncestor() {
                return this.start.getCommonAncestor(this.end)
            }

            getContainedElement() {
                if (this.isCollapsed) {
                    return null
                }
                let t = this.start.nodeAfter;
                let e = this.end.nodeBefore;
                if (this.start.parent.is("text") && this.start.isAtEnd && this.start.parent.nextSibling) {
                    t = this.start.parent.nextSibling
                }
                if (this.end.parent.is("text") && this.end.isAtStart && this.end.parent.previousSibling) {
                    e = this.end.parent.previousSibling
                }
                if (t && t.is("element") && t === e) {
                    return t
                }
                return null
            }

            clone() {
                return new ul(this.start, this.end)
            }

            * getItems(t = {}) {
                t.boundaries = this;
                t.ignoreElementEnd = true;
                const e = new ll(t);
                for (const t of e) {
                    yield t.item
                }
            }

            * getPositions(t = {}) {
                t.boundaries = this;
                const e = new ll(t);
                yield e.position;
                for (const t of e) {
                    yield t.nextPosition
                }
            }

            is(t) {
                return t == "range" || t == "view:range"
            }

            isIntersecting(t) {
                return this.start.isBefore(t.end) && this.end.isAfter(t.start)
            }

            static _createFromParentsAndOffsets(t, e, i, n) {
                return new this(new dl(t, e), new dl(i, n))
            }

            static _createFromPositionAndShift(t, e) {
                const i = t;
                const n = t.getShiftedBy(e);
                return e > 0 ? new this(i, n) : new this(n, i)
            }

            static _createIn(t) {
                return this._createFromParentsAndOffsets(t, 0, t, t.childCount)
            }

            static _createOn(t) {
                const e = t.is("textProxy") ? t.offsetSize : 1;
                return this._createFromPositionAndShift(dl._createBefore(t), e)
            }
        }

        function hl(t) {
            if (t.item.is("attributeElement") || t.item.is("uiElement")) {
                return true
            }
            return false
        }

        function fl(t) {
            let e = 0;
            for (const i of t) {
                e++
            }
            return e
        }

        class gl {
            constructor(t = null, e, i) {
                this._ranges = [];
                this._lastRangeBackward = false;
                this._isFake = false;
                this._fakeSelectionLabel = "";
                this.setTo(t, e, i)
            }

            get isFake() {
                return this._isFake
            }

            get fakeSelectionLabel() {
                return this._fakeSelectionLabel
            }

            get anchor() {
                if (!this._ranges.length) {
                    return null
                }
                const t = this._ranges[this._ranges.length - 1];
                const e = this._lastRangeBackward ? t.end : t.start;
                return e.clone()
            }

            get focus() {
                if (!this._ranges.length) {
                    return null
                }
                const t = this._ranges[this._ranges.length - 1];
                const e = this._lastRangeBackward ? t.start : t.end;
                return e.clone()
            }

            get isCollapsed() {
                return this.rangeCount === 1 && this._ranges[0].isCollapsed
            }

            get rangeCount() {
                return this._ranges.length
            }

            get isBackward() {
                return !this.isCollapsed && this._lastRangeBackward
            }

            get editableElement() {
                if (this.anchor) {
                    return this.anchor.editableElement
                }
                return null
            }

            * getRanges() {
                for (const t of this._ranges) {
                    yield t.clone()
                }
            }

            getFirstRange() {
                let t = null;
                for (const e of this._ranges) {
                    if (!t || e.start.isBefore(t.start)) {
                        t = e
                    }
                }
                return t ? t.clone() : null
            }

            getLastRange() {
                let t = null;
                for (const e of this._ranges) {
                    if (!t || e.end.isAfter(t.end)) {
                        t = e
                    }
                }
                return t ? t.clone() : null
            }

            getFirstPosition() {
                const t = this.getFirstRange();
                return t ? t.start.clone() : null
            }

            getLastPosition() {
                const t = this.getLastRange();
                return t ? t.end.clone() : null
            }

            isEqual(t) {
                if (this.isFake != t.isFake) {
                    return false
                }
                if (this.isFake && this.fakeSelectionLabel != t.fakeSelectionLabel) {
                    return false
                }
                if (this.rangeCount != t.rangeCount) {
                    return false
                } else if (this.rangeCount === 0) {
                    return true
                }
                if (!this.anchor.isEqual(t.anchor) || !this.focus.isEqual(t.focus)) {
                    return false
                }
                for (const e of this._ranges) {
                    let i = false;
                    for (const n of t._ranges) {
                        if (e.isEqual(n)) {
                            i = true;
                            break
                        }
                    }
                    if (!i) {
                        return false
                    }
                }
                return true
            }

            isSimilar(t) {
                if (this.isBackward != t.isBackward) {
                    return false
                }
                const e = fl(this.getRanges());
                const i = fl(t.getRanges());
                if (e != i) {
                    return false
                }
                if (e == 0) {
                    return true
                }
                for (let e of this.getRanges()) {
                    e = e.getTrimmed();
                    let i = false;
                    for (let n of t.getRanges()) {
                        n = n.getTrimmed();
                        if (e.start.isEqual(n.start) && e.end.isEqual(n.end)) {
                            i = true;
                            break
                        }
                    }
                    if (!i) {
                        return false
                    }
                }
                return true
            }

            getSelectedElement() {
                if (this.rangeCount !== 1) {
                    return null
                }
                return this.getFirstRange().getContainedElement()
            }

            setTo(t, e, i) {
                if (t === null) {
                    this._setRanges([]);
                    this._setFakeOptions(e)
                } else if (t instanceof gl || t instanceof ml) {
                    this._setRanges(t.getRanges(), t.isBackward);
                    this._setFakeOptions({fake: t.isFake, label: t.fakeSelectionLabel})
                } else if (t instanceof ul) {
                    this._setRanges([t], e && e.backward);
                    this._setFakeOptions(e)
                } else if (t instanceof dl) {
                    this._setRanges([new ul(t)]);
                    this._setFakeOptions(e)
                } else if (t instanceof zs) {
                    const n = !!i && !!i.backward;
                    let o;
                    if (e === undefined) {
                        throw new ss["b"]("view-selection-setTo-required-second-parameter: " + "selection.setTo requires the second parameter when the first parameter is a node.", this)
                    } else if (e == "in") {
                        o = ul._createIn(t)
                    } else if (e == "on") {
                        o = ul._createOn(t)
                    } else {
                        o = new ul(dl._createAt(t, e))
                    }
                    this._setRanges([o], n);
                    this._setFakeOptions(i)
                } else if (js(t)) {
                    this._setRanges(t, e && e.backward);
                    this._setFakeOptions(e)
                } else {
                    throw new ss["b"]("view-selection-setTo-not-selectable: Cannot set selection to given place.", this)
                }
                this.fire("change")
            }

            setFocus(t, e) {
                if (this.anchor === null) {
                    throw new ss["b"]("view-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.", this)
                }
                const i = dl._createAt(t, e);
                if (i.compareWith(this.focus) == "same") {
                    return
                }
                const n = this.anchor;
                this._ranges.pop();
                if (i.compareWith(n) == "before") {
                    this._addRange(new ul(i, n), true)
                } else {
                    this._addRange(new ul(n, i))
                }
                this.fire("change")
            }

            is(t) {
                return t == "selection" || t == "view:selection"
            }

            _setRanges(t, e = false) {
                t = Array.from(t);
                this._ranges = [];
                for (const e of t) {
                    this._addRange(e)
                }
                this._lastRangeBackward = !!e
            }

            _setFakeOptions(t = {}) {
                this._isFake = !!t.fake;
                this._fakeSelectionLabel = t.fake ? t.label || "" : ""
            }

            _addRange(t, e = false) {
                if (!(t instanceof ul)) {
                    throw new ss["b"]("view-selection-add-range-not-range: " + "Selection range set to an object that is not an instance of view.Range", this)
                }
                this._pushRange(t);
                this._lastRangeBackward = !!e
            }

            _pushRange(t) {
                for (const e of this._ranges) {
                    if (t.isIntersecting(e)) {
                        throw new ss["b"]("view-selection-range-intersects: Trying to add a range that intersects with another range from selection.", this, {
                            addedRange: t,
                            intersectingRange: e
                        })
                    }
                }
                this._ranges.push(new ul(t.start, t.end))
            }
        }

        vs(gl, ds);

        class ml {
            constructor(t = null, e, i) {
                this._selection = new gl;
                this._selection.delegate("change").to(this);
                this._selection.setTo(t, e, i)
            }

            get isFake() {
                return this._selection.isFake
            }

            get fakeSelectionLabel() {
                return this._selection.fakeSelectionLabel
            }

            get anchor() {
                return this._selection.anchor
            }

            get focus() {
                return this._selection.focus
            }

            get isCollapsed() {
                return this._selection.isCollapsed
            }

            get rangeCount() {
                return this._selection.rangeCount
            }

            get isBackward() {
                return this._selection.isBackward
            }

            get editableElement() {
                return this._selection.editableElement
            }

            get _ranges() {
                return this._selection._ranges
            }

            * getRanges() {
                yield* this._selection.getRanges()
            }

            getFirstRange() {
                return this._selection.getFirstRange()
            }

            getLastRange() {
                return this._selection.getLastRange()
            }

            getFirstPosition() {
                return this._selection.getFirstPosition()
            }

            getLastPosition() {
                return this._selection.getLastPosition()
            }

            getSelectedElement() {
                return this._selection.getSelectedElement()
            }

            isEqual(t) {
                return this._selection.isEqual(t)
            }

            isSimilar(t) {
                return this._selection.isSimilar(t)
            }

            is(t) {
                return t == "selection" || t == "documentSelection" || t == "view:selection" || t == "view:documentSelection"
            }

            _setTo(t, e, i) {
                this._selection.setTo(t, e, i)
            }

            _setFocus(t, e) {
                this._selection.setFocus(t, e)
            }
        }

        vs(ml, ds);

        class pl {
            constructor(t) {
                this.selection = new ml;
                this.roots = new ys({idProperty: "rootName"});
                this.stylesProcessor = t;
                this.set("isReadOnly", false);
                this.set("isFocused", false);
                this.set("isComposing", false);
                this._postFixers = new Set
            }

            getRoot(t = "main") {
                return this.roots.get(t)
            }

            registerPostFixer(t) {
                this._postFixers.add(t)
            }

            destroy() {
                this.roots.map(t => t.destroy());
                this.stopListening()
            }

            _callPostFixers(t) {
                let e = false;
                do {
                    for (const i of this._postFixers) {
                        e = i(t);
                        if (e) {
                            break
                        }
                    }
                } while (e)
            }
        }

        vs(pl, Jc);
        const bl = 10;

        class wl extends zc {
            constructor(t, e, i, n) {
                super(t, e, i, n);
                this.getFillerOffset = kl;
                this._priority = bl;
                this._id = null;
                this._clonesGroup = null
            }

            get priority() {
                return this._priority
            }

            get id() {
                return this._id
            }

            getElementsWithSameId() {
                if (this.id === null) {
                    throw new ss["b"]("attribute-element-get-elements-with-same-id-no-id: " + "Cannot get elements with the same id for an attribute element without id.", this)
                }
                return new Set(this._clonesGroup)
            }

            is(t, e = null) {
                const i = t && t.replace(/^view:/, "");
                if (!e) {
                    return i == "attributeElement" || super.is(t)
                } else {
                    return i == "attributeElement" && e == this.name || super.is(t, e)
                }
            }

            isSimilar(t) {
                if (this.id !== null || t.id !== null) {
                    return this.id === t.id
                }
                return super.isSimilar(t) && this.priority == t.priority
            }

            _clone(t) {
                const e = super._clone(t);
                e._priority = this._priority;
                e._id = this._id;
                return e
            }
        }

        wl.DEFAULT_PRIORITY = bl;

        function kl() {
            if (_l(this)) {
                return null
            }
            let t = this.parent;
            while (t && t.is("attributeElement")) {
                if (_l(t) > 1) {
                    return null
                }
                t = t.parent
            }
            if (!t || _l(t) > 1) {
                return null
            }
            return this.childCount
        }

        function _l(t) {
            return Array.from(t.getChildren()).filter(t => !t.is("uiElement")).length
        }

        class vl extends zc {
            constructor(t, e, i, n) {
                super(t, e, i, n);
                this.getFillerOffset = yl
            }

            is(t, e = null) {
                const i = t.replace(/^view:/, "");
                if (!e) {
                    return i == "emptyElement" || super.is(t)
                } else {
                    return i == "emptyElement" && e == this.name || super.is(t, e)
                }
            }

            _insertChild(t, e) {
                if (e && (e instanceof zs || Array.from(e).length > 0)) {
                    throw new ss["b"]("view-emptyelement-cannot-add: Cannot add child nodes to EmptyElement instance.", [this, e])
                }
            }
        }

        function yl() {
            return null
        }

        const xl = navigator.userAgent.toLowerCase();
        const Cl = {
            isMac: Tl(xl),
            isEdge: Pl(xl),
            isGecko: Sl(xl),
            isSafari: El(xl),
            isAndroid: Rl(xl),
            features: {isRegExpUnicodePropertySupported: Ol()}
        };
        var Al = Cl;

        function Tl(t) {
            return t.indexOf("macintosh") > -1
        }

        function Pl(t) {
            return !!t.match(/edge\/(\d+.?\d*)/)
        }

        function Sl(t) {
            return !!t.match(/gecko\/\d+/)
        }

        function El(t) {
            return t.indexOf(" applewebkit/") > -1 && t.indexOf("chrome") === -1
        }

        function Rl(t) {
            return t.indexOf("android") > -1
        }

        function Ol() {
            let t = false;
            try {
                t = "ć".search(new RegExp("[\\p{L}]", "u")) === 0
            } catch (t) {
            }
            return t
        }

        const Il = {"⌘": "ctrl", "⇧": "shift", "⌥": "alt"};
        const Vl = {ctrl: "⌘", shift: "⇧", alt: "⌥"};
        const Nl = Ll();

        function Ml(t) {
            let e;
            if (typeof t == "string") {
                e = Nl[t.toLowerCase()];
                if (!e) {
                    throw new ss["b"]("keyboard-unknown-key: Unknown key name.", null, {key: t})
                }
            } else {
                e = t.keyCode + (t.altKey ? Nl.alt : 0) + (t.ctrlKey ? Nl.ctrl : 0) + (t.shiftKey ? Nl.shift : 0)
            }
            return e
        }

        function Bl(t) {
            if (typeof t == "string") {
                t = Fl(t)
            }
            return t.map(t => typeof t == "string" ? Ml(t) : t).reduce((t, e) => e + t, 0)
        }

        function zl(t) {
            if (!Al.isMac) {
                return t
            }
            return Fl(t).map(t => Vl[t.toLowerCase()] || t).reduce((t, e) => {
                if (t.slice(-1) in Il) {
                    return t + e
                } else {
                    return t + "+" + e
                }
            })
        }

        function Ll() {
            const t = {
                arrowleft: 37,
                arrowup: 38,
                arrowright: 39,
                arrowdown: 40,
                backspace: 8,
                delete: 46,
                enter: 13,
                space: 32,
                esc: 27,
                tab: 9,
                ctrl: 1114112,
                cmd: 1114112,
                shift: 2228224,
                alt: 4456448
            };
            for (let e = 65; e <= 90; e++) {
                const i = String.fromCharCode(e);
                t[i.toLowerCase()] = e
            }
            for (let e = 48; e <= 57; e++) {
                t[e - 48] = e
            }
            for (let e = 112; e <= 123; e++) {
                t["f" + (e - 111)] = e
            }
            return t
        }

        function Fl(t) {
            return t.split(/\s*\+\s*/)
        }

        class Dl extends zc {
            constructor(t, e, i, n) {
                super(t, e, i, n);
                this.getFillerOffset = Hl
            }

            is(t, e = null) {
                const i = t.replace(/^view:/, "");
                if (!e) {
                    return i == "uiElement" || super.is(t)
                } else {
                    return i == "uiElement" && e == this.name || super.is(t, e)
                }
            }

            _insertChild(t, e) {
                if (e && (e instanceof zs || Array.from(e).length > 0)) {
                    throw new ss["b"]("view-uielement-cannot-add: Cannot add child nodes to UIElement instance.", this)
                }
            }

            render(t) {
                return this.toDomElement(t)
            }

            toDomElement(t) {
                const e = t.createElement(this.name);
                for (const t of this.getAttributeKeys()) {
                    e.setAttribute(t, this.getAttribute(t))
                }
                return e
            }
        }

        function jl(t) {
            t.document.on("keydown", (e, i) => Wl(e, i, t.domConverter))
        }

        function Hl() {
            return null
        }

        function Wl(t, e, i) {
            if (e.keyCode == Nl.arrowright) {
                const t = e.domTarget.ownerDocument.defaultView.getSelection();
                const n = t.rangeCount == 1 && t.getRangeAt(0).collapsed;
                if (n || e.shiftKey) {
                    const e = t.focusNode;
                    const o = t.focusOffset;
                    const r = i.domPositionToView(e, o);
                    if (r === null) {
                        return
                    }
                    let s = false;
                    const a = r.getLastMatchingPosition(t => {
                        if (t.item.is("uiElement")) {
                            s = true
                        }
                        if (t.item.is("uiElement") || t.item.is("attributeElement")) {
                            return true
                        }
                        return false
                    });
                    if (s) {
                        const e = i.viewPositionToDom(a);
                        if (n) {
                            t.collapse(e.parent, e.offset)
                        } else {
                            t.extend(e.parent, e.offset)
                        }
                    }
                }
            }
        }

        class ql {
            constructor(t, e) {
                this.document = t;
                this._children = [];
                if (e) {
                    this._insertChild(0, e)
                }
            }

            [Symbol.iterator]() {
                return this._children[Symbol.iterator]()
            }

            get childCount() {
                return this._children.length
            }

            get isEmpty() {
                return this.childCount === 0
            }

            get root() {
                return this
            }

            get parent() {
                return null
            }

            is(t) {
                return t == "documentFragment" || t == "view:documentFragment"
            }

            _appendChild(t) {
                return this._insertChild(this.childCount, t)
            }

            getChild(t) {
                return this._children[t]
            }

            getChildIndex(t) {
                return this._children.indexOf(t)
            }

            getChildren() {
                return this._children[Symbol.iterator]()
            }

            _insertChild(t, e) {
                this._fireChange("children", this);
                let i = 0;
                const n = Ul(this.document, e);
                for (const e of n) {
                    if (e.parent !== null) {
                        e._remove()
                    }
                    e.parent = this;
                    this._children.splice(t, 0, e);
                    t++;
                    i++
                }
                return i
            }

            _removeChildren(t, e = 1) {
                this._fireChange("children", this);
                for (let i = t; i < t + e; i++) {
                    this._children[i].parent = null
                }
                return this._children.splice(t, e)
            }

            _fireChange(t, e) {
                this.fire("change:" + t, e)
            }
        }

        vs(ql, ds);

        function Ul(t, e) {
            if (typeof e == "string") {
                return [new Ls(t, e)]
            }
            if (!js(e)) {
                e = [e]
            }
            return Array.from(e).map(e => {
                if (typeof e == "string") {
                    return new Ls(t, e)
                }
                if (e instanceof Fs) {
                    return new Ls(t, e.data)
                }
                return e
            })
        }

        class $l {
            constructor(t) {
                this.document = t;
                this._cloneGroups = new Map
            }

            setSelection(t, e, i) {
                this.document.selection._setTo(t, e, i)
            }

            setSelectionFocus(t, e) {
                this.document.selection._setFocus(t, e)
            }

            createText(t) {
                return new Ls(this.document, t)
            }

            createAttributeElement(t, e, i = {}) {
                const n = new wl(this.document, t, e);
                if (i.priority) {
                    n._priority = i.priority
                }
                if (i.id) {
                    n._id = i.id
                }
                return n
            }

            createContainerElement(t, e) {
                return new jc(this.document, t, e)
            }

            createEditableElement(t, e) {
                const i = new sl(this.document, t, e);
                i._document = this.document;
                return i
            }

            createEmptyElement(t, e) {
                return new vl(this.document, t, e)
            }

            createUIElement(t, e, i) {
                const n = new Dl(this.document, t, e);
                if (i) {
                    n.render = i
                }
                return n
            }

            setAttribute(t, e, i) {
                i._setAttribute(t, e)
            }

            removeAttribute(t, e) {
                e._removeAttribute(t)
            }

            addClass(t, e) {
                e._addClass(t)
            }

            removeClass(t, e) {
                e._removeClass(t)
            }

            setStyle(t, e, i) {
                if (N(t) && i === undefined) {
                    i = e
                }
                i._setStyle(t, e)
            }

            removeStyle(t, e) {
                e._removeStyle(t)
            }

            setCustomProperty(t, e, i) {
                i._setCustomProperty(t, e)
            }

            removeCustomProperty(t, e) {
                return e._removeCustomProperty(t)
            }

            breakAttributes(t) {
                if (t instanceof dl) {
                    return this._breakAttributes(t)
                } else {
                    return this._breakAttributesRange(t)
                }
            }

            breakContainer(t) {
                const e = t.parent;
                if (!e.is("containerElement")) {
                    throw new ss["b"]("view-writer-break-non-container-element: Trying to break an element which is not a container element.", this.document)
                }
                if (!e.parent) {
                    throw new ss["b"]("view-writer-break-root: Trying to break root element.", this.document)
                }
                if (t.isAtStart) {
                    return dl._createBefore(e)
                } else if (!t.isAtEnd) {
                    const i = e._clone(false);
                    this.insert(dl._createAfter(e), i);
                    const n = new ul(t, dl._createAt(e, "end"));
                    const o = new dl(i, 0);
                    this.move(n, o)
                }
                return dl._createAfter(e)
            }

            mergeAttributes(t) {
                const e = t.offset;
                const i = t.parent;
                if (i.is("text")) {
                    return t
                }
                if (i.is("attributeElement") && i.childCount === 0) {
                    const t = i.parent;
                    const e = i.index;
                    i._remove();
                    this._removeFromClonedElementsGroup(i);
                    return this.mergeAttributes(new dl(t, e))
                }
                const n = i.getChild(e - 1);
                const o = i.getChild(e);
                if (!n || !o) {
                    return t
                }
                if (n.is("text") && o.is("text")) {
                    return Xl(n, o)
                } else if (n.is("attributeElement") && o.is("attributeElement") && n.isSimilar(o)) {
                    const t = n.childCount;
                    n._appendChild(o.getChildren());
                    o._remove();
                    this._removeFromClonedElementsGroup(o);
                    return this.mergeAttributes(new dl(n, t))
                }
                return t
            }

            mergeContainers(t) {
                const e = t.nodeBefore;
                const i = t.nodeAfter;
                if (!e || !i || !e.is("containerElement") || !i.is("containerElement")) {
                    throw new ss["b"]("view-writer-merge-containers-invalid-position: " + "Element before and after given position cannot be merged.", this.document)
                }
                const n = e.getChild(e.childCount - 1);
                const o = n instanceof Ls ? dl._createAt(n, "end") : dl._createAt(e, "end");
                this.move(ul._createIn(i), dl._createAt(e, "end"));
                this.remove(ul._createOn(i));
                return o
            }

            insert(t, e) {
                e = js(e) ? [...e] : [e];
                Zl(e, this.document);
                const i = Kl(t);
                if (!i) {
                    throw new ss["b"]("view-writer-invalid-position-container", this.document)
                }
                const n = this._breakAttributes(t, true);
                const o = i._insertChild(n.offset, e);
                for (const t of e) {
                    this._addToClonedElementsGroup(t)
                }
                const r = n.getShiftedBy(o);
                const s = this.mergeAttributes(n);
                if (o === 0) {
                    return new ul(s, s)
                } else {
                    if (!s.isEqual(n)) {
                        r.offset--
                    }
                    const t = this.mergeAttributes(r);
                    return new ul(s, t)
                }
            }

            remove(t) {
                const e = t instanceof ul ? t : ul._createOn(t);
                id(e, this.document);
                if (e.isCollapsed) {
                    return new ql(this.document)
                }
                const {start: i, end: n} = this._breakAttributesRange(e, true);
                const o = i.parent;
                const r = n.offset - i.offset;
                const s = o._removeChildren(i.offset, r);
                for (const t of s) {
                    this._removeFromClonedElementsGroup(t)
                }
                const a = this.mergeAttributes(i);
                e.start = a;
                e.end = a.clone();
                return new ql(this.document, s)
            }

            clear(t, e) {
                id(t, this.document);
                const i = t.getWalker({direction: "backward", ignoreElementEnd: true});
                for (const n of i) {
                    const i = n.item;
                    let o;
                    if (i.is("element") && e.isSimilar(i)) {
                        o = ul._createOn(i)
                    } else if (!n.nextPosition.isAfter(t.start) && i.is("textProxy")) {
                        const t = i.getAncestors().find(t => t.is("element") && e.isSimilar(t));
                        if (t) {
                            o = ul._createIn(t)
                        }
                    }
                    if (o) {
                        if (o.end.isAfter(t.end)) {
                            o.end = t.end
                        }
                        if (o.start.isBefore(t.start)) {
                            o.start = t.start
                        }
                        this.remove(o)
                    }
                }
            }

            move(t, e) {
                let i;
                if (e.isAfter(t.end)) {
                    e = this._breakAttributes(e, true);
                    const n = e.parent;
                    const o = n.childCount;
                    t = this._breakAttributesRange(t, true);
                    i = this.remove(t);
                    e.offset += n.childCount - o
                } else {
                    i = this.remove(t)
                }
                return this.insert(e, i)
            }

            wrap(t, e) {
                if (!(e instanceof wl)) {
                    throw new ss["b"]("view-writer-wrap-invalid-attribute", this.document)
                }
                id(t, this.document);
                if (!t.isCollapsed) {
                    return this._wrapRange(t, e)
                } else {
                    let i = t.start;
                    if (i.parent.is("element") && !Gl(i.parent)) {
                        i = i.getLastMatchingPosition(t => t.item.is("uiElement"))
                    }
                    i = this._wrapPosition(i, e);
                    const n = this.document.selection;
                    if (n.isCollapsed && n.getFirstPosition().isEqual(t.start)) {
                        this.setSelection(i)
                    }
                    return new ul(i)
                }
            }

            unwrap(t, e) {
                if (!(e instanceof wl)) {
                    throw new ss["b"]("view-writer-unwrap-invalid-attribute", this.document)
                }
                id(t, this.document);
                if (t.isCollapsed) {
                    return t
                }
                const {start: i, end: n} = this._breakAttributesRange(t, true);
                const o = i.parent;
                const r = this._unwrapChildren(o, i.offset, n.offset, e);
                const s = this.mergeAttributes(r.start);
                if (!s.isEqual(r.start)) {
                    r.end.offset--
                }
                const a = this.mergeAttributes(r.end);
                return new ul(s, a)
            }

            rename(t, e) {
                const i = new jc(this.document, t, e.getAttributes());
                this.insert(dl._createAfter(e), i);
                this.move(ul._createIn(e), dl._createAt(i, 0));
                this.remove(ul._createOn(e));
                return i
            }

            clearClonedElementsGroup(t) {
                this._cloneGroups.delete(t)
            }

            createPositionAt(t, e) {
                return dl._createAt(t, e)
            }

            createPositionAfter(t) {
                return dl._createAfter(t)
            }

            createPositionBefore(t) {
                return dl._createBefore(t)
            }

            createRange(t, e) {
                return new ul(t, e)
            }

            createRangeOn(t) {
                return ul._createOn(t)
            }

            createRangeIn(t) {
                return ul._createIn(t)
            }

            createSelection(t, e, i) {
                return new gl(t, e, i)
            }

            _wrapChildren(t, e, i, n) {
                let o = e;
                const r = [];
                while (o < i) {
                    const e = t.getChild(o);
                    const i = e.is("text");
                    const s = e.is("attributeElement");
                    const a = e.is("emptyElement");
                    const c = e.is("uiElement");
                    if (s && this._wrapAttributeElement(n, e)) {
                        r.push(new dl(t, o))
                    } else if (i || a || c || s && Jl(n, e)) {
                        const i = n._clone();
                        e._remove();
                        i._appendChild(e);
                        t._insertChild(o, i);
                        this._addToClonedElementsGroup(i);
                        r.push(new dl(t, o))
                    } else if (s) {
                        this._wrapChildren(e, 0, e.childCount, n)
                    }
                    o++
                }
                let s = 0;
                for (const t of r) {
                    t.offset -= s;
                    if (t.offset == e) {
                        continue
                    }
                    const n = this.mergeAttributes(t);
                    if (!n.isEqual(t)) {
                        s++;
                        i--
                    }
                }
                return ul._createFromParentsAndOffsets(t, e, t, i)
            }

            _unwrapChildren(t, e, i, n) {
                let o = e;
                const r = [];
                while (o < i) {
                    const e = t.getChild(o);
                    if (!e.is("attributeElement")) {
                        o++;
                        continue
                    }
                    if (e.isSimilar(n)) {
                        const n = e.getChildren();
                        const s = e.childCount;
                        e._remove();
                        t._insertChild(o, n);
                        this._removeFromClonedElementsGroup(e);
                        r.push(new dl(t, o), new dl(t, o + s));
                        o += s;
                        i += s - 1;
                        continue
                    }
                    if (this._unwrapAttributeElement(n, e)) {
                        r.push(new dl(t, o), new dl(t, o + 1));
                        o++;
                        continue
                    }
                    this._unwrapChildren(e, 0, e.childCount, n);
                    o++
                }
                let s = 0;
                for (const t of r) {
                    t.offset -= s;
                    if (t.offset == e || t.offset == i) {
                        continue
                    }
                    const n = this.mergeAttributes(t);
                    if (!n.isEqual(t)) {
                        s++;
                        i--
                    }
                }
                return ul._createFromParentsAndOffsets(t, e, t, i)
            }

            _wrapRange(t, e) {
                const {start: i, end: n} = this._breakAttributesRange(t, true);
                const o = i.parent;
                const r = this._wrapChildren(o, i.offset, n.offset, e);
                const s = this.mergeAttributes(r.start);
                if (!s.isEqual(r.start)) {
                    r.end.offset--
                }
                const a = this.mergeAttributes(r.end);
                return new ul(s, a)
            }

            _wrapPosition(t, e) {
                if (e.isSimilar(t.parent)) {
                    return Yl(t.clone())
                }
                if (t.parent.is("text")) {
                    t = Ql(t)
                }
                const i = this.createAttributeElement();
                i._priority = Number.POSITIVE_INFINITY;
                i.isSimilar = () => false;
                t.parent._insertChild(t.offset, i);
                const n = new ul(t, t.getShiftedBy(1));
                this.wrap(n, e);
                const o = new dl(i.parent, i.index);
                i._remove();
                const r = o.nodeBefore;
                const s = o.nodeAfter;
                if (r instanceof Ls && s instanceof Ls) {
                    return Xl(r, s)
                }
                return Yl(o)
            }

            _wrapAttributeElement(t, e) {
                if (!nd(t, e)) {
                    return false
                }
                if (t.name !== e.name || t.priority !== e.priority) {
                    return false
                }
                for (const i of t.getAttributeKeys()) {
                    if (i === "class" || i === "style") {
                        continue
                    }
                    if (e.hasAttribute(i) && e.getAttribute(i) !== t.getAttribute(i)) {
                        return false
                    }
                }
                for (const i of t.getStyleNames()) {
                    if (e.hasStyle(i) && e.getStyle(i) !== t.getStyle(i)) {
                        return false
                    }
                }
                for (const i of t.getAttributeKeys()) {
                    if (i === "class" || i === "style") {
                        continue
                    }
                    if (!e.hasAttribute(i)) {
                        this.setAttribute(i, t.getAttribute(i), e)
                    }
                }
                for (const i of t.getStyleNames()) {
                    if (!e.hasStyle(i)) {
                        this.setStyle(i, t.getStyle(i), e)
                    }
                }
                for (const i of t.getClassNames()) {
                    if (!e.hasClass(i)) {
                        this.addClass(i, e)
                    }
                }
                return true
            }

            _unwrapAttributeElement(t, e) {
                if (!nd(t, e)) {
                    return false
                }
                if (t.name !== e.name || t.priority !== e.priority) {
                    return false
                }
                for (const i of t.getAttributeKeys()) {
                    if (i === "class" || i === "style") {
                        continue
                    }
                    if (!e.hasAttribute(i) || e.getAttribute(i) !== t.getAttribute(i)) {
                        return false
                    }
                }
                if (!e.hasClass(...t.getClassNames())) {
                    return false
                }
                for (const i of t.getStyleNames()) {
                    if (!e.hasStyle(i) || e.getStyle(i) !== t.getStyle(i)) {
                        return false
                    }
                }
                for (const i of t.getAttributeKeys()) {
                    if (i === "class" || i === "style") {
                        continue
                    }
                    this.removeAttribute(i, e)
                }
                this.removeClass(Array.from(t.getClassNames()), e);
                this.removeStyle(Array.from(t.getStyleNames()), e);
                return true
            }

            _breakAttributesRange(t, e = false) {
                const i = t.start;
                const n = t.end;
                id(t, this.document);
                if (t.isCollapsed) {
                    const i = this._breakAttributes(t.start, e);
                    return new ul(i, i)
                }
                const o = this._breakAttributes(n, e);
                const r = o.parent.childCount;
                const s = this._breakAttributes(i, e);
                o.offset += o.parent.childCount - r;
                return new ul(s, o)
            }

            _breakAttributes(t, e = false) {
                const i = t.offset;
                const n = t.parent;
                if (t.parent.is("emptyElement")) {
                    throw new ss["b"]("view-writer-cannot-break-empty-element", this.document)
                }
                if (t.parent.is("uiElement")) {
                    throw new ss["b"]("view-writer-cannot-break-ui-element", this.document)
                }
                if (!e && n.is("text") && ed(n.parent)) {
                    return t.clone()
                }
                if (ed(n)) {
                    return t.clone()
                }
                if (n.is("text")) {
                    return this._breakAttributes(Ql(t), e)
                }
                const o = n.childCount;
                if (i == o) {
                    const t = new dl(n.parent, n.index + 1);
                    return this._breakAttributes(t, e)
                } else {
                    if (i === 0) {
                        const t = new dl(n.parent, n.index);
                        return this._breakAttributes(t, e)
                    } else {
                        const t = n.index + 1;
                        const o = n._clone();
                        n.parent._insertChild(t, o);
                        this._addToClonedElementsGroup(o);
                        const r = n.childCount - i;
                        const s = n._removeChildren(i, r);
                        o._appendChild(s);
                        const a = new dl(n.parent, t);
                        return this._breakAttributes(a, e)
                    }
                }
            }

            _addToClonedElementsGroup(t) {
                if (!t.root.is("rootElement")) {
                    return
                }
                if (t.is("element")) {
                    for (const e of t.getChildren()) {
                        this._addToClonedElementsGroup(e)
                    }
                }
                const e = t.id;
                if (!e) {
                    return
                }
                let i = this._cloneGroups.get(e);
                if (!i) {
                    i = new Set;
                    this._cloneGroups.set(e, i)
                }
                i.add(t);
                t._clonesGroup = i
            }

            _removeFromClonedElementsGroup(t) {
                if (t.is("element")) {
                    for (const e of t.getChildren()) {
                        this._removeFromClonedElementsGroup(e)
                    }
                }
                const e = t.id;
                if (!e) {
                    return
                }
                const i = this._cloneGroups.get(e);
                if (!i) {
                    return
                }
                i.delete(t)
            }
        }

        function Gl(t) {
            return Array.from(t.getChildren()).some(t => !t.is("uiElement"))
        }

        function Kl(t) {
            let e = t.parent;
            while (!ed(e)) {
                if (!e) {
                    return undefined
                }
                e = e.parent
            }
            return e
        }

        function Jl(t, e) {
            if (t.priority < e.priority) {
                return true
            } else if (t.priority > e.priority) {
                return false
            }
            return t.getIdentity() < e.getIdentity()
        }

        function Yl(t) {
            const e = t.nodeBefore;
            if (e && e.is("text")) {
                return new dl(e, e.data.length)
            }
            const i = t.nodeAfter;
            if (i && i.is("text")) {
                return new dl(i, 0)
            }
            return t
        }

        function Ql(t) {
            if (t.offset == t.parent.data.length) {
                return new dl(t.parent.parent, t.parent.index + 1)
            }
            if (t.offset === 0) {
                return new dl(t.parent.parent, t.parent.index)
            }
            const e = t.parent.data.slice(t.offset);
            t.parent._data = t.parent.data.slice(0, t.offset);
            t.parent.parent._insertChild(t.parent.index + 1, new Ls(t.root.document, e));
            return new dl(t.parent.parent, t.parent.index + 1)
        }

        function Xl(t, e) {
            const i = t.data.length;
            t._data += e.data;
            e._remove();
            return new dl(t, i)
        }

        function Zl(t, e) {
            for (const i of t) {
                if (!td.some(t => i instanceof t)) {
                    throw new ss["b"]("view-writer-insert-invalid-node", e)
                }
                if (!i.is("text")) {
                    Zl(i.getChildren(), e)
                }
            }
        }

        const td = [Ls, wl, jc, vl, Dl];

        function ed(t) {
            return t && (t.is("containerElement") || t.is("documentFragment"))
        }

        function id(t, e) {
            const i = Kl(t.start);
            const n = Kl(t.end);
            if (!i || !n || i !== n) {
                throw new ss["b"]("view-writer-invalid-range-container", e)
            }
        }

        function nd(t, e) {
            return t.id === null && e.id === null
        }

        function od(t) {
            return Object.prototype.toString.call(t) == "[object Text]"
        }

        const rd = t => t.createTextNode(" ");
        const sd = t => {
            const e = t.createElement("br");
            e.dataset.ckeFiller = true;
            return e
        };
        const ad = 7;
        const cd = (() => {
            let t = "";
            for (let e = 0; e < ad; e++) {
                t += "​"
            }
            return t
        })();

        function ld(t) {
            return od(t) && t.data.substr(0, ad) === cd
        }

        function dd(t) {
            return t.data.length == ad && ld(t)
        }

        function ud(t) {
            if (ld(t)) {
                return t.data.slice(ad)
            } else {
                return t.data
            }
        }

        function hd(t) {
            t.document.on("keydown", fd)
        }

        function fd(t, e) {
            if (e.keyCode == Nl.arrowleft) {
                const t = e.domTarget.ownerDocument.defaultView.getSelection();
                if (t.rangeCount == 1 && t.getRangeAt(0).collapsed) {
                    const e = t.getRangeAt(0).startContainer;
                    const i = t.getRangeAt(0).startOffset;
                    if (ld(e) && i <= ad) {
                        t.collapse(e, 0)
                    }
                }
            }
        }

        function gd(t, e, i, n = false) {
            i = i || function (t, e) {
                return t === e
            };
            if (!Array.isArray(t)) {
                t = Array.from(t)
            }
            if (!Array.isArray(e)) {
                e = Array.from(e)
            }
            const o = md(t, e, i);
            return n ? kd(o, e.length) : wd(e, o)
        }

        function md(t, e, i) {
            const n = pd(t, e, i);
            if (n === -1) {
                return {firstIndex: -1, lastIndexOld: -1, lastIndexNew: -1}
            }
            const o = bd(t, n);
            const r = bd(e, n);
            const s = pd(o, r, i);
            const a = t.length - s;
            const c = e.length - s;
            return {firstIndex: n, lastIndexOld: a, lastIndexNew: c}
        }

        function pd(t, e, i) {
            for (let n = 0; n < Math.max(t.length, e.length); n++) {
                if (t[n] === undefined || e[n] === undefined || !i(t[n], e[n])) {
                    return n
                }
            }
            return -1
        }

        function bd(t, e) {
            return t.slice(e).reverse()
        }

        function wd(t, e) {
            const i = [];
            const {firstIndex: n, lastIndexOld: o, lastIndexNew: r} = e;
            if (r - n > 0) {
                i.push({index: n, type: "insert", values: t.slice(n, r)})
            }
            if (o - n > 0) {
                i.push({index: n + (r - n), type: "delete", howMany: o - n})
            }
            return i
        }

        function kd(t, e) {
            const {firstIndex: i, lastIndexOld: n, lastIndexNew: o} = t;
            if (i === -1) {
                return Array(e).fill("equal")
            }
            let r = [];
            if (i > 0) {
                r = r.concat(Array(i).fill("equal"))
            }
            if (o - i > 0) {
                r = r.concat(Array(o - i).fill("insert"))
            }
            if (n - i > 0) {
                r = r.concat(Array(n - i).fill("delete"))
            }
            if (o < e) {
                r = r.concat(Array(e - o).fill("equal"))
            }
            return r
        }

        function _d(t, e, i) {
            i = i || function (t, e) {
                return t === e
            };
            const n = t.length;
            const o = e.length;
            if (n > 200 || o > 200 || n + o > 300) {
                return _d.fastDiff(t, e, i, true)
            }
            let r, s;
            if (o < n) {
                const i = t;
                t = e;
                e = i;
                r = "delete";
                s = "insert"
            } else {
                r = "insert";
                s = "delete"
            }
            const a = t.length;
            const c = e.length;
            const l = c - a;
            const d = {};
            const u = {};

            function h(n) {
                const o = (u[n - 1] !== undefined ? u[n - 1] : -1) + 1;
                const l = u[n + 1] !== undefined ? u[n + 1] : -1;
                const h = o > l ? -1 : 1;
                if (d[n + h]) {
                    d[n] = d[n + h].slice(0)
                }
                if (!d[n]) {
                    d[n] = []
                }
                d[n].push(o > l ? r : s);
                let f = Math.max(o, l);
                let g = f - n;
                while (g < a && f < c && i(t[g], e[f])) {
                    g++;
                    f++;
                    d[n].push("equal")
                }
                return f
            }

            let f = 0;
            let g;
            do {
                for (g = -f; g < l; g++) {
                    u[g] = h(g)
                }
                for (g = l + f; g > l; g--) {
                    u[g] = h(g)
                }
                u[l] = h(l);
                f++
            } while (u[l] !== c);
            return d[l].slice(1)
        }

        _d.fastDiff = gd;

        function vd(t, e, i) {
            t.insertBefore(i, t.childNodes[e] || null)
        }

        function yd(t) {
            const e = t.parentNode;
            if (e) {
                e.removeChild(t)
            }
        }

        function xd(t) {
            if (t) {
                if (t.defaultView) {
                    return t instanceof t.defaultView.Document
                } else if (t.ownerDocument && t.ownerDocument.defaultView) {
                    return t instanceof t.ownerDocument.defaultView.Node
                }
            }
            return false
        }

        class Cd {
            constructor(t, e) {
                this.domDocuments = new Set;
                this.domConverter = t;
                this.markedAttributes = new Set;
                this.markedChildren = new Set;
                this.markedTexts = new Set;
                this.selection = e;
                this.isFocused = false;
                this._inlineFiller = null;
                this._fakeSelectionContainer = null
            }

            markToSync(t, e) {
                if (t === "text") {
                    if (this.domConverter.mapViewToDom(e.parent)) {
                        this.markedTexts.add(e)
                    }
                } else {
                    if (!this.domConverter.mapViewToDom(e)) {
                        return
                    }
                    if (t === "attributes") {
                        this.markedAttributes.add(e)
                    } else if (t === "children") {
                        this.markedChildren.add(e)
                    } else {
                        throw new ss["b"]("view-renderer-unknown-type: Unknown type passed to Renderer.markToSync.", this)
                    }
                }
            }

            render() {
                let t;
                for (const t of this.markedChildren) {
                    this._updateChildrenMappings(t)
                }
                if (this._inlineFiller && !this._isSelectionInInlineFiller()) {
                    this._removeInlineFiller()
                }
                if (this._inlineFiller) {
                    t = this._getInlineFillerPosition()
                } else if (this._needsInlineFillerAtSelection()) {
                    t = this.selection.getFirstPosition();
                    this.markedChildren.add(t.parent)
                }
                for (const t of this.markedAttributes) {
                    this._updateAttrs(t)
                }
                for (const e of this.markedChildren) {
                    this._updateChildren(e, {inlineFillerPosition: t})
                }
                for (const e of this.markedTexts) {
                    if (!this.markedChildren.has(e.parent) && this.domConverter.mapViewToDom(e.parent)) {
                        this._updateText(e, {inlineFillerPosition: t})
                    }
                }
                if (t) {
                    const e = this.domConverter.viewPositionToDom(t);
                    const i = e.parent.ownerDocument;
                    if (!ld(e.parent)) {
                        this._inlineFiller = Td(i, e.parent, e.offset)
                    } else {
                        this._inlineFiller = e.parent
                    }
                } else {
                    this._inlineFiller = null
                }
                this._updateSelection();
                this._updateFocus();
                this.markedTexts.clear();
                this.markedAttributes.clear();
                this.markedChildren.clear()
            }

            _updateChildrenMappings(t) {
                const e = this.domConverter.mapViewToDom(t);
                if (!e) {
                    return
                }
                const i = this.domConverter.mapViewToDom(t).childNodes;
                const n = Array.from(this.domConverter.viewChildrenToDom(t, e.ownerDocument, {withChildren: false}));
                const o = this._diffNodeLists(i, n);
                const r = this._findReplaceActions(o, i, n);
                if (r.indexOf("replace") !== -1) {
                    const e = {equal: 0, insert: 0, delete: 0};
                    for (const o of r) {
                        if (o === "replace") {
                            const o = e.equal + e.insert;
                            const r = e.equal + e.delete;
                            const s = t.getChild(o);
                            if (s && !s.is("uiElement")) {
                                this._updateElementMappings(s, i[r])
                            }
                            yd(n[o]);
                            e.equal++
                        } else {
                            e[o]++
                        }
                    }
                }
            }

            _updateElementMappings(t, e) {
                this.domConverter.unbindDomElement(e);
                this.domConverter.bindElements(e, t);
                this.markedChildren.add(t);
                this.markedAttributes.add(t)
            }

            _getInlineFillerPosition() {
                const t = this.selection.getFirstPosition();
                if (t.parent.is("text")) {
                    return dl._createBefore(this.selection.getFirstPosition().parent)
                } else {
                    return t
                }
            }

            _isSelectionInInlineFiller() {
                if (this.selection.rangeCount != 1 || !this.selection.isCollapsed) {
                    return false
                }
                const t = this.selection.getFirstPosition();
                const e = this.domConverter.viewPositionToDom(t);
                if (e && od(e.parent) && ld(e.parent)) {
                    return true
                }
                return false
            }

            _removeInlineFiller() {
                const t = this._inlineFiller;
                if (!ld(t)) {
                    throw new ss["b"]("view-renderer-filler-was-lost: The inline filler node was lost.", this)
                }
                if (dd(t)) {
                    t.parentNode.removeChild(t)
                } else {
                    t.data = t.data.substr(ad)
                }
                this._inlineFiller = null
            }

            _needsInlineFillerAtSelection() {
                if (this.selection.rangeCount != 1 || !this.selection.isCollapsed) {
                    return false
                }
                const t = this.selection.getFirstPosition();
                const e = t.parent;
                const i = t.offset;
                if (!this.domConverter.mapViewToDom(e.root)) {
                    return false
                }
                if (!e.is("element")) {
                    return false
                }
                if (!Ad(e)) {
                    return false
                }
                if (i === e.getFillerOffset()) {
                    return false
                }
                const n = t.nodeBefore;
                const o = t.nodeAfter;
                if (n instanceof Ls || o instanceof Ls) {
                    return false
                }
                return true
            }

            _updateText(t, e) {
                const i = this.domConverter.findCorrespondingDomText(t);
                const n = this.domConverter.viewToDom(t, i.ownerDocument);
                const o = i.data;
                let r = n.data;
                const s = e.inlineFillerPosition;
                if (s && s.parent == t.parent && s.offset == t.index) {
                    r = cd + r
                }
                if (o != r) {
                    const t = gd(o, r);
                    for (const e of t) {
                        if (e.type === "insert") {
                            i.insertData(e.index, e.values.join(""))
                        } else {
                            i.deleteData(e.index, e.howMany)
                        }
                    }
                }
            }

            _updateAttrs(t) {
                const e = this.domConverter.mapViewToDom(t);
                if (!e) {
                    return
                }
                const i = Array.from(e.attributes).map(t => t.name);
                const n = t.getAttributeKeys();
                for (const i of n) {
                    e.setAttribute(i, t.getAttribute(i))
                }
                for (const n of i) {
                    if (!t.hasAttribute(n)) {
                        e.removeAttribute(n)
                    }
                }
            }

            _updateChildren(t, e) {
                const i = this.domConverter.mapViewToDom(t);
                if (!i) {
                    return
                }
                const n = e.inlineFillerPosition;
                const o = this.domConverter.mapViewToDom(t).childNodes;
                const r = Array.from(this.domConverter.viewChildrenToDom(t, i.ownerDocument, {
                    bind: true,
                    inlineFillerPosition: n
                }));
                if (n && n.parent === t) {
                    Td(i.ownerDocument, r, n.offset)
                }
                const s = this._diffNodeLists(o, r);
                let a = 0;
                const c = new Set;
                for (const t of s) {
                    if (t === "delete") {
                        c.add(o[a]);
                        yd(o[a])
                    } else if (t === "equal") {
                        a++
                    }
                }
                a = 0;
                for (const t of s) {
                    if (t === "insert") {
                        vd(i, a, r[a]);
                        a++
                    } else if (t === "equal") {
                        this._markDescendantTextToSync(this.domConverter.domToView(r[a]));
                        a++
                    }
                }
                for (const t of c) {
                    if (!t.parentNode) {
                        this.domConverter.unbindDomElement(t)
                    }
                }
            }

            _diffNodeLists(t, e) {
                t = Rd(t, this._fakeSelectionContainer);
                return _d(t, e, Sd.bind(null, this.domConverter))
            }

            _findReplaceActions(t, e, i) {
                if (t.indexOf("insert") === -1 || t.indexOf("delete") === -1) {
                    return t
                }
                let n = [];
                let o = [];
                let r = [];
                const s = {equal: 0, insert: 0, delete: 0};
                for (const a of t) {
                    if (a === "insert") {
                        r.push(i[s.equal + s.insert])
                    } else if (a === "delete") {
                        o.push(e[s.equal + s.delete])
                    } else {
                        n = n.concat(_d(o, r, Pd).map(t => t === "equal" ? "replace" : t));
                        n.push("equal");
                        o = [];
                        r = []
                    }
                    s[a]++
                }
                return n.concat(_d(o, r, Pd).map(t => t === "equal" ? "replace" : t))
            }

            _markDescendantTextToSync(t) {
                if (!t) {
                    return
                }
                if (t.is("text")) {
                    this.markedTexts.add(t)
                } else if (t.is("element")) {
                    for (const e of t.getChildren()) {
                        this._markDescendantTextToSync(e)
                    }
                }
            }

            _updateSelection() {
                if (this.selection.rangeCount === 0) {
                    this._removeDomSelection();
                    this._removeFakeSelection();
                    return
                }
                const t = this.domConverter.mapViewToDom(this.selection.editableElement);
                if (!this.isFocused || !t) {
                    return
                }
                if (this.selection.isFake) {
                    this._updateFakeSelection(t)
                } else {
                    this._removeFakeSelection();
                    this._updateDomSelection(t)
                }
            }

            _updateFakeSelection(t) {
                const e = t.ownerDocument;
                if (!this._fakeSelectionContainer) {
                    this._fakeSelectionContainer = Od(e)
                }
                const i = this._fakeSelectionContainer;
                this.domConverter.bindFakeSelection(i, this.selection);
                if (!this._fakeSelectionNeedsUpdate(t)) {
                    return
                }
                if (!i.parentElement || i.parentElement != t) {
                    t.appendChild(i)
                }
                i.textContent = this.selection.fakeSelectionLabel || " ";
                const n = e.getSelection();
                const o = e.createRange();
                n.removeAllRanges();
                o.selectNodeContents(i);
                n.addRange(o)
            }

            _updateDomSelection(t) {
                const e = t.ownerDocument.defaultView.getSelection();
                if (!this._domSelectionNeedsUpdate(e)) {
                    return
                }
                const i = this.domConverter.viewPositionToDom(this.selection.anchor);
                const n = this.domConverter.viewPositionToDom(this.selection.focus);
                t.focus();
                e.collapse(i.parent, i.offset);
                e.extend(n.parent, n.offset);
                if (Al.isGecko) {
                    Ed(n, e)
                }
            }

            _domSelectionNeedsUpdate(t) {
                if (!this.domConverter.isDomSelectionCorrect(t)) {
                    return true
                }
                const e = t && this.domConverter.domSelectionToView(t);
                if (e && this.selection.isEqual(e)) {
                    return false
                }
                if (!this.selection.isCollapsed && this.selection.isSimilar(e)) {
                    return false
                }
                return true
            }

            _fakeSelectionNeedsUpdate(t) {
                const e = this._fakeSelectionContainer;
                const i = t.ownerDocument.getSelection();
                if (!e || e.parentElement !== t) {
                    return true
                }
                if (i.anchorNode !== e && !e.contains(i.anchorNode)) {
                    return true
                }
                return e.textContent !== this.selection.fakeSelectionLabel
            }

            _removeDomSelection() {
                for (const t of this.domDocuments) {
                    const e = t.getSelection();
                    if (e.rangeCount) {
                        const e = t.activeElement;
                        const i = this.domConverter.mapDomToView(e);
                        if (e && i) {
                            t.getSelection().removeAllRanges()
                        }
                    }
                }
            }

            _removeFakeSelection() {
                const t = this._fakeSelectionContainer;
                if (t) {
                    t.remove()
                }
            }

            _updateFocus() {
                if (this.isFocused) {
                    const t = this.selection.editableElement;
                    if (t) {
                        this.domConverter.focus(t)
                    }
                }
            }
        }

        vs(Cd, Jc);

        function Ad(t) {
            if (t.getAttribute("contenteditable") == "false") {
                return false
            }
            const e = t.findAncestor(t => t.hasAttribute("contenteditable"));
            return !e || e.getAttribute("contenteditable") == "true"
        }

        function Td(t, e, i) {
            const n = e instanceof Array ? e : e.childNodes;
            const o = n[i];
            if (od(o)) {
                o.data = cd + o.data;
                return o
            } else {
                const o = t.createTextNode(cd);
                if (Array.isArray(e)) {
                    n.splice(i, 0, o)
                } else {
                    vd(e, i, o)
                }
                return o
            }
        }

        function Pd(t, e) {
            return xd(t) && xd(e) && !od(t) && !od(e) && t.tagName.toLowerCase() === e.tagName.toLowerCase()
        }

        function Sd(t, e, i) {
            if (e === i) {
                return true
            } else if (od(e) && od(i)) {
                return e.data === i.data
            } else if (t.isBlockFiller(e) && t.isBlockFiller(i)) {
                return true
            }
            return false
        }

        function Ed(t, e) {
            const i = t.parent;
            if (i.nodeType != Node.ELEMENT_NODE || t.offset != i.childNodes.length - 1) {
                return
            }
            const n = i.childNodes[t.offset];
            if (n && n.tagName == "BR") {
                e.addRange(e.getRangeAt(0))
            }
        }

        function Rd(t, e) {
            const i = Array.from(t);
            if (i.length == 0 || !e) {
                return i
            }
            const n = i[i.length - 1];
            if (n == e) {
                i.pop()
            }
            return i
        }

        function Od(t) {
            const e = t.createElement("div");
            Object.assign(e.style, {position: "fixed", top: 0, left: "-9999px", width: "42px"});
            e.textContent = " ";
            return e
        }

        var Id = {window: window, document: document};

        function Vd(t) {
            let e = 0;
            while (t.previousSibling) {
                t = t.previousSibling;
                e++
            }
            return e
        }

        function Nd(t) {
            const e = [];
            while (t && t.nodeType != Node.DOCUMENT_NODE) {
                e.unshift(t);
                t = t.parentNode
            }
            return e
        }

        function Md(t, e) {
            const i = Nd(t);
            const n = Nd(e);
            let o = 0;
            while (i[o] == n[o] && i[o]) {
                o++
            }
            return o === 0 ? null : i[o - 1]
        }

        const Bd = sd(document);

        class zd {
            constructor(t, e = {}) {
                this.document = t;
                this.blockFillerMode = e.blockFillerMode || "br";
                this.preElements = ["pre"];
                this.blockElements = ["p", "div", "h1", "h2", "h3", "h4", "h5", "h6", "li", "dd", "dt", "figcaption"];
                this._blockFiller = this.blockFillerMode == "br" ? sd : rd;
                this._domToViewMapping = new WeakMap;
                this._viewToDomMapping = new WeakMap;
                this._fakeSelectionMapping = new WeakMap
            }

            bindFakeSelection(t, e) {
                this._fakeSelectionMapping.set(t, new gl(e))
            }

            fakeSelectionToView(t) {
                return this._fakeSelectionMapping.get(t)
            }

            bindElements(t, e) {
                this._domToViewMapping.set(t, e);
                this._viewToDomMapping.set(e, t)
            }

            unbindDomElement(t) {
                const e = this._domToViewMapping.get(t);
                if (e) {
                    this._domToViewMapping.delete(t);
                    this._viewToDomMapping.delete(e);
                    for (const e of Array.from(t.childNodes)) {
                        this.unbindDomElement(e)
                    }
                }
            }

            bindDocumentFragments(t, e) {
                this._domToViewMapping.set(t, e);
                this._viewToDomMapping.set(e, t)
            }

            viewToDom(t, e, i = {}) {
                if (t.is("text")) {
                    const i = this._processDataFromViewText(t);
                    return e.createTextNode(i)
                } else {
                    if (this.mapViewToDom(t)) {
                        return this.mapViewToDom(t)
                    }
                    let n;
                    if (t.is("documentFragment")) {
                        n = e.createDocumentFragment();
                        if (i.bind) {
                            this.bindDocumentFragments(n, t)
                        }
                    } else if (t.is("uiElement")) {
                        n = t.render(e);
                        if (i.bind) {
                            this.bindElements(n, t)
                        }
                        return n
                    } else {
                        if (t.hasAttribute("xmlns")) {
                            n = e.createElementNS(t.getAttribute("xmlns"), t.name)
                        } else {
                            n = e.createElement(t.name)
                        }
                        if (i.bind) {
                            this.bindElements(n, t)
                        }
                        for (const e of t.getAttributeKeys()) {
                            n.setAttribute(e, t.getAttribute(e))
                        }
                    }
                    if (i.withChildren || i.withChildren === undefined) {
                        for (const o of this.viewChildrenToDom(t, e, i)) {
                            n.appendChild(o)
                        }
                    }
                    return n
                }
            }

            * viewChildrenToDom(t, e, i = {}) {
                const n = t.getFillerOffset && t.getFillerOffset();
                let o = 0;
                for (const r of t.getChildren()) {
                    if (n === o) {
                        yield this._blockFiller(e)
                    }
                    yield this.viewToDom(r, e, i);
                    o++
                }
                if (n === o) {
                    yield this._blockFiller(e)
                }
            }

            viewRangeToDom(t) {
                const e = this.viewPositionToDom(t.start);
                const i = this.viewPositionToDom(t.end);
                const n = document.createRange();
                n.setStart(e.parent, e.offset);
                n.setEnd(i.parent, i.offset);
                return n
            }

            viewPositionToDom(t) {
                const e = t.parent;
                if (e.is("text")) {
                    const i = this.findCorrespondingDomText(e);
                    if (!i) {
                        return null
                    }
                    let n = t.offset;
                    if (ld(i)) {
                        n += ad
                    }
                    return {parent: i, offset: n}
                } else {
                    let i, n, o;
                    if (t.offset === 0) {
                        i = this.mapViewToDom(e);
                        if (!i) {
                            return null
                        }
                        o = i.childNodes[0]
                    } else {
                        const e = t.nodeBefore;
                        n = e.is("text") ? this.findCorrespondingDomText(e) : this.mapViewToDom(t.nodeBefore);
                        if (!n) {
                            return null
                        }
                        i = n.parentNode;
                        o = n.nextSibling
                    }
                    if (od(o) && ld(o)) {
                        return {parent: o, offset: ad}
                    }
                    const r = n ? Vd(n) + 1 : 0;
                    return {parent: i, offset: r}
                }
            }

            domToView(t, e = {}) {
                if (this.isBlockFiller(t, this.blockFillerMode)) {
                    return null
                }
                const i = this.getParentUIElement(t, this._domToViewMapping);
                if (i) {
                    return i
                }
                if (od(t)) {
                    if (dd(t)) {
                        return null
                    } else {
                        const e = this._processDataFromDomText(t);
                        return e === "" ? null : new Ls(this.document, e)
                    }
                } else if (this.isComment(t)) {
                    return null
                } else {
                    if (this.mapDomToView(t)) {
                        return this.mapDomToView(t)
                    }
                    let i;
                    if (this.isDocumentFragment(t)) {
                        i = new ql(this.document);
                        if (e.bind) {
                            this.bindDocumentFragments(t, i)
                        }
                    } else {
                        const n = e.keepOriginalCase ? t.tagName : t.tagName.toLowerCase();
                        i = new zc(this.document, n);
                        if (e.bind) {
                            this.bindElements(t, i)
                        }
                        const o = t.attributes;
                        for (let t = o.length - 1; t >= 0; t--) {
                            i._setAttribute(o[t].name, o[t].value)
                        }
                    }
                    if (e.withChildren || e.withChildren === undefined) {
                        for (const n of this.domChildrenToView(t, e)) {
                            i._appendChild(n)
                        }
                    }
                    return i
                }
            }

            * domChildrenToView(t, e = {}) {
                for (let i = 0; i < t.childNodes.length; i++) {
                    const n = t.childNodes[i];
                    const o = this.domToView(n, e);
                    if (o !== null) {
                        yield o
                    }
                }
            }

            domSelectionToView(t) {
                if (t.rangeCount === 1) {
                    let e = t.getRangeAt(0).startContainer;
                    if (od(e)) {
                        e = e.parentNode
                    }
                    const i = this.fakeSelectionToView(e);
                    if (i) {
                        return i
                    }
                }
                const e = this.isDomSelectionBackward(t);
                const i = [];
                for (let e = 0; e < t.rangeCount; e++) {
                    const n = t.getRangeAt(e);
                    const o = this.domRangeToView(n);
                    if (o) {
                        i.push(o)
                    }
                }
                return new gl(i, {backward: e})
            }

            domRangeToView(t) {
                const e = this.domPositionToView(t.startContainer, t.startOffset);
                const i = this.domPositionToView(t.endContainer, t.endOffset);
                if (e && i) {
                    return new ul(e, i)
                }
                return null
            }

            domPositionToView(t, e) {
                if (this.isBlockFiller(t, this.blockFillerMode)) {
                    return this.domPositionToView(t.parentNode, Vd(t))
                }
                const i = this.mapDomToView(t);
                if (i && i.is("uiElement")) {
                    return dl._createBefore(i)
                }
                if (od(t)) {
                    if (dd(t)) {
                        return this.domPositionToView(t.parentNode, Vd(t))
                    }
                    const i = this.findCorrespondingViewText(t);
                    let n = e;
                    if (!i) {
                        return null
                    }
                    if (ld(t)) {
                        n -= ad;
                        n = n < 0 ? 0 : n
                    }
                    return new dl(i, n)
                } else {
                    if (e === 0) {
                        const e = this.mapDomToView(t);
                        if (e) {
                            return new dl(e, 0)
                        }
                    } else {
                        const i = t.childNodes[e - 1];
                        const n = od(i) ? this.findCorrespondingViewText(i) : this.mapDomToView(i);
                        if (n && n.parent) {
                            return new dl(n.parent, n.index + 1)
                        }
                    }
                    return null
                }
            }

            mapDomToView(t) {
                return this.getParentUIElement(t) || this._domToViewMapping.get(t)
            }

            findCorrespondingViewText(t) {
                if (dd(t)) {
                    return null
                }
                const e = this.getParentUIElement(t);
                if (e) {
                    return e
                }
                const i = t.previousSibling;
                if (i) {
                    if (!this.isElement(i)) {
                        return null
                    }
                    const t = this.mapDomToView(i);
                    if (t) {
                        const e = t.nextSibling;
                        if (e instanceof Ls) {
                            return t.nextSibling
                        } else {
                            return null
                        }
                    }
                } else {
                    const e = this.mapDomToView(t.parentNode);
                    if (e) {
                        const t = e.getChild(0);
                        if (t instanceof Ls) {
                            return t
                        } else {
                            return null
                        }
                    }
                }
                return null
            }

            mapViewToDom(t) {
                return this._viewToDomMapping.get(t)
            }

            findCorrespondingDomText(t) {
                const e = t.previousSibling;
                if (e && this.mapViewToDom(e)) {
                    return this.mapViewToDom(e).nextSibling
                }
                if (!e && t.parent && this.mapViewToDom(t.parent)) {
                    return this.mapViewToDom(t.parent).childNodes[0]
                }
                return null
            }

            focus(t) {
                const e = this.mapViewToDom(t);
                if (e && e.ownerDocument.activeElement !== e) {
                    const {scrollX: t, scrollY: i} = Id.window;
                    const n = [];
                    Fd(e, t => {
                        const {scrollLeft: e, scrollTop: i} = t;
                        n.push([e, i])
                    });
                    e.focus();
                    Fd(e, t => {
                        const [e, i] = n.shift();
                        t.scrollLeft = e;
                        t.scrollTop = i
                    });
                    Id.window.scrollTo(t, i)
                }
            }

            isElement(t) {
                return t && t.nodeType == Node.ELEMENT_NODE
            }

            isDocumentFragment(t) {
                return t && t.nodeType == Node.DOCUMENT_FRAGMENT_NODE
            }

            isComment(t) {
                return t && t.nodeType == Node.COMMENT_NODE
            }

            isBlockFiller(t) {
                if (this.blockFillerMode == "br") {
                    return t.isEqualNode(Bd)
                }
                if (t.tagName === "BR" && jd(t, this.blockElements) && t.parentNode.childNodes.length === 1) {
                    return true
                }
                return Dd(t, this.blockElements)
            }

            isDomSelectionBackward(t) {
                if (t.isCollapsed) {
                    return false
                }
                const e = document.createRange();
                e.setStart(t.anchorNode, t.anchorOffset);
                e.setEnd(t.focusNode, t.focusOffset);
                const i = e.collapsed;
                e.detach();
                return i
            }

            getParentUIElement(t) {
                const e = Nd(t);
                e.pop();
                while (e.length) {
                    const t = e.pop();
                    const i = this._domToViewMapping.get(t);
                    if (i && i.is("uiElement")) {
                        return i
                    }
                }
                return null
            }

            isDomSelectionCorrect(t) {
                return this._isDomSelectionPositionCorrect(t.anchorNode, t.anchorOffset) && this._isDomSelectionPositionCorrect(t.focusNode, t.focusOffset)
            }

            _isDomSelectionPositionCorrect(t, e) {
                if (od(t) && ld(t) && e < ad) {
                    return false
                }
                if (this.isElement(t) && ld(t.childNodes[e])) {
                    return false
                }
                const i = this.mapDomToView(t);
                if (i && i.is("uiElement")) {
                    return false
                }
                return true
            }

            _processDataFromViewText(t) {
                let e = t.data;
                if (t.getAncestors().some(t => this.preElements.includes(t.name))) {
                    return e
                }
                if (e.charAt(0) == " ") {
                    const i = this._getTouchingViewTextNode(t, false);
                    const n = i && this._nodeEndsWithSpace(i);
                    if (n || !i) {
                        e = " " + e.substr(1)
                    }
                }
                if (e.charAt(e.length - 1) == " ") {
                    const i = this._getTouchingViewTextNode(t, true);
                    if (e.charAt(e.length - 2) == " " || !i || i.data.charAt(0) == " ") {
                        e = e.substr(0, e.length - 1) + " "
                    }
                }
                return e.replace(/ {2}/g, "  ")
            }

            _nodeEndsWithSpace(t) {
                if (t.getAncestors().some(t => this.preElements.includes(t.name))) {
                    return false
                }
                const e = this._processDataFromViewText(t);
                return e.charAt(e.length - 1) == " "
            }

            _processDataFromDomText(t) {
                let e = t.data;
                if (Ld(t, this.preElements)) {
                    return ud(t)
                }
                e = e.replace(/[ \n\t\r]{1,}/g, " ");
                const i = this._getTouchingInlineDomNode(t, false);
                const n = this._getTouchingInlineDomNode(t, true);
                const o = this._checkShouldLeftTrimDomText(i);
                const r = this._checkShouldRightTrimDomText(t, n);
                if (o) {
                    e = e.replace(/^ /, "")
                }
                if (r) {
                    e = e.replace(/ $/, "")
                }
                e = ud(new Text(e));
                e = e.replace(/ \u00A0/g, "  ");
                if (/( |\u00A0)\u00A0$/.test(e) || !n || n.data && n.data.charAt(0) == " ") {
                    e = e.replace(/\u00A0$/, " ")
                }
                if (o) {
                    e = e.replace(/^\u00A0/, " ")
                }
                return e
            }

            _checkShouldLeftTrimDomText(t) {
                if (!t) {
                    return true
                }
                if (Kr(t)) {
                    return true
                }
                return /[^\S\u00A0]/.test(t.data.charAt(t.data.length - 1))
            }

            _checkShouldRightTrimDomText(t, e) {
                if (e) {
                    return false
                }
                return !ld(t)
            }

            _getTouchingViewTextNode(t, e) {
                const i = new ll({
                    startPosition: e ? dl._createAfter(t) : dl._createBefore(t),
                    direction: e ? "forward" : "backward"
                });
                for (const t of i) {
                    if (t.item.is("containerElement")) {
                        return null
                    } else if (t.item.is("br")) {
                        return null
                    } else if (t.item.is("textProxy")) {
                        return t.item
                    }
                }
                return null
            }

            _getTouchingInlineDomNode(t, e) {
                if (!t.parentNode) {
                    return null
                }
                const i = e ? "nextNode" : "previousNode";
                const n = t.ownerDocument;
                const o = Nd(t)[0];
                const r = n.createTreeWalker(o, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, {
                    acceptNode(t) {
                        if (od(t)) {
                            return NodeFilter.FILTER_ACCEPT
                        }
                        if (t.tagName == "BR") {
                            return NodeFilter.FILTER_ACCEPT
                        }
                        return NodeFilter.FILTER_SKIP
                    }
                });
                r.currentNode = t;
                const s = r[i]();
                if (s !== null) {
                    const e = Md(t, s);
                    if (e && !Ld(t, this.blockElements, e) && !Ld(s, this.blockElements, e)) {
                        return s
                    }
                }
                return null
            }
        }

        function Ld(t, e, i) {
            let n = Nd(t);
            if (i) {
                n = n.slice(n.indexOf(i) + 1)
            }
            return n.some(t => t.tagName && e.includes(t.tagName.toLowerCase()))
        }

        function Fd(t, e) {
            while (t && t != Id.document) {
                e(t);
                t = t.parentNode
            }
        }

        function Dd(t, e) {
            const i = od(t) && t.data == " ";
            return i && jd(t, e) && t.parentNode.childNodes.length === 1
        }

        function jd(t, e) {
            const i = t.parentNode;
            return i && i.tagName && e.includes(i.tagName.toLowerCase())
        }

        function Hd(t) {
            const e = Object.prototype.toString.apply(t);
            if (e == "[object Window]") {
                return true
            }
            if (e == "[object global]") {
                return true
            }
            return false
        }

        const Wd = qc({}, ds, {
            listenTo(t, ...e) {
                if (xd(t) || Hd(t)) {
                    const i = this._getProxyEmitter(t) || new Ud(t);
                    i.attach(...e);
                    t = i
                }
                ds.listenTo.call(this, t, ...e)
            }, stopListening(t, e, i) {
                if (xd(t) || Hd(t)) {
                    const e = this._getProxyEmitter(t);
                    if (!e) {
                        return
                    }
                    t = e
                }
                ds.stopListening.call(this, t, e, i);
                if (t instanceof Ud) {
                    t.detach(e)
                }
            }, _getProxyEmitter(t) {
                return us(this, $d(t))
            }
        });
        var qd = Wd;

        class Ud {
            constructor(t) {
                hs(this, $d(t));
                this._domNode = t
            }
        }

        qc(Ud.prototype, ds, {
            attach(t, e, i = {}) {
                if (this._domListeners && this._domListeners[t]) {
                    return
                }
                const n = this._createDomListener(t, !!i.useCapture);
                this._domNode.addEventListener(t, n, !!i.useCapture);
                if (!this._domListeners) {
                    this._domListeners = {}
                }
                this._domListeners[t] = n
            }, detach(t) {
                let e;
                if (this._domListeners[t] && (!(e = this._events[t]) || !e.callbacks.length)) {
                    this._domListeners[t].removeListener()
                }
            }, _createDomListener(t, e) {
                const i = e => {
                    this.fire(t, e)
                };
                i.removeListener = () => {
                    this._domNode.removeEventListener(t, i, e);
                    delete this._domListeners[t]
                };
                return i
            }
        });

        function $d(t) {
            return t["data-ck-expando"] || (t["data-ck-expando"] = is())
        }

        class Gd {
            constructor(t) {
                this.view = t;
                this.document = t.document;
                this.isEnabled = false
            }

            enable() {
                this.isEnabled = true
            }

            disable() {
                this.isEnabled = false
            }

            destroy() {
                this.disable();
                this.stopListening()
            }
        }

        vs(Gd, qd);
        var Kd = "__lodash_hash_undefined__";

        function Jd(t) {
            this.__data__.set(t, Kd);
            return this
        }

        var Yd = Jd;

        function Qd(t) {
            return this.__data__.has(t)
        }

        var Xd = Qd;

        function Zd(t) {
            var e = -1, i = t == null ? 0 : t.length;
            this.__data__ = new _e;
            while (++e < i) {
                this.add(t[e])
            }
        }

        Zd.prototype.add = Zd.prototype.push = Yd;
        Zd.prototype.has = Xd;
        var tu = Zd;

        function eu(t, e) {
            var i = -1, n = t == null ? 0 : t.length;
            while (++i < n) {
                if (e(t[i], i, t)) {
                    return true
                }
            }
            return false
        }

        var iu = eu;

        function nu(t, e) {
            return t.has(e)
        }

        var ou = nu;
        var ru = 1, su = 2;

        function au(t, e, i, n, o, r) {
            var s = i & ru, a = t.length, c = e.length;
            if (a != c && !(s && c > a)) {
                return false
            }
            var l = r.get(t);
            if (l && r.get(e)) {
                return l == e
            }
            var d = -1, u = true, h = i & su ? new tu : undefined;
            r.set(t, e);
            r.set(e, t);
            while (++d < a) {
                var f = t[d], g = e[d];
                if (n) {
                    var m = s ? n(g, f, d, e, t, r) : n(f, g, d, t, e, r)
                }
                if (m !== undefined) {
                    if (m) {
                        continue
                    }
                    u = false;
                    break
                }
                if (h) {
                    if (!iu(e, (function (t, e) {
                        if (!ou(h, e) && (f === t || o(f, t, i, n, r))) {
                            return h.push(e)
                        }
                    }))) {
                        u = false;
                        break
                    }
                } else if (!(f === g || o(f, g, i, n, r))) {
                    u = false;
                    break
                }
            }
            r["delete"](t);
            r["delete"](e);
            return u
        }

        var cu = au;

        function lu(t) {
            var e = -1, i = Array(t.size);
            t.forEach((function (t, n) {
                i[++e] = [n, t]
            }));
            return i
        }

        var du = lu;

        function uu(t) {
            var e = -1, i = Array(t.size);
            t.forEach((function (t) {
                i[++e] = t
            }));
            return i
        }

        var hu = uu;
        var fu = 1, gu = 2;
        var mu = "[object Boolean]", pu = "[object Date]", bu = "[object Error]", wu = "[object Map]",
            ku = "[object Number]", _u = "[object RegExp]", vu = "[object Set]", yu = "[object String]",
            xu = "[object Symbol]";
        var Cu = "[object ArrayBuffer]", Au = "[object DataView]";
        var Tu = r ? r.prototype : undefined, Pu = Tu ? Tu.valueOf : undefined;

        function Su(t, e, i, n, o, r, s) {
            switch (i) {
                case Au:
                    if (t.byteLength != e.byteLength || t.byteOffset != e.byteOffset) {
                        return false
                    }
                    t = t.buffer;
                    e = e.buffer;
                case Cu:
                    if (t.byteLength != e.byteLength || !r(new fo(t), new fo(e))) {
                        return false
                    }
                    return true;
                case mu:
                case pu:
                case ku:
                    return L(+t, +e);
                case bu:
                    return t.name == e.name && t.message == e.message;
                case _u:
                case yu:
                    return t == e + "";
                case wu:
                    var a = du;
                case vu:
                    var c = n & fu;
                    a || (a = hu);
                    if (t.size != e.size && !c) {
                        return false
                    }
                    var l = s.get(t);
                    if (l) {
                        return l == e
                    }
                    n |= gu;
                    s.set(t, e);
                    var d = cu(a(t), a(e), n, o, r, s);
                    s["delete"](t);
                    return d;
                case xu:
                    if (Pu) {
                        return Pu.call(t) == Pu.call(e)
                    }
            }
            return false
        }

        var Eu = Su;
        var Ru = 1;
        var Ou = Object.prototype;
        var Iu = Ou.hasOwnProperty;

        function Vu(t, e, i, n, o, r) {
            var s = i & Ru, a = zn(t), c = a.length, l = zn(e), d = l.length;
            if (c != d && !s) {
                return false
            }
            var u = c;
            while (u--) {
                var h = a[u];
                if (!(s ? h in e : Iu.call(e, h))) {
                    return false
                }
            }
            var f = r.get(t);
            if (f && r.get(e)) {
                return f == e
            }
            var g = true;
            r.set(t, e);
            r.set(e, t);
            var m = s;
            while (++u < c) {
                h = a[u];
                var p = t[h], b = e[h];
                if (n) {
                    var w = s ? n(b, p, h, e, t, r) : n(p, b, h, t, e, r)
                }
                if (!(w === undefined ? p === b || o(p, b, i, n, r) : w)) {
                    g = false;
                    break
                }
                m || (m = h == "constructor")
            }
            if (g && !m) {
                var k = t.constructor, _ = e.constructor;
                if (k != _ && ("constructor" in t && "constructor" in e) && !(typeof k == "function" && k instanceof k && typeof _ == "function" && _ instanceof _)) {
                    g = false
                }
            }
            r["delete"](t);
            r["delete"](e);
            return g
        }

        var Nu = Vu;
        var Mu = 1;
        var Bu = "[object Arguments]", zu = "[object Array]", Lu = "[object Object]";
        var Fu = Object.prototype;
        var Du = Fu.hasOwnProperty;

        function ju(t, e, i, n, o, r) {
            var s = Je(t), a = Je(e), c = s ? zu : so(t), l = a ? zu : so(e);
            c = c == Bu ? Lu : c;
            l = l == Bu ? Lu : l;
            var d = c == Lu, u = l == Lu, h = c == l;
            if (h && Object(Ye["a"])(t)) {
                if (!Object(Ye["a"])(e)) {
                    return false
                }
                s = true;
                d = false
            }
            if (h && !d) {
                r || (r = new Ae);
                return s || Bi(t) ? cu(t, e, i, n, o, r) : Eu(t, e, c, i, n, o, r)
            }
            if (!(i & Mu)) {
                var f = d && Du.call(t, "__wrapped__"), g = u && Du.call(e, "__wrapped__");
                if (f || g) {
                    var m = f ? t.value() : t, p = g ? e.value() : e;
                    r || (r = new Ae);
                    return o(m, p, i, n, r)
                }
            }
            if (!h) {
                return false
            }
            r || (r = new Ae);
            return Nu(t, e, i, n, o, r)
        }

        var Hu = ju;

        function Wu(t, e, i, n, o) {
            if (t === e) {
                return true
            }
            if (t == null || e == null || !T(t) && !T(e)) {
                return t !== t && e !== e
            }
            return Hu(t, e, i, n, Wu, o)
        }

        var qu = Wu;

        function Uu(t, e, i) {
            i = typeof i == "function" ? i : undefined;
            var n = i ? i(t, e) : undefined;
            return n === undefined ? qu(t, e, undefined, i) : !!n
        }

        var $u = Uu;

        class Gu extends Gd {
            constructor(t) {
                super(t);
                this._config = {childList: true, characterData: true, characterDataOldValue: true, subtree: true};
                this.domConverter = t.domConverter;
                this.renderer = t._renderer;
                this._domElements = [];
                this._mutationObserver = new window.MutationObserver(this._onMutations.bind(this))
            }

            flush() {
                this._onMutations(this._mutationObserver.takeRecords())
            }

            observe(t) {
                this._domElements.push(t);
                if (this.isEnabled) {
                    this._mutationObserver.observe(t, this._config)
                }
            }

            enable() {
                super.enable();
                for (const t of this._domElements) {
                    this._mutationObserver.observe(t, this._config)
                }
            }

            disable() {
                super.disable();
                this._mutationObserver.disconnect()
            }

            destroy() {
                super.destroy();
                this._mutationObserver.disconnect()
            }

            _onMutations(t) {
                if (t.length === 0) {
                    return
                }
                const e = this.domConverter;
                const i = new Map;
                const n = new Set;
                for (const i of t) {
                    if (i.type === "childList") {
                        const t = e.mapDomToView(i.target);
                        if (t && t.is("uiElement")) {
                            continue
                        }
                        if (t && !this._isBogusBrMutation(i)) {
                            n.add(t)
                        }
                    }
                }
                for (const o of t) {
                    const t = e.mapDomToView(o.target);
                    if (t && t.is("uiElement")) {
                        continue
                    }
                    if (o.type === "characterData") {
                        const t = e.findCorrespondingViewText(o.target);
                        if (t && !n.has(t.parent)) {
                            i.set(t, {type: "text", oldText: t.data, newText: ud(o.target), node: t})
                        } else if (!t && ld(o.target)) {
                            n.add(e.mapDomToView(o.target.parentNode))
                        }
                    }
                }
                const o = [];
                for (const t of i.values()) {
                    this.renderer.markToSync("text", t.node);
                    o.push(t)
                }
                for (const t of n) {
                    const i = e.mapViewToDom(t);
                    const n = Array.from(t.getChildren());
                    const r = Array.from(e.domChildrenToView(i, {withChildren: false}));
                    if (!$u(n, r, a)) {
                        this.renderer.markToSync("children", t);
                        o.push({type: "children", oldChildren: n, newChildren: r, node: t})
                    }
                }
                const r = t[0].target.ownerDocument.getSelection();
                let s = null;
                if (r && r.anchorNode) {
                    const t = e.domPositionToView(r.anchorNode, r.anchorOffset);
                    const i = e.domPositionToView(r.focusNode, r.focusOffset);
                    if (t && i) {
                        s = new gl(t);
                        s.setFocus(i)
                    }
                }
                if (o.length) {
                    this.document.fire("mutations", o, s);
                    this.view.forceRender()
                }

                function a(t, e) {
                    if (Array.isArray(t)) {
                        return
                    }
                    if (t === e) {
                        return true
                    } else if (t.is("text") && e.is("text")) {
                        return t.data === e.data
                    }
                    return false
                }
            }

            _isBogusBrMutation(t) {
                let e = null;
                if (t.nextSibling === null && t.removedNodes.length === 0 && t.addedNodes.length == 1) {
                    e = this.domConverter.domToView(t.addedNodes[0], {withChildren: false})
                }
                return e && e.is("element", "br")
            }
        }

        class Ku {
            constructor(t, e, i) {
                this.view = t;
                this.document = t.document;
                this.domEvent = e;
                this.domTarget = e.target;
                qc(this, i)
            }

            get target() {
                return this.view.domConverter.mapDomToView(this.domTarget)
            }

            preventDefault() {
                this.domEvent.preventDefault()
            }

            stopPropagation() {
                this.domEvent.stopPropagation()
            }
        }

        class Ju extends Gd {
            constructor(t) {
                super(t);
                this.useCapture = false
            }

            observe(t) {
                const e = typeof this.domEventType == "string" ? [this.domEventType] : this.domEventType;
                e.forEach(e => {
                    this.listenTo(t, e, (t, e) => {
                        if (this.isEnabled) {
                            this.onDomEvent(e)
                        }
                    }, {useCapture: this.useCapture})
                })
            }

            fire(t, e, i) {
                if (this.isEnabled) {
                    this.document.fire(t, new Ku(this.view, e, i))
                }
            }
        }

        class Yu extends Ju {
            constructor(t) {
                super(t);
                this.domEventType = ["keydown", "keyup"]
            }

            onDomEvent(t) {
                this.fire(t.type, t, {
                    keyCode: t.keyCode,
                    altKey: t.altKey,
                    ctrlKey: t.ctrlKey || t.metaKey,
                    shiftKey: t.shiftKey,
                    get keystroke() {
                        return Ml(this)
                    }
                })
            }
        }

        var Qu = function () {
            return n["a"].Date.now()
        };
        var Xu = Qu;
        var Zu = 0 / 0;
        var th = /^\s+|\s+$/g;
        var eh = /^[-+]0x[0-9a-f]+$/i;
        var ih = /^0b[01]+$/i;
        var nh = /^0o[0-7]+$/i;
        var oh = parseInt;

        function rh(t) {
            if (typeof t == "number") {
                return t
            }
            if (Qs(t)) {
                return Zu
            }
            if (ct(t)) {
                var e = typeof t.valueOf == "function" ? t.valueOf() : t;
                t = ct(e) ? e + "" : e
            }
            if (typeof t != "string") {
                return t === 0 ? t : +t
            }
            t = t.replace(th, "");
            var i = ih.test(t);
            return i || nh.test(t) ? oh(t.slice(2), i ? 2 : 8) : eh.test(t) ? Zu : +t
        }

        var sh = rh;
        var ah = "Expected a function";
        var ch = Math.max, lh = Math.min;

        function dh(t, e, i) {
            var n, o, r, s, a, c, l = 0, d = false, u = false, h = true;
            if (typeof t != "function") {
                throw new TypeError(ah)
            }
            e = sh(e) || 0;
            if (ct(i)) {
                d = !!i.leading;
                u = "maxWait" in i;
                r = u ? ch(sh(i.maxWait) || 0, e) : r;
                h = "trailing" in i ? !!i.trailing : h
            }

            function f(e) {
                var i = n, r = o;
                n = o = undefined;
                l = e;
                s = t.apply(r, i);
                return s
            }

            function g(t) {
                l = t;
                a = setTimeout(b, e);
                return d ? f(t) : s
            }

            function m(t) {
                var i = t - c, n = t - l, o = e - i;
                return u ? lh(o, r - n) : o
            }

            function p(t) {
                var i = t - c, n = t - l;
                return c === undefined || i >= e || i < 0 || u && n >= r
            }

            function b() {
                var t = Xu();
                if (p(t)) {
                    return w(t)
                }
                a = setTimeout(b, m(t))
            }

            function w(t) {
                a = undefined;
                if (h && n) {
                    return f(t)
                }
                n = o = undefined;
                return s
            }

            function k() {
                if (a !== undefined) {
                    clearTimeout(a)
                }
                l = 0;
                n = c = o = a = undefined
            }

            function _() {
                return a === undefined ? s : w(Xu())
            }

            function v() {
                var t = Xu(), i = p(t);
                n = arguments;
                o = this;
                c = t;
                if (i) {
                    if (a === undefined) {
                        return g(c)
                    }
                    if (u) {
                        clearTimeout(a);
                        a = setTimeout(b, e);
                        return f(c)
                    }
                }
                if (a === undefined) {
                    a = setTimeout(b, e)
                }
                return s
            }

            v.cancel = k;
            v.flush = _;
            return v
        }

        var uh = dh;

        class hh extends Gd {
            constructor(t) {
                super(t);
                this._fireSelectionChangeDoneDebounced = uh(t => this.document.fire("selectionChangeDone", t), 200)
            }

            observe() {
                const t = this.document;
                t.on("keydown", (e, i) => {
                    const n = t.selection;
                    if (n.isFake && fh(i.keyCode) && this.isEnabled) {
                        i.preventDefault();
                        this._handleSelectionMove(i.keyCode)
                    }
                }, {priority: "lowest"})
            }

            destroy() {
                super.destroy();
                this._fireSelectionChangeDoneDebounced.cancel()
            }

            _handleSelectionMove(t) {
                const e = this.document.selection;
                const i = new gl(e.getRanges(), {backward: e.isBackward, fake: false});
                if (t == Nl.arrowleft || t == Nl.arrowup) {
                    i.setTo(i.getFirstPosition())
                }
                if (t == Nl.arrowright || t == Nl.arrowdown) {
                    i.setTo(i.getLastPosition())
                }
                const n = {oldSelection: e, newSelection: i, domSelection: null};
                this.document.fire("selectionChange", n);
                this._fireSelectionChangeDoneDebounced(n)
            }
        }

        function fh(t) {
            return t == Nl.arrowright || t == Nl.arrowleft || t == Nl.arrowup || t == Nl.arrowdown
        }

        class gh extends Gd {
            constructor(t) {
                super(t);
                this.mutationObserver = t.getObserver(Gu);
                this.selection = this.document.selection;
                this.domConverter = t.domConverter;
                this._documents = new WeakSet;
                this._fireSelectionChangeDoneDebounced = uh(t => this.document.fire("selectionChangeDone", t), 200);
                this._clearInfiniteLoopInterval = setInterval(() => this._clearInfiniteLoop(), 1e3);
                this._loopbackCounter = 0
            }

            observe(t) {
                const e = t.ownerDocument;
                if (this._documents.has(e)) {
                    return
                }
                this.listenTo(e, "selectionchange", () => {
                    this._handleSelectionChange(e)
                });
                this._documents.add(e)
            }

            destroy() {
                super.destroy();
                clearInterval(this._clearInfiniteLoopInterval);
                this._fireSelectionChangeDoneDebounced.cancel()
            }

            _handleSelectionChange(t) {
                if (!this.isEnabled) {
                    return
                }
                this.mutationObserver.flush();
                const e = t.defaultView.getSelection();
                const i = this.domConverter.domSelectionToView(e);
                if (i.rangeCount == 0) {
                    return
                }
                if (this.selection.isEqual(i) && this.domConverter.isDomSelectionCorrect(e)) {
                    return
                }
                if (++this._loopbackCounter > 60) {
                    return
                }
                if (this.selection.isSimilar(i)) {
                    this.view.forceRender()
                } else {
                    const t = {oldSelection: this.selection, newSelection: i, domSelection: e};
                    this.document.fire("selectionChange", t);
                    this._fireSelectionChangeDoneDebounced(t)
                }
            }

            _clearInfiniteLoop() {
                this._loopbackCounter = 0
            }
        }

        class mh extends Ju {
            constructor(t) {
                super(t);
                this.domEventType = ["focus", "blur"];
                this.useCapture = true;
                const e = this.document;
                e.on("focus", () => {
                    e.isFocused = true;
                    this._renderTimeoutId = setTimeout(() => t.forceRender(), 50)
                });
                e.on("blur", (i, n) => {
                    const o = e.selection.editableElement;
                    if (o === null || o === n.target) {
                        e.isFocused = false;
                        t.forceRender()
                    }
                })
            }

            onDomEvent(t) {
                this.fire(t.type, t)
            }

            destroy() {
                if (this._renderTimeoutId) {
                    clearTimeout(this._renderTimeoutId)
                }
                super.destroy()
            }
        }

        class ph extends Ju {
            constructor(t) {
                super(t);
                this.domEventType = ["compositionstart", "compositionupdate", "compositionend"];
                const e = this.document;
                e.on("compositionstart", () => {
                    e.isComposing = true
                });
                e.on("compositionend", () => {
                    e.isComposing = false
                })
            }

            onDomEvent(t) {
                this.fire(t.type, t)
            }
        }

        class bh extends Ju {
            constructor(t) {
                super(t);
                this.domEventType = ["beforeinput"]
            }

            onDomEvent(t) {
                this.fire(t.type, t)
            }
        }

        function wh(t) {
            return Object.prototype.toString.apply(t) == "[object Range]"
        }

        function kh(t) {
            const e = t.ownerDocument.defaultView.getComputedStyle(t);
            return {
                top: parseInt(e.borderTopWidth, 10),
                right: parseInt(e.borderRightWidth, 10),
                bottom: parseInt(e.borderBottomWidth, 10),
                left: parseInt(e.borderLeftWidth, 10)
            }
        }

        const _h = ["top", "right", "bottom", "left", "width", "height"];

        class vh {
            constructor(t) {
                const e = wh(t);
                Object.defineProperty(this, "_source", {value: t._source || t, writable: true, enumerable: false});
                if (Kr(t) || e) {
                    if (e) {
                        yh(this, vh.getDomRangeRects(t)[0])
                    } else {
                        yh(this, t.getBoundingClientRect())
                    }
                } else if (Hd(t)) {
                    const {innerWidth: e, innerHeight: i} = t;
                    yh(this, {top: 0, right: e, bottom: i, left: 0, width: e, height: i})
                } else {
                    yh(this, t)
                }
            }

            clone() {
                return new vh(this)
            }

            moveTo(t, e) {
                this.top = e;
                this.right = t + this.width;
                this.bottom = e + this.height;
                this.left = t;
                return this
            }

            moveBy(t, e) {
                this.top += e;
                this.right += t;
                this.left += t;
                this.bottom += e;
                return this
            }

            getIntersection(t) {
                const e = {
                    top: Math.max(this.top, t.top),
                    right: Math.min(this.right, t.right),
                    bottom: Math.min(this.bottom, t.bottom),
                    left: Math.max(this.left, t.left)
                };
                e.width = e.right - e.left;
                e.height = e.bottom - e.top;
                if (e.width < 0 || e.height < 0) {
                    return null
                } else {
                    return new vh(e)
                }
            }

            getIntersectionArea(t) {
                const e = this.getIntersection(t);
                if (e) {
                    return e.getArea()
                } else {
                    return 0
                }
            }

            getArea() {
                return this.width * this.height
            }

            getVisible() {
                const t = this._source;
                let e = this.clone();
                if (!xh(t)) {
                    let i = t.parentNode || t.commonAncestorContainer;
                    while (i && !xh(i)) {
                        const t = new vh(i);
                        const n = e.getIntersection(t);
                        if (n) {
                            if (n.getArea() < e.getArea()) {
                                e = n
                            }
                        } else {
                            return null
                        }
                        i = i.parentNode
                    }
                }
                return e
            }

            isEqual(t) {
                for (const e of _h) {
                    if (this[e] !== t[e]) {
                        return false
                    }
                }
                return true
            }

            contains(t) {
                const e = this.getIntersection(t);
                return !!(e && e.isEqual(t))
            }

            excludeScrollbarsAndBorders() {
                const t = this._source;
                let e, i, n;
                if (Hd(t)) {
                    e = t.innerWidth - t.document.documentElement.clientWidth;
                    i = t.innerHeight - t.document.documentElement.clientHeight;
                    n = t.getComputedStyle(t.document.documentElement).direction
                } else {
                    const o = kh(this._source);
                    e = t.offsetWidth - t.clientWidth - o.left - o.right;
                    i = t.offsetHeight - t.clientHeight - o.top - o.bottom;
                    n = t.ownerDocument.defaultView.getComputedStyle(t).direction;
                    this.left += o.left;
                    this.top += o.top;
                    this.right -= o.right;
                    this.bottom -= o.bottom;
                    this.width = this.right - this.left;
                    this.height = this.bottom - this.top
                }
                this.width -= e;
                if (n === "ltr") {
                    this.right -= e
                } else {
                    this.left += e
                }
                this.height -= i;
                this.bottom -= i;
                return this
            }

            static getDomRangeRects(t) {
                const e = [];
                const i = Array.from(t.getClientRects());
                if (i.length) {
                    for (const t of i) {
                        e.push(new vh(t))
                    }
                } else {
                    let i = t.startContainer;
                    if (od(i)) {
                        i = i.parentNode
                    }
                    const n = new vh(i.getBoundingClientRect());
                    n.right = n.left;
                    n.width = 0;
                    e.push(n)
                }
                return e
            }
        }

        function yh(t, e) {
            for (const i of _h) {
                t[i] = e[i]
            }
        }

        function xh(t) {
            if (!Kr(t)) {
                return false
            }
            return t === t.ownerDocument.body
        }

        const Ch = {};

        function Ah({target: t, viewportOffset: e = 0}) {
            const i = Vh(t);
            let n = i;
            let o = null;
            while (n) {
                let r;
                if (n == i) {
                    r = Nh(t)
                } else {
                    r = Nh(o)
                }
                Sh(r, () => Mh(t, n));
                const s = Mh(t, n);
                Ph(n, s, e);
                if (n.parent != n) {
                    o = n.frameElement;
                    n = n.parent;
                    if (!o) {
                        return
                    }
                } else {
                    n = null
                }
            }
        }

        function Th(t) {
            const e = Nh(t);
            Sh(e, () => new vh(t))
        }

        Object.assign(Ch, {scrollViewportToShowTarget: Ah, scrollAncestorsToShowTarget: Th});

        function Ph(t, e, i) {
            const n = e.clone().moveBy(0, i);
            const o = e.clone().moveBy(0, -i);
            const r = new vh(t).excludeScrollbarsAndBorders();
            const s = [o, n];
            if (!s.every(t => r.contains(t))) {
                let {scrollX: s, scrollY: a} = t;
                if (Rh(o, r)) {
                    a -= r.top - e.top + i
                } else if (Eh(n, r)) {
                    a += e.bottom - r.bottom + i
                }
                if (Oh(e, r)) {
                    s -= r.left - e.left + i
                } else if (Ih(e, r)) {
                    s += e.right - r.right + i
                }
                t.scrollTo(s, a)
            }
        }

        function Sh(t, e) {
            const i = Vh(t);
            let n, o;
            while (t != i.document.body) {
                o = e();
                n = new vh(t).excludeScrollbarsAndBorders();
                if (!n.contains(o)) {
                    if (Rh(o, n)) {
                        t.scrollTop -= n.top - o.top
                    } else if (Eh(o, n)) {
                        t.scrollTop += o.bottom - n.bottom
                    }
                    if (Oh(o, n)) {
                        t.scrollLeft -= n.left - o.left
                    } else if (Ih(o, n)) {
                        t.scrollLeft += o.right - n.right
                    }
                }
                t = t.parentNode
            }
        }

        function Eh(t, e) {
            return t.bottom > e.bottom
        }

        function Rh(t, e) {
            return t.top < e.top
        }

        function Oh(t, e) {
            return t.left < e.left
        }

        function Ih(t, e) {
            return t.right > e.right
        }

        function Vh(t) {
            if (wh(t)) {
                return t.startContainer.ownerDocument.defaultView
            } else {
                return t.ownerDocument.defaultView
            }
        }

        function Nh(t) {
            if (wh(t)) {
                let e = t.commonAncestorContainer;
                if (od(e)) {
                    e = e.parentNode
                }
                return e
            } else {
                return t.parentNode
            }
        }

        function Mh(t, e) {
            const i = Vh(t);
            const n = new vh(t);
            if (i === e) {
                return n
            } else {
                let t = i;
                while (t != e) {
                    const e = t.frameElement;
                    const i = new vh(e).excludeScrollbarsAndBorders();
                    n.moveBy(i.left, i.top);
                    t = t.parent
                }
            }
            return n
        }

        class Bh {
            constructor(t) {
                this.document = new pl(t);
                this.domConverter = new zd(this.document);
                this.domRoots = new Map;
                this.set("isRenderingInProgress", false);
                this._renderer = new Cd(this.domConverter, this.document.selection);
                this._renderer.bind("isFocused").to(this.document);
                this._initialDomRootAttributes = new WeakMap;
                this._observers = new Map;
                this._ongoingChange = false;
                this._postFixersInProgress = false;
                this._renderingDisabled = false;
                this._hasChangedSinceTheLastRendering = false;
                this._writer = new $l(this.document);
                this.addObserver(Gu);
                this.addObserver(gh);
                this.addObserver(mh);
                this.addObserver(Yu);
                this.addObserver(hh);
                this.addObserver(ph);
                if (Al.isAndroid) {
                    this.addObserver(bh)
                }
                hd(this);
                jl(this);
                this.on("render", () => {
                    this._render();
                    this.document.fire("layoutChanged");
                    this._hasChangedSinceTheLastRendering = false
                });
                this.listenTo(this.document.selection, "change", () => {
                    this._hasChangedSinceTheLastRendering = true
                })
            }

            attachDomRoot(t, e = "main") {
                const i = this.document.getRoot(e);
                i._name = t.tagName.toLowerCase();
                const n = {};
                for (const {name: e, value: o} of Array.from(t.attributes)) {
                    n[e] = o;
                    if (e === "class") {
                        this._writer.addClass(o.split(" "), i)
                    } else {
                        this._writer.setAttribute(e, o, i)
                    }
                }
                this._initialDomRootAttributes.set(t, n);
                const o = () => {
                    this._writer.setAttribute("contenteditable", !i.isReadOnly, i);
                    if (i.isReadOnly) {
                        this._writer.addClass("ck-read-only", i)
                    } else {
                        this._writer.removeClass("ck-read-only", i)
                    }
                };
                o();
                this.domRoots.set(e, t);
                this.domConverter.bindElements(t, i);
                this._renderer.markToSync("children", i);
                this._renderer.markToSync("attributes", i);
                this._renderer.domDocuments.add(t.ownerDocument);
                i.on("change:children", (t, e) => this._renderer.markToSync("children", e));
                i.on("change:attributes", (t, e) => this._renderer.markToSync("attributes", e));
                i.on("change:text", (t, e) => this._renderer.markToSync("text", e));
                i.on("change:isReadOnly", () => this.change(o));
                i.on("change", () => {
                    this._hasChangedSinceTheLastRendering = true
                });
                for (const i of this._observers.values()) {
                    i.observe(t, e)
                }
            }

            detachDomRoot(t) {
                const e = this.domRoots.get(t);
                Array.from(e.attributes).forEach(({name: t}) => e.removeAttribute(t));
                const i = this._initialDomRootAttributes.get(e);
                for (const t in i) {
                    e.setAttribute(t, i[t])
                }
                this.domRoots.delete(t);
                this.domConverter.unbindDomElement(e)
            }

            getDomRoot(t = "main") {
                return this.domRoots.get(t)
            }

            addObserver(t) {
                let e = this._observers.get(t);
                if (e) {
                    return e
                }
                e = new t(this);
                this._observers.set(t, e);
                for (const [t, i] of this.domRoots) {
                    e.observe(i, t)
                }
                e.enable();
                return e
            }

            getObserver(t) {
                return this._observers.get(t)
            }

            disableObservers() {
                for (const t of this._observers.values()) {
                    t.disable()
                }
            }

            enableObservers() {
                for (const t of this._observers.values()) {
                    t.enable()
                }
            }

            scrollToTheSelection() {
                const t = this.document.selection.getFirstRange();
                if (t) {
                    Ah({target: this.domConverter.viewRangeToDom(t), viewportOffset: 20})
                }
            }

            focus() {
                if (!this.document.isFocused) {
                    const t = this.document.selection.editableElement;
                    if (t) {
                        this.domConverter.focus(t);
                        this.forceRender()
                    } else {
                    }
                }
            }

            change(t) {
                if (this.isRenderingInProgress || this._postFixersInProgress) {
                    throw new ss["b"]("cannot-change-view-tree: " + "Attempting to make changes to the view when it is in an incorrect state: rendering or post-fixers are in progress. " + "This may cause some unexpected behavior and inconsistency between the DOM and the view.", this)
                }
                try {
                    if (this._ongoingChange) {
                        return t(this._writer)
                    }
                    this._ongoingChange = true;
                    const e = t(this._writer);
                    this._ongoingChange = false;
                    if (!this._renderingDisabled && this._hasChangedSinceTheLastRendering) {
                        this._postFixersInProgress = true;
                        this.document._callPostFixers(this._writer);
                        this._postFixersInProgress = false;
                        this.fire("render")
                    }
                    return e
                } catch (t) {
                    ss["b"].rethrowUnexpectedError(t, this)
                }
            }

            forceRender() {
                this._hasChangedSinceTheLastRendering = true;
                this.change(() => {
                })
            }

            destroy() {
                for (const t of this._observers.values()) {
                    t.destroy()
                }
                this.document.destroy();
                this.stopListening()
            }

            createPositionAt(t, e) {
                return dl._createAt(t, e)
            }

            createPositionAfter(t) {
                return dl._createAfter(t)
            }

            createPositionBefore(t) {
                return dl._createBefore(t)
            }

            createRange(t, e) {
                return new ul(t, e)
            }

            createRangeOn(t) {
                return ul._createOn(t)
            }

            createRangeIn(t) {
                return ul._createIn(t)
            }

            createSelection(t, e, i) {
                return new gl(t, e, i)
            }

            _disableRendering(t) {
                this._renderingDisabled = t;
                if (t == false) {
                    this.change(() => {
                    })
                }
            }

            _render() {
                this.isRenderingInProgress = true;
                this.disableObservers();
                this._renderer.render();
                this.enableObservers();
                this.isRenderingInProgress = false
            }
        }

        vs(Bh, Jc);

        class zh {
            constructor(t) {
                this.parent = null;
                this._attrs = Hs(t)
            }

            get index() {
                let t;
                if (!this.parent) {
                    return null
                }
                if ((t = this.parent.getChildIndex(this)) === null) {
                    throw new ss["b"]("model-node-not-found-in-parent: The node's parent does not contain this node.", this)
                }
                return t
            }

            get startOffset() {
                let t;
                if (!this.parent) {
                    return null
                }
                if ((t = this.parent.getChildStartOffset(this)) === null) {
                    throw new ss["b"]("model-node-not-found-in-parent: The node's parent does not contain this node.", this)
                }
                return t
            }

            get offsetSize() {
                return 1
            }

            get endOffset() {
                if (!this.parent) {
                    return null
                }
                return this.startOffset + this.offsetSize
            }

            get nextSibling() {
                const t = this.index;
                return t !== null && this.parent.getChild(t + 1) || null
            }

            get previousSibling() {
                const t = this.index;
                return t !== null && this.parent.getChild(t - 1) || null
            }

            get root() {
                let t = this;
                while (t.parent) {
                    t = t.parent
                }
                return t
            }

            isAttached() {
                return this.root.is("rootElement")
            }

            getPath() {
                const t = [];
                let e = this;
                while (e.parent) {
                    t.unshift(e.startOffset);
                    e = e.parent
                }
                return t
            }

            getAncestors(t = {includeSelf: false, parentFirst: false}) {
                const e = [];
                let i = t.includeSelf ? this : this.parent;
                while (i) {
                    e[t.parentFirst ? "push" : "unshift"](i);
                    i = i.parent
                }
                return e
            }

            getCommonAncestor(t, e = {}) {
                const i = this.getAncestors(e);
                const n = t.getAncestors(e);
                let o = 0;
                while (i[o] == n[o] && i[o]) {
                    o++
                }
                return o === 0 ? null : i[o - 1]
            }

            isBefore(t) {
                if (this == t) {
                    return false
                }
                if (this.root !== t.root) {
                    return false
                }
                const e = this.getPath();
                const i = t.getPath();
                const n = Vs(e, i);
                switch (n) {
                    case"prefix":
                        return true;
                    case"extension":
                        return false;
                    default:
                        return e[n] < i[n]
                }
            }

            isAfter(t) {
                if (this == t) {
                    return false
                }
                if (this.root !== t.root) {
                    return false
                }
                return !this.isBefore(t)
            }

            hasAttribute(t) {
                return this._attrs.has(t)
            }

            getAttribute(t) {
                return this._attrs.get(t)
            }

            getAttributes() {
                return this._attrs.entries()
            }

            getAttributeKeys() {
                return this._attrs.keys()
            }

            toJSON() {
                const t = {};
                if (this._attrs.size) {
                    t.attributes = Array.from(this._attrs).reduce((t, e) => {
                        t[e[0]] = e[1];
                        return t
                    }, {})
                }
                return t
            }

            is(t) {
                return t == "node" || t == "model:node"
            }

            _clone() {
                return new zh(this._attrs)
            }

            _remove() {
                this.parent._removeChildren(this.index)
            }

            _setAttribute(t, e) {
                this._attrs.set(t, e)
            }

            _setAttributesTo(t) {
                this._attrs = Hs(t)
            }

            _removeAttribute(t) {
                return this._attrs.delete(t)
            }

            _clearAttributes() {
                this._attrs.clear()
            }
        }

        class Lh extends zh {
            constructor(t, e) {
                super(e);
                this._data = t || ""
            }

            get offsetSize() {
                return this.data.length
            }

            get data() {
                return this._data
            }

            is(t) {
                return t == "text" || t == "model:text" || super.is(t)
            }

            toJSON() {
                const t = super.toJSON();
                t.data = this.data;
                return t
            }

            _clone() {
                return new Lh(this.data, this.getAttributes())
            }

            static fromJSON(t) {
                return new Lh(t.data, t.attributes)
            }
        }

        class Fh {
            constructor(t, e, i) {
                this.textNode = t;
                if (e < 0 || e > t.offsetSize) {
                    throw new ss["b"]("model-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.", this)
                }
                if (i < 0 || e + i > t.offsetSize) {
                    throw new ss["b"]("model-textproxy-wrong-length: Given length value is incorrect.", this)
                }
                this.data = t.data.substring(e, e + i);
                this.offsetInText = e
            }

            get startOffset() {
                return this.textNode.startOffset !== null ? this.textNode.startOffset + this.offsetInText : null
            }

            get offsetSize() {
                return this.data.length
            }

            get endOffset() {
                return this.startOffset !== null ? this.startOffset + this.offsetSize : null
            }

            get isPartial() {
                return this.offsetSize !== this.textNode.offsetSize
            }

            get parent() {
                return this.textNode.parent
            }

            get root() {
                return this.textNode.root
            }

            is(t) {
                return t == "textProxy" || t == "model:textProxy"
            }

            getPath() {
                const t = this.textNode.getPath();
                if (t.length > 0) {
                    t[t.length - 1] += this.offsetInText
                }
                return t
            }

            getAncestors(t = {includeSelf: false, parentFirst: false}) {
                const e = [];
                let i = t.includeSelf ? this : this.parent;
                while (i) {
                    e[t.parentFirst ? "push" : "unshift"](i);
                    i = i.parent
                }
                return e
            }

            hasAttribute(t) {
                return this.textNode.hasAttribute(t)
            }

            getAttribute(t) {
                return this.textNode.getAttribute(t)
            }

            getAttributes() {
                return this.textNode.getAttributes()
            }

            getAttributeKeys() {
                return this.textNode.getAttributeKeys()
            }
        }

        class Dh {
            constructor(t) {
                this._nodes = [];
                if (t) {
                    this._insertNodes(0, t)
                }
            }

            [Symbol.iterator]() {
                return this._nodes[Symbol.iterator]()
            }

            get length() {
                return this._nodes.length
            }

            get maxOffset() {
                return this._nodes.reduce((t, e) => t + e.offsetSize, 0)
            }

            getNode(t) {
                return this._nodes[t] || null
            }

            getNodeIndex(t) {
                const e = this._nodes.indexOf(t);
                return e == -1 ? null : e
            }

            getNodeStartOffset(t) {
                const e = this.getNodeIndex(t);
                return e === null ? null : this._nodes.slice(0, e).reduce((t, e) => t + e.offsetSize, 0)
            }

            indexToOffset(t) {
                if (t == this._nodes.length) {
                    return this.maxOffset
                }
                const e = this._nodes[t];
                if (!e) {
                    throw new ss["b"]("model-nodelist-index-out-of-bounds: Given index cannot be found in the node list.", this)
                }
                return this.getNodeStartOffset(e)
            }

            offsetToIndex(t) {
                let e = 0;
                for (const i of this._nodes) {
                    if (t >= e && t < e + i.offsetSize) {
                        return this.getNodeIndex(i)
                    }
                    e += i.offsetSize
                }
                if (e != t) {
                    throw new ss["b"]("model-nodelist-offset-out-of-bounds: Given offset cannot be found in the node list.", this, {
                        offset: t,
                        nodeList: this
                    })
                }
                return this.length
            }

            _insertNodes(t, e) {
                for (const t of e) {
                    if (!(t instanceof zh)) {
                        throw new ss["b"]("model-nodelist-insertNodes-not-node: Trying to insert an object which is not a Node instance.", this)
                    }
                }
                this._nodes.splice(t, 0, ...e)
            }

            _removeNodes(t, e = 1) {
                return this._nodes.splice(t, e)
            }

            toJSON() {
                return this._nodes.map(t => t.toJSON())
            }
        }

        class jh extends zh {
            constructor(t, e, i) {
                super(e);
                this.name = t;
                this._children = new Dh;
                if (i) {
                    this._insertChild(0, i)
                }
            }

            get childCount() {
                return this._children.length
            }

            get maxOffset() {
                return this._children.maxOffset
            }

            get isEmpty() {
                return this.childCount === 0
            }

            is(t, e = null) {
                const i = t.replace(/^model:/, "");
                if (!e) {
                    return i == "element" || i == this.name || super.is(t)
                } else {
                    return i == "element" && e == this.name
                }
            }

            getChild(t) {
                return this._children.getNode(t)
            }

            getChildren() {
                return this._children[Symbol.iterator]()
            }

            getChildIndex(t) {
                return this._children.getNodeIndex(t)
            }

            getChildStartOffset(t) {
                return this._children.getNodeStartOffset(t)
            }

            offsetToIndex(t) {
                return this._children.offsetToIndex(t)
            }

            getNodeByPath(t) {
                let e = this;
                for (const i of t) {
                    e = e.getChild(e.offsetToIndex(i))
                }
                return e
            }

            toJSON() {
                const t = super.toJSON();
                t.name = this.name;
                if (this._children.length > 0) {
                    t.children = [];
                    for (const e of this._children) {
                        t.children.push(e.toJSON())
                    }
                }
                return t
            }

            _clone(t = false) {
                const e = t ? Array.from(this._children).map(t => t._clone(true)) : null;
                return new jh(this.name, this.getAttributes(), e)
            }

            _appendChild(t) {
                this._insertChild(this.childCount, t)
            }

            _insertChild(t, e) {
                const i = Hh(e);
                for (const t of i) {
                    if (t.parent !== null) {
                        t._remove()
                    }
                    t.parent = this
                }
                this._children._insertNodes(t, i)
            }

            _removeChildren(t, e = 1) {
                const i = this._children._removeNodes(t, e);
                for (const t of i) {
                    t.parent = null
                }
                return i
            }

            static fromJSON(t) {
                let e = null;
                if (t.children) {
                    e = [];
                    for (const i of t.children) {
                        if (i.name) {
                            e.push(jh.fromJSON(i))
                        } else {
                            e.push(Lh.fromJSON(i))
                        }
                    }
                }
                return new jh(t.name, t.attributes, e)
            }
        }

        function Hh(t) {
            if (typeof t == "string") {
                return [new Lh(t)]
            }
            if (!js(t)) {
                t = [t]
            }
            return Array.from(t).map(t => {
                if (typeof t == "string") {
                    return new Lh(t)
                }
                if (t instanceof Fh) {
                    return new Lh(t.data, t.getAttributes())
                }
                return t
            })
        }

        class Wh {
            constructor(t = {}) {
                if (!t.boundaries && !t.startPosition) {
                    throw new ss["b"]("model-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.", null)
                }
                const e = t.direction || "forward";
                if (e != "forward" && e != "backward") {
                    throw new ss["b"]("model-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.", t, {direction: e})
                }
                this.direction = e;
                this.boundaries = t.boundaries || null;
                if (t.startPosition) {
                    this.position = t.startPosition.clone()
                } else {
                    this.position = Uh._createAt(this.boundaries[this.direction == "backward" ? "end" : "start"])
                }
                this.position.stickiness = "toNone";
                this.singleCharacters = !!t.singleCharacters;
                this.shallow = !!t.shallow;
                this.ignoreElementEnd = !!t.ignoreElementEnd;
                this._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;
                this._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;
                this._visitedParent = this.position.parent
            }

            [Symbol.iterator]() {
                return this
            }

            skip(t) {
                let e, i, n, o;
                do {
                    n = this.position;
                    o = this._visitedParent;
                    ({done: e, value: i} = this.next())
                } while (!e && t(i));
                if (!e) {
                    this.position = n;
                    this._visitedParent = o
                }
            }

            next() {
                if (this.direction == "forward") {
                    return this._next()
                } else {
                    return this._previous()
                }
            }

            _next() {
                const t = this.position;
                const e = this.position.clone();
                const i = this._visitedParent;
                if (i.parent === null && e.offset === i.maxOffset) {
                    return {done: true}
                }
                if (i === this._boundaryEndParent && e.offset == this.boundaries.end.offset) {
                    return {done: true}
                }
                const n = e.textNode ? e.textNode : e.nodeAfter;
                if (n instanceof jh) {
                    if (!this.shallow) {
                        e.path.push(0);
                        this._visitedParent = n
                    } else {
                        e.offset++
                    }
                    this.position = e;
                    return qh("elementStart", n, t, e, 1)
                } else if (n instanceof Lh) {
                    let o;
                    if (this.singleCharacters) {
                        o = 1
                    } else {
                        let t = n.endOffset;
                        if (this._boundaryEndParent == i && this.boundaries.end.offset < t) {
                            t = this.boundaries.end.offset
                        }
                        o = t - e.offset
                    }
                    const r = e.offset - n.startOffset;
                    const s = new Fh(n, r, o);
                    e.offset += o;
                    this.position = e;
                    return qh("text", s, t, e, o)
                } else {
                    e.path.pop();
                    e.offset++;
                    this.position = e;
                    this._visitedParent = i.parent;
                    if (this.ignoreElementEnd) {
                        return this._next()
                    } else {
                        return qh("elementEnd", i, t, e)
                    }
                }
            }

            _previous() {
                const t = this.position;
                const e = this.position.clone();
                const i = this._visitedParent;
                if (i.parent === null && e.offset === 0) {
                    return {done: true}
                }
                if (i == this._boundaryStartParent && e.offset == this.boundaries.start.offset) {
                    return {done: true}
                }
                const n = e.textNode ? e.textNode : e.nodeBefore;
                if (n instanceof jh) {
                    e.offset--;
                    if (!this.shallow) {
                        e.path.push(n.maxOffset);
                        this.position = e;
                        this._visitedParent = n;
                        if (this.ignoreElementEnd) {
                            return this._previous()
                        } else {
                            return qh("elementEnd", n, t, e)
                        }
                    } else {
                        this.position = e;
                        return qh("elementStart", n, t, e, 1)
                    }
                } else if (n instanceof Lh) {
                    let o;
                    if (this.singleCharacters) {
                        o = 1
                    } else {
                        let t = n.startOffset;
                        if (this._boundaryStartParent == i && this.boundaries.start.offset > t) {
                            t = this.boundaries.start.offset
                        }
                        o = e.offset - t
                    }
                    const r = e.offset - n.startOffset;
                    const s = new Fh(n, r - o, o);
                    e.offset -= o;
                    this.position = e;
                    return qh("text", s, t, e, o)
                } else {
                    e.path.pop();
                    this.position = e;
                    this._visitedParent = i.parent;
                    return qh("elementStart", i, t, e, 1)
                }
            }
        }

        function qh(t, e, i, n, o) {
            return {done: false, value: {type: t, item: e, previousPosition: i, nextPosition: n, length: o}}
        }

        class Uh {
            constructor(t, e, i = "toNone") {
                if (!t.is("element") && !t.is("documentFragment")) {
                    throw new ss["b"]("model-position-root-invalid: Position root invalid.", t)
                }
                if (!(e instanceof Array) || e.length === 0) {
                    throw new ss["b"]("model-position-path-incorrect-format: Position path must be an array with at least one item.", t, {path: e})
                }
                e = t.getPath().concat(e);
                t = t.root;
                this.root = t;
                this.path = e;
                this.stickiness = i
            }

            get offset() {
                return Ca(this.path)
            }

            set offset(t) {
                this.path[this.path.length - 1] = t
            }

            get parent() {
                let t = this.root;
                for (let e = 0; e < this.path.length - 1; e++) {
                    t = t.getChild(t.offsetToIndex(this.path[e]));
                    if (!t) {
                        throw new ss["b"]("model-position-path-incorrect: The position's path is incorrect.", this, {position: this})
                    }
                }
                if (t.is("text")) {
                    throw new ss["b"]("model-position-path-incorrect: The position's path is incorrect.", this, {position: this})
                }
                return t
            }

            get index() {
                return this.parent.offsetToIndex(this.offset)
            }

            get textNode() {
                const t = this.parent.getChild(this.index);
                return t instanceof Lh && t.startOffset < this.offset ? t : null
            }

            get nodeAfter() {
                return this.textNode === null ? this.parent.getChild(this.index) : null
            }

            get nodeBefore() {
                return this.textNode === null ? this.parent.getChild(this.index - 1) : null
            }

            get isAtStart() {
                return this.offset === 0
            }

            get isAtEnd() {
                return this.offset == this.parent.maxOffset
            }

            compareWith(t) {
                if (this.root != t.root) {
                    return "different"
                }
                const e = Vs(this.path, t.path);
                switch (e) {
                    case"same":
                        return "same";
                    case"prefix":
                        return "before";
                    case"extension":
                        return "after";
                    default:
                        return this.path[e] < t.path[e] ? "before" : "after"
                }
            }

            getLastMatchingPosition(t, e = {}) {
                e.startPosition = this;
                const i = new Wh(e);
                i.skip(t);
                return i.position
            }

            getParentPath() {
                return this.path.slice(0, -1)
            }

            getAncestors() {
                if (this.parent.is("documentFragment")) {
                    return [this.parent]
                } else {
                    return this.parent.getAncestors({includeSelf: true})
                }
            }

            getCommonPath(t) {
                if (this.root != t.root) {
                    return []
                }
                const e = Vs(this.path, t.path);
                const i = typeof e == "string" ? Math.min(this.path.length, t.path.length) : e;
                return this.path.slice(0, i)
            }

            getCommonAncestor(t) {
                const e = this.getAncestors();
                const i = t.getAncestors();
                let n = 0;
                while (e[n] == i[n] && e[n]) {
                    n++
                }
                return n === 0 ? null : e[n - 1]
            }

            getShiftedBy(t) {
                const e = this.clone();
                const i = e.offset + t;
                e.offset = i < 0 ? 0 : i;
                return e
            }

            isAfter(t) {
                return this.compareWith(t) == "after"
            }

            isBefore(t) {
                return this.compareWith(t) == "before"
            }

            isEqual(t) {
                return this.compareWith(t) == "same"
            }

            isTouching(t) {
                let e = null;
                let i = null;
                const n = this.compareWith(t);
                switch (n) {
                    case"same":
                        return true;
                    case"before":
                        e = Uh._createAt(this);
                        i = Uh._createAt(t);
                        break;
                    case"after":
                        e = Uh._createAt(t);
                        i = Uh._createAt(this);
                        break;
                    default:
                        return false
                }
                let o = e.parent;
                while (e.path.length + i.path.length) {
                    if (e.isEqual(i)) {
                        return true
                    }
                    if (e.path.length > i.path.length) {
                        if (e.offset !== o.maxOffset) {
                            return false
                        }
                        e.path = e.path.slice(0, -1);
                        o = o.parent;
                        e.offset++
                    } else {
                        if (i.offset !== 0) {
                            return false
                        }
                        i.path = i.path.slice(0, -1)
                    }
                }
            }

            is(t) {
                return t == "position" || t == "model:position"
            }

            hasSameParentAs(t) {
                if (this.root !== t.root) {
                    return false
                }
                const e = this.getParentPath();
                const i = t.getParentPath();
                return Vs(e, i) == "same"
            }

            getTransformedByOperation(t) {
                let e;
                switch (t.type) {
                    case"insert":
                        e = this._getTransformedByInsertOperation(t);
                        break;
                    case"move":
                    case"remove":
                    case"reinsert":
                        e = this._getTransformedByMoveOperation(t);
                        break;
                    case"split":
                        e = this._getTransformedBySplitOperation(t);
                        break;
                    case"merge":
                        e = this._getTransformedByMergeOperation(t);
                        break;
                    default:
                        e = Uh._createAt(this);
                        break
                }
                return e
            }

            _getTransformedByInsertOperation(t) {
                return this._getTransformedByInsertion(t.position, t.howMany)
            }

            _getTransformedByMoveOperation(t) {
                return this._getTransformedByMove(t.sourcePosition, t.targetPosition, t.howMany)
            }

            _getTransformedBySplitOperation(t) {
                const e = t.movedRange;
                const i = e.containsPosition(this) || e.start.isEqual(this) && this.stickiness == "toNext";
                if (i) {
                    return this._getCombined(t.splitPosition, t.moveTargetPosition)
                } else {
                    if (t.graveyardPosition) {
                        return this._getTransformedByMove(t.graveyardPosition, t.insertionPosition, 1)
                    } else {
                        return this._getTransformedByInsertion(t.insertionPosition, 1)
                    }
                }
            }

            _getTransformedByMergeOperation(t) {
                const e = t.movedRange;
                const i = e.containsPosition(this) || e.start.isEqual(this);
                let n;
                if (i) {
                    n = this._getCombined(t.sourcePosition, t.targetPosition);
                    if (t.sourcePosition.isBefore(t.targetPosition)) {
                        n = n._getTransformedByDeletion(t.deletionPosition, 1)
                    }
                } else if (this.isEqual(t.deletionPosition)) {
                    n = Uh._createAt(t.deletionPosition)
                } else {
                    n = this._getTransformedByMove(t.deletionPosition, t.graveyardPosition, 1)
                }
                return n
            }

            _getTransformedByDeletion(t, e) {
                const i = Uh._createAt(this);
                if (this.root != t.root) {
                    return i
                }
                if (Vs(t.getParentPath(), this.getParentPath()) == "same") {
                    if (t.offset < this.offset) {
                        if (t.offset + e > this.offset) {
                            return null
                        } else {
                            i.offset -= e
                        }
                    }
                } else if (Vs(t.getParentPath(), this.getParentPath()) == "prefix") {
                    const n = t.path.length - 1;
                    if (t.offset <= this.path[n]) {
                        if (t.offset + e > this.path[n]) {
                            return null
                        } else {
                            i.path[n] -= e
                        }
                    }
                }
                return i
            }

            _getTransformedByInsertion(t, e) {
                const i = Uh._createAt(this);
                if (this.root != t.root) {
                    return i
                }
                if (Vs(t.getParentPath(), this.getParentPath()) == "same") {
                    if (t.offset < this.offset || t.offset == this.offset && this.stickiness != "toPrevious") {
                        i.offset += e
                    }
                } else if (Vs(t.getParentPath(), this.getParentPath()) == "prefix") {
                    const n = t.path.length - 1;
                    if (t.offset <= this.path[n]) {
                        i.path[n] += e
                    }
                }
                return i
            }

            _getTransformedByMove(t, e, i) {
                e = e._getTransformedByDeletion(t, i);
                if (t.isEqual(e)) {
                    return Uh._createAt(this)
                }
                const n = this._getTransformedByDeletion(t, i);
                const o = n === null || t.isEqual(this) && this.stickiness == "toNext" || t.getShiftedBy(i).isEqual(this) && this.stickiness == "toPrevious";
                if (o) {
                    return this._getCombined(t, e)
                } else {
                    return n._getTransformedByInsertion(e, i)
                }
            }

            _getCombined(t, e) {
                const i = t.path.length - 1;
                const n = Uh._createAt(e);
                n.stickiness = this.stickiness;
                n.offset = n.offset + this.path[i] - t.offset;
                n.path = n.path.concat(this.path.slice(i + 1));
                return n
            }

            toJSON() {
                return {root: this.root.toJSON(), path: Array.from(this.path), stickiness: this.stickiness}
            }

            clone() {
                return new this.constructor(this.root, this.path, this.stickiness)
            }

            static _createAt(t, e, i = "toNone") {
                if (t instanceof Uh) {
                    return new Uh(t.root, t.path, t.stickiness)
                } else {
                    const n = t;
                    if (e == "end") {
                        e = n.maxOffset
                    } else if (e == "before") {
                        return this._createBefore(n, i)
                    } else if (e == "after") {
                        return this._createAfter(n, i)
                    } else if (e !== 0 && !e) {
                        throw new ss["b"]("model-createPositionAt-offset-required: " + "Model#createPositionAt() requires the offset when the first parameter is a model item.", [this, t])
                    }
                    if (!n.is("element") && !n.is("documentFragment")) {
                        throw new ss["b"]("model-position-parent-incorrect: Position parent have to be a element or document fragment.", [this, t])
                    }
                    const o = n.getPath();
                    o.push(e);
                    return new this(n.root, o, i)
                }
            }

            static _createAfter(t, e) {
                if (!t.parent) {
                    throw new ss["b"]("model-position-after-root: You cannot make a position after root.", [this, t], {root: t})
                }
                return this._createAt(t.parent, t.endOffset, e)
            }

            static _createBefore(t, e) {
                if (!t.parent) {
                    throw new ss["b"]("model-position-before-root: You cannot make a position before root.", t, {root: t})
                }
                return this._createAt(t.parent, t.startOffset, e)
            }

            static fromJSON(t, e) {
                if (t.root === "$graveyard") {
                    const i = new Uh(e.graveyard, t.path);
                    i.stickiness = t.stickiness;
                    return i
                }
                if (!e.getRoot(t.root)) {
                    throw new ss["b"]("model-position-fromjson-no-root: Cannot create position for document. Root with specified name does not exist.", e, {rootName: t.root})
                }
                return new Uh(e.getRoot(t.root), t.path, t.stickiness)
            }
        }

        class $h {
            constructor(t, e = null) {
                this.start = Uh._createAt(t);
                this.end = e ? Uh._createAt(e) : Uh._createAt(t);
                this.start.stickiness = this.isCollapsed ? "toNone" : "toNext";
                this.end.stickiness = this.isCollapsed ? "toNone" : "toPrevious"
            }

            * [Symbol.iterator]() {
                yield* new Wh({boundaries: this, ignoreElementEnd: true})
            }

            get isCollapsed() {
                return this.start.isEqual(this.end)
            }

            get isFlat() {
                const t = this.start.getParentPath();
                const e = this.end.getParentPath();
                return Vs(t, e) == "same"
            }

            get root() {
                return this.start.root
            }

            containsPosition(t) {
                return t.isAfter(this.start) && t.isBefore(this.end)
            }

            containsRange(t, e = false) {
                if (t.isCollapsed) {
                    e = false
                }
                const i = this.containsPosition(t.start) || e && this.start.isEqual(t.start);
                const n = this.containsPosition(t.end) || e && this.end.isEqual(t.end);
                return i && n
            }

            containsItem(t) {
                const e = Uh._createBefore(t);
                return this.containsPosition(e) || this.start.isEqual(e)
            }

            is(t) {
                return t == "range" || t == "model:range"
            }

            isEqual(t) {
                return this.start.isEqual(t.start) && this.end.isEqual(t.end)
            }

            isIntersecting(t) {
                return this.start.isBefore(t.end) && this.end.isAfter(t.start)
            }

            getDifference(t) {
                const e = [];
                if (this.isIntersecting(t)) {
                    if (this.containsPosition(t.start)) {
                        e.push(new $h(this.start, t.start))
                    }
                    if (this.containsPosition(t.end)) {
                        e.push(new $h(t.end, this.end))
                    }
                } else {
                    e.push(new $h(this.start, this.end))
                }
                return e
            }

            getIntersection(t) {
                if (this.isIntersecting(t)) {
                    let e = this.start;
                    let i = this.end;
                    if (this.containsPosition(t.start)) {
                        e = t.start
                    }
                    if (this.containsPosition(t.end)) {
                        i = t.end
                    }
                    return new $h(e, i)
                }
                return null
            }

            getMinimalFlatRanges() {
                const t = [];
                const e = this.start.getCommonPath(this.end).length;
                const i = Uh._createAt(this.start);
                let n = i.parent;
                while (i.path.length > e + 1) {
                    const e = n.maxOffset - i.offset;
                    if (e !== 0) {
                        t.push(new $h(i, i.getShiftedBy(e)))
                    }
                    i.path = i.path.slice(0, -1);
                    i.offset++;
                    n = n.parent
                }
                while (i.path.length <= this.end.path.length) {
                    const e = this.end.path[i.path.length - 1];
                    const n = e - i.offset;
                    if (n !== 0) {
                        t.push(new $h(i, i.getShiftedBy(n)))
                    }
                    i.offset = e;
                    i.path.push(0)
                }
                return t
            }

            getWalker(t = {}) {
                t.boundaries = this;
                return new Wh(t)
            }

            * getItems(t = {}) {
                t.boundaries = this;
                t.ignoreElementEnd = true;
                const e = new Wh(t);
                for (const t of e) {
                    yield t.item
                }
            }

            * getPositions(t = {}) {
                t.boundaries = this;
                const e = new Wh(t);
                yield e.position;
                for (const t of e) {
                    yield t.nextPosition
                }
            }

            getTransformedByOperation(t) {
                switch (t.type) {
                    case"insert":
                        return this._getTransformedByInsertOperation(t);
                    case"move":
                    case"remove":
                    case"reinsert":
                        return this._getTransformedByMoveOperation(t);
                    case"split":
                        return [this._getTransformedBySplitOperation(t)];
                    case"merge":
                        return [this._getTransformedByMergeOperation(t)]
                }
                return [new $h(this.start, this.end)]
            }

            getTransformedByOperations(t) {
                const e = [new $h(this.start, this.end)];
                for (const i of t) {
                    for (let t = 0; t < e.length; t++) {
                        const n = e[t].getTransformedByOperation(i);
                        e.splice(t, 1, ...n);
                        t += n.length - 1
                    }
                }
                for (let t = 0; t < e.length; t++) {
                    const i = e[t];
                    for (let n = t + 1; n < e.length; n++) {
                        const t = e[n];
                        if (i.containsRange(t) || t.containsRange(i) || i.isEqual(t)) {
                            e.splice(n, 1)
                        }
                    }
                }
                return e
            }

            getCommonAncestor() {
                return this.start.getCommonAncestor(this.end)
            }

            getContainedElement() {
                if (this.isCollapsed) {
                    return null
                }
                const t = this.start.nodeAfter;
                const e = this.end.nodeBefore;
                if (t && t.is("element") && t === e) {
                    return t
                }
                return null
            }

            toJSON() {
                return {start: this.start.toJSON(), end: this.end.toJSON()}
            }

            clone() {
                return new this.constructor(this.start, this.end)
            }

            _getTransformedByInsertOperation(t, e = false) {
                return this._getTransformedByInsertion(t.position, t.howMany, e)
            }

            _getTransformedByMoveOperation(t, e = false) {
                const i = t.sourcePosition;
                const n = t.howMany;
                const o = t.targetPosition;
                return this._getTransformedByMove(i, o, n, e)
            }

            _getTransformedBySplitOperation(t) {
                const e = this.start._getTransformedBySplitOperation(t);
                let i = this.end._getTransformedBySplitOperation(t);
                if (this.end.isEqual(t.insertionPosition)) {
                    i = this.end.getShiftedBy(1)
                }
                if (e.root != i.root) {
                    i = this.end.getShiftedBy(-1)
                }
                return new $h(e, i)
            }

            _getTransformedByMergeOperation(t) {
                if (this.start.isEqual(t.targetPosition) && this.end.isEqual(t.deletionPosition)) {
                    return new $h(this.start)
                }
                let e = this.start._getTransformedByMergeOperation(t);
                let i = this.end._getTransformedByMergeOperation(t);
                if (e.root != i.root) {
                    i = this.end.getShiftedBy(-1)
                }
                if (e.isAfter(i)) {
                    if (t.sourcePosition.isBefore(t.targetPosition)) {
                        e = Uh._createAt(i);
                        e.offset = 0
                    } else {
                        if (!t.deletionPosition.isEqual(e)) {
                            i = t.deletionPosition
                        }
                        e = t.targetPosition
                    }
                    return new $h(e, i)
                }
                return new $h(e, i)
            }

            _getTransformedByInsertion(t, e, i = false) {
                if (i && this.containsPosition(t)) {
                    return [new $h(this.start, t), new $h(t.getShiftedBy(e), this.end._getTransformedByInsertion(t, e))]
                } else {
                    const i = new $h(this.start, this.end);
                    i.start = i.start._getTransformedByInsertion(t, e);
                    i.end = i.end._getTransformedByInsertion(t, e);
                    return [i]
                }
            }

            _getTransformedByMove(t, e, i, n = false) {
                if (this.isCollapsed) {
                    const n = this.start._getTransformedByMove(t, e, i);
                    return [new $h(n)]
                }
                const o = $h._createFromPositionAndShift(t, i);
                const r = e._getTransformedByDeletion(t, i);
                if (this.containsPosition(e) && !n) {
                    if (o.containsPosition(this.start) || o.containsPosition(this.end)) {
                        const n = this.start._getTransformedByMove(t, e, i);
                        const o = this.end._getTransformedByMove(t, e, i);
                        return [new $h(n, o)]
                    }
                }
                let s;
                const a = this.getDifference(o);
                let c = null;
                const l = this.getIntersection(o);
                if (a.length == 1) {
                    c = new $h(a[0].start._getTransformedByDeletion(t, i), a[0].end._getTransformedByDeletion(t, i))
                } else if (a.length == 2) {
                    c = new $h(this.start, this.end._getTransformedByDeletion(t, i))
                }
                if (c) {
                    s = c._getTransformedByInsertion(r, i, l !== null || n)
                } else {
                    s = []
                }
                if (l) {
                    const t = new $h(l.start._getCombined(o.start, r), l.end._getCombined(o.start, r));
                    if (s.length == 2) {
                        s.splice(1, 0, t)
                    } else {
                        s.push(t)
                    }
                }
                return s
            }

            _getTransformedByDeletion(t, e) {
                let i = this.start._getTransformedByDeletion(t, e);
                let n = this.end._getTransformedByDeletion(t, e);
                if (i == null && n == null) {
                    return null
                }
                if (i == null) {
                    i = t
                }
                if (n == null) {
                    n = t
                }
                return new $h(i, n)
            }

            static _createFromPositionAndShift(t, e) {
                const i = t;
                const n = t.getShiftedBy(e);
                return e > 0 ? new this(i, n) : new this(n, i)
            }

            static _createIn(t) {
                return new this(Uh._createAt(t, 0), Uh._createAt(t, t.maxOffset))
            }

            static _createOn(t) {
                return this._createFromPositionAndShift(Uh._createBefore(t), t.offsetSize)
            }

            static _createFromRanges(t) {
                if (t.length === 0) {
                    throw new ss["b"]("range-create-from-ranges-empty-array: At least one range has to be passed.", null)
                } else if (t.length == 1) {
                    return t[0].clone()
                }
                const e = t[0];
                t.sort((t, e) => t.start.isAfter(e.start) ? 1 : -1);
                const i = t.indexOf(e);
                const n = new this(e.start, e.end);
                if (i > 0) {
                    for (let e = i - 1; true; e++) {
                        if (t[e].end.isEqual(n.start)) {
                            n.start = Uh._createAt(t[e].start)
                        } else {
                            break
                        }
                    }
                }
                for (let e = i + 1; e < t.length; e++) {
                    if (t[e].start.isEqual(n.end)) {
                        n.end = Uh._createAt(t[e].end)
                    } else {
                        break
                    }
                }
                return n
            }

            static fromJSON(t, e) {
                return new this(Uh.fromJSON(t.start, e), Uh.fromJSON(t.end, e))
            }
        }

        class Gh {
            constructor() {
                this._modelToViewMapping = new WeakMap;
                this._viewToModelMapping = new WeakMap;
                this._viewToModelLengthCallbacks = new Map;
                this._markerNameToElements = new Map;
                this._elementToMarkerNames = new Map;
                this._unboundMarkerNames = new Set;
                this.on("modelToViewPosition", (t, e) => {
                    if (e.viewPosition) {
                        return
                    }
                    const i = this._modelToViewMapping.get(e.modelPosition.parent);
                    e.viewPosition = this._findPositionIn(i, e.modelPosition.offset)
                }, {priority: "low"});
                this.on("viewToModelPosition", (t, e) => {
                    if (e.modelPosition) {
                        return
                    }
                    const i = this.findMappedViewAncestor(e.viewPosition);
                    const n = this._viewToModelMapping.get(i);
                    const o = this._toModelOffset(e.viewPosition.parent, e.viewPosition.offset, i);
                    e.modelPosition = Uh._createAt(n, o)
                }, {priority: "low"})
            }

            bindElements(t, e) {
                this._modelToViewMapping.set(t, e);
                this._viewToModelMapping.set(e, t)
            }

            unbindViewElement(t) {
                const e = this.toModelElement(t);
                this._viewToModelMapping.delete(t);
                if (this._elementToMarkerNames.has(t)) {
                    for (const e of this._elementToMarkerNames.get(t)) {
                        this._unboundMarkerNames.add(e)
                    }
                }
                if (this._modelToViewMapping.get(e) == t) {
                    this._modelToViewMapping.delete(e)
                }
            }

            unbindModelElement(t) {
                const e = this.toViewElement(t);
                this._modelToViewMapping.delete(t);
                if (this._viewToModelMapping.get(e) == t) {
                    this._viewToModelMapping.delete(e)
                }
            }

            bindElementToMarker(t, e) {
                const i = this._markerNameToElements.get(e) || new Set;
                i.add(t);
                const n = this._elementToMarkerNames.get(t) || new Set;
                n.add(e);
                this._markerNameToElements.set(e, i);
                this._elementToMarkerNames.set(t, n)
            }

            unbindElementFromMarkerName(t, e) {
                const i = this._markerNameToElements.get(e);
                if (i) {
                    i.delete(t);
                    if (i.size == 0) {
                        this._markerNameToElements.delete(e)
                    }
                }
                const n = this._elementToMarkerNames.get(t);
                if (n) {
                    n.delete(e);
                    if (n.size == 0) {
                        this._elementToMarkerNames.delete(t)
                    }
                }
            }

            flushUnboundMarkerNames() {
                const t = Array.from(this._unboundMarkerNames);
                this._unboundMarkerNames.clear();
                return t
            }

            clearBindings() {
                this._modelToViewMapping = new WeakMap;
                this._viewToModelMapping = new WeakMap;
                this._markerNameToElements = new Map;
                this._elementToMarkerNames = new Map;
                this._unboundMarkerNames = new Set
            }

            toModelElement(t) {
                return this._viewToModelMapping.get(t)
            }

            toViewElement(t) {
                return this._modelToViewMapping.get(t)
            }

            toModelRange(t) {
                return new $h(this.toModelPosition(t.start), this.toModelPosition(t.end))
            }

            toViewRange(t) {
                return new ul(this.toViewPosition(t.start), this.toViewPosition(t.end))
            }

            toModelPosition(t) {
                const e = {viewPosition: t, mapper: this};
                this.fire("viewToModelPosition", e);
                return e.modelPosition
            }

            toViewPosition(t, e = {isPhantom: false}) {
                const i = {modelPosition: t, mapper: this, isPhantom: e.isPhantom};
                this.fire("modelToViewPosition", i);
                return i.viewPosition
            }

            markerNameToElements(t) {
                const e = this._markerNameToElements.get(t);
                if (!e) {
                    return null
                }
                const i = new Set;
                for (const t of e) {
                    if (t.is("attributeElement")) {
                        for (const e of t.getElementsWithSameId()) {
                            i.add(e)
                        }
                    } else {
                        i.add(t)
                    }
                }
                return i
            }

            registerViewToModelLength(t, e) {
                this._viewToModelLengthCallbacks.set(t, e)
            }

            findMappedViewAncestor(t) {
                let e = t.parent;
                while (!this._viewToModelMapping.has(e)) {
                    e = e.parent
                }
                return e
            }

            _toModelOffset(t, e, i) {
                if (i != t) {
                    const n = this._toModelOffset(t.parent, t.index, i);
                    const o = this._toModelOffset(t, e, t);
                    return n + o
                }
                if (t.is("text")) {
                    return e
                }
                let n = 0;
                for (let i = 0; i < e; i++) {
                    n += this.getModelLength(t.getChild(i))
                }
                return n
            }

            getModelLength(t) {
                if (this._viewToModelLengthCallbacks.get(t.name)) {
                    const e = this._viewToModelLengthCallbacks.get(t.name);
                    return e(t)
                } else if (this._viewToModelMapping.has(t)) {
                    return 1
                } else if (t.is("text")) {
                    return t.data.length
                } else if (t.is("uiElement")) {
                    return 0
                } else {
                    let e = 0;
                    for (const i of t.getChildren()) {
                        e += this.getModelLength(i)
                    }
                    return e
                }
            }

            _findPositionIn(t, e) {
                let i;
                let n = 0;
                let o = 0;
                let r = 0;
                if (t.is("text")) {
                    return new dl(t, e)
                }
                while (o < e) {
                    i = t.getChild(r);
                    n = this.getModelLength(i);
                    o += n;
                    r++
                }
                if (o == e) {
                    return this._moveViewPositionToTextNode(new dl(t, r))
                } else {
                    return this._findPositionIn(i, e - (o - n))
                }
            }

            _moveViewPositionToTextNode(t) {
                const e = t.nodeBefore;
                const i = t.nodeAfter;
                if (e instanceof Ls) {
                    return new dl(e, e.data.length)
                } else if (i instanceof Ls) {
                    return new dl(i, 0)
                }
                return t
            }
        }

        vs(Gh, ds);

        class Kh {
            constructor() {
                this._consumable = new Map;
                this._textProxyRegistry = new Map
            }

            add(t, e) {
                e = Jh(e);
                if (t instanceof Fh) {
                    t = this._getSymbolForTextProxy(t)
                }
                if (!this._consumable.has(t)) {
                    this._consumable.set(t, new Map)
                }
                this._consumable.get(t).set(e, true)
            }

            consume(t, e) {
                e = Jh(e);
                if (t instanceof Fh) {
                    t = this._getSymbolForTextProxy(t)
                }
                if (this.test(t, e)) {
                    this._consumable.get(t).set(e, false);
                    return true
                } else {
                    return false
                }
            }

            test(t, e) {
                e = Jh(e);
                if (t instanceof Fh) {
                    t = this._getSymbolForTextProxy(t)
                }
                const i = this._consumable.get(t);
                if (i === undefined) {
                    return null
                }
                const n = i.get(e);
                if (n === undefined) {
                    return null
                }
                return n
            }

            revert(t, e) {
                e = Jh(e);
                if (t instanceof Fh) {
                    t = this._getSymbolForTextProxy(t)
                }
                const i = this.test(t, e);
                if (i === false) {
                    this._consumable.get(t).set(e, true);
                    return true
                } else if (i === true) {
                    return false
                }
                return null
            }

            _getSymbolForTextProxy(t) {
                let e = null;
                const i = this._textProxyRegistry.get(t.startOffset);
                if (i) {
                    const n = i.get(t.endOffset);
                    if (n) {
                        e = n.get(t.parent)
                    }
                }
                if (!e) {
                    e = this._addSymbolForTextProxy(t.startOffset, t.endOffset, t.parent)
                }
                return e
            }

            _addSymbolForTextProxy(t, e, i) {
                const n = Symbol("textProxySymbol");
                let o, r;
                o = this._textProxyRegistry.get(t);
                if (!o) {
                    o = new Map;
                    this._textProxyRegistry.set(t, o)
                }
                r = o.get(e);
                if (!r) {
                    r = new Map;
                    o.set(e, r)
                }
                r.set(i, n);
                return n
            }
        }

        function Jh(t) {
            const e = t.split(":");
            return e.length > 1 ? e[0] + ":" + e[1] : e[0]
        }

        class Yh {
            constructor(t) {
                this.conversionApi = qc({dispatcher: this}, t)
            }

            convertChanges(t, e, i) {
                for (const e of t.getMarkersToRemove()) {
                    this.convertMarkerRemove(e.name, e.range, i)
                }
                for (const e of t.getChanges()) {
                    if (e.type == "insert") {
                        this.convertInsert($h._createFromPositionAndShift(e.position, e.length), i)
                    } else if (e.type == "remove") {
                        this.convertRemove(e.position, e.length, e.name, i)
                    } else {
                        this.convertAttribute(e.range, e.attributeKey, e.attributeOldValue, e.attributeNewValue, i)
                    }
                }
                for (const t of this.conversionApi.mapper.flushUnboundMarkerNames()) {
                    const n = e.get(t).getRange();
                    this.convertMarkerRemove(t, n, i);
                    this.convertMarkerAdd(t, n, i)
                }
                for (const e of t.getMarkersToAdd()) {
                    this.convertMarkerAdd(e.name, e.range, i)
                }
            }

            convertInsert(t, e) {
                this.conversionApi.writer = e;
                this.conversionApi.consumable = this._createInsertConsumable(t);
                for (const e of t) {
                    const t = e.item;
                    const i = $h._createFromPositionAndShift(e.previousPosition, e.length);
                    const n = {item: t, range: i};
                    this._testAndFire("insert", n);
                    for (const e of t.getAttributeKeys()) {
                        n.attributeKey = e;
                        n.attributeOldValue = null;
                        n.attributeNewValue = t.getAttribute(e);
                        this._testAndFire(`attribute:${e}`, n)
                    }
                }
                this._clearConversionApi()
            }

            convertRemove(t, e, i, n) {
                this.conversionApi.writer = n;
                this.fire("remove:" + i, {position: t, length: e}, this.conversionApi);
                this._clearConversionApi()
            }

            convertAttribute(t, e, i, n, o) {
                this.conversionApi.writer = o;
                this.conversionApi.consumable = this._createConsumableForRange(t, `attribute:${e}`);
                for (const o of t) {
                    const t = o.item;
                    const r = $h._createFromPositionAndShift(o.previousPosition, o.length);
                    const s = {item: t, range: r, attributeKey: e, attributeOldValue: i, attributeNewValue: n};
                    this._testAndFire(`attribute:${e}`, s)
                }
                this._clearConversionApi()
            }

            convertSelection(t, e, i) {
                const n = Array.from(e.getMarkersAtPosition(t.getFirstPosition()));
                this.conversionApi.writer = i;
                this.conversionApi.consumable = this._createSelectionConsumable(t, n);
                this.fire("selection", {selection: t}, this.conversionApi);
                if (!t.isCollapsed) {
                    return
                }
                for (const e of n) {
                    const i = e.getRange();
                    if (!Qh(t.getFirstPosition(), e, this.conversionApi.mapper)) {
                        continue
                    }
                    const n = {item: t, markerName: e.name, markerRange: i};
                    if (this.conversionApi.consumable.test(t, "addMarker:" + e.name)) {
                        this.fire("addMarker:" + e.name, n, this.conversionApi)
                    }
                }
                for (const e of t.getAttributeKeys()) {
                    const i = {
                        item: t,
                        range: t.getFirstRange(),
                        attributeKey: e,
                        attributeOldValue: null,
                        attributeNewValue: t.getAttribute(e)
                    };
                    if (this.conversionApi.consumable.test(t, "attribute:" + i.attributeKey)) {
                        this.fire("attribute:" + i.attributeKey + ":$text", i, this.conversionApi)
                    }
                }
                this._clearConversionApi()
            }

            convertMarkerAdd(t, e, i) {
                if (!e.root.document || e.root.rootName == "$graveyard") {
                    return
                }
                this.conversionApi.writer = i;
                const n = "addMarker:" + t;
                const o = new Kh;
                o.add(e, n);
                this.conversionApi.consumable = o;
                this.fire(n, {markerName: t, markerRange: e}, this.conversionApi);
                if (!o.test(e, n)) {
                    return
                }
                this.conversionApi.consumable = this._createConsumableForRange(e, n);
                for (const i of e.getItems()) {
                    if (!this.conversionApi.consumable.test(i, n)) {
                        continue
                    }
                    const o = {item: i, range: $h._createOn(i), markerName: t, markerRange: e};
                    this.fire(n, o, this.conversionApi)
                }
                this._clearConversionApi()
            }

            convertMarkerRemove(t, e, i) {
                if (!e.root.document || e.root.rootName == "$graveyard") {
                    return
                }
                this.conversionApi.writer = i;
                this.fire("removeMarker:" + t, {markerName: t, markerRange: e}, this.conversionApi);
                this._clearConversionApi()
            }

            _createInsertConsumable(t) {
                const e = new Kh;
                for (const i of t) {
                    const t = i.item;
                    e.add(t, "insert");
                    for (const i of t.getAttributeKeys()) {
                        e.add(t, "attribute:" + i)
                    }
                }
                return e
            }

            _createConsumableForRange(t, e) {
                const i = new Kh;
                for (const n of t.getItems()) {
                    i.add(n, e)
                }
                return i
            }

            _createSelectionConsumable(t, e) {
                const i = new Kh;
                i.add(t, "selection");
                for (const n of e) {
                    i.add(t, "addMarker:" + n.name)
                }
                for (const e of t.getAttributeKeys()) {
                    i.add(t, "attribute:" + e)
                }
                return i
            }

            _testAndFire(t, e) {
                if (!this.conversionApi.consumable.test(e.item, t)) {
                    return
                }
                const i = e.item.name || "$text";
                this.fire(t + ":" + i, e, this.conversionApi)
            }

            _clearConversionApi() {
                delete this.conversionApi.writer;
                delete this.conversionApi.consumable
            }
        }

        vs(Yh, ds);

        function Qh(t, e, i) {
            const n = e.getRange();
            const o = Array.from(t.getAncestors());
            o.shift();
            o.reverse();
            const r = o.some(t => {
                if (n.containsItem(t)) {
                    const e = i.toViewElement(t);
                    return !!e.getCustomProperty("addHighlight")
                }
            });
            return !r
        }

        class Xh {
            constructor(t, e, i) {
                this._lastRangeBackward = false;
                this._ranges = [];
                this._attrs = new Map;
                if (t) {
                    this.setTo(t, e, i)
                }
            }

            get anchor() {
                if (this._ranges.length > 0) {
                    const t = this._ranges[this._ranges.length - 1];
                    return this._lastRangeBackward ? t.end : t.start
                }
                return null
            }

            get focus() {
                if (this._ranges.length > 0) {
                    const t = this._ranges[this._ranges.length - 1];
                    return this._lastRangeBackward ? t.start : t.end
                }
                return null
            }

            get isCollapsed() {
                const t = this._ranges.length;
                if (t === 1) {
                    return this._ranges[0].isCollapsed
                } else {
                    return false
                }
            }

            get rangeCount() {
                return this._ranges.length
            }

            get isBackward() {
                return !this.isCollapsed && this._lastRangeBackward
            }

            isEqual(t) {
                if (this.rangeCount != t.rangeCount) {
                    return false
                } else if (this.rangeCount === 0) {
                    return true
                }
                if (!this.anchor.isEqual(t.anchor) || !this.focus.isEqual(t.focus)) {
                    return false
                }
                for (const e of this._ranges) {
                    let i = false;
                    for (const n of t._ranges) {
                        if (e.isEqual(n)) {
                            i = true;
                            break
                        }
                    }
                    if (!i) {
                        return false
                    }
                }
                return true
            }

            * getRanges() {
                for (const t of this._ranges) {
                    yield new $h(t.start, t.end)
                }
            }

            getFirstRange() {
                let t = null;
                for (const e of this._ranges) {
                    if (!t || e.start.isBefore(t.start)) {
                        t = e
                    }
                }
                return t ? new $h(t.start, t.end) : null
            }

            getLastRange() {
                let t = null;
                for (const e of this._ranges) {
                    if (!t || e.end.isAfter(t.end)) {
                        t = e
                    }
                }
                return t ? new $h(t.start, t.end) : null
            }

            getFirstPosition() {
                const t = this.getFirstRange();
                return t ? t.start.clone() : null
            }

            getLastPosition() {
                const t = this.getLastRange();
                return t ? t.end.clone() : null
            }

            setTo(t, e, i) {
                if (t === null) {
                    this._setRanges([])
                } else if (t instanceof Xh) {
                    this._setRanges(t.getRanges(), t.isBackward)
                } else if (t && typeof t.getRanges == "function") {
                    this._setRanges(t.getRanges(), t.isBackward)
                } else if (t instanceof $h) {
                    this._setRanges([t], !!e && !!e.backward)
                } else if (t instanceof Uh) {
                    this._setRanges([new $h(t)])
                } else if (t instanceof zh) {
                    const n = !!i && !!i.backward;
                    let o;
                    if (e == "in") {
                        o = $h._createIn(t)
                    } else if (e == "on") {
                        o = $h._createOn(t)
                    } else if (e !== undefined) {
                        o = new $h(Uh._createAt(t, e))
                    } else {
                        throw new ss["b"]("model-selection-setTo-required-second-parameter: " + "selection.setTo requires the second parameter when the first parameter is a node.", [this, t])
                    }
                    this._setRanges([o], n)
                } else if (js(t)) {
                    this._setRanges(t, e && !!e.backward)
                } else {
                    throw new ss["b"]("model-selection-setTo-not-selectable: Cannot set the selection to the given place.", [this, t])
                }
            }

            _setRanges(t, e = false) {
                t = Array.from(t);
                const i = t.some(e => {
                    if (!(e instanceof $h)) {
                        throw new ss["b"]("model-selection-set-ranges-not-range: " + "Selection range set to an object that is not an instance of model.Range.", [this, t])
                    }
                    return this._ranges.every(t => !t.isEqual(e))
                });
                if (t.length === this._ranges.length && !i) {
                    return
                }
                this._removeAllRanges();
                for (const e of t) {
                    this._pushRange(e)
                }
                this._lastRangeBackward = !!e;
                this.fire("change:range", {directChange: true})
            }

            setFocus(t, e) {
                if (this.anchor === null) {
                    throw new ss["b"]("model-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.", [this, t])
                }
                const i = Uh._createAt(t, e);
                if (i.compareWith(this.focus) == "same") {
                    return
                }
                const n = this.anchor;
                if (this._ranges.length) {
                    this._popRange()
                }
                if (i.compareWith(n) == "before") {
                    this._pushRange(new $h(i, n));
                    this._lastRangeBackward = true
                } else {
                    this._pushRange(new $h(n, i));
                    this._lastRangeBackward = false
                }
                this.fire("change:range", {directChange: true})
            }

            getAttribute(t) {
                return this._attrs.get(t)
            }

            getAttributes() {
                return this._attrs.entries()
            }

            getAttributeKeys() {
                return this._attrs.keys()
            }

            hasAttribute(t) {
                return this._attrs.has(t)
            }

            removeAttribute(t) {
                if (this.hasAttribute(t)) {
                    this._attrs.delete(t);
                    this.fire("change:attribute", {attributeKeys: [t], directChange: true})
                }
            }

            setAttribute(t, e) {
                if (this.getAttribute(t) !== e) {
                    this._attrs.set(t, e);
                    this.fire("change:attribute", {attributeKeys: [t], directChange: true})
                }
            }

            getSelectedElement() {
                if (this.rangeCount !== 1) {
                    return null
                }
                return this.getFirstRange().getContainedElement()
            }

            is(t) {
                return t == "selection" || t == "model:selection"
            }

            * getSelectedBlocks() {
                const t = new WeakSet;
                for (const e of this.getRanges()) {
                    const i = ef(e.start, t);
                    if (i && nf(i, e)) {
                        yield i
                    }
                    for (const i of e.getWalker()) {
                        const n = i.item;
                        if (i.type == "elementEnd" && tf(n, t, e)) {
                            yield n
                        }
                    }
                    const n = ef(e.end, t);
                    if (n && !e.end.isTouching(Uh._createAt(n, 0)) && nf(n, e)) {
                        yield n
                    }
                }
            }

            containsEntireContent(t = this.anchor.root) {
                const e = Uh._createAt(t, 0);
                const i = Uh._createAt(t, "end");
                return e.isTouching(this.getFirstPosition()) && i.isTouching(this.getLastPosition())
            }

            _pushRange(t) {
                this._checkRange(t);
                this._ranges.push(new $h(t.start, t.end))
            }

            _checkRange(t) {
                for (let e = 0; e < this._ranges.length; e++) {
                    if (t.isIntersecting(this._ranges[e])) {
                        throw new ss["b"]("model-selection-range-intersects: Trying to add a range that intersects with another range in the selection.", [this, t], {
                            addedRange: t,
                            intersectingRange: this._ranges[e]
                        })
                    }
                }
            }

            _removeAllRanges() {
                while (this._ranges.length > 0) {
                    this._popRange()
                }
            }

            _popRange() {
                this._ranges.pop()
            }
        }

        vs(Xh, ds);

        function Zh(t, e) {
            if (e.has(t)) {
                return false
            }
            e.add(t);
            return t.root.document.model.schema.isBlock(t) && t.parent
        }

        function tf(t, e, i) {
            return Zh(t, e) && nf(t, i)
        }

        function ef(t, e) {
            const i = t.parent;
            const n = i.root.document.model.schema;
            const o = t.parent.getAncestors({parentFirst: true, includeSelf: true});
            let r = false;
            const s = o.find(t => {
                if (r) {
                    return false
                }
                r = n.isLimit(t);
                return !r && Zh(t, e)
            });
            o.forEach(t => e.add(t));
            return s
        }

        function nf(t, e) {
            const i = of(t);
            if (!i) {
                return true
            }
            const n = e.containsRange($h._createOn(i), true);
            return !n
        }

        function of(t) {
            const e = t.root.document.model.schema;
            let i = t.parent;
            while (i) {
                if (e.isBlock(i)) {
                    return i
                }
                i = i.parent
            }
        }

        class rf extends $h {
            constructor(t, e) {
                super(t, e);
                sf.call(this)
            }

            detach() {
                this.stopListening()
            }

            is(t) {
                return t == "liveRange" || t == "model:liveRange" || super.is(t)
            }

            toRange() {
                return new $h(this.start, this.end)
            }

            static fromRange(t) {
                return new rf(t.start, t.end)
            }
        }

        function sf() {
            this.listenTo(this.root.document.model, "applyOperation", (t, e) => {
                const i = e[0];
                if (!i.isDocumentOperation) {
                    return
                }
                af.call(this, i)
            }, {priority: "low"})
        }

        function af(t) {
            const e = this.getTransformedByOperation(t);
            const i = $h._createFromRanges(e);
            const n = !i.isEqual(this);
            const o = cf(this, t);
            let r = null;
            if (n) {
                if (i.root.rootName == "$graveyard") {
                    if (t.type == "remove") {
                        r = t.sourcePosition
                    } else {
                        r = t.deletionPosition
                    }
                }
                const e = this.toRange();
                this.start = i.start;
                this.end = i.end;
                this.fire("change:range", e, {deletionPosition: r})
            } else if (o) {
                this.fire("change:content", this.toRange(), {deletionPosition: r})
            }
        }

        function cf(t, e) {
            switch (e.type) {
                case"insert":
                    return t.containsPosition(e.position);
                case"move":
                case"remove":
                case"reinsert":
                case"merge":
                    return t.containsPosition(e.sourcePosition) || t.start.isEqual(e.sourcePosition) || t.containsPosition(e.targetPosition);
                case"split":
                    return t.containsPosition(e.splitPosition) || t.containsPosition(e.insertionPosition)
            }
            return false
        }

        vs(rf, ds);
        const lf = "selection:";

        class df {
            constructor(t) {
                this._selection = new uf(t);
                this._selection.delegate("change:range").to(this);
                this._selection.delegate("change:attribute").to(this);
                this._selection.delegate("change:marker").to(this)
            }

            get isCollapsed() {
                return this._selection.isCollapsed
            }

            get anchor() {
                return this._selection.anchor
            }

            get focus() {
                return this._selection.focus
            }

            get rangeCount() {
                return this._selection.rangeCount
            }

            get hasOwnRange() {
                return this._selection.hasOwnRange
            }

            get isBackward() {
                return this._selection.isBackward
            }

            get isGravityOverridden() {
                return this._selection.isGravityOverridden
            }

            get markers() {
                return this._selection.markers
            }

            get _ranges() {
                return this._selection._ranges
            }

            getRanges() {
                return this._selection.getRanges()
            }

            getFirstPosition() {
                return this._selection.getFirstPosition()
            }

            getLastPosition() {
                return this._selection.getLastPosition()
            }

            getFirstRange() {
                return this._selection.getFirstRange()
            }

            getLastRange() {
                return this._selection.getLastRange()
            }

            getSelectedBlocks() {
                return this._selection.getSelectedBlocks()
            }

            getSelectedElement() {
                return this._selection.getSelectedElement()
            }

            containsEntireContent(t) {
                return this._selection.containsEntireContent(t)
            }

            destroy() {
                this._selection.destroy()
            }

            getAttributeKeys() {
                return this._selection.getAttributeKeys()
            }

            getAttributes() {
                return this._selection.getAttributes()
            }

            getAttribute(t) {
                return this._selection.getAttribute(t)
            }

            hasAttribute(t) {
                return this._selection.hasAttribute(t)
            }

            refresh() {
                this._selection._updateMarkers();
                this._selection._updateAttributes(false)
            }

            is(t) {
                return t == "selection" || t == "model:selection" || t == "documentSelection" || t == "model:documentSelection"
            }

            _setFocus(t, e) {
                this._selection.setFocus(t, e)
            }

            _setTo(t, e, i) {
                this._selection.setTo(t, e, i)
            }

            _setAttribute(t, e) {
                this._selection.setAttribute(t, e)
            }

            _removeAttribute(t) {
                this._selection.removeAttribute(t)
            }

            _getStoredAttributes() {
                return this._selection._getStoredAttributes()
            }

            _overrideGravity() {
                return this._selection.overrideGravity()
            }

            _restoreGravity(t) {
                this._selection.restoreGravity(t)
            }

            static _getStoreAttributeKey(t) {
                return lf + t
            }

            static _isStoreAttributeKey(t) {
                return t.startsWith(lf)
            }
        }

        vs(df, ds);

        class uf extends Xh {
            constructor(t) {
                super();
                this.markers = new ys({idProperty: "name"});
                this._model = t.model;
                this._document = t;
                this._attributePriority = new Map;
                this._fixGraveyardRangesData = [];
                this._hasChangedRange = false;
                this._overriddenGravityRegister = new Set;
                this.listenTo(this._model, "applyOperation", (t, e) => {
                    const i = e[0];
                    if (!i.isDocumentOperation || i.type == "marker" || i.type == "rename" || i.type == "noop") {
                        return
                    }
                    while (this._fixGraveyardRangesData.length) {
                        const {liveRange: t, sourcePosition: e} = this._fixGraveyardRangesData.shift();
                        this._fixGraveyardSelection(t, e)
                    }
                    if (this._hasChangedRange) {
                        this._hasChangedRange = false;
                        this.fire("change:range", {directChange: false})
                    }
                }, {priority: "lowest"});
                this.on("change:range", () => {
                    for (const t of this.getRanges()) {
                        if (!this._document._validateSelectionRange(t)) {
                            throw new ss["b"]("document-selection-wrong-position: Range from document selection starts or ends at incorrect position.", this, {range: t})
                        }
                    }
                });
                this.listenTo(this._model.markers, "update", () => this._updateMarkers());
                this.listenTo(this._document, "change", (t, e) => {
                    ff(this._model, e)
                })
            }

            get isCollapsed() {
                const t = this._ranges.length;
                return t === 0 ? this._document._getDefaultRange().isCollapsed : super.isCollapsed
            }

            get anchor() {
                return super.anchor || this._document._getDefaultRange().start
            }

            get focus() {
                return super.focus || this._document._getDefaultRange().end
            }

            get rangeCount() {
                return this._ranges.length ? this._ranges.length : 1
            }

            get hasOwnRange() {
                return this._ranges.length > 0
            }

            get isGravityOverridden() {
                return !!this._overriddenGravityRegister.size
            }

            destroy() {
                for (let t = 0; t < this._ranges.length; t++) {
                    this._ranges[t].detach()
                }
                this.stopListening()
            }

            * getRanges() {
                if (this._ranges.length) {
                    yield* super.getRanges()
                } else {
                    yield this._document._getDefaultRange()
                }
            }

            getFirstRange() {
                return super.getFirstRange() || this._document._getDefaultRange()
            }

            getLastRange() {
                return super.getLastRange() || this._document._getDefaultRange()
            }

            setTo(t, e, i) {
                super.setTo(t, e, i);
                this._updateAttributes(true);
                this._updateMarkers()
            }

            setFocus(t, e) {
                super.setFocus(t, e);
                this._updateAttributes(true);
                this._updateMarkers()
            }

            setAttribute(t, e) {
                if (this._setAttribute(t, e)) {
                    const e = [t];
                    this.fire("change:attribute", {attributeKeys: e, directChange: true})
                }
            }

            removeAttribute(t) {
                if (this._removeAttribute(t)) {
                    const e = [t];
                    this.fire("change:attribute", {attributeKeys: e, directChange: true})
                }
            }

            overrideGravity() {
                const t = is();
                this._overriddenGravityRegister.add(t);
                if (this._overriddenGravityRegister.size === 1) {
                    this._updateAttributes(true)
                }
                return t
            }

            restoreGravity(t) {
                if (!this._overriddenGravityRegister.has(t)) {
                    throw new ss["b"]("document-selection-gravity-wrong-restore: Attempting to restore the selection gravity for an unknown UID.", this, {uid: t})
                }
                this._overriddenGravityRegister.delete(t);
                if (!this.isGravityOverridden) {
                    this._updateAttributes(true)
                }
            }

            _popRange() {
                this._ranges.pop().detach()
            }

            _pushRange(t) {
                const e = this._prepareRange(t);
                if (e) {
                    this._ranges.push(e)
                }
            }

            _prepareRange(t) {
                this._checkRange(t);
                if (t.root == this._document.graveyard) {
                    return
                }
                const e = rf.fromRange(t);
                e.on("change:range", (t, i, n) => {
                    this._hasChangedRange = true;
                    if (e.root == this._document.graveyard) {
                        this._fixGraveyardRangesData.push({liveRange: e, sourcePosition: n.deletionPosition})
                    }
                });
                return e
            }

            _updateMarkers() {
                const t = [];
                let e = false;
                for (const e of this._model.markers) {
                    const i = e.getRange();
                    for (const n of this.getRanges()) {
                        if (i.containsRange(n, !n.isCollapsed)) {
                            t.push(e)
                        }
                    }
                }
                const i = Array.from(this.markers);
                for (const i of t) {
                    if (!this.markers.has(i)) {
                        this.markers.add(i);
                        e = true
                    }
                }
                for (const i of Array.from(this.markers)) {
                    if (!t.includes(i)) {
                        this.markers.remove(i);
                        e = true
                    }
                }
                if (e) {
                    this.fire("change:marker", {oldMarkers: i, directChange: false})
                }
            }

            _updateAttributes(t) {
                const e = Hs(this._getSurroundingAttributes());
                const i = Hs(this.getAttributes());
                if (t) {
                    this._attributePriority = new Map;
                    this._attrs = new Map
                } else {
                    for (const [t, e] of this._attributePriority) {
                        if (e == "low") {
                            this._attrs.delete(t);
                            this._attributePriority.delete(t)
                        }
                    }
                }
                this._setAttributesTo(e);
                const n = [];
                for (const [t, e] of this.getAttributes()) {
                    if (!i.has(t) || i.get(t) !== e) {
                        n.push(t)
                    }
                }
                for (const [t] of i) {
                    if (!this.hasAttribute(t)) {
                        n.push(t)
                    }
                }
                if (n.length > 0) {
                    this.fire("change:attribute", {attributeKeys: n, directChange: false})
                }
            }

            _setAttribute(t, e, i = true) {
                const n = i ? "normal" : "low";
                if (n == "low" && this._attributePriority.get(t) == "normal") {
                    return false
                }
                const o = super.getAttribute(t);
                if (o === e) {
                    return false
                }
                this._attrs.set(t, e);
                this._attributePriority.set(t, n);
                return true
            }

            _removeAttribute(t, e = true) {
                const i = e ? "normal" : "low";
                if (i == "low" && this._attributePriority.get(t) == "normal") {
                    return false
                }
                this._attributePriority.set(t, i);
                if (!super.hasAttribute(t)) {
                    return false
                }
                this._attrs.delete(t);
                return true
            }

            _setAttributesTo(t) {
                const e = new Set;
                for (const [e, i] of this.getAttributes()) {
                    if (t.get(e) === i) {
                        continue
                    }
                    this._removeAttribute(e, false)
                }
                for (const [i, n] of t) {
                    const t = this._setAttribute(i, n, false);
                    if (t) {
                        e.add(i)
                    }
                }
                return e
            }

            * _getStoredAttributes() {
                const t = this.getFirstPosition().parent;
                if (this.isCollapsed && t.isEmpty) {
                    for (const e of t.getAttributeKeys()) {
                        if (e.startsWith(lf)) {
                            const i = e.substr(lf.length);
                            yield[i, t.getAttribute(e)]
                        }
                    }
                }
            }

            _getSurroundingAttributes() {
                const t = this.getFirstPosition();
                const e = this._model.schema;
                let i = null;
                if (!this.isCollapsed) {
                    const t = this.getFirstRange();
                    for (const n of t) {
                        if (n.item.is("element") && e.isObject(n.item)) {
                            break
                        }
                        if (n.type == "text") {
                            i = n.item.getAttributes();
                            break
                        }
                    }
                } else {
                    const e = t.textNode ? t.textNode : t.nodeBefore;
                    const n = t.textNode ? t.textNode : t.nodeAfter;
                    if (!this.isGravityOverridden) {
                        i = hf(e)
                    }
                    if (!i) {
                        i = hf(n)
                    }
                    if (!this.isGravityOverridden && !i) {
                        let t = e;
                        while (t && !i) {
                            t = t.previousSibling;
                            i = hf(t)
                        }
                    }
                    if (!i) {
                        let t = n;
                        while (t && !i) {
                            t = t.nextSibling;
                            i = hf(t)
                        }
                    }
                    if (!i) {
                        i = this._getStoredAttributes()
                    }
                }
                return i
            }

            _fixGraveyardSelection(t, e) {
                const i = e.clone();
                const n = this._model.schema.getNearestSelectionRange(i);
                const o = this._ranges.indexOf(t);
                this._ranges.splice(o, 1);
                t.detach();
                if (n) {
                    const t = this._prepareRange(n);
                    this._ranges.splice(o, 0, t)
                }
            }
        }

        function hf(t) {
            if (t instanceof Fh || t instanceof Lh) {
                return t.getAttributes()
            }
            return null
        }

        function ff(t, e) {
            const i = t.document.differ;
            for (const n of i.getChanges()) {
                if (n.type != "insert") {
                    continue
                }
                const i = n.position.parent;
                const o = n.length === i.maxOffset;
                if (o) {
                    t.enqueueChange(e, t => {
                        const e = Array.from(i.getAttributeKeys()).filter(t => t.startsWith(lf));
                        for (const n of e) {
                            t.removeAttribute(n, i)
                        }
                    })
                }
            }
        }

        class gf {
            constructor(t) {
                this._dispatchers = t
            }

            add(t) {
                for (const e of this._dispatchers) {
                    t(e)
                }
                return this
            }
        }

        var mf = 1, pf = 4;

        function bf(t) {
            return Hr(t, mf | pf)
        }

        var wf = bf;

        class kf extends gf {
            elementToElement(t) {
                return this.add(Nf(t))
            }

            attributeToElement(t) {
                return this.add(Mf(t))
            }

            attributeToAttribute(t) {
                return this.add(Bf(t))
            }

            markerToElement(t) {
                return this.add(zf(t))
            }

            markerToHighlight(t) {
                return this.add(Lf(t))
            }
        }

        function _f() {
            return (t, e, i) => {
                if (!i.consumable.consume(e.item, "insert")) {
                    return
                }
                const n = i.writer;
                const o = i.mapper.toViewPosition(e.range.start);
                const r = n.createText(e.item.data);
                n.insert(o, r)
            }
        }

        function vf() {
            return (t, e, i) => {
                const n = i.mapper.toViewPosition(e.position);
                const o = e.position.getShiftedBy(e.length);
                const r = i.mapper.toViewPosition(o, {isPhantom: true});
                const s = i.writer.createRange(n, r);
                const a = i.writer.remove(s.getTrimmed());
                for (const t of i.writer.createRangeIn(a).getItems()) {
                    i.mapper.unbindViewElement(t)
                }
            }
        }

        function yf(t, e) {
            const i = t.createAttributeElement("span", e.attributes);
            if (e.classes) {
                i._addClass(e.classes)
            }
            if (e.priority) {
                i._priority = e.priority
            }
            i._id = e.id;
            return i
        }

        function xf() {
            return (t, e, i) => {
                const n = e.selection;
                if (n.isCollapsed) {
                    return
                }
                if (!i.consumable.consume(n, "selection")) {
                    return
                }
                const o = [];
                for (const t of n.getRanges()) {
                    const e = i.mapper.toViewRange(t);
                    o.push(e)
                }
                i.writer.setSelection(o, {backward: n.isBackward})
            }
        }

        function Cf() {
            return (t, e, i) => {
                const n = e.selection;
                if (!n.isCollapsed) {
                    return
                }
                if (!i.consumable.consume(n, "selection")) {
                    return
                }
                const o = i.writer;
                const r = n.getFirstPosition();
                const s = i.mapper.toViewPosition(r);
                const a = o.breakAttributes(s);
                o.setSelection(a)
            }
        }

        function Af() {
            return (t, e, i) => {
                const n = i.writer;
                const o = n.document.selection;
                for (const t of o.getRanges()) {
                    if (t.isCollapsed) {
                        if (t.end.parent.isAttached()) {
                            i.writer.mergeAttributes(t.start)
                        }
                    }
                }
                n.setSelection(null)
            }
        }

        function Tf(t) {
            return (e, i, n) => {
                const o = t(i.attributeOldValue, n.writer);
                const r = t(i.attributeNewValue, n.writer);
                if (!o && !r) {
                    return
                }
                if (!n.consumable.consume(i.item, e.name)) {
                    return
                }
                const s = n.writer;
                const a = s.document.selection;
                if (i.item instanceof Xh || i.item instanceof df) {
                    s.wrap(a.getFirstRange(), r)
                } else {
                    let t = n.mapper.toViewRange(i.range);
                    if (i.attributeOldValue !== null && o) {
                        t = s.unwrap(t, o)
                    }
                    if (i.attributeNewValue !== null && r) {
                        s.wrap(t, r)
                    }
                }
            }
        }

        function Pf(t) {
            return (e, i, n) => {
                const o = t(i.item, n.writer);
                if (!o) {
                    return
                }
                if (!n.consumable.consume(i.item, "insert")) {
                    return
                }
                const r = n.mapper.toViewPosition(i.range.start);
                n.mapper.bindElements(i.item, o);
                n.writer.insert(r, o)
            }
        }

        function Sf(t) {
            return (e, i, n) => {
                i.isOpening = true;
                const o = t(i, n.writer);
                i.isOpening = false;
                const r = t(i, n.writer);
                if (!o || !r) {
                    return
                }
                const s = i.markerRange;
                if (s.isCollapsed && !n.consumable.consume(s, e.name)) {
                    return
                }
                for (const t of s) {
                    if (!n.consumable.consume(t.item, e.name)) {
                        return
                    }
                }
                const a = n.mapper;
                const c = n.writer;
                c.insert(a.toViewPosition(s.start), o);
                n.mapper.bindElementToMarker(o, i.markerName);
                if (!s.isCollapsed) {
                    c.insert(a.toViewPosition(s.end), r);
                    n.mapper.bindElementToMarker(r, i.markerName)
                }
                e.stop()
            }
        }

        function Ef() {
            return (t, e, i) => {
                const n = i.mapper.markerNameToElements(e.markerName);
                if (!n) {
                    return
                }
                for (const t of n) {
                    i.mapper.unbindElementFromMarkerName(t, e.markerName);
                    i.writer.clear(i.writer.createRangeOn(t), t)
                }
                i.writer.clearClonedElementsGroup(e.markerName);
                t.stop()
            }
        }

        function Rf(t) {
            return (e, i, n) => {
                const o = t(i.attributeOldValue, i);
                const r = t(i.attributeNewValue, i);
                if (!o && !r) {
                    return
                }
                if (!n.consumable.consume(i.item, e.name)) {
                    return
                }
                const s = n.mapper.toViewElement(i.item);
                const a = n.writer;
                if (!s) {
                    throw new ss["b"]("conversion-attribute-to-attribute-on-text: " + "Trying to convert text node's attribute with attribute-to-attribute converter.", [i, n])
                }
                if (i.attributeOldValue !== null && o) {
                    if (o.key == "class") {
                        const t = Array.isArray(o.value) ? o.value : [o.value];
                        for (const e of t) {
                            a.removeClass(e, s)
                        }
                    } else if (o.key == "style") {
                        const t = Object.keys(o.value);
                        for (const e of t) {
                            a.removeStyle(e, s)
                        }
                    } else {
                        a.removeAttribute(o.key, s)
                    }
                }
                if (i.attributeNewValue !== null && r) {
                    if (r.key == "class") {
                        const t = Array.isArray(r.value) ? r.value : [r.value];
                        for (const e of t) {
                            a.addClass(e, s)
                        }
                    } else if (r.key == "style") {
                        const t = Object.keys(r.value);
                        for (const e of t) {
                            a.setStyle(e, r.value[e], s)
                        }
                    } else {
                        a.setAttribute(r.key, r.value, s)
                    }
                }
            }
        }

        function Of(t) {
            return (e, i, n) => {
                if (!i.item) {
                    return
                }
                if (!(i.item instanceof Xh || i.item instanceof df) && !i.item.is("textProxy")) {
                    return
                }
                const o = Wf(t, i, n);
                if (!o) {
                    return
                }
                if (!n.consumable.consume(i.item, e.name)) {
                    return
                }
                const r = n.writer;
                const s = yf(r, o);
                const a = r.document.selection;
                if (i.item instanceof Xh || i.item instanceof df) {
                    r.wrap(a.getFirstRange(), s, a)
                } else {
                    const t = n.mapper.toViewRange(i.range);
                    const e = r.wrap(t, s);
                    for (const t of e.getItems()) {
                        if (t.is("attributeElement") && t.isSimilar(s)) {
                            n.mapper.bindElementToMarker(t, i.markerName);
                            break
                        }
                    }
                }
            }
        }

        function If(t) {
            return (e, i, n) => {
                if (!i.item) {
                    return
                }
                if (!(i.item instanceof jh)) {
                    return
                }
                const o = Wf(t, i, n);
                if (!o) {
                    return
                }
                if (!n.consumable.test(i.item, e.name)) {
                    return
                }
                const r = n.mapper.toViewElement(i.item);
                if (r && r.getCustomProperty("addHighlight")) {
                    n.consumable.consume(i.item, e.name);
                    for (const t of $h._createIn(i.item)) {
                        n.consumable.consume(t.item, e.name)
                    }
                    r.getCustomProperty("addHighlight")(r, o, n.writer);
                    n.mapper.bindElementToMarker(r, i.markerName)
                }
            }
        }

        function Vf(t) {
            return (e, i, n) => {
                if (i.markerRange.isCollapsed) {
                    return
                }
                const o = Wf(t, i, n);
                if (!o) {
                    return
                }
                const r = yf(n.writer, o);
                const s = n.mapper.markerNameToElements(i.markerName);
                if (!s) {
                    return
                }
                for (const t of s) {
                    n.mapper.unbindElementFromMarkerName(t, i.markerName);
                    if (t.is("attributeElement")) {
                        n.writer.unwrap(n.writer.createRangeOn(t), r)
                    } else {
                        t.getCustomProperty("removeHighlight")(t, o.id, n.writer)
                    }
                }
                n.writer.clearClonedElementsGroup(i.markerName);
                e.stop()
            }
        }

        function Nf(t) {
            t = wf(t);
            t.view = Ff(t.view, "container");
            return e => {
                e.on("insert:" + t.model, Pf(t.view), {priority: t.converterPriority || "normal"})
            }
        }

        function Mf(t) {
            t = wf(t);
            const e = t.model.key ? t.model.key : t.model;
            let i = "attribute:" + e;
            if (t.model.name) {
                i += ":" + t.model.name
            }
            if (t.model.values) {
                for (const e of t.model.values) {
                    t.view[e] = Ff(t.view[e], "attribute")
                }
            } else {
                t.view = Ff(t.view, "attribute")
            }
            const n = jf(t);
            return e => {
                e.on(i, Tf(n), {priority: t.converterPriority || "normal"})
            }
        }

        function Bf(t) {
            t = wf(t);
            const e = t.model.key ? t.model.key : t.model;
            let i = "attribute:" + e;
            if (t.model.name) {
                i += ":" + t.model.name
            }
            if (t.model.values) {
                for (const e of t.model.values) {
                    t.view[e] = Hf(t.view[e])
                }
            } else {
                t.view = Hf(t.view)
            }
            const n = jf(t);
            return e => {
                e.on(i, Rf(n), {priority: t.converterPriority || "normal"})
            }
        }

        function zf(t) {
            t = wf(t);
            t.view = Ff(t.view, "ui");
            return e => {
                e.on("addMarker:" + t.model, Sf(t.view), {priority: t.converterPriority || "normal"});
                e.on("removeMarker:" + t.model, Ef(t.view), {priority: t.converterPriority || "normal"})
            }
        }

        function Lf(t) {
            return e => {
                e.on("addMarker:" + t.model, Of(t.view), {priority: t.converterPriority || "normal"});
                e.on("addMarker:" + t.model, If(t.view), {priority: t.converterPriority || "normal"});
                e.on("removeMarker:" + t.model, Vf(t.view), {priority: t.converterPriority || "normal"})
            }
        }

        function Ff(t, e) {
            if (typeof t == "function") {
                return t
            }
            return (i, n) => Df(t, n, e)
        }

        function Df(t, e, i) {
            if (typeof t == "string") {
                t = {name: t}
            }
            let n;
            const o = Object.assign({}, t.attributes);
            if (i == "container") {
                n = e.createContainerElement(t.name, o)
            } else if (i == "attribute") {
                const i = {priority: t.priority || wl.DEFAULT_PRIORITY};
                n = e.createAttributeElement(t.name, o, i)
            } else {
                n = e.createUIElement(t.name, o)
            }
            if (t.styles) {
                const i = Object.keys(t.styles);
                for (const o of i) {
                    e.setStyle(o, t.styles[o], n)
                }
            }
            if (t.classes) {
                const i = t.classes;
                if (typeof i == "string") {
                    e.addClass(i, n)
                } else {
                    for (const t of i) {
                        e.addClass(t, n)
                    }
                }
            }
            return n
        }

        function jf(t) {
            if (t.model.values) {
                return (e, i) => {
                    const n = t.view[e];
                    if (n) {
                        return n(e, i)
                    }
                    return null
                }
            } else {
                return t.view
            }
        }

        function Hf(t) {
            if (typeof t == "string") {
                return e => ({key: t, value: e})
            } else if (typeof t == "object") {
                if (t.value) {
                    return () => t
                } else {
                    return e => ({key: t.key, value: e})
                }
            } else {
                return t
            }
        }

        function Wf(t, e, i) {
            const n = typeof t == "function" ? t(e, i) : t;
            if (!n) {
                return null
            }
            if (!n.priority) {
                n.priority = 10
            }
            if (!n.id) {
                n.id = e.markerName
            }
            return n
        }

        class qf extends gf {
            elementToElement(t) {
                return this.add(Kf(t))
            }

            elementToAttribute(t) {
                return this.add(Jf(t))
            }

            attributeToAttribute(t) {
                return this.add(Yf(t))
            }

            elementToMarker(t) {
                return this.add(Qf(t))
            }
        }

        function Uf() {
            return (t, e, i) => {
                if (!e.modelRange && i.consumable.consume(e.viewItem, {name: true})) {
                    const {modelRange: t, modelCursor: n} = i.convertChildren(e.viewItem, e.modelCursor);
                    e.modelRange = t;
                    e.modelCursor = n
                }
            }
        }

        function $f() {
            return (t, e, i) => {
                if (i.schema.checkChild(e.modelCursor, "$text")) {
                    if (i.consumable.consume(e.viewItem)) {
                        const t = i.writer.createText(e.viewItem.data);
                        i.writer.insert(t, e.modelCursor);
                        e.modelRange = $h._createFromPositionAndShift(e.modelCursor, t.offsetSize);
                        e.modelCursor = e.modelRange.end
                    }
                }
            }
        }

        function Gf(t, e) {
            return (i, n) => {
                const o = n.newSelection;
                const r = new Xh;
                const s = [];
                for (const t of o.getRanges()) {
                    s.push(e.toModelRange(t))
                }
                r.setTo(s, {backward: o.isBackward});
                if (!r.isEqual(t.document.selection)) {
                    t.change(t => {
                        t.setSelection(r)
                    })
                }
            }
        }

        function Kf(t) {
            t = wf(t);
            const e = Zf(t);
            const i = Xf(t.view);
            const n = i ? "element:" + i : "element";
            return i => {
                i.on(n, e, {priority: t.converterPriority || "normal"})
            }
        }

        function Jf(t) {
            t = wf(t);
            ig(t);
            const e = ng(t, false);
            const i = Xf(t.view);
            const n = i ? "element:" + i : "element";
            return i => {
                i.on(n, e, {priority: t.converterPriority || "low"})
            }
        }

        function Yf(t) {
            t = wf(t);
            let e = null;
            if (typeof t.view == "string" || t.view.key) {
                e = eg(t)
            }
            ig(t, e);
            const i = ng(t, true);
            return e => {
                e.on("element", i, {priority: t.converterPriority || "low"})
            }
        }

        function Qf(t) {
            t = wf(t);
            sg(t);
            return Kf(t)
        }

        function Xf(t) {
            if (typeof t == "string") {
                return t
            }
            if (typeof t == "object" && typeof t.name == "string") {
                return t.name
            }
            return null
        }

        function Zf(t) {
            const e = t.view ? new Ws(t.view) : null;
            return (i, n, o) => {
                let r = {};
                if (e) {
                    const t = e.match(n.viewItem);
                    if (!t) {
                        return
                    }
                    r = t.match
                }
                r.name = true;
                const s = tg(t.model, n.viewItem, o.writer);
                if (!s) {
                    return
                }
                if (!o.consumable.test(n.viewItem, r)) {
                    return
                }
                const a = o.splitToAllowedParent(s, n.modelCursor);
                if (!a) {
                    return
                }
                o.writer.insert(s, a.position);
                o.convertChildren(n.viewItem, o.writer.createPositionAt(s, 0));
                o.consumable.consume(n.viewItem, r);
                const c = o.getSplitParts(s);
                n.modelRange = new $h(o.writer.createPositionBefore(s), o.writer.createPositionAfter(c[c.length - 1]));
                if (a.cursorParent) {
                    n.modelCursor = o.writer.createPositionAt(a.cursorParent, 0)
                } else {
                    n.modelCursor = n.modelRange.end
                }
            }
        }

        function tg(t, e, i) {
            if (t instanceof Function) {
                return t(e, i)
            } else {
                return i.createElement(t)
            }
        }

        function eg(t) {
            if (typeof t.view == "string") {
                t.view = {key: t.view}
            }
            const e = t.view.key;
            let i;
            if (e == "class" || e == "style") {
                const n = e == "class" ? "classes" : "styles";
                i = {[n]: t.view.value}
            } else {
                const n = typeof t.view.value == "undefined" ? /[\s\S]*/ : t.view.value;
                i = {attributes: {[e]: n}}
            }
            if (t.view.name) {
                i.name = t.view.name
            }
            t.view = i;
            return e
        }

        function ig(t, e = null) {
            const i = e === null ? true : t => t.getAttribute(e);
            const n = typeof t.model != "object" ? t.model : t.model.key;
            const o = typeof t.model != "object" || typeof t.model.value == "undefined" ? i : t.model.value;
            t.model = {key: n, value: o}
        }

        function ng(t, e) {
            const i = new Ws(t.view);
            return (n, o, r) => {
                const s = i.match(o.viewItem);
                if (!s) {
                    return
                }
                const a = t.model.key;
                const c = typeof t.model.value == "function" ? t.model.value(o.viewItem) : t.model.value;
                if (c === null) {
                    return
                }
                if (og(t.view, o.viewItem)) {
                    s.match.name = true
                } else {
                    delete s.match.name
                }
                if (!r.consumable.test(o.viewItem, s.match)) {
                    return
                }
                if (!o.modelRange) {
                    o = Object.assign(o, r.convertChildren(o.viewItem, o.modelCursor))
                }
                const l = rg(o.modelRange, {key: a, value: c}, e, r);
                if (l) {
                    r.consumable.consume(o.viewItem, s.match)
                }
            }
        }

        function og(t, e) {
            const i = typeof t == "function" ? t(e) : t;
            if (typeof i == "object" && !Xf(i)) {
                return false
            }
            return !i.classes && !i.attributes && !i.styles
        }

        function rg(t, e, i, n) {
            let o = false;
            for (const r of Array.from(t.getItems({shallow: i}))) {
                if (n.schema.checkAttribute(r, e.key)) {
                    n.writer.setAttribute(e.key, e.value, r);
                    o = true
                }
            }
            return o
        }

        function sg(t) {
            const e = t.model;
            t.model = (t, i) => {
                const n = typeof e == "string" ? e : e(t);
                return i.createElement("$marker", {"data-name": n})
            }
        }

        class ag {
            constructor(t, e) {
                this.model = t;
                this.view = new Bh(e);
                this.mapper = new Gh;
                this.downcastDispatcher = new Yh({mapper: this.mapper});
                const i = this.model.document;
                const n = i.selection;
                const o = this.model.markers;
                this.listenTo(this.model, "_beforeChanges", () => {
                    this.view._disableRendering(true)
                }, {priority: "highest"});
                this.listenTo(this.model, "_afterChanges", () => {
                    this.view._disableRendering(false)
                }, {priority: "lowest"});
                this.listenTo(i, "change", () => {
                    this.view.change(t => {
                        this.downcastDispatcher.convertChanges(i.differ, o, t);
                        this.downcastDispatcher.convertSelection(n, o, t)
                    })
                }, {priority: "low"});
                this.listenTo(this.view.document, "selectionChange", Gf(this.model, this.mapper));
                this.downcastDispatcher.on("insert:$text", _f(), {priority: "lowest"});
                this.downcastDispatcher.on("remove", vf(), {priority: "low"});
                this.downcastDispatcher.on("selection", Af(), {priority: "low"});
                this.downcastDispatcher.on("selection", xf(), {priority: "low"});
                this.downcastDispatcher.on("selection", Cf(), {priority: "low"});
                this.view.document.roots.bindTo(this.model.document.roots).using(t => {
                    if (t.rootName == "$graveyard") {
                        return null
                    }
                    const e = new cl(this.view.document, t.name);
                    e.rootName = t.rootName;
                    this.mapper.bindElements(t, e);
                    return e
                })
            }

            destroy() {
                this.view.destroy();
                this.stopListening()
            }
        }

        vs(ag, Jc);

        class cg {
            constructor() {
                this._commands = new Map
            }

            add(t, e) {
                this._commands.set(t, e)
            }

            get(t) {
                return this._commands.get(t)
            }

            execute(t, ...e) {
                const i = this.get(t);
                if (!i) {
                    throw new ss["b"]("commandcollection-command-not-found: Command does not exist.", this, {commandName: t})
                }
                i.execute(...e)
            }

            * names() {
                yield* this._commands.keys()
            }

            * commands() {
                yield* this._commands.values()
            }

            [Symbol.iterator]() {
                return this._commands[Symbol.iterator]()
            }

            destroy() {
                for (const t of this.commands()) {
                    t.destroy()
                }
            }
        }

        class lg {
            constructor() {
                this._consumables = new Map
            }

            add(t, e) {
                let i;
                if (t.is("text") || t.is("documentFragment")) {
                    this._consumables.set(t, true);
                    return
                }
                if (!this._consumables.has(t)) {
                    i = new dg(t);
                    this._consumables.set(t, i)
                } else {
                    i = this._consumables.get(t)
                }
                i.add(e)
            }

            test(t, e) {
                const i = this._consumables.get(t);
                if (i === undefined) {
                    return null
                }
                if (t.is("text") || t.is("documentFragment")) {
                    return i
                }
                return i.test(e)
            }

            consume(t, e) {
                if (this.test(t, e)) {
                    if (t.is("text") || t.is("documentFragment")) {
                        this._consumables.set(t, false)
                    } else {
                        this._consumables.get(t).consume(e)
                    }
                    return true
                }
                return false
            }

            revert(t, e) {
                const i = this._consumables.get(t);
                if (i !== undefined) {
                    if (t.is("text") || t.is("documentFragment")) {
                        this._consumables.set(t, true)
                    } else {
                        i.revert(e)
                    }
                }
            }

            static consumablesFromElement(t) {
                const e = {element: t, name: true, attributes: [], classes: [], styles: []};
                const i = t.getAttributeKeys();
                for (const t of i) {
                    if (t == "style" || t == "class") {
                        continue
                    }
                    e.attributes.push(t)
                }
                const n = t.getClassNames();
                for (const t of n) {
                    e.classes.push(t)
                }
                const o = t.getStyleNames();
                for (const t of o) {
                    e.styles.push(t)
                }
                return e
            }

            static createFrom(t, e) {
                if (!e) {
                    e = new lg(t)
                }
                if (t.is("text")) {
                    e.add(t);
                    return e
                }
                if (t.is("element")) {
                    e.add(t, lg.consumablesFromElement(t))
                }
                if (t.is("documentFragment")) {
                    e.add(t)
                }
                for (const i of t.getChildren()) {
                    e = lg.createFrom(i, e)
                }
                return e
            }
        }

        class dg {
            constructor(t) {
                this.element = t;
                this._canConsumeName = null;
                this._consumables = {attributes: new Map, styles: new Map, classes: new Map}
            }

            add(t) {
                if (t.name) {
                    this._canConsumeName = true
                }
                for (const e in this._consumables) {
                    if (e in t) {
                        this._add(e, t[e])
                    }
                }
            }

            test(t) {
                if (t.name && !this._canConsumeName) {
                    return this._canConsumeName
                }
                for (const e in this._consumables) {
                    if (e in t) {
                        const i = this._test(e, t[e]);
                        if (i !== true) {
                            return i
                        }
                    }
                }
                return true
            }

            consume(t) {
                if (t.name) {
                    this._canConsumeName = false
                }
                for (const e in this._consumables) {
                    if (e in t) {
                        this._consume(e, t[e])
                    }
                }
            }

            revert(t) {
                if (t.name) {
                    this._canConsumeName = true
                }
                for (const e in this._consumables) {
                    if (e in t) {
                        this._revert(e, t[e])
                    }
                }
            }

            _add(t, e) {
                const i = Je(e) ? e : [e];
                const n = this._consumables[t];
                for (const e of i) {
                    if (t === "attributes" && (e === "class" || e === "style")) {
                        throw new ss["b"]("viewconsumable-invalid-attribute: Classes and styles should be handled separately.", this)
                    }
                    n.set(e, true);
                    if (t === "styles") {
                        for (const t of this.element.document.stylesProcessor.getRelatedStyles(e)) {
                            n.set(t, true)
                        }
                    }
                }
            }

            _test(t, e) {
                const i = Je(e) ? e : [e];
                const n = this._consumables[t];
                for (const e of i) {
                    if (t === "attributes" && (e === "class" || e === "style")) {
                        const t = e == "class" ? "classes" : "styles";
                        const i = this._test(t, [...this._consumables[t].keys()]);
                        if (i !== true) {
                            return i
                        }
                    } else {
                        const t = n.get(e);
                        if (t === undefined) {
                            return null
                        }
                        if (!t) {
                            return false
                        }
                    }
                }
                return true
            }

            _consume(t, e) {
                const i = Je(e) ? e : [e];
                const n = this._consumables[t];
                for (const e of i) {
                    if (t === "attributes" && (e === "class" || e === "style")) {
                        const t = e == "class" ? "classes" : "styles";
                        this._consume(t, [...this._consumables[t].keys()])
                    } else {
                        n.set(e, false);
                        if (t == "styles") {
                            for (const t of this.element.document.stylesProcessor.getRelatedStyles(e)) {
                                n.set(t, false)
                            }
                        }
                    }
                }
            }

            _revert(t, e) {
                const i = Je(e) ? e : [e];
                const n = this._consumables[t];
                for (const e of i) {
                    if (t === "attributes" && (e === "class" || e === "style")) {
                        const t = e == "class" ? "classes" : "styles";
                        this._revert(t, [...this._consumables[t].keys()])
                    } else {
                        const t = n.get(e);
                        if (t === false) {
                            n.set(e, true)
                        }
                    }
                }
            }
        }

        class ug {
            constructor() {
                this._sourceDefinitions = {};
                this._attributeProperties = {};
                this.decorate("checkChild");
                this.decorate("checkAttribute");
                this.on("checkAttribute", (t, e) => {
                    e[0] = new hg(e[0])
                }, {priority: "highest"});
                this.on("checkChild", (t, e) => {
                    e[0] = new hg(e[0]);
                    e[1] = this.getDefinition(e[1])
                }, {priority: "highest"})
            }

            register(t, e) {
                if (this._sourceDefinitions[t]) {
                    throw new ss["b"]("schema-cannot-register-item-twice: A single item cannot be registered twice in the schema.", this, {itemName: t})
                }
                this._sourceDefinitions[t] = [Object.assign({}, e)];
                this._clearCache()
            }

            extend(t, e) {
                if (!this._sourceDefinitions[t]) {
                    throw new ss["b"]("schema-cannot-extend-missing-item: Cannot extend an item which was not registered yet.", this, {itemName: t})
                }
                this._sourceDefinitions[t].push(Object.assign({}, e));
                this._clearCache()
            }

            getDefinitions() {
                if (!this._compiledDefinitions) {
                    this._compile()
                }
                return this._compiledDefinitions
            }

            getDefinition(t) {
                let e;
                if (typeof t == "string") {
                    e = t
                } else if (t.is && (t.is("text") || t.is("textProxy"))) {
                    e = "$text"
                } else {
                    e = t.name
                }
                return this.getDefinitions()[e]
            }

            isRegistered(t) {
                return !!this.getDefinition(t)
            }

            isBlock(t) {
                const e = this.getDefinition(t);
                return !!(e && e.isBlock)
            }

            isLimit(t) {
                const e = this.getDefinition(t);
                if (!e) {
                    return false
                }
                return !!(e.isLimit || e.isObject)
            }

            isObject(t) {
                const e = this.getDefinition(t);
                return !!(e && e.isObject)
            }

            isInline(t) {
                const e = this.getDefinition(t);
                return !!(e && e.isInline)
            }

            checkChild(t, e) {
                if (!e) {
                    return false
                }
                return this._checkContextMatch(e, t)
            }

            checkAttribute(t, e) {
                const i = this.getDefinition(t.last);
                if (!i) {
                    return false
                }
                return i.allowAttributes.includes(e)
            }

            checkMerge(t, e = null) {
                if (t instanceof Uh) {
                    const e = t.nodeBefore;
                    const i = t.nodeAfter;
                    if (!(e instanceof jh)) {
                        throw new ss["b"]("schema-check-merge-no-element-before: The node before the merge position must be an element.", this)
                    }
                    if (!(i instanceof jh)) {
                        throw new ss["b"]("schema-check-merge-no-element-after: The node after the merge position must be an element.", this)
                    }
                    return this.checkMerge(e, i)
                }
                for (const i of e.getChildren()) {
                    if (!this.checkChild(t, i)) {
                        return false
                    }
                }
                return true
            }

            addChildCheck(t) {
                this.on("checkChild", (e, [i, n]) => {
                    if (!n) {
                        return
                    }
                    const o = t(i, n);
                    if (typeof o == "boolean") {
                        e.stop();
                        e.return = o
                    }
                }, {priority: "high"})
            }

            addAttributeCheck(t) {
                this.on("checkAttribute", (e, [i, n]) => {
                    const o = t(i, n);
                    if (typeof o == "boolean") {
                        e.stop();
                        e.return = o
                    }
                }, {priority: "high"})
            }

            setAttributeProperties(t, e) {
                this._attributeProperties[t] = Object.assign(this.getAttributeProperties(t), e)
            }

            getAttributeProperties(t) {
                return this._attributeProperties[t] || {}
            }

            getLimitElement(t) {
                let e;
                if (t instanceof Uh) {
                    e = t.parent
                } else {
                    const i = t instanceof $h ? [t] : Array.from(t.getRanges());
                    e = i.reduce((t, e) => {
                        const i = e.getCommonAncestor();
                        if (!t) {
                            return i
                        }
                        return t.getCommonAncestor(i, {includeSelf: true})
                    }, null)
                }
                while (!this.isLimit(e)) {
                    if (e.parent) {
                        e = e.parent
                    } else {
                        break
                    }
                }
                return e
            }

            checkAttributeInSelection(t, e) {
                if (t.isCollapsed) {
                    const i = t.getFirstPosition();
                    const n = [...i.getAncestors(), new Lh("", t.getAttributes())];
                    return this.checkAttribute(n, e)
                } else {
                    const i = t.getRanges();
                    for (const t of i) {
                        for (const i of t) {
                            if (this.checkAttribute(i.item, e)) {
                                return true
                            }
                        }
                    }
                }
                return false
            }

            * getValidRanges(t, e) {
                t = Pg(t);
                for (const i of t) {
                    yield* this._getValidRangesForRange(i, e)
                }
            }

            getNearestSelectionRange(t, e = "both") {
                if (this.checkChild(t, "$text")) {
                    return new $h(t)
                }
                let i, n;
                const o = t.getAncestors().reverse().find(t => this.isLimit(t)) || t.root;
                if (e == "both" || e == "backward") {
                    i = new Wh({boundaries: $h._createIn(o), startPosition: t, direction: "backward"})
                }
                if (e == "both" || e == "forward") {
                    n = new Wh({boundaries: $h._createIn(o), startPosition: t})
                }
                for (const t of Tg(i, n)) {
                    const e = t.walker == i ? "elementEnd" : "elementStart";
                    const n = t.value;
                    if (n.type == e && this.isObject(n.item)) {
                        return $h._createOn(n.item)
                    }
                    if (this.checkChild(n.nextPosition, "$text")) {
                        return new $h(n.nextPosition)
                    }
                }
                return null
            }

            findAllowedParent(t, e) {
                let i = t.parent;
                while (i) {
                    if (this.checkChild(i, e)) {
                        return i
                    }
                    if (this.isLimit(i)) {
                        return null
                    }
                    i = i.parent
                }
                return null
            }

            removeDisallowedAttributes(t, e) {
                for (const i of t) {
                    if (i.is("text")) {
                        Sg(this, i, e)
                    } else {
                        const t = $h._createIn(i);
                        const n = t.getPositions();
                        for (const t of n) {
                            const i = t.nodeBefore || t.parent;
                            Sg(this, i, e)
                        }
                    }
                }
            }

            createContext(t) {
                return new hg(t)
            }

            _clearCache() {
                this._compiledDefinitions = null
            }

            _compile() {
                const t = {};
                const e = this._sourceDefinitions;
                const i = Object.keys(e);
                for (const n of i) {
                    t[n] = fg(e[n], n)
                }
                for (const e of i) {
                    gg(t, e)
                }
                for (const e of i) {
                    mg(t, e)
                }
                for (const e of i) {
                    pg(t, e);
                    bg(t, e)
                }
                for (const e of i) {
                    wg(t, e);
                    kg(t, e)
                }
                this._compiledDefinitions = t
            }

            _checkContextMatch(t, e, i = e.length - 1) {
                const n = e.getItem(i);
                if (t.allowIn.includes(n.name)) {
                    if (i == 0) {
                        return true
                    } else {
                        const t = this.getDefinition(n);
                        return this._checkContextMatch(t, e, i - 1)
                    }
                } else {
                    return false
                }
            }

            * _getValidRangesForRange(t, e) {
                let i = t.start;
                let n = t.start;
                for (const o of t.getItems({shallow: true})) {
                    if (o.is("element")) {
                        yield* this._getValidRangesForRange($h._createIn(o), e)
                    }
                    if (!this.checkAttribute(o, e)) {
                        if (!i.isEqual(n)) {
                            yield new $h(i, n)
                        }
                        i = Uh._createAfter(o)
                    }
                    n = Uh._createAfter(o)
                }
                if (!i.isEqual(n)) {
                    yield new $h(i, n)
                }
            }
        }

        vs(ug, Jc);

        class hg {
            constructor(t) {
                if (t instanceof hg) {
                    return t
                }
                if (typeof t == "string") {
                    t = [t]
                } else if (!Array.isArray(t)) {
                    t = t.getAncestors({includeSelf: true})
                }
                if (t[0] && typeof t[0] != "string" && t[0].is("documentFragment")) {
                    t.shift()
                }
                this._items = t.map(Ag)
            }

            get length() {
                return this._items.length
            }

            get last() {
                return this._items[this._items.length - 1]
            }

            [Symbol.iterator]() {
                return this._items[Symbol.iterator]()
            }

            push(t) {
                const e = new hg([t]);
                e._items = [...this._items, ...e._items];
                return e
            }

            getItem(t) {
                return this._items[t]
            }

            * getNames() {
                yield* this._items.map(t => t.name)
            }

            endsWith(t) {
                return Array.from(this.getNames()).join(" ").endsWith(t)
            }

            startsWith(t) {
                return Array.from(this.getNames()).join(" ").startsWith(t)
            }
        }

        function fg(t, e) {
            const i = {
                name: e,
                allowIn: [],
                allowContentOf: [],
                allowWhere: [],
                allowAttributes: [],
                allowAttributesOf: [],
                inheritTypesFrom: []
            };
            _g(t, i);
            vg(t, i, "allowIn");
            vg(t, i, "allowContentOf");
            vg(t, i, "allowWhere");
            vg(t, i, "allowAttributes");
            vg(t, i, "allowAttributesOf");
            vg(t, i, "inheritTypesFrom");
            yg(t, i);
            return i
        }

        function gg(t, e) {
            for (const i of t[e].allowContentOf) {
                if (t[i]) {
                    const n = xg(t, i);
                    n.forEach(t => {
                        t.allowIn.push(e)
                    })
                }
            }
            delete t[e].allowContentOf
        }

        function mg(t, e) {
            for (const i of t[e].allowWhere) {
                const n = t[i];
                if (n) {
                    const i = n.allowIn;
                    t[e].allowIn.push(...i)
                }
            }
            delete t[e].allowWhere
        }

        function pg(t, e) {
            for (const i of t[e].allowAttributesOf) {
                const n = t[i];
                if (n) {
                    const i = n.allowAttributes;
                    t[e].allowAttributes.push(...i)
                }
            }
            delete t[e].allowAttributesOf
        }

        function bg(t, e) {
            const i = t[e];
            for (const e of i.inheritTypesFrom) {
                const n = t[e];
                if (n) {
                    const t = Object.keys(n).filter(t => t.startsWith("is"));
                    for (const e of t) {
                        if (!(e in i)) {
                            i[e] = n[e]
                        }
                    }
                }
            }
            delete i.inheritTypesFrom
        }

        function wg(t, e) {
            const i = t[e];
            const n = i.allowIn.filter(e => t[e]);
            i.allowIn = Array.from(new Set(n))
        }

        function kg(t, e) {
            const i = t[e];
            i.allowAttributes = Array.from(new Set(i.allowAttributes))
        }

        function _g(t, e) {
            for (const i of t) {
                const t = Object.keys(i).filter(t => t.startsWith("is"));
                for (const n of t) {
                    e[n] = i[n]
                }
            }
        }

        function vg(t, e, i) {
            for (const n of t) {
                if (typeof n[i] == "string") {
                    e[i].push(n[i])
                } else if (Array.isArray(n[i])) {
                    e[i].push(...n[i])
                }
            }
        }

        function yg(t, e) {
            for (const i of t) {
                const t = i.inheritAllFrom;
                if (t) {
                    e.allowContentOf.push(t);
                    e.allowWhere.push(t);
                    e.allowAttributesOf.push(t);
                    e.inheritTypesFrom.push(t)
                }
            }
        }

        function xg(t, e) {
            const i = t[e];
            return Cg(t).filter(t => t.allowIn.includes(i.name))
        }

        function Cg(t) {
            return Object.keys(t).map(e => t[e])
        }

        function Ag(t) {
            if (typeof t == "string") {
                return {
                    name: t, * getAttributeKeys() {
                    }, getAttribute() {
                    }
                }
            } else {
                return {
                    name: t.is("element") ? t.name : "$text", * getAttributeKeys() {
                        yield* t.getAttributeKeys()
                    }, getAttribute(e) {
                        return t.getAttribute(e)
                    }
                }
            }
        }

        function* Tg(t, e) {
            let i = false;
            while (!i) {
                i = true;
                if (t) {
                    const e = t.next();
                    if (!e.done) {
                        i = false;
                        yield{walker: t, value: e.value}
                    }
                }
                if (e) {
                    const t = e.next();
                    if (!t.done) {
                        i = false;
                        yield{walker: e, value: t.value}
                    }
                }
            }
        }

        function* Pg(t) {
            for (const e of t) {
                yield* e.getMinimalFlatRanges()
            }
        }

        function Sg(t, e, i) {
            for (const n of e.getAttributeKeys()) {
                if (!t.checkAttribute(e, n)) {
                    i.removeAttribute(n, e)
                }
            }
        }

        class Eg {
            constructor(t = {}) {
                this._splitParts = new Map;
                this._modelCursor = null;
                this.conversionApi = Object.assign({}, t);
                this.conversionApi.convertItem = this._convertItem.bind(this);
                this.conversionApi.convertChildren = this._convertChildren.bind(this);
                this.conversionApi.splitToAllowedParent = this._splitToAllowedParent.bind(this);
                this.conversionApi.getSplitParts = this._getSplitParts.bind(this)
            }

            convert(t, e, i = ["$root"]) {
                this.fire("viewCleanup", t);
                this._modelCursor = Og(i, e);
                this.conversionApi.writer = e;
                this.conversionApi.consumable = lg.createFrom(t);
                this.conversionApi.store = {};
                const {modelRange: n} = this._convertItem(t, this._modelCursor);
                const o = e.createDocumentFragment();
                if (n) {
                    this._removeEmptyElements();
                    for (const t of Array.from(this._modelCursor.parent.getChildren())) {
                        e.append(t, o)
                    }
                    o.markers = Rg(o, e)
                }
                this._modelCursor = null;
                this._splitParts.clear();
                this.conversionApi.writer = null;
                this.conversionApi.store = null;
                return o
            }

            _convertItem(t, e) {
                const i = Object.assign({viewItem: t, modelCursor: e, modelRange: null});
                if (t.is("element")) {
                    this.fire("element:" + t.name, i, this.conversionApi)
                } else if (t.is("text")) {
                    this.fire("text", i, this.conversionApi)
                } else {
                    this.fire("documentFragment", i, this.conversionApi)
                }
                if (i.modelRange && !(i.modelRange instanceof $h)) {
                    throw new ss["b"]("view-conversion-dispatcher-incorrect-result: Incorrect conversion result was dropped.", this)
                }
                return {modelRange: i.modelRange, modelCursor: i.modelCursor}
            }

            _convertChildren(t, e) {
                const i = new $h(e);
                let n = e;
                for (const e of Array.from(t.getChildren())) {
                    const t = this._convertItem(e, n);
                    if (t.modelRange instanceof $h) {
                        i.end = t.modelRange.end;
                        n = t.modelCursor
                    }
                }
                return {modelRange: i, modelCursor: n}
            }

            _splitToAllowedParent(t, e) {
                const i = this.conversionApi.schema.findAllowedParent(e, t);
                if (!i) {
                    return null
                }
                if (i === e.parent) {
                    return {position: e}
                }
                if (this._modelCursor.parent.getAncestors().includes(i)) {
                    return null
                }
                const n = this.conversionApi.writer.split(e, i);
                const o = [];
                for (const t of n.range.getWalker()) {
                    if (t.type == "elementEnd") {
                        o.push(t.item)
                    } else {
                        const e = o.pop();
                        const i = t.item;
                        this._registerSplitPair(e, i)
                    }
                }
                return {position: n.position, cursorParent: n.range.end.parent}
            }

            _registerSplitPair(t, e) {
                if (!this._splitParts.has(t)) {
                    this._splitParts.set(t, [t])
                }
                const i = this._splitParts.get(t);
                this._splitParts.set(e, i);
                i.push(e)
            }

            _getSplitParts(t) {
                let e;
                if (!this._splitParts.has(t)) {
                    e = [t]
                } else {
                    e = this._splitParts.get(t)
                }
                return e
            }

            _removeEmptyElements() {
                let t = false;
                for (const e of this._splitParts.keys()) {
                    if (e.isEmpty) {
                        this.conversionApi.writer.remove(e);
                        this._splitParts.delete(e);
                        t = true
                    }
                }
                if (t) {
                    this._removeEmptyElements()
                }
            }
        }

        vs(Eg, ds);

        function Rg(t, e) {
            const i = new Set;
            const n = new Map;
            const o = $h._createIn(t).getItems();
            for (const t of o) {
                if (t.name == "$marker") {
                    i.add(t)
                }
            }
            for (const t of i) {
                const i = t.getAttribute("data-name");
                const o = e.createPositionBefore(t);
                if (!n.has(i)) {
                    n.set(i, new $h(o.clone()))
                } else {
                    n.get(i).end = o.clone()
                }
                e.remove(t)
            }
            return n
        }

        function Og(t, e) {
            let i;
            for (const n of new hg(t)) {
                const t = {};
                for (const e of n.getAttributeKeys()) {
                    t[e] = n.getAttribute(e)
                }
                const o = e.createElement(n.name, t);
                if (i) {
                    e.append(o, i)
                }
                i = Uh._createAt(o, 0)
            }
            return i
        }

        class Ig {
            constructor(t, e) {
                this.model = t;
                this.stylesProcessor = e;
                this.processor;
                this.mapper = new Gh;
                this.downcastDispatcher = new Yh({mapper: this.mapper});
                this.downcastDispatcher.on("insert:$text", _f(), {priority: "lowest"});
                this.upcastDispatcher = new Eg({schema: t.schema});
                this.viewDocument = new pl(e);
                this._viewWriter = new $l(this.viewDocument);
                this.upcastDispatcher.on("text", $f(), {priority: "lowest"});
                this.upcastDispatcher.on("element", Uf(), {priority: "lowest"});
                this.upcastDispatcher.on("documentFragment", Uf(), {priority: "lowest"});
                this.decorate("init");
                this.on("init", () => {
                    this.fire("ready")
                }, {priority: "lowest"})
            }

            get(t) {
                const {rootName: e = "main", trim: i = "empty"} = t || {};
                if (!this._checkIfRootsExists([e])) {
                    throw new ss["b"]("datacontroller-get-non-existent-root: Attempting to get data from a non-existing root.", this)
                }
                const n = this.model.document.getRoot(e);
                if (i === "empty" && !this.model.hasContent(n, {ignoreWhitespaces: true})) {
                    return ""
                }
                return this.stringify(n)
            }

            stringify(t) {
                const e = this.toView(t);
                return this.processor.toData(e)
            }

            toView(t) {
                const e = this.viewDocument;
                const i = this._viewWriter;
                this.mapper.clearBindings();
                const n = $h._createIn(t);
                const o = new ql(e);
                this.mapper.bindElements(t, o);
                this.downcastDispatcher.convertInsert(n, i);
                if (!t.is("documentFragment")) {
                    const e = Vg(t);
                    for (const [t, n] of e) {
                        this.downcastDispatcher.convertMarkerAdd(t, n, i)
                    }
                }
                return o
            }

            init(t) {
                if (this.model.document.version) {
                    throw new ss["b"]("datacontroller-init-document-not-empty: Trying to set initial data to not empty document.", this)
                }
                let e = {};
                if (typeof t === "string") {
                    e.main = t
                } else {
                    e = t
                }
                if (!this._checkIfRootsExists(Object.keys(e))) {
                    throw new ss["b"]("datacontroller-init-non-existent-root: Attempting to init data on a non-existing root.", this)
                }
                this.model.enqueueChange("transparent", t => {
                    for (const i of Object.keys(e)) {
                        const n = this.model.document.getRoot(i);
                        t.insert(this.parse(e[i], n), n, 0)
                    }
                });
                return Promise.resolve()
            }

            set(t) {
                let e = {};
                if (typeof t === "string") {
                    e.main = t
                } else {
                    e = t
                }
                if (!this._checkIfRootsExists(Object.keys(e))) {
                    throw new ss["b"]("datacontroller-set-non-existent-root: Attempting to set data on a non-existing root.", this)
                }
                this.model.enqueueChange("transparent", t => {
                    t.setSelection(null);
                    t.removeSelectionAttribute(this.model.document.selection.getAttributeKeys());
                    for (const i of Object.keys(e)) {
                        const n = this.model.document.getRoot(i);
                        t.remove(t.createRangeIn(n));
                        t.insert(this.parse(e[i], n), n, 0)
                    }
                })
            }

            parse(t, e = "$root") {
                const i = this.processor.toView(t);
                return this.toModel(i, e)
            }

            toModel(t, e = "$root") {
                return this.model.change(i => this.upcastDispatcher.convert(t, i, e))
            }

            addStyleProcessorRules(t) {
                t(this.stylesProcessor)
            }

            destroy() {
                this.stopListening()
            }

            _checkIfRootsExists(t) {
                for (const e of t) {
                    if (!this.model.document.getRootNames().includes(e)) {
                        return false
                    }
                }
                return true
            }
        }

        vs(Ig, Jc);

        function Vg(t) {
            const e = [];
            const i = t.root.document;
            if (!i) {
                return []
            }
            const n = $h._createIn(t);
            for (const t of i.model.markers) {
                const i = n.getIntersection(t.getRange());
                if (i) {
                    e.push([t.name, i])
                }
            }
            return e
        }

        class Ng {
            constructor(t, e) {
                this._helpers = new Map;
                this._downcast = Array.isArray(t) ? t : [t];
                this._createConversionHelpers({name: "downcast", dispatchers: this._downcast, isDowncast: true});
                this._upcast = Array.isArray(e) ? e : [e];
                this._createConversionHelpers({name: "upcast", dispatchers: this._upcast, isDowncast: false})
            }

            addAlias(t, e) {
                const i = this._downcast.includes(e);
                const n = this._upcast.includes(e);
                if (!n && !i) {
                    throw new ss["b"]("conversion-add-alias-dispatcher-not-registered: " + "Trying to register and alias for a dispatcher that nas not been registered.", this)
                }
                this._createConversionHelpers({name: t, dispatchers: [e], isDowncast: i})
            }

            for(t) {
                if (!this._helpers.has(t)) {
                    throw new ss["b"]("conversion-for-unknown-group: Trying to add a converter to an unknown dispatchers group.", this)
                }
                return this._helpers.get(t)
            }

            elementToElement(t) {
                this.for("downcast").elementToElement(t);
                for (const {model: e, view: i} of Mg(t)) {
                    this.for("upcast").elementToElement({model: e, view: i, converterPriority: t.converterPriority})
                }
            }

            attributeToElement(t) {
                this.for("downcast").attributeToElement(t);
                for (const {model: e, view: i} of Mg(t)) {
                    this.for("upcast").elementToAttribute({view: i, model: e, converterPriority: t.converterPriority})
                }
            }

            attributeToAttribute(t) {
                this.for("downcast").attributeToAttribute(t);
                for (const {model: e, view: i} of Mg(t)) {
                    this.for("upcast").attributeToAttribute({view: i, model: e})
                }
            }

            _createConversionHelpers({name: t, dispatchers: e, isDowncast: i}) {
                if (this._helpers.has(t)) {
                    throw new ss["b"]("conversion-group-exists: Trying to register a group name that has already been registered.", this)
                }
                const n = i ? new kf(e) : new qf(e);
                this._helpers.set(t, n)
            }
        }

        function* Mg(t) {
            if (t.model.values) {
                for (const e of t.model.values) {
                    const i = {key: t.model.key, value: e};
                    const n = t.view[e];
                    const o = t.upcastAlso ? t.upcastAlso[e] : undefined;
                    yield* Bg(i, n, o)
                }
            } else {
                yield* Bg(t.model, t.view, t.upcastAlso)
            }
        }

        function* Bg(t, e, i) {
            yield{model: t, view: e};
            if (i) {
                i = Array.isArray(i) ? i : [i];
                for (const e of i) {
                    yield{model: t, view: e}
                }
            }
        }

        class zg {
            constructor(t = "default") {
                this.operations = [];
                this.type = t
            }

            get baseVersion() {
                for (const t of this.operations) {
                    if (t.baseVersion !== null) {
                        return t.baseVersion
                    }
                }
                return null
            }

            addOperation(t) {
                t.batch = this;
                this.operations.push(t);
                return t
            }
        }

        class Lg {
            constructor(t) {
                this.baseVersion = t;
                this.isDocumentOperation = this.baseVersion !== null;
                this.batch = null
            }

            _validate() {
            }

            toJSON() {
                const t = Object.assign({}, this);
                t.__className = this.constructor.className;
                delete t.batch;
                delete t.isDocumentOperation;
                return t
            }

            static get className() {
                return "Operation"
            }

            static fromJSON(t) {
                return new this(t.baseVersion)
            }
        }

        class Fg {
            constructor(t) {
                this.markers = new Map;
                this._children = new Dh;
                if (t) {
                    this._insertChild(0, t)
                }
            }

            [Symbol.iterator]() {
                return this.getChildren()
            }

            get childCount() {
                return this._children.length
            }

            get maxOffset() {
                return this._children.maxOffset
            }

            get isEmpty() {
                return this.childCount === 0
            }

            get root() {
                return this
            }

            get parent() {
                return null
            }

            is(t) {
                return t == "documentFragment" || t == "model:documentFragment"
            }

            getChild(t) {
                return this._children.getNode(t)
            }

            getChildren() {
                return this._children[Symbol.iterator]()
            }

            getChildIndex(t) {
                return this._children.getNodeIndex(t)
            }

            getChildStartOffset(t) {
                return this._children.getNodeStartOffset(t)
            }

            getPath() {
                return []
            }

            getNodeByPath(t) {
                let e = this;
                for (const i of t) {
                    e = e.getChild(e.offsetToIndex(i))
                }
                return e
            }

            offsetToIndex(t) {
                return this._children.offsetToIndex(t)
            }

            toJSON() {
                const t = [];
                for (const e of this._children) {
                    t.push(e.toJSON())
                }
                return t
            }

            static fromJSON(t) {
                const e = [];
                for (const i of t) {
                    if (i.name) {
                        e.push(jh.fromJSON(i))
                    } else {
                        e.push(Lh.fromJSON(i))
                    }
                }
                return new Fg(e)
            }

            _appendChild(t) {
                this._insertChild(this.childCount, t)
            }

            _insertChild(t, e) {
                const i = Dg(e);
                for (const t of i) {
                    if (t.parent !== null) {
                        t._remove()
                    }
                    t.parent = this
                }
                this._children._insertNodes(t, i)
            }

            _removeChildren(t, e = 1) {
                const i = this._children._removeNodes(t, e);
                for (const t of i) {
                    t.parent = null
                }
                return i
            }
        }

        function Dg(t) {
            if (typeof t == "string") {
                return [new Lh(t)]
            }
            if (!js(t)) {
                t = [t]
            }
            return Array.from(t).map(t => {
                if (typeof t == "string") {
                    return new Lh(t)
                }
                if (t instanceof Fh) {
                    return new Lh(t.data, t.getAttributes())
                }
                return t
            })
        }

        function jg(t, e) {
            e = Ug(e);
            const i = e.reduce((t, e) => t + e.offsetSize, 0);
            const n = t.parent;
            Gg(t);
            const o = t.index;
            n._insertChild(o, e);
            $g(n, o + e.length);
            $g(n, o);
            return new $h(t, t.getShiftedBy(i))
        }

        function Hg(t) {
            if (!t.isFlat) {
                throw new ss["b"]("operation-utils-remove-range-not-flat: " + "Trying to remove a range which starts and ends in different element.", this)
            }
            const e = t.start.parent;
            Gg(t.start);
            Gg(t.end);
            const i = e._removeChildren(t.start.index, t.end.index - t.start.index);
            $g(e, t.start.index);
            return i
        }

        function Wg(t, e) {
            if (!t.isFlat) {
                throw new ss["b"]("operation-utils-move-range-not-flat: " + "Trying to move a range which starts and ends in different element.", this)
            }
            const i = Hg(t);
            e = e._getTransformedByDeletion(t.start, t.end.offset - t.start.offset);
            return jg(e, i)
        }

        function qg(t, e, i) {
            Gg(t.start);
            Gg(t.end);
            for (const n of t.getItems({shallow: true})) {
                const t = n.is("textProxy") ? n.textNode : n;
                if (i !== null) {
                    t._setAttribute(e, i)
                } else {
                    t._removeAttribute(e)
                }
                $g(t.parent, t.index)
            }
            $g(t.end.parent, t.end.index)
        }

        function Ug(t) {
            const e = [];
            if (!(t instanceof Array)) {
                t = [t]
            }
            for (let i = 0; i < t.length; i++) {
                if (typeof t[i] == "string") {
                    e.push(new Lh(t[i]))
                } else if (t[i] instanceof Fh) {
                    e.push(new Lh(t[i].data, t[i].getAttributes()))
                } else if (t[i] instanceof Fg || t[i] instanceof Dh) {
                    for (const n of t[i]) {
                        e.push(n)
                    }
                } else if (t[i] instanceof zh) {
                    e.push(t[i])
                }
            }
            for (let t = 1; t < e.length; t++) {
                const i = e[t];
                const n = e[t - 1];
                if (i instanceof Lh && n instanceof Lh && Kg(i, n)) {
                    e.splice(t - 1, 2, new Lh(n.data + i.data, n.getAttributes()));
                    t--
                }
            }
            return e
        }

        function $g(t, e) {
            const i = t.getChild(e - 1);
            const n = t.getChild(e);
            if (i && n && i.is("text") && n.is("text") && Kg(i, n)) {
                const o = new Lh(i.data + n.data, i.getAttributes());
                t._removeChildren(e - 1, 2);
                t._insertChild(e - 1, o)
            }
        }

        function Gg(t) {
            const e = t.textNode;
            const i = t.parent;
            if (e) {
                const n = t.offset - e.startOffset;
                const o = e.index;
                i._removeChildren(o, 1);
                const r = new Lh(e.data.substr(0, n), e.getAttributes());
                const s = new Lh(e.data.substr(n), e.getAttributes());
                i._insertChild(o, [r, s])
            }
        }

        function Kg(t, e) {
            const i = t.getAttributes();
            const n = e.getAttributes();
            for (const t of i) {
                if (t[1] !== e.getAttribute(t[0])) {
                    return false
                }
                n.next()
            }
            return n.next().done
        }

        function Jg(t, e) {
            return qu(t, e)
        }

        var Yg = Jg;

        class Qg extends Lg {
            constructor(t, e, i, n, o) {
                super(o);
                this.range = t.clone();
                this.key = e;
                this.oldValue = i === undefined ? null : i;
                this.newValue = n === undefined ? null : n
            }

            get type() {
                if (this.oldValue === null) {
                    return "addAttribute"
                } else if (this.newValue === null) {
                    return "removeAttribute"
                } else {
                    return "changeAttribute"
                }
            }

            clone() {
                return new Qg(this.range, this.key, this.oldValue, this.newValue, this.baseVersion)
            }

            getReversed() {
                return new Qg(this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1)
            }

            toJSON() {
                const t = super.toJSON();
                t.range = this.range.toJSON();
                return t
            }

            _validate() {
                if (!this.range.isFlat) {
                    throw new ss["b"]("attribute-operation-range-not-flat: The range to change is not flat.", this)
                }
                for (const t of this.range.getItems({shallow: true})) {
                    if (this.oldValue !== null && !Yg(t.getAttribute(this.key), this.oldValue)) {
                        throw new ss["b"]("attribute-operation-wrong-old-value: Changed node has different attribute value than operation's " + "old attribute value.", this, {
                            item: t,
                            key: this.key,
                            value: this.oldValue
                        })
                    }
                    if (this.oldValue === null && this.newValue !== null && t.hasAttribute(this.key)) {
                        throw new ss["b"]("attribute-operation-attribute-exists: The attribute with given key already exists.", this, {
                            node: t,
                            key: this.key
                        })
                    }
                }
            }

            _execute() {
                if (!Yg(this.oldValue, this.newValue)) {
                    qg(this.range, this.key, this.newValue)
                }
            }

            static get className() {
                return "AttributeOperation"
            }

            static fromJSON(t, e) {
                return new Qg($h.fromJSON(t.range, e), t.key, t.oldValue, t.newValue, t.baseVersion)
            }
        }

        class Xg extends Lg {
            constructor(t, e) {
                super(null);
                this.sourcePosition = t.clone();
                this.howMany = e
            }

            get type() {
                return "detach"
            }

            toJSON() {
                const t = super.toJSON();
                t.sourcePosition = this.sourcePosition.toJSON();
                return t
            }

            _validate() {
                if (this.sourcePosition.root.document) {
                    throw new ss["b"]("detach-operation-on-document-node: Cannot detach document node.", this)
                }
            }

            _execute() {
                Hg($h._createFromPositionAndShift(this.sourcePosition, this.howMany))
            }

            static get className() {
                return "DetachOperation"
            }
        }

        class Zg extends Lg {
            constructor(t, e, i, n) {
                super(n);
                this.sourcePosition = t.clone();
                this.sourcePosition.stickiness = "toNext";
                this.howMany = e;
                this.targetPosition = i.clone();
                this.targetPosition.stickiness = "toNone"
            }

            get type() {
                if (this.targetPosition.root.rootName == "$graveyard") {
                    return "remove"
                } else if (this.sourcePosition.root.rootName == "$graveyard") {
                    return "reinsert"
                }
                return "move"
            }

            clone() {
                return new this.constructor(this.sourcePosition, this.howMany, this.targetPosition, this.baseVersion)
            }

            getMovedRangeStart() {
                return this.targetPosition._getTransformedByDeletion(this.sourcePosition, this.howMany)
            }

            getReversed() {
                const t = this.sourcePosition._getTransformedByInsertion(this.targetPosition, this.howMany);
                return new this.constructor(this.getMovedRangeStart(), this.howMany, t, this.baseVersion + 1)
            }

            _validate() {
                const t = this.sourcePosition.parent;
                const e = this.targetPosition.parent;
                const i = this.sourcePosition.offset;
                const n = this.targetPosition.offset;
                if (i + this.howMany > t.maxOffset) {
                    throw new ss["b"]("move-operation-nodes-do-not-exist: The nodes which should be moved do not exist.", this)
                } else if (t === e && i < n && n < i + this.howMany) {
                    throw new ss["b"]("move-operation-range-into-itself: Trying to move a range of nodes to the inside of that range.", this)
                } else if (this.sourcePosition.root == this.targetPosition.root) {
                    if (Vs(this.sourcePosition.getParentPath(), this.targetPosition.getParentPath()) == "prefix") {
                        const t = this.sourcePosition.path.length - 1;
                        if (this.targetPosition.path[t] >= i && this.targetPosition.path[t] < i + this.howMany) {
                            throw new ss["b"]("move-operation-node-into-itself: Trying to move a range of nodes into one of nodes from that range.", this)
                        }
                    }
                }
            }

            _execute() {
                Wg($h._createFromPositionAndShift(this.sourcePosition, this.howMany), this.targetPosition)
            }

            toJSON() {
                const t = super.toJSON();
                t.sourcePosition = this.sourcePosition.toJSON();
                t.targetPosition = this.targetPosition.toJSON();
                return t
            }

            static get className() {
                return "MoveOperation"
            }

            static fromJSON(t, e) {
                const i = Uh.fromJSON(t.sourcePosition, e);
                const n = Uh.fromJSON(t.targetPosition, e);
                return new this(i, t.howMany, n, t.baseVersion)
            }
        }

        class tm extends Lg {
            constructor(t, e, i) {
                super(i);
                this.position = t.clone();
                this.position.stickiness = "toNone";
                this.nodes = new Dh(Ug(e));
                this.shouldReceiveAttributes = false
            }

            get type() {
                return "insert"
            }

            get howMany() {
                return this.nodes.maxOffset
            }

            clone() {
                const t = new Dh([...this.nodes].map(t => t._clone(true)));
                const e = new tm(this.position, t, this.baseVersion);
                e.shouldReceiveAttributes = this.shouldReceiveAttributes;
                return e
            }

            getReversed() {
                const t = this.position.root.document.graveyard;
                const e = new Uh(t, [0]);
                return new Zg(this.position, this.nodes.maxOffset, e, this.baseVersion + 1)
            }

            _validate() {
                const t = this.position.parent;
                if (!t || t.maxOffset < this.position.offset) {
                    throw new ss["b"]("insert-operation-position-invalid: Insertion position is invalid.", this)
                }
            }

            _execute() {
                const t = this.nodes;
                this.nodes = new Dh([...t].map(t => t._clone(true)));
                jg(this.position, t)
            }

            toJSON() {
                const t = super.toJSON();
                t.position = this.position.toJSON();
                t.nodes = this.nodes.toJSON();
                return t
            }

            static get className() {
                return "InsertOperation"
            }

            static fromJSON(t, e) {
                const i = [];
                for (const e of t.nodes) {
                    if (e.name) {
                        i.push(jh.fromJSON(e))
                    } else {
                        i.push(Lh.fromJSON(e))
                    }
                }
                const n = new tm(Uh.fromJSON(t.position, e), i, t.baseVersion);
                n.shouldReceiveAttributes = t.shouldReceiveAttributes;
                return n
            }
        }

        class em extends Lg {
            constructor(t, e, i, n, o, r) {
                super(r);
                this.name = t;
                this.oldRange = e ? e.clone() : null;
                this.newRange = i ? i.clone() : null;
                this.affectsData = o;
                this._markers = n
            }

            get type() {
                return "marker"
            }

            clone() {
                return new em(this.name, this.oldRange, this.newRange, this._markers, this.affectsData, this.baseVersion)
            }

            getReversed() {
                return new em(this.name, this.newRange, this.oldRange, this._markers, this.affectsData, this.baseVersion + 1)
            }

            _execute() {
                const t = this.newRange ? "_set" : "_remove";
                this._markers[t](this.name, this.newRange, true, this.affectsData)
            }

            toJSON() {
                const t = super.toJSON();
                if (this.oldRange) {
                    t.oldRange = this.oldRange.toJSON()
                }
                if (this.newRange) {
                    t.newRange = this.newRange.toJSON()
                }
                delete t._markers;
                return t
            }

            static get className() {
                return "MarkerOperation"
            }

            static fromJSON(t, e) {
                return new em(t.name, t.oldRange ? $h.fromJSON(t.oldRange, e) : null, t.newRange ? $h.fromJSON(t.newRange, e) : null, e.model.markers, t.affectsData, t.baseVersion)
            }
        }

        class im extends Lg {
            constructor(t, e, i, n) {
                super(n);
                this.position = t;
                this.position.stickiness = "toNext";
                this.oldName = e;
                this.newName = i
            }

            get type() {
                return "rename"
            }

            clone() {
                return new im(this.position.clone(), this.oldName, this.newName, this.baseVersion)
            }

            getReversed() {
                return new im(this.position.clone(), this.newName, this.oldName, this.baseVersion + 1)
            }

            _validate() {
                const t = this.position.nodeAfter;
                if (!(t instanceof jh)) {
                    throw new ss["b"]("rename-operation-wrong-position: Given position is invalid or node after it is not an instance of Element.", this)
                } else if (t.name !== this.oldName) {
                    throw new ss["b"]("rename-operation-wrong-name: Element to change has different name than operation's old name.", this)
                }
            }

            _execute() {
                const t = this.position.nodeAfter;
                t.name = this.newName
            }

            toJSON() {
                const t = super.toJSON();
                t.position = this.position.toJSON();
                return t
            }

            static get className() {
                return "RenameOperation"
            }

            static fromJSON(t, e) {
                return new im(Uh.fromJSON(t.position, e), t.oldName, t.newName, t.baseVersion)
            }
        }

        class nm extends Lg {
            constructor(t, e, i, n, o) {
                super(o);
                this.root = t;
                this.key = e;
                this.oldValue = i;
                this.newValue = n
            }

            get type() {
                if (this.oldValue === null) {
                    return "addRootAttribute"
                } else if (this.newValue === null) {
                    return "removeRootAttribute"
                } else {
                    return "changeRootAttribute"
                }
            }

            clone() {
                return new nm(this.root, this.key, this.oldValue, this.newValue, this.baseVersion)
            }

            getReversed() {
                return new nm(this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1)
            }

            _validate() {
                if (this.root != this.root.root || this.root.is("documentFragment")) {
                    throw new ss["b"]("rootattribute-operation-not-a-root: The element to change is not a root element.", this, {
                        root: this.root,
                        key: this.key
                    })
                }
                if (this.oldValue !== null && this.root.getAttribute(this.key) !== this.oldValue) {
                    throw new ss["b"]("rootattribute-operation-wrong-old-value: Changed node has different attribute value than operation's " + "old attribute value.", this, {
                        root: this.root,
                        key: this.key
                    })
                }
                if (this.oldValue === null && this.newValue !== null && this.root.hasAttribute(this.key)) {
                    throw new ss["b"]("rootattribute-operation-attribute-exists: The attribute with given key already exists.", this, {
                        root: this.root,
                        key: this.key
                    })
                }
            }

            _execute() {
                if (this.newValue !== null) {
                    this.root._setAttribute(this.key, this.newValue)
                } else {
                    this.root._removeAttribute(this.key)
                }
            }

            toJSON() {
                const t = super.toJSON();
                t.root = this.root.toJSON();
                return t
            }

            static get className() {
                return "RootAttributeOperation"
            }

            static fromJSON(t, e) {
                if (!e.getRoot(t.root)) {
                    throw new ss["b"]("rootattribute-operation-fromjson-no-root: Cannot create RootAttributeOperation. Root with specified name does not exist.", this, {rootName: t.root})
                }
                return new nm(e.getRoot(t.root), t.key, t.oldValue, t.newValue, t.baseVersion)
            }
        }

        class om extends Lg {
            constructor(t, e, i, n, o) {
                super(o);
                this.sourcePosition = t.clone();
                this.sourcePosition.stickiness = "toPrevious";
                this.howMany = e;
                this.targetPosition = i.clone();
                this.targetPosition.stickiness = "toNext";
                this.graveyardPosition = n.clone()
            }

            get type() {
                return "merge"
            }

            get deletionPosition() {
                return new Uh(this.sourcePosition.root, this.sourcePosition.path.slice(0, -1))
            }

            get movedRange() {
                const t = this.sourcePosition.getShiftedBy(Number.POSITIVE_INFINITY);
                return new $h(this.sourcePosition, t)
            }

            clone() {
                return new this.constructor(this.sourcePosition, this.howMany, this.targetPosition, this.graveyardPosition, this.baseVersion)
            }

            getReversed() {
                const t = this.targetPosition._getTransformedByMergeOperation(this);
                const e = this.sourcePosition.path.slice(0, -1);
                const i = new Uh(this.sourcePosition.root, e)._getTransformedByMergeOperation(this);
                const n = new rm(t, this.howMany, this.graveyardPosition, this.baseVersion + 1);
                n.insertionPosition = i;
                return n
            }

            _validate() {
                const t = this.sourcePosition.parent;
                const e = this.targetPosition.parent;
                if (!t.parent) {
                    throw new ss["b"]("merge-operation-source-position-invalid: Merge source position is invalid.", this)
                } else if (!e.parent) {
                    throw new ss["b"]("merge-operation-target-position-invalid: Merge target position is invalid.", this)
                } else if (this.howMany != t.maxOffset) {
                    throw new ss["b"]("merge-operation-how-many-invalid: Merge operation specifies wrong number of nodes to move.", this)
                }
            }

            _execute() {
                const t = this.sourcePosition.parent;
                const e = $h._createIn(t);
                Wg(e, this.targetPosition);
                Wg($h._createOn(t), this.graveyardPosition)
            }

            toJSON() {
                const t = super.toJSON();
                t.sourcePosition = t.sourcePosition.toJSON();
                t.targetPosition = t.targetPosition.toJSON();
                t.graveyardPosition = t.graveyardPosition.toJSON();
                return t
            }

            static get className() {
                return "MergeOperation"
            }

            static fromJSON(t, e) {
                const i = Uh.fromJSON(t.sourcePosition, e);
                const n = Uh.fromJSON(t.targetPosition, e);
                const o = Uh.fromJSON(t.graveyardPosition, e);
                return new this(i, t.howMany, n, o, t.baseVersion)
            }
        }

        class rm extends Lg {
            constructor(t, e, i, n) {
                super(n);
                this.splitPosition = t.clone();
                this.splitPosition.stickiness = "toNext";
                this.howMany = e;
                this.insertionPosition = rm.getInsertionPosition(t);
                this.insertionPosition.stickiness = "toNone";
                this.graveyardPosition = i ? i.clone() : null;
                if (this.graveyardPosition) {
                    this.graveyardPosition.stickiness = "toNext"
                }
            }

            get type() {
                return "split"
            }

            get moveTargetPosition() {
                const t = this.insertionPosition.path.slice();
                t.push(0);
                return new Uh(this.insertionPosition.root, t)
            }

            get movedRange() {
                const t = this.splitPosition.getShiftedBy(Number.POSITIVE_INFINITY);
                return new $h(this.splitPosition, t)
            }

            clone() {
                const t = new this.constructor(this.splitPosition, this.howMany, this.graveyardPosition, this.baseVersion);
                t.insertionPosition = this.insertionPosition;
                return t
            }

            getReversed() {
                const t = this.splitPosition.root.document.graveyard;
                const e = new Uh(t, [0]);
                return new om(this.moveTargetPosition, this.howMany, this.splitPosition, e, this.baseVersion + 1)
            }

            _validate() {
                const t = this.splitPosition.parent;
                const e = this.splitPosition.offset;
                if (!t || t.maxOffset < e) {
                    throw new ss["b"]("split-operation-position-invalid: Split position is invalid.", this)
                } else if (!t.parent) {
                    throw new ss["b"]("split-operation-split-in-root: Cannot split root element.", this)
                } else if (this.howMany != t.maxOffset - this.splitPosition.offset) {
                    throw new ss["b"]("split-operation-how-many-invalid: Split operation specifies wrong number of nodes to move.", this)
                } else if (this.graveyardPosition && !this.graveyardPosition.nodeAfter) {
                    throw new ss["b"]("split-operation-graveyard-position-invalid: Graveyard position invalid.", this)
                }
            }

            _execute() {
                const t = this.splitPosition.parent;
                if (this.graveyardPosition) {
                    Wg($h._createFromPositionAndShift(this.graveyardPosition, 1), this.insertionPosition)
                } else {
                    const e = t._clone();
                    jg(this.insertionPosition, e)
                }
                const e = new $h(Uh._createAt(t, this.splitPosition.offset), Uh._createAt(t, t.maxOffset));
                Wg(e, this.moveTargetPosition)
            }

            toJSON() {
                const t = super.toJSON();
                t.splitPosition = this.splitPosition.toJSON();
                t.insertionPosition = this.insertionPosition.toJSON();
                if (this.graveyardPosition) {
                    t.graveyardPosition = this.graveyardPosition.toJSON()
                }
                return t
            }

            static get className() {
                return "SplitOperation"
            }

            static getInsertionPosition(t) {
                const e = t.path.slice(0, -1);
                e[e.length - 1]++;
                return new Uh(t.root, e)
            }

            static fromJSON(t, e) {
                const i = Uh.fromJSON(t.splitPosition, e);
                const n = Uh.fromJSON(t.insertionPosition, e);
                const o = t.graveyardPosition ? Uh.fromJSON(t.graveyardPosition, e) : null;
                const r = new this(i, t.howMany, o, t.baseVersion);
                r.insertionPosition = n;
                return r
            }
        }

        class sm extends jh {
            constructor(t, e, i = "main") {
                super(e);
                this._document = t;
                this.rootName = i
            }

            get document() {
                return this._document
            }

            is(t, e) {
                const i = t.replace("model:", "");
                if (!e) {
                    return i == "rootElement" || super.is(t)
                } else {
                    return i == "rootElement" && e == this.name || super.is(t, e)
                }
            }

            toJSON() {
                return this.rootName
            }
        }

        class am {
            constructor(t, e) {
                this.model = t;
                this.batch = e
            }

            createText(t, e) {
                return new Lh(t, e)
            }

            createElement(t, e) {
                return new jh(t, e)
            }

            createDocumentFragment() {
                return new Fg
            }

            insert(t, e, i = 0) {
                this._assertWriterUsedCorrectly();
                if (t instanceof Lh && t.data == "") {
                    return
                }
                const n = Uh._createAt(e, i);
                if (t.parent) {
                    if (hm(t.root, n.root)) {
                        this.move($h._createOn(t), n);
                        return
                    } else {
                        if (t.root.document) {
                            throw new ss["b"]("model-writer-insert-forbidden-move: " + "Cannot move a node from a document to a different tree. " + "It is forbidden to move a node that was already in a document outside of it.", this)
                        } else {
                            this.remove(t)
                        }
                    }
                }
                const o = n.root.document ? n.root.document.version : null;
                const r = new tm(n, t, o);
                if (t instanceof Lh) {
                    r.shouldReceiveAttributes = true
                }
                this.batch.addOperation(r);
                this.model.applyOperation(r);
                if (t instanceof Fg) {
                    for (const [e, i] of t.markers) {
                        const t = Uh._createAt(i.root, 0);
                        const o = new $h(i.start._getCombined(t, n), i.end._getCombined(t, n));
                        const r = {range: o, usingOperation: true, affectsData: true};
                        if (this.model.markers.has(e)) {
                            this.updateMarker(e, r)
                        } else {
                            this.addMarker(e, r)
                        }
                    }
                }
            }

            insertText(t, e, i, n) {
                if (e instanceof Fg || e instanceof jh || e instanceof Uh) {
                    this.insert(this.createText(t), e, i)
                } else {
                    this.insert(this.createText(t, e), i, n)
                }
            }

            insertElement(t, e, i, n) {
                if (e instanceof Fg || e instanceof jh || e instanceof Uh) {
                    this.insert(this.createElement(t), e, i)
                } else {
                    this.insert(this.createElement(t, e), i, n)
                }
            }

            append(t, e) {
                this.insert(t, e, "end")
            }

            appendText(t, e, i) {
                if (e instanceof Fg || e instanceof jh) {
                    this.insert(this.createText(t), e, "end")
                } else {
                    this.insert(this.createText(t, e), i, "end")
                }
            }

            appendElement(t, e, i) {
                if (e instanceof Fg || e instanceof jh) {
                    this.insert(this.createElement(t), e, "end")
                } else {
                    this.insert(this.createElement(t, e), i, "end")
                }
            }

            setAttribute(t, e, i) {
                this._assertWriterUsedCorrectly();
                if (i instanceof $h) {
                    const n = i.getMinimalFlatRanges();
                    for (const i of n) {
                        cm(this, t, e, i)
                    }
                } else {
                    lm(this, t, e, i)
                }
            }

            setAttributes(t, e) {
                for (const [i, n] of Hs(t)) {
                    this.setAttribute(i, n, e)
                }
            }

            removeAttribute(t, e) {
                this._assertWriterUsedCorrectly();
                if (e instanceof $h) {
                    const i = e.getMinimalFlatRanges();
                    for (const e of i) {
                        cm(this, t, null, e)
                    }
                } else {
                    lm(this, t, null, e)
                }
            }

            clearAttributes(t) {
                this._assertWriterUsedCorrectly();
                const e = t => {
                    for (const e of t.getAttributeKeys()) {
                        this.removeAttribute(e, t)
                    }
                };
                if (!(t instanceof $h)) {
                    e(t)
                } else {
                    for (const i of t.getItems()) {
                        e(i)
                    }
                }
            }

            move(t, e, i) {
                this._assertWriterUsedCorrectly();
                if (!(t instanceof $h)) {
                    throw new ss["b"]("writer-move-invalid-range: Invalid range to move.", this)
                }
                if (!t.isFlat) {
                    throw new ss["b"]("writer-move-range-not-flat: Range to move is not flat.", this)
                }
                const n = Uh._createAt(e, i);
                if (n.isEqual(t.start)) {
                    return
                }
                this._addOperationForAffectedMarkers("move", t);
                if (!hm(t.root, n.root)) {
                    throw new ss["b"]("writer-move-different-document: Range is going to be moved between different documents.", this)
                }
                const o = t.root.document ? t.root.document.version : null;
                const r = new Zg(t.start, t.end.offset - t.start.offset, n, o);
                this.batch.addOperation(r);
                this.model.applyOperation(r)
            }

            remove(t) {
                this._assertWriterUsedCorrectly();
                const e = t instanceof $h ? t : $h._createOn(t);
                const i = e.getMinimalFlatRanges().reverse();
                for (const t of i) {
                    this._addOperationForAffectedMarkers("move", t);
                    um(t.start, t.end.offset - t.start.offset, this.batch, this.model)
                }
            }

            merge(t) {
                this._assertWriterUsedCorrectly();
                const e = t.nodeBefore;
                const i = t.nodeAfter;
                this._addOperationForAffectedMarkers("merge", t);
                if (!(e instanceof jh)) {
                    throw new ss["b"]("writer-merge-no-element-before: Node before merge position must be an element.", this)
                }
                if (!(i instanceof jh)) {
                    throw new ss["b"]("writer-merge-no-element-after: Node after merge position must be an element.", this)
                }
                if (!t.root.document) {
                    this._mergeDetached(t)
                } else {
                    this._merge(t)
                }
            }

            createPositionFromPath(t, e, i) {
                return this.model.createPositionFromPath(t, e, i)
            }

            createPositionAt(t, e) {
                return this.model.createPositionAt(t, e)
            }

            createPositionAfter(t) {
                return this.model.createPositionAfter(t)
            }

            createPositionBefore(t) {
                return this.model.createPositionBefore(t)
            }

            createRange(t, e) {
                return this.model.createRange(t, e)
            }

            createRangeIn(t) {
                return this.model.createRangeIn(t)
            }

            createRangeOn(t) {
                return this.model.createRangeOn(t)
            }

            createSelection(t, e, i) {
                return this.model.createSelection(t, e, i)
            }

            _mergeDetached(t) {
                const e = t.nodeBefore;
                const i = t.nodeAfter;
                this.move($h._createIn(i), Uh._createAt(e, "end"));
                this.remove(i)
            }

            _merge(t) {
                const e = Uh._createAt(t.nodeBefore, "end");
                const i = Uh._createAt(t.nodeAfter, 0);
                const n = t.root.document.graveyard;
                const o = new Uh(n, [0]);
                const r = t.root.document.version;
                const s = new om(i, t.nodeAfter.maxOffset, e, o, r);
                this.batch.addOperation(s);
                this.model.applyOperation(s)
            }

            rename(t, e) {
                this._assertWriterUsedCorrectly();
                if (!(t instanceof jh)) {
                    throw new ss["b"]("writer-rename-not-element-instance: Trying to rename an object which is not an instance of Element.", this)
                }
                const i = t.root.document ? t.root.document.version : null;
                const n = new im(Uh._createBefore(t), t.name, e, i);
                this.batch.addOperation(n);
                this.model.applyOperation(n)
            }

            split(t, e) {
                this._assertWriterUsedCorrectly();
                let i = t.parent;
                if (!i.parent) {
                    throw new ss["b"]("writer-split-element-no-parent: Element with no parent can not be split.", this)
                }
                if (!e) {
                    e = i.parent
                }
                if (!t.parent.getAncestors({includeSelf: true}).includes(e)) {
                    throw new ss["b"]("writer-split-invalid-limit-element: Limit element is not a position ancestor.", this)
                }
                let n, o;
                do {
                    const e = i.root.document ? i.root.document.version : null;
                    const r = i.maxOffset - t.offset;
                    const s = new rm(t, r, null, e);
                    this.batch.addOperation(s);
                    this.model.applyOperation(s);
                    if (!n && !o) {
                        n = i;
                        o = t.parent.nextSibling
                    }
                    t = this.createPositionAfter(t.parent);
                    i = t.parent
                } while (i !== e);
                return {position: t, range: new $h(Uh._createAt(n, "end"), Uh._createAt(o, 0))}
            }

            wrap(t, e) {
                this._assertWriterUsedCorrectly();
                if (!t.isFlat) {
                    throw new ss["b"]("writer-wrap-range-not-flat: Range to wrap is not flat.", this)
                }
                const i = e instanceof jh ? e : new jh(e);
                if (i.childCount > 0) {
                    throw new ss["b"]("writer-wrap-element-not-empty: Element to wrap with is not empty.", this)
                }
                if (i.parent !== null) {
                    throw new ss["b"]("writer-wrap-element-attached: Element to wrap with is already attached to tree model.", this)
                }
                this.insert(i, t.start);
                const n = new $h(t.start.getShiftedBy(1), t.end.getShiftedBy(1));
                this.move(n, Uh._createAt(i, 0))
            }

            unwrap(t) {
                this._assertWriterUsedCorrectly();
                if (t.parent === null) {
                    throw new ss["b"]("writer-unwrap-element-no-parent: Trying to unwrap an element which has no parent.", this)
                }
                this.move($h._createIn(t), this.createPositionAfter(t));
                this.remove(t)
            }

            addMarker(t, e) {
                this._assertWriterUsedCorrectly();
                if (!e || typeof e.usingOperation != "boolean") {
                    throw new ss["b"]("writer-addMarker-no-usingOperation: The options.usingOperation parameter is required when adding a new marker.", this)
                }
                const i = e.usingOperation;
                const n = e.range;
                const o = e.affectsData === undefined ? false : e.affectsData;
                if (this.model.markers.has(t)) {
                    throw new ss["b"]("writer-addMarker-marker-exists: Marker with provided name already exists.", this)
                }
                if (!n) {
                    throw new ss["b"]("writer-addMarker-no-range: Range parameter is required when adding a new marker.", this)
                }
                if (!i) {
                    return this.model.markers._set(t, n, i, o)
                }
                dm(this, t, null, n, o);
                return this.model.markers.get(t)
            }

            updateMarker(t, e) {
                this._assertWriterUsedCorrectly();
                const i = typeof t == "string" ? t : t.name;
                const n = this.model.markers.get(i);
                if (!n) {
                    throw new ss["b"]("writer-updateMarker-marker-not-exists: Marker with provided name does not exists.", this)
                }
                if (!e) {
                    this.model.markers._refresh(n);
                    return
                }
                const o = typeof e.usingOperation == "boolean";
                const r = typeof e.affectsData == "boolean";
                const s = r ? e.affectsData : n.affectsData;
                if (!o && !e.range && !r) {
                    throw new ss["b"]("writer-updateMarker-wrong-options: One of the options is required - provide range, usingOperations or affectsData.", this)
                }
                const a = n.getRange();
                const c = e.range ? e.range : a;
                if (o && e.usingOperation !== n.managedUsingOperations) {
                    if (e.usingOperation) {
                        dm(this, i, null, c, s)
                    } else {
                        dm(this, i, a, null, s);
                        this.model.markers._set(i, c, undefined, s)
                    }
                    return
                }
                if (n.managedUsingOperations) {
                    dm(this, i, a, c, s)
                } else {
                    this.model.markers._set(i, c, undefined, s)
                }
            }

            removeMarker(t) {
                this._assertWriterUsedCorrectly();
                const e = typeof t == "string" ? t : t.name;
                if (!this.model.markers.has(e)) {
                    throw new ss["b"]("writer-removeMarker-no-marker: Trying to remove marker which does not exist.", this)
                }
                const i = this.model.markers.get(e);
                if (!i.managedUsingOperations) {
                    this.model.markers._remove(e);
                    return
                }
                const n = i.getRange();
                dm(this, e, n, null, i.affectsData)
            }

            setSelection(t, e, i) {
                this._assertWriterUsedCorrectly();
                this.model.document.selection._setTo(t, e, i)
            }

            setSelectionFocus(t, e) {
                this._assertWriterUsedCorrectly();
                this.model.document.selection._setFocus(t, e)
            }

            setSelectionAttribute(t, e) {
                this._assertWriterUsedCorrectly();
                if (typeof t === "string") {
                    this._setSelectionAttribute(t, e)
                } else {
                    for (const [e, i] of Hs(t)) {
                        this._setSelectionAttribute(e, i)
                    }
                }
            }

            removeSelectionAttribute(t) {
                this._assertWriterUsedCorrectly();
                if (typeof t === "string") {
                    this._removeSelectionAttribute(t)
                } else {
                    for (const e of t) {
                        this._removeSelectionAttribute(e)
                    }
                }
            }

            overrideSelectionGravity() {
                return this.model.document.selection._overrideGravity()
            }

            restoreSelectionGravity(t) {
                this.model.document.selection._restoreGravity(t)
            }

            _setSelectionAttribute(t, e) {
                const i = this.model.document.selection;
                if (i.isCollapsed && i.anchor.parent.isEmpty) {
                    const n = df._getStoreAttributeKey(t);
                    this.setAttribute(n, e, i.anchor.parent)
                }
                i._setAttribute(t, e)
            }

            _removeSelectionAttribute(t) {
                const e = this.model.document.selection;
                if (e.isCollapsed && e.anchor.parent.isEmpty) {
                    const i = df._getStoreAttributeKey(t);
                    this.removeAttribute(i, e.anchor.parent)
                }
                e._removeAttribute(t)
            }

            _assertWriterUsedCorrectly() {
                if (this.model._currentWriter !== this) {
                    throw new ss["b"]("writer-incorrect-use: Trying to use a writer outside the change() block.", this)
                }
            }

            _addOperationForAffectedMarkers(t, e) {
                for (const i of this.model.markers) {
                    if (!i.managedUsingOperations) {
                        continue
                    }
                    const n = i.getRange();
                    let o = false;
                    if (t == "move") {
                        o = e.containsPosition(n.start) || e.start.isEqual(n.start) || e.containsPosition(n.end) || e.end.isEqual(n.end)
                    } else {
                        const t = e.nodeBefore;
                        const i = e.nodeAfter;
                        const r = n.start.parent == t && n.start.isAtEnd;
                        const s = n.end.parent == i && n.end.offset == 0;
                        const a = n.end.nodeAfter == i;
                        const c = n.start.nodeAfter == i;
                        o = r || s || a || c
                    }
                    if (o) {
                        this.updateMarker(i.name, {range: n})
                    }
                }
            }
        }

        function cm(t, e, i, n) {
            const o = t.model;
            const r = o.document;
            let s = n.start;
            let a;
            let c;
            let l;
            for (const t of n.getWalker({shallow: true})) {
                l = t.item.getAttribute(e);
                if (a && c != l) {
                    if (c != i) {
                        d()
                    }
                    s = a
                }
                a = t.nextPosition;
                c = l
            }
            if (a instanceof Uh && a != s && c != i) {
                d()
            }

            function d() {
                const n = new $h(s, a);
                const l = n.root.document ? r.version : null;
                const d = new Qg(n, e, c, i, l);
                t.batch.addOperation(d);
                o.applyOperation(d)
            }
        }

        function lm(t, e, i, n) {
            const o = t.model;
            const r = o.document;
            const s = n.getAttribute(e);
            let a, c;
            if (s != i) {
                const l = n.root === n;
                if (l) {
                    const t = n.document ? r.version : null;
                    c = new nm(n, e, s, i, t)
                } else {
                    a = new $h(Uh._createBefore(n), t.createPositionAfter(n));
                    const o = a.root.document ? r.version : null;
                    c = new Qg(a, e, s, i, o)
                }
                t.batch.addOperation(c);
                o.applyOperation(c)
            }
        }

        function dm(t, e, i, n, o) {
            const r = t.model;
            const s = r.document;
            const a = new em(e, i, n, r.markers, o, s.version);
            t.batch.addOperation(a);
            r.applyOperation(a)
        }

        function um(t, e, i, n) {
            let o;
            if (t.root.document) {
                const i = n.document;
                const r = new Uh(i.graveyard, [0]);
                o = new Zg(t, e, r, i.version)
            } else {
                o = new Xg(t, e)
            }
            i.addOperation(o);
            n.applyOperation(o)
        }

        function hm(t, e) {
            if (t === e) {
                return true
            }
            if (t instanceof sm && e instanceof sm) {
                return true
            }
            return false
        }

        class fm {
            constructor(t) {
                this._markerCollection = t;
                this._changesInElement = new Map;
                this._elementSnapshots = new Map;
                this._changedMarkers = new Map;
                this._changeCount = 0;
                this._cachedChanges = null;
                this._cachedChangesWithGraveyard = null
            }

            get isEmpty() {
                return this._changesInElement.size == 0 && this._changedMarkers.size == 0
            }

            refreshItem(t) {
                if (this._isInInsertedElement(t.parent)) {
                    return
                }
                this._markRemove(t.parent, t.startOffset, t.offsetSize);
                this._markInsert(t.parent, t.startOffset, t.offsetSize);
                const e = $h._createOn(t);
                for (const t of this._markerCollection.getMarkersIntersectingRange(e)) {
                    const e = t.getRange();
                    this.bufferMarkerChange(t.name, e, e, t.affectsData)
                }
                this._cachedChanges = null
            }

            bufferOperation(t) {
                switch (t.type) {
                    case"insert": {
                        if (this._isInInsertedElement(t.position.parent)) {
                            return
                        }
                        this._markInsert(t.position.parent, t.position.offset, t.nodes.maxOffset);
                        break
                    }
                    case"addAttribute":
                    case"removeAttribute":
                    case"changeAttribute": {
                        for (const e of t.range.getItems({shallow: true})) {
                            if (this._isInInsertedElement(e.parent)) {
                                continue
                            }
                            this._markAttribute(e)
                        }
                        break
                    }
                    case"remove":
                    case"move":
                    case"reinsert": {
                        if (t.sourcePosition.isEqual(t.targetPosition) || t.sourcePosition.getShiftedBy(t.howMany).isEqual(t.targetPosition)) {
                            return
                        }
                        const e = this._isInInsertedElement(t.sourcePosition.parent);
                        const i = this._isInInsertedElement(t.targetPosition.parent);
                        if (!e) {
                            this._markRemove(t.sourcePosition.parent, t.sourcePosition.offset, t.howMany)
                        }
                        if (!i) {
                            this._markInsert(t.targetPosition.parent, t.getMovedRangeStart().offset, t.howMany)
                        }
                        break
                    }
                    case"rename": {
                        if (this._isInInsertedElement(t.position.parent)) {
                            return
                        }
                        this._markRemove(t.position.parent, t.position.offset, 1);
                        this._markInsert(t.position.parent, t.position.offset, 1);
                        const e = $h._createFromPositionAndShift(t.position, 1);
                        for (const t of this._markerCollection.getMarkersIntersectingRange(e)) {
                            const e = t.getRange();
                            this.bufferMarkerChange(t.name, e, e, t.affectsData)
                        }
                        break
                    }
                    case"split": {
                        const e = t.splitPosition.parent;
                        if (!this._isInInsertedElement(e)) {
                            this._markRemove(e, t.splitPosition.offset, t.howMany)
                        }
                        if (!this._isInInsertedElement(t.insertionPosition.parent)) {
                            this._markInsert(t.insertionPosition.parent, t.insertionPosition.offset, 1)
                        }
                        if (t.graveyardPosition) {
                            this._markRemove(t.graveyardPosition.parent, t.graveyardPosition.offset, 1)
                        }
                        break
                    }
                    case"merge": {
                        const e = t.sourcePosition.parent;
                        if (!this._isInInsertedElement(e.parent)) {
                            this._markRemove(e.parent, e.startOffset, 1)
                        }
                        const i = t.graveyardPosition.parent;
                        this._markInsert(i, t.graveyardPosition.offset, 1);
                        const n = t.targetPosition.parent;
                        if (!this._isInInsertedElement(n)) {
                            this._markInsert(n, t.targetPosition.offset, e.maxOffset)
                        }
                        break
                    }
                }
                this._cachedChanges = null
            }

            bufferMarkerChange(t, e, i, n) {
                const o = this._changedMarkers.get(t);
                if (!o) {
                    this._changedMarkers.set(t, {oldRange: e, newRange: i, affectsData: n})
                } else {
                    o.newRange = i;
                    o.affectsData = n;
                    if (o.oldRange == null && o.newRange == null) {
                        this._changedMarkers.delete(t)
                    }
                }
            }

            getMarkersToRemove() {
                const t = [];
                for (const [e, i] of this._changedMarkers) {
                    if (i.oldRange != null) {
                        t.push({name: e, range: i.oldRange})
                    }
                }
                return t
            }

            getMarkersToAdd() {
                const t = [];
                for (const [e, i] of this._changedMarkers) {
                    if (i.newRange != null) {
                        t.push({name: e, range: i.newRange})
                    }
                }
                return t
            }

            getChangedMarkers() {
                return Array.from(this._changedMarkers).map(t => ({
                    name: t[0],
                    data: {oldRange: t[1].oldRange, newRange: t[1].newRange}
                }))
            }

            hasDataChanges() {
                for (const [, t] of this._changedMarkers) {
                    if (t.affectsData) {
                        return true
                    }
                }
                return this._changesInElement.size > 0
            }

            getChanges(t = {includeChangesInGraveyard: false}) {
                if (this._cachedChanges) {
                    if (t.includeChangesInGraveyard) {
                        return this._cachedChangesWithGraveyard.slice()
                    } else {
                        return this._cachedChanges.slice()
                    }
                }
                const e = [];
                for (const t of this._changesInElement.keys()) {
                    const i = this._changesInElement.get(t).sort((t, e) => {
                        if (t.offset === e.offset) {
                            if (t.type != e.type) {
                                return t.type == "remove" ? -1 : 1
                            }
                            return 0
                        }
                        return t.offset < e.offset ? -1 : 1
                    });
                    const n = this._elementSnapshots.get(t);
                    const o = gm(t.getChildren());
                    const r = mm(n.length, i);
                    let s = 0;
                    let a = 0;
                    for (const i of r) {
                        if (i === "i") {
                            e.push(this._getInsertDiff(t, s, o[s].name));
                            s++
                        } else if (i === "r") {
                            e.push(this._getRemoveDiff(t, s, n[a].name));
                            a++
                        } else if (i === "a") {
                            const i = o[s].attributes;
                            const r = n[a].attributes;
                            let c;
                            if (o[s].name == "$text") {
                                c = new $h(Uh._createAt(t, s), Uh._createAt(t, s + 1))
                            } else {
                                const e = t.offsetToIndex(s);
                                c = new $h(Uh._createAt(t, s), Uh._createAt(t.getChild(e), 0))
                            }
                            e.push(...this._getAttributesDiff(c, r, i));
                            s++;
                            a++
                        } else {
                            s++;
                            a++
                        }
                    }
                }
                e.sort((t, e) => {
                    if (t.position.root != e.position.root) {
                        return t.position.root.rootName < e.position.root.rootName ? -1 : 1
                    }
                    if (t.position.isEqual(e.position)) {
                        return t.changeCount - e.changeCount
                    }
                    return t.position.isBefore(e.position) ? -1 : 1
                });
                for (let t = 1; t < e.length; t++) {
                    const i = e[t - 1];
                    const n = e[t];
                    const o = i.type == "remove" && n.type == "remove" && i.name == "$text" && n.name == "$text" && i.position.isEqual(n.position);
                    const r = i.type == "insert" && n.type == "insert" && i.name == "$text" && n.name == "$text" && i.position.parent == n.position.parent && i.position.offset + i.length == n.position.offset;
                    const s = i.type == "attribute" && n.type == "attribute" && i.position.parent == n.position.parent && i.range.isFlat && n.range.isFlat && i.position.offset + i.length == n.position.offset && i.attributeKey == n.attributeKey && i.attributeOldValue == n.attributeOldValue && i.attributeNewValue == n.attributeNewValue;
                    if (o || r || s) {
                        e[t - 1].length++;
                        if (s) {
                            e[t - 1].range.end = e[t - 1].range.end.getShiftedBy(1)
                        }
                        e.splice(t, 1);
                        t--
                    }
                }
                for (const t of e) {
                    delete t.changeCount;
                    if (t.type == "attribute") {
                        delete t.position;
                        delete t.length
                    }
                }
                this._changeCount = 0;
                this._cachedChangesWithGraveyard = e.slice();
                this._cachedChanges = e.slice().filter(pm);
                if (t.includeChangesInGraveyard) {
                    return this._cachedChangesWithGraveyard
                } else {
                    return this._cachedChanges
                }
            }

            reset() {
                this._changesInElement.clear();
                this._elementSnapshots.clear();
                this._changedMarkers.clear();
                this._cachedChanges = null
            }

            _markInsert(t, e, i) {
                const n = {type: "insert", offset: e, howMany: i, count: this._changeCount++};
                this._markChange(t, n)
            }

            _markRemove(t, e, i) {
                const n = {type: "remove", offset: e, howMany: i, count: this._changeCount++};
                this._markChange(t, n);
                this._removeAllNestedChanges(t, e, i)
            }

            _markAttribute(t) {
                const e = {type: "attribute", offset: t.startOffset, howMany: t.offsetSize, count: this._changeCount++};
                this._markChange(t.parent, e)
            }

            _markChange(t, e) {
                this._makeSnapshot(t);
                const i = this._getChangesForElement(t);
                this._handleChange(e, i);
                i.push(e);
                for (let t = 0; t < i.length; t++) {
                    if (i[t].howMany < 1) {
                        i.splice(t, 1);
                        t--
                    }
                }
            }

            _getChangesForElement(t) {
                let e;
                if (this._changesInElement.has(t)) {
                    e = this._changesInElement.get(t)
                } else {
                    e = [];
                    this._changesInElement.set(t, e)
                }
                return e
            }

            _makeSnapshot(t) {
                if (!this._elementSnapshots.has(t)) {
                    this._elementSnapshots.set(t, gm(t.getChildren()))
                }
            }

            _handleChange(t, e) {
                t.nodesToHandle = t.howMany;
                for (const i of e) {
                    const n = t.offset + t.howMany;
                    const o = i.offset + i.howMany;
                    if (t.type == "insert") {
                        if (i.type == "insert") {
                            if (t.offset <= i.offset) {
                                i.offset += t.howMany
                            } else if (t.offset < o) {
                                i.howMany += t.nodesToHandle;
                                t.nodesToHandle = 0
                            }
                        }
                        if (i.type == "remove") {
                            if (t.offset < i.offset) {
                                i.offset += t.howMany
                            }
                        }
                        if (i.type == "attribute") {
                            if (t.offset <= i.offset) {
                                i.offset += t.howMany
                            } else if (t.offset < o) {
                                const o = i.howMany;
                                i.howMany = t.offset - i.offset;
                                e.unshift({
                                    type: "attribute",
                                    offset: n,
                                    howMany: o - i.howMany,
                                    count: this._changeCount++
                                })
                            }
                        }
                    }
                    if (t.type == "remove") {
                        if (i.type == "insert") {
                            if (n <= i.offset) {
                                i.offset -= t.howMany
                            } else if (n <= o) {
                                if (t.offset < i.offset) {
                                    const e = n - i.offset;
                                    i.offset = t.offset;
                                    i.howMany -= e;
                                    t.nodesToHandle -= e
                                } else {
                                    i.howMany -= t.nodesToHandle;
                                    t.nodesToHandle = 0
                                }
                            } else {
                                if (t.offset <= i.offset) {
                                    t.nodesToHandle -= i.howMany;
                                    i.howMany = 0
                                } else if (t.offset < o) {
                                    const e = o - t.offset;
                                    i.howMany -= e;
                                    t.nodesToHandle -= e
                                }
                            }
                        }
                        if (i.type == "remove") {
                            if (n <= i.offset) {
                                i.offset -= t.howMany
                            } else if (t.offset < i.offset) {
                                t.nodesToHandle += i.howMany;
                                i.howMany = 0
                            }
                        }
                        if (i.type == "attribute") {
                            if (n <= i.offset) {
                                i.offset -= t.howMany
                            } else if (t.offset < i.offset) {
                                const e = n - i.offset;
                                i.offset = t.offset;
                                i.howMany -= e
                            } else if (t.offset < o) {
                                if (n <= o) {
                                    const n = i.howMany;
                                    i.howMany = t.offset - i.offset;
                                    const o = n - i.howMany - t.nodesToHandle;
                                    e.unshift({
                                        type: "attribute",
                                        offset: t.offset,
                                        howMany: o,
                                        count: this._changeCount++
                                    })
                                } else {
                                    i.howMany -= o - t.offset
                                }
                            }
                        }
                    }
                    if (t.type == "attribute") {
                        if (i.type == "insert") {
                            if (t.offset < i.offset && n > i.offset) {
                                if (n > o) {
                                    const t = {
                                        type: "attribute",
                                        offset: o,
                                        howMany: n - o,
                                        count: this._changeCount++
                                    };
                                    this._handleChange(t, e);
                                    e.push(t)
                                }
                                t.nodesToHandle = i.offset - t.offset;
                                t.howMany = t.nodesToHandle
                            } else if (t.offset >= i.offset && t.offset < o) {
                                if (n > o) {
                                    t.nodesToHandle = n - o;
                                    t.offset = o
                                } else {
                                    t.nodesToHandle = 0
                                }
                            }
                        }
                        if (i.type == "remove") {
                            if (t.offset < i.offset && n > i.offset) {
                                const o = {
                                    type: "attribute",
                                    offset: i.offset,
                                    howMany: n - i.offset,
                                    count: this._changeCount++
                                };
                                this._handleChange(o, e);
                                e.push(o);
                                t.nodesToHandle = i.offset - t.offset;
                                t.howMany = t.nodesToHandle
                            }
                        }
                        if (i.type == "attribute") {
                            if (t.offset >= i.offset && n <= o) {
                                t.nodesToHandle = 0;
                                t.howMany = 0;
                                t.offset = 0
                            } else if (t.offset <= i.offset && n >= o) {
                                i.howMany = 0
                            }
                        }
                    }
                }
                t.howMany = t.nodesToHandle;
                delete t.nodesToHandle
            }

            _getInsertDiff(t, e, i) {
                return {
                    type: "insert",
                    position: Uh._createAt(t, e),
                    name: i,
                    length: 1,
                    changeCount: this._changeCount++
                }
            }

            _getRemoveDiff(t, e, i) {
                return {
                    type: "remove",
                    position: Uh._createAt(t, e),
                    name: i,
                    length: 1,
                    changeCount: this._changeCount++
                }
            }

            _getAttributesDiff(t, e, i) {
                const n = [];
                i = new Map(i);
                for (const [o, r] of e) {
                    const e = i.has(o) ? i.get(o) : null;
                    if (e !== r) {
                        n.push({
                            type: "attribute",
                            position: t.start,
                            range: t.clone(),
                            length: 1,
                            attributeKey: o,
                            attributeOldValue: r,
                            attributeNewValue: e,
                            changeCount: this._changeCount++
                        })
                    }
                    i.delete(o)
                }
                for (const [e, o] of i) {
                    n.push({
                        type: "attribute",
                        position: t.start,
                        range: t.clone(),
                        length: 1,
                        attributeKey: e,
                        attributeOldValue: null,
                        attributeNewValue: o,
                        changeCount: this._changeCount++
                    })
                }
                return n
            }

            _isInInsertedElement(t) {
                const e = t.parent;
                if (!e) {
                    return false
                }
                const i = this._changesInElement.get(e);
                const n = t.startOffset;
                if (i) {
                    for (const t of i) {
                        if (t.type == "insert" && n >= t.offset && n < t.offset + t.howMany) {
                            return true
                        }
                    }
                }
                return this._isInInsertedElement(e)
            }

            _removeAllNestedChanges(t, e, i) {
                const n = new $h(Uh._createAt(t, e), Uh._createAt(t, e + i));
                for (const t of n.getItems({shallow: true})) {
                    if (t.is("element")) {
                        this._elementSnapshots.delete(t);
                        this._changesInElement.delete(t);
                        this._removeAllNestedChanges(t, 0, t.maxOffset)
                    }
                }
            }
        }

        function gm(t) {
            const e = [];
            for (const i of t) {
                if (i.is("text")) {
                    for (let t = 0; t < i.data.length; t++) {
                        e.push({name: "$text", attributes: new Map(i.getAttributes())})
                    }
                } else {
                    e.push({name: i.name, attributes: new Map(i.getAttributes())})
                }
            }
            return e
        }

        function mm(t, e) {
            const i = [];
            let n = 0;
            let o = 0;
            for (const t of e) {
                if (t.offset > n) {
                    for (let e = 0; e < t.offset - n; e++) {
                        i.push("e")
                    }
                    o += t.offset - n
                }
                if (t.type == "insert") {
                    for (let e = 0; e < t.howMany; e++) {
                        i.push("i")
                    }
                    n = t.offset + t.howMany
                } else if (t.type == "remove") {
                    for (let e = 0; e < t.howMany; e++) {
                        i.push("r")
                    }
                    n = t.offset;
                    o += t.howMany
                } else {
                    i.push(..."a".repeat(t.howMany).split(""));
                    n = t.offset + t.howMany;
                    o += t.howMany
                }
            }
            if (o < t) {
                for (let e = 0; e < t - o - n; e++) {
                    i.push("e")
                }
            }
            return i
        }

        function pm(t) {
            const e = t.position && t.position.root.rootName == "$graveyard";
            const i = t.range && t.range.root.rootName == "$graveyard";
            return !e && !i
        }

        class bm {
            constructor() {
                this._operations = [];
                this._undoPairs = new Map;
                this._undoneOperations = new Set
            }

            addOperation(t) {
                if (this._operations.includes(t)) {
                    return
                }
                this._operations.push(t)
            }

            getOperations(t = 0, e = Number.POSITIVE_INFINITY) {
                if (t < 0) {
                    return []
                }
                return this._operations.slice(t, e)
            }

            getOperation(t) {
                return this._operations[t]
            }

            setOperationAsUndone(t, e) {
                this._undoPairs.set(e, t);
                this._undoneOperations.add(t)
            }

            isUndoingOperation(t) {
                return this._undoPairs.has(t)
            }

            isUndoneOperation(t) {
                return this._undoneOperations.has(t)
            }

            getUndoneOperation(t) {
                return this._undoPairs.get(t)
            }
        }

        function wm(t) {
            return !!t && t.length == 1 && /[\u0300-\u036f\u1ab0-\u1aff\u1dc0-\u1dff\u20d0-\u20ff\ufe20-\ufe2f]/.test(t)
        }

        function km(t) {
            return !!t && t.length == 1 && /[\ud800-\udbff]/.test(t)
        }

        function _m(t) {
            return !!t && t.length == 1 && /[\udc00-\udfff]/.test(t)
        }

        function vm(t, e) {
            return km(t.charAt(e - 1)) && _m(t.charAt(e))
        }

        function ym(t, e) {
            return wm(t.charAt(e))
        }

        const xm = "$graveyard";

        class Cm {
            constructor(t) {
                this.model = t;
                this.version = 0;
                this.history = new bm(this);
                this.selection = new df(this);
                this.roots = new ys({idProperty: "rootName"});
                this.differ = new fm(t.markers);
                this._postFixers = new Set;
                this._hasSelectionChangedFromTheLastChangeBlock = false;
                this.createRoot("$root", xm);
                this.listenTo(t, "applyOperation", (t, e) => {
                    const i = e[0];
                    if (i.isDocumentOperation && i.baseVersion !== this.version) {
                        throw new ss["b"]("model-document-applyOperation-wrong-version: Only operations with matching versions can be applied.", this, {operation: i})
                    }
                }, {priority: "highest"});
                this.listenTo(t, "applyOperation", (t, e) => {
                    const i = e[0];
                    if (i.isDocumentOperation) {
                        this.differ.bufferOperation(i)
                    }
                }, {priority: "high"});
                this.listenTo(t, "applyOperation", (t, e) => {
                    const i = e[0];
                    if (i.isDocumentOperation) {
                        this.version++;
                        this.history.addOperation(i)
                    }
                }, {priority: "low"});
                this.listenTo(this.selection, "change", () => {
                    this._hasSelectionChangedFromTheLastChangeBlock = true
                });
                this.listenTo(t.markers, "update", (t, e, i, n) => {
                    this.differ.bufferMarkerChange(e.name, i, n, e.affectsData);
                    if (i === null) {
                        e.on("change", (t, i) => {
                            this.differ.bufferMarkerChange(e.name, i, e.getRange(), e.affectsData)
                        })
                    }
                })
            }

            get graveyard() {
                return this.getRoot(xm)
            }

            createRoot(t = "$root", e = "main") {
                if (this.roots.get(e)) {
                    throw new ss["b"]("model-document-createRoot-name-exists: Root with specified name already exists.", this, {name: e})
                }
                const i = new sm(this, t, e);
                this.roots.add(i);
                return i
            }

            destroy() {
                this.selection.destroy();
                this.stopListening()
            }

            getRoot(t = "main") {
                return this.roots.get(t)
            }

            getRootNames() {
                return Array.from(this.roots, t => t.rootName).filter(t => t != xm)
            }

            registerPostFixer(t) {
                this._postFixers.add(t)
            }

            toJSON() {
                const t = Bs(this);
                t.selection = "[engine.model.DocumentSelection]";
                t.model = "[engine.model.Model]";
                return t
            }

            _handleChangeBlock(t) {
                if (this._hasDocumentChangedFromTheLastChangeBlock()) {
                    this._callPostFixers(t);
                    this.selection.refresh();
                    if (this.differ.hasDataChanges()) {
                        this.fire("change:data", t.batch)
                    } else {
                        this.fire("change", t.batch)
                    }
                    this.selection.refresh();
                    this.differ.reset()
                }
                this._hasSelectionChangedFromTheLastChangeBlock = false
            }

            _hasDocumentChangedFromTheLastChangeBlock() {
                return !this.differ.isEmpty || this._hasSelectionChangedFromTheLastChangeBlock
            }

            _getDefaultRoot() {
                for (const t of this.roots) {
                    if (t !== this.graveyard) {
                        return t
                    }
                }
                return this.graveyard
            }

            _getDefaultRange() {
                const t = this._getDefaultRoot();
                const e = this.model;
                const i = e.schema;
                const n = e.createPositionFromPath(t, [0]);
                const o = i.getNearestSelectionRange(n);
                return o || e.createRange(n)
            }

            _validateSelectionRange(t) {
                return Am(t.start) && Am(t.end)
            }

            _callPostFixers(t) {
                let e = false;
                do {
                    for (const i of this._postFixers) {
                        this.selection.refresh();
                        e = i(t);
                        if (e) {
                            break
                        }
                    }
                } while (e)
            }
        }

        vs(Cm, ds);

        function Am(t) {
            const e = t.textNode;
            if (e) {
                const i = e.data;
                const n = t.offset - e.startOffset;
                return !vm(i, n) && !ym(i, n)
            }
            return true
        }

        class Tm {
            constructor() {
                this._markers = new Map
            }

            [Symbol.iterator]() {
                return this._markers.values()
            }

            has(t) {
                return this._markers.has(t)
            }

            get(t) {
                return this._markers.get(t) || null
            }

            _set(t, e, i = false, n = false) {
                const o = t instanceof Pm ? t.name : t;
                const r = this._markers.get(o);
                if (r) {
                    const t = r.getRange();
                    let s = false;
                    if (!t.isEqual(e)) {
                        r._attachLiveRange(rf.fromRange(e));
                        s = true
                    }
                    if (i != r.managedUsingOperations) {
                        r._managedUsingOperations = i;
                        s = true
                    }
                    if (typeof n === "boolean" && n != r.affectsData) {
                        r._affectsData = n;
                        s = true
                    }
                    if (s) {
                        this.fire("update:" + o, r, t, e)
                    }
                    return r
                }
                const s = rf.fromRange(e);
                const a = new Pm(o, s, i, n);
                this._markers.set(o, a);
                this.fire("update:" + o, a, null, e);
                return a
            }

            _remove(t) {
                const e = t instanceof Pm ? t.name : t;
                const i = this._markers.get(e);
                if (i) {
                    this._markers.delete(e);
                    this.fire("update:" + e, i, i.getRange(), null);
                    this._destroyMarker(i);
                    return true
                }
                return false
            }

            _refresh(t) {
                const e = t instanceof Pm ? t.name : t;
                const i = this._markers.get(e);
                if (!i) {
                    throw new ss["b"]("markercollection-refresh-marker-not-exists: Marker with provided name does not exists.", this)
                }
                const n = i.getRange();
                this.fire("update:" + e, i, n, n, i.managedUsingOperations, i.affectsData)
            }

            * getMarkersAtPosition(t) {
                for (const e of this) {
                    if (e.getRange().containsPosition(t)) {
                        yield e
                    }
                }
            }

            * getMarkersIntersectingRange(t) {
                for (const e of this) {
                    if (e.getRange().getIntersection(t) !== null) {
                        yield e
                    }
                }
            }

            destroy() {
                for (const t of this._markers.values()) {
                    this._destroyMarker(t)
                }
                this._markers = null;
                this.stopListening()
            }

            * getMarkersGroup(t) {
                for (const e of this._markers.values()) {
                    if (e.name.startsWith(t + ":")) {
                        yield e
                    }
                }
            }

            _destroyMarker(t) {
                t.stopListening();
                t._detachLiveRange()
            }
        }

        vs(Tm, ds);

        class Pm {
            constructor(t, e, i, n) {
                this.name = t;
                this._liveRange = this._attachLiveRange(e);
                this._managedUsingOperations = i;
                this._affectsData = n
            }

            get managedUsingOperations() {
                if (!this._liveRange) {
                    throw new ss["b"]("marker-destroyed: Cannot use a destroyed marker instance.", this)
                }
                return this._managedUsingOperations
            }

            get affectsData() {
                if (!this._liveRange) {
                    throw new ss["b"]("marker-destroyed: Cannot use a destroyed marker instance.", this)
                }
                return this._affectsData
            }

            getStart() {
                if (!this._liveRange) {
                    throw new ss["b"]("marker-destroyed: Cannot use a destroyed marker instance.", this)
                }
                return this._liveRange.start.clone()
            }

            getEnd() {
                if (!this._liveRange) {
                    throw new ss["b"]("marker-destroyed: Cannot use a destroyed marker instance.", this)
                }
                return this._liveRange.end.clone()
            }

            getRange() {
                if (!this._liveRange) {
                    throw new ss["b"]("marker-destroyed: Cannot use a destroyed marker instance.", this)
                }
                return this._liveRange.toRange()
            }

            is(t) {
                return t == "marker" || t == "model:marker"
            }

            _attachLiveRange(t) {
                if (this._liveRange) {
                    this._detachLiveRange()
                }
                t.delegate("change:range").to(this);
                t.delegate("change:content").to(this);
                this._liveRange = t;
                return t
            }

            _detachLiveRange() {
                this._liveRange.stopDelegating("change:range", this);
                this._liveRange.stopDelegating("change:content", this);
                this._liveRange.detach();
                this._liveRange = null
            }
        }

        vs(Pm, ds);

        class Sm extends Lg {
            get type() {
                return "noop"
            }

            clone() {
                return new Sm(this.baseVersion)
            }

            getReversed() {
                return new Sm(this.baseVersion + 1)
            }

            _execute() {
            }

            static get className() {
                return "NoOperation"
            }
        }

        const Em = {};
        Em[Qg.className] = Qg;
        Em[tm.className] = tm;
        Em[em.className] = em;
        Em[Zg.className] = Zg;
        Em[Sm.className] = Sm;
        Em[Lg.className] = Lg;
        Em[im.className] = im;
        Em[nm.className] = nm;
        Em[rm.className] = rm;
        Em[om.className] = om;

        class Rm {
            static fromJSON(t, e) {
                return Em[t.__className].fromJSON(t, e)
            }
        }

        class Om extends Uh {
            constructor(t, e, i = "toNone") {
                super(t, e, i);
                if (!this.root.is("rootElement")) {
                    throw new ss["b"]("model-liveposition-root-not-rootelement: LivePosition's root has to be an instance of RootElement.", t)
                }
                Im.call(this)
            }

            detach() {
                this.stopListening()
            }

            is(t) {
                return t == "livePosition" || t == "model:livePosition" || super.is(t)
            }

            toPosition() {
                return new Uh(this.root, this.path.slice(), this.stickiness)
            }

            static fromPosition(t, e) {
                return new this(t.root, t.path.slice(), e ? e : t.stickiness)
            }
        }

        function Im() {
            this.listenTo(this.root.document.model, "applyOperation", (t, e) => {
                const i = e[0];
                if (!i.isDocumentOperation) {
                    return
                }
                Vm.call(this, i)
            }, {priority: "low"})
        }

        function Vm(t) {
            const e = this.getTransformedByOperation(t);
            if (!this.isEqual(e)) {
                const t = this.toPosition();
                this.path = e.path;
                this.root = e.root;
                this.fire("change", t)
            }
        }

        vs(Om, ds);

        function Nm(t, e, i, n) {
            return t.change(o => {
                let r;
                if (!i) {
                    r = t.document.selection
                } else if (i instanceof Xh || i instanceof df) {
                    r = i
                } else {
                    r = o.createSelection(i, n)
                }
                if (!r.isCollapsed) {
                    t.deleteContent(r, {doNotAutoparagraph: true})
                }
                const s = new Mm(t, o, r.anchor);
                let a;
                if (e.is("documentFragment")) {
                    a = e.getChildren()
                } else {
                    a = [e]
                }
                s.handleNodes(a, {isFirst: true, isLast: true});
                const c = s.getSelectionRange();
                if (c) {
                    if (r instanceof df) {
                        o.setSelection(c)
                    } else {
                        r.setTo(c)
                    }
                } else {
                }
                const l = s.getAffectedRange() || t.createRange(r.anchor);
                s.destroy();
                return l
            })
        }

        class Mm {
            constructor(t, e, i) {
                this.model = t;
                this.writer = e;
                this.position = i;
                this.canMergeWith = new Set([this.position.parent]);
                this.schema = t.schema;
                this._filterAttributesOf = [];
                this._affectedStart = null;
                this._affectedEnd = null
            }

            handleNodes(t, e) {
                t = Array.from(t);
                for (let i = 0; i < t.length; i++) {
                    const n = t[i];
                    this._handleNode(n, {isFirst: i === 0 && e.isFirst, isLast: i === t.length - 1 && e.isLast})
                }
                this.schema.removeDisallowedAttributes(this._filterAttributesOf, this.writer);
                this._filterAttributesOf = []
            }

            getSelectionRange() {
                if (this.nodeToSelect) {
                    return $h._createOn(this.nodeToSelect)
                }
                return this.model.schema.getNearestSelectionRange(this.position)
            }

            getAffectedRange() {
                if (!this._affectedStart) {
                    return null
                }
                return new $h(this._affectedStart, this._affectedEnd)
            }

            destroy() {
                if (this._affectedStart) {
                    this._affectedStart.detach()
                }
                if (this._affectedEnd) {
                    this._affectedEnd.detach()
                }
            }

            _handleNode(t, e) {
                if (this.schema.isObject(t)) {
                    this._handleObject(t, e);
                    return
                }
                const i = this._checkAndSplitToAllowedPosition(t, e);
                if (!i) {
                    this._handleDisallowedNode(t, e);
                    return
                }
                this._insert(t);
                this._mergeSiblingsOf(t, e)
            }

            _handleObject(t, e) {
                if (this._checkAndSplitToAllowedPosition(t)) {
                    this._insert(t)
                } else {
                    this._tryAutoparagraphing(t, e)
                }
            }

            _handleDisallowedNode(t, e) {
                if (t.is("element")) {
                    this.handleNodes(t.getChildren(), e)
                } else {
                    this._tryAutoparagraphing(t, e)
                }
            }

            _insert(t) {
                if (!this.schema.checkChild(this.position, t)) {
                    throw new ss["b"]("insertcontent-wrong-position: Given node cannot be inserted on the given position.", this, {
                        node: t,
                        position: this.position
                    })
                }
                const e = Om.fromPosition(this.position, "toNext");
                this._setAffectedBoundaries(this.position);
                this.writer.insert(t, this.position);
                this.position = e.toPosition();
                e.detach();
                if (this.schema.isObject(t) && !this.schema.checkChild(this.position, "$text")) {
                    this.nodeToSelect = t
                } else {
                    this.nodeToSelect = null
                }
                this._filterAttributesOf.push(t)
            }

            _setAffectedBoundaries(t) {
                if (!this._affectedStart) {
                    this._affectedStart = Om.fromPosition(t, "toPrevious")
                }
                if (!this._affectedEnd || this._affectedEnd.isBefore(t)) {
                    if (this._affectedEnd) {
                        this._affectedEnd.detach()
                    }
                    this._affectedEnd = Om.fromPosition(t, "toNext")
                }
            }

            _mergeSiblingsOf(t, e) {
                if (!(t instanceof jh)) {
                    return
                }
                const i = this._canMergeLeft(t, e);
                const n = this._canMergeRight(t, e);
                const o = Om._createBefore(t);
                o.stickiness = "toNext";
                const r = Om._createAfter(t);
                r.stickiness = "toNext";
                if (i) {
                    const t = Om.fromPosition(this.position);
                    t.stickiness = "toNext";
                    if (this._affectedStart.isEqual(o)) {
                        this._affectedStart.detach();
                        this._affectedStart = Om._createAt(o.nodeBefore, "end", "toPrevious")
                    }
                    this.writer.merge(o);
                    if (o.isEqual(this._affectedEnd) && e.isLast) {
                        this._affectedEnd.detach();
                        this._affectedEnd = Om._createAt(o.nodeBefore, "end", "toNext")
                    }
                    this.position = t.toPosition();
                    t.detach()
                }
                if (n) {
                    if (!this.position.isEqual(r)) {
                        throw new ss["b"]("insertcontent-invalid-insertion-position", this)
                    }
                    this.position = Uh._createAt(r.nodeBefore, "end");
                    const t = Om.fromPosition(this.position, "toPrevious");
                    if (this._affectedEnd.isEqual(r)) {
                        this._affectedEnd.detach();
                        this._affectedEnd = Om._createAt(r.nodeBefore, "end", "toNext")
                    }
                    this.writer.merge(r);
                    if (r.getShiftedBy(-1).isEqual(this._affectedStart) && e.isFirst) {
                        this._affectedStart.detach();
                        this._affectedStart = Om._createAt(r.nodeBefore, 0, "toPrevious")
                    }
                    this.position = t.toPosition();
                    t.detach()
                }
                if (i || n) {
                    this._filterAttributesOf.push(this.position.parent)
                }
                o.detach();
                r.detach()
            }

            _canMergeLeft(t, e) {
                const i = t.previousSibling;
                return e.isFirst && i instanceof jh && this.canMergeWith.has(i) && this.model.schema.checkMerge(i, t)
            }

            _canMergeRight(t, e) {
                const i = t.nextSibling;
                return e.isLast && i instanceof jh && this.canMergeWith.has(i) && this.model.schema.checkMerge(t, i)
            }

            _tryAutoparagraphing(t, e) {
                const i = this.writer.createElement("paragraph");
                if (this._getAllowedIn(i, this.position.parent) && this.schema.checkChild(i, t)) {
                    i._appendChild(t);
                    this._handleNode(i, e)
                }
            }

            _checkAndSplitToAllowedPosition(t) {
                const e = this._getAllowedIn(t, this.position.parent);
                if (!e) {
                    return false
                }
                while (e != this.position.parent) {
                    if (this.schema.isLimit(this.position.parent)) {
                        return false
                    }
                    if (this.position.isAtStart) {
                        const t = this.position.parent;
                        this.position = this.writer.createPositionBefore(t);
                        if (t.isEmpty && t.parent === e) {
                            this.writer.remove(t)
                        }
                    } else if (this.position.isAtEnd) {
                        this.position = this.writer.createPositionAfter(this.position.parent)
                    } else {
                        const t = this.writer.createPositionAfter(this.position.parent);
                        this._setAffectedBoundaries(this.position);
                        this.writer.split(this.position);
                        this.position = t;
                        this.canMergeWith.add(this.position.nodeAfter)
                    }
                }
                return true
            }

            _getAllowedIn(t, e) {
                if (this.schema.checkChild(e, t)) {
                    return e
                }
                if (e.parent) {
                    return this._getAllowedIn(t, e.parent)
                }
                return null
            }
        }

        function Bm(t, e, i = {}) {
            if (e.isCollapsed) {
                return
            }
            const n = e.getFirstRange();
            if (n.root.rootName == "$graveyard") {
                return
            }
            const o = t.schema;
            t.change(t => {
                if (!i.doNotResetEntireContent && Hm(o, e)) {
                    jm(t, e, o);
                    return
                }
                const r = n.start;
                const s = Om.fromPosition(n.end, "toNext");
                if (!n.start.isTouching(n.end)) {
                    t.remove(n)
                }
                if (!i.leaveUnmerged) {
                    zm(t, r, s);
                    o.removeDisallowedAttributes(r.parent.getChildren(), t)
                }
                Wm(t, e, r);
                if (!i.doNotAutoparagraph && Lm(o, r)) {
                    Dm(t, r, e)
                }
                s.detach()
            })
        }

        function zm(t, e, i) {
            const n = e.parent;
            const o = i.parent;
            if (n == o) {
                return
            }
            if (t.model.schema.isLimit(n) || t.model.schema.isLimit(o)) {
                return
            }
            if (!Fm(e, i, t.model.schema)) {
                return
            }
            e = t.createPositionAfter(n);
            i = t.createPositionBefore(o);
            if (!i.isEqual(e)) {
                t.insert(o, e)
            }
            t.merge(e);
            while (i.parent.isEmpty) {
                const e = i.parent;
                i = t.createPositionBefore(e);
                t.remove(e)
            }
            zm(t, e, i)
        }

        function Lm(t, e) {
            const i = t.checkChild(e, "$text");
            const n = t.checkChild(e, "paragraph");
            return !i && n
        }

        function Fm(t, e, i) {
            const n = new $h(t, e);
            for (const t of n.getWalker()) {
                if (i.isLimit(t.item)) {
                    return false
                }
            }
            return true
        }

        function Dm(t, e, i) {
            const n = t.createElement("paragraph");
            t.insert(n, e);
            Wm(t, i, t.createPositionAt(n, 0))
        }

        function jm(t, e) {
            const i = t.model.schema.getLimitElement(e);
            t.remove(t.createRangeIn(i));
            Dm(t, t.createPositionAt(i, 0), e)
        }

        function Hm(t, e) {
            const i = t.getLimitElement(e);
            if (!e.containsEntireContent(i)) {
                return false
            }
            const n = e.getFirstRange();
            if (n.start.parent == n.end.parent) {
                return false
            }
            return t.checkChild(i, "paragraph")
        }

        function Wm(t, e, i) {
            if (e instanceof df) {
                t.setSelection(i)
            } else {
                e.setTo(i)
            }
        }

        const qm = ' ,.?!:;"-()';

        function Um(t, e, i = {}) {
            const n = t.schema;
            const o = i.direction != "backward";
            const r = i.unit ? i.unit : "character";
            const s = e.focus;
            const a = new Wh({boundaries: Jm(s, o), singleCharacters: true, direction: o ? "forward" : "backward"});
            const c = {walker: a, schema: n, isForward: o, unit: r};
            let l;
            while (l = a.next()) {
                if (l.done) {
                    return
                }
                const i = $m(c, l.value);
                if (i) {
                    if (e instanceof df) {
                        t.change(t => {
                            t.setSelectionFocus(i)
                        })
                    } else {
                        e.setFocus(i)
                    }
                    return
                }
            }
        }

        function $m(t, e) {
            if (e.type == "text") {
                if (t.unit === "word") {
                    return Km(t.walker, t.isForward)
                }
                return Gm(t.walker, t.unit, t.isForward)
            }
            if (e.type == (t.isForward ? "elementStart" : "elementEnd")) {
                if (t.schema.isObject(e.item)) {
                    return Uh._createAt(e.item, t.isForward ? "after" : "before")
                }
                if (t.schema.checkChild(e.nextPosition, "$text")) {
                    return e.nextPosition
                }
            } else {
                if (t.schema.isLimit(e.item)) {
                    t.walker.skip(() => true);
                    return
                }
                if (t.schema.checkChild(e.nextPosition, "$text")) {
                    return e.nextPosition
                }
            }
        }

        function Gm(t, e) {
            const i = t.position.textNode;
            if (i) {
                const n = i.data;
                let o = t.position.offset - i.startOffset;
                while (vm(n, o) || e == "character" && ym(n, o)) {
                    t.next();
                    o = t.position.offset - i.startOffset
                }
            }
            return t.position
        }

        function Km(t, e) {
            let i = t.position.textNode;
            if (i) {
                let n = t.position.offset - i.startOffset;
                while (!Ym(i.data, n, e) && !Qm(i, n, e)) {
                    t.next();
                    const o = e ? t.position.nodeAfter : t.position.nodeBefore;
                    if (o && o.is("text")) {
                        const n = o.data.charAt(e ? 0 : o.data.length - 1);
                        if (!qm.includes(n)) {
                            t.next();
                            i = t.position.textNode
                        }
                    }
                    n = t.position.offset - i.startOffset
                }
            }
            return t.position
        }

        function Jm(t, e) {
            const i = t.root;
            const n = Uh._createAt(i, e ? "end" : 0);
            if (e) {
                return new $h(t, n)
            } else {
                return new $h(n, t)
            }
        }

        function Ym(t, e, i) {
            const n = e + (i ? 0 : -1);
            return qm.includes(t.charAt(n))
        }

        function Qm(t, e, i) {
            return e === (i ? t.endOffset : 0)
        }

        function Xm(t, e) {
            return t.change(t => {
                const i = t.createDocumentFragment();
                const n = e.getFirstRange();
                if (!n || n.isCollapsed) {
                    return i
                }
                const o = n.start.root;
                const r = n.start.getCommonPath(n.end);
                const s = o.getNodeByPath(r);
                let a;
                if (n.start.parent == n.end.parent) {
                    a = n
                } else {
                    a = t.createRange(t.createPositionAt(s, n.start.path[r.length]), t.createPositionAt(s, n.end.path[r.length] + 1))
                }
                const c = a.end.offset - a.start.offset;
                for (const e of a.getItems({shallow: true})) {
                    if (e.is("textProxy")) {
                        t.appendText(e.data, e.getAttributes(), i)
                    } else {
                        t.append(e._clone(true), i)
                    }
                }
                if (a != n) {
                    const e = n._getTransformedByMove(a.start, t.createPositionAt(i, 0), c)[0];
                    const o = t.createRange(t.createPositionAt(i, 0), e.start);
                    const r = t.createRange(e.end, t.createPositionAt(i, "end"));
                    Zm(r, t);
                    Zm(o, t)
                }
                return i
            })
        }

        function Zm(t, e) {
            const i = [];
            Array.from(t.getItems({direction: "backward"})).map(t => e.createRangeOn(t)).filter(e => {
                const i = (e.start.isAfter(t.start) || e.start.isEqual(t.start)) && (e.end.isBefore(t.end) || e.end.isEqual(t.end));
                return i
            }).forEach(t => {
                i.push(t.start.parent);
                e.remove(t)
            });
            i.forEach(t => {
                let i = t;
                while (i.parent && i.isEmpty) {
                    const t = e.createRangeOn(i);
                    i = i.parent;
                    e.remove(t)
                }
            })
        }

        function tp(t) {
            t.document.registerPostFixer(e => ep(e, t))
        }

        function ep(t, e) {
            const i = e.document.selection;
            const n = e.schema;
            const o = [];
            let r = false;
            for (const t of i.getRanges()) {
                const e = ip(t, n);
                if (e) {
                    o.push(e);
                    r = true
                } else {
                    o.push(t)
                }
            }
            if (r) {
                t.setSelection(ap(o), {backward: i.isBackward})
            }
        }

        function ip(t, e) {
            if (t.isCollapsed) {
                return np(t, e)
            }
            return op(t, e)
        }

        function np(t, e) {
            const i = t.start;
            const n = e.getNearestSelectionRange(i);
            if (!n) {
                return null
            }
            if (!n.isCollapsed) {
                return n
            }
            const o = n.start;
            if (i.isEqual(o)) {
                return null
            }
            return new $h(o)
        }

        function op(t, e) {
            const i = t.start;
            const n = t.end;
            const o = e.checkChild(i, "$text");
            const r = e.checkChild(n, "$text");
            const s = e.getLimitElement(i);
            const a = e.getLimitElement(n);
            if (s === a) {
                if (o && r) {
                    return null
                }
                if (sp(i, n, e)) {
                    const t = i.nodeAfter && e.isObject(i.nodeAfter);
                    const o = t ? null : e.getNearestSelectionRange(i, "forward");
                    const r = n.nodeBefore && e.isObject(n.nodeBefore);
                    const s = r ? null : e.getNearestSelectionRange(n, "backward");
                    const a = o ? o.start : i;
                    const c = s ? s.start : n;
                    return new $h(a, c)
                }
            }
            const c = s && !s.is("rootElement");
            const l = a && !a.is("rootElement");
            if (c || l) {
                const t = i.nodeAfter && n.nodeBefore && i.nodeAfter.parent === n.nodeBefore.parent;
                const o = c && (!t || !cp(i.nodeAfter, e));
                const r = l && (!t || !cp(n.nodeBefore, e));
                let d = i;
                let u = n;
                if (o) {
                    d = Uh._createBefore(rp(s, e))
                }
                if (r) {
                    u = Uh._createAfter(rp(a, e))
                }
                return new $h(d, u)
            }
            return null
        }

        function rp(t, e) {
            let i = t;
            let n = i;
            while (e.isLimit(n) && n.parent) {
                i = n;
                n = n.parent
            }
            return i
        }

        function sp(t, e, i) {
            const n = t.nodeAfter && !i.isLimit(t.nodeAfter) || i.checkChild(t, "$text");
            const o = e.nodeBefore && !i.isLimit(e.nodeBefore) || i.checkChild(e, "$text");
            return n || o
        }

        function ap(t) {
            const e = [];
            e.push(t.shift());
            for (const i of t) {
                const t = e.pop();
                if (i.isIntersecting(t)) {
                    const n = t.start.isAfter(i.start) ? i.start : t.start;
                    const o = t.end.isAfter(i.end) ? t.end : i.end;
                    const r = new $h(n, o);
                    e.push(r)
                } else {
                    e.push(t);
                    e.push(i)
                }
            }
            return e
        }

        function cp(t, e) {
            return t && e.isObject(t)
        }

        class lp {
            constructor() {
                this.markers = new Tm;
                this.document = new Cm(this);
                this.schema = new ug;
                this._pendingChanges = [];
                this._currentWriter = null;
                ["insertContent", "deleteContent", "modifySelection", "getSelectedContent", "applyOperation"].forEach(t => this.decorate(t));
                this.on("applyOperation", (t, e) => {
                    const i = e[0];
                    i._validate()
                }, {priority: "highest"});
                this.schema.register("$root", {isLimit: true});
                this.schema.register("$block", {allowIn: "$root", isBlock: true});
                this.schema.register("$text", {allowIn: "$block", isInline: true});
                this.schema.register("$clipboardHolder", {allowContentOf: "$root", isLimit: true});
                this.schema.extend("$text", {allowIn: "$clipboardHolder"});
                this.schema.register("$marker");
                this.schema.addChildCheck((t, e) => {
                    if (e.name === "$marker") {
                        return true
                    }
                });
                tp(this)
            }

            change(t) {
                try {
                    if (this._pendingChanges.length === 0) {
                        this._pendingChanges.push({batch: new zg, callback: t});
                        return this._runPendingChanges()[0]
                    } else {
                        return t(this._currentWriter)
                    }
                } catch (t) {
                    ss["b"].rethrowUnexpectedError(t, this)
                }
            }

            enqueueChange(t, e) {
                try {
                    if (typeof t === "string") {
                        t = new zg(t)
                    } else if (typeof t == "function") {
                        e = t;
                        t = new zg
                    }
                    this._pendingChanges.push({batch: t, callback: e});
                    if (this._pendingChanges.length == 1) {
                        this._runPendingChanges()
                    }
                } catch (t) {
                    ss["b"].rethrowUnexpectedError(t, this)
                }
            }

            applyOperation(t) {
                t._execute()
            }

            insertContent(t, e, i) {
                return Nm(this, t, e, i)
            }

            deleteContent(t, e) {
                Bm(this, t, e)
            }

            modifySelection(t, e) {
                Um(this, t, e)
            }

            getSelectedContent(t) {
                return Xm(this, t)
            }

            hasContent(t, e) {
                const i = t instanceof jh ? $h._createIn(t) : t;
                if (i.isCollapsed) {
                    return false
                }
                for (const t of this.markers.getMarkersIntersectingRange(i)) {
                    if (t.affectsData) {
                        return true
                    }
                }
                const {ignoreWhitespaces: n = false} = e || {};
                for (const t of i.getItems()) {
                    if (t.is("textProxy")) {
                        if (!n) {
                            return true
                        } else if (t.data.search(/\S/) !== -1) {
                            return true
                        }
                    } else if (this.schema.isObject(t)) {
                        return true
                    }
                }
                return false
            }

            createPositionFromPath(t, e, i) {
                return new Uh(t, e, i)
            }

            createPositionAt(t, e) {
                return Uh._createAt(t, e)
            }

            createPositionAfter(t) {
                return Uh._createAfter(t)
            }

            createPositionBefore(t) {
                return Uh._createBefore(t)
            }

            createRange(t, e) {
                return new $h(t, e)
            }

            createRangeIn(t) {
                return $h._createIn(t)
            }

            createRangeOn(t) {
                return $h._createOn(t)
            }

            createSelection(t, e, i) {
                return new Xh(t, e, i)
            }

            createBatch(t) {
                return new zg(t)
            }

            createOperationFromJSON(t) {
                return Rm.fromJSON(t, this.document)
            }

            destroy() {
                this.document.destroy();
                this.stopListening()
            }

            _runPendingChanges() {
                const t = [];
                this.fire("_beforeChanges");
                while (this._pendingChanges.length) {
                    const e = this._pendingChanges[0].batch;
                    this._currentWriter = new am(this, e);
                    const i = this._pendingChanges[0].callback(this._currentWriter);
                    t.push(i);
                    this.document._handleChangeBlock(this._currentWriter);
                    this._pendingChanges.shift();
                    this._currentWriter = null
                }
                this.fire("_afterChanges");
                return t
            }
        }

        vs(lp, Jc);

        class dp {
            constructor() {
                this._listener = Object.create(qd)
            }

            listenTo(t) {
                this._listener.listenTo(t, "keydown", (t, e) => {
                    this._listener.fire("_keydown:" + Ml(e), e)
                })
            }

            set(t, e, i = {}) {
                const n = Bl(t);
                const o = i.priority;
                this._listener.listenTo(this._listener, "_keydown:" + n, (t, i) => {
                    e(i, () => {
                        i.preventDefault();
                        i.stopPropagation();
                        t.stop()
                    });
                    t.return = true
                }, {priority: o})
            }

            press(t) {
                return !!this._listener.fire("_keydown:" + Ml(t), t)
            }

            destroy() {
                this._listener.stopListening()
            }
        }

        class up extends dp {
            constructor(t) {
                super();
                this.editor = t
            }

            set(t, e, i = {}) {
                if (typeof e == "string") {
                    const t = e;
                    e = (e, i) => {
                        this.editor.execute(t);
                        i()
                    }
                }
                super.set(t, e, i)
            }
        }

        class hp {
            constructor(t = {}) {
                this._context = t.context || new Is({language: t.language});
                this._context._addEditor(this, !t.context);
                const e = Array.from(this.constructor.builtinPlugins || []);
                this.config = new Jr(t, this.constructor.defaultConfig);
                this.config.define("plugins", e);
                this.config.define(this._context._getEditorConfig());
                this.plugins = new xs(this, e, this._context.plugins);
                this.locale = this._context.locale;
                this.t = this.locale.t;
                this.commands = new cg;
                this.set("state", "initializing");
                this.once("ready", () => this.state = "ready", {priority: "high"});
                this.once("destroy", () => this.state = "destroyed", {priority: "high"});
                this.set("isReadOnly", false);
                this.model = new lp;
                const i = new Vc;
                this.data = new Ig(this.model, i);
                this.editing = new ag(this.model, i);
                this.editing.view.document.bind("isReadOnly").to(this);
                this.conversion = new Ng([this.editing.downcastDispatcher, this.data.downcastDispatcher], this.data.upcastDispatcher);
                this.conversion.addAlias("dataDowncast", this.data.downcastDispatcher);
                this.conversion.addAlias("editingDowncast", this.editing.downcastDispatcher);
                this.keystrokes = new up(this);
                this.keystrokes.listenTo(this.editing.view.document)
            }

            initPlugins() {
                const t = this.config;
                const e = t.get("plugins");
                const i = t.get("removePlugins") || [];
                const n = t.get("extraPlugins") || [];
                return this.plugins.init(e.concat(n), i)
            }

            destroy() {
                let t = Promise.resolve();
                if (this.state == "initializing") {
                    t = new Promise(t => this.once("ready", t))
                }
                return t.then(() => {
                    this.fire("destroy");
                    this.stopListening();
                    this.commands.destroy()
                }).then(() => this.plugins.destroy()).then(() => {
                    this.model.destroy();
                    this.data.destroy();
                    this.editing.destroy();
                    this.keystrokes.destroy()
                }).then(() => this._context._removeEditor(this))
            }

            execute(...t) {
                try {
                    this.commands.execute(...t)
                } catch (t) {
                    ss["b"].rethrowUnexpectedError(t, this)
                }
            }
        }

        vs(hp, Jc);

        class fp {
            getHtml(t) {
                const e = document.implementation.createHTMLDocument("");
                const i = e.createElement("div");
                i.appendChild(t);
                return i.innerHTML
            }
        }

        class gp {
            constructor(t) {
                this._domParser = new DOMParser;
                this._domConverter = new zd(t, {blockFillerMode: "nbsp"});
                this._htmlWriter = new fp
            }

            toData(t) {
                const e = this._domConverter.viewToDom(t, document);
                return this._htmlWriter.getHtml(e)
            }

            toView(t) {
                const e = this._toDom(t);
                return this._domConverter.domToView(e)
            }

            _toDom(t) {
                const e = this._domParser.parseFromString(t, "text/html");
                const i = e.createDocumentFragment();
                const n = e.body.childNodes;
                while (n.length > 0) {
                    i.appendChild(n[0])
                }
                return i
            }
        }

        class mp {
            constructor(t) {
                this.editor = t;
                this.set("isEnabled", true);
                this._disableStack = new Set
            }

            forceDisabled(t) {
                this._disableStack.add(t);
                if (this._disableStack.size == 1) {
                    this.on("set:isEnabled", pp, {priority: "highest"});
                    this.isEnabled = false
                }
            }

            clearForceDisabled(t) {
                this._disableStack.delete(t);
                if (this._disableStack.size == 0) {
                    this.off("set:isEnabled", pp);
                    this.isEnabled = true
                }
            }

            destroy() {
                this.stopListening()
            }

            static get isContextPlugin() {
                return false
            }
        }

        vs(mp, Jc);

        function pp(t) {
            t.return = false;
            t.stop()
        }

        class bp extends ys {
            constructor(t) {
                super({idProperty: "viewUid"});
                this.on("add", (t, e, i) => {
                    if (!e.isRendered) {
                        e.render()
                    }
                    if (e.element && this._parentElement) {
                        this._parentElement.insertBefore(e.element, this._parentElement.children[i])
                    }
                });
                this.on("remove", (t, e) => {
                    if (e.element && this._parentElement) {
                        e.element.remove()
                    }
                });
                this.locale = t;
                this._parentElement = null
            }

            destroy() {
                this.map(t => t.destroy())
            }

            setParent(t) {
                this._parentElement = t
            }

            delegate(...t) {
                if (!t.length || !wp(t)) {
                    throw new ss["b"]("ui-viewcollection-delegate-wrong-events: All event names must be strings.", this)
                }
                return {
                    to: e => {
                        for (const i of this) {
                            for (const n of t) {
                                i.delegate(n).to(e)
                            }
                        }
                        this.on("add", (i, n) => {
                            for (const i of t) {
                                n.delegate(i).to(e)
                            }
                        });
                        this.on("remove", (i, n) => {
                            for (const i of t) {
                                n.stopDelegating(i, e)
                            }
                        })
                    }
                }
            }
        }

        function wp(t) {
            return t.every(t => typeof t == "string")
        }

        const kp = "http://www.w3.org/1999/xhtml";

        class _p {
            constructor(t) {
                Object.assign(this, Op(Rp(t)));
                this._isRendered = false;
                this._revertData = null
            }

            render() {
                const t = this._renderNode({intoFragment: true});
                this._isRendered = true;
                return t
            }

            apply(t) {
                this._revertData = qp();
                this._renderNode({node: t, isApplying: true, revertData: this._revertData});
                return t
            }

            revert(t) {
                if (!this._revertData) {
                    throw new ss["b"]("ui-template-revert-not-applied: Attempting to revert a template which has not been applied yet.", [this, t])
                }
                this._revertTemplateFromNode(t, this._revertData)
            }

            * getViews() {
                function* t(e) {
                    if (e.children) {
                        for (const i of e.children) {
                            if (jp(i)) {
                                yield i
                            } else if (Hp(i)) {
                                yield* t(i)
                            }
                        }
                    }
                }

                yield* t(this)
            }

            static bind(t, e) {
                return {
                    to(i, n) {
                        return new yp({eventNameOrFunction: i, attribute: i, observable: t, emitter: e, callback: n})
                    }, if(i, n, o) {
                        return new xp({observable: t, emitter: e, attribute: i, valueIfTrue: n, callback: o})
                    }
                }
            }

            static extend(t, e) {
                if (t._isRendered) {
                    throw new ss["b"]("template-extend-render: Attempting to extend a template which has already been rendered.", [this, t])
                }
                Fp(t, Op(Rp(e)))
            }

            _renderNode(t) {
                let e;
                if (t.node) {
                    e = this.tag && this.text
                } else {
                    e = this.tag ? this.text : !this.text
                }
                if (e) {
                    throw new ss["b"]('ui-template-wrong-syntax: Node definition must have either "tag" or "text" when rendering a new Node.', this)
                }
                if (this.text) {
                    return this._renderText(t)
                } else {
                    return this._renderElement(t)
                }
            }

            _renderElement(t) {
                let e = t.node;
                if (!e) {
                    e = t.node = document.createElementNS(this.ns || kp, this.tag)
                }
                this._renderAttributes(t);
                this._renderElementChildren(t);
                this._setUpListeners(t);
                return e
            }

            _renderText(t) {
                let e = t.node;
                if (e) {
                    t.revertData.text = e.textContent
                } else {
                    e = t.node = document.createTextNode("")
                }
                if (Cp(this.text)) {
                    this._bindToObservable({schema: this.text, updater: Pp(e), data: t})
                } else {
                    e.textContent = this.text.join("")
                }
                return e
            }

            _renderAttributes(t) {
                let e, i, n, o;
                if (!this.attributes) {
                    return
                }
                const r = t.node;
                const s = t.revertData;
                for (e in this.attributes) {
                    n = r.getAttribute(e);
                    i = this.attributes[e];
                    if (s) {
                        s.attributes[e] = n
                    }
                    o = ct(i[0]) && i[0].ns ? i[0].ns : null;
                    if (Cp(i)) {
                        const a = o ? i[0].value : i;
                        if (s && Up(e)) {
                            a.unshift(n)
                        }
                        this._bindToObservable({schema: a, updater: Sp(r, e, o), data: t})
                    } else if (e == "style" && typeof i[0] !== "string") {
                        this._renderStyleAttribute(i[0], t)
                    } else {
                        if (s && n && Up(e)) {
                            i.unshift(n)
                        }
                        i = i.map(t => t ? t.value || t : t).reduce((t, e) => t.concat(e), []).reduce(zp, "");
                        if (!Dp(i)) {
                            r.setAttributeNS(o, e, i)
                        }
                    }
                }
            }

            _renderStyleAttribute(t, e) {
                const i = e.node;
                for (const n in t) {
                    const o = t[n];
                    if (Cp(o)) {
                        this._bindToObservable({schema: [o], updater: Ep(i, n), data: e})
                    } else {
                        i.style[n] = o
                    }
                }
            }

            _renderElementChildren(t) {
                const e = t.node;
                const i = t.intoFragment ? document.createDocumentFragment() : e;
                const n = t.isApplying;
                let o = 0;
                for (const r of this.children) {
                    if (Wp(r)) {
                        if (!n) {
                            r.setParent(e);
                            for (const t of r) {
                                i.appendChild(t.element)
                            }
                        }
                    } else if (jp(r)) {
                        if (!n) {
                            if (!r.isRendered) {
                                r.render()
                            }
                            i.appendChild(r.element)
                        }
                    } else if (xd(r)) {
                        i.appendChild(r)
                    } else {
                        if (n) {
                            const e = t.revertData;
                            const n = qp();
                            e.children.push(n);
                            r._renderNode({node: i.childNodes[o++], isApplying: true, revertData: n})
                        } else {
                            i.appendChild(r.render())
                        }
                    }
                }
                if (t.intoFragment) {
                    e.appendChild(i)
                }
            }

            _setUpListeners(t) {
                if (!this.eventListeners) {
                    return
                }
                for (const e in this.eventListeners) {
                    const i = this.eventListeners[e].map(i => {
                        const [n, o] = e.split("@");
                        return i.activateDomEventListener(n, o, t)
                    });
                    if (t.revertData) {
                        t.revertData.bindings.push(i)
                    }
                }
            }

            _bindToObservable({schema: t, updater: e, data: i}) {
                const n = i.revertData;
                Tp(t, e, i);
                const o = t.filter(t => !Dp(t)).filter(t => t.observable).map(n => n.activateAttributeListener(t, e, i));
                if (n) {
                    n.bindings.push(o)
                }
            }

            _revertTemplateFromNode(t, e) {
                for (const t of e.bindings) {
                    for (const e of t) {
                        e()
                    }
                }
                if (e.text) {
                    t.textContent = e.text;
                    return
                }
                for (const i in e.attributes) {
                    const n = e.attributes[i];
                    if (n === null) {
                        t.removeAttribute(i)
                    } else {
                        t.setAttribute(i, n)
                    }
                }
                for (let i = 0; i < e.children.length; ++i) {
                    this._revertTemplateFromNode(t.childNodes[i], e.children[i])
                }
            }
        }

        vs(_p, ds);

        class vp {
            constructor(t) {
                Object.assign(this, t)
            }

            getValue(t) {
                const e = this.observable[this.attribute];
                return this.callback ? this.callback(e, t) : e
            }

            activateAttributeListener(t, e, i) {
                const n = () => Tp(t, e, i);
                this.emitter.listenTo(this.observable, "change:" + this.attribute, n);
                return () => {
                    this.emitter.stopListening(this.observable, "change:" + this.attribute, n)
                }
            }
        }

        class yp extends vp {
            activateDomEventListener(t, e, i) {
                const n = (t, i) => {
                    if (!e || i.target.matches(e)) {
                        if (typeof this.eventNameOrFunction == "function") {
                            this.eventNameOrFunction(i)
                        } else {
                            this.observable.fire(this.eventNameOrFunction, i)
                        }
                    }
                };
                this.emitter.listenTo(i.node, t, n);
                return () => {
                    this.emitter.stopListening(i.node, t, n)
                }
            }
        }

        class xp extends vp {
            getValue(t) {
                const e = super.getValue(t);
                return Dp(e) ? false : this.valueIfTrue || true
            }
        }

        function Cp(t) {
            if (!t) {
                return false
            }
            if (t.value) {
                t = t.value
            }
            if (Array.isArray(t)) {
                return t.some(Cp)
            } else if (t instanceof vp) {
                return true
            }
            return false
        }

        function Ap(t, e) {
            return t.map(t => {
                if (t instanceof vp) {
                    return t.getValue(e)
                }
                return t
            })
        }

        function Tp(t, e, {node: i}) {
            let n = Ap(t, i);
            if (t.length == 1 && t[0] instanceof xp) {
                n = n[0]
            } else {
                n = n.reduce(zp, "")
            }
            if (Dp(n)) {
                e.remove()
            } else {
                e.set(n)
            }
        }

        function Pp(t) {
            return {
                set(e) {
                    t.textContent = e
                }, remove() {
                    t.textContent = ""
                }
            }
        }

        function Sp(t, e, i) {
            return {
                set(n) {
                    t.setAttributeNS(i, e, n)
                }, remove() {
                    t.removeAttributeNS(i, e)
                }
            }
        }

        function Ep(t, e) {
            return {
                set(i) {
                    t.style[e] = i
                }, remove() {
                    t.style[e] = null
                }
            }
        }

        function Rp(t) {
            const e = $r(t, t => {
                if (t && (t instanceof vp || Hp(t) || jp(t) || Wp(t))) {
                    return t
                }
            });
            return e
        }

        function Op(t) {
            if (typeof t == "string") {
                t = Np(t)
            } else if (t.text) {
                Mp(t)
            }
            if (t.on) {
                t.eventListeners = Vp(t.on);
                delete t.on
            }
            if (!t.text) {
                if (t.attributes) {
                    Ip(t.attributes)
                }
                const e = [];
                if (t.children) {
                    if (Wp(t.children)) {
                        e.push(t.children)
                    } else {
                        for (const i of t.children) {
                            if (Hp(i) || jp(i) || xd(i)) {
                                e.push(i)
                            } else {
                                e.push(new _p(i))
                            }
                        }
                    }
                }
                t.children = e
            }
            return t
        }

        function Ip(t) {
            for (const e in t) {
                if (t[e].value) {
                    t[e].value = [].concat(t[e].value)
                }
                Bp(t, e)
            }
        }

        function Vp(t) {
            for (const e in t) {
                Bp(t, e)
            }
            return t
        }

        function Np(t) {
            return {text: [t]}
        }

        function Mp(t) {
            if (!Array.isArray(t.text)) {
                t.text = [t.text]
            }
        }

        function Bp(t, e) {
            if (!Array.isArray(t[e])) {
                t[e] = [t[e]]
            }
        }

        function zp(t, e) {
            if (Dp(e)) {
                return t
            } else if (Dp(t)) {
                return e
            } else {
                return `${t} ${e}`
            }
        }

        function Lp(t, e) {
            for (const i in e) {
                if (t[i]) {
                    t[i].push(...e[i])
                } else {
                    t[i] = e[i]
                }
            }
        }

        function Fp(t, e) {
            if (e.attributes) {
                if (!t.attributes) {
                    t.attributes = {}
                }
                Lp(t.attributes, e.attributes)
            }
            if (e.eventListeners) {
                if (!t.eventListeners) {
                    t.eventListeners = {}
                }
                Lp(t.eventListeners, e.eventListeners)
            }
            if (e.text) {
                t.text.push(...e.text)
            }
            if (e.children && e.children.length) {
                if (t.children.length != e.children.length) {
                    throw new ss["b"]("ui-template-extend-children-mismatch: The number of children in extended definition does not match.", t)
                }
                let i = 0;
                for (const n of e.children) {
                    Fp(t.children[i++], n)
                }
            }
        }

        function Dp(t) {
            return !t && t !== 0
        }

        function jp(t) {
            return t instanceof Gp
        }

        function Hp(t) {
            return t instanceof _p
        }

        function Wp(t) {
            return t instanceof bp
        }

        function qp() {
            return {children: [], bindings: [], attributes: {}}
        }

        function Up(t) {
            return t == "class" || t == "style"
        }

        var $p = i(15);

        class Gp {
            constructor(t) {
                this.element = null;
                this.isRendered = false;
                this.locale = t;
                this.t = t && t.t;
                this._viewCollections = new ys;
                this._unboundChildren = this.createCollection();
                this._viewCollections.on("add", (e, i) => {
                    i.locale = t
                });
                this.decorate("render")
            }

            get bindTemplate() {
                if (this._bindTemplate) {
                    return this._bindTemplate
                }
                return this._bindTemplate = _p.bind(this, this)
            }

            createCollection() {
                const t = new bp;
                this._viewCollections.add(t);
                return t
            }

            registerChild(t) {
                if (!js(t)) {
                    t = [t]
                }
                for (const e of t) {
                    this._unboundChildren.add(e)
                }
            }

            deregisterChild(t) {
                if (!js(t)) {
                    t = [t]
                }
                for (const e of t) {
                    this._unboundChildren.remove(e)
                }
            }

            setTemplate(t) {
                this.template = new _p(t)
            }

            extendTemplate(t) {
                _p.extend(this.template, t)
            }

            render() {
                if (this.isRendered) {
                    throw new ss["b"]("ui-view-render-already-rendered: This View has already been rendered.", this)
                }
                if (this.template) {
                    this.element = this.template.render();
                    this.registerChild(this.template.getViews())
                }
                this.isRendered = true
            }

            destroy() {
                this.stopListening();
                this._viewCollections.map(t => t.destroy());
                if (this.template && this.template._revertData) {
                    this.template.revert(this.element)
                }
            }
        }

        vs(Gp, qd);
        vs(Gp, Jc);

        function Kp(t) {
            while (t && t.tagName.toLowerCase() != "html") {
                if (Id.window.getComputedStyle(t).position != "static") {
                    return t
                }
                t = t.parentElement
            }
            return null
        }

        function Jp({element: t, target: e, positions: i, limiter: n, fitInViewport: o}) {
            if (gt(e)) {
                e = e()
            }
            if (gt(n)) {
                n = n()
            }
            const r = Kp(t.parentElement);
            const s = new vh(t);
            const a = new vh(e);
            let c;
            let l;
            if (!n && !o) {
                [l, c] = Yp(i[0], a, s)
            } else {
                const t = n && new vh(n).getVisible();
                const e = o && new vh(Id.window);
                [l, c] = Qp(i, a, s, t, e) || Yp(i[0], a, s)
            }
            let {left: d, top: u} = Xp(c);
            if (r) {
                const t = Xp(new vh(r));
                const e = kh(r);
                d -= t.left;
                u -= t.top;
                d += r.scrollLeft;
                u += r.scrollTop;
                d -= e.left;
                u -= e.top
            }
            return {left: d, top: u, name: l}
        }

        function Yp(t, e, i) {
            const {left: n, top: o, name: r} = t(e, i);
            return [r, i.clone().moveTo(n, o)]
        }

        function Qp(t, e, i, n, o) {
            let r = 0;
            let s = 0;
            let a;
            let c;
            const l = i.getArea();
            t.some(t => {
                const [d, u] = Yp(t, e, i);
                let h;
                let f;
                if (n) {
                    if (o) {
                        const t = n.getIntersection(o);
                        if (t) {
                            h = t.getIntersectionArea(u)
                        } else {
                            h = 0
                        }
                    } else {
                        h = n.getIntersectionArea(u)
                    }
                }
                if (o) {
                    f = o.getIntersectionArea(u)
                }
                if (o && !n) {
                    if (f > s) {
                        g()
                    }
                } else if (!o && n) {
                    if (h > r) {
                        g()
                    }
                } else {
                    if (f > s && h >= r) {
                        g()
                    } else if (f >= s && h > r) {
                        g()
                    }
                }

                function g() {
                    s = f;
                    r = h;
                    a = u;
                    c = d
                }

                return h === l
            });
            return a ? [c, a] : null
        }

        function Xp({left: t, top: e}) {
            const {scrollX: i, scrollY: n} = Id.window;
            return {left: t + i, top: e + n}
        }

        function Zp(t) {
            return e => e + t
        }

        var tb = i(17);
        const eb = Zp("px");
        const ib = Id.document.body;

        class nb extends Gp {
            constructor(t) {
                super(t);
                const e = this.bindTemplate;
                this.set("top", 0);
                this.set("left", 0);
                this.set("position", "arrow_nw");
                this.set("isVisible", false);
                this.set("withArrow", true);
                this.set("class");
                this.content = this.createCollection();
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-balloon-panel", e.to("position", t => `ck-balloon-panel_${t}`), e.if("isVisible", "ck-balloon-panel_visible"), e.if("withArrow", "ck-balloon-panel_with-arrow"), e.to("class")],
                        style: {top: e.to("top", eb), left: e.to("left", eb)}
                    },
                    children: this.content
                })
            }

            show() {
                this.isVisible = true
            }

            hide() {
                this.isVisible = false
            }

            attachTo(t) {
                this.show();
                const e = nb.defaultPositions;
                const i = Object.assign({}, {
                    element: this.element,
                    positions: [e.southArrowNorth, e.southArrowNorthMiddleWest, e.southArrowNorthMiddleEast, e.southArrowNorthWest, e.southArrowNorthEast, e.northArrowSouth, e.northArrowSouthMiddleWest, e.northArrowSouthMiddleEast, e.northArrowSouthWest, e.northArrowSouthEast],
                    limiter: ib,
                    fitInViewport: true
                }, t);
                const n = nb._getOptimalPosition(i);
                const o = parseInt(n.left);
                const r = parseInt(n.top);
                const s = n.name;
                Object.assign(this, {top: r, left: o, position: s})
            }

            pin(t) {
                this.unpin();
                this._pinWhenIsVisibleCallback = () => {
                    if (this.isVisible) {
                        this._startPinning(t)
                    } else {
                        this._stopPinning()
                    }
                };
                this._startPinning(t);
                this.listenTo(this, "change:isVisible", this._pinWhenIsVisibleCallback)
            }

            unpin() {
                if (this._pinWhenIsVisibleCallback) {
                    this._stopPinning();
                    this.stopListening(this, "change:isVisible", this._pinWhenIsVisibleCallback);
                    this._pinWhenIsVisibleCallback = null;
                    this.hide()
                }
            }

            _startPinning(t) {
                this.attachTo(t);
                const e = ob(t.target);
                const i = t.limiter ? ob(t.limiter) : ib;
                this.listenTo(Id.document, "scroll", (n, o) => {
                    const r = o.target;
                    const s = e && r.contains(e);
                    const a = i && r.contains(i);
                    if (s || a || !e || !i) {
                        this.attachTo(t)
                    }
                }, {useCapture: true});
                this.listenTo(Id.window, "resize", () => {
                    this.attachTo(t)
                })
            }

            _stopPinning() {
                this.stopListening(Id.document, "scroll");
                this.stopListening(Id.window, "resize")
            }
        }

        function ob(t) {
            if (Kr(t)) {
                return t
            }
            if (wh(t)) {
                return t.commonAncestorContainer
            }
            if (typeof t == "function") {
                return ob(t())
            }
            return null
        }

        nb.arrowHorizontalOffset = 25;
        nb.arrowVerticalOffset = 10;
        nb._getOptimalPosition = Jp;
        nb.defaultPositions = {
            northWestArrowSouthWest: (t, e) => ({
                top: rb(t, e),
                left: t.left - nb.arrowHorizontalOffset,
                name: "arrow_sw"
            }),
            northWestArrowSouthMiddleWest: (t, e) => ({
                top: rb(t, e),
                left: t.left - e.width * .25 - nb.arrowHorizontalOffset,
                name: "arrow_smw"
            }),
            northWestArrowSouth: (t, e) => ({top: rb(t, e), left: t.left - e.width / 2, name: "arrow_s"}),
            northWestArrowSouthMiddleEast: (t, e) => ({
                top: rb(t, e),
                left: t.left - e.width * .75 + nb.arrowHorizontalOffset,
                name: "arrow_sme"
            }),
            northWestArrowSouthEast: (t, e) => ({
                top: rb(t, e),
                left: t.left - e.width + nb.arrowHorizontalOffset,
                name: "arrow_se"
            }),
            northArrowSouthWest: (t, e) => ({
                top: rb(t, e),
                left: t.left + t.width / 2 - nb.arrowHorizontalOffset,
                name: "arrow_sw"
            }),
            northArrowSouthMiddleWest: (t, e) => ({
                top: rb(t, e),
                left: t.left + t.width / 2 - e.width * .25 - nb.arrowHorizontalOffset,
                name: "arrow_smw"
            }),
            northArrowSouth: (t, e) => ({top: rb(t, e), left: t.left + t.width / 2 - e.width / 2, name: "arrow_s"}),
            northArrowSouthMiddleEast: (t, e) => ({
                top: rb(t, e),
                left: t.left + t.width / 2 - e.width * .75 + nb.arrowHorizontalOffset,
                name: "arrow_sme"
            }),
            northArrowSouthEast: (t, e) => ({
                top: rb(t, e),
                left: t.left + t.width / 2 - e.width + nb.arrowHorizontalOffset,
                name: "arrow_se"
            }),
            northEastArrowSouthWest: (t, e) => ({
                top: rb(t, e),
                left: t.right - nb.arrowHorizontalOffset,
                name: "arrow_sw"
            }),
            northEastArrowSouthMiddleWest: (t, e) => ({
                top: rb(t, e),
                left: t.right - e.width * .25 - nb.arrowHorizontalOffset,
                name: "arrow_smw"
            }),
            northEastArrowSouth: (t, e) => ({top: rb(t, e), left: t.right - e.width / 2, name: "arrow_s"}),
            northEastArrowSouthMiddleEast: (t, e) => ({
                top: rb(t, e),
                left: t.right - e.width * .75 + nb.arrowHorizontalOffset,
                name: "arrow_sme"
            }),
            northEastArrowSouthEast: (t, e) => ({
                top: rb(t, e),
                left: t.right - e.width + nb.arrowHorizontalOffset,
                name: "arrow_se"
            }),
            southWestArrowNorthWest: (t, e) => ({
                top: sb(t, e),
                left: t.left - nb.arrowHorizontalOffset,
                name: "arrow_nw"
            }),
            southWestArrowNorthMiddleWest: (t, e) => ({
                top: sb(t, e),
                left: t.left - e.width * .25 - nb.arrowHorizontalOffset,
                name: "arrow_nmw"
            }),
            southWestArrowNorth: (t, e) => ({top: sb(t, e), left: t.left - e.width / 2, name: "arrow_n"}),
            southWestArrowNorthMiddleEast: (t, e) => ({
                top: sb(t, e),
                left: t.left - e.width * .75 + nb.arrowHorizontalOffset,
                name: "arrow_nme"
            }),
            southWestArrowNorthEast: (t, e) => ({
                top: sb(t, e),
                left: t.left - e.width + nb.arrowHorizontalOffset,
                name: "arrow_ne"
            }),
            southArrowNorthWest: (t, e) => ({
                top: sb(t, e),
                left: t.left + t.width / 2 - nb.arrowHorizontalOffset,
                name: "arrow_nw"
            }),
            southArrowNorthMiddleWest: (t, e) => ({
                top: sb(t, e),
                left: t.left + t.width / 2 - e.width * .25 - nb.arrowHorizontalOffset,
                name: "arrow_nmw"
            }),
            southArrowNorth: (t, e) => ({top: sb(t, e), left: t.left + t.width / 2 - e.width / 2, name: "arrow_n"}),
            southArrowNorthMiddleEast: (t, e) => ({
                top: sb(t, e),
                left: t.left + t.width / 2 - e.width * .75 + nb.arrowHorizontalOffset,
                name: "arrow_nme"
            }),
            southArrowNorthEast: (t, e) => ({
                top: sb(t, e),
                left: t.left + t.width / 2 - e.width + nb.arrowHorizontalOffset,
                name: "arrow_ne"
            }),
            southEastArrowNorthWest: (t, e) => ({
                top: sb(t, e),
                left: t.right - nb.arrowHorizontalOffset,
                name: "arrow_nw"
            }),
            southEastArrowNorthMiddleWest: (t, e) => ({
                top: sb(t, e),
                left: t.right - e.width * .25 - nb.arrowHorizontalOffset,
                name: "arrow_nmw"
            }),
            southEastArrowNorth: (t, e) => ({top: sb(t, e), left: t.right - e.width / 2, name: "arrow_n"}),
            southEastArrowNorthMiddleEast: (t, e) => ({
                top: sb(t, e),
                left: t.right - e.width * .75 + nb.arrowHorizontalOffset,
                name: "arrow_nme"
            }),
            southEastArrowNorthEast: (t, e) => ({
                top: sb(t, e),
                left: t.right - e.width + nb.arrowHorizontalOffset,
                name: "arrow_ne"
            })
        };

        function rb(t, e) {
            return t.top - e.height - nb.arrowVerticalOffset
        }

        function sb(t) {
            return t.bottom + nb.arrowVerticalOffset
        }

        var ab = i(19);

        class cb extends Gp {
            constructor() {
                super();
                const t = this.bindTemplate;
                this.set("content", "");
                this.set("viewBox", "0 0 20 20");
                this.set("fillColor", "");
                this.setTemplate({
                    tag: "svg",
                    ns: "http://www.w3.org/2000/svg",
                    attributes: {class: ["ck", "ck-icon"], viewBox: t.to("viewBox")}
                })
            }

            render() {
                super.render();
                this._updateXMLContent();
                this._colorFillPaths();
                this.on("change:content", () => {
                    this._updateXMLContent();
                    this._colorFillPaths()
                });
                this.on("change:fillColor", () => {
                    this._colorFillPaths()
                })
            }

            _updateXMLContent() {
                if (this.content) {
                    const t = (new DOMParser).parseFromString(this.content.trim(), "image/svg+xml");
                    const e = t.querySelector("svg");
                    const i = e.getAttribute("viewBox");
                    if (i) {
                        this.viewBox = i
                    }
                    this.element.innerHTML = "";
                    while (e.childNodes.length > 0) {
                        this.element.appendChild(e.childNodes[0])
                    }
                }
            }

            _colorFillPaths() {
                if (this.fillColor) {
                    this.element.querySelectorAll(".ck-icon__fill").forEach(t => {
                        t.style.fill = this.fillColor
                    })
                }
            }
        }

        var lb = i(21);

        class db extends Gp {
            constructor(t) {
                super(t);
                this.set("text", "");
                this.set("position", "s");
                const e = this.bindTemplate;
                this.setTemplate({
                    tag: "span",
                    attributes: {class: ["ck", "ck-tooltip", e.to("position", t => "ck-tooltip_" + t), e.if("text", "ck-hidden", t => !t.trim())]},
                    children: [{
                        tag: "span",
                        attributes: {class: ["ck", "ck-tooltip__text"]},
                        children: [{text: e.to("text")}]
                    }]
                })
            }
        }

        var ub = i(23);

        class hb extends Gp {
            constructor(t) {
                super(t);
                const e = this.bindTemplate;
                const i = is();
                this.set("class");
                this.set("labelStyle");
                this.set("icon");
                this.set("isEnabled", true);
                this.set("isOn", false);
                this.set("isVisible", true);
                this.set("isToggleable", false);
                this.set("keystroke");
                this.set("label");
                this.set("tabindex", -1);
                this.set("tooltip");
                this.set("tooltipPosition", "s");
                this.set("type", "button");
                this.set("withText", false);
                this.set("withKeystroke", false);
                this.children = this.createCollection();
                this.tooltipView = this._createTooltipView();
                this.labelView = this._createLabelView(i);
                this.iconView = new cb;
                this.iconView.extendTemplate({attributes: {class: "ck-button__icon"}});
                this.keystrokeView = this._createKeystrokeView();
                this.bind("_tooltipString").to(this, "tooltip", this, "label", this, "keystroke", this._getTooltipString.bind(this));
                this.setTemplate({
                    tag: "button",
                    attributes: {
                        class: ["ck", "ck-button", e.to("class"), e.if("isEnabled", "ck-disabled", t => !t), e.if("isVisible", "ck-hidden", t => !t), e.to("isOn", t => t ? "ck-on" : "ck-off"), e.if("withText", "ck-button_with-text"), e.if("withKeystroke", "ck-button_with-keystroke")],
                        type: e.to("type", t => t ? t : "button"),
                        tabindex: e.to("tabindex"),
                        "aria-labelledby": `ck-editor__aria-label_${i}`,
                        "aria-disabled": e.if("isEnabled", true, t => !t),
                        "aria-pressed": e.to("isOn", t => this.isToggleable ? String(t) : false)
                    },
                    children: this.children,
                    on: {
                        mousedown: e.to(t => {
                            t.preventDefault()
                        }), click: e.to(t => {
                            if (this.isEnabled) {
                                this.fire("execute")
                            } else {
                                t.preventDefault()
                            }
                        })
                    }
                })
            }

            render() {
                super.render();
                if (this.icon) {
                    this.iconView.bind("content").to(this, "icon");
                    this.children.add(this.iconView)
                }
                this.children.add(this.tooltipView);
                this.children.add(this.labelView);
                if (this.withKeystroke) {
                    this.children.add(this.keystrokeView)
                }
            }

            focus() {
                this.element.focus()
            }

            _createTooltipView() {
                const t = new db;
                t.bind("text").to(this, "_tooltipString");
                t.bind("position").to(this, "tooltipPosition");
                return t
            }

            _createLabelView(t) {
                const e = new Gp;
                const i = this.bindTemplate;
                e.setTemplate({
                    tag: "span",
                    attributes: {
                        class: ["ck", "ck-button__label"],
                        style: i.to("labelStyle"),
                        id: `ck-editor__aria-label_${t}`
                    },
                    children: [{text: this.bindTemplate.to("label")}]
                });
                return e
            }

            _createKeystrokeView() {
                const t = new Gp;
                t.setTemplate({
                    tag: "span",
                    attributes: {class: ["ck", "ck-button__keystroke"]},
                    children: [{text: this.bindTemplate.to("keystroke", t => zl(t))}]
                });
                return t
            }

            _getTooltipString(t, e, i) {
                if (t) {
                    if (typeof t == "string") {
                        return t
                    } else {
                        if (i) {
                            i = zl(i)
                        }
                        if (t instanceof Function) {
                            return t(e, i)
                        } else {
                            return `${e}${i ? ` (${i})` : ""}`
                        }
                    }
                }
                return ""
            }
        }

        class fb {
            constructor() {
                this.set("isFocused", false);
                this.set("focusedElement", null);
                this._elements = new Set;
                this._nextEventLoopTimeout = null
            }

            add(t) {
                if (this._elements.has(t)) {
                    throw new ss["b"]("focusTracker-add-element-already-exist", this)
                }
                this.listenTo(t, "focus", () => this._focus(t), {useCapture: true});
                this.listenTo(t, "blur", () => this._blur(), {useCapture: true});
                this._elements.add(t)
            }

            remove(t) {
                if (t === this.focusedElement) {
                    this._blur(t)
                }
                if (this._elements.has(t)) {
                    this.stopListening(t);
                    this._elements.delete(t)
                }
            }

            destroy() {
                this.stopListening()
            }

            _focus(t) {
                clearTimeout(this._nextEventLoopTimeout);
                this.focusedElement = t;
                this.isFocused = true
            }

            _blur() {
                clearTimeout(this._nextEventLoopTimeout);
                this._nextEventLoopTimeout = setTimeout(() => {
                    this.focusedElement = null;
                    this.isFocused = false
                }, 0)
            }
        }

        vs(fb, qd);
        vs(fb, Jc);
        var gb = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.463 5.187a.888.888 0 1 1 1.254 1.255L9.16 10l3.557 3.557a.888.888 0 1 1-1.254 1.255L7.26 10.61a.888.888 0 0 1 .16-1.382l4.043-4.042z"/></svg>';
        var mb = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M8.537 14.813a.888.888 0 1 1-1.254-1.255L10.84 10 7.283 6.442a.888.888 0 1 1 1.254-1.255L12.74 9.39a.888.888 0 0 1-.16 1.382l-4.043 4.042z"/></svg>';
        var pb = i(25);
        var bb = i(27);
        const wb = Zp("px");

        class kb extends mp {
            static get pluginName() {
                return "ContextualBalloon"
            }

            constructor(t) {
                super(t);
                this.positionLimiter = () => {
                    const t = this.editor.editing.view;
                    const e = t.document;
                    const i = e.selection.editableElement;
                    if (i) {
                        return t.domConverter.mapViewToDom(i.root)
                    }
                    return null
                };
                this.set("visibleView", null);
                this.view = new nb(t.locale);
                t.ui.view.body.add(this.view);
                t.ui.focusTracker.add(this.view.element);
                this._viewToStack = new Map;
                this._idToStack = new Map;
                this.set("_numberOfStacks", 0);
                this.set("_singleViewMode", false);
                this._rotatorView = this._createRotatorView();
                this._fakePanelsView = this._createFakePanelsView()
            }

            hasView(t) {
                return Array.from(this._viewToStack.keys()).includes(t)
            }

            add(t) {
                if (this.hasView(t.view)) {
                    throw new ss["b"]("contextualballoon-add-view-exist: Cannot add configuration of the same view twice.", [this, t])
                }
                const e = t.stackId || "main";
                if (!this._idToStack.has(e)) {
                    this._idToStack.set(e, new Map([[t.view, t]]));
                    this._viewToStack.set(t.view, this._idToStack.get(e));
                    this._numberOfStacks = this._idToStack.size;
                    if (!this._visibleStack || t.singleViewMode) {
                        this.showStack(e)
                    }
                    return
                }
                const i = this._idToStack.get(e);
                if (t.singleViewMode) {
                    this.showStack(e)
                }
                i.set(t.view, t);
                this._viewToStack.set(t.view, i);
                if (i === this._visibleStack) {
                    this._showView(t)
                }
            }

            remove(t) {
                if (!this.hasView(t)) {
                    throw new ss["b"]("contextualballoon-remove-view-not-exist: Cannot remove the configuration of a non-existent view.", [this, t])
                }
                const e = this._viewToStack.get(t);
                if (this._singleViewMode && this.visibleView === t) {
                    this._singleViewMode = false
                }
                if (this.visibleView === t) {
                    if (e.size === 1) {
                        if (this._idToStack.size > 1) {
                            this._showNextStack()
                        } else {
                            this.view.hide();
                            this.visibleView = null;
                            this._rotatorView.hideView()
                        }
                    } else {
                        this._showView(Array.from(e.values())[e.size - 2])
                    }
                }
                if (e.size === 1) {
                    this._idToStack.delete(this._getStackId(e));
                    this._numberOfStacks = this._idToStack.size
                } else {
                    e.delete(t)
                }
                this._viewToStack.delete(t)
            }

            updatePosition(t) {
                if (t) {
                    this._visibleStack.get(this.visibleView).position = t
                }
                this.view.pin(this._getBalloonPosition());
                this._fakePanelsView.updatePosition()
            }

            showStack(t) {
                this.visibleStack = t;
                const e = this._idToStack.get(t);
                if (!e) {
                    throw new ss["b"]("contextualballoon-showstack-stack-not-exist: Cannot show a stack that does not exist.", this)
                }
                if (this._visibleStack === e) {
                    return
                }
                this._showView(Array.from(e.values()).pop())
            }

            get _visibleStack() {
                return this._viewToStack.get(this.visibleView)
            }

            _getStackId(t) {
                const e = Array.from(this._idToStack.entries()).find(e => e[1] === t);
                return e[0]
            }

            _showNextStack() {
                const t = Array.from(this._idToStack.values());
                let e = t.indexOf(this._visibleStack) + 1;
                if (!t[e]) {
                    e = 0
                }
                this.showStack(this._getStackId(t[e]))
            }

            _showPrevStack() {
                const t = Array.from(this._idToStack.values());
                let e = t.indexOf(this._visibleStack) - 1;
                if (!t[e]) {
                    e = t.length - 1
                }
                this.showStack(this._getStackId(t[e]))
            }

            _createRotatorView() {
                const t = new _b(this.editor.locale);
                const e = this.editor.locale.t;
                this.view.content.add(t);
                t.bind("isNavigationVisible").to(this, "_numberOfStacks", this, "_singleViewMode", (t, e) => !e && t > 1);
                t.on("change:isNavigationVisible", () => this.updatePosition(), {priority: "low"});
                t.bind("counter").to(this, "visibleView", this, "_numberOfStacks", (t, i) => {
                    if (i < 2) {
                        return ""
                    }
                    const n = Array.from(this._idToStack.values()).indexOf(this._visibleStack) + 1;
                    return e("lu", [n, i])
                });
                t.buttonNextView.on("execute", () => {
                    if (t.focusTracker.isFocused) {
                        this.editor.editing.view.focus()
                    }
                    this._showNextStack()
                });
                t.buttonPrevView.on("execute", () => {
                    if (t.focusTracker.isFocused) {
                        this.editor.editing.view.focus()
                    }
                    this._showPrevStack()
                });
                return t
            }

            _createFakePanelsView() {
                const t = new vb(this.editor.locale, this.view);
                t.bind("numberOfPanels").to(this, "_numberOfStacks", this, "_singleViewMode", (t, e) => {
                    const i = !e && t >= 2;
                    return i ? Math.min(t - 1, 2) : 0
                });
                t.listenTo(this.view, "change:top", () => t.updatePosition());
                t.listenTo(this.view, "change:left", () => t.updatePosition());
                this.editor.ui.view.body.add(t);
                return t
            }

            _showView({view: t, balloonClassName: e = "", withArrow: i = true, singleViewMode: n = false}) {
                this.view.class = e;
                this.view.withArrow = i;
                this._rotatorView.showView(t);
                this.visibleView = t;
                this.view.pin(this._getBalloonPosition());
                this._fakePanelsView.updatePosition();
                if (n) {
                    this._singleViewMode = true
                }
            }

            _getBalloonPosition() {
                let t = Array.from(this._visibleStack.values()).pop().position;
                if (t && !t.limiter) {
                    t = Object.assign({}, t, {limiter: this.positionLimiter})
                }
                return t
            }
        }

        class _b extends Gp {
            constructor(t) {
                super(t);
                const e = t.t;
                const i = this.bindTemplate;
                this.set("isNavigationVisible", true);
                this.focusTracker = new fb;
                this.buttonPrevView = this._createButtonView(e("lv"), gb);
                this.buttonNextView = this._createButtonView(e("lw"), mb);
                this.content = this.createCollection();
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-balloon-rotator"], "z-index": "-1"},
                    children: [{
                        tag: "div",
                        attributes: {class: ["ck-balloon-rotator__navigation", i.to("isNavigationVisible", t => t ? "" : "ck-hidden")]},
                        children: [this.buttonPrevView, {
                            tag: "span",
                            attributes: {class: ["ck-balloon-rotator__counter"]},
                            children: [{text: i.to("counter")}]
                        }, this.buttonNextView]
                    }, {tag: "div", attributes: {class: "ck-balloon-rotator__content"}, children: this.content}]
                })
            }

            render() {
                super.render();
                this.focusTracker.add(this.element)
            }

            showView(t) {
                this.hideView();
                this.content.add(t)
            }

            hideView() {
                this.content.clear()
            }

            _createButtonView(t, e) {
                const i = new hb(this.locale);
                i.set({label: t, icon: e, tooltip: true});
                return i
            }
        }

        class vb extends Gp {
            constructor(t, e) {
                super(t);
                const i = this.bindTemplate;
                this.set("top", 0);
                this.set("left", 0);
                this.set("height", 0);
                this.set("width", 0);
                this.set("numberOfPanels", 0);
                this.content = this.createCollection();
                this._balloonPanelView = e;
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck-fake-panel", i.to("numberOfPanels", t => t ? "" : "ck-hidden")],
                        style: {
                            top: i.to("top", wb),
                            left: i.to("left", wb),
                            width: i.to("width", wb),
                            height: i.to("height", wb)
                        }
                    },
                    children: this.content
                });
                this.on("change:numberOfPanels", (t, e, i, n) => {
                    if (i > n) {
                        this._addPanels(i - n)
                    } else {
                        this._removePanels(n - i)
                    }
                    this.updatePosition()
                })
            }

            _addPanels(t) {
                while (t--) {
                    const t = new Gp;
                    t.setTemplate({tag: "div"});
                    this.content.add(t);
                    this.registerChild(t)
                }
            }

            _removePanels(t) {
                while (t--) {
                    const t = this.content.last;
                    this.content.remove(t);
                    this.deregisterChild(t);
                    t.destroy()
                }
            }

            updatePosition() {
                if (this.numberOfPanels) {
                    const {top: t, left: e} = this._balloonPanelView;
                    const {width: i, height: n} = new vh(this._balloonPanelView.element);
                    Object.assign(this, {top: t, left: e, width: i, height: n})
                }
            }
        }

        class yb {
            constructor(t) {
                Object.assign(this, t);
                if (t.actions && t.keystrokeHandler) {
                    for (const e in t.actions) {
                        let i = t.actions[e];
                        if (typeof i == "string") {
                            i = [i]
                        }
                        for (const n of i) {
                            t.keystrokeHandler.set(n, (t, i) => {
                                this[e]();
                                i()
                            })
                        }
                    }
                }
            }

            get first() {
                return this.focusables.find(xb) || null
            }

            get last() {
                return this.focusables.filter(xb).slice(-1)[0] || null
            }

            get next() {
                return this._getFocusableItem(1)
            }

            get previous() {
                return this._getFocusableItem(-1)
            }

            get current() {
                let t = null;
                if (this.focusTracker.focusedElement === null) {
                    return null
                }
                this.focusables.find((e, i) => {
                    const n = e.element === this.focusTracker.focusedElement;
                    if (n) {
                        t = i
                    }
                    return n
                });
                return t
            }

            focusFirst() {
                this._focus(this.first)
            }

            focusLast() {
                this._focus(this.last)
            }

            focusNext() {
                this._focus(this.next)
            }

            focusPrevious() {
                this._focus(this.previous)
            }

            _focus(t) {
                if (t) {
                    t.focus()
                }
            }

            _getFocusableItem(t) {
                const e = this.current;
                const i = this.focusables.length;
                if (!i) {
                    return null
                }
                if (e === null) {
                    return this[t === 1 ? "first" : "last"]
                }
                let n = (e + i + t) % i;
                do {
                    const e = this.focusables.get(n);
                    if (xb(e)) {
                        return e
                    }
                    n = (n + i + t) % i
                } while (n !== e);
                return null
            }
        }

        function xb(t) {
            return !!(t.focus && Id.window.getComputedStyle(t.element).display != "none")
        }

        class Cb extends Gp {
            constructor(t) {
                super(t);
                this.setTemplate({tag: "span", attributes: {class: ["ck", "ck-toolbar__separator"]}})
            }
        }

        const Ab = 100;

        class Tb {
            constructor(t, e) {
                if (!Tb._observerInstance) {
                    Tb._createObserver()
                }
                this._element = t;
                this._callback = e;
                Tb._addElementCallback(t, e);
                Tb._observerInstance.observe(t)
            }

            destroy() {
                Tb._deleteElementCallback(this._element, this._callback)
            }

            static _addElementCallback(t, e) {
                if (!Tb._elementCallbacks) {
                    Tb._elementCallbacks = new Map
                }
                let i = Tb._elementCallbacks.get(t);
                if (!i) {
                    i = new Set;
                    Tb._elementCallbacks.set(t, i)
                }
                i.add(e)
            }

            static _deleteElementCallback(t, e) {
                const i = Tb._getElementCallbacks(t);
                if (i) {
                    i.delete(e);
                    if (!i.size) {
                        Tb._elementCallbacks.delete(t);
                        Tb._observerInstance.unobserve(t)
                    }
                }
                if (Tb._elementCallbacks && !Tb._elementCallbacks.size) {
                    Tb._observerInstance = null;
                    Tb._elementCallbacks = null
                }
            }

            static _getElementCallbacks(t) {
                if (!Tb._elementCallbacks) {
                    return null
                }
                return Tb._elementCallbacks.get(t)
            }

            static _createObserver() {
                let t;
                if (typeof Id.window.ResizeObserver === "function") {
                    t = Id.window.ResizeObserver
                } else {
                    t = Pb
                }
                Tb._observerInstance = new t(t => {
                    for (const e of t) {
                        const t = Tb._getElementCallbacks(e.target);
                        if (t) {
                            for (const i of t) {
                                i(e)
                            }
                        }
                    }
                })
            }
        }

        Tb._observerInstance = null;
        Tb._elementCallbacks = null;

        class Pb {
            constructor(t) {
                this._callback = t;
                this._elements = new Set;
                this._previousRects = new Map;
                this._periodicCheckTimeout = null
            }

            observe(t) {
                this._elements.add(t);
                this._checkElementRectsAndExecuteCallback();
                if (this._elements.size === 1) {
                    this._startPeriodicCheck()
                }
            }

            unobserve(t) {
                this._elements.delete(t);
                this._previousRects.delete(t);
                if (!this._elements.size) {
                    this._stopPeriodicCheck()
                }
            }

            _startPeriodicCheck() {
                const t = () => {
                    this._checkElementRectsAndExecuteCallback();
                    this._periodicCheckTimeout = setTimeout(t, Ab)
                };
                this.listenTo(Id.window, "resize", () => {
                    this._checkElementRectsAndExecuteCallback()
                });
                this._periodicCheckTimeout = setTimeout(t, Ab)
            }

            _stopPeriodicCheck() {
                clearTimeout(this._periodicCheckTimeout);
                this.stopListening();
                this._previousRects.clear()
            }

            _checkElementRectsAndExecuteCallback() {
                const t = [];
                for (const e of this._elements) {
                    if (this._hasRectChanged(e)) {
                        t.push({target: e, contentRect: this._previousRects.get(e)})
                    }
                }
                if (t.length) {
                    this._callback(t)
                }
            }

            _hasRectChanged(t) {
                if (!t.ownerDocument.body.contains(t)) {
                    return false
                }
                const e = new vh(t);
                const i = this._previousRects.get(t);
                const n = !i || !i.isEqual(e);
                this._previousRects.set(t, e);
                return n
            }
        }

        vs(Pb, qd);

        function Sb(t) {
            return t.bindTemplate.to(e => {
                if (e.target === t.element) {
                    e.preventDefault()
                }
            })
        }

        class Eb extends Gp {
            constructor(t) {
                super(t);
                const e = this.bindTemplate;
                this.set("isVisible", false);
                this.set("position", "se");
                this.children = this.createCollection();
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-reset", "ck-dropdown__panel", e.to("position", t => `ck-dropdown__panel_${t}`), e.if("isVisible", "ck-dropdown__panel-visible")]},
                    children: this.children,
                    on: {selectstart: e.to(t => t.preventDefault())}
                })
            }

            focus() {
                if (this.children.length) {
                    this.children.first.focus()
                }
            }

            focusLast() {
                if (this.children.length) {
                    const t = this.children.last;
                    if (typeof t.focusLast === "function") {
                        t.focusLast()
                    } else {
                        t.focus()
                    }
                }
            }
        }

        var Rb = i(29);

        class Ob extends Gp {
            constructor(t, e, i) {
                super(t);
                const n = this.bindTemplate;
                this.buttonView = e;
                this.panelView = i;
                this.set("isOpen", false);
                this.set("isEnabled", true);
                this.set("class");
                this.set("id");
                this.set("panelPosition", "auto");
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-dropdown", n.to("class"), n.if("isEnabled", "ck-disabled", t => !t)],
                        id: n.to("id"),
                        "aria-describedby": n.to("ariaDescribedById")
                    },
                    children: [e, i]
                });
                e.extendTemplate({attributes: {class: ["ck-dropdown__button"]}})
            }

            render() {
                super.render();
                this.listenTo(this.buttonView, "open", () => {
                    this.isOpen = !this.isOpen
                });
                this.panelView.bind("isVisible").to(this, "isOpen");
                this.on("change:isOpen", () => {
                    if (!this.isOpen) {
                        return
                    }
                    if (this.panelPosition === "auto") {
                        this.panelView.position = Ob._getOptimalPosition({
                            element: this.panelView.element,
                            target: this.buttonView.element,
                            fitInViewport: true,
                            positions: this._panelPositions
                        }).name
                    } else {
                        this.panelView.position = this.panelPosition
                    }
                });
                this.keystrokes.listenTo(this.element);
                this.focusTracker.add(this.element);
                const t = (t, e) => {
                    if (this.isOpen) {
                        this.buttonView.focus();
                        this.isOpen = false;
                        e()
                    }
                };
                this.keystrokes.set("arrowdown", (t, e) => {
                    if (this.buttonView.isEnabled && !this.isOpen) {
                        this.isOpen = true;
                        e()
                    }
                });
                this.keystrokes.set("arrowright", (t, e) => {
                    if (this.isOpen) {
                        e()
                    }
                });
                this.keystrokes.set("arrowleft", t);
                this.keystrokes.set("esc", t)
            }

            focus() {
                this.buttonView.focus()
            }

            get _panelPositions() {
                const {southEast: t, southWest: e, northEast: i, northWest: n} = Ob.defaultPanelPositions;
                if (this.locale.uiLanguageDirection === "ltr") {
                    return [t, e, i, n]
                } else {
                    return [e, t, n, i]
                }
            }
        }

        Ob.defaultPanelPositions = {
            southEast: t => ({top: t.bottom, left: t.left, name: "se"}),
            southWest: (t, e) => ({top: t.bottom, left: t.left - e.width + t.width, name: "sw"}),
            northEast: (t, e) => ({top: t.top - e.height, left: t.left, name: "ne"}),
            northWest: (t, e) => ({top: t.bottom - e.height, left: t.left - e.width + t.width, name: "nw"})
        };
        Ob._getOptimalPosition = Jp;
        var Ib = '<svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg"><path d="M.941 4.523a.75.75 0 1 1 1.06-1.06l3.006 3.005 3.005-3.005a.75.75 0 1 1 1.06 1.06l-3.549 3.55a.75.75 0 0 1-1.168-.136L.941 4.523z"/></svg>';

        class Vb extends hb {
            constructor(t) {
                super(t);
                this.arrowView = this._createArrowView();
                this.extendTemplate({attributes: {"aria-haspopup": true}});
                this.delegate("execute").to(this, "open")
            }

            render() {
                super.render();
                this.children.add(this.arrowView)
            }

            _createArrowView() {
                const t = new cb;
                t.content = Ib;
                t.extendTemplate({attributes: {class: "ck-dropdown__arrow"}});
                return t
            }
        }

        var Nb = i(31);

        class Mb extends Gp {
            constructor() {
                super();
                this.items = this.createCollection();
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this._focusCycler = new yb({
                    focusables: this.items,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "arrowup", focusNext: "arrowdown"}
                });
                this.setTemplate({tag: "ul", attributes: {class: ["ck", "ck-reset", "ck-list"]}, children: this.items})
            }

            render() {
                super.render();
                for (const t of this.items) {
                    this.focusTracker.add(t.element)
                }
                this.items.on("add", (t, e) => {
                    this.focusTracker.add(e.element)
                });
                this.items.on("remove", (t, e) => {
                    this.focusTracker.remove(e.element)
                });
                this.keystrokes.listenTo(this.element)
            }

            focus() {
                this._focusCycler.focusFirst()
            }

            focusLast() {
                this._focusCycler.focusLast()
            }
        }

        class Bb extends Gp {
            constructor(t) {
                super(t);
                this.children = this.createCollection();
                this.setTemplate({tag: "li", attributes: {class: ["ck", "ck-list__item"]}, children: this.children})
            }

            focus() {
                this.children.first.focus()
            }
        }

        class zb extends Gp {
            constructor(t) {
                super(t);
                this.setTemplate({tag: "li", attributes: {class: ["ck", "ck-list__separator"]}})
            }
        }

        var Lb = i(33);

        class Fb extends hb {
            constructor(t) {
                super(t);
                this.isToggleable = true;
                this.toggleSwitchView = this._createToggleView();
                this.extendTemplate({attributes: {class: "ck-switchbutton"}})
            }

            render() {
                super.render();
                this.children.add(this.toggleSwitchView)
            }

            _createToggleView() {
                const t = new Gp;
                t.setTemplate({
                    tag: "span",
                    attributes: {class: ["ck", "ck-button__toggle"]},
                    children: [{tag: "span", attributes: {class: ["ck", "ck-button__toggle__inner"]}}]
                });
                return t
            }
        }

        function Db({emitter: t, activator: e, callback: i, contextElements: n}) {
            t.listenTo(document, "mousedown", (t, {target: o}) => {
                if (!e()) {
                    return
                }
                for (const t of n) {
                    if (t.contains(o)) {
                        return
                    }
                }
                i()
            })
        }

        var jb = i(35);
        var Hb = i(37);

        function Wb(t, e = Vb) {
            const i = new e(t);
            const n = new Eb(t);
            const o = new Ob(t, i, n);
            i.bind("isEnabled").to(o);
            if (i instanceof Vb) {
                i.bind("isOn").to(o, "isOpen")
            } else {
                i.arrowView.bind("isOn").to(o, "isOpen")
            }
            $b(o);
            return o
        }

        function qb(t, e) {
            const i = t.locale;
            const n = i.t;
            const o = t.toolbarView = new Xb(i);
            o.set("ariaLabel", n("lg"));
            t.extendTemplate({attributes: {class: ["ck-toolbar-dropdown"]}});
            e.map(t => o.items.add(t));
            t.panelView.children.add(o);
            o.items.delegate("execute").to(t)
        }

        function Ub(t, e) {
            const i = t.locale;
            const n = t.listView = new Mb(i);
            n.items.bindTo(e).using(({type: t, model: e}) => {
                if (t === "separator") {
                    return new zb(i)
                } else if (t === "button" || t === "switchbutton") {
                    const n = new Bb(i);
                    let o;
                    if (t === "button") {
                        o = new hb(i)
                    } else {
                        o = new Fb(i)
                    }
                    o.bind(...Object.keys(e)).to(e);
                    o.delegate("execute").to(n);
                    n.children.add(o);
                    return n
                }
            });
            t.panelView.children.add(n);
            n.items.delegate("execute").to(t)
        }

        function $b(t) {
            Gb(t);
            Kb(t);
            Jb(t)
        }

        function Gb(t) {
            t.on("render", () => {
                Db({
                    emitter: t, activator: () => t.isOpen, callback: () => {
                        t.isOpen = false
                    }, contextElements: [t.element]
                })
            })
        }

        function Kb(t) {
            t.on("execute", e => {
                if (e.source instanceof Fb) {
                    return
                }
                t.isOpen = false
            })
        }

        function Jb(t) {
            t.keystrokes.set("arrowdown", (e, i) => {
                if (t.isOpen) {
                    t.panelView.focus();
                    i()
                }
            });
            t.keystrokes.set("arrowup", (e, i) => {
                if (t.isOpen) {
                    t.panelView.focusLast();
                    i()
                }
            })
        }

        var Yb = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="9.5" cy="4.5" r="1.5"/><circle cx="9.5" cy="10.5" r="1.5"/><circle cx="9.5" cy="16.5" r="1.5"/></svg>';
        var Qb = i(39);

        class Xb extends Gp {
            constructor(t, e) {
                super(t);
                const i = this.bindTemplate;
                const n = this.t;
                this.options = e || {};
                this.set("ariaLabel", n("lr"));
                this.set("maxWidth", "auto");
                this.items = this.createCollection();
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.set("class");
                this.set("isCompact", false);
                this.itemsView = new Zb(t);
                this.children = this.createCollection();
                this.children.add(this.itemsView);
                this.focusables = this.createCollection();
                this._focusCycler = new yb({
                    focusables: this.focusables,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: ["arrowleft", "arrowup"], focusNext: ["arrowright", "arrowdown"]}
                });
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-toolbar", i.to("class"), i.if("isCompact", "ck-toolbar_compact")],
                        role: "toolbar",
                        "aria-label": i.to("ariaLabel"),
                        style: {maxWidth: i.to("maxWidth")}
                    },
                    children: this.children,
                    on: {mousedown: Sb(this)}
                });
                this._behavior = this.options.shouldGroupWhenFull ? new ew(this) : new tw(this)
            }

            render() {
                super.render();
                for (const t of this.items) {
                    this.focusTracker.add(t.element)
                }
                this.items.on("add", (t, e) => {
                    this.focusTracker.add(e.element)
                });
                this.items.on("remove", (t, e) => {
                    this.focusTracker.remove(e.element)
                });
                this.keystrokes.listenTo(this.element);
                this._behavior.render(this)
            }

            destroy() {
                this._behavior.destroy();
                return super.destroy()
            }

            focus() {
                this._focusCycler.focusFirst()
            }

            focusLast() {
                this._focusCycler.focusLast()
            }

            fillFromConfig(t, e) {
                t.map(t => {
                    if (t == "|") {
                        this.items.add(new Cb)
                    } else if (e.has(t)) {
                        this.items.add(e.create(t))
                    } else {
                        console.warn(Object(ss["a"])("toolbarview-item-unavailable: The requested toolbar item is unavailable."), {name: t})
                    }
                })
            }
        }

        class Zb extends Gp {
            constructor(t) {
                super(t);
                this.children = this.createCollection();
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-toolbar__items"]},
                    children: this.children
                })
            }
        }

        class tw {
            constructor(t) {
                const e = t.bindTemplate;
                t.set("isVertical", false);
                t.itemsView.children.bindTo(t.items).using(t => t);
                t.focusables.bindTo(t.items).using(t => t);
                t.extendTemplate({attributes: {class: [e.if("isVertical", "ck-toolbar_vertical")]}})
            }

            render() {
            }

            destroy() {
            }
        }

        class ew {
            constructor(t) {
                this.viewChildren = t.children;
                this.viewFocusables = t.focusables;
                this.viewItemsView = t.itemsView;
                this.viewFocusTracker = t.focusTracker;
                this.viewLocale = t.locale;
                this.ungroupedItems = t.createCollection();
                this.groupedItems = t.createCollection();
                this.groupedItemsDropdown = this._createGroupedItemsDropdown();
                this.resizeObserver = null;
                this.cachedPadding = null;
                t.itemsView.children.bindTo(this.ungroupedItems).using(t => t);
                this.ungroupedItems.on("add", this._updateFocusCycleableItems.bind(this));
                this.ungroupedItems.on("remove", this._updateFocusCycleableItems.bind(this));
                t.children.on("add", this._updateFocusCycleableItems.bind(this));
                t.children.on("remove", this._updateFocusCycleableItems.bind(this));
                t.items.on("add", (t, e, i) => {
                    if (i > this.ungroupedItems.length) {
                        this.groupedItems.add(e, i - this.ungroupedItems.length)
                    } else {
                        this.ungroupedItems.add(e, i)
                    }
                    this._updateGrouping()
                });
                t.items.on("remove", (t, e, i) => {
                    if (i > this.ungroupedItems.length) {
                        this.groupedItems.remove(e)
                    } else {
                        this.ungroupedItems.remove(e)
                    }
                    this._updateGrouping()
                });
                t.extendTemplate({attributes: {class: ["ck-toolbar_grouping"]}})
            }

            render(t) {
                this.viewElement = t.element;
                this._enableGroupingOnResize();
                this._enableGroupingOnMaxWidthChange(t)
            }

            destroy() {
                this.groupedItemsDropdown.destroy();
                this.resizeObserver.destroy()
            }

            _updateGrouping() {
                if (!this.viewElement.ownerDocument.body.contains(this.viewElement)) {
                    return
                }
                let t;
                while (this._areItemsOverflowing) {
                    this._groupLastItem();
                    t = true
                }
                if (!t && this.groupedItems.length) {
                    while (this.groupedItems.length && !this._areItemsOverflowing) {
                        this._ungroupFirstItem()
                    }
                    if (this._areItemsOverflowing) {
                        this._groupLastItem()
                    }
                }
            }

            get _areItemsOverflowing() {
                if (!this.ungroupedItems.length) {
                    return false
                }
                const t = this.viewElement;
                const e = this.viewLocale.uiLanguageDirection;
                const i = new vh(t.lastChild);
                const n = new vh(t);
                if (!this.cachedPadding) {
                    const i = Id.window.getComputedStyle(t);
                    const n = e === "ltr" ? "paddingRight" : "paddingLeft";
                    this.cachedPadding = Number.parseInt(i[n])
                }
                if (e === "ltr") {
                    return i.right > n.right - this.cachedPadding
                } else {
                    return i.left < n.left + this.cachedPadding
                }
            }

            _enableGroupingOnResize() {
                let t;
                this.resizeObserver = new Tb(this.viewElement, e => {
                    if (!t || t !== e.contentRect.width) {
                        this._updateGrouping();
                        t = e.contentRect.width
                    }
                });
                this._updateGrouping()
            }

            _enableGroupingOnMaxWidthChange(t) {
                t.on("change:maxWidth", () => {
                    this._updateGrouping()
                })
            }

            _groupLastItem() {
                if (!this.groupedItems.length) {
                    this.viewChildren.add(new Cb);
                    this.viewChildren.add(this.groupedItemsDropdown);
                    this.viewFocusTracker.add(this.groupedItemsDropdown.element)
                }
                this.groupedItems.add(this.ungroupedItems.remove(this.ungroupedItems.last), 0)
            }

            _ungroupFirstItem() {
                this.ungroupedItems.add(this.groupedItems.remove(this.groupedItems.first));
                if (!this.groupedItems.length) {
                    this.viewChildren.remove(this.groupedItemsDropdown);
                    this.viewChildren.remove(this.viewChildren.last);
                    this.viewFocusTracker.remove(this.groupedItemsDropdown.element)
                }
            }

            _createGroupedItemsDropdown() {
                const t = this.viewLocale;
                const e = t.t;
                const i = Wb(t);
                i.class = "ck-toolbar__grouped-dropdown";
                i.panelPosition = t.uiLanguageDirection === "ltr" ? "sw" : "se";
                qb(i, []);
                i.buttonView.set({label: e("ls"), tooltip: true, icon: Yb});
                i.toolbarView.items.bindTo(this.groupedItems).using(t => t);
                return i
            }

            _updateFocusCycleableItems() {
                this.viewFocusables.clear();
                this.ungroupedItems.map(t => {
                    this.viewFocusables.add(t)
                });
                if (this.groupedItems.length) {
                    this.viewFocusables.add(this.groupedItemsDropdown)
                }
            }
        }

        function iw(t) {
            if (Array.isArray(t)) {
                return {items: t}
            }
            if (!t) {
                return {items: []}
            }
            return Object.assign({items: []}, t)
        }

        const nw = Zp("px");

        class ow extends mp {
            static get pluginName() {
                return "BalloonToolbar"
            }

            static get requires() {
                return [kb]
            }

            constructor(t) {
                super(t);
                this._balloonConfig = iw(t.config.get("balloonToolbar"));
                this.toolbarView = this._createToolbarView();
                this.focusTracker = new fb;
                t.ui.once("ready", () => {
                    this.focusTracker.add(t.ui.getEditableElement());
                    this.focusTracker.add(this.toolbarView.element)
                });
                this._resizeObserver = null;
                this._balloon = t.plugins.get(kb);
                this._fireSelectionChangeDebounced = uh(() => this.fire("_selectionChangeDebounced"), 200);
                this.decorate("show")
            }

            init() {
                const t = this.editor;
                const e = t.model.document.selection;
                this.listenTo(this.focusTracker, "change:isFocused", (t, e, i) => {
                    const n = this._balloon.visibleView === this.toolbarView;
                    if (!i && n) {
                        this.hide()
                    } else if (i) {
                        this.show()
                    }
                });
                this.listenTo(e, "change:range", (t, i) => {
                    if (i.directChange || e.isCollapsed) {
                        this.hide()
                    }
                    this._fireSelectionChangeDebounced()
                });
                this.listenTo(this, "_selectionChangeDebounced", () => {
                    if (this.editor.editing.view.document.isFocused) {
                        this.show()
                    }
                });
                if (!this._balloonConfig.shouldNotGroupWhenFull) {
                    this.listenTo(t, "ready", () => {
                        const e = t.ui.view.editable.element;
                        this._resizeObserver = new Tb(e, () => {
                            this.toolbarView.maxWidth = nw(new vh(e).width * .9)
                        })
                    })
                }
            }

            afterInit() {
                const t = this.editor.ui.componentFactory;
                this.toolbarView.fillFromConfig(this._balloonConfig.items, t)
            }

            _createToolbarView() {
                const t = !this._balloonConfig.shouldNotGroupWhenFull;
                const e = new Xb(this.editor.locale, {shouldGroupWhenFull: t});
                e.extendTemplate({attributes: {class: ["ck-toolbar_floating"]}});
                e.render();
                return e
            }

            show() {
                const t = this.editor;
                if (this._balloon.hasView(this.toolbarView)) {
                    return
                }
                if (t.model.document.selection.isCollapsed) {
                    return
                }
                if (Array.from(this.toolbarView.items).every(t => t.isEnabled !== undefined && !t.isEnabled)) {
                    return
                }
                this.listenTo(this.editor.ui, "update", () => {
                    this._balloon.updatePosition(this._getBalloonPositionData())
                });
                this._balloon.add({
                    view: this.toolbarView,
                    position: this._getBalloonPositionData(),
                    balloonClassName: "ck-toolbar-container"
                })
            }

            hide() {
                if (this._balloon.hasView(this.toolbarView)) {
                    this.stopListening(this.editor.ui, "update");
                    this._balloon.remove(this.toolbarView)
                }
            }

            _getBalloonPositionData() {
                const t = this.editor;
                const e = t.editing.view;
                const i = e.document;
                const n = i.selection;
                const o = i.selection.isBackward;
                return {
                    target: () => {
                        const t = o ? n.getFirstRange() : n.getLastRange();
                        const i = vh.getDomRangeRects(e.domConverter.viewRangeToDom(t));
                        if (o) {
                            return i[0]
                        } else {
                            if (i.length > 1 && i[i.length - 1].width === 0) {
                                i.pop()
                            }
                            return i[i.length - 1]
                        }
                    }, positions: rw(o)
                }
            }

            destroy() {
                super.destroy();
                this.stopListening();
                this._fireSelectionChangeDebounced.cancel();
                this.toolbarView.destroy();
                this.focusTracker.destroy();
                if (this._resizeObserver) {
                    this._resizeObserver.destroy()
                }
            }
        }

        function rw(t) {
            const e = nb.defaultPositions;
            return t ? [e.northWestArrowSouth, e.northWestArrowSouthWest, e.northWestArrowSouthEast, e.northWestArrowSouthMiddleEast, e.northWestArrowSouthMiddleWest, e.southWestArrowNorth, e.southWestArrowNorthWest, e.southWestArrowNorthEast, e.southWestArrowNorthMiddleWest, e.southWestArrowNorthMiddleEast] : [e.southEastArrowNorth, e.southEastArrowNorthEast, e.southEastArrowNorthWest, e.southEastArrowNorthMiddleEast, e.southEastArrowNorthMiddleWest, e.northEastArrowSouth, e.northEastArrowSouthEast, e.northEastArrowSouthWest, e.northEastArrowSouthMiddleEast, e.northEastArrowSouthMiddleWest]
        }

        class sw {
            constructor(t) {
                this.editor = t;
                this._components = new Map
            }

            * names() {
                for (const t of this._components.values()) {
                    yield t.originalName
                }
            }

            add(t, e) {
                if (this.has(t)) {
                    throw new ss["b"]("componentfactory-item-exists: The item already exists in the component factory.", this, {name: t})
                }
                this._components.set(aw(t), {callback: e, originalName: t})
            }

            create(t) {
                if (!this.has(t)) {
                    throw new ss["b"]("componentfactory-item-missing: The required component is not registered in the factory.", this, {name: t})
                }
                return this._components.get(aw(t)).callback(this.editor.locale)
            }

            has(t) {
                return this._components.has(aw(t))
            }
        }

        function aw(t) {
            return String(t).toLowerCase()
        }

        class cw {
            constructor(t) {
                this.editor = t;
                this.componentFactory = new sw(t);
                this.focusTracker = new fb;
                this._editableElementsMap = new Map;
                this.listenTo(t.editing.view.document, "layoutChanged", () => this.update())
            }

            get element() {
                return null
            }

            update() {
                this.fire("update")
            }

            destroy() {
                this.stopListening();
                this.focusTracker.destroy();
                for (const t of this._editableElementsMap.values()) {
                    t.ckeditorInstance = null
                }
                this._editableElementsMap = new Map
            }

            setEditableElement(t, e) {
                this._editableElementsMap.set(t, e);
                if (!e.ckeditorInstance) {
                    e.ckeditorInstance = this.editor
                }
            }

            getEditableElement(t = "main") {
                return this._editableElementsMap.get(t)
            }

            getEditableElementsNames() {
                return this._editableElementsMap.keys()
            }

            get _editableElements() {
                console.warn("editor-ui-deprecated-editable-elements: " + "The EditorUI#_editableElements property has been deprecated and will be removed in the near future.", {editorUI: this});
                return this._editableElementsMap
            }
        }

        vs(cw, ds);

        function lw({origin: t, originKeystrokeHandler: e, originFocusTracker: i, toolbar: n, beforeFocus: o, afterBlur: r}) {
            i.add(n.element);
            e.set("Alt+F10", (t, e) => {
                if (i.isFocused && !n.focusTracker.isFocused) {
                    if (o) {
                        o()
                    }
                    n.focus();
                    e()
                }
            });
            n.keystrokes.set("Esc", (e, i) => {
                if (n.focusTracker.isFocused) {
                    t.focus();
                    if (r) {
                        r()
                    }
                    i()
                }
            })
        }

        var dw = i(41);
        const uw = new WeakMap;

        function hw(t) {
            const {view: e, element: i, text: n, isDirectHost: o = true} = t;
            const r = e.document;
            if (!uw.has(r)) {
                uw.set(r, new Map);
                r.registerPostFixer(t => bw(r, t))
            }
            uw.get(r).set(i, {text: n, isDirectHost: o});
            e.change(t => bw(r, t))
        }

        function fw(t, e) {
            const i = e.document;
            t.change(t => {
                if (!uw.has(i)) {
                    return
                }
                const n = uw.get(i);
                const o = n.get(e);
                t.removeAttribute("data-placeholder", o.hostElement);
                mw(t, o.hostElement);
                n.delete(e)
            })
        }

        function gw(t, e) {
            if (!e.hasClass("ck-placeholder")) {
                t.addClass("ck-placeholder", e);
                return true
            }
            return false
        }

        function mw(t, e) {
            if (e.hasClass("ck-placeholder")) {
                t.removeClass("ck-placeholder", e);
                return true
            }
            return false
        }

        function pw(t) {
            if (!t.isAttached()) {
                return false
            }
            const e = !Array.from(t.getChildren()).some(t => !t.is("uiElement"));
            const i = t.document;
            if (!i.isFocused && e) {
                return true
            }
            const n = i.selection;
            const o = n.anchor;
            if (e && o && o.parent !== t) {
                return true
            }
            return false
        }

        function bw(t, e) {
            const i = uw.get(t);
            let n = false;
            for (const [t, o] of i) {
                if (ww(e, t, o)) {
                    n = true
                }
            }
            return n
        }

        function ww(t, e, i) {
            const {text: n, isDirectHost: o} = i;
            const r = o ? e : kw(e);
            let s = false;
            if (!r) {
                return false
            }
            i.hostElement = r;
            if (r.getAttribute("data-placeholder") !== n) {
                t.setAttribute("data-placeholder", n, r);
                s = true
            }
            if (pw(r)) {
                if (gw(t, r)) {
                    s = true
                }
            } else if (mw(t, r)) {
                s = true
            }
            return s
        }

        function kw(t) {
            if (t.childCount === 1) {
                const e = t.getChild(0);
                if (e.is("element") && !e.is("uiElement")) {
                    return e
                }
            }
            return null
        }

        class _w extends cw {
            constructor(t, e) {
                super(t);
                this.view = e
            }

            get element() {
                return this.view.editable.element
            }

            init() {
                const t = this.editor;
                const e = this.view;
                const i = t.plugins.get("BalloonToolbar");
                const n = t.editing.view;
                const o = e.editable;
                const r = n.document.getRoot();
                o.name = r.rootName;
                e.render();
                const s = o.element;
                this.setEditableElement(o.name, s);
                this.focusTracker.add(s);
                o.bind("isFocused").to(this.focusTracker);
                n.attachDomRoot(s);
                lw({
                    origin: n,
                    originFocusTracker: this.focusTracker,
                    originKeystrokeHandler: t.keystrokes,
                    toolbar: i.toolbarView,
                    beforeFocus() {
                        i.show()
                    },
                    afterBlur() {
                        i.hide()
                    }
                });
                this._initPlaceholder();
                this.fire("ready")
            }

            destroy() {
                const t = this.view;
                const e = this.editor.editing.view;
                e.detachDomRoot(t.editable.name);
                t.destroy();
                super.destroy()
            }

            _initPlaceholder() {
                const t = this.editor;
                const e = t.editing.view;
                const i = e.document.getRoot();
                const n = t.sourceElement;
                const o = t.config.get("placeholder") || n && n.tagName.toLowerCase() === "textarea" && n.getAttribute("placeholder");
                if (o) {
                    hw({view: e, element: i, text: o, isDirectHost: false})
                }
            }
        }

        var vw = "[object String]";

        function yw(t) {
            return typeof t == "string" || !Je(t) && T(t) && _(t) == vw
        }

        var xw = yw;

        function Cw(t, e, i = {}, n = []) {
            const o = i && i.xmlns;
            const r = o ? t.createElementNS(o, e) : t.createElement(e);
            for (const t in i) {
                r.setAttribute(t, i[t])
            }
            if (xw(n) || !js(n)) {
                n = [n]
            }
            for (let e of n) {
                if (xw(e)) {
                    e = t.createTextNode(e)
                }
                r.appendChild(e)
            }
            return r
        }

        class Aw extends bp {
            attachToDom() {
                this._bodyCollectionContainer = new _p({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-reset_all", "ck-body", "ck-rounded-corners"],
                        dir: this.locale.uiLanguageDirection
                    },
                    children: this
                }).render();
                let t = document.querySelector(".ck-body-wrapper");
                if (!t) {
                    t = Cw(document, "div", {class: "ck-body-wrapper"});
                    document.body.appendChild(t)
                }
                t.appendChild(this._bodyCollectionContainer)
            }

            detachFromDom() {
                super.destroy();
                if (this._bodyCollectionContainer) {
                    this._bodyCollectionContainer.remove()
                }
                const t = document.querySelector(".ck-body-wrapper");
                if (t && t.childElementCount == 0) {
                    t.remove()
                }
            }
        }

        var Tw = i(43);

        class Pw extends Gp {
            constructor(t) {
                super(t);
                this.body = new Aw(t)
            }

            render() {
                super.render();
                this.body.attachToDom()
            }

            destroy() {
                this.body.detachFromDom();
                return super.destroy()
            }
        }

        class Sw extends Gp {
            constructor(t, e, i) {
                super(t);
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-content", "ck-editor__editable", "ck-rounded-corners"],
                        lang: t.contentLanguage,
                        dir: t.contentLanguageDirection
                    }
                });
                this.name = null;
                this.set("isFocused", false);
                this._editableElement = i;
                this._hasExternalElement = !!this._editableElement;
                this._editingView = e
            }

            render() {
                super.render();
                if (this._hasExternalElement) {
                    this.template.apply(this.element = this._editableElement)
                } else {
                    this._editableElement = this.element
                }
                this.on("change:isFocused", () => this._updateIsFocusedClasses());
                this._updateIsFocusedClasses()
            }

            destroy() {
                if (this._hasExternalElement) {
                    this.template.revert(this._editableElement)
                }
                super.destroy()
            }

            _updateIsFocusedClasses() {
                const t = this._editingView;
                if (t.isRenderingInProgress) {
                    i(this)
                } else {
                    e(this)
                }

                function e(e) {
                    t.change(i => {
                        const n = t.document.getRoot(e.name);
                        i.addClass(e.isFocused ? "ck-focused" : "ck-blurred", n);
                        i.removeClass(e.isFocused ? "ck-blurred" : "ck-focused", n)
                    })
                }

                function i(n) {
                    t.once("change:isRenderingInProgress", (t, o, r) => {
                        if (!r) {
                            e(n)
                        } else {
                            i(n)
                        }
                    })
                }
            }
        }

        class Ew extends Sw {
            constructor(t, e, i) {
                super(t, e, i);
                this.extendTemplate({attributes: {role: "textbox", class: "ck-editor__editable_inline"}})
            }

            render() {
                super.render();
                const t = this._editingView;
                const e = this.t;
                t.change(i => {
                    const n = t.document.getRoot(this.name);
                    i.setAttribute("aria-label", e("of", [this.name]), n)
                })
            }
        }

        class Rw extends Pw {
            constructor(t, e, i) {
                super(t);
                this.editable = new Ew(t, e, i)
            }

            render() {
                super.render();
                this.registerChild(this.editable)
            }
        }

        function Ow(t, e) {
            if (t instanceof HTMLTextAreaElement) {
                t.value = e
            }
            t.innerHTML = e
        }

        function Iw(t) {
            if (t instanceof HTMLTextAreaElement) {
                return t.value
            }
            return t.innerHTML
        }

        const Vw = {
            setData(t) {
                this.data.set(t)
            }, getData(t) {
                return this.data.get(t)
            }
        };
        var Nw = Vw;
        const Mw = {
            updateSourceElement() {
                if (!this.sourceElement) {
                    throw new ss["b"]("editor-missing-sourceelement: Cannot update the source element of a detached editor.", this)
                }
                Ow(this.sourceElement, this.data.get())
            }
        };
        var Bw = Mw;

        function zw(t) {
            if (!gt(t.updateSourceElement)) {
                throw new ss["b"]("attachtoform-missing-elementapi-interface: Editor passed to attachToForm() must implement ElementApi.", t)
            }
            const e = t.sourceElement;
            if (e && e.tagName.toLowerCase() === "textarea" && e.form) {
                let i;
                const n = e.form;
                const o = () => t.updateSourceElement();
                if (gt(n.submit)) {
                    i = n.submit;
                    n.submit = () => {
                        o();
                        i.apply(n)
                    }
                }
                n.addEventListener("submit", o);
                t.on("destroy", () => {
                    n.removeEventListener("submit", o);
                    if (i) {
                        n.submit = i
                    }
                })
            }
        }

        function Lw(t) {
            const e = t.sourceElement;
            if (!e) {
                return
            }
            if (e.ckeditorInstance) {
                throw new ss["b"]("editor-source-element-already-used: " + "The DOM element cannot be used to create multiple editor instances.", t)
            }
            e.ckeditorInstance = t;
            t.once("destroy", () => {
                delete e.ckeditorInstance
            })
        }

        class Fw extends hp {
            constructor(t, e) {
                super(e);
                if (Kr(t)) {
                    this.sourceElement = t;
                    Lw(this)
                }
                const i = this.config.get("plugins");
                i.push(ow);
                this.config.set("plugins", i);
                this.config.define("balloonToolbar", this.config.get("toolbar"));
                this.data.processor = new gp(this.data.viewDocument);
                this.model.document.createRoot();
                const n = new Rw(this.locale, this.editing.view, this.sourceElement);
                this.ui = new _w(this, n);
                zw(this)
            }

            destroy() {
                const t = this.getData();
                this.ui.destroy();
                return super.destroy().then(() => {
                    if (this.sourceElement) {
                        Ow(this.sourceElement, t)
                    }
                })
            }

            static create(t, e = {}) {
                return new Promise(i => {
                    const n = Kr(t);
                    if (n && t.tagName === "TEXTAREA") {
                        throw new ss["b"]("editor-wrong-element: This type of editor cannot be initialized inside <textarea> element.", null)
                    }
                    const o = new this(t, e);
                    i(o.initPlugins().then(() => {
                        o.ui.init()
                    }).then(() => {
                        if (!n && e.initialData) {
                            throw new ss["b"]("editor-create-initial-data: " + "The config.initialData option cannot be used together with initial data passed in Editor.create().", null)
                        }
                        const i = e.initialData || Dw(t);
                        return o.data.init(i)
                    }).then(() => o.fire("ready")).then(() => o))
                })
            }
        }

        vs(Fw, Nw);
        vs(Fw, Bw);

        function Dw(t) {
            return Kr(t) ? Iw(t) : t
        }

        class jw {
            constructor(t) {
                this.editor = t;
                this.set("value", undefined);
                this.set("isEnabled", false);
                this._disableStack = new Set;
                this.decorate("execute");
                this.listenTo(this.editor.model.document, "change", () => {
                    this.refresh()
                });
                this.on("execute", t => {
                    // kbalashev (image upload button fix)
                    // if (!this.isEnabled) {
                    //     t.stop()
                    // }
                }, {priority: "high"});
                this.listenTo(t, "change:isReadOnly", (t, e, i) => {
                    if (i) {
                        this.forceDisabled("readOnlyMode")
                    } else {
                        this.clearForceDisabled("readOnlyMode")
                    }
                })
            }

            refresh() {
                this.isEnabled = true
            }

            forceDisabled(t) {
                this._disableStack.add(t);
                if (this._disableStack.size == 1) {
                    this.on("set:isEnabled", Hw, {priority: "highest"});
                    this.isEnabled = false
                }
            }

            clearForceDisabled(t) {
                this._disableStack.delete(t);
                if (this._disableStack.size == 0) {
                    this.off("set:isEnabled", Hw);
                    this.refresh()
                }
            }

            execute() {
            }

            destroy() {
                this.stopListening()
            }
        }

        vs(jw, Jc);

        function Hw(t) {
            t.return = false;
            t.stop()
        }

        function Ww(t) {
            const e = t.next();
            if (e.done) {
                return null
            }
            return e.value
        }

        const qw = ["left", "right", "center", "justify"];

        function Uw(t) {
            return qw.includes(t)
        }

        function $w(t, e) {
            if (e.contentLanguageDirection == "rtl") {
                return t === "right"
            } else {
                return t === "left"
            }
        }

        const Gw = "alignment";

        class Kw extends jw {
            refresh() {
                const t = this.editor;
                const e = t.locale;
                const i = Ww(this.editor.model.document.selection.getSelectedBlocks());
                this.isEnabled = !!i && this._canBeAligned(i);
                if (this.isEnabled && i.hasAttribute("alignment")) {
                    this.value = i.getAttribute("alignment")
                } else {
                    this.value = e.contentLanguageDirection === "rtl" ? "right" : "left"
                }
            }

            execute(t = {}) {
                const e = this.editor;
                const i = e.locale;
                const n = e.model;
                const o = n.document;
                const r = t.value;
                n.change(t => {
                    const e = Array.from(o.selection.getSelectedBlocks()).filter(t => this._canBeAligned(t));
                    const n = e[0].getAttribute("alignment");
                    const s = $w(r, i) || n === r || !r;
                    if (s) {
                        Jw(e, t)
                    } else {
                        Yw(e, t, r)
                    }
                })
            }

            _canBeAligned(t) {
                return this.editor.model.schema.checkAttribute(t, Gw)
            }
        }

        function Jw(t, e) {
            for (const i of t) {
                e.removeAttribute(Gw, i)
            }
        }

        function Yw(t, e, i) {
            for (const n of t) {
                e.setAttribute(Gw, i, n)
            }
        }

        class Qw extends mp {
            static get pluginName() {
                return "AlignmentEditing"
            }

            constructor(t) {
                super(t);
                t.config.define("alignment", {options: [...qw]})
            }

            init() {
                const t = this.editor;
                const e = t.locale;
                const i = t.model.schema;
                const n = t.config.get("alignment.options").filter(Uw);
                i.extend("$block", {allowAttributes: "alignment"});
                t.model.schema.setAttributeProperties("alignment", {isFormatting: true});
                const o = Xw(n.filter(t => !$w(t, e)));
                t.conversion.attributeToAttribute(o);
                t.commands.add("alignment", new Kw(t))
            }
        }

        function Xw(t) {
            const e = {model: {key: "alignment", values: t.slice()}, view: {}};
            for (const i of t) {
                e.view[i] = {key: "style", value: {"text-align": i}}
            }
            return e
        }

        var Zw = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z"/></svg>';
        var tk = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M18 3.75a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 8a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 4a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75zm0-8a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75z"/></svg>';
        var ek = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm2.286 4c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75z"/></svg>';
        var ik = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z"/></svg>';
        const nk = new Map([["left", Zw], ["right", tk], ["center", ek], ["justify", ik]]);

        class ok extends mp {
            get localizedOptionTitles() {
                const t = this.editor.t;
                return {left: t("iw"), right: t("ix"), center: t("iy"), justify: t("iz")}
            }

            static get pluginName() {
                return "AlignmentUI"
            }

            init() {
                const t = this.editor;
                const e = t.ui.componentFactory;
                const i = t.t;
                const n = t.config.get("alignment.options");
                n.filter(Uw).forEach(t => this._addButton(t));
                e.add("alignment", t => {
                    const o = Wb(t);
                    const r = n.map(t => e.create(`alignment:${t}`));
                    qb(o, r);
                    o.buttonView.set({label: i("ja"), tooltip: true});
                    o.toolbarView.isVertical = true;
                    o.toolbarView.ariaLabel = i("jb");
                    o.extendTemplate({attributes: {class: "ck-alignment-dropdown"}});
                    const s = t.contentLanguageDirection === "rtl" ? tk : Zw;
                    o.buttonView.bind("icon").toMany(r, "isOn", (...t) => {
                        const e = t.findIndex(t => t);
                        if (e < 0) {
                            return s
                        }
                        return r[e].icon
                    });
                    o.bind("isEnabled").toMany(r, "isEnabled", (...t) => t.some(t => t));
                    return o
                })
            }

            _addButton(t) {
                const e = this.editor;
                e.ui.componentFactory.add(`alignment:${t}`, i => {
                    const n = e.commands.get("alignment");
                    const o = new hb(i);
                    o.set({label: this.localizedOptionTitles[t], icon: nk.get(t), tooltip: true, isToggleable: true});
                    o.bind("isEnabled").to(n);
                    o.bind("isOn").to(n, "value", e => e === t);
                    this.listenTo(o, "execute", () => {
                        e.execute("alignment", {value: t});
                        e.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class rk extends mp {
            static get requires() {
                return [Qw, ok]
            }

            static get pluginName() {
                return "Alignment"
            }
        }

        class sk {
            constructor(t) {
                this.context = t
            }

            destroy() {
                this.stopListening()
            }

            static get isContextPlugin() {
                return true
            }
        }

        vs(sk, Jc);

        class ak extends sk {
            static get pluginName() {
                return "PendingActions"
            }

            init() {
                this.set("hasAny", false);
                this._actions = new ys({idProperty: "_id"});
                this._actions.delegate("add", "remove").to(this)
            }

            add(t) {
                if (typeof t !== "string") {
                    throw new ss["b"]("pendingactions-add-invalid-message: The message must be a string.", this)
                }
                const e = Object.create(Jc);
                e.set("message", t);
                this._actions.add(e);
                this.hasAny = true;
                return e
            }

            remove(t) {
                this._actions.remove(t);
                this.hasAny = !!this._actions.length
            }

            get first() {
                return this._actions.get(0)
            }

            [Symbol.iterator]() {
                return this._actions[Symbol.iterator]()
            }
        }

        class ck {
            constructor() {
                const t = new window.FileReader;
                this._reader = t;
                this._data = undefined;
                this.set("loaded", 0);
                t.onprogress = t => {
                    this.loaded = t.loaded
                }
            }

            get error() {
                return this._reader.error
            }

            get data() {
                return this._data
            }

            read(t) {
                const e = this._reader;
                this.total = t.size;
                return new Promise((i, n) => {
                    e.onload = () => {
                        const t = e.result;
                        this._data = t;
                        i(t)
                    };
                    e.onerror = () => {
                        n("error")
                    };
                    e.onabort = () => {
                        n("aborted")
                    };
                    this._reader.readAsDataURL(t)
                })
            }

            abort() {
                this._reader.abort()
            }
        }

        vs(ck, Jc);

        class lk extends mp {
            static get pluginName() {
                return "FileRepository"
            }

            static get requires() {
                return [ak]
            }

            init() {
                this.loaders = new ys;
                this.loaders.on("add", () => this._updatePendingAction());
                this.loaders.on("remove", () => this._updatePendingAction());
                this._loadersMap = new Map;
                this._pendingAction = null;
                this.set("uploaded", 0);
                this.set("uploadTotal", null);
                this.bind("uploadedPercent").to(this, "uploaded", this, "uploadTotal", (t, e) => e ? t / e * 100 : 0)
            }

            getLoader(t) {
                return this._loadersMap.get(t) || null
            }

            createLoader(t) {
                if (!this.createUploadAdapter) {
                    console.warn(Object(ss["a"])("filerepository-no-upload-adapter: Upload adapter is not defined."));
                    return null
                }
                const e = new dk(Promise.resolve(t), this.createUploadAdapter);
                this.loaders.add(e);
                this._loadersMap.set(t, e);
                if (t instanceof Promise) {
                    e.file.then(t => {
                        this._loadersMap.set(t, e)
                    }).catch(() => {
                    })
                }
                e.on("change:uploaded", () => {
                    let t = 0;
                    for (const e of this.loaders) {
                        t += e.uploaded
                    }
                    this.uploaded = t
                });
                e.on("change:uploadTotal", () => {
                    let t = 0;
                    for (const e of this.loaders) {
                        if (e.uploadTotal) {
                            t += e.uploadTotal
                        }
                    }
                    this.uploadTotal = t
                });
                return e
            }

            destroyLoader(t) {
                const e = t instanceof dk ? t : this.getLoader(t);
                e._destroy();
                this.loaders.remove(e);
                this._loadersMap.forEach((t, i) => {
                    if (t === e) {
                        this._loadersMap.delete(i)
                    }
                })
            }

            _updatePendingAction() {
                const t = this.editor.plugins.get(ak);
                if (this.loaders.length) {
                    if (!this._pendingAction) {
                        const e = this.editor.t;
                        const i = t => `${e("lb")} ${parseInt(t)}%.`;
                        this._pendingAction = t.add(i(this.uploadedPercent));
                        this._pendingAction.bind("message").to(this, "uploadedPercent", i)
                    }
                } else {
                    t.remove(this._pendingAction);
                    this._pendingAction = null
                }
            }
        }

        vs(lk, Jc);

        class dk {
            constructor(t, e) {
                this.id = is();
                this._filePromiseWrapper = this._createFilePromiseWrapper(t);
                this._adapter = e(this);
                this._reader = new ck;
                this.set("status", "idle");
                this.set("uploaded", 0);
                this.set("uploadTotal", null);
                this.bind("uploadedPercent").to(this, "uploaded", this, "uploadTotal", (t, e) => e ? t / e * 100 : 0);
                this.set("uploadResponse", null)
            }

            get file() {
                if (!this._filePromiseWrapper) {
                    return Promise.resolve(null)
                } else {
                    return this._filePromiseWrapper.promise.then(t => this._filePromiseWrapper ? t : null)
                }
            }

            get data() {
                return this._reader.data
            }

            read() {
                if (this.status != "idle") {
                    throw new ss["b"]("filerepository-read-wrong-status: You cannot call read if the status is different than idle.", this)
                }
                this.status = "reading";
                return this.file.then(t => this._reader.read(t)).then(t => {
                    this.status = "idle";
                    return t
                }).catch(t => {
                    if (t === "aborted") {
                        this.status = "aborted";
                        throw"aborted"
                    }
                    this.status = "error";
                    throw this._reader.error ? this._reader.error : t
                })
            }

            upload() {
                if (this.status != "idle") {
                    throw new ss["b"]("filerepository-upload-wrong-status: You cannot call upload if the status is different than idle.", this)
                }
                this.status = "uploading";
                return this.file.then(() => this._adapter.upload()).then(t => {
                    this.uploadResponse = t;
                    this.status = "idle";
                    return t
                }).catch(t => {
                    if (this.status === "aborted") {
                        throw"aborted"
                    }
                    this.status = "error";
                    throw t
                })
            }

            abort() {
                const t = this.status;
                this.status = "aborted";
                if (!this._filePromiseWrapper.isFulfilled) {
                    this._filePromiseWrapper.promise.catch(() => {
                    });
                    this._filePromiseWrapper.rejecter("aborted")
                } else if (t == "reading") {
                    this._reader.abort()
                } else if (t == "uploading" && this._adapter.abort) {
                    this._adapter.abort()
                }
                this._destroy()
            }

            _destroy() {
                this._filePromiseWrapper = undefined;
                this._reader = undefined;
                this._adapter = undefined;
                this.uploadResponse = undefined
            }

            _createFilePromiseWrapper(t) {
                const e = {};
                e.promise = new Promise((i, n) => {
                    e.rejecter = n;
                    e.isFulfilled = false;
                    t.then(t => {
                        e.isFulfilled = true;
                        i(t)
                    }).catch(t => {
                        e.isFulfilled = true;
                        n(t)
                    })
                });
                return e
            }
        }

        vs(dk, Jc);

        class uk extends mp {
            static get requires() {
                return [lk]
            }

            static get pluginName() {
                return "Base64UploadAdapter"
            }

            init() {
                this.editor.plugins.get(lk).createUploadAdapter = t => new hk(t)
            }
        }

        class hk {
            constructor(t) {
                this.loader = t
            }

            upload() {
                return new Promise((t, e) => {
                    const i = this.reader = new window.FileReader;
                    i.addEventListener("load", () => {
                        t({default: i.result})
                    });
                    i.addEventListener("error", t => {
                        e(t)
                    });
                    i.addEventListener("abort", () => {
                        e()
                    });
                    this.loader.file.then(t => {
                        i.readAsDataURL(t)
                    })
                })
            }

            abort() {
                this.reader.abort()
            }
        }

        class fk extends jw {
            refresh() {
                this.value = this._getValue();
                this.isEnabled = this._checkEnabled()
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.schema;
                const n = e.document.selection;
                const o = Array.from(n.getSelectedBlocks());
                const r = t.forceValue === undefined ? !this.value : t.forceValue;
                e.change(t => {
                    if (!r) {
                        this._removeQuote(t, o.filter(gk))
                    } else {
                        const e = o.filter(t => gk(t) || pk(i, t));
                        this._applyQuote(t, e)
                    }
                })
            }

            _getValue() {
                const t = this.editor.model.document.selection;
                const e = Ww(t.getSelectedBlocks());
                return !!(e && gk(e))
            }

            _checkEnabled() {
                if (this.value) {
                    return true
                }
                const t = this.editor.model.document.selection;
                const e = this.editor.model.schema;
                const i = Ww(t.getSelectedBlocks());
                if (!i) {
                    return false
                }
                return pk(e, i)
            }

            _removeQuote(t, e) {
                mk(t, e).reverse().forEach(e => {
                    if (e.start.isAtStart && e.end.isAtEnd) {
                        t.unwrap(e.start.parent);
                        return
                    }
                    if (e.start.isAtStart) {
                        const i = t.createPositionBefore(e.start.parent);
                        t.move(e, i);
                        return
                    }
                    if (!e.end.isAtEnd) {
                        t.split(e.end)
                    }
                    const i = t.createPositionAfter(e.end.parent);
                    t.move(e, i)
                })
            }

            _applyQuote(t, e) {
                const i = [];
                mk(t, e).reverse().forEach(e => {
                    let n = gk(e.start);
                    if (!n) {
                        n = t.createElement("blockQuote");
                        t.wrap(e, n)
                    }
                    i.push(n)
                });
                i.reverse().reduce((e, i) => {
                    if (e.nextSibling == i) {
                        t.merge(t.createPositionAfter(e));
                        return e
                    }
                    return i
                })
            }
        }

        function gk(t) {
            return t.parent.name == "blockQuote" ? t.parent : null
        }

        function mk(t, e) {
            let i;
            let n = 0;
            const o = [];
            while (n < e.length) {
                const r = e[n];
                const s = e[n + 1];
                if (!i) {
                    i = t.createPositionBefore(r)
                }
                if (!s || r.nextSibling != s) {
                    o.push(t.createRange(i, t.createPositionAfter(r)));
                    i = null
                }
                n++
            }
            return o
        }

        function pk(t, e) {
            const i = t.checkChild(e.parent, "blockQuote");
            const n = t.checkChild(["$root", "blockQuote"], e);
            return i && n
        }

        class bk extends mp {
            static get pluginName() {
                return "BlockQuoteEditing"
            }

            init() {
                const t = this.editor;
                const e = t.model.schema;
                t.commands.add("blockQuote", new fk(t));
                e.register("blockQuote", {allowWhere: "$block", allowContentOf: "$root"});
                e.addChildCheck((t, e) => {
                    if (t.endsWith("blockQuote") && e.name == "blockQuote") {
                        return false
                    }
                });
                t.conversion.elementToElement({model: "blockQuote", view: "blockquote"});
                t.model.document.registerPostFixer(i => {
                    const n = t.model.document.differ.getChanges();
                    for (const t of n) {
                        if (t.type == "insert") {
                            const n = t.position.nodeAfter;
                            if (!n) {
                                continue
                            }
                            if (n.is("blockQuote") && n.isEmpty) {
                                i.remove(n);
                                return true
                            } else if (n.is("blockQuote") && !e.checkChild(t.position, n)) {
                                i.unwrap(n);
                                return true
                            } else if (n.is("element")) {
                                const t = i.createRangeIn(n);
                                for (const n of t.getItems()) {
                                    if (n.is("blockQuote") && !e.checkChild(i.createPositionBefore(n), n)) {
                                        i.unwrap(n);
                                        return true
                                    }
                                }
                            }
                        } else if (t.type == "remove") {
                            const e = t.position.parent;
                            if (e.is("blockQuote") && e.isEmpty) {
                                i.remove(e);
                                return true
                            }
                        }
                    }
                    return false
                })
            }

            afterInit() {
                const t = this.editor;
                const e = t.commands.get("blockQuote");
                this.listenTo(this.editor.editing.view.document, "enter", (t, i) => {
                    const n = this.editor.model.document;
                    const o = n.selection.getLastPosition().parent;
                    if (n.selection.isCollapsed && o.isEmpty && e.value) {
                        this.editor.execute("blockQuote");
                        this.editor.editing.view.scrollToTheSelection();
                        i.preventDefault();
                        t.stop()
                    }
                })
            }
        }

        var wk = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M3 10.423a6.5 6.5 0 0 1 6.056-6.408l.038.67C6.448 5.423 5.354 7.663 5.22 10H9c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574zm8 0a6.5 6.5 0 0 1 6.056-6.408l.038.67c-2.646.739-3.74 2.979-3.873 5.315H17c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574z"/></svg>';
        var kk = i(45);

        class _k extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add("blockQuote", i => {
                    const n = t.commands.get("blockQuote");
                    const o = new hb(i);
                    o.set({label: e("jc"), icon: wk, tooltip: true, isToggleable: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute("blockQuote");
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class vk extends mp {
            static get requires() {
                return [bk, _k]
            }

            static get pluginName() {
                return "BlockQuote"
            }
        }

        class yk extends jw {
            constructor(t, e) {
                super(t);
                this.attributeKey = e
            }

            refresh() {
                const t = this.editor.model;
                const e = t.document;
                this.value = this._getValueFromFirstAllowedNode();
                this.isEnabled = t.schema.checkAttributeInSelection(e.selection, this.attributeKey)
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.document;
                const n = i.selection;
                const o = t.forceValue === undefined ? !this.value : t.forceValue;
                e.change(t => {
                    if (n.isCollapsed) {
                        if (o) {
                            t.setSelectionAttribute(this.attributeKey, true)
                        } else {
                            t.removeSelectionAttribute(this.attributeKey)
                        }
                    } else {
                        const i = e.schema.getValidRanges(n.getRanges(), this.attributeKey);
                        for (const e of i) {
                            if (o) {
                                t.setAttribute(this.attributeKey, o, e)
                            } else {
                                t.removeAttribute(this.attributeKey, e)
                            }
                        }
                    }
                })
            }

            _getValueFromFirstAllowedNode() {
                const t = this.editor.model;
                const e = t.schema;
                const i = t.document.selection;
                if (i.isCollapsed) {
                    return i.hasAttribute(this.attributeKey)
                }
                for (const t of i.getRanges()) {
                    for (const i of t.getItems()) {
                        if (e.checkAttribute(i, this.attributeKey)) {
                            return i.hasAttribute(this.attributeKey)
                        }
                    }
                }
                return false
            }
        }

        const xk = "bold";

        class Ck extends mp {
            static get pluginName() {
                return "BoldEditing"
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: xk});
                t.model.schema.setAttributeProperties(xk, {isFormatting: true, copyOnEnter: true});
                t.conversion.attributeToElement({
                    model: xk, view: "strong", upcastAlso: ["b", t => {
                        const e = t.getStyle("font-weight");
                        if (!e) {
                            return null
                        }
                        if (e == "bold" || Number(e) >= 600) {
                            return {name: true, styles: ["font-weight"]}
                        }
                    }]
                });
                t.commands.add(xk, new yk(t, xk));
                t.keystrokes.set("CTRL+B", xk)
            }
        }

        var Ak = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.187 17H5.773c-.637 0-1.092-.138-1.364-.415-.273-.277-.409-.718-.409-1.323V4.738c0-.617.14-1.062.419-1.332.279-.27.73-.406 1.354-.406h4.68c.69 0 1.288.041 1.793.124.506.083.96.242 1.36.478.341.197.644.447.906.75a3.262 3.262 0 0 1 .808 2.162c0 1.401-.722 2.426-2.167 3.075C15.05 10.175 16 11.315 16 13.01a3.756 3.756 0 0 1-2.296 3.504 6.1 6.1 0 0 1-1.517.377c-.571.073-1.238.11-2 .11zm-.217-6.217H7v4.087h3.069c1.977 0 2.965-.69 2.965-2.072 0-.707-.256-1.22-.768-1.537-.512-.319-1.277-.478-2.296-.478zM7 5.13v3.619h2.606c.729 0 1.292-.067 1.69-.2a1.6 1.6 0 0 0 .91-.765c.165-.267.247-.566.247-.897 0-.707-.26-1.176-.778-1.409-.519-.232-1.31-.348-2.375-.348H7z"/></svg>';
        const Tk = "bold";

        class Pk extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add(Tk, i => {
                    const n = t.commands.get(Tk);
                    const o = new hb(i);
                    o.set({label: e("ji"), icon: Ak, keystroke: "CTRL+B", tooltip: true, isToggleable: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute(Tk);
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class Sk extends mp {
            static get requires() {
                return [Ck, Pk]
            }

            static get pluginName() {
                return "Bold"
            }
        }

        class Ek extends jw {
            constructor(t, e) {
                super(t);
                this.attributeKey = e
            }

            refresh() {
                const t = this.editor.model;
                const e = t.document;
                this.value = e.selection.getAttribute(this.attributeKey);
                this.isEnabled = t.schema.checkAttributeInSelection(e.selection, this.attributeKey)
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.document;
                const n = i.selection;
                const o = t.value;
                e.change(t => {
                    if (n.isCollapsed) {
                        if (o) {
                            t.setSelectionAttribute(this.attributeKey, o)
                        } else {
                            t.removeSelectionAttribute(this.attributeKey)
                        }
                    } else {
                        const i = e.schema.getValidRanges(n.getRanges(), this.attributeKey);
                        for (const e of i) {
                            if (o) {
                                t.setAttribute(this.attributeKey, o, e)
                            } else {
                                t.removeAttribute(this.attributeKey, e)
                            }
                        }
                    }
                })
            }
        }

        var Rk = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path class="ck-icon__fill" d="M16.935 5.328a2 2 0 0 1 0 2.829l-7.778 7.778a2 2 0 0 1-2.829 0L3.5 13.107a1.999 1.999 0 1 1 2.828-2.829l.707.707a1 1 0 0 0 1.414 0l5.658-5.657a2 2 0 0 1 2.828 0z"/><path d="M14.814 6.035L8.448 12.4a1 1 0 0 1-1.414 0l-1.413-1.415A1 1 0 1 0 4.207 12.4l2.829 2.829a1 1 0 0 0 1.414 0l7.778-7.778a1 1 0 1 0-1.414-1.415z"/></svg>';

        class Ok extends hb {
            constructor(t) {
                super(t);
                const e = this.bindTemplate;
                this.set("color");
                this.set("hasBorder");
                this.icon = Rk;
                this.extendTemplate({
                    attributes: {
                        style: {backgroundColor: e.to("color")},
                        class: ["ck", "ck-color-grid__tile", e.if("hasBorder", "ck-color-table__color-tile_bordered")]
                    }
                })
            }

            render() {
                super.render();
                this.iconView.fillColor = "hsl(0, 0%, 100%)"
            }
        }

        var Ik = i(47);

        class Vk extends Gp {
            constructor(t, e) {
                super(t);
                const i = e && e.colorDefinitions || [];
                const n = {};
                if (e && e.columns) {
                    n.gridTemplateColumns = `repeat( ${e.columns}, 1fr)`
                }
                this.set("selectedColor");
                this.items = this.createCollection();
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this._focusCycler = new yb({
                    focusables: this.items,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "arrowleft", focusNext: "arrowright"}
                });
                this.items.on("add", (t, e) => {
                    e.isOn = e.color === this.selectedColor
                });
                i.forEach(t => {
                    const e = new Ok;
                    e.set({color: t.color, label: t.label, tooltip: true, hasBorder: t.options.hasBorder});
                    e.on("execute", () => {
                        this.fire("execute", {value: t.color, hasBorder: t.options.hasBorder, label: t.label})
                    });
                    this.items.add(e)
                });
                this.setTemplate({
                    tag: "div",
                    children: this.items,
                    attributes: {class: ["ck", "ck-color-grid"], style: n}
                });
                this.on("change:selectedColor", (t, e, i) => {
                    for (const t of this.items) {
                        t.isOn = t.color === i
                    }
                })
            }

            focus() {
                if (this.items.length) {
                    this.items.first.focus()
                }
            }

            focusLast() {
                if (this.items.length) {
                    this.items.last.focus()
                }
            }

            render() {
                super.render();
                for (const t of this.items) {
                    this.focusTracker.add(t.element)
                }
                this.items.on("add", (t, e) => {
                    this.focusTracker.add(e.element)
                });
                this.items.on("remove", (t, e) => {
                    this.focusTracker.remove(e.element)
                });
                this.keystrokes.listenTo(this.element)
            }
        }

        var Nk = i(49);

        class Mk extends Gp {
            constructor(t) {
                super(t);
                this.set("text");
                this.set("for");
                this.id = `ck-editor__label_${is()}`;
                const e = this.bindTemplate;
                this.setTemplate({
                    tag: "label",
                    attributes: {class: ["ck", "ck-label"], id: this.id, for: e.to("for")},
                    children: [{text: e.to("text")}]
                })
            }
        }

        class Bk extends ys {
            constructor(t) {
                super(t);
                this.set("isEmpty", true)
            }

            add(t, e) {
                if (this.find(e => e.color === t.color)) {
                    return
                }
                super.add(t, e);
                this.set("isEmpty", false)
            }

            remove(t) {
                const e = super.remove(t);
                if (this.length === 0) {
                    this.set("isEmpty", true)
                }
                return e
            }

            hasColor(t) {
                return !!this.find(e => e.color === t)
            }
        }

        vs(Bk, Jc);
        var zk = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M8.636 9.531l-2.758 3.94a.5.5 0 0 0 .122.696l3.224 2.284h1.314l2.636-3.736L8.636 9.53zm.288 8.451L5.14 15.396a2 2 0 0 1-.491-2.786l6.673-9.53a2 2 0 0 1 2.785-.49l3.742 2.62a2 2 0 0 1 .491 2.785l-7.269 10.053-2.147-.066z"/><path d="M4 18h5.523v-1H4zm-2 0h1v-1H2z"/></svg>';
        var Lk = i(51);

        class Fk extends Gp {
            constructor(t, {colors: e, columns: i, removeButtonLabel: n, documentColorsLabel: o, documentColorsCount: r}) {
                super(t);
                this.items = this.createCollection();
                this.colorDefinitions = e;
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.set("selectedColor");
                this.removeButtonLabel = n;
                this.columns = i;
                this.documentColors = new Bk;
                this.documentColorsCount = r;
                this._focusCycler = new yb({
                    focusables: this.items,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "arrowup", focusNext: "arrowdown"}
                });
                this._documentColorsLabel = o;
                this.setTemplate({tag: "div", attributes: {class: ["ck", "ck-color-table"]}, children: this.items});
                this.items.add(this._removeColorButton())
            }

            updateDocumentColors(t, e) {
                const i = t.document;
                const n = this.documentColorsCount;
                this.documentColors.clear();
                for (const o of i.getRootNames()) {
                    const r = i.getRoot(o);
                    const s = t.createRangeIn(r);
                    for (const t of s.getItems()) {
                        if (t.is("textProxy") && t.hasAttribute(e)) {
                            this._addColorToDocumentColors(t.getAttribute(e));
                            if (this.documentColors.length >= n) {
                                return
                            }
                        }
                    }
                }
            }

            updateSelectedColors() {
                const t = this.documentColorsGrid;
                const e = this.staticColorsGrid;
                const i = this.selectedColor;
                e.selectedColor = i;
                if (t) {
                    t.selectedColor = i
                }
            }

            render() {
                super.render();
                for (const t of this.items) {
                    this.focusTracker.add(t.element)
                }
                this.keystrokes.listenTo(this.element)
            }

            appendGrids() {
                if (this.staticColorsGrid) {
                    return
                }
                this.staticColorsGrid = this._createStaticColorsGrid();
                this.items.add(this.staticColorsGrid);
                if (this.documentColorsCount) {
                    const t = _p.bind(this.documentColors, this.documentColors);
                    const e = new Mk(this.locale);
                    e.text = this._documentColorsLabel;
                    e.extendTemplate({attributes: {class: ["ck", "ck-color-grid__label", t.if("isEmpty", "ck-hidden")]}});
                    this.items.add(e);
                    this.documentColorsGrid = this._createDocumentColorsGrid();
                    this.items.add(this.documentColorsGrid)
                }
            }

            focus() {
                this._focusCycler.focusFirst()
            }

            focusLast() {
                this._focusCycler.focusLast()
            }

            _removeColorButton() {
                const t = new hb;
                t.set({withText: true, icon: zk, tooltip: true, label: this.removeButtonLabel});
                t.class = "ck-color-table__remove-color";
                t.on("execute", () => {
                    this.fire("execute", {value: null})
                });
                return t
            }

            _createStaticColorsGrid() {
                const t = new Vk(this.locale, {colorDefinitions: this.colorDefinitions, columns: this.columns});
                t.delegate("execute").to(this);
                return t
            }

            _createDocumentColorsGrid() {
                const t = _p.bind(this.documentColors, this.documentColors);
                const e = new Vk(this.locale, {columns: this.columns});
                e.delegate("execute").to(this);
                e.extendTemplate({attributes: {class: t.if("isEmpty", "ck-hidden")}});
                e.items.bindTo(this.documentColors).using(t => {
                    const e = new Ok;
                    e.set({color: t.color, hasBorder: t.options && t.options.hasBorder});
                    if (t.label) {
                        e.set({label: t.label, tooltip: true})
                    }
                    e.on("execute", () => {
                        this.fire("execute", {value: t.color})
                    });
                    return e
                });
                this.documentColors.on("change:isEmpty", (t, i, n) => {
                    if (n) {
                        e.selectedColor = null
                    }
                });
                return e
            }

            _addColorToDocumentColors(t) {
                const e = this.colorDefinitions.find(e => e.color === t);
                if (!e) {
                    this.documentColors.add({color: t, label: t, options: {hasBorder: false}})
                } else {
                    this.documentColors.add(Object.assign({}, e))
                }
            }
        }

        const Dk = "fontSize";
        const jk = "fontFamily";
        const Hk = "fontColor";
        const Wk = "fontBackgroundColor";

        function qk(t, e) {
            const i = {model: {key: t, values: []}, view: {}, upcastAlso: {}};
            for (const t of e) {
                i.model.values.push(t.model);
                i.view[t.model] = t.view;
                if (t.upcastAlso) {
                    i.upcastAlso[t.model] = t.upcastAlso
                }
            }
            return i
        }

        function Uk(t) {
            return e => Kk(e.getStyle(t))
        }

        function $k(t) {
            return (e, i) => i.createAttributeElement("span", {style: `${t}:${e}`}, {priority: 7})
        }

        function Gk({dropdownView: t, colors: e, columns: i, removeButtonLabel: n, documentColorsLabel: o, documentColorsCount: r}) {
            const s = t.locale;
            const a = new Fk(s, {
                colors: e,
                columns: i,
                removeButtonLabel: n,
                documentColorsLabel: o,
                documentColorsCount: r
            });
            t.colorTableView = a;
            t.panelView.children.add(a);
            a.delegate("execute").to(t, "execute");
            return a
        }

        function Kk(t) {
            return t.replace(/\s/g, "")
        }

        class Jk extends Ek {
            constructor(t) {
                super(t, jk)
            }
        }

        function Yk(t) {
            return t.map(Qk).filter(t => !!t)
        }

        function Qk(t) {
            if (typeof t === "object") {
                return t
            }
            if (t === "default") {
                return {title: "Default", model: undefined}
            }
            if (typeof t !== "string") {
                return
            }
            return Xk(t)
        }

        function Xk(t) {
            const e = t.replace(/"|'/g, "").split(",");
            const i = e[0];
            const n = e.map(Zk).join(", ");
            return {title: i, model: i, view: {name: "span", styles: {"font-family": n}, priority: 7}}
        }

        function Zk(t) {
            t = t.trim();
            if (t.indexOf(" ") > 0) {
                t = `'${t}'`
            }
            return t
        }

        class t_ extends mp {
            static get pluginName() {
                return "FontFamilyEditing"
            }

            constructor(t) {
                super(t);
                t.config.define(jk, {options: ["default", "Arial, Helvetica, sans-serif", "Courier New, Courier, monospace", "Georgia, serif", "Lucida Sans Unicode, Lucida Grande, sans-serif", "Tahoma, Geneva, sans-serif", "Times New Roman, Times, serif", "Trebuchet MS, Helvetica, sans-serif", "Verdana, Geneva, sans-serif"]})
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: jk});
                t.model.schema.setAttributeProperties(jk, {isFormatting: true, copyOnEnter: true});
                const e = Yk(t.config.get("fontFamily.options")).filter(t => t.model);
                const i = qk(jk, e);
                t.conversion.attributeToElement(i);
                t.commands.add(jk, new Jk(t))
            }
        }

        class e_ {
            constructor(t, e) {
                if (e) {
                    qc(this, e)
                }
                if (t) {
                    this.set(t)
                }
            }
        }

        vs(e_, Jc);
        var i_ = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.03 3h6.149a.75.75 0 1 1 0 1.5h-5.514L11.03 3zm1.27 3h4.879a.75.75 0 1 1 0 1.5h-4.244L12.3 6zm1.27 3h3.609a.75.75 0 1 1 0 1.5h-2.973L13.57 9zm-2.754 2.5L8.038 4.785 5.261 11.5h5.555zm.62 1.5H4.641l-1.666 4.028H1.312l5.789-14h1.875l5.789 14h-1.663L11.436 13z"/></svg>';

        class n_ extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                const i = this._getLocalizedOptions();
                const n = t.commands.get(jk);
                t.ui.componentFactory.add(jk, o => {
                    const r = Wb(o);
                    Ub(r, o_(i, n));
                    r.buttonView.set({label: e("jo"), icon: i_, tooltip: true});
                    r.extendTemplate({attributes: {class: "ck-font-family-dropdown"}});
                    r.bind("isEnabled").to(n);
                    this.listenTo(r, "execute", e => {
                        t.execute(e.source.commandName, {value: e.source.commandParam});
                        t.editing.view.focus()
                    });
                    return r
                })
            }

            _getLocalizedOptions() {
                const t = this.editor;
                const e = t.t;
                const i = Yk(t.config.get(jk).options);
                return i.map(t => {
                    if (t.title === "Default") {
                        t.title = e("jp")
                    }
                    return t
                })
            }
        }

        function o_(t, e) {
            const i = new ys;
            for (const n of t) {
                const t = {
                    type: "button",
                    model: new e_({commandName: jk, commandParam: n.model, label: n.title, withText: true})
                };
                t.model.bind("isOn").to(e, "value", t => t === n.model);
                if (n.view && n.view.styles) {
                    t.model.set("labelStyle", `font-family: ${n.view.styles["font-family"]}`)
                }
                i.add(t)
            }
            return i
        }

        class r_ extends mp {
            static get requires() {
                return [t_, n_]
            }

            static get pluginName() {
                return "FontFamily"
            }
        }

        class s_ extends Ek {
            constructor(t) {
                super(t, Dk)
            }
        }

        function a_(t) {
            return t.map(l_).filter(t => !!t)
        }

        const c_ = {
            tiny: {title: "Tiny", model: "tiny", view: {name: "span", classes: "text-tiny", priority: 7}},
            small: {title: "Small", model: "small", view: {name: "span", classes: "text-small", priority: 7}},
            big: {title: "Big", model: "big", view: {name: "span", classes: "text-big", priority: 7}},
            huge: {title: "Huge", model: "huge", view: {name: "span", classes: "text-huge", priority: 7}}
        };

        function l_(t) {
            if (typeof t === "object") {
                return t
            }
            if (c_[t]) {
                return c_[t]
            }
            if (t === "default") {
                return {model: undefined, title: "Default"}
            }
            const e = parseFloat(t);
            if (isNaN(e)) {
                return
            }
            return d_(e)
        }

        function d_(t) {
            const e = String(t);
            return {title: e, model: t, view: {name: "span", styles: {"font-size": `${t}px`}, priority: 7}}
        }

        class u_ extends mp {
            static get pluginName() {
                return "FontSizeEditing"
            }

            constructor(t) {
                super(t);
                t.config.define(Dk, {options: ["tiny", "small", "default", "big", "huge"]});
                const e = a_(this.editor.config.get("fontSize.options")).filter(t => t.model);
                const i = qk(Dk, e);
                t.conversion.attributeToElement(i);
                t.commands.add(Dk, new s_(t))
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: Dk});
                t.model.schema.setAttributeProperties(Dk, {isFormatting: true, copyOnEnter: true})
            }
        }

        var h_ = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.816 11.5L7.038 4.785 4.261 11.5h5.555zm.62 1.5H3.641l-1.666 4.028H.312l5.789-14h1.875l5.789 14h-1.663L10.436 13zm7.55 2.279l.779-.779.707.707-2.265 2.265-2.193-2.265.707-.707.765.765V4.825c0-.042 0-.083.002-.123l-.77.77-.707-.707L17.207 2.5l2.265 2.265-.707.707-.782-.782c.002.043.003.089.003.135v10.454z"/></svg>';
        var f_ = i(53);

        class g_ extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                const i = this._getLocalizedOptions();
                const n = t.commands.get(Dk);
                t.ui.componentFactory.add(Dk, o => {
                    const r = Wb(o);
                    Ub(r, m_(i, n));
                    r.buttonView.set({label: e("jq"), icon: h_, tooltip: true});
                    r.extendTemplate({attributes: {class: ["ck-font-size-dropdown"]}});
                    r.bind("isEnabled").to(n);
                    this.listenTo(r, "execute", e => {
                        t.execute(e.source.commandName, {value: e.source.commandParam});
                        t.editing.view.focus()
                    });
                    return r
                })
            }

            _getLocalizedOptions() {
                const t = this.editor;
                const e = t.t;
                const i = {Default: e("jp"), Tiny: e("jr"), Small: e("js"), Big: e("jt"), Huge: e("ju")};
                const n = a_(t.config.get(Dk).options);
                return n.map(t => {
                    const e = i[t.title];
                    if (e && e != t.title) {
                        t = Object.assign({}, t, {title: e})
                    }
                    return t
                })
            }
        }

        function m_(t, e) {
            const i = new ys;
            for (const n of t) {
                const t = {
                    type: "button",
                    model: new e_({
                        commandName: Dk,
                        commandParam: n.model,
                        label: n.title,
                        class: "ck-fontsize-option",
                        withText: true
                    })
                };
                if (n.view && n.view.styles) {
                    t.model.set("labelStyle", `font-size:${n.view.styles["font-size"]}`)
                }
                if (n.view && n.view.classes) {
                    t.model.set("class", `${t.model.class} ${n.view.classes}`)
                }
                t.model.bind("isOn").to(e, "value", t => t === n.model);
                i.add(t)
            }
            return i
        }

        class p_ extends mp {
            static get requires() {
                return [u_, g_]
            }

            static get pluginName() {
                return "FontSize"
            }
        }

        class b_ extends Ek {
            constructor(t) {
                super(t, Hk)
            }
        }

        class w_ extends mp {
            static get pluginName() {
                return "FontColorEditing"
            }

            constructor(t) {
                super(t);
                t.config.define(Hk, {
                    colors: [{color: "hsl(0, 0%, 0%)", label: "Black"}, {
                        color: "hsl(0, 0%, 30%)",
                        label: "Dim grey"
                    }, {color: "hsl(0, 0%, 60%)", label: "Grey"}, {
                        color: "hsl(0, 0%, 90%)",
                        label: "Light grey"
                    }, {color: "hsl(0, 0%, 100%)", label: "White", hasBorder: true}, {
                        color: "hsl(0, 75%, 60%)",
                        label: "Red"
                    }, {color: "hsl(30, 75%, 60%)", label: "Orange"}, {
                        color: "hsl(60, 75%, 60%)",
                        label: "Yellow"
                    }, {color: "hsl(90, 75%, 60%)", label: "Light green"}, {
                        color: "hsl(120, 75%, 60%)",
                        label: "Green"
                    }, {color: "hsl(150, 75%, 60%)", label: "Aquamarine"}, {
                        color: "hsl(180, 75%, 60%)",
                        label: "Turquoise"
                    }, {color: "hsl(210, 75%, 60%)", label: "Light blue"}, {
                        color: "hsl(240, 75%, 60%)",
                        label: "Blue"
                    }, {color: "hsl(270, 75%, 60%)", label: "Purple"}], columns: 5
                });
                t.conversion.for("upcast").elementToAttribute({
                    view: {name: "span", styles: {color: /[\s\S]+/}},
                    model: {key: Hk, value: Uk("color")}
                });
                t.conversion.for("downcast").attributeToElement({model: Hk, view: $k("color")});
                t.commands.add(Hk, new b_(t));
                t.model.schema.extend("$text", {allowAttributes: Hk});
                t.model.schema.setAttributeProperties(Hk, {isFormatting: true, copyOnEnter: true})
            }
        }

        function k_(t, e) {
            const i = t.t;
            const n = {
                Black: i("lx"),
                "Dim grey": i("ly"),
                Grey: i("lz"),
                "Light grey": i("ma"),
                White: i("mb"),
                Red: i("mc"),
                Orange: i("md"),
                Yellow: i("me"),
                "Light green": i("mf"),
                Green: i("mg"),
                Aquamarine: i("mh"),
                Turquoise: i("mi"),
                "Light blue": i("mj"),
                Blue: i("mk"),
                Purple: i("ml")
            };
            return e.map(t => {
                const e = n[t.label];
                if (e && e != t.label) {
                    t.label = e
                }
                return t
            })
        }

        function __(t) {
            return t.map(v_).filter(t => !!t)
        }

        function v_(t) {
            if (typeof t === "string") {
                return {
                    model: t.replace(/ /g, ""),
                    label: t,
                    hasBorder: false,
                    view: {name: "span", styles: {color: t}}
                }
            } else {
                return {
                    model: t.color.replace(/ /g, ""),
                    label: t.label || t.color,
                    hasBorder: t.hasBorder === undefined ? false : t.hasBorder,
                    view: {name: "span", styles: {color: `${t.color}`}}
                }
            }
        }

        class y_ extends mp {
            constructor(t, {commandName: e, icon: i, componentName: n, dropdownLabel: o}) {
                super(t);
                this.commandName = e;
                this.componentName = n;
                this.icon = i;
                this.dropdownLabel = o;
                this.columns = t.config.get(`${this.componentName}.columns`);
                this.colorTableView
            }

            init() {
                const t = this.editor;
                const e = t.locale;
                const i = e.t;
                const n = t.commands.get(this.commandName);
                const o = __(t.config.get(this.componentName).colors);
                const r = k_(e, o);
                const s = t.config.get(`${this.componentName}.documentColors`);
                t.ui.componentFactory.add(this.componentName, e => {
                    const o = Wb(e);
                    this.colorTableView = Gk({
                        dropdownView: o,
                        colors: r.map(t => ({label: t.label, color: t.model, options: {hasBorder: t.hasBorder}})),
                        columns: this.columns,
                        removeButtonLabel: i("li"),
                        documentColorsLabel: s !== 0 ? i("lj") : undefined,
                        documentColorsCount: s === undefined ? this.columns : s
                    });
                    this.colorTableView.bind("selectedColor").to(n, "value");
                    o.buttonView.set({label: this.dropdownLabel, icon: this.icon, tooltip: true});
                    o.extendTemplate({attributes: {class: "ck-color-ui-dropdown"}});
                    o.bind("isEnabled").to(n);
                    o.on("execute", (e, i) => {
                        t.execute(this.commandName, i);
                        t.editing.view.focus()
                    });
                    o.on("change:isOpen", (e, i, n) => {
                        o.colorTableView.appendGrids();
                        if (n) {
                            if (s !== 0) {
                                this.colorTableView.updateDocumentColors(t.model, this.componentName)
                            }
                            this.colorTableView.updateSelectedColors()
                        }
                    });
                    return o
                })
            }
        }

        var x_ = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M12.4 10.3L10 4.5l-2.4 5.8h4.8zm.5 1.2H7.1L5.7 15H4.2l5-12h1.6l5 12h-1.5L13 11.5zm3.1 7H4a1 1 0 0 1 0-2h12a1 1 0 0 1 0 2z"/></svg>';

        class C_ extends y_ {
            constructor(t) {
                const e = t.locale.t;
                super(t, {commandName: Hk, componentName: Hk, icon: x_, dropdownLabel: e("jv")})
            }

            static get pluginName() {
                return "FontColorUI"
            }
        }

        class A_ extends mp {
            static get requires() {
                return [w_, C_]
            }

            static get pluginName() {
                return "FontColor"
            }
        }

        class T_ extends Ek {
            constructor(t) {
                super(t, Wk)
            }
        }

        class P_ extends mp {
            static get pluginName() {
                return "FontBackgroundColorEditing"
            }

            constructor(t) {
                super(t);
                t.config.define(Wk, {
                    colors: [{color: "hsl(0, 0%, 0%)", label: "Black"}, {
                        color: "hsl(0, 0%, 30%)",
                        label: "Dim grey"
                    }, {color: "hsl(0, 0%, 60%)", label: "Grey"}, {
                        color: "hsl(0, 0%, 90%)",
                        label: "Light grey"
                    }, {color: "hsl(0, 0%, 100%)", label: "White", hasBorder: true}, {
                        color: "hsl(0, 75%, 60%)",
                        label: "Red"
                    }, {color: "hsl(30, 75%, 60%)", label: "Orange"}, {
                        color: "hsl(60, 75%, 60%)",
                        label: "Yellow"
                    }, {color: "hsl(90, 75%, 60%)", label: "Light green"}, {
                        color: "hsl(120, 75%, 60%)",
                        label: "Green"
                    }, {color: "hsl(150, 75%, 60%)", label: "Aquamarine"}, {
                        color: "hsl(180, 75%, 60%)",
                        label: "Turquoise"
                    }, {color: "hsl(210, 75%, 60%)", label: "Light blue"}, {
                        color: "hsl(240, 75%, 60%)",
                        label: "Blue"
                    }, {color: "hsl(270, 75%, 60%)", label: "Purple"}], columns: 5
                });
                t.conversion.for("upcast").elementToAttribute({
                    view: {
                        name: "span",
                        styles: {"background-color": /[\s\S]+/}
                    }, model: {key: Wk, value: Uk("background-color")}
                });
                t.conversion.for("downcast").attributeToElement({model: Wk, view: $k("background-color")});
                t.commands.add(Wk, new T_(t));
                t.model.schema.extend("$text", {allowAttributes: Wk});
                t.model.schema.setAttributeProperties(Wk, {isFormatting: true, copyOnEnter: true})
            }
        }

        var S_ = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M4 2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2zm8.38 9.262H7.62L10 5.506l2.38 5.756zm.532 1.285L14.34 16h1.426L10.804 4H9.196L4.234 16H5.66l1.428-3.453h5.824z"/></svg>';

        class E_ extends y_ {
            constructor(t) {
                const e = t.locale.t;
                super(t, {commandName: Wk, componentName: Wk, icon: S_, dropdownLabel: e("jw")})
            }

            static get pluginName() {
                return "FontBackgroundColorUI"
            }
        }

        class R_ extends mp {
            static get requires() {
                return [P_, E_]
            }

            static get pluginName() {
                return "FontBackgroundColor"
            }
        }

        class O_ extends jw {
            refresh() {
                const t = this.editor.model;
                const e = t.document;
                const i = Ww(e.selection.getSelectedBlocks());
                this.value = !!i && i.is("paragraph");
                this.isEnabled = !!i && I_(i, t.schema)
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.document;
                e.change(n => {
                    const o = (t.selection || i.selection).getSelectedBlocks();
                    for (const t of o) {
                        if (!t.is("paragraph") && I_(t, e.schema)) {
                            n.rename(t, "paragraph")
                        }
                    }
                })
            }
        }

        function I_(t, e) {
            return e.checkChild(t.parent, "paragraph") && !e.isObject(t)
        }

        class V_ extends mp {
            static get pluginName() {
                return "Paragraph"
            }

            init() {
                const t = this.editor;
                const e = t.model;
                const i = t.data;
                t.commands.add("paragraph", new O_(t));
                e.schema.register("paragraph", {inheritAllFrom: "$block"});
                t.conversion.elementToElement({model: "paragraph", view: "p"});
                t.conversion.for("upcast").elementToElement({
                    model: (t, e) => {
                        if (!V_.paragraphLikeElements.has(t.name)) {
                            return null
                        }
                        if (t.isEmpty) {
                            return null
                        }
                        return e.createElement("paragraph")
                    }, converterPriority: "low"
                });
                i.upcastDispatcher.on("element", (t, e, i) => {
                    if (!i.consumable.test(e.viewItem, {name: e.viewItem.name})) {
                        return
                    }
                    if (M_(e.viewItem, e.modelCursor, i.schema)) {
                        Object.assign(e, N_(e.viewItem, e.modelCursor, i))
                    }
                }, {priority: "low"});
                i.upcastDispatcher.on("text", (t, e, i) => {
                    if (e.modelRange) {
                        return
                    }
                    if (M_(e.viewItem, e.modelCursor, i.schema)) {
                        Object.assign(e, N_(e.viewItem, e.modelCursor, i))
                    }
                }, {priority: "lowest"});
                e.document.registerPostFixer(t => this._autoparagraphEmptyRoots(t));
                t.data.on("ready", () => {
                    e.enqueueChange("transparent", t => this._autoparagraphEmptyRoots(t))
                }, {priority: "lowest"})
            }

            _autoparagraphEmptyRoots(t) {
                const e = this.editor.model;
                for (const i of e.document.getRootNames()) {
                    const n = e.document.getRoot(i);
                    if (n.isEmpty && n.rootName != "$graveyard") {
                        if (e.schema.checkChild(n, "paragraph")) {
                            t.insertElement("paragraph", n);
                            return true
                        }
                    }
                }
            }
        }

        V_.paragraphLikeElements = new Set(["blockquote", "dd", "div", "dt", "h1", "h2", "h3", "h4", "h5", "h6", "li", "p", "td"]);

        function N_(t, e, i) {
            const n = i.writer.createElement("paragraph");
            i.writer.insert(n, e);
            return i.convertItem(t, i.writer.createPositionAt(n, 0))
        }

        function M_(t, e, i) {
            const n = i.createContext(e);
            if (!i.checkChild(n, "paragraph")) {
                return false
            }
            if (!i.checkChild(n.push("paragraph"), t)) {
                return false
            }
            return true
        }

        class B_ extends jw {
            constructor(t, e) {
                super(t);
                this.modelElements = e
            }

            refresh() {
                const t = Ww(this.editor.model.document.selection.getSelectedBlocks());
                this.value = !!t && this.modelElements.includes(t.name) && t.name;
                this.isEnabled = !!t && this.modelElements.some(e => z_(t, e, this.editor.model.schema))
            }

            execute(t) {
                const e = this.editor.model;
                const i = e.document;
                const n = t.value;
                e.change(t => {
                    const o = Array.from(i.selection.getSelectedBlocks()).filter(t => z_(t, n, e.schema));
                    for (const e of o) {
                        if (!e.is(n)) {
                            t.rename(e, n)
                        }
                    }
                })
            }
        }

        function z_(t, e, i) {
            return i.checkChild(t.parent, e) && !i.isObject(t)
        }

        const L_ = "paragraph";

        class F_ extends mp {
            static get pluginName() {
                return "HeadingEditing"
            }

            constructor(t) {
                super(t);
                t.config.define("heading", {
                    options: [{
                        model: "paragraph",
                        title: "Paragraph",
                        class: "ck-heading_paragraph"
                    }, {
                        model: "heading1",
                        view: "h2",
                        title: "Heading 1",
                        class: "ck-heading_heading1"
                    }, {
                        model: "heading2",
                        view: "h3",
                        title: "Heading 2",
                        class: "ck-heading_heading2"
                    }, {model: "heading3", view: "h4", title: "Heading 3", class: "ck-heading_heading3"}]
                })
            }

            static get requires() {
                return [V_]
            }

            init() {
                const t = this.editor;
                const e = t.config.get("heading.options");
                const i = [];
                for (const n of e) {
                    if (n.model !== L_) {
                        t.model.schema.register(n.model, {inheritAllFrom: "$block"});
                        t.conversion.elementToElement(n);
                        i.push(n.model)
                    }
                }
                this._addDefaultH1Conversion(t);
                t.commands.add("heading", new B_(t, i))
            }

            afterInit() {
                const t = this.editor;
                const e = t.commands.get("enter");
                const i = t.config.get("heading.options");
                if (e) {
                    this.listenTo(e, "afterExecute", (e, n) => {
                        const o = t.model.document.selection.getFirstPosition().parent;
                        const r = i.some(t => o.is(t.model));
                        if (r && !o.is(L_) && o.childCount === 0) {
                            n.writer.rename(o, L_)
                        }
                    })
                }
            }

            _addDefaultH1Conversion(t) {
                t.conversion.for("upcast").elementToElement({
                    model: "heading1",
                    view: "h1",
                    converterPriority: os.get("low") + 1
                })
            }
        }

        function D_(t) {
            const e = t.t;
            const i = {
                Paragraph: e("ny"),
                "Heading 1": e("nz"),
                "Heading 2": e("oa"),
                "Heading 3": e("ob"),
                "Heading 4": e("oc"),
                "Heading 5": e("od"),
                "Heading 6": e("oe")
            };
            return t.config.get("heading.options").map(t => {
                const e = i[t.title];
                if (e && e != t.title) {
                    t.title = e
                }
                return t
            })
        }

        var j_ = i(11);

        class H_ extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                const i = D_(t);
                const n = e("jd");
                const o = e("je");
                t.ui.componentFactory.add("heading", e => {
                    const r = {};
                    const s = new ys;
                    const a = t.commands.get("heading");
                    const c = t.commands.get("paragraph");
                    const l = [a];
                    for (const t of i) {
                        const e = {type: "button", model: new e_({label: t.title, class: t.class, withText: true})};
                        if (t.model === "paragraph") {
                            e.model.bind("isOn").to(c, "value");
                            e.model.set("commandName", "paragraph");
                            l.push(c)
                        } else {
                            e.model.bind("isOn").to(a, "value", e => e === t.model);
                            e.model.set({commandName: "heading", commandValue: t.model})
                        }
                        s.add(e);
                        r[t.model] = t.title
                    }
                    const d = Wb(e);
                    Ub(d, s);
                    d.buttonView.set({isOn: false, withText: true, tooltip: o});
                    d.extendTemplate({attributes: {class: ["ck-heading-dropdown"]}});
                    d.bind("isEnabled").toMany(l, "isEnabled", (...t) => t.some(t => t));
                    d.buttonView.bind("label").to(a, "value", c, "value", (t, e) => {
                        const i = t || e && "paragraph";
                        return r[i] ? r[i] : n
                    });
                    this.listenTo(d, "execute", e => {
                        t.execute(e.source.commandName, e.source.commandValue ? {value: e.source.commandValue} : undefined);
                        t.editing.view.focus()
                    });
                    return d
                })
            }
        }

        class W_ extends mp {
            static get requires() {
                return [F_, H_]
            }

            static get pluginName() {
                return "Heading"
            }
        }

        class q_ {
            constructor() {
                this._stack = []
            }

            add(t, e) {
                const i = this._stack;
                const n = i[0];
                this._insertDescriptor(t);
                const o = i[0];
                if (n !== o && !U_(n, o)) {
                    this.fire("change:top", {oldDescriptor: n, newDescriptor: o, writer: e})
                }
            }

            remove(t, e) {
                const i = this._stack;
                const n = i[0];
                this._removeDescriptor(t);
                const o = i[0];
                if (n !== o && !U_(n, o)) {
                    this.fire("change:top", {oldDescriptor: n, newDescriptor: o, writer: e})
                }
            }

            _insertDescriptor(t) {
                const e = this._stack;
                const i = e.findIndex(e => e.id === t.id);
                if (U_(t, e[i])) {
                    return
                }
                if (i > -1) {
                    e.splice(i, 1)
                }
                let n = 0;
                while (e[n] && $_(e[n], t)) {
                    n++
                }
                e.splice(n, 0, t)
            }

            _removeDescriptor(t) {
                const e = this._stack;
                const i = e.findIndex(e => e.id === t);
                if (i > -1) {
                    e.splice(i, 1)
                }
            }
        }

        vs(q_, ds);

        function U_(t, e) {
            return t && e && t.priority == e.priority && G_(t.classes) == G_(e.classes)
        }

        function $_(t, e) {
            if (t.priority > e.priority) {
                return true
            } else if (t.priority < e.priority) {
                return false
            }
            return G_(t.classes) > G_(e.classes)
        }

        function G_(t) {
            return Array.isArray(t) ? t.sort().join(",") : t
        }

        var K_ = '<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M4 0v1H1v3H0V.5A.5.5 0 0 1 .5 0H4zm8 0h3.5a.5.5 0 0 1 .5.5V4h-1V1h-3V0zM4 16H.5a.5.5 0 0 1-.5-.5V12h1v3h3v1zm8 0v-1h3v-3h1v3.5a.5.5 0 0 1-.5.5H12z"/><path fill-opacity=".256" d="M1 1h14v14H1z"/><g class="ck-icon__selected-indicator"><path d="M7 0h2v1H7V0zM0 7h1v2H0V7zm15 0h1v2h-1V7zm-8 8h2v1H7v-1z"/><path fill-opacity=".254" d="M1 1h14v14H1z"/></g></svg>';
        const J_ = "ck-widget";
        const Y_ = "ck-widget_selected";

        function Q_(t) {
            if (!t.is("element")) {
                return false
            }
            return !!t.getCustomProperty("widget")
        }

        function X_(t, e, i = {}) {
            if (!Al.isEdge) {
                e.setAttribute("contenteditable", "false", t)
            }
            e.addClass(J_, t);
            e.setCustomProperty("widget", true, t);
            t.getFillerOffset = rv;
            if (i.label) {
                tv(t, i.label, e)
            }
            if (i.hasSelectionHandle) {
                sv(t, e)
            }
            Z_(t, e, (t, e, i) => i.addClass(n(e.classes), t), (t, e, i) => i.removeClass(n(e.classes), t));
            return t;

            function n(t) {
                return Array.isArray(t) ? t : [t]
            }
        }

        function Z_(t, e, i, n) {
            const o = new q_;
            o.on("change:top", (e, o) => {
                if (o.oldDescriptor) {
                    n(t, o.oldDescriptor, o.writer)
                }
                if (o.newDescriptor) {
                    i(t, o.newDescriptor, o.writer)
                }
            });
            e.setCustomProperty("addHighlight", (t, e, i) => o.add(e, i), t);
            e.setCustomProperty("removeHighlight", (t, e, i) => o.remove(e, i), t)
        }

        function tv(t, e, i) {
            i.setCustomProperty("widgetLabel", e, t)
        }

        function ev(t) {
            const e = t.getCustomProperty("widgetLabel");
            if (!e) {
                return ""
            }
            return typeof e == "function" ? e() : e
        }

        function iv(t, e) {
            e.addClass(["ck-editor__editable", "ck-editor__nested-editable"], t);
            if (!Al.isEdge) {
                e.setAttribute("contenteditable", t.isReadOnly ? "false" : "true", t);
                t.on("change:isReadOnly", (i, n, o) => {
                    e.setAttribute("contenteditable", o ? "false" : "true", t)
                })
            }
            t.on("change:isFocused", (i, n, o) => {
                if (o) {
                    e.addClass("ck-editor__nested-editable_focused", t)
                } else {
                    e.removeClass("ck-editor__nested-editable_focused", t)
                }
            });
            return t
        }

        function nv(t, e) {
            const i = t.getSelectedElement();
            if (i && e.schema.isBlock(i)) {
                return e.createPositionAfter(i)
            }
            const n = t.getSelectedBlocks().next().value;
            if (n) {
                if (n.isEmpty) {
                    return e.createPositionAt(n, 0)
                }
                const i = e.createPositionAfter(n);
                if (t.focus.isTouching(i)) {
                    return i
                }
                return e.createPositionBefore(n)
            }
            return t.focus
        }

        function ov(t, e) {
            return (i, n) => {
                const {mapper: o, viewPosition: r} = n;
                const s = o.findMappedViewAncestor(r);
                if (!e(s)) {
                    return
                }
                const a = o.toModelElement(s);
                n.modelPosition = t.createPositionAt(a, r.isAtStart ? "before" : "after")
            }
        }

        function rv() {
            return null
        }

        function sv(t, e) {
            const i = e.createUIElement("div", {class: "ck ck-widget__selection-handle"}, (function (t) {
                const e = this.toDomElement(t);
                const i = new cb;
                i.set("content", K_);
                i.render();
                e.appendChild(i.element);
                return e
            }));
            e.insert(e.createPositionAt(t, 0), i);
            e.addClass(["ck-widget_with-selection-handle"], t)
        }

        class av extends jw {
            refresh() {
                this.isEnabled = cv(this.editor.model)
            }

            execute() {
                const t = this.editor.model;
                t.change(e => {
                    const i = e.createElement("horizontalLine");
                    t.insertContent(i);
                    let n = i.nextSibling;
                    const o = n && t.schema.checkChild(n, "$text");
                    if (!o && t.schema.checkChild(i.parent, "paragraph")) {
                        n = e.createElement("paragraph");
                        t.insertContent(n, e.createPositionAfter(i))
                    }
                    if (n) {
                        e.setSelection(n, 0)
                    }
                })
            }
        }

        function cv(t) {
            const e = t.schema;
            const i = t.document.selection;
            return lv(i, e, t) && !dv(i, e)
        }

        function lv(t, e, i) {
            const n = uv(t, i);
            return e.checkChild(n, "horizontalLine")
        }

        function dv(t, e) {
            const i = t.getSelectedElement();
            return i && e.isObject(i)
        }

        function uv(t, e) {
            const i = nv(t, e);
            const n = i.parent;
            if (n.isEmpty && !n.is("$root")) {
                return n.parent
            }
            return n
        }

        var hv = i(56);

        class fv extends mp {
            static get pluginName() {
                return "HorizontalLineEditing"
            }

            init() {
                const t = this.editor;
                const e = t.model.schema;
                const i = t.t;
                const n = t.conversion;
                e.register("horizontalLine", {isObject: true, allowWhere: "$block"});
                n.for("dataDowncast").elementToElement({
                    model: "horizontalLine",
                    view: (t, e) => e.createEmptyElement("hr")
                });
                n.for("editingDowncast").elementToElement({
                    model: "horizontalLine", view: (t, e) => {
                        const n = i("jf");
                        const o = e.createContainerElement("div");
                        const r = e.createEmptyElement("hr");
                        e.addClass("ck-horizontal-line", o);
                        e.setCustomProperty("hr", true, o);
                        e.insert(e.createPositionAt(o, 0), r);
                        return gv(o, e, n)
                    }
                });
                n.for("upcast").elementToElement({view: "hr", model: "horizontalLine"});
                t.commands.add("horizontalLine", new av(t))
            }
        }

        function gv(t, e, i) {
            e.setCustomProperty("horizontalLine", true, t);
            return X_(t, e, {label: i})
        }

        var mv = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 9h16v2H2z"/></svg>';

        class pv extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add("horizontalLine", i => {
                    const n = t.commands.get("horizontalLine");
                    const o = new hb(i);
                    o.set({label: e("jf"), icon: mv, tooltip: true});
                    o.bind("isEnabled").to(n, "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute("horizontalLine");
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class bv extends mp {
            static get requires() {
                return [fv, pv]
            }

            static get pluginName() {
                return "HorizontalLine"
            }
        }

        class wv extends Gd {
            observe(t) {
                this.listenTo(t, "load", (t, e) => {
                    const i = e.target;
                    if (i.tagName == "IMG") {
                        this._fireEvents(e)
                    }
                }, {useCapture: true})
            }

            _fireEvents(t) {
                if (this.isEnabled) {
                    this.document.fire("layoutChanged");
                    this.document.fire("imageLoaded", t)
                }
            }
        }

        function kv(t, e, i) {
            e.setCustomProperty("image", true, t);
            return X_(t, e, {label: n});

            function n() {
                const e = Av(t);
                const n = e.getAttribute("alt");
                return n ? `${n} ${i}` : i
            }
        }

        function _v(t) {
            return !!t.getCustomProperty("image") && Q_(t)
        }

        function vv(t) {
            const e = t.getSelectedElement();
            if (e && _v(e)) {
                return e
            }
            return null
        }

        function yv(t) {
            return !!t && t.is("image")
        }

        function xv(t, e, i = {}) {
            const n = t.createElement("image", i);
            const o = nv(e.document.selection, e);
            e.insertContent(n, o);
            if (n.parent) {
                t.setSelection(n, "on")
            }
        }

        function Cv(t) {
            const e = t.schema;
            const i = t.document.selection;
            return Tv(i, e, t) && !Pv(i, e) && Sv(i)
        }

        function Av(t) {
            return Array.from(t.getChildren()).find(t => t.is("img"))
        }

        function Tv(t, e, i) {
            const n = Ev(t, i);
            return e.checkChild(n, "image")
        }

        function Pv(t, e) {
            const i = t.getSelectedElement();
            return i && e.isObject(i)
        }

        function Sv(t) {
            return [...t.focus.getAncestors()].every(t => !t.is("image"))
        }

        function Ev(t, e) {
            const i = nv(t, e);
            const n = i.parent;
            if (n.isEmpty && !n.is("$root")) {
                return n.parent
            }
            return n
        }

        function Rv() {
            return e => {
                e.on("element:figure", t)
            };

            function t(t, e, i) {
                if (!i.consumable.test(e.viewItem, {name: true, classes: "image"})) {
                    return
                }
                const n = Av(e.viewItem);
                if (!n || !n.hasAttribute("src") || !i.consumable.test(n, {name: true})) {
                    return
                }
                const o = i.convertItem(n, e.modelCursor);
                const r = Ww(o.modelRange.getItems());
                if (!r) {
                    return
                }
                i.convertChildren(e.viewItem, i.writer.createPositionAt(r, 0));
                e.modelRange = o.modelRange;
                e.modelCursor = o.modelCursor
            }
        }

        function Ov() {
            return e => {
                e.on("attribute:srcset:image", t)
            };

            function t(t, e, i) {
                if (!i.consumable.consume(e.item, t.name)) {
                    return
                }
                const n = i.writer;
                const o = i.mapper.toViewElement(e.item);
                const r = Av(o);
                if (e.attributeNewValue === null) {
                    const t = e.attributeOldValue;
                    if (t.data) {
                        n.removeAttribute("srcset", r);
                        n.removeAttribute("sizes", r);
                        if (t.width) {
                            n.removeAttribute("width", r)
                        }
                    }
                } else {
                    const t = e.attributeNewValue;
                    if (t.data) {
                        n.setAttribute("srcset", t.data, r);
                        n.setAttribute("sizes", "100vw", r);
                        if (t.width) {
                            n.setAttribute("width", t.width, r)
                        }
                    }
                }
            }
        }

        function Iv(t) {
            return i => {
                i.on(`attribute:${t}:image`, e)
            };

            function e(t, e, i) {
                if (!i.consumable.consume(e.item, t.name)) {
                    return
                }
                const n = i.writer;
                const o = i.mapper.toViewElement(e.item);
                const r = Av(o);
                if (e.attributeNewValue !== null) {
                    n.setAttribute(e.attributeKey, e.attributeNewValue, r)
                } else {
                    n.removeAttribute(e.attributeKey, r)
                }
            }
        }

        class Vv extends jw {
            refresh() {
                this.isEnabled = Cv(this.editor.model)
            }

            execute(t) {
                const e = this.editor.model;
                e.change(i => {
                    const n = Array.isArray(t.source) ? t.source : [t.source];
                    for (const t of n) {
                        xv(i, e, {src: t})
                    }
                })
            }
        }

        class Nv extends mp {
            static get pluginName() {
                return "ImageEditing"
            }

            init() {
                const t = this.editor;
                const e = t.model.schema;
                const i = t.t;
                const n = t.conversion;
                t.editing.view.addObserver(wv);
                e.register("image", {
                    isObject: true,
                    isBlock: true,
                    allowWhere: "$block",
                    allowAttributes: ["alt", "src", "srcset"]
                });
                n.for("dataDowncast").elementToElement({model: "image", view: (t, e) => Mv(e)});
                n.for("editingDowncast").elementToElement({model: "image", view: (t, e) => kv(Mv(e), e, i("jx"))});
                n.for("downcast").add(Iv("src")).add(Iv("alt")).add(Ov());
                n.for("upcast").elementToElement({
                    view: {name: "img", attributes: {src: true}},
                    model: (t, e) => e.createElement("image", {src: t.getAttribute("src")})
                }).attributeToAttribute({
                    view: {name: "img", key: "alt"},
                    model: "alt"
                }).attributeToAttribute({
                    view: {name: "img", key: "srcset"}, model: {
                        key: "srcset", value: t => {
                            const e = {data: t.getAttribute("srcset")};
                            if (t.hasAttribute("width")) {
                                e.width = t.getAttribute("width")
                            }
                            return e
                        }
                    }
                }).add(Rv());
                t.commands.add("imageInsert", new Vv(t))
            }
        }

        function Mv(t) {
            const e = t.createEmptyElement("img");
            const i = t.createContainerElement("figure", {class: "image"});
            t.insert(t.createPositionAt(i, 0), e);
            return i
        }

        class Bv extends Ju {
            constructor(t) {
                super(t);
                this.domEventType = "mousedown"
            }

            onDomEvent(t) {
                this.fire(t.type, t)
            }
        }

        var zv = i(58);
        const Lv = Bl("Ctrl+A");

        class Fv extends mp {
            static get pluginName() {
                return "Widget"
            }

            init() {
                const t = this.editor.editing.view;
                const e = t.document;
                this._previouslySelected = new Set;
                this.editor.editing.downcastDispatcher.on("selection", (t, e, i) => {
                    this._clearPreviouslySelectedWidgets(i.writer);
                    const n = i.writer;
                    const o = n.document.selection;
                    const r = o.getSelectedElement();
                    let s = null;
                    for (const t of o.getRanges()) {
                        for (const e of t) {
                            const t = e.item;
                            if (Q_(t) && !Wv(t, s)) {
                                n.addClass(Y_, t);
                                this._previouslySelected.add(t);
                                s = t;
                                if (t == r) {
                                    n.setSelection(o.getRanges(), {fake: true, label: ev(r)})
                                }
                            }
                        }
                    }
                }, {priority: "low"});
                t.addObserver(Bv);
                this.listenTo(e, "mousedown", (...t) => this._onMousedown(...t));
                this.listenTo(e, "keydown", (...t) => this._onKeydown(...t), {priority: "high"});
                this.listenTo(e, "delete", (t, e) => {
                    if (this._handleDelete(e.direction == "forward")) {
                        e.preventDefault();
                        t.stop()
                    }
                }, {priority: "high"})
            }

            _onMousedown(t, e) {
                const i = this.editor;
                const n = i.editing.view;
                const o = n.document;
                let r = e.target;
                if (Hv(r)) {
                    if (Al.isSafari && e.domEvent.detail >= 3) {
                        const t = i.editing.mapper;
                        const n = t.toModelElement(r);
                        this.editor.model.change(t => {
                            e.preventDefault();
                            t.setSelection(n, "in")
                        })
                    }
                    return
                }
                if (!Q_(r)) {
                    r = r.findAncestor(Q_);
                    if (!r) {
                        return
                    }
                }
                e.preventDefault();
                if (!o.isFocused) {
                    n.focus()
                }
                const s = i.editing.mapper.toModelElement(r);
                this._setSelectionOverElement(s)
            }

            _onKeydown(t, e) {
                const i = e.keyCode;
                const n = this.editor.locale.contentLanguageDirection === "ltr";
                const o = i == Nl.arrowdown || i == Nl[n ? "arrowright" : "arrowleft"];
                let r = false;
                if (Dv(i)) {
                    r = this._handleArrowKeys(o)
                } else if (jv(e)) {
                    r = this._selectAllNestedEditableContent() || this._selectAllContent()
                } else if (i === Nl.enter) {
                    r = this._handleEnterKey(e.shiftKey)
                }
                if (r) {
                    e.preventDefault();
                    t.stop()
                }
            }

            _handleDelete(t) {
                if (this.editor.isReadOnly) {
                    return
                }
                const e = this.editor.model.document;
                const i = e.selection;
                if (!i.isCollapsed) {
                    return
                }
                const n = this._getObjectElementNextToSelection(t);
                if (n) {
                    this.editor.model.change(t => {
                        let e = i.anchor.parent;
                        while (e.isEmpty) {
                            const i = e;
                            e = i.parent;
                            t.remove(i)
                        }
                        this._setSelectionOverElement(n)
                    });
                    return true
                }
            }

            _handleArrowKeys(t) {
                const e = this.editor.model;
                const i = e.schema;
                const n = e.document;
                const o = n.selection;
                const r = o.getSelectedElement();
                if (r && i.isObject(r)) {
                    const n = t ? o.getLastPosition() : o.getFirstPosition();
                    const r = i.getNearestSelectionRange(n, t ? "forward" : "backward");
                    if (r) {
                        e.change(t => {
                            t.setSelection(r)
                        })
                    }
                    return true
                }
                if (!o.isCollapsed) {
                    return
                }
                const s = this._getObjectElementNextToSelection(t);
                if (!!s && i.isObject(s)) {
                    this._setSelectionOverElement(s);
                    return true
                }
            }

            _handleEnterKey(t) {
                const e = this.editor.model;
                const i = e.document.selection;
                const n = i.getSelectedElement();
                if (qv(n, e.schema)) {
                    e.change(i => {
                        let o = i.createPositionAt(n, t ? "before" : "after");
                        const r = i.createElement("paragraph");
                        if (e.schema.isBlock(n.parent)) {
                            const t = e.schema.findAllowedParent(o, r);
                            o = i.split(o, t).position
                        }
                        i.insert(r, o);
                        i.setSelection(r, "in")
                    });
                    return true
                }
            }

            _selectAllNestedEditableContent() {
                const t = this.editor.model;
                const e = t.document.selection;
                const i = t.schema.getLimitElement(e);
                if (e.getFirstRange().root == i) {
                    return false
                }
                t.change(t => {
                    t.setSelection(t.createRangeIn(i))
                });
                return true
            }

            _selectAllContent() {
                const t = this.editor.model;
                const e = this.editor.editing;
                const i = e.view;
                const n = i.document;
                const o = n.selection;
                const r = o.getSelectedElement();
                if (r && Q_(r)) {
                    const i = e.mapper.toModelElement(r.parent);
                    t.change(t => {
                        t.setSelection(t.createRangeIn(i))
                    });
                    return true
                }
                return false
            }

            _setSelectionOverElement(t) {
                this.editor.model.change(e => {
                    e.setSelection(e.createRangeOn(t))
                })
            }

            _getObjectElementNextToSelection(t) {
                const e = this.editor.model;
                const i = e.schema;
                const n = e.document.selection;
                const o = e.createSelection(n);
                e.modifySelection(o, {direction: t ? "forward" : "backward"});
                const r = t ? o.focus.nodeBefore : o.focus.nodeAfter;
                if (!!r && i.isObject(r)) {
                    return r
                }
                return null
            }

            _clearPreviouslySelectedWidgets(t) {
                for (const e of this._previouslySelected) {
                    t.removeClass(Y_, e)
                }
                this._previouslySelected.clear()
            }
        }

        function Dv(t) {
            return t == Nl.arrowright || t == Nl.arrowleft || t == Nl.arrowup || t == Nl.arrowdown
        }

        function jv(t) {
            return Ml(t) == Lv
        }

        function Hv(t) {
            while (t) {
                if (t.is("editableElement") && !t.is("rootElement")) {
                    return true
                }
                if (Q_(t)) {
                    return false
                }
                t = t.parent
            }
            return false
        }

        function Wv(t, e) {
            if (!e) {
                return false
            }
            return Array.from(t.getAncestors()).includes(e)
        }

        function qv(t, e) {
            return t && e.isObject(t) && !e.isInline(t)
        }

        class Uv extends jw {
            refresh() {
                const t = this.editor.model.document.selection.getSelectedElement();
                this.isEnabled = yv(t);
                if (yv(t) && t.hasAttribute("alt")) {
                    this.value = t.getAttribute("alt")
                } else {
                    this.value = false
                }
            }

            execute(t) {
                const e = this.editor.model;
                const i = e.document.selection.getSelectedElement();
                e.change(e => {
                    e.setAttribute("alt", t.newValue, i)
                })
            }
        }

        class $v extends mp {
            static get pluginName() {
                return "ImageTextAlternativeEditing"
            }

            init() {
                this.editor.commands.add("imageTextAlternative", new Uv(this.editor))
            }
        }

        var Gv = i(60);

        class Kv extends Gp {
            constructor(t, e) {
                super(t);
                const i = `ck-input-${is()}`;
                const n = `ck-status-${is()}`;
                this.set("label");
                this.set("value");
                this.set("isReadOnly", false);
                this.set("errorText", null);
                this.set("infoText", null);
                this.labelView = this._createLabelView(i);
                this.inputView = this._createInputView(e, i, n);
                this.statusView = this._createStatusView(n);
                this.bind("_statusText").to(this, "errorText", this, "infoText", (t, e) => t || e);
                const o = this.bindTemplate;
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-labeled-input", o.if("isReadOnly", "ck-disabled")]},
                    children: [this.labelView, this.inputView, this.statusView]
                })
            }

            _createLabelView(t) {
                const e = new Mk(this.locale);
                e.for = t;
                e.bind("text").to(this, "label");
                return e
            }

            _createInputView(t, e, i) {
                const n = new t(this.locale, i);
                n.id = e;
                n.ariaDescribedById = i;
                n.bind("value").to(this);
                n.bind("isReadOnly").to(this);
                n.bind("hasError").to(this, "errorText", t => !!t);
                n.on("input", () => {
                    this.errorText = null
                });
                return n
            }

            _createStatusView(t) {
                const e = new Gp(this.locale);
                const i = this.bindTemplate;
                e.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-labeled-input__status", i.if("errorText", "ck-labeled-input__status_error"), i.if("_statusText", "ck-hidden", t => !t)],
                        id: t,
                        role: i.if("errorText", "alert")
                    },
                    children: [{text: i.to("_statusText")}]
                });
                return e
            }

            select() {
                this.inputView.select()
            }

            focus() {
                this.inputView.focus()
            }
        }

        var Jv = i(62);

        class Yv extends Gp {
            constructor(t) {
                super(t);
                this.set("value");
                this.set("id");
                this.set("placeholder");
                this.set("isReadOnly", false);
                this.set("hasError", false);
                this.set("ariaDescribedById");
                const e = this.bindTemplate;
                this.setTemplate({
                    tag: "input",
                    attributes: {
                        type: "text",
                        class: ["ck", "ck-input", "ck-input-text", e.if("hasError", "ck-error")],
                        id: e.to("id"),
                        placeholder: e.to("placeholder"),
                        readonly: e.to("isReadOnly"),
                        "aria-invalid": e.if("hasError", true),
                        "aria-describedby": e.to("ariaDescribedById")
                    },
                    on: {input: e.to("input")}
                })
            }

            render() {
                super.render();
                const t = t => {
                    this.element.value = !t && t !== 0 ? "" : t
                };
                t(this.value);
                this.on("change:value", (e, i, n) => {
                    t(n)
                })
            }

            select() {
                this.element.select()
            }

            focus() {
                this.element.focus()
            }
        }

        function Qv({view: t}) {
            t.listenTo(t.element, "submit", (e, i) => {
                i.preventDefault();
                t.fire("submit")
            }, {useCapture: true})
        }

        var Xv = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6.972 16.615a.997.997 0 0 1-.744-.292l-4.596-4.596a1 1 0 1 1 1.414-1.414l3.926 3.926 9.937-9.937a1 1 0 0 1 1.414 1.415L7.717 16.323a.997.997 0 0 1-.745.292z"/></svg>';
        var Zv = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.591 10.177l4.243 4.242a1 1 0 0 1-1.415 1.415l-4.242-4.243-4.243 4.243a1 1 0 0 1-1.414-1.415l4.243-4.242L4.52 5.934A1 1 0 0 1 5.934 4.52l4.243 4.243 4.242-4.243a1 1 0 1 1 1.415 1.414l-4.243 4.243z"/></svg>';
        var ty = i(64);

        class ey extends Gp {
            constructor(t) {
                super(t);
                const e = this.locale.t;
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.labeledInput = this._createLabeledInputView();
                this.saveButtonView = this._createButton(e("lo"), Xv, "ck-button-save");
                this.saveButtonView.type = "submit";
                this.cancelButtonView = this._createButton(e("lp"), Zv, "ck-button-cancel", "cancel");
                this._focusables = new bp;
                this._focusCycler = new yb({
                    focusables: this._focusables,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "shift + tab", focusNext: "tab"}
                });
                this.setTemplate({
                    tag: "form",
                    attributes: {class: ["ck", "ck-text-alternative-form"], tabindex: "-1"},
                    children: [this.labeledInput, this.saveButtonView, this.cancelButtonView]
                })
            }

            render() {
                super.render();
                this.keystrokes.listenTo(this.element);
                Qv({view: this});
                [this.labeledInput, this.saveButtonView, this.cancelButtonView].forEach(t => {
                    this._focusables.add(t);
                    this.focusTracker.add(t.element)
                })
            }

            _createButton(t, e, i, n) {
                const o = new hb(this.locale);
                o.set({label: t, icon: e, tooltip: true});
                o.extendTemplate({attributes: {class: i}});
                if (n) {
                    o.delegate("execute").to(this, n)
                }
                return o
            }

            _createLabeledInputView() {
                const t = this.locale.t;
                const e = new Kv(this.locale, Yv);
                e.label = t("lt");
                e.inputView.placeholder = t("lt");
                return e
            }
        }

        var iy = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M5.085 6.22L2.943 4.078a.75.75 0 1 1 1.06-1.06l2.592 2.59A11.094 11.094 0 0 1 10 5.068c4.738 0 8.578 3.101 8.578 5.083 0 1.197-1.401 2.803-3.555 3.887l1.714 1.713a.75.75 0 0 1-.09 1.138.488.488 0 0 1-.15.084.75.75 0 0 1-.821-.16L6.17 7.304c-.258.11-.51.233-.757.365l6.239 6.24-.006.005.78.78c-.388.094-.78.166-1.174.215l-1.11-1.11h.011L4.55 8.197a7.2 7.2 0 0 0-.665.514l-.112.098 4.897 4.897-.005.006 1.276 1.276a10.164 10.164 0 0 1-1.477-.117l-.479-.479-.009.009-4.863-4.863-.022.031a2.563 2.563 0 0 0-.124.2c-.043.077-.08.158-.108.241a.534.534 0 0 0-.028.133.29.29 0 0 0 .008.072.927.927 0 0 0 .082.226c.067.133.145.26.234.379l3.242 3.365.025.01.59.623c-3.265-.918-5.59-3.155-5.59-4.668 0-1.194 1.448-2.838 3.663-3.93zm7.07.531a4.632 4.632 0 0 1 1.108 5.992l.345.344.046-.018a9.313 9.313 0 0 0 2-1.112c.256-.187.5-.392.727-.613.137-.134.27-.277.392-.431.072-.091.141-.185.203-.286.057-.093.107-.19.148-.292a.72.72 0 0 0 .036-.12.29.29 0 0 0 .008-.072.492.492 0 0 0-.028-.133.999.999 0 0 0-.036-.096 2.165 2.165 0 0 0-.071-.145 2.917 2.917 0 0 0-.125-.2 3.592 3.592 0 0 0-.263-.335 5.444 5.444 0 0 0-.53-.523 7.955 7.955 0 0 0-1.054-.768 9.766 9.766 0 0 0-1.879-.891c-.337-.118-.68-.219-1.027-.301zm-2.85.21l-.069.002a.508.508 0 0 0-.254.097.496.496 0 0 0-.104.679.498.498 0 0 0 .326.199l.045.005c.091.003.181.003.272.012a2.45 2.45 0 0 1 2.017 1.513c.024.061.043.125.069.185a.494.494 0 0 0 .45.287h.008a.496.496 0 0 0 .35-.158.482.482 0 0 0 .13-.335.638.638 0 0 0-.048-.219 3.379 3.379 0 0 0-.36-.723 3.438 3.438 0 0 0-2.791-1.543l-.028-.001h-.013z"/></svg>';

        function ny(t) {
            const e = t.plugins.get("ContextualBalloon");
            if (vv(t.editing.view.document.selection)) {
                const i = oy(t);
                e.updatePosition(i)
            }
        }

        function oy(t) {
            const e = t.editing.view;
            const i = nb.defaultPositions;
            return {
                target: e.domConverter.viewToDom(e.document.selection.getSelectedElement()),
                positions: [i.northArrowSouth, i.northArrowSouthWest, i.northArrowSouthEast, i.southArrowNorth, i.southArrowNorthWest, i.southArrowNorthEast]
            }
        }

        class ry extends mp {
            static get requires() {
                return [kb]
            }

            static get pluginName() {
                return "ImageTextAlternativeUI"
            }

            init() {
                this._createButton();
                this._createForm()
            }

            destroy() {
                super.destroy();
                this._form.destroy()
            }

            _createButton() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add("imageTextAlternative", i => {
                    const n = t.commands.get("imageTextAlternative");
                    const o = new hb(i);
                    o.set({label: e("lh"), icon: iy, tooltip: true});
                    o.bind("isEnabled").to(n, "isEnabled");
                    this.listenTo(o, "execute", () => {
                        this._showForm()
                    });
                    return o
                })
            }

            _createForm() {
                const t = this.editor;
                const e = t.editing.view;
                const i = e.document;
                this._balloon = this.editor.plugins.get("ContextualBalloon");
                this._form = new ey(t.locale);
                this._form.render();
                this.listenTo(this._form, "submit", () => {
                    t.execute("imageTextAlternative", {newValue: this._form.labeledInput.inputView.element.value});
                    this._hideForm(true)
                });
                this.listenTo(this._form, "cancel", () => {
                    this._hideForm(true)
                });
                this._form.keystrokes.set("Esc", (t, e) => {
                    this._hideForm(true);
                    e()
                });
                this.listenTo(t.ui, "update", () => {
                    if (!vv(i.selection)) {
                        this._hideForm(true)
                    } else if (this._isVisible) {
                        ny(t)
                    }
                });
                Db({
                    emitter: this._form,
                    activator: () => this._isVisible,
                    contextElements: [this._balloon.view.element],
                    callback: () => this._hideForm()
                })
            }

            _showForm() {
                if (this._isVisible) {
                    return
                }
                const t = this.editor;
                const e = t.commands.get("imageTextAlternative");
                const i = this._form.labeledInput;
                if (!this._isInBalloon) {
                    this._balloon.add({view: this._form, position: oy(t)})
                }
                i.value = i.inputView.element.value = e.value || "";
                this._form.labeledInput.select()
            }

            _hideForm(t) {
                if (!this._isInBalloon) {
                    return
                }
                if (this._form.focusTracker.isFocused) {
                    this._form.saveButtonView.focus()
                }
                this._balloon.remove(this._form);
                if (t) {
                    this.editor.editing.view.focus()
                }
            }

            get _isVisible() {
                return this._balloon.visibleView === this._form
            }

            get _isInBalloon() {
                return this._balloon.hasView(this._form)
            }
        }

        class sy extends mp {
            static get requires() {
                return [$v, ry]
            }

            static get pluginName() {
                return "ImageTextAlternative"
            }
        }

        var ay = i(66);

        class cy extends mp {
            static get requires() {
                return [Nv, Fv, sy]
            }

            static get pluginName() {
                return "Image"
            }
        }

        class ly extends mp {
            static get requires() {
                return [kb]
            }

            static get pluginName() {
                return "WidgetToolbarRepository"
            }

            init() {
                const t = this.editor;
                if (t.plugins.has("BalloonToolbar")) {
                    const e = t.plugins.get("BalloonToolbar");
                    this.listenTo(e, "show", e => {
                        if (hy(t.editing.view.document.selection)) {
                            e.stop()
                        }
                    }, {priority: "high"})
                }
                this._toolbarDefinitions = new Map;
                this._balloon = this.editor.plugins.get("ContextualBalloon");
                this.on("change:isEnabled", () => {
                    this._updateToolbarsVisibility()
                });
                this.listenTo(t.ui, "update", () => {
                    this._updateToolbarsVisibility()
                });
                this.listenTo(t.ui.focusTracker, "change:isFocused", () => {
                    this._updateToolbarsVisibility()
                }, {priority: "low"})
            }

            destroy() {
                super.destroy();
                for (const t of this._toolbarDefinitions.values()) {
                    t.view.destroy()
                }
            }

            register(t, {ariaLabel: e, items: i, getRelatedElement: n, balloonClassName: o = "ck-toolbar-container"}) {
                const r = this.editor;
                const s = r.t;
                const a = new Xb(r.locale);
                a.ariaLabel = e || s("kf");
                if (this._toolbarDefinitions.has(t)) {
                    throw new ss["b"]("widget-toolbar-duplicated: Toolbar with the given id was already added.", this, {toolbarId: t})
                }
                a.fillFromConfig(i, r.ui.componentFactory);
                this._toolbarDefinitions.set(t, {view: a, getRelatedElement: n, balloonClassName: o})
            }

            _updateToolbarsVisibility() {
                let t = 0;
                let e = null;
                let i = null;
                for (const n of this._toolbarDefinitions.values()) {
                    const o = n.getRelatedElement(this.editor.editing.view.document.selection);
                    if (!this.isEnabled || !o) {
                        if (this._isToolbarInBalloon(n)) {
                            this._hideToolbar(n)
                        }
                    } else if (!this.editor.ui.focusTracker.isFocused) {
                        if (this._isToolbarVisible(n)) {
                            this._hideToolbar(n)
                        }
                    } else {
                        const r = o.getAncestors().length;
                        if (r > t) {
                            t = r;
                            e = o;
                            i = n
                        }
                    }
                }
                if (i) {
                    this._showToolbar(i, e)
                }
            }

            _hideToolbar(t) {
                this._balloon.remove(t.view);
                this.stopListening(this._balloon, "change:visibleView")
            }

            _showToolbar(t, e) {
                if (this._isToolbarVisible(t)) {
                    dy(this.editor, e)
                } else if (!this._isToolbarInBalloon(t)) {
                    this._balloon.add({
                        view: t.view,
                        position: uy(this.editor, e),
                        balloonClassName: t.balloonClassName
                    });
                    this.listenTo(this._balloon, "change:visibleView", () => {
                        for (const t of this._toolbarDefinitions.values()) {
                            if (this._isToolbarVisible(t)) {
                                const e = t.getRelatedElement(this.editor.editing.view.document.selection);
                                dy(this.editor, e)
                            }
                        }
                    })
                }
            }

            _isToolbarVisible(t) {
                return this._balloon.visibleView === t.view
            }

            _isToolbarInBalloon(t) {
                return this._balloon.hasView(t.view)
            }
        }

        function dy(t, e) {
            const i = t.plugins.get("ContextualBalloon");
            const n = uy(t, e);
            i.updatePosition(n)
        }

        function uy(t, e) {
            const i = t.editing.view;
            const n = nb.defaultPositions;
            return {
                target: i.domConverter.mapViewToDom(e),
                positions: [n.northArrowSouth, n.northArrowSouthWest, n.northArrowSouthEast, n.southArrowNorth, n.southArrowNorthWest, n.southArrowNorthEast]
            }
        }

        function hy(t) {
            const e = t.getSelectedElement();
            return !!(e && Q_(e))
        }

        class fy extends mp {
            static get requires() {
                return [ly]
            }

            static get pluginName() {
                return "ImageToolbar"
            }

            afterInit() {
                const t = this.editor;
                const e = t.t;
                const i = t.plugins.get(ly);
                i.register("image", {
                    ariaLabel: e("a"),
                    items: t.config.get("image.toolbar") || [],
                    getRelatedElement: vv
                })
            }
        }

        class gy extends jw {
            constructor(t, e) {
                super(t);
                this.defaultStyle = false;
                this.styles = e.reduce((t, e) => {
                    t[e.name] = e;
                    if (e.isDefault) {
                        this.defaultStyle = e.name
                    }
                    return t
                }, {})
            }

            refresh() {
                const t = this.editor.model.document.selection.getSelectedElement();
                this.isEnabled = yv(t);
                if (!t) {
                    this.value = false
                } else if (t.hasAttribute("imageStyle")) {
                    const e = t.getAttribute("imageStyle");
                    this.value = this.styles[e] ? e : false
                } else {
                    this.value = this.defaultStyle
                }
            }

            execute(t) {
                const e = t.value;
                const i = this.editor.model;
                const n = i.document.selection.getSelectedElement();
                i.change(t => {
                    if (this.styles[e].isDefault) {
                        t.removeAttribute("imageStyle", n)
                    } else {
                        t.setAttribute("imageStyle", e, n)
                    }
                })
            }
        }

        function my(t) {
            return (e, i, n) => {
                if (!n.consumable.consume(i.item, e.name)) {
                    return
                }
                const o = by(i.attributeNewValue, t);
                const r = by(i.attributeOldValue, t);
                const s = n.mapper.toViewElement(i.item);
                const a = n.writer;
                if (r) {
                    a.removeClass(r.className, s)
                }
                if (o) {
                    a.addClass(o.className, s)
                }
            }
        }

        function py(t) {
            const e = t.filter(t => !t.isDefault);
            return (t, i, n) => {
                if (!i.modelRange) {
                    return
                }
                const o = i.viewItem;
                const r = Ww(i.modelRange.getItems());
                if (!n.schema.checkAttribute(r, "imageStyle")) {
                    return
                }
                for (const t of e) {
                    if (n.consumable.consume(o, {classes: t.className})) {
                        n.writer.setAttribute("imageStyle", t.name, r)
                    }
                }
            }
        }

        function by(t, e) {
            for (const i of e) {
                if (i.name === t) {
                    return i
                }
            }
        }

        var wy = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 4.5V3h16v1.5zm2.5 3V12h11V7.5h-11zM4.061 6H15.94c.586 0 1.061.407 1.061.91v5.68c0 .503-.475.91-1.061.91H4.06c-.585 0-1.06-.407-1.06-.91V6.91C3 6.406 3.475 6 4.061 6zM2 16.5V15h16v1.5z"/></svg>';
        var ky = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" clip-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="1.414"><path d="M18 4.5V3H2v1.5h16zm0 3V6h-5.674v1.5H18zm0 3V9h-5.674v1.5H18zm0 3V12h-5.674v1.5H18zm-8.5-6V12h-6V7.5h6zm.818-1.5H2.682C2.305 6 2 6.407 2 6.91v5.68c0 .503.305.91.682.91h7.636c.377 0 .682-.407.682-.91V6.91c0-.503-.305-.91-.682-.91zM18 16.5V15H2v1.5h16z"/></svg>';
        var _y = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 4.5V3h16v1.5zm4.5 3V12h7V7.5h-7zM5.758 6h8.484c.419 0 .758.407.758.91v5.681c0 .502-.34.909-.758.909H5.758c-.419 0-.758-.407-.758-.91V6.91c0-.503.34-.91.758-.91zM2 16.5V15h16v1.5z"/></svg>';
        var vy = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 4.5V3h16v1.5zm0 3V6h5.674v1.5zm0 3V9h5.674v1.5zm0 3V12h5.674v1.5zm8.5-6V12h6V7.5h-6zM9.682 6h7.636c.377 0 .682.407.682.91v5.68c0 .503-.305.91-.682.91H9.682c-.377 0-.682-.407-.682-.91V6.91c0-.503.305-.91.682-.91zM2 16.5V15h16v1.5z"/></svg>';
        const yy = {
            full: {name: "full", title: "Full size image", icon: wy, isDefault: true},
            side: {name: "side", title: "Side image", icon: vy, className: "image-style-side"},
            alignLeft: {name: "alignLeft", title: "Left aligned image", icon: ky, className: "image-style-align-left"},
            alignCenter: {
                name: "alignCenter",
                title: "Centered image",
                icon: _y,
                className: "image-style-align-center"
            },
            alignRight: {
                name: "alignRight",
                title: "Right aligned image",
                icon: vy,
                className: "image-style-align-right"
            }
        };
        const xy = {full: wy, left: ky, right: vy, center: _y};

        function Cy(t = []) {
            return t.map(Ay)
        }

        function Ay(t) {
            if (typeof t == "string") {
                const e = t;
                if (yy[e]) {
                    t = Object.assign({}, yy[e])
                } else {
                    console.warn(Object(ss["a"])("image-style-not-found: There is no such image style of given name."), {name: e});
                    t = {name: e}
                }
            } else if (yy[t.name]) {
                const e = yy[t.name];
                const i = Object.assign({}, t);
                for (const n in e) {
                    if (!t.hasOwnProperty(n)) {
                        i[n] = e[n]
                    }
                }
                t = i
            }
            if (typeof t.icon == "string" && xy[t.icon]) {
                t.icon = xy[t.icon]
            }
            return t
        }

        class Ty extends mp {
            static get pluginName() {
                return "ImageStyleEditing"
            }

            init() {
                const t = this.editor;
                const e = t.model.schema;
                const i = t.data;
                const n = t.editing;
                t.config.define("image.styles", ["full", "side"]);
                const o = Cy(t.config.get("image.styles"));
                e.extend("image", {allowAttributes: "imageStyle"});
                const r = my(o);
                n.downcastDispatcher.on("attribute:imageStyle:image", r);
                i.downcastDispatcher.on("attribute:imageStyle:image", r);
                i.upcastDispatcher.on("element:figure", py(o), {priority: "low"});
                t.commands.add("imageStyle", new gy(t, o))
            }
        }

        var Py = i(68);

        class Sy extends mp {
            static get pluginName() {
                return "ImageStyleUI"
            }

            get localizedDefaultStylesTitles() {
                const t = this.editor.t;
                return {
                    "Full size image": t("jy"),
                    "Side image": t("jz"),
                    "Left aligned image": t("ka"),
                    "Centered image": t("kb"),
                    "Right aligned image": t("kc")
                }
            }

            init() {
                const t = this.editor;
                const e = t.config.get("image.styles");
                const i = Ey(Cy(e), this.localizedDefaultStylesTitles);
                for (const t of i) {
                    this._createButton(t)
                }
            }

            _createButton(t) {
                const e = this.editor;
                const i = `imageStyle:${t.name}`;
                e.ui.componentFactory.add(i, i => {
                    const n = e.commands.get("imageStyle");
                    const o = new hb(i);
                    o.set({label: t.title, icon: t.icon, tooltip: true, isToggleable: true});
                    o.bind("isEnabled").to(n, "isEnabled");
                    o.bind("isOn").to(n, "value", e => e === t.name);
                    this.listenTo(o, "execute", () => {
                        e.execute("imageStyle", {value: t.name});
                        e.editing.view.focus()
                    });
                    return o
                })
            }
        }

        function Ey(t, e) {
            for (const i of t) {
                if (e[i.title]) {
                    i.title = e[i.title]
                }
            }
            return t
        }

        class Ry extends mp {
            static get requires() {
                return [Ty, Sy]
            }

            static get pluginName() {
                return "ImageStyle"
            }
        }

        class Oy {
            constructor(t) {
                this.set("activeHandlePosition", null);
                this.set("proposedWidthPercents", null);
                this.set("proposedWidth", null);
                this.set("proposedHeight", null);
                this.set("proposedHandleHostWidth", null);
                this.set("proposedHandleHostHeight", null);
                this._options = t;
                this._referenceCoordinates = null
            }

            begin(t, e, i) {
                const n = new vh(e);
                this.activeHandlePosition = My(t);
                this._referenceCoordinates = Vy(e, By(this.activeHandlePosition));
                this.originalWidth = n.width;
                this.originalHeight = n.height;
                this.aspectRatio = n.width / n.height;
                const o = i.style.width;
                if (o && o.match(/^\d+\.?\d*%$/)) {
                    this.originalWidthPercents = parseFloat(o)
                } else {
                    this.originalWidthPercents = Iy(i, n)
                }
            }

            update(t) {
                this.proposedWidth = t.width;
                this.proposedHeight = t.height;
                this.proposedWidthPercents = t.widthPercents;
                this.proposedHandleHostWidth = t.handleHostWidth;
                this.proposedHandleHostHeight = t.handleHostHeight
            }
        }

        vs(Oy, Jc);

        function Iy(t, e) {
            const i = t.parentElement;
            const n = parseFloat(i.ownerDocument.defaultView.getComputedStyle(i).width);
            return e.width / n * 100
        }

        function Vy(t, e) {
            const i = new vh(t);
            const n = e.split("-");
            const o = {x: n[1] == "right" ? i.right : i.left, y: n[0] == "bottom" ? i.bottom : i.top};
            o.x += t.ownerDocument.defaultView.scrollX;
            o.y += t.ownerDocument.defaultView.scrollY;
            return o
        }

        function Ny(t) {
            return `ck-widget__resizer__handle-${t}`
        }

        function My(t) {
            const e = ["top-left", "top-right", "bottom-right", "bottom-left"];
            for (const i of e) {
                if (t.classList.contains(Ny(i))) {
                    return i
                }
            }
        }

        function By(t) {
            const e = t.split("-");
            const i = {top: "bottom", bottom: "top", left: "right", right: "left"};
            return `${i[e[0]]}-${i[e[1]]}`
        }

        class zy {
            constructor(t) {
                this._options = t;
                this._domResizerWrapper = null;
                this._viewResizerWrapper = null;
                this.set("isEnabled", true);
                this.decorate("begin");
                this.decorate("cancel");
                this.decorate("commit");
                this.decorate("updateSize");
                this.on("commit", t => {
                    if (!this.state.proposedWidth && !this.state.proposedWidthPercents) {
                        this._cleanup();
                        t.stop()
                    }
                }, {priority: "high"})
            }

            attach() {
                const t = this;
                const e = this._options.viewElement;
                const i = this._options.editor.editing.view;
                i.change(i => {
                    const n = i.createUIElement("div", {class: "ck ck-reset_all ck-widget__resizer"}, (function (e) {
                        const i = this.toDomElement(e);
                        t._appendHandles(i);
                        t._appendSizeUI(i);
                        t._domResizerWrapper = i;
                        t.on("change:isEnabled", (t, e, n) => {
                            i.style.display = n ? "" : "none"
                        });
                        i.style.display = t.isEnabled ? "" : "none";
                        return i
                    }));
                    i.insert(i.createPositionAt(e, "end"), n);
                    i.addClass("ck-widget_with-resizer", e);
                    this._viewResizerWrapper = n
                })
            }

            begin(t) {
                this.state = new Oy(this._options);
                this._sizeUI.bindToState(this._options, this.state);
                this.state.begin(t, this._getHandleHost(), this._getResizeHost())
            }

            updateSize(t) {
                const e = this._proposeNewSize(t);
                const i = this._options.editor.editing.view;
                i.change(t => {
                    const i = this._options.unit || "%";
                    const n = (i === "%" ? e.widthPercents : e.width) + i;
                    t.setStyle("width", n, this._options.viewElement)
                });
                const n = this._getHandleHost();
                const o = new vh(n);
                e.handleHostWidth = Math.round(o.width);
                e.handleHostHeight = Math.round(o.height);
                const r = new vh(n);
                e.width = Math.round(r.width);
                e.height = Math.round(r.height);
                this.redraw(o);
                this.state.update(e)
            }

            commit() {
                const t = this._options.unit || "%";
                const e = (t === "%" ? this.state.proposedWidthPercents : this.state.proposedWidth) + t;
                this._options.onCommit(e);
                this._cleanup()
            }

            cancel() {
                this._cleanup()
            }

            destroy() {
                this.cancel()
            }

            redraw(t) {
                const e = this._domResizerWrapper;
                if (i(e)) {
                    this._options.editor.editing.view.change(i => {
                        const n = e.parentElement;
                        const o = this._getHandleHost();
                        const r = t || new vh(o);
                        i.setStyle("width", r.width + "px", this._viewResizerWrapper);
                        i.setStyle("height", r.height + "px", this._viewResizerWrapper);
                        const s = {left: o.offsetLeft, top: o.offsetTop, height: o.offsetHeight, width: o.offsetWidth};
                        if (!n.isSameNode(o)) {
                            i.setStyle("left", s.left + "px", this._viewResizerWrapper);
                            i.setStyle("top", s.top + "px", this._viewResizerWrapper);
                            i.setStyle("height", s.height + "px", this._viewResizerWrapper);
                            i.setStyle("width", s.width + "px", this._viewResizerWrapper)
                        }
                    })
                }

                function i(t) {
                    return t && t.ownerDocument && t.ownerDocument.contains(t)
                }
            }

            containsHandle(t) {
                return this._domResizerWrapper.contains(t)
            }

            static isResizeHandle(t) {
                return t.classList.contains("ck-widget__resizer__handle")
            }

            _cleanup() {
                this._sizeUI.dismiss();
                this._sizeUI.isVisible = false
            }

            _proposeNewSize(t) {
                const e = this.state;
                const i = Dy(t);
                const n = this._options.isCentered ? this._options.isCentered(this) : true;
                const o = {
                    x: e._referenceCoordinates.x - (i.x + e.originalWidth),
                    y: i.y - e.originalHeight - e._referenceCoordinates.y
                };
                if (n && e.activeHandlePosition.endsWith("-right")) {
                    o.x = i.x - (e._referenceCoordinates.x + e.originalWidth)
                }
                if (n) {
                    o.x *= 2
                }
                const r = {width: Math.abs(e.originalWidth + o.x), height: Math.abs(e.originalHeight + o.y)};
                r.dominant = r.width / e.aspectRatio > r.height ? "width" : "height";
                r.max = r[r.dominant];
                const s = {width: r.width, height: r.height};
                if (r.dominant == "width") {
                    s.height = s.width / e.aspectRatio
                } else {
                    s.width = s.height * e.aspectRatio
                }
                return {
                    width: Math.round(s.width),
                    height: Math.round(s.height),
                    widthPercents: Math.min(Math.round(e.originalWidthPercents / e.originalWidth * s.width * 100) / 100, 100)
                }
            }

            _getResizeHost() {
                const t = this._domResizerWrapper.parentElement;
                return this._options.getResizeHost(t)
            }

            _getHandleHost() {
                const t = this._domResizerWrapper.parentElement;
                return this._options.getHandleHost(t)
            }

            _appendHandles(t) {
                const e = ["top-left", "top-right", "bottom-right", "bottom-left"];
                for (const i of e) {
                    t.appendChild(new _p({
                        tag: "div",
                        attributes: {class: `ck-widget__resizer__handle ${Fy(i)}`}
                    }).render())
                }
            }

            _appendSizeUI(t) {
                const e = new Ly;
                e.render();
                this._sizeUI = e;
                t.appendChild(e.element)
            }
        }

        vs(zy, Jc);

        class Ly extends Gp {
            constructor() {
                super();
                const t = this.bindTemplate;
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-size-view", t.to("activeHandlePosition", t => t ? `ck-orientation-${t}` : "")],
                        style: {display: t.if("isVisible", "none", t => !t)}
                    },
                    children: [{text: t.to("label")}]
                })
            }

            bindToState(t, e) {
                this.bind("isVisible").to(e, "proposedWidth", e, "proposedHeight", (t, e) => t !== null && e !== null);
                this.bind("label").to(e, "proposedHandleHostWidth", e, "proposedHandleHostHeight", e, "proposedWidthPercents", (e, i, n) => {
                    if (t.unit === "px") {
                        return `${e}×${i}`
                    } else {
                        return `${n}%`
                    }
                });
                this.bind("activeHandlePosition").to(e)
            }

            dismiss() {
                this.unbind();
                this.isVisible = false
            }
        }

        function Fy(t) {
            return `ck-widget__resizer__handle-${t}`
        }

        function Dy(t) {
            return {x: t.pageX, y: t.pageY}
        }

        var jy = "Expected a function";

        function Hy(t, e, i) {
            var n = true, o = true;
            if (typeof t != "function") {
                throw new TypeError(jy)
            }
            if (ct(i)) {
                n = "leading" in i ? !!i.leading : n;
                o = "trailing" in i ? !!i.trailing : o
            }
            return uh(t, e, {leading: n, maxWait: e, trailing: o})
        }

        var Wy = Hy;
        var qy = i(70);

        class Uy extends mp {
            static get pluginName() {
                return "WidgetResize"
            }

            init() {
                this.set("_visibleResizer", null);
                this.set("_activeResizer", null);
                this._resizers = new Map;
                const t = Id.window.document;
                this.editor.model.schema.setAttributeProperties("width", {isFormatting: true});
                this._observer = Object.create(qd);
                this._observer.listenTo(t, "mousedown", this._mouseDownListener.bind(this));
                this._observer.listenTo(t, "mousemove", this._mouseMoveListener.bind(this));
                this._observer.listenTo(t, "mouseup", this._mouseUpListener.bind(this));
                const e = () => {
                    if (this._visibleResizer) {
                        this._visibleResizer.redraw()
                    }
                };
                const i = Wy(e, 200);
                this.on("change:_visibleResizer", e);
                this.editor.ui.on("update", i);
                this._observer.listenTo(Id.window, "resize", i);
                const n = this.editor.editing.view.document.selection;
                n.on("change", () => {
                    const t = n.getSelectedElement();
                    this._visibleResizer = this._getResizerByViewElement(t) || null
                })
            }

            destroy() {
                this._observer.stopListening();
                for (const t of this._resizers.values()) {
                    t.destroy()
                }
            }

            attachTo(t) {
                const e = new zy(t);
                const i = this.editor.plugins;
                e.attach();
                if (i.has("WidgetToolbarRepository")) {
                    const t = i.get("WidgetToolbarRepository");
                    e.on("begin", () => {
                        t.forceDisabled("resize")
                    }, {priority: "lowest"});
                    e.on("cancel", () => {
                        t.clearForceDisabled("resize")
                    }, {priority: "highest"});
                    e.on("commit", () => {
                        t.clearForceDisabled("resize")
                    }, {priority: "highest"})
                }
                this._resizers.set(t.viewElement, e);
                return e
            }

            _getResizerByHandle(t) {
                for (const e of this._resizers.values()) {
                    if (e.containsHandle(t)) {
                        return e
                    }
                }
            }

            _getResizerByViewElement(t) {
                return this._resizers.get(t)
            }

            _mouseDownListener(t, e) {
                if (!zy.isResizeHandle(e.target)) {
                    return
                }
                const i = e.target;
                this._activeResizer = this._getResizerByHandle(i);
                if (this._activeResizer) {
                    this._activeResizer.begin(i)
                }
            }

            _mouseMoveListener(t, e) {
                if (this._activeResizer) {
                    this._activeResizer.updateSize(e)
                }
            }

            _mouseUpListener() {
                if (this._activeResizer) {
                    this._activeResizer.commit();
                    this._activeResizer = null
                }
            }
        }

        vs(Uy, Jc);

        class $y extends jw {
            refresh() {
                const t = this.editor.model.document.selection.getSelectedElement();
                this.isEnabled = yv(t);
                if (!t || !t.hasAttribute("width")) {
                    this.value = null
                } else {
                    this.value = {width: t.getAttribute("width"), height: null}
                }
            }

            execute(t) {
                const e = this.editor.model;
                const i = e.document.selection.getSelectedElement();
                e.change(e => {
                    e.setAttribute("width", t.width, i)
                })
            }
        }

        var Gy = i(72);

        class Ky extends mp {
            static get requires() {
                return [Uy]
            }

            static get pluginName() {
                return "ImageResize"
            }

            init() {
                const t = this.editor;
                const e = new $y(t);
                this._registerSchema();
                this._registerConverters();
                t.commands.add("imageResize", e);
                t.editing.downcastDispatcher.on("insert:image", (i, n, o) => {
                    const r = o.mapper.toViewElement(n.item);
                    const s = t.plugins.get(Uy).attachTo({
                        unit: t.config.get("image.resizeUnit") || "%",
                        modelElement: n.item,
                        viewElement: r,
                        editor: t,
                        getHandleHost(t) {
                            return t.querySelector("img")
                        },
                        getResizeHost(t) {
                            return t
                        },
                        isCentered() {
                            const t = n.item.getAttribute("imageStyle");
                            return !t || t == "full" || t == "alignCenter"
                        },
                        onCommit(e) {
                            t.execute("imageResize", {width: e})
                        }
                    });
                    s.on("updateSize", () => {
                        if (!r.hasClass("image_resized")) {
                            t.editing.view.change(t => {
                                t.addClass("image_resized", r)
                            })
                        }
                    });
                    s.bind("isEnabled").to(e)
                }, {priority: "low"})
            }

            _registerSchema() {
                this.editor.model.schema.extend("image", {allowAttributes: "width"})
            }

            _registerConverters() {
                const t = this.editor;
                t.conversion.for("downcast").add(t => t.on("attribute:width:image", (t, e, i) => {
                    if (!i.consumable.consume(e.item, t.name)) {
                        return
                    }
                    const n = i.writer;
                    const o = i.mapper.toViewElement(e.item);
                    if (e.attributeNewValue !== null) {
                        n.setStyle("width", e.attributeNewValue, o);
                        n.addClass("image_resized", o)
                    } else {
                        n.removeStyle("width", o);
                        n.removeClass("image_resized", o)
                    }
                }));
                t.conversion.for("upcast").attributeToAttribute({
                    view: {name: "figure", styles: {width: /.+/}},
                    model: {key: "width", value: t => t.getStyle("width")}
                })
            }
        }

        class Jy extends Gp {
            constructor(t) {
                super(t);
                this.buttonView = new hb(t);
                this._fileInputView = new Yy(t);
                this._fileInputView.bind("acceptedType").to(this);
                this._fileInputView.bind("allowMultipleFiles").to(this);
                this._fileInputView.delegate("done").to(this);
                this.setTemplate({
                    tag: "span",
                    attributes: {class: "ck-file-dialog-button"},
                    children: [this.buttonView, this._fileInputView]
                });
                this.buttonView.on("execute", () => {
                    this._fileInputView.open()
                })
            }

            focus() {
                this.buttonView.focus()
            }
        }

        class Yy extends Gp {
            constructor(t) {
                super(t);
                this.set("acceptedType");
                this.set("allowMultipleFiles", false);
                const e = this.bindTemplate;
                this.setTemplate({
                    tag: "input",
                    attributes: {
                        class: ["ck-hidden"],
                        type: "file",
                        tabindex: "-1",
                        accept: e.to("acceptedType"),
                        multiple: e.to("allowMultipleFiles")
                    },
                    on: {
                        change: e.to(() => {
                            if (this.element && this.element.files && this.element.files.length) {
                                this.fire("done", this.element.files)
                            }
                            this.element.value = ""
                        })
                    }
                })
            }

            open() {
                this.element.click()
            }
        }

        var Qy = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6.91 10.54c.26-.23.64-.21.88.03l3.36 3.14 2.23-2.06a.64.64 0 0 1 .87 0l2.52 2.97V4.5H3.2v10.12l3.71-4.08zm10.27-7.51c.6 0 1.09.47 1.09 1.05v11.84c0 .59-.49 1.06-1.09 1.06H2.79c-.6 0-1.09-.47-1.09-1.06V4.08c0-.58.49-1.05 1.1-1.05h14.38zm-5.22 5.56a1.96 1.96 0 1 1 3.4-1.96 1.96 1.96 0 0 1-3.4 1.96z"/></svg>';

        function Xy(t) {
            const e = t.map(t => t.replace("+", "\\+"));
            return new RegExp(`^image\\/(${e.join("|")})$`)
        }

        function Zy(t) {
            return new Promise((e, i) => {
                const n = t.getAttribute("src");
                fetch(n).then(t => t.blob()).then(t => {
                    const o = ex(t, n);
                    const r = o.replace("image/", "");
                    const s = `image.${r}`;
                    const a = ix(t, s, o);
                    a ? e(a) : i()
                }).catch(i)
            })
        }

        function tx(t) {
            if (!t.is("element", "img") || !t.getAttribute("src")) {
                return false
            }
            return t.getAttribute("src").match(/^data:image\/\w+;base64,/g) || t.getAttribute("src").match(/^blob:/g)
        }

        function ex(t, e) {
            if (t.type) {
                return t.type
            } else if (e.match(/data:(image\/\w+);base64/)) {
                return e.match(/data:(image\/\w+);base64/)[1].toLowerCase()
            } else {
                return "image/jpeg"
            }
        }

        function ix(t, e, i) {
            try {
                return new File([t], e, {type: i})
            } catch (t) {
                return null
            }
        }

        class nx extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add("imageUpload", i => {
                    const n = new Jy(i);

                    // kbalashev  (image upload button fix)
                    Object.defineProperty(n.buttonView, 'isEnabled', {
                        get: () => true
                    });

                    const o = t.commands.get("imageUpload");
                    const r = t.config.get("image.upload.types");
                    const s = Xy(r);
                    n.set({acceptedType: r.map(t => `image/${t}`).join(","), allowMultipleFiles: true});
                    n.buttonView.set({label: e("kd"), icon: Qy, tooltip: true});
                    n.buttonView.bind("isEnabled").to(o);
                    n.on("done", (e, i) => {
                        const n = Array.from(i).filter(t => s.test(t.type));
                        if (n.length) {
                            t.execute("imageUpload", {file: n})
                        }
                    });
                    return n
                })
            }
        }

        var ox = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 700 250"><rect rx="4"/></svg>';
        var rx = i(74);
        var sx = i(76);
        var ax = i(78);

        class cx extends mp {
            constructor(t) {
                super(t);
                this.placeholder = "data:image/svg+xml;utf8," + encodeURIComponent(ox)
            }

            init() {
                const t = this.editor;
                t.editing.downcastDispatcher.on("attribute:uploadStatus:image", (...t) => this.uploadStatusChange(...t))
            }

            uploadStatusChange(t, e, i) {
                const n = this.editor;
                const o = e.item;
                const r = o.getAttribute("uploadId");
                if (!i.consumable.consume(e.item, t.name)) {
                    return
                }
                const s = n.plugins.get(lk);
                const a = r ? e.attributeNewValue : null;
                const c = this.placeholder;
                const l = n.editing.mapper.toViewElement(o);
                const d = i.writer;
                if (a == "reading") {
                    lx(l, d);
                    ux(c, l, d);
                    return
                }
                if (a == "uploading") {
                    const t = s.loaders.get(r);
                    lx(l, d);
                    if (!t) {
                        ux(c, l, d)
                    } else {
                        hx(l, d);
                        fx(l, d, t, n.editing.view);
                        _x(l, d, t)
                    }
                    return
                }
                if (a == "complete" && s.loaders.get(r) && !Al.isEdge) {
                    mx(l, d, n.editing.view)
                }
                gx(l, d);
                hx(l, d);
                dx(l, d)
            }
        }

        function lx(t, e) {
            if (!t.hasClass("ck-appear")) {
                e.addClass("ck-appear", t)
            }
        }

        function dx(t, e) {
            e.removeClass("ck-appear", t)
        }

        function ux(t, e, i) {
            if (!e.hasClass("ck-image-upload-placeholder")) {
                i.addClass("ck-image-upload-placeholder", e)
            }
            const n = Av(e);
            if (n.getAttribute("src") !== t) {
                i.setAttribute("src", t, n)
            }
            if (!wx(e, "placeholder")) {
                i.insert(i.createPositionAfter(n), bx(i))
            }
        }

        function hx(t, e) {
            if (t.hasClass("ck-image-upload-placeholder")) {
                e.removeClass("ck-image-upload-placeholder", t)
            }
            kx(t, e, "placeholder")
        }

        function fx(t, e, i, n) {
            const o = px(e);
            e.insert(e.createPositionAt(t, "end"), o);
            i.on("change:uploadedPercent", (t, e, i) => {
                n.change(t => {
                    t.setStyle("width", i + "%", o)
                })
            })
        }

        function gx(t, e) {
            kx(t, e, "progressBar")
        }

        function mx(t, e, i) {
            const n = e.createUIElement("div", {class: "ck-image-upload-complete-icon"});
            e.insert(e.createPositionAt(t, "end"), n);
            setTimeout(() => {
                i.change(t => t.remove(t.createRangeOn(n)))
            }, 3e3)
        }

        function px(t) {
            const e = t.createUIElement("div", {class: "ck-progress-bar"});
            t.setCustomProperty("progressBar", true, e);
            return e
        }

        function bx(t) {
            const e = t.createUIElement("div", {class: "ck-upload-placeholder-loader"});
            t.setCustomProperty("placeholder", true, e);
            return e
        }

        function wx(t, e) {
            for (const i of t.getChildren()) {
                if (i.getCustomProperty(e)) {
                    return i
                }
            }
        }

        function kx(t, e, i) {
            const n = wx(t, i);
            if (n) {
                e.remove(e.createRangeOn(n))
            }
        }

        function _x(t, e, i) {
            if (i.data) {
                const n = Av(t);
                e.setAttribute("src", i.data, n)
            }
        }

        class vx extends sk {
            static get pluginName() {
                return "Notification"
            }

            init() {
                this.on("show:warning", (t, e) => {
                    window.alert(e.message)
                }, {priority: "lowest"})
            }

            showSuccess(t, e = {}) {
                this._showNotification({message: t, type: "success", namespace: e.namespace, title: e.title})
            }

            showInfo(t, e = {}) {
                this._showNotification({message: t, type: "info", namespace: e.namespace, title: e.title})
            }

            showWarning(t, e = {}) {
                this._showNotification({message: t, type: "warning", namespace: e.namespace, title: e.title})
            }

            _showNotification(t) {
                const e = `show:${t.type}` + (t.namespace ? `:${t.namespace}` : "");
                this.fire(e, {message: t.message, type: t.type, title: t.title || ""})
            }
        }

        class yx {
            constructor(t) {
                this.files = xx(t);
                this._native = t
            }

            get types() {
                return this._native.types
            }

            getData(t) {
                return this._native.getData(t)
            }

            setData(t, e) {
                this._native.setData(t, e)
            }
        }

        function xx(t) {
            const e = t.files ? Array.from(t.files) : [];
            const i = t.items ? Array.from(t.items) : [];
            if (e.length) {
                return e
            }
            return i.filter(t => t.kind === "file").map(t => t.getAsFile())
        }

        class Cx extends Ju {
            constructor(t) {
                super(t);
                const e = this.document;
                this.domEventType = ["paste", "copy", "cut", "drop", "dragover"];
                this.listenTo(e, "paste", i, {priority: "low"});
                this.listenTo(e, "drop", i, {priority: "low"});

                function i(t, i) {
                    i.preventDefault();
                    const n = i.dropRange ? [i.dropRange] : Array.from(e.selection.getRanges());
                    const o = new ts(e, "clipboardInput");
                    e.fire(o, {dataTransfer: i.dataTransfer, targetRanges: n});
                    if (o.stop.called) {
                        i.stopPropagation()
                    }
                }
            }

            onDomEvent(t) {
                const e = {dataTransfer: new yx(t.clipboardData ? t.clipboardData : t.dataTransfer)};
                if (t.type == "drop") {
                    e.dropRange = Ax(this.view, t)
                }
                this.fire(t.type, t, e)
            }
        }

        function Ax(t, e) {
            const i = e.target.ownerDocument;
            const n = e.clientX;
            const o = e.clientY;
            let r;
            if (i.caretRangeFromPoint && i.caretRangeFromPoint(n, o)) {
                r = i.caretRangeFromPoint(n, o)
            } else if (e.rangeParent) {
                r = i.createRange();
                r.setStart(e.rangeParent, e.rangeOffset);
                r.collapse(true)
            }
            if (r) {
                return t.domConverter.domRangeToView(r)
            } else {
                return t.document.selection.getFirstRange()
            }
        }

        function Tx(t) {
            t = t.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, "</p><p>").replace(/^\s/, "&nbsp;").replace(/\s$/, "&nbsp;").replace(/\s\s/g, " &nbsp;");
            if (t.indexOf("</p><p>") > -1) {
                t = `<p>${t}</p>`
            }
            return t
        }

        function Px(t) {
            return t.replace(/<span(?: class="Apple-converted-space"|)>(\s+)<\/span>/g, (t, e) => {
                if (e.length == 1) {
                    return " "
                }
                return e
            })
        }

        const Sx = ["figcaption", "li"];

        function Ex(t) {
            let e = "";
            if (t.is("text") || t.is("textProxy")) {
                e = t.data
            } else if (t.is("img") && t.hasAttribute("alt")) {
                e = t.getAttribute("alt")
            } else {
                let i = null;
                for (const n of t.getChildren()) {
                    const t = Ex(n);
                    if (i && (i.is("containerElement") || n.is("containerElement"))) {
                        if (Sx.includes(i.name) || Sx.includes(n.name)) {
                            e += "\n"
                        } else {
                            e += "\n\n"
                        }
                    }
                    e += t;
                    i = n
                }
            }
            return e
        }

        class Rx extends mp {
            static get pluginName() {
                return "Clipboard"
            }

            init() {
                const t = this.editor;
                const e = t.model.document;
                const i = t.editing.view;
                const n = i.document;
                this._htmlDataProcessor = new gp(n);
                i.addObserver(Cx);
                this.listenTo(n, "clipboardInput", e => {
                    if (t.isReadOnly) {
                        e.stop()
                    }
                }, {priority: "highest"});
                this.listenTo(n, "clipboardInput", (t, e) => {
                    const n = e.dataTransfer;
                    let o = "";
                    if (n.getData("text/html")) {
                        o = Px(n.getData("text/html"))
                    } else if (n.getData("text/plain")) {
                        o = Tx(n.getData("text/plain"))
                    }
                    o = this._htmlDataProcessor.toView(o);
                    this.fire("inputTransformation", {content: o, dataTransfer: n});
                    i.scrollToTheSelection()
                }, {priority: "low"});
                this.listenTo(this, "inputTransformation", (t, e) => {
                    if (!e.content.isEmpty) {
                        const t = this.editor.data;
                        const i = this.editor.model;
                        const n = t.toModel(e.content, "$clipboardHolder");
                        if (n.childCount == 0) {
                            return
                        }
                        i.insertContent(n)
                    }
                }, {priority: "low"});

                function o(i, o) {
                    const r = o.dataTransfer;
                    o.preventDefault();
                    const s = t.data.toView(t.model.getSelectedContent(e.selection));
                    n.fire("clipboardOutput", {dataTransfer: r, content: s, method: i.name})
                }

                this.listenTo(n, "copy", o, {priority: "low"});
                this.listenTo(n, "cut", (e, i) => {
                    if (t.isReadOnly) {
                        i.preventDefault()
                    } else {
                        o(e, i)
                    }
                }, {priority: "low"});
                this.listenTo(n, "clipboardOutput", (i, n) => {
                    if (!n.content.isEmpty) {
                        n.dataTransfer.setData("text/html", this._htmlDataProcessor.toData(n.content));
                        n.dataTransfer.setData("text/plain", Ex(n.content))
                    }
                    if (n.method == "cut") {
                        t.model.deleteContent(e.selection)
                    }
                }, {priority: "low"})
            }
        }

        class Ox {
            constructor(t) {
                this.document = t
            }

            createDocumentFragment(t) {
                return new ql(this.document, t)
            }

            createElement(t, e, i) {
                return new zc(this.document, t, e, i)
            }

            createText(t) {
                return new Ls(this.document, t)
            }

            clone(t, e = false) {
                return t._clone(e)
            }

            appendChild(t, e) {
                return e._appendChild(t)
            }

            insertChild(t, e, i) {
                return i._insertChild(t, e)
            }

            removeChildren(t, e, i) {
                return i._removeChildren(t, e)
            }

            remove(t) {
                const e = t.parent;
                if (e) {
                    return this.removeChildren(e.getChildIndex(t), 1, e)
                }
                return []
            }

            replace(t, e) {
                const i = t.parent;
                if (i) {
                    const n = i.getChildIndex(t);
                    this.removeChildren(n, 1, i);
                    this.insertChild(n, e, i);
                    return true
                }
                return false
            }

            unwrapElement(t) {
                const e = t.parent;
                if (e) {
                    const i = e.getChildIndex(t);
                    this.remove(t);
                    this.insertChild(i, t.getChildren(), e)
                }
            }

            rename(t, e) {
                const i = new zc(this.document, t, e.getAttributes(), e.getChildren());
                return this.replace(e, i) ? i : null
            }

            setAttribute(t, e, i) {
                i._setAttribute(t, e)
            }

            removeAttribute(t, e) {
                e._removeAttribute(t)
            }

            addClass(t, e) {
                e._addClass(t)
            }

            removeClass(t, e) {
                e._removeClass(t)
            }

            setStyle(t, e, i) {
                if (N(t) && i === undefined) {
                    i = e
                }
                i._setStyle(t, e)
            }

            removeStyle(t, e) {
                e._removeStyle(t)
            }

            setCustomProperty(t, e, i) {
                i._setCustomProperty(t, e)
            }

            removeCustomProperty(t, e) {
                return e._removeCustomProperty(t)
            }

            createPositionAt(t, e) {
                return dl._createAt(t, e)
            }

            createPositionAfter(t) {
                return dl._createAfter(t)
            }

            createPositionBefore(t) {
                return dl._createBefore(t)
            }

            createRange(t, e) {
                return new ul(t, e)
            }

            createRangeOn(t) {
                return ul._createOn(t)
            }

            createRangeIn(t) {
                return ul._createIn(t)
            }

            createSelection(t, e, i) {
                return new gl(t, e, i)
            }
        }

        class Ix extends jw {
            refresh() {
                this.isEnabled = Cv(this.editor.model)
            }

            execute(t) {
                const e = this.editor;

                // kbalashev  (image upload button fix)
                e.model.deleteContent(e.model.document.selection   );

                const i = e.model;
                const n = e.plugins.get(lk);
                i.change(e => {
                    const o = Array.isArray(t.file) ? t.file : [t.file];
                    for (const t of o) {
                        Vx(e, i, n, t)
                    }
                })
            }
        }

        function Vx(t, e, i, n) {
            const o = i.createLoader(n);
            if (!o) {
                return
            }
            xv(t, e, {uploadId: o.id})
        }

        class Nx extends mp {
            static get requires() {
                return [lk, vx, Rx]
            }

            static get pluginName() {
                return "ImageUploadEditing"
            }

            constructor(t) {
                super(t);
                t.config.define("image", {upload: {types: ["jpeg", "png", "gif", "bmp", "webp", "tiff"]}})
            }

            init() {
                const t = this.editor;
                const e = t.model.document;
                const i = t.model.schema;
                const n = t.conversion;
                const o = t.plugins.get(lk);
                const r = Xy(t.config.get("image.upload.types"));
                i.extend("image", {allowAttributes: ["uploadId", "uploadStatus"]});
                t.commands.add("imageUpload", new Ix(t));
                n.for("upcast").attributeToAttribute({view: {name: "img", key: "uploadId"}, model: "uploadId"});
                this.listenTo(t.editing.view.document, "clipboardInput", (e, i) => {
                    if (Mx(i.dataTransfer)) {
                        return
                    }
                    const n = Array.from(i.dataTransfer.files).filter(t => {
                        if (!t) {
                            return false
                        }
                        return r.test(t.type)
                    });
                    const o = i.targetRanges.map(e => t.editing.mapper.toModelRange(e));
                    t.model.change(i => {
                        i.setSelection(o);
                        if (n.length) {
                            e.stop();
                            t.model.enqueueChange("default", () => {
                                t.execute("imageUpload", {file: n})
                            })
                        }
                    })
                });
                this.listenTo(t.plugins.get(Rx), "inputTransformation", (e, i) => {
                    const n = Array.from(t.editing.view.createRangeIn(i.content)).filter(t => tx(t.item) && !t.item.getAttribute("uploadProcessed")).map(t => ({
                        promise: Zy(t.item),
                        imageElement: t.item
                    }));
                    if (!n.length) {
                        return
                    }
                    const r = new Ox(t.editing.view.document);
                    for (const t of n) {
                        r.setAttribute("uploadProcessed", true, t.imageElement);
                        const e = o.createLoader(t.promise);
                        if (e) {
                            r.setAttribute("src", "", t.imageElement);
                            r.setAttribute("uploadId", e.id, t.imageElement)
                        }
                    }
                });
                t.editing.view.document.on("dragover", (t, e) => {
                    e.preventDefault()
                });
                e.on("change", () => {
                    const i = e.differ.getChanges({includeChangesInGraveyard: true});
                    for (const e of i) {
                        if (e.type == "insert" && e.name != "$text") {
                            const i = e.position.nodeAfter;
                            const n = e.position.root.rootName == "$graveyard";
                            for (const e of Bx(t, i)) {
                                const t = e.getAttribute("uploadId");
                                if (!t) {
                                    continue
                                }
                                const i = o.loaders.get(t);
                                if (!i) {
                                    continue
                                }
                                if (n) {
                                    i.abort()
                                } else if (i.status == "idle") {
                                    this._readAndUpload(i, e)
                                }
                            }
                        }
                    }
                })
            }

            _readAndUpload(t, e) {
                const i = this.editor;
                const n = i.model;
                const o = i.locale.t;
                const r = i.plugins.get(lk);
                const s = i.plugins.get(vx);
                n.enqueueChange("transparent", t => {
                    t.setAttribute("uploadStatus", "reading", e)
                });
                return t.read().then(() => {
                    const o = t.upload();
                    if (Al.isSafari) {
                        const t = i.editing.mapper.toViewElement(e);
                        const n = Av(t);
                        i.editing.view.once("render", () => {
                            if (!n.parent) {
                                return
                            }
                            const t = i.editing.view.domConverter.mapViewToDom(n.parent);
                            if (!t) {
                                return
                            }
                            const e = t.style.display;
                            t.style.display = "none";
                            t._ckHack = t.offsetHeight;
                            t.style.display = e
                        })
                    }
                    n.enqueueChange("transparent", t => {
                        t.setAttribute("uploadStatus", "uploading", e)
                    });
                    return o
                }).then(t => {
                    n.enqueueChange("transparent", i => {
                        i.setAttributes({uploadStatus: "complete", src: t.default}, e);
                        this._parseAndSetSrcsetAttributeOnImage(t, e, i)
                    });
                    a()
                }).catch(i => {
                    if (t.status !== "error" && t.status !== "aborted") {
                        throw i
                    }
                    if (t.status == "error" && i) {
                        s.showWarning(i, {title: o("ke"), namespace: "upload"})
                    }
                    a();
                    n.enqueueChange("transparent", t => {
                        t.remove(e)
                    })
                });

                function a() {
                    n.enqueueChange("transparent", t => {
                        t.removeAttribute("uploadId", e);
                        t.removeAttribute("uploadStatus", e)
                    });
                    r.destroyLoader(t)
                }
            }

            _parseAndSetSrcsetAttributeOnImage(t, e, i) {
                let n = 0;
                const o = Object.keys(t).filter(t => {
                    const e = parseInt(t, 10);
                    if (!isNaN(e)) {
                        n = Math.max(n, e);
                        return true
                    }
                }).map(e => `${t[e]} ${e}w`).join(", ");
                if (o != "") {
                    i.setAttribute("srcset", {data: o, width: n}, e)
                }
            }
        }

        function Mx(t) {
            return Array.from(t.types).includes("text/html") && t.getData("text/html") !== ""
        }

        function Bx(t, e) {
            return Array.from(t.model.createRangeOn(e)).filter(t => t.item.is("image")).map(t => t.item)
        }

        class zx extends mp {
            static get pluginName() {
                return "ImageUpload"
            }

            static get requires() {
                return [Nx, nx, cx]
            }
        }

        class Lx extends jw {
            constructor(t) {
                super(t);
                this._childCommands = []
            }

            refresh() {
            }

            execute(...t) {
                const e = this._getFirstEnabledCommand();
                e.execute(t)
            }

            registerChildCommand(t) {
                this._childCommands.push(t);
                t.on("change:isEnabled", () => this._checkEnabled());
                this._checkEnabled()
            }

            _checkEnabled() {
                this.isEnabled = !!this._getFirstEnabledCommand()
            }

            _getFirstEnabledCommand() {
                return this._childCommands.find(t => t.isEnabled)
            }
        }

        class Fx extends mp {
            static get pluginName() {
                return "IndentEditing"
            }

            init() {
                const t = this.editor;
                t.commands.add("indent", new Lx(t));
                t.commands.add("outdent", new Lx(t))
            }
        }

        var Dx = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm5 6c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM2.75 16.5h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 1 0 0 1.5zM1.632 6.95L5.02 9.358a.4.4 0 0 1-.013.661l-3.39 2.207A.4.4 0 0 1 1 11.892V7.275a.4.4 0 0 1 .632-.326z"/></svg>';
        var jx = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm5 6c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM2.75 16.5h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 1 0 0 1.5zm1.618-9.55L.98 9.358a.4.4 0 0 0 .013.661l3.39 2.207A.4.4 0 0 0 5 11.892V7.275a.4.4 0 0 0-.632-.326z"/></svg>';

        class Hx extends mp {
            static get pluginName() {
                return "IndentUI"
            }

            init() {
                const t = this.editor;
                const e = t.locale;
                const i = t.t;
                const n = e.uiLanguageDirection == "ltr" ? Dx : jx;
                const o = e.uiLanguageDirection == "ltr" ? jx : Dx;
                this._defineButton("indent", i("jg"), n);
                this._defineButton("outdent", i("jh"), o)
            }

            _defineButton(t, e, i) {
                const n = this.editor;
                n.ui.componentFactory.add(t, o => {
                    const r = n.commands.get(t);
                    const s = new hb(o);
                    s.set({label: e, icon: i, tooltip: true});
                    s.bind("isOn", "isEnabled").to(r, "value", "isEnabled");
                    this.listenTo(s, "execute", () => {
                        n.execute(t);
                        n.editing.view.focus()
                    });
                    return s
                })
            }
        }

        class Wx extends mp {
            static get pluginName() {
                return "Indent"
            }

            static get requires() {
                return [Fx, Hx]
            }
        }

        class qx extends jw {
            constructor(t, e) {
                super(t);
                this._indentBehavior = e
            }

            refresh() {
                const t = this.editor;
                const e = t.model;
                const i = Ww(e.document.selection.getSelectedBlocks());
                if (!i || !e.schema.checkAttribute(i, "blockIndent")) {
                    this.isEnabled = false;
                    return
                }
                this.isEnabled = this._indentBehavior.checkEnabled(i.getAttribute("blockIndent"))
            }

            execute() {
                const t = this.editor.model;
                const e = Ux(t);
                t.change(t => {
                    for (const i of e) {
                        const e = i.getAttribute("blockIndent");
                        const n = this._indentBehavior.getNextIndent(e);
                        if (n) {
                            t.setAttribute("blockIndent", n, i)
                        } else {
                            t.removeAttribute("blockIndent", i)
                        }
                    }
                })
            }
        }

        function Ux(t) {
            const e = t.document.selection;
            const i = t.schema;
            const n = Array.from(e.getSelectedBlocks());
            return n.filter(t => i.checkAttribute(t, "blockIndent"))
        }

        class $x {
            constructor(t) {
                this.isForward = t.direction === "forward";
                this.offset = t.offset;
                this.unit = t.unit
            }

            checkEnabled(t) {
                const e = parseFloat(t || 0);
                return this.isForward || e > 0
            }

            getNextIndent(t) {
                const e = parseFloat(t || 0);
                const i = !t || t.endsWith(this.unit);
                if (!i) {
                    return this.isForward ? this.offset + this.unit : undefined
                }
                const n = this.isForward ? this.offset : -this.offset;
                const o = e + n;
                return o > 0 ? o + this.unit : undefined
            }
        }

        class Gx {
            constructor(t) {
                this.isForward = t.direction === "forward";
                this.classes = t.classes
            }

            checkEnabled(t) {
                const e = this.classes.indexOf(t);
                if (this.isForward) {
                    return e < this.classes.length - 1
                } else {
                    return e >= 0
                }
            }

            getNextIndent(t) {
                const e = this.classes.indexOf(t);
                const i = this.isForward ? 1 : -1;
                return this.classes[e + i]
            }
        }

        const Kx = /^#([0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})$/i;
        const Jx = /^rgb\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}[0-9]{1,3}[ %]?\)$/i;
        const Yx = /^rgba\([ ]?([0-9]{1,3}[ %]?,[ ]?){3}(1|[0-9]+%|[0]?\.?[0-9]+)\)$/i;
        const Qx = /^hsl\([ ]?([0-9]{1,3}[ %]?[,]?[ ]*){3}(1|[0-9]+%|[0]?\.?[0-9]+)?\)$/i;
        const Xx = /^hsla\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}(1|[0-9]+%|[0]?\.?[0-9]+)\)$/i;
        const Zx = new Set(["black", "silver", "gray", "white", "maroon", "red", "purple", "fuchsia", "green", "lime", "olive", "yellow", "navy", "blue", "teal", "aqua", "orange", "aliceblue", "antiquewhite", "aquamarine", "azure", "beige", "bisque", "blanchedalmond", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkgrey", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "gainsboro", "ghostwhite", "gold", "goldenrod", "greenyellow", "grey", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightgrey", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightslategrey", "lightsteelblue", "lightyellow", "limegreen", "linen", "magenta", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "oldlace", "olivedrab", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "skyblue", "slateblue", "slategray", "slategrey", "snow", "springgreen", "steelblue", "tan", "thistle", "tomato", "turquoise", "violet", "wheat", "whitesmoke", "yellowgreen", "rebeccapurple", "currentcolor", "transparent"]);

        function tC(t) {
            if (t.startsWith("#")) {
                return Kx.test(t)
            }
            if (t.startsWith("rgb")) {
                return Jx.test(t) || Yx.test(t)
            }
            if (t.startsWith("hsl")) {
                return Qx.test(t) || Xx.test(t)
            }
            return Zx.has(t.toLowerCase())
        }

        const eC = ["none", "hidden", "dotted", "dashed", "solid", "double", "groove", "ridge", "inset", "outset"];

        function iC(t) {
            return eC.includes(t)
        }

        const nC = /^([+-]?[0-9]*[.]?[0-9]+(px|cm|mm|in|pc|pt|ch|em|ex|rem|vh|vw|vmin|vmax)|0)$/;

        function oC(t) {
            return nC.test(t)
        }

        const rC = /^[+-]?[0-9]*[.]?[0-9]+%$/;

        function sC(t) {
            return rC.test(t)
        }

        const aC = ["repeat-x", "repeat-y", "repeat", "space", "round", "no-repeat"];

        function cC(t) {
            return aC.includes(t)
        }

        const lC = ["center", "top", "bottom", "left", "right"];

        function dC(t) {
            return lC.includes(t)
        }

        const uC = ["fixed", "scroll", "local"];

        function hC(t) {
            return uC.includes(t)
        }

        const fC = /^url\(/;

        function gC(t) {
            return fC.test(t)
        }

        function mC(t = "") {
            if (t === "") {
                return {top: undefined, right: undefined, bottom: undefined, left: undefined}
            }
            const e = kC(t);
            const i = e[0];
            const n = e[2] || i;
            const o = e[1] || i;
            const r = e[3] || o;
            return {top: i, bottom: n, right: o, left: r}
        }

        function pC(t) {
            return e => {
                const {top: i, right: n, bottom: o, left: r} = e;
                const s = [];
                if (![i, n, r, o].every(t => !!t)) {
                    if (i) {
                        s.push([t + "-top", i])
                    }
                    if (n) {
                        s.push([t + "-right", n])
                    }
                    if (o) {
                        s.push([t + "-bottom", o])
                    }
                    if (r) {
                        s.push([t + "-left", r])
                    }
                } else {
                    s.push([t, bC(e)])
                }
                return s
            }
        }

        function bC({top: t, right: e, bottom: i, left: n}) {
            const o = [];
            if (n !== e) {
                o.push(t, e, i, n)
            } else if (i !== t) {
                o.push(t, e, i)
            } else if (e !== t) {
                o.push(t, e)
            } else {
                o.push(t)
            }
            return o.join(" ")
        }

        function wC(t) {
            return e => ({path: t, value: mC(e)})
        }

        function kC(t) {
            return t.replace(/, /g, ",").split(" ").map(t => t.replace(/,/g, ", "))
        }

        function _C(t) {
            t.setNormalizer("margin", wC("margin"));
            t.setNormalizer("margin-top", t => ({path: "margin.top", value: t}));
            t.setNormalizer("margin-right", t => ({path: "margin.right", value: t}));
            t.setNormalizer("margin-bottom", t => ({path: "margin.bottom", value: t}));
            t.setNormalizer("margin-left", t => ({path: "margin.left", value: t}));
            t.setReducer("margin", pC("margin"));
            t.setStyleRelation("margin", ["margin-top", "margin-right", "margin-bottom", "margin-left"])
        }

        class vC extends mp {
            constructor(t) {
                super(t);
                t.config.define("indentBlock", {offset: 40, unit: "px"})
            }

            static get pluginName() {
                return "IndentBlock"
            }

            init() {
                const t = this.editor;
                const e = t.config.get("indentBlock");
                const i = !e.classes || !e.classes.length;
                const n = Object.assign({direction: "forward"}, e);
                const o = Object.assign({direction: "backward"}, e);
                if (i) {
                    t.data.addStyleProcessorRules(_C);
                    this._setupConversionUsingOffset(t.conversion);
                    t.commands.add("indentBlock", new qx(t, new $x(n)));
                    t.commands.add("outdentBlock", new qx(t, new $x(o)))
                } else {
                    this._setupConversionUsingClasses(e.classes);
                    t.commands.add("indentBlock", new qx(t, new Gx(n)));
                    t.commands.add("outdentBlock", new qx(t, new Gx(o)))
                }
            }

            afterInit() {
                const t = this.editor;
                const e = t.model.schema;
                const i = t.commands.get("indent");
                const n = t.commands.get("outdent");
                const o = ["paragraph", "heading1", "heading2", "heading3", "heading4", "heading5", "heading6"];
                o.forEach(t => {
                    if (e.isRegistered(t)) {
                        e.extend(t, {allowAttributes: "blockIndent"})
                    }
                });
                i.registerChildCommand(t.commands.get("indentBlock"));
                n.registerChildCommand(t.commands.get("outdentBlock"))
            }

            _setupConversionUsingOffset() {
                const t = this.editor.conversion;
                const e = this.editor.locale;
                const i = e.contentLanguageDirection === "rtl" ? "margin-right" : "margin-left";
                t.for("upcast").attributeToAttribute({
                    view: {styles: {[i]: /[\s\S]+/}},
                    model: {key: "blockIndent", value: t => t.getStyle(i)}
                });
                t.for("downcast").attributeToAttribute({
                    model: "blockIndent",
                    view: t => ({key: "style", value: {[i]: t}})
                })
            }

            _setupConversionUsingClasses(t) {
                const e = {model: {key: "blockIndent", values: []}, view: {}};
                for (const i of t) {
                    e.model.values.push(i);
                    e.view[i] = {key: "class", value: [i]}
                }
                this.editor.conversion.attributeToAttribute(e)
            }
        }

        const yC = "italic";

        class xC extends mp {
            static get pluginName() {
                return "ItalicEditing"
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: yC});
                t.model.schema.setAttributeProperties(yC, {isFormatting: true, copyOnEnter: true});
                t.conversion.attributeToElement({
                    model: yC,
                    view: "i",
                    upcastAlso: ["em", {styles: {"font-style": "italic"}}]
                });
                t.commands.add(yC, new yk(t, yC));
                t.keystrokes.set("CTRL+I", yC)
            }
        }

        var CC = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.586 14.633l.021.004c-.036.335.095.655.393.962.082.083.173.15.274.201h1.474a.6.6 0 1 1 0 1.2H5.304a.6.6 0 0 1 0-1.2h1.15c.474-.07.809-.182 1.005-.334.157-.122.291-.32.404-.597l2.416-9.55a1.053 1.053 0 0 0-.281-.823 1.12 1.12 0 0 0-.442-.296H8.15a.6.6 0 0 1 0-1.2h6.443a.6.6 0 1 1 0 1.2h-1.195c-.376.056-.65.155-.823.296-.215.175-.423.439-.623.79l-2.366 9.347z"/></svg>';
        const AC = "italic";

        class TC extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add(AC, i => {
                    const n = t.commands.get(AC);
                    const o = new hb(i);
                    o.set({label: e("jj"), icon: CC, keystroke: "CTRL+I", tooltip: true, isToggleable: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute(AC);
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class PC extends mp {
            static get requires() {
                return [xC, TC]
            }

            static get pluginName() {
                return "Italic"
            }
        }

        function SC(t, e, i) {
            return i.createRange(EC(t, e, true, i), EC(t, e, false, i))
        }

        function EC(t, e, i, n) {
            let o = t.textNode || (i ? t.nodeBefore : t.nodeAfter);
            let r = null;
            while (o && o.getAttribute("linkHref") == e) {
                r = o;
                o = i ? o.previousSibling : o.nextSibling
            }
            return r ? n.createPositionAt(r, i ? "before" : "after") : t
        }

        class RC extends jw {
            constructor(t) {
                super(t);
                this.manualDecorators = new ys
            }

            restoreManualDecoratorStates() {
                for (const t of this.manualDecorators) {
                    t.value = this._getDecoratorStateFromModel(t.id)
                }
            }

            refresh() {
                const t = this.editor.model;
                const e = t.document;
                this.value = e.selection.getAttribute("linkHref");
                for (const t of this.manualDecorators) {
                    t.value = this._getDecoratorStateFromModel(t.id)
                }
                this.isEnabled = t.schema.checkAttributeInSelection(e.selection, "linkHref")
            }

            execute(t, e = {}) {
                const i = this.editor.model;
                const n = i.document.selection;
                const o = [];
                const r = [];
                for (const t in e) {
                    if (e[t]) {
                        o.push(t)
                    } else {
                        r.push(t)
                    }
                }
                i.change(e => {
                    if (n.isCollapsed) {
                        const s = n.getFirstPosition();
                        if (n.hasAttribute("linkHref")) {
                            const a = SC(s, n.getAttribute("linkHref"), i);
                            e.setAttribute("linkHref", t, a);
                            o.forEach(t => {
                                e.setAttribute(t, true, a)
                            });
                            r.forEach(t => {
                                e.removeAttribute(t, a)
                            });
                            e.setSelection(a)
                        } else if (t !== "") {
                            const r = Hs(n.getAttributes());
                            r.set("linkHref", t);
                            o.forEach(t => {
                                r.set(t, true)
                            });
                            const a = e.createText(t, r);
                            i.insertContent(a, s);
                            e.setSelection(e.createRangeOn(a))
                        }
                    } else {
                        const s = i.schema.getValidRanges(n.getRanges(), "linkHref");
                        for (const i of s) {
                            e.setAttribute("linkHref", t, i);
                            o.forEach(t => {
                                e.setAttribute(t, true, i)
                            });
                            r.forEach(t => {
                                e.removeAttribute(t, i)
                            })
                        }
                    }
                })
            }

            _getDecoratorStateFromModel(t) {
                const e = this.editor.model.document;
                return e.selection.getAttribute(t) || false
            }
        }

        class OC extends jw {
            refresh() {
                this.isEnabled = this.editor.model.document.selection.hasAttribute("linkHref")
            }

            execute() {
                const t = this.editor;
                const e = this.editor.model;
                const i = e.document.selection;
                const n = t.commands.get("link");
                e.change(t => {
                    const o = i.isCollapsed ? [SC(i.getFirstPosition(), i.getAttribute("linkHref"), e)] : i.getRanges();
                    for (const e of o) {
                        t.removeAttribute("linkHref", e);
                        if (n) {
                            for (const i of n.manualDecorators) {
                                t.removeAttribute(i.id, e)
                            }
                        }
                    }
                })
            }
        }

        function IC(t, e, i) {
            var n = t.length;
            i = i === undefined ? n : i;
            return !e && i >= n ? t : Oa(t, e, i)
        }

        var VC = IC;
        var NC = "\\ud800-\\udfff", MC = "\\u0300-\\u036f", BC = "\\ufe20-\\ufe2f", zC = "\\u20d0-\\u20ff",
            LC = MC + BC + zC, FC = "\\ufe0e\\ufe0f";
        var DC = "\\u200d";
        var jC = RegExp("[" + DC + NC + LC + FC + "]");

        function HC(t) {
            return jC.test(t)
        }

        var WC = HC;

        function qC(t) {
            return t.split("")
        }

        var UC = qC;
        var $C = "\\ud800-\\udfff", GC = "\\u0300-\\u036f", KC = "\\ufe20-\\ufe2f", JC = "\\u20d0-\\u20ff",
            YC = GC + KC + JC, QC = "\\ufe0e\\ufe0f";
        var XC = "[" + $C + "]", ZC = "[" + YC + "]", tA = "\\ud83c[\\udffb-\\udfff]", eA = "(?:" + ZC + "|" + tA + ")",
            iA = "[^" + $C + "]", nA = "(?:\\ud83c[\\udde6-\\uddff]){2}", oA = "[\\ud800-\\udbff][\\udc00-\\udfff]",
            rA = "\\u200d";
        var sA = eA + "?", aA = "[" + QC + "]?",
            cA = "(?:" + rA + "(?:" + [iA, nA, oA].join("|") + ")" + aA + sA + ")*", lA = aA + sA + cA,
            dA = "(?:" + [iA + ZC + "?", ZC, nA, oA, XC].join("|") + ")";
        var uA = RegExp(tA + "(?=" + tA + ")|" + dA + lA, "g");

        function hA(t) {
            return t.match(uA) || []
        }

        var fA = hA;

        function gA(t) {
            return WC(t) ? fA(t) : UC(t)
        }

        var mA = gA;

        function pA(t) {
            return function (e) {
                e = _a(e);
                var i = WC(e) ? mA(e) : undefined;
                var n = i ? i[0] : e.charAt(0);
                var o = i ? VC(i, 1).join("") : e.slice(1);
                return n[t]() + o
            }
        }

        var bA = pA;
        var wA = bA("toUpperCase");
        var kA = wA;
        const _A = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g;
        const vA = /^(?:(?:https?|ftps?|mailto):|[^a-z]|[a-z+.-]+(?:[^a-z+.:-]|$))/i;

        function yA(t) {
            return t.is("attributeElement") && !!t.getCustomProperty("link")
        }

        function xA(t, e) {
            const i = e.createAttributeElement("a", {href: t}, {priority: 5});
            e.setCustomProperty("link", true, i);
            return i
        }

        function CA(t) {
            t = String(t);
            return AA(t) ? t : "#"
        }

        function AA(t) {
            const e = t.replace(_A, "");
            return e.match(vA)
        }

        function TA(t, e) {
            const i = {"Open in a new tab": t("mm"), Downloadable: t("mn")};
            e.forEach(t => {
                if (t.label && i[t.label]) {
                    t.label = i[t.label]
                }
                return t
            });
            return e
        }

        function PA(t) {
            const e = [];
            if (t) {
                for (const [i, n] of Object.entries(t)) {
                    const t = Object.assign({}, n, {id: `link${kA(i)}`});
                    e.push(t)
                }
            }
            return e
        }

        class SA {
            constructor() {
                this._definitions = new Set
            }

            get length() {
                return this._definitions.size
            }

            add(t) {
                if (Array.isArray(t)) {
                    t.forEach(t => this._definitions.add(t))
                } else {
                    this._definitions.add(t)
                }
            }

            getDispatcher() {
                return t => {
                    t.on("attribute:linkHref", (t, e, i) => {
                        if (!i.consumable.test(e.item, "attribute:linkHref")) {
                            return
                        }
                        const n = i.writer;
                        const o = n.document.selection;
                        for (const t of this._definitions) {
                            const r = n.createAttributeElement("a", t.attributes, {priority: 5});
                            n.setCustomProperty("link", true, r);
                            if (t.callback(e.attributeNewValue)) {
                                if (e.item.is("selection")) {
                                    n.wrap(o.getFirstRange(), r)
                                } else {
                                    n.wrap(i.mapper.toViewRange(e.range), r)
                                }
                            } else {
                                n.unwrap(i.mapper.toViewRange(e.range), r)
                            }
                        }
                    }, {priority: "high"})
                }
            }
        }

        class EA {
            constructor({id: t, label: e, attributes: i}) {
                this.id = t;
                this.set("value");
                this.label = e;
                this.attributes = i
            }
        }

        vs(EA, Jc);

        function RA({view: t, model: e, emitter: i, attribute: n, locale: o}) {
            const r = new OA(e, i, n);
            const s = e.document.selection;
            i.listenTo(t.document, "keydown", (t, e) => {
                if (!s.isCollapsed) {
                    return
                }
                if (e.shiftKey || e.altKey || e.ctrlKey) {
                    return
                }
                const i = e.keyCode == Nl.arrowright;
                const n = e.keyCode == Nl.arrowleft;
                if (!i && !n) {
                    return
                }
                const a = s.getFirstPosition();
                const c = o.contentLanguageDirection;
                let l;
                if (c === "ltr" && i || c === "rtl" && n) {
                    l = r.handleForwardMovement(a, e)
                } else {
                    l = r.handleBackwardMovement(a, e)
                }
                if (l) {
                    t.stop()
                }
            }, {priority: os.get("high") + 1})
        }

        class OA {
            constructor(t, e, i) {
                this.model = t;
                this.attribute = i;
                this._modelSelection = t.document.selection;
                this._overrideUid = null;
                this._isNextGravityRestorationSkipped = false;
                e.listenTo(this._modelSelection, "change:range", (t, e) => {
                    if (this._isNextGravityRestorationSkipped) {
                        this._isNextGravityRestorationSkipped = false;
                        return
                    }
                    if (!this._isGravityOverridden) {
                        return
                    }
                    if (!e.directChange && IA(this._modelSelection.getFirstPosition(), i)) {
                        return
                    }
                    this._restoreGravity()
                })
            }

            handleForwardMovement(t, e) {
                const i = this.attribute;
                if (this._isGravityOverridden) {
                    return
                }
                if (t.isAtStart && this._hasSelectionAttribute) {
                    return
                }
                if (MA(t, i) && this._hasSelectionAttribute) {
                    this._preventCaretMovement(e);
                    this._removeSelectionAttribute();
                    return true
                }
                if (VA(t, i)) {
                    this._preventCaretMovement(e);
                    this._overrideGravity();
                    return true
                }
                if (NA(t, i) && this._hasSelectionAttribute) {
                    this._preventCaretMovement(e);
                    this._overrideGravity();
                    return true
                }
            }

            handleBackwardMovement(t, e) {
                const i = this.attribute;
                if (this._isGravityOverridden) {
                    if (MA(t, i) && this._hasSelectionAttribute) {
                        this._preventCaretMovement(e);
                        this._restoreGravity();
                        this._removeSelectionAttribute();
                        return true
                    } else {
                        this._preventCaretMovement(e);
                        this._restoreGravity();
                        if (t.isAtStart) {
                            this._removeSelectionAttribute()
                        }
                        return true
                    }
                } else {
                    if (MA(t, i) && !this._hasSelectionAttribute) {
                        this._preventCaretMovement(e);
                        this._setSelectionAttributeFromTheNodeBefore(t);
                        return true
                    }
                    if (t.isAtEnd && NA(t, i)) {
                        if (this._hasSelectionAttribute) {
                            if (BA(t, i)) {
                                this._skipNextAutomaticGravityRestoration();
                                this._overrideGravity()
                            }
                            return
                        } else {
                            this._preventCaretMovement(e);
                            this._setSelectionAttributeFromTheNodeBefore(t);
                            return true
                        }
                    }
                    if (t.isAtStart) {
                        if (this._hasSelectionAttribute) {
                            this._removeSelectionAttribute();
                            this._preventCaretMovement(e);
                            return true
                        }
                        return
                    }
                    if (BA(t, i)) {
                        this._skipNextAutomaticGravityRestoration();
                        this._overrideGravity()
                    }
                }
            }

            get _isGravityOverridden() {
                return !!this._overrideUid
            }

            get _hasSelectionAttribute() {
                return this._modelSelection.hasAttribute(this.attribute)
            }

            _overrideGravity() {
                this._overrideUid = this.model.change(t => t.overrideSelectionGravity())
            }

            _restoreGravity() {
                this.model.change(t => {
                    t.restoreSelectionGravity(this._overrideUid);
                    this._overrideUid = null
                })
            }

            _preventCaretMovement(t) {
                t.preventDefault()
            }

            _removeSelectionAttribute() {
                this.model.change(t => {
                    t.removeSelectionAttribute(this.attribute)
                })
            }

            _setSelectionAttributeFromTheNodeBefore(t) {
                const e = this.attribute;
                this.model.change(i => {
                    i.setSelectionAttribute(this.attribute, t.nodeBefore.getAttribute(e))
                })
            }

            _skipNextAutomaticGravityRestoration() {
                this._isNextGravityRestorationSkipped = true
            }
        }

        function IA(t, e) {
            return VA(t, e) || NA(t, e)
        }

        function VA(t, e) {
            const {nodeBefore: i, nodeAfter: n} = t;
            const o = i ? i.hasAttribute(e) : false;
            const r = n ? n.hasAttribute(e) : false;
            return r && (!o || i.getAttribute(e) !== n.getAttribute(e))
        }

        function NA(t, e) {
            const {nodeBefore: i, nodeAfter: n} = t;
            const o = i ? i.hasAttribute(e) : false;
            const r = n ? n.hasAttribute(e) : false;
            return o && (!r || i.getAttribute(e) !== n.getAttribute(e))
        }

        function MA(t, e) {
            const {nodeBefore: i, nodeAfter: n} = t;
            const o = i ? i.hasAttribute(e) : false;
            const r = n ? n.hasAttribute(e) : false;
            if (!r || !o) {
                return
            }
            return n.getAttribute(e) !== i.getAttribute(e)
        }

        function BA(t, e) {
            return IA(t.getShiftedBy(-1), e)
        }

        var zA = i(80);
        const LA = "ck-link_selected";
        const FA = "automatic";
        const DA = "manual";
        const jA = /^(https?:)?\/\//;

        class HA extends mp {
            static get pluginName() {
                return "LinkEditing"
            }

            constructor(t) {
                super(t);
                t.config.define("link", {addTargetToExternalLinks: false})
            }

            init() {
                const t = this.editor;
                const e = t.locale;
                t.model.schema.extend("$text", {allowAttributes: "linkHref"});
                t.conversion.for("dataDowncast").attributeToElement({model: "linkHref", view: xA});
                t.conversion.for("editingDowncast").attributeToElement({
                    model: "linkHref",
                    view: (t, e) => xA(CA(t), e)
                });
                t.conversion.for("upcast").elementToAttribute({
                    view: {name: "a", attributes: {href: true}},
                    model: {key: "linkHref", value: t => t.getAttribute("href")}
                });
                t.commands.add("link", new RC(t));
                t.commands.add("unlink", new OC(t));
                const i = TA(t.t, PA(t.config.get("link.decorators")));
                this._enableAutomaticDecorators(i.filter(t => t.mode === FA));
                this._enableManualDecorators(i.filter(t => t.mode === DA));
                RA({view: t.editing.view, model: t.model, emitter: this, attribute: "linkHref", locale: e});
                this._setupLinkHighlight()
            }

            _enableAutomaticDecorators(t) {
                const e = this.editor;
                const i = new SA;
                if (e.config.get("link.addTargetToExternalLinks")) {
                    i.add({
                        id: "linkIsExternal",
                        mode: FA,
                        callback: t => jA.test(t),
                        attributes: {target: "_blank", rel: "noopener noreferrer"}
                    })
                }
                i.add(t);
                if (i.length) {
                    e.conversion.for("downcast").add(i.getDispatcher())
                }
            }

            _enableManualDecorators(t) {
                if (!t.length) {
                    return
                }
                const e = this.editor;
                const i = e.commands.get("link");
                const n = i.manualDecorators;
                t.forEach(t => {
                    e.model.schema.extend("$text", {allowAttributes: t.id});
                    n.add(new EA(t));
                    e.conversion.for("downcast").attributeToElement({
                        model: t.id, view: (e, i) => {
                            if (e) {
                                const e = n.get(t.id).attributes;
                                const o = i.createAttributeElement("a", e, {priority: 5});
                                i.setCustomProperty("link", true, o);
                                return o
                            }
                        }
                    });
                    e.conversion.for("upcast").elementToAttribute({
                        view: {
                            name: "a",
                            attributes: n.get(t.id).attributes
                        }, model: {key: t.id}
                    })
                })
            }

            _setupLinkHighlight() {
                const t = this.editor;
                const e = t.editing.view;
                const i = new Set;
                e.document.registerPostFixer(e => {
                    const n = t.model.document.selection;
                    let o = false;
                    if (n.hasAttribute("linkHref")) {
                        const r = SC(n.getFirstPosition(), n.getAttribute("linkHref"), t.model);
                        const s = t.editing.mapper.toViewRange(r);
                        for (const t of s.getItems()) {
                            if (t.is("a") && !t.hasClass(LA)) {
                                e.addClass(LA, t);
                                i.add(t);
                                o = true
                            }
                        }
                    }
                    return o
                });
                t.conversion.for("editingDowncast").add(t => {
                    t.on("insert", n, {priority: "highest"});
                    t.on("remove", n, {priority: "highest"});
                    t.on("attribute", n, {priority: "highest"});
                    t.on("selection", n, {priority: "highest"});

                    function n() {
                        e.change(t => {
                            for (const e of i.values()) {
                                t.removeClass(LA, e);
                                i.delete(e)
                            }
                        })
                    }
                })
            }
        }

        class WA extends Ju {
            constructor(t) {
                super(t);
                this.domEventType = "click"
            }

            onDomEvent(t) {
                this.fire(t.type, t)
            }
        }

        var qA = i(82);

        class UA extends Gp {
            constructor(t, e = []) {
                super(t);
                const i = t.t;
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.urlInputView = this._createUrlInput();
                this.saveButtonView = this._createButton(i("lo"), Xv, "ck-button-save");
                this.saveButtonView.type = "submit";
                this.cancelButtonView = this._createButton(i("lp"), Zv, "ck-button-cancel", "cancel");
                this._manualDecoratorSwitches = this._createManualDecoratorSwitches(e);
                this.children = this._createFormChildren(e);
                this._focusables = new bp;
                this._focusCycler = new yb({
                    focusables: this._focusables,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "shift + tab", focusNext: "tab"}
                });
                const n = ["ck", "ck-link-form"];
                if (e.length) {
                    n.push("ck-link-form_layout-vertical")
                }
                this.setTemplate({tag: "form", attributes: {class: n, tabindex: "-1"}, children: this.children})
            }

            getDecoratorSwitchesState() {
                return Array.from(this._manualDecoratorSwitches).reduce((t, e) => {
                    t[e.name] = e.isOn;
                    return t
                }, {})
            }

            render() {
                super.render();
                Qv({view: this});
                const t = [this.urlInputView, ...this._manualDecoratorSwitches, this.saveButtonView, this.cancelButtonView];
                t.forEach(t => {
                    this._focusables.add(t);
                    this.focusTracker.add(t.element)
                });
                this.keystrokes.listenTo(this.element)
            }

            focus() {
                this._focusCycler.focusFirst()
            }

            _createUrlInput() {
                const t = this.locale.t;
                const e = new Kv(this.locale, Yv);
                e.label = t("lq");
                e.inputView.placeholder = "https://example.com";
                return e
            }

            _createButton(t, e, i, n) {
                const o = new hb(this.locale);
                o.set({label: t, icon: e, tooltip: true});
                o.extendTemplate({attributes: {class: i}});
                if (n) {
                    o.delegate("execute").to(this, n)
                }
                return o
            }

            _createManualDecoratorSwitches(t) {
                const e = this.createCollection();
                for (const i of t) {
                    const t = new Fb(this.locale);
                    t.set({name: i.id, label: i.label, withText: true});
                    t.bind("isOn").to(i, "value");
                    t.on("execute", () => {
                        i.set("value", !t.isOn)
                    });
                    e.add(t)
                }
                return e
            }

            _createFormChildren(t) {
                const e = this.createCollection();
                e.add(this.urlInputView);
                if (t.length) {
                    const t = new Gp;
                    t.setTemplate({
                        tag: "ul",
                        children: this._manualDecoratorSwitches.map(t => ({
                            tag: "li",
                            children: [t],
                            attributes: {class: ["ck", "ck-list__item"]}
                        })),
                        attributes: {class: ["ck", "ck-reset", "ck-list"]}
                    });
                    e.add(t)
                }
                e.add(this.saveButtonView);
                e.add(this.cancelButtonView);
                return e
            }
        }

        var $A = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184zm4.919 10.562l-1.414 1.414a.75.75 0 1 1-1.06-1.06l1.414-1.415-1.415-1.414a.75.75 0 0 1 1.061-1.06l1.414 1.414 1.414-1.415a.75.75 0 0 1 1.061 1.061l-1.414 1.414 1.414 1.415a.75.75 0 0 1-1.06 1.06l-1.415-1.414z"/></svg>';
        var GA = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7.3 17.37l-.061.088a1.518 1.518 0 0 1-.934.535l-4.178.663-.806-4.153a1.495 1.495 0 0 1 .187-1.058l.056-.086L8.77 2.639c.958-1.351 2.803-1.076 4.296-.03 1.497 1.047 2.387 2.693 1.433 4.055L7.3 17.37zM9.14 4.728l-5.545 8.346 3.277 2.294 5.544-8.346L9.14 4.728zM6.07 16.512l-3.276-2.295.53 2.73 2.746-.435zM9.994 3.506L13.271 5.8c.316-.452-.16-1.333-1.065-1.966-.905-.634-1.895-.78-2.212-.328zM8 18.5L9.375 17H19v1.5H8z"/></svg>';
        var KA = i(84);

        class JA extends Gp {
            constructor(t) {
                super(t);
                const e = t.t;
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.previewButtonView = this._createPreviewButton();
                this.unlinkButtonView = this._createButton(e("lk"), $A, "unlink");
                this.editButtonView = this._createButton(e("ll"), GA, "edit");
                this.set("href");
                this._focusables = new bp;
                this._focusCycler = new yb({
                    focusables: this._focusables,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "shift + tab", focusNext: "tab"}
                });
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-link-actions"], tabindex: "-1"},
                    children: [this.previewButtonView, this.editButtonView, this.unlinkButtonView]
                })
            }

            render() {
                super.render();
                const t = [this.previewButtonView, this.editButtonView, this.unlinkButtonView];
                t.forEach(t => {
                    this._focusables.add(t);
                    this.focusTracker.add(t.element)
                });
                this.keystrokes.listenTo(this.element)
            }

            focus() {
                this._focusCycler.focusFirst()
            }

            _createButton(t, e, i) {
                const n = new hb(this.locale);
                n.set({label: t, icon: e, tooltip: true});
                n.delegate("execute").to(this, i);
                return n
            }

            _createPreviewButton() {
                const t = new hb(this.locale);
                const e = this.bindTemplate;
                const i = this.t;
                t.set({withText: true, tooltip: i("lm")});
                t.extendTemplate({
                    attributes: {
                        class: ["ck", "ck-link-actions__preview"],
                        href: e.to("href", t => t && CA(t)),
                        target: "_blank",
                        rel: "noopener noreferrer"
                    }
                });
                t.bind("label").to(this, "href", t => t || i("ln"));
                t.bind("isEnabled").to(this, "href", t => !!t);
                t.template.tag = "a";
                t.template.eventListeners = {};
                return t
            }
        }

        var YA = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184z"/></svg>';
        const QA = "Ctrl+K";

        class XA extends mp {
            static get requires() {
                return [kb]
            }

            static get pluginName() {
                return "LinkUI"
            }

            init() {
                const t = this.editor;
                t.editing.view.addObserver(WA);
                this.actionsView = this._createActionsView();
                this.formView = this._createFormView();
                this._balloon = t.plugins.get(kb);
                this._createToolbarLinkButton();
                this._enableUserBalloonInteractions()
            }

            destroy() {
                super.destroy();
                this.formView.destroy()
            }

            _createActionsView() {
                const t = this.editor;
                const e = new JA(t.locale);
                const i = t.commands.get("link");
                const n = t.commands.get("unlink");
                e.bind("href").to(i, "value");
                e.editButtonView.bind("isEnabled").to(i);
                e.unlinkButtonView.bind("isEnabled").to(n);
                this.listenTo(e, "edit", () => {
                    this._addFormView()
                });
                this.listenTo(e, "unlink", () => {
                    t.execute("unlink");
                    this._hideUI()
                });
                e.keystrokes.set("Esc", (t, e) => {
                    this._hideUI();
                    e()
                });
                e.keystrokes.set(QA, (t, e) => {
                    this._addFormView();
                    e()
                });
                return e
            }

            _createFormView() {
                const t = this.editor;
                const e = t.commands.get("link");
                const i = new UA(t.locale, e.manualDecorators);
                i.urlInputView.bind("value").to(e, "value");
                i.urlInputView.bind("isReadOnly").to(e, "isEnabled", t => !t);
                i.saveButtonView.bind("isEnabled").to(e);
                this.listenTo(i, "submit", () => {
                    t.execute("link", i.urlInputView.inputView.element.value, i.getDecoratorSwitchesState());
                    this._closeFormView()
                });
                this.listenTo(i, "cancel", () => {
                    this._closeFormView()
                });
                i.keystrokes.set("Esc", (t, e) => {
                    this._closeFormView();
                    e()
                });
                return i
            }

            _createToolbarLinkButton() {
                const t = this.editor;
                const e = t.commands.get("link");
                const i = t.t;
                t.keystrokes.set(QA, (t, e) => {
                    e();
                    this._showUI(true)
                });
                t.ui.componentFactory.add("link", t => {
                    const n = new hb(t);
                    n.isEnabled = true;
                    n.label = i("lf");
                    n.icon = YA;
                    n.keystroke = QA;
                    n.tooltip = true;
                    n.isToggleable = true;
                    n.bind("isEnabled").to(e, "isEnabled");
                    n.bind("isOn").to(e, "value", t => !!t);
                    this.listenTo(n, "execute", () => this._showUI(true));
                    return n
                })
            }

            _enableUserBalloonInteractions() {
                const t = this.editor.editing.view.document;
                this.listenTo(t, "click", () => {
                    const t = this._getSelectedLinkElement();
                    if (t) {
                        this._showUI()
                    }
                });
                this.editor.keystrokes.set("Tab", (t, e) => {
                    if (this._areActionsVisible && !this.actionsView.focusTracker.isFocused) {
                        this.actionsView.focus();
                        e()
                    }
                }, {priority: "high"});
                this.editor.keystrokes.set("Esc", (t, e) => {
                    if (this._isUIVisible) {
                        this._hideUI();
                        e()
                    }
                });
                Db({
                    emitter: this.formView,
                    activator: () => this._isUIInPanel,
                    contextElements: [this._balloon.view.element],
                    callback: () => this._hideUI()
                })
            }

            _addActionsView() {
                if (this._areActionsInPanel) {
                    return
                }
                this._balloon.add({view: this.actionsView, position: this._getBalloonPositionData()})
            }

            _addFormView() {
                if (this._isFormInPanel) {
                    return
                }
                const t = this.editor;
                const e = t.commands.get("link");
                this._balloon.add({view: this.formView, position: this._getBalloonPositionData()});
                if (this._balloon.visibleView === this.formView) {
                    this.formView.urlInputView.select()
                }
                this.formView.urlInputView.inputView.element.value = e.value || ""
            }

            _closeFormView() {
                const t = this.editor.commands.get("link");
                t.restoreManualDecoratorStates();
                if (t.value !== undefined) {
                    this._removeFormView()
                } else {
                    this._hideUI()
                }
            }

            _removeFormView() {
                if (this._isFormInPanel) {
                    this.formView.saveButtonView.focus();
                    this._balloon.remove(this.formView);
                    this.editor.editing.view.focus()
                }
            }

            _showUI(t = false) {
                if (!this._getSelectedLinkElement()) {
                    this._addActionsView();
                    if (t) {
                        this._balloon.showStack("main")
                    }
                    this._addFormView()
                } else {
                    if (this._areActionsVisible) {
                        this._addFormView()
                    } else {
                        this._addActionsView()
                    }
                    if (t) {
                        this._balloon.showStack("main")
                    }
                }
                this._startUpdatingUI()
            }

            _hideUI() {
                if (!this._isUIInPanel) {
                    return
                }
                const t = this.editor;
                this.stopListening(t.ui, "update");
                this.stopListening(this._balloon, "change:visibleView");
                t.editing.view.focus();
                this._removeFormView();
                this._balloon.remove(this.actionsView)
            }

            _startUpdatingUI() {
                const t = this.editor;
                const e = t.editing.view.document;
                let i = this._getSelectedLinkElement();
                let n = r();
                const o = () => {
                    const t = this._getSelectedLinkElement();
                    const e = r();
                    if (i && !t || !i && e !== n) {
                        this._hideUI()
                    } else if (this._isUIVisible) {
                        this._balloon.updatePosition(this._getBalloonPositionData())
                    }
                    i = t;
                    n = e
                };

                function r() {
                    return e.selection.focus.getAncestors().reverse().find(t => t.is("element"))
                }

                this.listenTo(t.ui, "update", o);
                this.listenTo(this._balloon, "change:visibleView", o)
            }

            get _isFormInPanel() {
                return this._balloon.hasView(this.formView)
            }

            get _areActionsInPanel() {
                return this._balloon.hasView(this.actionsView)
            }

            get _areActionsVisible() {
                return this._balloon.visibleView === this.actionsView
            }

            get _isUIInPanel() {
                return this._isFormInPanel || this._areActionsInPanel
            }

            get _isUIVisible() {
                const t = this._balloon.visibleView;
                return t == this.formView || this._areActionsVisible
            }

            _getBalloonPositionData() {
                const t = this.editor.editing.view;
                const e = t.document;
                const i = this._getSelectedLinkElement();
                const n = i ? t.domConverter.mapViewToDom(i) : t.domConverter.viewRangeToDom(e.selection.getFirstRange());
                return {target: n}
            }

            _getSelectedLinkElement() {
                const t = this.editor.editing.view;
                const e = t.document.selection;
                if (e.isCollapsed) {
                    return ZA(e.getFirstPosition())
                } else {
                    const i = e.getFirstRange().getTrimmed();
                    const n = ZA(i.start);
                    const o = ZA(i.end);
                    if (!n || n != o) {
                        return null
                    }
                    if (t.createRangeIn(n).getTrimmed().isEqual(i)) {
                        return n
                    } else {
                        return null
                    }
                }
            }
        }

        function ZA(t) {
            return t.getAncestors().find(t => yA(t))
        }

        class tT extends mp {
            static get requires() {
                return [HA, XA]
            }

            static get pluginName() {
                return "Link"
            }
        }

        class eT extends jw {
            constructor(t, e) {
                super(t);
                this.type = e
            }

            refresh() {
                this.value = this._getValue();
                this.isEnabled = this._checkEnabled()
            }

            execute() {
                const t = this.editor.model;
                const e = t.document;
                const i = Array.from(e.selection.getSelectedBlocks()).filter(e => nT(e, t.schema));
                const n = this.value === true;
                t.change(t => {
                    if (n) {
                        let e = i[i.length - 1].nextSibling;
                        let n = Number.POSITIVE_INFINITY;
                        let o = [];
                        while (e && e.name == "listItem" && e.getAttribute("listIndent") !== 0) {
                            const t = e.getAttribute("listIndent");
                            if (t < n) {
                                n = t
                            }
                            const i = t - n;
                            o.push({element: e, listIndent: i});
                            e = e.nextSibling
                        }
                        o = o.reverse();
                        for (const e of o) {
                            t.setAttribute("listIndent", e.listIndent, e.element)
                        }
                    }
                    if (!n) {
                        let t = Number.POSITIVE_INFINITY;
                        for (const e of i) {
                            if (e.is("listItem") && e.getAttribute("listIndent") < t) {
                                t = e.getAttribute("listIndent")
                            }
                        }
                        t = t === 0 ? 1 : t;
                        iT(i, true, t);
                        iT(i, false, t)
                    }
                    for (const e of i.reverse()) {
                        if (n && e.name == "listItem") {
                            t.rename(e, "paragraph")
                        } else if (!n && e.name != "listItem") {
                            t.setAttributes({listType: this.type, listIndent: 0}, e);
                            t.rename(e, "listItem")
                        } else if (!n && e.name == "listItem" && e.getAttribute("listType") != this.type) {
                            t.setAttribute("listType", this.type, e)
                        }
                    }
                })
            }

            _getValue() {
                const t = Ww(this.editor.model.document.selection.getSelectedBlocks());
                return !!t && t.is("listItem") && t.getAttribute("listType") == this.type
            }

            _checkEnabled() {
                if (this.value) {
                    return true
                }
                const t = this.editor.model.document.selection;
                const e = this.editor.model.schema;
                const i = Ww(t.getSelectedBlocks());
                if (!i) {
                    return false
                }
                return nT(i, e)
            }
        }

        function iT(t, e, i) {
            const n = e ? t[0] : t[t.length - 1];
            if (n.is("listItem")) {
                let o = n[e ? "previousSibling" : "nextSibling"];
                let r = n.getAttribute("listIndent");
                while (o && o.is("listItem") && o.getAttribute("listIndent") >= i) {
                    if (r > o.getAttribute("listIndent")) {
                        r = o.getAttribute("listIndent")
                    }
                    if (o.getAttribute("listIndent") == r) {
                        t[e ? "unshift" : "push"](o)
                    }
                    o = o[e ? "previousSibling" : "nextSibling"]
                }
            }
        }

        function nT(t, e) {
            return e.checkChild(t.parent, "listItem") && !e.isObject(t)
        }

        class oT extends jw {
            constructor(t, e) {
                super(t);
                this._indentBy = e == "forward" ? 1 : -1
            }

            refresh() {
                this.isEnabled = this._checkEnabled()
            }

            execute() {
                const t = this.editor.model;
                const e = t.document;
                let i = Array.from(e.selection.getSelectedBlocks());
                t.change(t => {
                    const e = i[i.length - 1];
                    let n = e.nextSibling;
                    while (n && n.name == "listItem" && n.getAttribute("listIndent") > e.getAttribute("listIndent")) {
                        i.push(n);
                        n = n.nextSibling
                    }
                    if (this._indentBy < 0) {
                        i = i.reverse()
                    }
                    for (const e of i) {
                        const i = e.getAttribute("listIndent") + this._indentBy;
                        if (i < 0) {
                            t.rename(e, "paragraph")
                        } else {
                            t.setAttribute("listIndent", i, e)
                        }
                    }
                })
            }

            _checkEnabled() {
                const t = Ww(this.editor.model.document.selection.getSelectedBlocks());
                if (!t || !t.is("listItem")) {
                    return false
                }
                if (this._indentBy > 0) {
                    const e = t.getAttribute("listIndent");
                    const i = t.getAttribute("listType");
                    let n = t.previousSibling;
                    while (n && n.is("listItem") && n.getAttribute("listIndent") >= e) {
                        if (n.getAttribute("listIndent") == e) {
                            return n.getAttribute("listType") == i
                        }
                        n = n.previousSibling
                    }
                    return false
                }
                return true
            }
        }

        function rT(t) {
            const e = t.createContainerElement("li");
            e.getFillerOffset = hT;
            return e
        }

        function sT(t, e) {
            const i = e.mapper;
            const n = e.writer;
            const o = t.getAttribute("listType") == "numbered" ? "ol" : "ul";
            const r = rT(n);
            const s = n.createContainerElement(o, null);
            n.insert(n.createPositionAt(s, 0), r);
            i.bindElements(t, r);
            return r
        }

        function aT(t, e, i, n) {
            const o = e.parent;
            const r = i.mapper;
            const s = i.writer;
            let a = r.toViewPosition(n.createPositionBefore(t));
            const c = dT(t.previousSibling, {
                sameIndent: true,
                smallerIndent: true,
                listIndent: t.getAttribute("listIndent")
            });
            const l = t.previousSibling;
            if (c && c.getAttribute("listIndent") == t.getAttribute("listIndent")) {
                const t = r.toViewElement(c);
                a = s.breakContainer(s.createPositionAfter(t))
            } else {
                if (l && l.name == "listItem") {
                    a = r.toViewPosition(n.createPositionAt(l, "end"))
                } else {
                    a = r.toViewPosition(n.createPositionBefore(t))
                }
            }
            a = lT(a);
            s.insert(a, o);
            if (l && l.name == "listItem") {
                const t = r.toViewElement(l);
                const i = s.createRange(s.createPositionAt(t, 0), a);
                const n = i.getWalker({ignoreElementEnd: true});
                for (const t of n) {
                    if (t.item.is("li")) {
                        const i = s.breakContainer(s.createPositionBefore(t.item));
                        const o = t.item.parent;
                        const r = s.createPositionAt(e, "end");
                        cT(s, r.nodeBefore, r.nodeAfter);
                        s.move(s.createRangeOn(o), r);
                        n.position = i
                    }
                }
            } else {
                const i = o.nextSibling;
                if (i && (i.is("ul") || i.is("ol"))) {
                    let n = null;
                    for (const e of i.getChildren()) {
                        const i = r.toModelElement(e);
                        if (i && i.getAttribute("listIndent") > t.getAttribute("listIndent")) {
                            n = e
                        } else {
                            break
                        }
                    }
                    if (n) {
                        s.breakContainer(s.createPositionAfter(n));
                        s.move(s.createRangeOn(n.parent), s.createPositionAt(e, "end"))
                    }
                }
            }
            cT(s, o, o.nextSibling);
            cT(s, o.previousSibling, o)
        }

        function cT(t, e, i) {
            if (!e || !i || e.name != "ul" && e.name != "ol") {
                return null
            }
            if (e.name != i.name || e.getAttribute("class") !== i.getAttribute("class")) {
                return null
            }
            return t.mergeContainers(t.createPositionAfter(e))
        }

        function lT(t) {
            return t.getLastMatchingPosition(t => t.item.is("uiElement"))
        }

        function dT(t, e) {
            const i = !!e.sameIndent;
            const n = !!e.smallerIndent;
            const o = e.listIndent;
            let r = t;
            while (r && r.name == "listItem") {
                const t = r.getAttribute("listIndent");
                if (i && o == t || n && o > t) {
                    return r
                }
                r = r.previousSibling
            }
            return null
        }

        function uT(t, e, i, n) {
            t.ui.componentFactory.add(e, o => {
                const r = t.commands.get(e);
                const s = new hb(o);
                s.set({label: i, icon: n, tooltip: true, isToggleable: true});
                s.bind("isOn", "isEnabled").to(r, "value", "isEnabled");
                s.on("execute", () => {
                    t.execute(e);
                    t.editing.view.focus()
                });
                return s
            })
        }

        function hT() {
            const t = !this.isEmpty && (this.getChild(0).name == "ul" || this.getChild(0).name == "ol");
            if (this.isEmpty || t) {
                return 0
            }
            return Hc.call(this)
        }

        function fT(t) {
            return (e, i, n) => {
                const o = n.consumable;
                if (!o.test(i.item, "insert") || !o.test(i.item, "attribute:listType") || !o.test(i.item, "attribute:listIndent")) {
                    return
                }
                o.consume(i.item, "insert");
                o.consume(i.item, "attribute:listType");
                o.consume(i.item, "attribute:listIndent");
                const r = i.item;
                const s = sT(r, n);
                aT(r, s, n, t)
            }
        }

        function gT(t) {
            return (e, i, n) => {
                const o = n.mapper.toViewPosition(i.position).getLastMatchingPosition(t => !t.item.is("li"));
                const r = o.nodeAfter;
                const s = n.writer;
                s.breakContainer(s.createPositionBefore(r));
                s.breakContainer(s.createPositionAfter(r));
                const a = r.parent;
                const c = a.previousSibling;
                const l = s.createRangeOn(a);
                const d = s.remove(l);
                if (c && c.nextSibling) {
                    cT(s, c, c.nextSibling)
                }
                const u = n.mapper.toModelElement(r);
                ET(u.getAttribute("listIndent") + 1, i.position, l.start, r, n, t);
                for (const t of s.createRangeIn(d).getItems()) {
                    n.mapper.unbindViewElement(t)
                }
                e.stop()
            }
        }

        function mT(t, e, i) {
            if (!i.consumable.consume(e.item, "attribute:listType")) {
                return
            }
            const n = i.mapper.toViewElement(e.item);
            const o = i.writer;
            o.breakContainer(o.createPositionBefore(n));
            o.breakContainer(o.createPositionAfter(n));
            const r = n.parent;
            const s = e.attributeNewValue == "numbered" ? "ol" : "ul";
            o.rename(s, r)
        }

        function pT(t, e, i) {
            const n = i.mapper.toViewElement(e.item);
            const o = n.parent;
            const r = i.writer;
            cT(r, o, o.nextSibling);
            cT(r, o.previousSibling, o);
            for (const t of e.item.getChildren()) {
                i.consumable.consume(t, "insert")
            }
        }

        function bT(t) {
            return (e, i, n) => {
                if (!n.consumable.consume(i.item, "attribute:listIndent")) {
                    return
                }
                const o = n.mapper.toViewElement(i.item);
                const r = n.writer;
                r.breakContainer(r.createPositionBefore(o));
                r.breakContainer(r.createPositionAfter(o));
                const s = o.parent;
                const a = s.previousSibling;
                const c = r.createRangeOn(s);
                r.remove(c);
                if (a && a.nextSibling) {
                    cT(r, a, a.nextSibling)
                }
                ET(i.attributeOldValue + 1, i.range.start, c.start, o, n, t);
                aT(i.item, o, n, t);
                for (const t of i.item.getChildren()) {
                    n.consumable.consume(t, "insert")
                }
            }
        }

        function wT(t, e, i) {
            if (e.item.name != "listItem") {
                let t = i.mapper.toViewPosition(e.range.start);
                const n = i.writer;
                const o = [];
                while (t.parent.name == "ul" || t.parent.name == "ol") {
                    t = n.breakContainer(t);
                    if (t.parent.name != "li") {
                        break
                    }
                    const e = t;
                    const i = n.createPositionAt(t.parent, "end");
                    if (!e.isEqual(i)) {
                        const t = n.remove(n.createRange(e, i));
                        o.push(t)
                    }
                    t = n.createPositionAfter(t.parent)
                }
                if (o.length > 0) {
                    for (let e = 0; e < o.length; e++) {
                        const i = t.nodeBefore;
                        const r = n.insert(t, o[e]);
                        t = r.end;
                        if (e > 0) {
                            const e = cT(n, i, i.nextSibling);
                            if (e && e.parent == i) {
                                t.offset--
                            }
                        }
                    }
                    cT(n, t.nodeBefore, t.nodeAfter)
                }
            }
        }

        function kT(t, e, i) {
            const n = i.mapper.toViewPosition(e.position);
            const o = n.nodeBefore;
            const r = n.nodeAfter;
            cT(i.writer, o, r)
        }

        function _T(t, e, i) {
            if (i.consumable.consume(e.viewItem, {name: true})) {
                const t = i.writer;
                const n = t.createElement("listItem");
                const o = OT(e.viewItem);
                t.setAttribute("listIndent", o, n);
                const r = e.viewItem.parent && e.viewItem.parent.name == "ol" ? "numbered" : "bulleted";
                t.setAttribute("listType", r, n);
                const s = i.splitToAllowedParent(n, e.modelCursor);
                if (!s) {
                    return
                }
                t.insert(n, s.position);
                const a = PT(n, e.viewItem.getChildren(), i);
                e.modelRange = t.createRange(e.modelCursor, a);
                if (s.cursorParent) {
                    e.modelCursor = t.createPositionAt(s.cursorParent, 0)
                } else {
                    e.modelCursor = e.modelRange.end
                }
            }
        }

        function vT(t, e, i) {
            if (i.consumable.test(e.viewItem, {name: true})) {
                const t = Array.from(e.viewItem.getChildren());
                for (const e of t) {
                    const t = !(e.is("li") || RT(e));
                    if (t) {
                        e._remove()
                    }
                }
            }
        }

        function yT(t, e, i) {
            if (i.consumable.test(e.viewItem, {name: true})) {
                if (e.viewItem.childCount === 0) {
                    return
                }
                const t = [...e.viewItem.getChildren()];
                let i = false;
                let n = true;
                for (const e of t) {
                    if (i && !RT(e)) {
                        e._remove()
                    }
                    if (e.is("text")) {
                        if (n) {
                            e._data = e.data.replace(/^\s+/, "")
                        }
                        if (!e.nextSibling || RT(e.nextSibling)) {
                            e._data = e.data.replace(/\s+$/, "")
                        }
                    } else if (RT(e)) {
                        i = true
                    }
                    n = false
                }
            }
        }

        function xT(t) {
            return (e, i) => {
                if (i.isPhantom) {
                    return
                }
                const n = i.modelPosition.nodeBefore;
                if (n && n.is("listItem")) {
                    const e = i.mapper.toViewElement(n);
                    const o = e.getAncestors().find(RT);
                    const r = t.createPositionAt(e, 0).getWalker();
                    for (const t of r) {
                        if (t.type == "elementStart" && t.item.is("li")) {
                            i.viewPosition = t.previousPosition;
                            break
                        } else if (t.type == "elementEnd" && t.item == o) {
                            i.viewPosition = t.nextPosition;
                            break
                        }
                    }
                }
            }
        }

        function CT(t) {
            return (e, i) => {
                const n = i.viewPosition;
                const o = n.parent;
                const r = i.mapper;
                if (o.name == "ul" || o.name == "ol") {
                    if (!n.isAtEnd) {
                        const e = r.toModelElement(n.nodeAfter);
                        i.modelPosition = t.createPositionBefore(e)
                    } else {
                        const e = r.toModelElement(n.nodeBefore);
                        const o = r.getModelLength(n.nodeBefore);
                        i.modelPosition = t.createPositionBefore(e).getShiftedBy(o)
                    }
                    e.stop()
                } else if (o.name == "li" && n.nodeBefore && (n.nodeBefore.name == "ul" || n.nodeBefore.name == "ol")) {
                    const s = r.toModelElement(o);
                    let a = 1;
                    let c = n.nodeBefore;
                    while (c && RT(c)) {
                        a += r.getModelLength(c);
                        c = c.previousSibling
                    }
                    i.modelPosition = t.createPositionBefore(s).getShiftedBy(a);
                    e.stop()
                }
            }
        }

        function AT(t, e) {
            const i = t.document.differ.getChanges();
            const n = new Map;
            let o = false;
            for (const n of i) {
                if (n.type == "insert" && n.name == "listItem") {
                    r(n.position)
                } else if (n.type == "insert" && n.name != "listItem") {
                    if (n.name != "$text") {
                        const i = n.position.nodeAfter;
                        if (i.hasAttribute("listIndent")) {
                            e.removeAttribute("listIndent", i);
                            o = true
                        }
                        if (i.hasAttribute("listType")) {
                            e.removeAttribute("listType", i);
                            o = true
                        }
                        for (const e of Array.from(t.createRangeIn(i)).filter(t => t.item.is("listItem"))) {
                            r(e.previousPosition)
                        }
                    }
                    const i = n.position.getShiftedBy(n.length);
                    r(i)
                } else if (n.type == "remove" && n.name == "listItem") {
                    r(n.position)
                } else if (n.type == "attribute" && n.attributeKey == "listIndent") {
                    r(n.range.start)
                } else if (n.type == "attribute" && n.attributeKey == "listType") {
                    r(n.range.start)
                }
            }
            for (const t of n.values()) {
                s(t);
                a(t)
            }
            return o;

            function r(t) {
                const e = t.nodeBefore;
                if (!e || !e.is("listItem")) {
                    const e = t.nodeAfter;
                    if (e && e.is("listItem")) {
                        n.set(e, e)
                    }
                } else {
                    let i = e;
                    if (n.has(i)) {
                        return
                    }
                    while (i.previousSibling && i.previousSibling.is("listItem")) {
                        i = i.previousSibling;
                        if (n.has(i)) {
                            return
                        }
                    }
                    n.set(t.nodeBefore, i)
                }
            }

            function s(t) {
                let i = 0;
                let n = null;
                while (t && t.is("listItem")) {
                    const r = t.getAttribute("listIndent");
                    if (r > i) {
                        let s;
                        if (n === null) {
                            n = r - i;
                            s = i
                        } else {
                            if (n > r) {
                                n = r
                            }
                            s = r - n
                        }
                        e.setAttribute("listIndent", s, t);
                        o = true
                    } else {
                        n = null;
                        i = t.getAttribute("listIndent") + 1
                    }
                    t = t.nextSibling
                }
            }

            function a(t) {
                let i = [];
                let n = null;
                while (t && t.is("listItem")) {
                    const r = t.getAttribute("listIndent");
                    if (n && n.getAttribute("listIndent") > r) {
                        i = i.slice(0, r + 1)
                    }
                    if (r != 0) {
                        if (i[r]) {
                            const n = i[r];
                            if (t.getAttribute("listType") != n) {
                                e.setAttribute("listType", n, t);
                                o = true
                            }
                        } else {
                            i[r] = t.getAttribute("listType")
                        }
                    }
                    n = t;
                    t = t.nextSibling
                }
            }
        }

        function TT(t, [e, i]) {
            let n = e.is("documentFragment") ? e.getChild(0) : e;
            let o;
            if (!i) {
                o = this.document.selection
            } else {
                o = this.createSelection(i)
            }
            if (n && n.is("listItem")) {
                const t = o.getFirstPosition();
                let e = null;
                if (t.parent.is("listItem")) {
                    e = t.parent
                } else if (t.nodeBefore && t.nodeBefore.is("listItem")) {
                    e = t.nodeBefore
                }
                if (e) {
                    const t = e.getAttribute("listIndent");
                    if (t > 0) {
                        while (n && n.is("listItem")) {
                            n._setAttribute("listIndent", n.getAttribute("listIndent") + t);
                            n = n.nextSibling
                        }
                    }
                }
            }
        }

        function PT(t, e, i) {
            const {writer: n, schema: o} = i;
            let r = n.createPositionAfter(t);
            for (const s of e) {
                if (s.name == "ul" || s.name == "ol") {
                    r = i.convertItem(s, r).modelCursor
                } else {
                    const e = i.convertItem(s, n.createPositionAt(t, "end"));
                    const a = e.modelRange.start.nodeAfter;
                    const c = a && a.is("element") && !o.checkChild(t, a.name);
                    if (c) {
                        if (e.modelCursor.parent.is("listItem")) {
                            t = e.modelCursor.parent
                        } else {
                            t = ST(e.modelCursor)
                        }
                        r = n.createPositionAfter(t)
                    }
                }
            }
            return r
        }

        function ST(t) {
            const e = new Wh({startPosition: t});
            let i;
            do {
                i = e.next()
            } while (!i.value.item.is("listItem"));
            return i.value.item
        }

        function ET(t, e, i, n, o, r) {
            const s = dT(e.nodeBefore, {sameIndent: true, smallerIndent: true, listIndent: t, foo: "b"});
            const a = o.mapper;
            const c = o.writer;
            const l = s ? s.getAttribute("listIndent") : null;
            let d;
            if (!s) {
                d = i
            } else if (l == t) {
                const t = a.toViewElement(s).parent;
                d = c.createPositionAfter(t)
            } else {
                const t = r.createPositionAt(s, "end");
                d = a.toViewPosition(t)
            }
            d = lT(d);
            for (const t of [...n.getChildren()]) {
                if (RT(t)) {
                    d = c.move(c.createRangeOn(t), d).end;
                    cT(c, t, t.nextSibling);
                    cT(c, t.previousSibling, t)
                }
            }
        }

        function RT(t) {
            return t.is("ol") || t.is("ul")
        }

        function OT(t) {
            let e = 0;
            let i = t.parent;
            while (i) {
                if (i.is("li")) {
                    e++
                } else {
                    const t = i.previousSibling;
                    if (t && t.is("li")) {
                        e++
                    }
                }
                i = i.parent
            }
            return e
        }

        class IT extends mp {
            static get pluginName() {
                return "ListEditing"
            }

            static get requires() {
                return [V_]
            }

            init() {
                const t = this.editor;
                t.model.schema.register("listItem", {
                    inheritAllFrom: "$block",
                    allowAttributes: ["listType", "listIndent"]
                });
                const e = t.data;
                const i = t.editing;
                t.model.document.registerPostFixer(e => AT(t.model, e));
                i.mapper.registerViewToModelLength("li", VT);
                e.mapper.registerViewToModelLength("li", VT);
                i.mapper.on("modelToViewPosition", xT(i.view));
                i.mapper.on("viewToModelPosition", CT(t.model));
                e.mapper.on("modelToViewPosition", xT(i.view));
                t.conversion.for("editingDowncast").add(e => {
                    e.on("insert", wT, {priority: "high"});
                    e.on("insert:listItem", fT(t.model));
                    e.on("attribute:listType:listItem", mT, {priority: "high"});
                    e.on("attribute:listType:listItem", pT, {priority: "low"});
                    e.on("attribute:listIndent:listItem", bT(t.model));
                    e.on("remove:listItem", gT(t.model));
                    e.on("remove", kT, {priority: "low"})
                });
                t.conversion.for("dataDowncast").add(e => {
                    e.on("insert", wT, {priority: "high"});
                    e.on("insert:listItem", fT(t.model))
                });
                t.conversion.for("upcast").add(t => {
                    t.on("element:ul", vT, {priority: "high"});
                    t.on("element:ol", vT, {priority: "high"});
                    t.on("element:li", yT, {priority: "high"});
                    t.on("element:li", _T)
                });
                t.model.on("insertContent", TT, {priority: "high"});
                t.commands.add("numberedList", new eT(t, "numbered"));
                t.commands.add("bulletedList", new eT(t, "bulleted"));
                t.commands.add("indentList", new oT(t, "forward"));
                t.commands.add("outdentList", new oT(t, "backward"));
                const n = i.view.document;
                this.listenTo(n, "enter", (t, e) => {
                    const i = this.editor.model.document;
                    const n = i.selection.getLastPosition().parent;
                    if (i.selection.isCollapsed && n.name == "listItem" && n.isEmpty) {
                        this.editor.execute("outdentList");
                        e.preventDefault();
                        t.stop()
                    }
                });
                this.listenTo(n, "delete", (t, e) => {
                    if (e.direction !== "backward") {
                        return
                    }
                    const i = this.editor.model.document.selection;
                    if (!i.isCollapsed) {
                        return
                    }
                    const n = i.getFirstPosition();
                    if (!n.isAtStart) {
                        return
                    }
                    const o = n.parent;
                    if (o.name !== "listItem") {
                        return
                    }
                    const r = o.previousSibling && o.previousSibling.name === "listItem";
                    if (r) {
                        return
                    }
                    this.editor.execute("outdentList");
                    e.preventDefault();
                    t.stop()
                }, {priority: "high"});
                const o = t => (e, i) => {
                    const n = this.editor.commands.get(t);
                    if (n.isEnabled) {
                        this.editor.execute(t);
                        i()
                    }
                };
                t.keystrokes.set("Tab", o("indentList"));
                t.keystrokes.set("Shift+Tab", o("outdentList"))
            }

            afterInit() {
                const t = this.editor.commands;
                const e = t.get("indent");
                const i = t.get("outdent");
                if (e) {
                    e.registerChildCommand(t.get("indentList"))
                }
                if (i) {
                    i.registerChildCommand(t.get("outdentList"))
                }
            }
        }

        function VT(t) {
            let e = 1;
            for (const i of t.getChildren()) {
                if (i.name == "ul" || i.name == "ol") {
                    for (const t of i.getChildren()) {
                        e += VT(t)
                    }
                }
            }
            return e
        }

        var NT = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM3.5 3v5H2V3.7H1v-1h2.5V3zM.343 17.857l2.59-3.257H2.92a.6.6 0 1 0-1.04 0H.302a2 2 0 1 1 3.995 0h-.001c-.048.405-.16.734-.333.988-.175.254-.59.692-1.244 1.312H4.3v1h-4l.043-.043zM7 14.75a.75.75 0 0 1 .75-.75h9.5a.75.75 0 1 1 0 1.5h-9.5a.75.75 0 0 1-.75-.75z"/></svg>';
        var MT = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0C1 4.784 1.777 4 2.75 4c.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75C1.784 7.5 1 6.723 1 5.75zm6 9c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0c0-.966.777-1.75 1.75-1.75.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75-.966 0-1.75-.777-1.75-1.75z"/></svg>';

        class BT extends mp {
            init() {
                const t = this.editor.t;
                uT(this.editor, "numberedList", t("lc"), NT);
                uT(this.editor, "bulletedList", t("ld"), MT)
            }
        }

        class zT extends mp {
            static get requires() {
                return [IT, BT]
            }

            static get pluginName() {
                return "List"
            }
        }

        var LT = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M8.69 14.915c.053.052.173.083.36.093a.366.366 0 0 1 .345.485l-.003.01a.738.738 0 0 1-.697.497h-2.67a.374.374 0 0 1-.353-.496l.013-.038a.681.681 0 0 1 .644-.458c.197-.012.325-.043.386-.093a.28.28 0 0 0 .072-.11L9.592 4.5H6.269c-.359-.017-.609.013-.75.09-.142.078-.289.265-.442.563-.192.29-.516.464-.864.464H4.17a.43.43 0 0 1-.407-.569L4.46 3h13.08l-.62 2.043a.81.81 0 0 1-.775.574h-.114a.486.486 0 0 1-.486-.486c.001-.284-.054-.464-.167-.54-.112-.076-.367-.106-.766-.091h-3.28l-2.68 10.257c-.006.074.007.127.038.158zM3 17h8a.5.5 0 1 1 0 1H3a.5.5 0 1 1 0-1zm11.299 1.17a.75.75 0 1 1-1.06-1.06l1.414-1.415-1.415-1.414a.75.75 0 0 1 1.06-1.06l1.415 1.414 1.414-1.415a.75.75 0 1 1 1.06 1.06l-1.413 1.415 1.414 1.415a.75.75 0 0 1-1.06 1.06l-1.415-1.414-1.414 1.414z"/></svg>';
        const FT = "removeFormat";

        class DT extends mp {
            static get pluginName() {
                return "RemoveFormatUI"
            }

            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add(FT, i => {
                    const n = t.commands.get(FT);
                    const o = new hb(i);
                    o.set({label: e("la"), icon: LT, tooltip: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute(FT);
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class jT extends jw {
            refresh() {
                const t = this.editor.model;
                this.isEnabled = !!Ww(this._getFormattingItems(t.document.selection, t.schema))
            }

            execute() {
                const t = this.editor.model;
                const e = t.schema;
                t.change(i => {
                    for (const n of this._getFormattingItems(t.document.selection, e)) {
                        if (n.is("selection")) {
                            for (const t of this._getFormattingAttributes(n, e)) {
                                i.removeSelectionAttribute(t)
                            }
                        } else {
                            const t = i.createRangeOn(n);
                            for (const o of this._getFormattingAttributes(n, e)) {
                                i.removeAttribute(o, t)
                            }
                        }
                    }
                })
            }

            * _getFormattingItems(t, e) {
                const i = t => !!Ww(this._getFormattingAttributes(t, e));
                for (const e of t.getRanges()) {
                    for (const t of e.getItems()) {
                        if (i(t)) {
                            yield t
                        }
                    }
                }
                if (i(t)) {
                    yield t
                }
            }

            * _getFormattingAttributes(t, e) {
                for (const [i] of t.getAttributes()) {
                    const t = e.getAttributeProperties(i);
                    if (t && t.isFormatting) {
                        yield i
                    }
                }
            }
        }

        class HT extends mp {
            static get pluginName() {
                return "RemoveFormatEditing"
            }

            init() {
                const t = this.editor;
                t.commands.add("removeFormat", new jT(t))
            }
        }

        class WT extends mp {
            static get requires() {
                return [HT, DT]
            }

            static get pluginName() {
                return "RemoveFormat"
            }
        }

        class qT {
            constructor(t, e = 20) {
                this.model = t;
                this.size = 0;
                this.limit = e;
                this.isLocked = false;
                this._changeCallback = (t, e) => {
                    if (e.type != "transparent" && e !== this._batch) {
                        this._reset(true)
                    }
                };
                this._selectionChangeCallback = () => {
                    this._reset()
                };
                this.model.document.on("change", this._changeCallback);
                this.model.document.selection.on("change:range", this._selectionChangeCallback);
                this.model.document.selection.on("change:attribute", this._selectionChangeCallback)
            }

            get batch() {
                if (!this._batch) {
                    this._batch = this.model.createBatch()
                }
                return this._batch
            }

            input(t) {
                this.size += t;
                if (this.size >= this.limit) {
                    this._reset(true)
                }
            }

            lock() {
                this.isLocked = true
            }

            unlock() {
                this.isLocked = false
            }

            destroy() {
                this.model.document.off("change", this._changeCallback);
                this.model.document.selection.off("change:range", this._selectionChangeCallback);
                this.model.document.selection.off("change:attribute", this._selectionChangeCallback)
            }

            _reset(t) {
                if (!this.isLocked || t) {
                    this._batch = null;
                    this.size = 0
                }
            }
        }

        class UT extends jw {
            constructor(t, e) {
                super(t);
                this._buffer = new qT(t.model, e);
                this._batches = new WeakSet
            }

            get buffer() {
                return this._buffer
            }

            destroy() {
                super.destroy();
                this._buffer.destroy()
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.document;
                const n = t.text || "";
                const o = n.length;
                const r = t.range ? e.createSelection(t.range) : i.selection;
                const s = t.resultRange;
                e.enqueueChange(this._buffer.batch, t => {
                    this._buffer.lock();
                    e.deleteContent(r);
                    if (n) {
                        e.insertContent(t.createText(n, i.selection.getAttributes()), r)
                    }
                    if (s) {
                        t.setSelection(s)
                    } else if (!r.is("documentSelection")) {
                        t.setSelection(r)
                    }
                    this._buffer.unlock();
                    this._buffer.input(o);
                    this._batches.add(this._buffer.batch)
                })
            }
        }

        function $T(t) {
            let e = null;
            const i = t.model;
            const n = t.editing.view;
            const o = t.commands.get("input");
            if (Al.isAndroid) {
                n.document.on("beforeinput", (t, e) => r(e), {priority: "lowest"})
            } else {
                n.document.on("keydown", (t, e) => r(e), {priority: "lowest"})
            }
            n.document.on("compositionstart", s, {priority: "lowest"});
            n.document.on("compositionend", () => {
                e = i.createSelection(i.document.selection)
            }, {priority: "lowest"});

            function r(t) {
                const r = i.document;
                const s = n.document.isComposing;
                const c = e && e.isEqual(r.selection);
                e = null;
                if (!o.isEnabled) {
                    return
                }
                if (KT(t) || r.selection.isCollapsed) {
                    return
                }
                if (s && t.keyCode === 229) {
                    return
                }
                if (!s && t.keyCode === 229 && c) {
                    return
                }
                a()
            }

            function s() {
                const t = i.document;
                const e = t.selection.rangeCount === 1 ? t.selection.getFirstRange().isFlat : true;
                if (t.selection.isCollapsed || e) {
                    return
                }
                a()
            }

            function a() {
                const t = o.buffer;
                t.lock();
                i.enqueueChange(t.batch, () => {
                    i.deleteContent(i.document.selection)
                });
                t.unlock()
            }
        }

        const GT = [Ml("arrowUp"), Ml("arrowRight"), Ml("arrowDown"), Ml("arrowLeft"), 9, 16, 17, 18, 19, 20, 27, 33, 34, 35, 36, 45, 91, 93, 144, 145, 173, 174, 175, 176, 177, 178, 179, 255];
        for (let t = 112; t <= 135; t++) {
            GT.push(t)
        }

        function KT(t) {
            if (t.ctrlKey) {
                return true
            }
            return GT.includes(t.keyCode)
        }

        function JT(t, e) {
            const i = [];
            let n = 0;
            let o;
            t.forEach(t => {
                if (t == "equal") {
                    r();
                    n++
                } else if (t == "insert") {
                    if (s("insert")) {
                        o.values.push(e[n])
                    } else {
                        r();
                        o = {type: "insert", index: n, values: [e[n]]}
                    }
                    n++
                } else {
                    if (s("delete")) {
                        o.howMany++
                    } else {
                        r();
                        o = {type: "delete", index: n, howMany: 1}
                    }
                }
            });
            r();
            return i;

            function r() {
                if (o) {
                    i.push(o);
                    o = null
                }
            }

            function s(t) {
                return o && o.type == t
            }
        }

        function YT(t) {
            if (t.length == 0) {
                return false
            }
            for (const e of t) {
                if (e.type === "children" && !QT(e)) {
                    return true
                }
            }
            return false
        }

        function QT(t) {
            if (t.newChildren.length - t.oldChildren.length != 1) {
                return
            }
            const e = _d(t.oldChildren, t.newChildren, XT);
            const i = JT(e, t.newChildren);
            if (i.length > 1) {
                return
            }
            const n = i[0];
            if (!(!!n.values[0] && n.values[0].is("text"))) {
                return
            }
            return n
        }

        function XT(t, e) {
            if (!!t && t.is("text") && !!e && e.is("text")) {
                return t.data === e.data
            } else {
                return t === e
            }
        }

        function ZT(t) {
            t.editing.view.document.on("mutations", (e, i, n) => {
                new tP(t).handle(i, n)
            })
        }

        class tP {
            constructor(t) {
                this.editor = t;
                this.editing = this.editor.editing
            }

            handle(t, e) {
                if (YT(t)) {
                    this._handleContainerChildrenMutations(t, e)
                } else {
                    for (const i of t) {
                        this._handleTextMutation(i, e);
                        this._handleTextNodeInsertion(i)
                    }
                }
            }

            _handleContainerChildrenMutations(t, e) {
                const i = eP(t);
                if (!i) {
                    return
                }
                const n = this.editor.editing.view.domConverter;
                const o = n.mapViewToDom(i);
                const r = new zd(this.editor.editing.view.document);
                const s = this.editor.data.toModel(r.domToView(o)).getChild(0);
                const a = this.editor.editing.mapper.toModelElement(i);
                if (!a) {
                    return
                }
                const c = Array.from(s.getChildren());
                const l = Array.from(a.getChildren());
                const d = c[c.length - 1];
                const u = l[l.length - 1];
                if (d && d.is("softBreak") && u && !u.is("softBreak")) {
                    c.pop()
                }
                const h = this.editor.model.schema;
                if (!iP(c, h) || !iP(l, h)) {
                    return
                }
                const f = c.map(t => t.is("text") ? t.data : "@").join("").replace(/\u00A0/g, " ");
                const g = l.map(t => t.is("text") ? t.data : "@").join("").replace(/\u00A0/g, " ");
                if (g === f) {
                    return
                }
                const m = _d(g, f);
                const {firstChangeAt: p, insertions: b, deletions: w} = nP(m);
                let k = null;
                if (e) {
                    k = this.editing.mapper.toModelRange(e.getFirstRange())
                }
                const _ = f.substr(p, b);
                const v = this.editor.model.createRange(this.editor.model.createPositionAt(a, p), this.editor.model.createPositionAt(a, p + w));
                this.editor.execute("input", {text: _, range: v, resultRange: k})
            }

            _handleTextMutation(t, e) {
                if (t.type != "text") {
                    return
                }
                const i = t.newText.replace(/\u00A0/g, " ");
                const n = t.oldText.replace(/\u00A0/g, " ");
                if (n === i) {
                    return
                }
                const o = _d(n, i);
                const {firstChangeAt: r, insertions: s, deletions: a} = nP(o);
                let c = null;
                if (e) {
                    c = this.editing.mapper.toModelRange(e.getFirstRange())
                }
                const l = this.editing.view.createPositionAt(t.node, r);
                const d = this.editing.mapper.toModelPosition(l);
                const u = this.editor.model.createRange(d, d.getShiftedBy(a));
                const h = i.substr(r, s);
                this.editor.execute("input", {text: h, range: u, resultRange: c})
            }

            _handleTextNodeInsertion(t) {
                if (t.type != "children") {
                    return
                }
                const e = QT(t);
                const i = this.editing.view.createPositionAt(t.node, e.index);
                const n = this.editing.mapper.toModelPosition(i);
                const o = e.values[0].data;
                this.editor.execute("input", {text: o.replace(/\u00A0/g, " "), range: this.editor.model.createRange(n)})
            }
        }

        function eP(t) {
            const e = t.map(t => t.node).reduce((t, e) => t.getCommonAncestor(e, {includeSelf: true}));
            if (!e) {
                return
            }
            return e.getAncestors({
                includeSelf: true,
                parentFirst: true
            }).find(t => t.is("containerElement") || t.is("rootElement"))
        }

        function iP(t, e) {
            return t.every(t => e.isInline(t))
        }

        function nP(t) {
            let e = null;
            let i = null;
            for (let n = 0; n < t.length; n++) {
                const o = t[n];
                if (o != "equal") {
                    e = e === null ? n : e;
                    i = n
                }
            }
            let n = 0;
            let o = 0;
            for (let r = e; r <= i; r++) {
                if (t[r] != "insert") {
                    n++
                }
                if (t[r] != "delete") {
                    o++
                }
            }
            return {insertions: o, deletions: n, firstChangeAt: e}
        }

        class oP extends mp {
            static get pluginName() {
                return "Input"
            }

            init() {
                const t = this.editor;
                const e = new UT(t, t.config.get("typing.undoStep") || 20);
                t.commands.add("input", e);
                $T(t);
                ZT(t)
            }

            isInput(t) {
                const e = this.editor.commands.get("input");
                return e._batches.has(t)
            }
        }

        class rP extends jw {
            constructor(t, e) {
                super(t);
                this.direction = e;
                this._buffer = new qT(t.model, t.config.get("typing.undoStep"))
            }

            get buffer() {
                return this._buffer
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.document;
                e.enqueueChange(this._buffer.batch, n => {
                    this._buffer.lock();
                    const o = n.createSelection(t.selection || i.selection);
                    const r = o.isCollapsed;
                    if (o.isCollapsed) {
                        e.modifySelection(o, {direction: this.direction, unit: t.unit})
                    }
                    if (this._shouldEntireContentBeReplacedWithParagraph(t.sequence || 1)) {
                        this._replaceEntireContentWithParagraph(n);
                        return
                    }
                    if (o.isCollapsed) {
                        return
                    }
                    let s = 0;
                    o.getFirstRange().getMinimalFlatRanges().forEach(t => {
                        s += fl(t.getWalker({singleCharacters: true, ignoreElementEnd: true, shallow: true}))
                    });
                    e.deleteContent(o, {doNotResetEntireContent: r, direction: this.direction});
                    this._buffer.input(s);
                    n.setSelection(o);
                    this._buffer.unlock()
                })
            }

            _shouldEntireContentBeReplacedWithParagraph(t) {
                if (t > 1) {
                    return false
                }
                const e = this.editor.model;
                const i = e.document;
                const n = i.selection;
                const o = e.schema.getLimitElement(n);
                const r = n.isCollapsed && n.containsEntireContent(o);
                if (!r) {
                    return false
                }
                if (!e.schema.checkChild(o, "paragraph")) {
                    return false
                }
                const s = o.getChild(0);
                if (s && s.name === "paragraph") {
                    return false
                }
                return true
            }

            _replaceEntireContentWithParagraph(t) {
                const e = this.editor.model;
                const i = e.document;
                const n = i.selection;
                const o = e.schema.getLimitElement(n);
                const r = t.createElement("paragraph");
                t.remove(t.createRangeIn(o));
                t.insert(r, o);
                t.setSelection(r, 0)
            }
        }

        class sP extends Gd {
            constructor(t) {
                super(t);
                const e = t.document;
                let i = 0;
                e.on("keyup", (t, e) => {
                    if (e.keyCode == Nl.delete || e.keyCode == Nl.backspace) {
                        i = 0
                    }
                });
                e.on("keydown", (t, e) => {
                    const o = {};
                    if (e.keyCode == Nl.delete) {
                        o.direction = "forward";
                        o.unit = "character"
                    } else if (e.keyCode == Nl.backspace) {
                        o.direction = "backward";
                        o.unit = "codePoint"
                    } else {
                        return
                    }
                    const r = Al.isMac ? e.altKey : e.ctrlKey;
                    o.unit = r ? "word" : o.unit;
                    o.sequence = ++i;
                    n(t, e.domEvent, o)
                });
                if (Al.isAndroid) {
                    e.on("beforeinput", (e, i) => {
                        if (i.domEvent.inputType != "deleteContentBackward") {
                            return
                        }
                        const o = {unit: "codepoint", direction: "backward", sequence: 1};
                        const r = i.domTarget.ownerDocument.defaultView.getSelection();
                        if (r.anchorNode == r.focusNode && r.anchorOffset + 1 != r.focusOffset) {
                            o.selectionToRemove = t.domConverter.domSelectionToView(r)
                        }
                        n(e, i.domEvent, o)
                    })
                }

                function n(t, i, n) {
                    let o;
                    e.once("delete", t => o = t, {priority: Number.POSITIVE_INFINITY});
                    e.fire("delete", new Ku(e, i, n));
                    if (o && o.stop.called) {
                        t.stop()
                    }
                }
            }

            observe() {
            }
        }

        class aP extends mp {
            static get pluginName() {
                return "Delete"
            }

            init() {
                const t = this.editor;
                const e = t.editing.view;
                const i = e.document;
                e.addObserver(sP);
                t.commands.add("forwardDelete", new rP(t, "forward"));
                t.commands.add("delete", new rP(t, "backward"));
                this.listenTo(i, "delete", (i, n) => {
                    const o = {unit: n.unit, sequence: n.sequence};
                    if (n.selectionToRemove) {
                        const e = t.model.createSelection();
                        const i = [];
                        for (const e of n.selectionToRemove.getRanges()) {
                            i.push(t.editing.mapper.toModelRange(e))
                        }
                        e.setTo(i);
                        o.selection = e
                    }
                    t.execute(n.direction == "forward" ? "forwardDelete" : "delete", o);
                    n.preventDefault();
                    e.scrollToTheSelection()
                });
                if (Al.isAndroid) {
                    let t = null;
                    this.listenTo(i, "delete", (e, i) => {
                        const n = i.domTarget.ownerDocument.defaultView.getSelection();
                        t = {
                            anchorNode: n.anchorNode,
                            anchorOffset: n.anchorOffset,
                            focusNode: n.focusNode,
                            focusOffset: n.focusOffset
                        }
                    }, {priority: "lowest"});
                    this.listenTo(i, "keyup", (e, i) => {
                        if (t) {
                            const e = i.domTarget.ownerDocument.defaultView.getSelection();
                            e.collapse(t.anchorNode, t.anchorOffset);
                            e.extend(t.focusNode, t.focusOffset);
                            t = null
                        }
                    })
                }
            }
        }

        class cP extends mp {
            static get requires() {
                return [oP, aP]
            }

            static get pluginName() {
                return "Typing"
            }
        }

        class lP extends Gp {
            constructor(t, e) {
                super(t);
                const i = t.t;
                this.labelView = new Mk(t);
                this.labelView.text = i("b");
                this.groupDropdownView = this._createGroupDropdown(e);
                this.groupDropdownView.panelPosition = t.uiLanguageDirection === "rtl" ? "se" : "sw";
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-special-characters-navigation"]},
                    children: [this.labelView, this.groupDropdownView]
                })
            }

            get currentGroupName() {
                return this.groupDropdownView.value
            }

            _createGroupDropdown(t) {
                const e = this.locale;
                const i = e.t;
                const n = Wb(e);
                const o = this._getCharacterGroupListItemDefinitions(n, t);
                n.set("value", o.first.model.label);
                n.buttonView.bind("label").to(n, "value");
                n.buttonView.set({isOn: false, withText: true, tooltip: i("le")});
                n.on("execute", t => {
                    n.value = t.source.label
                });
                n.delegate("execute").to(this);
                Ub(n, o);
                return n
            }

            _getCharacterGroupListItemDefinitions(t, e) {
                const i = new ys;
                for (const n of e) {
                    const e = {type: "button", model: new e_({label: n, withText: true})};
                    e.model.bind("isOn").to(t, "value", t => t === e.model.label);
                    i.add(e)
                }
                return i
            }
        }

        var dP = i(86);

        class uP extends Gp {
            constructor(t) {
                super(t);
                this.tiles = this.createCollection();
                this.setTemplate({
                    tag: "div",
                    children: [{
                        tag: "div",
                        attributes: {class: ["ck", "ck-character-grid__tiles"]},
                        children: this.tiles
                    }],
                    attributes: {class: ["ck", "ck-character-grid"]}
                })
            }

            createTile(t, e) {
                const i = new hb(this.locale);
                i.set({label: t, withText: true, class: "ck-character-grid__tile"});
                i.extendTemplate({attributes: {title: e}, on: {mouseover: i.bindTemplate.to("mouseover")}});
                i.on("mouseover", () => {
                    this.fire("tileHover", {name: e, character: t})
                });
                i.on("execute", () => {
                    this.fire("execute", {name: e, character: t})
                });
                return i
            }
        }

        var hP = i(88);

        class fP extends Gp {
            constructor(t) {
                super(t);
                const e = this.bindTemplate;
                this.set("character", null);
                this.set("name", null);
                this.bind("code").to(this, "character", gP);
                this.setTemplate({
                    tag: "div",
                    children: [{
                        tag: "span",
                        attributes: {class: ["ck-character-info__name"]},
                        children: [{text: e.to("name", t => t ? t : "​")}]
                    }, {
                        tag: "span",
                        attributes: {class: ["ck-character-info__code"]},
                        children: [{text: e.to("code")}]
                    }],
                    attributes: {class: ["ck", "ck-character-info"]}
                })
            }
        }

        function gP(t) {
            if (t === null) {
                return ""
            }
            const e = t.codePointAt(0).toString(16);
            return "U+" + ("0000" + e).slice(-4)
        }

        var mP = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2.5a7.47 7.47 0 0 1 4.231 1.31 7.268 7.268 0 0 1 2.703 3.454 7.128 7.128 0 0 1 .199 4.353c-.39 1.436-1.475 2.72-2.633 3.677h2.013c0-.226.092-.443.254-.603a.876.876 0 0 1 1.229 0c.163.16.254.377.254.603v.853c0 .209-.078.41-.22.567a.873.873 0 0 1-.547.28l-.101.006h-4.695a.517.517 0 0 1-.516-.518v-1.265c0-.21.128-.398.317-.489a5.601 5.601 0 0 0 2.492-2.371 5.459 5.459 0 0 0 .552-3.693 5.53 5.53 0 0 0-1.955-3.2A5.71 5.71 0 0 0 10 4.206 5.708 5.708 0 0 0 6.419 5.46 5.527 5.527 0 0 0 4.46 8.663a5.457 5.457 0 0 0 .554 3.695 5.6 5.6 0 0 0 2.497 2.37.55.55 0 0 1 .317.49v1.264c0 .286-.23.518-.516.518H2.618a.877.877 0 0 1-.614-.25.845.845 0 0 1-.254-.603v-.853c0-.226.091-.443.254-.603a.876.876 0 0 1 1.228 0c.163.16.255.377.255.603h1.925c-1.158-.958-2.155-2.241-2.545-3.678a7.128 7.128 0 0 1 .199-4.352 7.268 7.268 0 0 1 2.703-3.455A7.475 7.475 0 0 1 10 2.5z"/></svg>';
        var pP = i(90);
        const bP = "Все";

        class wP extends mp {
            static get requires() {
                return [cP]
            }

            static get pluginName() {
                return "SpecialCharacters"
            }

            constructor(t) {
                super(t);
                this._characters = new Map;
                this._groups = new Map
            }

            init() {
                const t = this.editor;
                const e = t.t;
                const i = t.commands.get("input");
                t.ui.componentFactory.add("specialCharacters", n => {
                    const o = Wb(n);
                    let r;
                    o.buttonView.set({label: e("b"), icon: mP, tooltip: true});
                    o.bind("isEnabled").to(i);
                    o.on("execute", (e, i) => {
                        t.execute("input", {text: i.character});
                        t.editing.view.focus()
                    });
                    o.on("change:isOpen", () => {
                        if (!r) {
                            r = this._createDropdownPanelContent(n, o);
                            o.panelView.children.add(r.navigationView);
                            o.panelView.children.add(r.gridView);
                            o.panelView.children.add(r.infoView)
                        }
                        r.infoView.set({character: null, name: null})
                    });
                    return o
                })
            }

            addItems(t, e) {
                if (t === bP) {
                    throw new ss["b"](`special-character-invalid-group-name: The name "${bP}" is reserved and cannot be used.`)
                }
                const i = this._getGroup(t);
                for (const t of e) {
                    i.add(t.title);
                    this._characters.set(t.title, t.character)
                }
            }

            getGroups() {
                return this._groups.keys()
            }

            getCharactersForGroup(t) {
                if (t === bP) {
                    return new Set(this._characters.keys())
                }
                return this._groups.get(t)
            }

            getCharacter(t) {
                return this._characters.get(t)
            }

            _getGroup(t) {
                if (!this._groups.has(t)) {
                    this._groups.set(t, new Set)
                }
                return this._groups.get(t)
            }

            _updateGrid(t, e) {
                e.tiles.clear();
                const i = this.getCharactersForGroup(t);
                for (const t of i) {
                    const i = this.getCharacter(t);
                    e.tiles.add(e.createTile(i, t))
                }
            }

            _createDropdownPanelContent(t, e) {
                const i = [...this.getGroups()];
                i.unshift(bP);
                const n = new lP(t, i);
                const o = new uP(t);
                const r = new fP(t);
                o.delegate("execute").to(e);
                o.on("tileHover", (t, e) => {
                    r.set(e)
                });
                n.on("execute", () => {
                    this._updateGrid(n.currentGroupName, o)
                });
                this._updateGrid(n.currentGroupName, o);
                return {navigationView: n, gridView: o, infoView: r}
            }
        }

        class kP extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.plugins.get("SpecialCharacters").addItems("Валюта", [{character: "$", title: e("u")}, {
                    character: "€",
                    title: e("v")
                }, {character: "¥", title: e("w")}, {character: "£", title: e("x")}, {
                    character: "¢",
                    title: e("y")
                }, {character: "₠", title: e("z")}, {character: "₡", title: e("aa")}, {
                    character: "₢",
                    title: e("ab")
                }, {character: "₣", title: e("ac")}, {character: "₤", title: e("ad")}, {
                    character: "¤",
                    title: e("ae")
                }, {character: "₿", title: e("af")}, {character: "₥", title: e("ag")}, {
                    character: "₦",
                    title: e("ah")
                }, {character: "₧", title: e("ai")}, {character: "₨", title: e("aj")}, {
                    character: "₩",
                    title: e("ak")
                }, {character: "₪", title: e("al")}, {character: "₫", title: e("am")}, {
                    character: "₭",
                    title: e("an")
                }, {character: "₮", title: e("ao")}, {character: "₯", title: e("ap")}, {
                    character: "₰",
                    title: e("aq")
                }, {character: "₱", title: e("ar")}, {character: "₲", title: e("as")}, {
                    character: "₳",
                    title: e("at")
                }, {character: "₴", title: e("au")}, {character: "₵", title: e("av")}, {
                    character: "₶",
                    title: e("aw")
                }, {character: "₷", title: e("ax")}, {character: "₸", title: e("ay")}, {
                    character: "₹",
                    title: e("az")
                }, {character: "₺", title: e("ba")}, {character: "₻", title: e("bb")}, {
                    character: "₼",
                    title: e("bc")
                }, {character: "₽", title: e("bd")}])
            }
        }

        class _P extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.plugins.get("SpecialCharacters").addItems("Математические", [{
                    character: "<",
                    title: e("gc")
                }, {character: ">", title: e("gd")}, {character: "≤", title: e("ge")}, {
                    character: "≥",
                    title: e("gf")
                }, {character: "–", title: e("gg")}, {character: "—", title: e("gh")}, {
                    character: "¯",
                    title: e("gi")
                }, {character: "‾", title: e("gj")}, {character: "°", title: e("gk")}, {
                    character: "−",
                    title: e("gl")
                }, {character: "±", title: e("gm")}, {character: "÷", title: e("gn")}, {
                    character: "⁄",
                    title: e("go")
                }, {character: "×", title: e("gp")}, {character: "ƒ", title: e("gq")}, {
                    character: "∫",
                    title: e("gr")
                }, {character: "∑", title: e("gs")}, {character: "∞", title: e("gt")}, {
                    character: "√",
                    title: e("gu")
                }, {character: "∼", title: e("gv")}, {character: "≅", title: e("gw")}, {
                    character: "≈",
                    title: e("gx")
                }, {character: "≠", title: e("gy")}, {character: "≡", title: e("gz")}, {
                    character: "∈",
                    title: e("ha")
                }, {character: "∉", title: e("hb")}, {character: "∋", title: e("hc")}, {
                    character: "∏",
                    title: e("hd")
                }, {character: "∧", title: e("he")}, {character: "∨", title: e("hf")}, {
                    character: "¬",
                    title: e("hg")
                }, {character: "∩", title: e("hh")}, {character: "∪", title: e("hi")}, {
                    character: "∂",
                    title: e("hj")
                }, {character: "∀", title: e("hk")}, {character: "∃", title: e("hl")}, {
                    character: "∅",
                    title: e("hm")
                }, {character: "∇", title: e("hn")}, {character: "∗", title: e("ho")}, {
                    character: "∝",
                    title: e("hp")
                }, {character: "∠", title: e("hq")}, {character: "¼", title: e("hr")}, {
                    character: "½",
                    title: e("hs")
                }, {character: "¾", title: e("ht")}])
            }
        }

        class vP extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.plugins.get("SpecialCharacters").addItems("Стрелки", [{title: e("c"), character: "⇐"}, {
                    title: e("d"),
                    character: "⇒"
                }, {title: e("e"), character: "⇑"}, {title: e("f"), character: "⇓"}, {
                    title: e("g"),
                    character: "⇠"
                }, {title: e("h"), character: "⇢"}, {title: e("i"), character: "⇡"}, {
                    title: e("j"),
                    character: "⇣"
                }, {title: e("k"), character: "⇤"}, {title: e("l"), character: "⇥"}, {
                    title: e("m"),
                    character: "⤒"
                }, {title: e("n"), character: "⤓"}, {title: e("o"), character: "↨"}, {
                    title: e("p"),
                    character: "🔙"
                }, {title: e("q"), character: "🔚"}, {title: e("r"), character: "🔛"}, {
                    title: e("s"),
                    character: "🔜"
                }, {title: e("t"), character: "🔝"}])
            }
        }

        class yP extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.plugins.get("SpecialCharacters").addItems("Латинские символы", [{
                    character: "Ā",
                    title: e("be")
                }, {character: "ā", title: e("bf")}, {character: "Ă", title: e("bg")}, {
                    character: "ă",
                    title: e("bh")
                }, {character: "Ą", title: e("bi")}, {character: "ą", title: e("bj")}, {
                    character: "Ć",
                    title: e("bk")
                }, {character: "ć", title: e("bl")}, {character: "Ĉ", title: e("bm")}, {
                    character: "ĉ",
                    title: e("bn")
                }, {character: "Ċ", title: e("bo")}, {character: "ċ", title: e("bp")}, {
                    character: "Č",
                    title: e("bq")
                }, {character: "č", title: e("br")}, {character: "Ď", title: e("bs")}, {
                    character: "ď",
                    title: e("bt")
                }, {character: "Đ", title: e("bu")}, {character: "đ", title: e("bv")}, {
                    character: "Ē",
                    title: e("bw")
                }, {character: "ē", title: e("bx")}, {character: "Ĕ", title: e("by")}, {
                    character: "ĕ",
                    title: e("bz")
                }, {character: "Ė", title: e("ca")}, {character: "ė", title: e("cb")}, {
                    character: "Ę",
                    title: e("cc")
                }, {character: "ę", title: e("cd")}, {character: "Ě", title: e("ce")}, {
                    character: "ě",
                    title: e("cf")
                }, {character: "Ĝ", title: e("cg")}, {character: "ĝ", title: e("ch")}, {
                    character: "Ğ",
                    title: e("ci")
                }, {character: "ğ", title: e("cj")}, {character: "Ġ", title: e("ck")}, {
                    character: "ġ",
                    title: e("cl")
                }, {character: "Ģ", title: e("cm")}, {character: "ģ", title: e("cn")}, {
                    character: "Ĥ",
                    title: e("co")
                }, {character: "ĥ", title: e("cp")}, {character: "Ħ", title: e("cq")}, {
                    character: "ħ",
                    title: e("cr")
                }, {character: "Ĩ", title: e("cs")}, {character: "ĩ", title: e("ct")}, {
                    character: "Ī",
                    title: e("cu")
                }, {character: "ī", title: e("cv")}, {character: "Ĭ", title: e("cw")}, {
                    character: "ĭ",
                    title: e("cx")
                }, {character: "Į", title: e("cy")}, {character: "į", title: e("cz")}, {
                    character: "İ",
                    title: e("da")
                }, {character: "ı", title: e("db")}, {character: "Ĳ", title: e("dc")}, {
                    character: "ĳ",
                    title: e("dd")
                }, {character: "Ĵ", title: e("de")}, {character: "ĵ", title: e("df")}, {
                    character: "Ķ",
                    title: e("dg")
                }, {character: "ķ", title: e("dh")}, {character: "ĸ", title: e("di")}, {
                    character: "Ĺ",
                    title: e("dj")
                }, {character: "ĺ", title: e("dk")}, {character: "Ļ", title: e("dl")}, {
                    character: "ļ",
                    title: e("dm")
                }, {character: "Ľ", title: e("dn")}, {character: "ľ", title: e("do")}, {
                    character: "Ŀ",
                    title: e("dp")
                }, {character: "ŀ", title: e("dq")}, {character: "Ł", title: e("dr")}, {
                    character: "ł",
                    title: e("ds")
                }, {character: "Ń", title: e("dt")}, {character: "ń", title: e("du")}, {
                    character: "Ņ",
                    title: e("dv")
                }, {character: "ņ", title: e("dw")}, {character: "Ň", title: e("dx")}, {
                    character: "ň",
                    title: e("dy")
                }, {character: "ŉ", title: e("dz")}, {character: "Ŋ", title: e("ea")}, {
                    character: "ŋ",
                    title: e("eb")
                }, {character: "Ō", title: e("ec")}, {character: "ō", title: e("ed")}, {
                    character: "Ŏ",
                    title: e("ee")
                }, {character: "ŏ", title: e("ef")}, {character: "Ő", title: e("eg")}, {
                    character: "ő",
                    title: e("eh")
                }, {character: "Œ", title: e("ei")}, {character: "œ", title: e("ej")}, {
                    character: "Ŕ",
                    title: e("ek")
                }, {character: "ŕ", title: e("el")}, {character: "Ŗ", title: e("em")}, {
                    character: "ŗ",
                    title: e("en")
                }, {character: "Ř", title: e("eo")}, {character: "ř", title: e("ep")}, {
                    character: "Ś",
                    title: e("eq")
                }, {character: "ś", title: e("er")}, {character: "Ŝ", title: e("es")}, {
                    character: "ŝ",
                    title: e("et")
                }, {character: "Ş", title: e("eu")}, {character: "ş", title: e("ev")}, {
                    character: "Š",
                    title: e("ew")
                }, {character: "š", title: e("ex")}, {character: "Ţ", title: e("ey")}, {
                    character: "ţ",
                    title: e("ez")
                }, {character: "Ť", title: e("fa")}, {character: "ť", title: e("fb")}, {
                    character: "Ŧ",
                    title: e("fc")
                }, {character: "ŧ", title: e("fd")}, {character: "Ũ", title: e("fe")}, {
                    character: "ũ",
                    title: e("ff")
                }, {character: "Ū", title: e("fg")}, {character: "ū", title: e("fh")}, {
                    character: "Ŭ",
                    title: e("fi")
                }, {character: "ŭ", title: e("fj")}, {character: "Ů", title: e("fk")}, {
                    character: "ů",
                    title: e("fl")
                }, {character: "Ű", title: e("fm")}, {character: "ű", title: e("fn")}, {
                    character: "Ų",
                    title: e("fo")
                }, {character: "ų", title: e("fp")}, {character: "Ŵ", title: e("fq")}, {
                    character: "ŵ",
                    title: e("fr")
                }, {character: "Ŷ", title: e("fs")}, {character: "ŷ", title: e("ft")}, {
                    character: "Ÿ",
                    title: e("fu")
                }, {character: "Ź", title: e("fv")}, {character: "ź", title: e("fw")}, {
                    character: "Ż",
                    title: e("fx")
                }, {character: "ż", title: e("fy")}, {character: "Ž", title: e("fz")}, {
                    character: "ž",
                    title: e("ga")
                }, {character: "ſ", title: e("gb")}])
            }
        }

        class xP extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.plugins.get("SpecialCharacters").addItems("Текстовые символы", [{
                    character: "‹",
                    title: e("hu")
                }, {character: "›", title: e("hv")}, {character: "«", title: e("hw")}, {
                    character: "»",
                    title: e("hx")
                }, {character: "‘", title: e("hy")}, {character: "’", title: e("hz")}, {
                    character: "“",
                    title: e("ia")
                }, {character: "”", title: e("ib")}, {character: "‚", title: e("ic")}, {
                    character: "„",
                    title: e("id")
                }, {character: "¡", title: e("ie")}, {character: "¿", title: e("if")}, {
                    character: "‥",
                    title: e("ig")
                }, {character: "…", title: e("ih")}, {character: "‡", title: e("ii")}, {
                    character: "‰",
                    title: e("ij")
                }, {character: "‱", title: e("ik")}, {character: "‼", title: e("il")}, {
                    character: "⁈",
                    title: e("im")
                }, {character: "⁉", title: e("in")}, {character: "⁇", title: e("io")}, {
                    character: "©",
                    title: e("ip")
                }, {character: "®", title: e("iq")}, {character: "™", title: e("ir")}, {
                    character: "§",
                    title: e("is")
                }, {character: "¶", title: e("it")}, {character: "⁋", title: e("iu")}])
            }
        }

        class CP extends mp {
            static get requires() {
                return [kP, xP, _P, vP, yP]
            }
        }

        const AP = "strikethrough";

        class TP extends mp {
            static get pluginName() {
                return "StrikethroughEditing"
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: AP});
                t.model.schema.setAttributeProperties(AP, {isFormatting: true, copyOnEnter: true});
                t.conversion.attributeToElement({
                    model: AP,
                    view: "s",
                    upcastAlso: ["del", "strike", {styles: {"text-decoration": "line-through"}}]
                });
                t.commands.add(AP, new yk(t, AP));
                t.keystrokes.set("CTRL+SHIFT+X", "strikethrough")
            }
        }

        var PP = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7 16.4c-.8-.4-1.5-.9-2.2-1.5a.6.6 0 0 1-.2-.5l.3-.6h1c1 1.2 2.1 1.7 3.7 1.7 1 0 1.8-.3 2.3-.6.6-.4.6-1.2.6-1.3.2-1.2-.9-2.1-.9-2.1h2.1c.3.7.4 1.2.4 1.7v.8l-.6 1.2c-.6.8-1.1 1-1.6 1.2a6 6 0 0 1-2.4.6c-1 0-1.8-.3-2.5-.6zM6.8 9L6 8.3c-.4-.5-.5-.8-.5-1.6 0-.7.1-1.3.5-1.8.4-.6 1-1 1.6-1.3a6.3 6.3 0 0 1 4.7 0 4 4 0 0 1 1.7 1l.3.7c0 .1.2.4-.2.7-.4.2-.9.1-1 0a3 3 0 0 0-1.2-1c-.4-.2-1-.3-2-.4-.7 0-1.4.2-2 .6-.8.6-1 .8-1 1.5 0 .8.5 1 1.2 1.5.6.4 1.1.7 1.9 1H6.8z"/><path d="M3 10.5V9h14v1.5z"/></svg>';
        const SP = "strikethrough";

        class EP extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add(SP, i => {
                    const n = t.commands.get(SP);
                    const o = new hb(i);
                    o.set({label: e("jk"), icon: PP, keystroke: "CTRL+SHIFT+X", tooltip: true, isToggleable: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute(SP);
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class RP extends mp {
            static get requires() {
                return [TP, EP]
            }

            static get pluginName() {
                return "Strikethrough"
            }
        }

        const OP = "subscript";

        class IP extends mp {
            static get pluginName() {
                return "SubscriptEditing"
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: OP});
                t.model.schema.setAttributeProperties(OP, {isFormatting: true, copyOnEnter: true});
                t.conversion.attributeToElement({
                    model: OP,
                    view: "sub",
                    upcastAlso: [{styles: {"vertical-align": "sub"}}]
                });
                t.commands.add(OP, new yk(t, OP))
            }
        }

        var VP = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7.03 10.349l3.818-3.819a.8.8 0 1 1 1.132 1.132L8.16 11.48l3.819 3.818a.8.8 0 1 1-1.132 1.132L7.03 12.61l-3.818 3.82a.8.8 0 1 1-1.132-1.132L5.9 11.48 2.08 7.662A.8.8 0 1 1 3.212 6.53l3.818 3.82zm8.147 7.829h2.549c.254 0 .447.05.58.152a.49.49 0 0 1 .201.413.54.54 0 0 1-.159.393c-.105.108-.266.162-.48.162h-3.594c-.245 0-.435-.066-.572-.197a.621.621 0 0 1-.205-.463c0-.114.044-.265.132-.453a1.62 1.62 0 0 1 .288-.444c.433-.436.824-.81 1.172-1.122.348-.312.597-.517.747-.615.267-.183.49-.368.667-.553.177-.185.312-.375.405-.57.093-.194.139-.384.139-.57a1.008 1.008 0 0 0-.554-.917 1.197 1.197 0 0 0-.56-.133c-.426 0-.761.182-1.005.546a2.332 2.332 0 0 0-.164.39 1.609 1.609 0 0 1-.258.488c-.096.114-.237.17-.423.17a.558.558 0 0 1-.405-.156.568.568 0 0 1-.161-.427c0-.218.05-.446.151-.683.101-.238.252-.453.452-.646s.454-.349.762-.467a2.998 2.998 0 0 1 1.081-.178c.498 0 .923.076 1.274.228a1.916 1.916 0 0 1 1.004 1.032 1.984 1.984 0 0 1-.156 1.794c-.2.32-.405.572-.613.754-.208.182-.558.468-1.048.857-.49.39-.826.691-1.008.906a2.703 2.703 0 0 0-.24.309z"/></svg>';
        const NP = "subscript";

        class MP extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add(NP, i => {
                    const n = t.commands.get(NP);
                    const o = new hb(i);
                    o.set({label: e("jl"), icon: VP, tooltip: true, isToggleable: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute(NP);
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class BP extends mp {
            static get requires() {
                return [IP, MP]
            }

            static get pluginName() {
                return "Subscript"
            }
        }

        const zP = "superscript";

        class LP extends mp {
            static get pluginName() {
                return "SuperscriptEditing"
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: zP});
                t.model.schema.setAttributeProperties(zP, {isFormatting: true, copyOnEnter: true});
                t.conversion.attributeToElement({
                    model: zP,
                    view: "sup",
                    upcastAlso: [{styles: {"vertical-align": "super"}}]
                });
                t.commands.add(zP, new yk(t, zP))
            }
        }

        var FP = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15.677 8.678h2.549c.254 0 .447.05.58.152a.49.49 0 0 1 .201.413.54.54 0 0 1-.159.393c-.105.108-.266.162-.48.162h-3.594c-.245 0-.435-.066-.572-.197a.621.621 0 0 1-.205-.463c0-.114.044-.265.132-.453a1.62 1.62 0 0 1 .288-.444c.433-.436.824-.81 1.172-1.122.348-.312.597-.517.747-.615.267-.183.49-.368.667-.553.177-.185.312-.375.405-.57.093-.194.139-.384.139-.57a1.008 1.008 0 0 0-.554-.917 1.197 1.197 0 0 0-.56-.133c-.426 0-.761.182-1.005.546a2.332 2.332 0 0 0-.164.39 1.609 1.609 0 0 1-.258.488c-.096.114-.237.17-.423.17a.558.558 0 0 1-.405-.156.568.568 0 0 1-.161-.427c0-.218.05-.446.151-.683.101-.238.252-.453.452-.646s.454-.349.762-.467a2.998 2.998 0 0 1 1.081-.178c.498 0 .923.076 1.274.228a1.916 1.916 0 0 1 1.004 1.032 1.984 1.984 0 0 1-.156 1.794c-.2.32-.405.572-.613.754-.208.182-.558.468-1.048.857-.49.39-.826.691-1.008.906a2.703 2.703 0 0 0-.24.309zM7.03 10.349l3.818-3.819a.8.8 0 1 1 1.132 1.132L8.16 11.48l3.819 3.818a.8.8 0 1 1-1.132 1.132L7.03 12.61l-3.818 3.82a.8.8 0 1 1-1.132-1.132L5.9 11.48 2.08 7.662A.8.8 0 1 1 3.212 6.53l3.818 3.82z"/></svg>';
        const DP = "superscript";

        class jP extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add(DP, i => {
                    const n = t.commands.get(DP);
                    const o = new hb(i);
                    o.set({label: e("jm"), icon: FP, tooltip: true, isToggleable: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute(DP);
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class HP extends mp {
            static get requires() {
                return [LP, jP]
            }

            static get pluginName() {
                return "Superscript"
            }
        }

        function WP(t, e) {
            let i = e.parent;
            while (i) {
                if (i.name === t) {
                    return i
                }
                i = i.parent
            }
        }

        function qP(t, e, i, n, o = 1) {
            if (e > o) {
                n.setAttribute(t, e, i)
            } else {
                n.removeAttribute(t, i)
            }
        }

        function UP(t, e, i = {}) {
            const n = t.createElement("tableCell", i);
            t.insertElement("paragraph", n);
            t.insert(n, e)
        }

        function $P(t) {
            if (!t || !ct(t)) {
                return t
            }
            const {top: e, right: i, bottom: n, left: o} = t;
            if (e == i && i == n && n == o) {
                return e
            }
        }

        function GP(t, e) {
            const i = parseFloat(t);
            if (Number.isNaN(i)) {
                return t
            }
            if (String(i) !== String(t)) {
                return t
            }
            return `${i}${e}`
        }

        function KP(t, e) {
            const i = e.parent.parent;
            const n = parseInt(i.getAttribute("headingColumns") || 0);
            const {column: o} = t.getCellLocation(e);
            return !!n && o < n
        }

        function JP() {
            return t => {
                t.on("element:table", (t, e, i) => {
                    const n = e.viewItem;
                    if (!i.consumable.test(n, {name: true})) {
                        return
                    }
                    const {rows: o, headingRows: r, headingColumns: s} = QP(n);
                    const a = {};
                    if (s) {
                        a.headingColumns = s
                    }
                    if (r) {
                        a.headingRows = r
                    }
                    const c = i.writer.createElement("table", a);
                    const l = i.splitToAllowedParent(c, e.modelCursor);
                    if (!l) {
                        return
                    }
                    i.writer.insert(c, l.position);
                    i.consumable.consume(n, {name: true});
                    if (o.length) {
                        o.forEach(t => i.convertItem(t, i.writer.createPositionAt(c, "end")))
                    } else {
                        const t = i.writer.createElement("tableRow");
                        i.writer.insert(t, i.writer.createPositionAt(c, "end"));
                        UP(i.writer, i.writer.createPositionAt(t, "end"))
                    }
                    e.modelRange = i.writer.createRange(i.writer.createPositionBefore(c), i.writer.createPositionAfter(c));
                    if (l.cursorParent) {
                        e.modelCursor = i.writer.createPositionAt(l.cursorParent, 0)
                    } else {
                        e.modelCursor = e.modelRange.end
                    }
                })
            }
        }

        function YP(t) {
            return e => {
                e.on(`element:${t}`, (t, e, i) => {
                    const n = e.viewItem;
                    if (!i.consumable.test(n, {name: true})) {
                        return
                    }
                    const o = i.writer.createElement("tableCell");
                    const r = i.splitToAllowedParent(o, e.modelCursor);
                    if (!r) {
                        return
                    }
                    i.writer.insert(o, r.position);
                    i.consumable.consume(n, {name: true});
                    const s = i.writer.createPositionAt(o, 0);
                    i.convertChildren(n, s);
                    if (!o.childCount) {
                        i.writer.insertElement("paragraph", s)
                    }
                    e.modelRange = i.writer.createRange(i.writer.createPositionBefore(o), i.writer.createPositionAfter(o));
                    e.modelCursor = e.modelRange.end
                })
            }
        }

        function QP(t) {
            const e = {headingRows: 0, headingColumns: 0};
            const i = [];
            const n = [];
            let o;
            for (const r of Array.from(t.getChildren())) {
                if (r.name === "tbody" || r.name === "thead" || r.name === "tfoot") {
                    if (r.name === "thead" && !o) {
                        o = r
                    }
                    const t = Array.from(r.getChildren()).filter(t => t.is("element", "tr"));
                    for (const r of t) {
                        if (r.parent.name === "thead" && r.parent === o) {
                            e.headingRows++;
                            i.push(r)
                        } else {
                            n.push(r);
                            const t = XP(r, e, o);
                            if (t > e.headingColumns) {
                                e.headingColumns = t
                            }
                        }
                    }
                }
            }
            e.rows = [...i, ...n];
            return e
        }

        function XP(t) {
            let e = 0;
            let i = 0;
            const n = Array.from(t.getChildren()).filter(t => t.name === "th" || t.name === "td");
            while (i < n.length && n[i].name === "th") {
                const t = n[i];
                const o = parseInt(t.getAttribute("colspan") || 1);
                e = e + o;
                i++
            }
            return e
        }

        class ZP {
            constructor(t, e = {}) {
                this.table = t;
                this.startRow = e.startRow || 0;
                this.endRow = typeof e.endRow == "number" ? e.endRow : undefined;
                this.includeSpanned = !!e.includeSpanned;
                this.column = typeof e.column == "number" ? e.column : undefined;
                this._skipRows = new Set;
                this._row = 0;
                this._column = 0;
                this._cellIndex = 0;
                this._spannedCells = new Map;
                this._nextCellAtColumn = -1
            }

            [Symbol.iterator]() {
                return this
            }

            next() {
                const t = this.table.getChild(this._row);
                if (!t || this._isOverEndRow()) {
                    return {done: true}
                }
                let e, i, n;
                if (this._isSpanned(this._row, this._column)) {
                    e = this._getSpanned(this._row, this._column);
                    i = !this.includeSpanned || this._shouldSkipRow() || this._shouldSkipColumn();
                    n = this._formatOutValue(e, this._column, true)
                } else {
                    e = t.getChild(this._cellIndex);
                    if (!e) {
                        this._row++;
                        this._column = 0;
                        this._cellIndex = 0;
                        this._nextCellAtColumn = -1;
                        return this.next()
                    }
                    const o = parseInt(e.getAttribute("colspan") || 1);
                    const r = parseInt(e.getAttribute("rowspan") || 1);
                    if (o > 1 || r > 1) {
                        this._recordSpans(this._row, this._column, r, o, e)
                    }
                    this._nextCellAtColumn = this._column + o;
                    i = this._shouldSkipRow() || this._shouldSkipColumn();
                    n = this._formatOutValue(e, this._column, false, r, o)
                }
                this._column++;
                if (this._column == this._nextCellAtColumn) {
                    this._cellIndex++
                }
                return i ? this.next() : n
            }

            skipRow(t) {
                this._skipRows.add(t)
            }

            _isOverEndRow() {
                return this.endRow !== undefined && this._row > this.endRow
            }

            _formatOutValue(t, e, i, n = 1, o = 1) {
                return {
                    done: false,
                    value: {
                        cell: t,
                        row: this._row,
                        column: e,
                        isSpanned: i,
                        rowspan: n,
                        colspan: o,
                        cellIndex: this._cellIndex
                    }
                }
            }

            _shouldSkipRow() {
                const t = this._row < this.startRow;
                const e = this._skipRows.has(this._row);
                return t || e
            }

            _shouldSkipColumn() {
                if (this.column === undefined) {
                    return false
                }
                return this.column != this._column
            }

            _isSpanned(t, e) {
                if (!this._spannedCells.has(t)) {
                    return false
                }
                const i = this._spannedCells.get(t);
                return i.has(e)
            }

            _getSpanned(t, e) {
                return this._spannedCells.get(t).get(e)
            }

            _recordSpans(t, e, i, n, o) {
                for (let i = e + 1; i <= e + n - 1; i++) {
                    this._markSpannedCell(t, i, o)
                }
                for (let r = t + 1; r < t + i; r++) {
                    for (let t = e; t <= e + n - 1; t++) {
                        this._markSpannedCell(r, t, o)
                    }
                }
            }

            _markSpannedCell(t, e, i) {
                if (!this._spannedCells.has(t)) {
                    this._spannedCells.set(t, new Map)
                }
                const n = this._spannedCells.get(t);
                n.set(e, i)
            }
        }

        function tS(t, e) {
            e.setCustomProperty("table", true, t);
            return X_(t, e, {hasSelectionHandle: true})
        }

        function eS(t) {
            return !!t.getCustomProperty("table") && Q_(t)
        }

        function iS(t) {
            const e = t.getSelectedElement();
            if (e && eS(e)) {
                return e
            }
            return null
        }

        function nS(t) {
            const e = WP("table", t.getFirstPosition());
            if (e && eS(e.parent)) {
                return e.parent
            }
            return null
        }

        function oS(t) {
            const e = [];
            for (const i of aS(t.getRanges())) {
                const t = i.getContainedElement();
                if (t && t.is("tableCell")) {
                    e.push(t)
                }
            }
            return e
        }

        function rS(t) {
            const e = [];
            for (const i of t.getRanges()) {
                const t = WP("tableCell", i.start);
                if (t) {
                    e.push(t)
                }
            }
            return e
        }

        function sS(t) {
            const e = oS(t);
            if (e.length) {
                return e
            }
            return rS(t)
        }

        function aS(t) {
            return Array.from(t).sort(cS)
        }

        function cS(t, e) {
            const i = t.start;
            const n = e.start;
            if (i.isEqual(n)) {
                return 0
            }
            return i.isBefore(n) ? -1 : 1
        }

        function lS(t = {}) {
            return e => e.on("insert:table", (e, i, n) => {
                const o = i.item;
                if (!n.consumable.consume(o, "insert")) {
                    return
                }
                n.consumable.consume(o, "attribute:headingRows:table");
                n.consumable.consume(o, "attribute:headingColumns:table");
                const r = t && t.asWidget;
                const s = n.writer.createContainerElement("figure", {class: "table"});
                const a = n.writer.createContainerElement("table");
                n.writer.insert(n.writer.createPositionAt(s, 0), a);
                let c;
                if (r) {
                    c = tS(s, n.writer)
                }
                const l = new ZP(o);
                const d = {
                    headingRows: o.getAttribute("headingRows") || 0,
                    headingColumns: o.getAttribute("headingColumns") || 0
                };
                const u = new Map;
                for (const e of l) {
                    const {row: i, cell: r} = e;
                    const s = vS(_S(i, d), a, n);
                    const c = o.getChild(i);
                    const l = u.get(i) || wS(c, i, s, n);
                    u.set(i, l);
                    n.consumable.consume(r, "insert");
                    const h = n.writer.createPositionAt(l, "end");
                    bS(e, d, h, n, t)
                }
                const h = n.mapper.toViewPosition(i.range.start);
                n.mapper.bindElements(o, r ? c : s);
                n.writer.insert(h, r ? c : s)
            })
        }

        function dS(t = {}) {
            return e => e.on("insert:tableRow", (e, i, n) => {
                const o = i.item;
                if (!n.consumable.consume(o, "insert")) {
                    return
                }
                const r = o.parent;
                const s = n.mapper.toViewElement(r);
                const a = TS(s);
                const c = r.getChildIndex(o);
                const l = new ZP(r, {startRow: c, endRow: c});
                const d = {
                    headingRows: r.getAttribute("headingRows") || 0,
                    headingColumns: r.getAttribute("headingColumns") || 0
                };
                const u = new Map;
                for (const e of l) {
                    const i = vS(_S(c, d), a, n);
                    const r = u.get(c) || wS(o, c, i, n);
                    u.set(c, r);
                    n.consumable.consume(e.cell, "insert");
                    const s = n.writer.createPositionAt(r, "end");
                    bS(e, d, s, n, t)
                }
            })
        }

        function uS(t = {}) {
            return e => e.on("insert:tableCell", (e, i, n) => {
                const o = i.item;
                if (!n.consumable.consume(o, "insert")) {
                    return
                }
                const r = o.parent;
                const s = r.parent;
                const a = s.getChildIndex(r);
                const c = new ZP(s, {startRow: a, endRow: a});
                const l = {
                    headingRows: s.getAttribute("headingRows") || 0,
                    headingColumns: s.getAttribute("headingColumns") || 0
                };
                for (const e of c) {
                    if (e.cell === o) {
                        const i = n.mapper.toViewElement(r);
                        const s = n.writer.createPositionAt(i, r.getChildIndex(o));
                        bS(e, l, s, n, t);
                        return
                    }
                }
            })
        }

        function hS(t = {}) {
            const e = !!t.asWidget;
            return t => t.on("attribute:headingRows:table", (t, i, n) => {
                const o = i.item;
                if (!n.consumable.consume(i.item, t.name)) {
                    return
                }
                const r = n.mapper.toViewElement(o);
                const s = TS(r);
                const a = i.attributeOldValue;
                const c = i.attributeNewValue;
                if (c > a) {
                    const t = Array.from(o.getChildren()).filter(({index: t}) => l(t, a - 1, c));
                    const i = vS("thead", s, n);
                    AS(t, i, n, "end");
                    for (const i of t) {
                        for (const t of i.getChildren()) {
                            mS(t, "th", n, e)
                        }
                    }
                    CS("tbody", s, n)
                } else {
                    const t = Array.from(o.getChildren()).filter(({index: t}) => l(t, c - 1, a)).reverse();
                    const i = vS("tbody", s, n);
                    AS(t, i, n, 0);
                    const r = new ZP(o, {startRow: c ? c - 1 : c, endRow: a - 1});
                    const d = {
                        headingRows: o.getAttribute("headingRows") || 0,
                        headingColumns: o.getAttribute("headingColumns") || 0
                    };
                    for (const t of r) {
                        pS(t, d, n, e)
                    }
                    CS("thead", s, n)
                }

                function l(t, e, i) {
                    return t > e && t < i
                }
            })
        }

        function fS(t = {}) {
            const e = !!t.asWidget;
            return t => t.on("attribute:headingColumns:table", (t, i, n) => {
                const o = i.item;
                if (!n.consumable.consume(i.item, t.name)) {
                    return
                }
                const r = {
                    headingRows: o.getAttribute("headingRows") || 0,
                    headingColumns: o.getAttribute("headingColumns") || 0
                };
                const s = i.attributeOldValue;
                const a = i.attributeNewValue;
                const c = (s > a ? s : a) - 1;
                for (const t of new ZP(o)) {
                    if (t.column > c) {
                        continue
                    }
                    pS(t, r, n, e)
                }
            })
        }

        function gS() {
            return t => t.on("remove:tableRow", (t, e, i) => {
                t.stop();
                const n = i.writer;
                const o = i.mapper;
                const r = o.toViewPosition(e.position).getLastMatchingPosition(t => !t.item.is("tr"));
                const s = r.nodeAfter;
                const a = s.parent;
                const c = n.createRangeOn(s);
                const l = n.remove(c);
                for (const t of n.createRangeIn(l).getItems()) {
                    o.unbindViewElement(t)
                }
                if (!a.childCount) {
                    n.remove(n.createRangeOn(a))
                }
            }, {priority: "higher"})
        }

        function mS(t, e, i, n) {
            const o = i.writer;
            const r = i.mapper.toViewElement(t);
            if (!r) {
                return
            }
            let s;
            if (n) {
                const t = o.createEditableElement(e, r.getAttributes());
                s = iv(t, o);
                o.insert(o.createPositionAfter(r), s);
                o.move(o.createRangeIn(r), o.createPositionAt(s, 0));
                o.remove(o.createRangeOn(r))
            } else {
                s = o.rename(e, r)
            }
            i.mapper.unbindViewElement(r);
            i.mapper.bindElements(t, s)
        }

        function pS(t, e, i, n) {
            const {cell: o} = t;
            const r = kS(t, e);
            const s = i.mapper.toViewElement(o);
            if (s && s.name !== r) {
                mS(o, r, i, n)
            }
        }

        function bS(t, e, i, n, o) {
            const r = o && o.asWidget;
            const s = kS(t, e);
            const a = r ? iv(n.writer.createEditableElement(s), n.writer) : n.writer.createContainerElement(s);
            const c = t.cell;
            const l = c.getChild(0);
            const d = c.childCount === 1 && l.name === "paragraph";
            n.writer.insert(i, a);
            if (d && !PS(l)) {
                const t = c.getChild(0);
                const e = n.writer.createPositionAt(a, "end");
                n.consumable.consume(t, "insert");
                if (o.asWidget) {
                    const i = n.writer.createContainerElement("span", {style: "display:inline-block"});
                    n.mapper.bindElements(t, i);
                    n.writer.insert(e, i);
                    n.mapper.bindElements(c, a)
                } else {
                    n.mapper.bindElements(c, a);
                    n.mapper.bindElements(t, a)
                }
            } else {
                n.mapper.bindElements(c, a)
            }
        }

        function wS(t, e, i, n) {
            n.consumable.consume(t, "insert");
            const o = n.writer.createContainerElement("tr");
            n.mapper.bindElements(t, o);
            const r = t.parent.getAttribute("headingRows") || 0;
            const s = r > 0 && e >= r ? e - r : e;
            const a = n.writer.createPositionAt(i, s);
            n.writer.insert(a, o);
            return o
        }

        function kS(t, e) {
            const {row: i, column: n} = t;
            const {headingColumns: o, headingRows: r} = e;
            const s = r && r > i;
            if (s) {
                return "th"
            }
            const a = o && o > n;
            return a ? "th" : "td"
        }

        function _S(t, e) {
            return t < e.headingRows ? "thead" : "tbody"
        }

        function vS(t, e, i) {
            const n = yS(t, e);
            return n ? n : xS(t, e, i)
        }

        function yS(t, e) {
            for (const i of e.getChildren()) {
                if (i.name == t) {
                    return i
                }
            }
        }

        function xS(t, e, i) {
            const n = i.writer.createContainerElement(t);
            const o = i.writer.createPositionAt(e, t == "tbody" ? "end" : 0);
            i.writer.insert(o, n);
            return n
        }

        function CS(t, e, i) {
            const n = yS(t, e);
            if (n && n.childCount === 0) {
                i.writer.remove(i.writer.createRangeOn(n))
            }
        }

        function AS(t, e, i, n) {
            for (const o of t) {
                const t = i.mapper.toViewElement(o);
                if (t) {
                    i.writer.move(i.writer.createRangeOn(t), i.writer.createPositionAt(e, n))
                }
            }
        }

        function TS(t) {
            for (const e of t.getChildren()) {
                if (e.name === "table") {
                    return e
                }
            }
        }

        function PS(t) {
            return !![...t.getAttributeKeys()].length
        }

        class SS extends jw {
            refresh() {
                const t = this.editor.model;
                const e = t.document.selection;
                const i = t.schema;
                const n = ES(e.getFirstPosition());
                this.isEnabled = i.checkChild(n, "table")
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.document.selection;
                const n = this.editor.plugins.get("TableUtils");
                const o = parseInt(t.rows) || 2;
                const r = parseInt(t.columns) || 2;
                const s = nv(i, e);
                e.change(t => {
                    const i = n.createTable(t, o, r);
                    e.insertContent(i, s);
                    t.setSelection(t.createPositionAt(i.getNodeByPath([0, 0, 0]), 0))
                })
            }
        }

        function ES(t) {
            const e = t.parent;
            return e === e.root ? e : e.parent
        }

        class RS extends jw {
            constructor(t, e = {}) {
                super(t);
                this.order = e.order || "below"
            }

            refresh() {
                const t = this.editor.model.document.selection;
                const e = WP("table", t.getFirstPosition());
                this.isEnabled = !!e
            }

            execute() {
                const t = this.editor;
                const e = t.model.document.selection;
                const i = t.plugins.get("TableUtils");
                const n = this.order === "above";
                const o = n ? e.getFirstPosition() : e.getLastPosition();
                const r = n ? e.getFirstRange() : e.getLastRange();
                const s = r.getContainedElement() || WP("tableCell", o);
                const a = s.parent;
                const c = a.parent;
                const l = c.getChildIndex(a);
                i.insertRows(c, {rows: 1, at: this.order === "below" ? l + 1 : l})
            }
        }

        class OS extends jw {
            constructor(t, e = {}) {
                super(t);
                this.order = e.order || "right"
            }

            refresh() {
                const t = this.editor.model.document.selection;
                const e = WP("table", t.getFirstPosition());
                this.isEnabled = !!e
            }

            execute() {
                const t = this.editor;
                const e = t.model.document.selection;
                const i = t.plugins.get("TableUtils");
                const n = this.order === "left";
                const o = n ? e.getFirstPosition() : e.getLastPosition();
                const r = n ? e.getFirstRange() : e.getLastRange();
                const s = r.getContainedElement() || WP("tableCell", o);
                const a = s.parent.parent;
                const {column: c} = i.getCellLocation(s);
                i.insertColumns(a, {columns: 1, at: n ? c : c + 1})
            }
        }

        class IS extends jw {
            constructor(t, e = {}) {
                super(t);
                this.direction = e.direction || "horizontally"
            }

            refresh() {
                const t = sS(this.editor.model.document.selection);
                this.isEnabled = t.length === 1
            }

            execute() {
                const t = sS(this.editor.model.document.selection)[0];
                const e = this.direction === "horizontally";
                const i = this.editor.plugins.get("TableUtils");
                if (e) {
                    i.splitCellHorizontally(t, 2)
                } else {
                    i.splitCellVertically(t, 2)
                }
            }
        }

        class VS extends jw {
            constructor(t, e) {
                super(t);
                this.direction = e.direction;
                this.isHorizontal = this.direction == "right" || this.direction == "left"
            }

            refresh() {
                const t = this._getMergeableCell();
                this.value = t;
                this.isEnabled = !!t
            }

            execute() {
                const t = this.editor.model;
                const e = t.document;
                const i = rS(e.selection)[0];
                const n = this.value;
                const o = this.direction;
                t.change(t => {
                    const e = o == "right" || o == "down";
                    const r = e ? i : n;
                    const s = e ? n : i;
                    const a = s.parent;
                    zS(s, r, t);
                    const c = this.isHorizontal ? "colspan" : "rowspan";
                    const l = parseInt(i.getAttribute(c) || 1);
                    const d = parseInt(n.getAttribute(c) || 1);
                    t.setAttribute(c, l + d, r);
                    t.setSelection(t.createRangeIn(r));
                    if (!a.childCount) {
                        BS(a, t)
                    }
                })
            }

            _getMergeableCell() {
                const t = this.editor.model;
                const e = t.document;
                const i = rS(e.selection)[0];
                if (!i) {
                    return
                }
                const n = this.editor.plugins.get("TableUtils");
                const o = this.isHorizontal ? NS(i, this.direction, n) : MS(i, this.direction);
                if (!o) {
                    return
                }
                const r = this.isHorizontal ? "rowspan" : "colspan";
                const s = parseInt(i.getAttribute(r) || 1);
                const a = parseInt(o.getAttribute(r) || 1);
                if (a === s) {
                    return o
                }
            }
        }

        function NS(t, e, i) {
            const n = t.parent;
            const o = n.parent;
            const r = e == "right" ? t.nextSibling : t.previousSibling;
            const s = (o.getAttribute("headingColumns") || 0) > 0;
            if (!r) {
                return
            }
            const a = e == "right" ? t : r;
            const c = e == "right" ? r : t;
            const {column: l} = i.getCellLocation(a);
            const {column: d} = i.getCellLocation(c);
            const u = parseInt(a.getAttribute("colspan") || 1);
            const h = KP(i, a, o);
            const f = KP(i, c, o);
            if (s && h != f) {
                return
            }
            const g = l + u === d;
            return g ? r : undefined
        }

        function MS(t, e) {
            const i = t.parent;
            const n = i.parent;
            const o = n.getChildIndex(i);
            if (e == "down" && o === n.childCount - 1 || e == "up" && o === 0) {
                return
            }
            const r = parseInt(t.getAttribute("rowspan") || 1);
            const s = n.getAttribute("headingRows") || 0;
            const a = e == "down" && o + r === s;
            const c = e == "up" && o === s;
            if (s && (a || c)) {
                return
            }
            const l = parseInt(t.getAttribute("rowspan") || 1);
            const d = e == "down" ? o + l : o;
            const u = [...new ZP(n, {endRow: d})];
            const h = u.find(e => e.cell === t);
            const f = h.column;
            const g = u.find(({row: t, rowspan: i, column: n}) => {
                if (n !== f) {
                    return false
                }
                if (e == "down") {
                    return t === d
                } else {
                    return d === t + i
                }
            });
            return g && g.cell
        }

        function BS(t, e) {
            const i = t.parent;
            const n = i.getChildIndex(t);
            for (const {cell: t, row: o, rowspan: r} of new ZP(i, {endRow: n})) {
                const i = o + r - 1 >= n;
                if (i) {
                    qP("rowspan", r - 1, t, e)
                }
            }
            e.remove(t)
        }

        function zS(t, e, i) {
            if (!LS(t)) {
                if (LS(e)) {
                    i.remove(i.createRangeIn(e))
                }
                i.move(i.createRangeIn(t), i.createPositionAt(e, "end"))
            }
            i.remove(t)
        }

        function LS(t) {
            return t.childCount == 1 && t.getChild(0).is("paragraph") && t.getChild(0).isEmpty
        }

        class FS extends jw {
            refresh() {
                const t = sS(this.editor.model.document.selection);
                const e = t[0];
                if (e) {
                    const i = e.parent.parent;
                    const n = this.editor.plugins.get("TableUtils").getRows(i);
                    const o = [...new ZP(i)];
                    const r = o.filter(e => t.includes(e.cell)).map(t => t.row);
                    const s = r[0];
                    const a = r[r.length - 1];
                    this.isEnabled = a - s < n - 1
                } else {
                    this.isEnabled = false
                }
            }

            execute() {
                const t = sS(this.editor.model.document.selection);
                const e = DS(t);
                const i = t[0];
                const n = i.parent.parent;
                const o = [...new ZP(n, {endRow: e.last})];
                const r = this.editor.model.createBatch();
                const s = HS(o, i);
                this.editor.model.enqueueChange(r, t => {
                    t.setSelection(t.createSelection(n, "on"))
                });
                let a;
                for (let t = e.last; t >= e.first; t--) {
                    this.editor.model.enqueueChange(r, e => {
                        const i = t;
                        this._removeRow(i, n, e, o);
                        a = jS(n, i, s)
                    })
                }
                this.editor.model.enqueueChange(r, t => {
                    t.setSelection(t.createPositionAt(a, 0))
                })
            }

            _removeRow(t, e, i, n) {
                const o = new Map;
                const r = e.getChild(t);
                const s = e.getAttribute("headingRows") || 0;
                if (s && t < s) {
                    qP("headingRows", s - 1, e, i, 0)
                }
                n.filter(({row: e, rowspan: i}) => e === t && i > 1).forEach(({column: t, cell: e, rowspan: i}) => o.set(t, {
                    cell: e,
                    rowspanToSet: i - 1
                }));
                n.filter(({row: e, rowspan: i}) => e <= t - 1 && e + i > t).forEach(({cell: t, rowspan: e}) => qP("rowspan", e - 1, t, i));
                const a = t + 1;
                const c = new ZP(e, {includeSpanned: true, startRow: a, endRow: a});
                let l;
                for (const {row: t, column: n, cell: r} of [...c]) {
                    if (o.has(n)) {
                        const {cell: r, rowspanToSet: s} = o.get(n);
                        const a = l ? i.createPositionAfter(l) : i.createPositionAt(e.getChild(t), 0);
                        i.move(i.createRangeOn(r), a);
                        qP("rowspan", s, r, i);
                        l = r
                    } else {
                        l = r
                    }
                }
                i.remove(r)
            }
        }

        function DS(t) {
            const e = t.map(t => t.parent.index).sort();
            return {first: e[0], last: e[e.length - 1]}
        }

        function jS(t, e, i) {
            const n = t.getChild(e) || t.getChild(t.childCount - 1);
            let o = n.getChild(0);
            let r = 0;
            for (const t of n.getChildren()) {
                if (r > i) {
                    return o
                }
                o = t;
                r += parseInt(t.getAttribute("colspan") || 1)
            }
            return o
        }

        function HS(t, e) {
            const i = t.find(t => t.cell === e);
            return i.column
        }

        class WS extends jw {
            refresh() {
                const t = sS(this.editor.model.document.selection);
                const e = t[0];
                if (e) {
                    const i = e.parent.parent;
                    const n = this.editor.plugins.get("TableUtils").getColumns(i);
                    const o = [...new ZP(i)];
                    const r = o.filter(e => t.includes(e.cell)).map(t => t.column).sort();
                    const s = r[0];
                    const a = r[r.length - 1];
                    this.isEnabled = a - s < n - 1
                } else {
                    this.isEnabled = false
                }
            }

            execute() {
                const [t, e] = $S(this.editor.model.document.selection);
                const i = t.parent.parent;
                const n = [...new ZP(i)];
                const o = {first: n.find(e => e.cell === t).column, last: n.find(t => t.cell === e).column};
                const r = US(n, t, e, o);
                this.editor.model.change(t => {
                    t.setSelection(t.createRangeOn(i));
                    qS(i, o, t);
                    for (let e = o.last; e >= o.first; e--) {
                        for (const {cell: i, column: o, colspan: r} of n) {
                            if (o <= e && r > 1 && o + r > e) {
                                qP("colspan", r - 1, i, t)
                            } else if (o === e) {
                                const e = i.parent;
                                t.remove(i);
                                if (!e.childCount) {
                                    t.remove(e)
                                }
                            }
                        }
                    }
                    t.setSelection(t.createPositionAt(r, 0))
                })
            }
        }

        function qS(t, e, i) {
            const n = t.getAttribute("headingColumns") || 0;
            if (n && e.first <= n) {
                const o = Math.min(n - 1, e.last) - e.first + 1;
                i.setAttribute("headingColumns", n - o, t)
            }
        }

        function US(t, e, i, n) {
            const o = parseInt(i.getAttribute("colspan") || 1);
            if (o > 1) {
                return i
            } else if (e.previousSibling || i.nextSibling) {
                return i.nextSibling || e.previousSibling
            } else {
                if (n.first) {
                    return t.reverse().find(({column: t}) => t < n.first).cell
                } else {
                    return t.reverse().find(({column: t}) => t > n.last).cell
                }
            }
        }

        function $S(t) {
            const e = sS(t);
            const i = e[0];
            const n = e.pop();
            const o = [i, n];
            return i.isBefore(n) ? o : o.reverse()
        }

        class GS extends jw {
            refresh() {
                const t = this.editor.model;
                const e = sS(t.document.selection);
                const i = e.length > 0;
                this.isEnabled = i;
                this.value = i && e.every(t => this._isInHeading(t, t.parent.parent))
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = sS(e.document.selection);
                const n = i[0];
                const o = i[i.length - 1];
                const r = n.parent.parent;
                const s = r.getAttribute("headingRows") || 0;
                const [a, c] = [n.parent.index, o.parent.index].sort();
                if (t.forceValue === this.value) {
                    return
                }
                const l = this.value ? a : c + 1;
                e.change(t => {
                    if (l) {
                        const e = KS(r, l, s);
                        for (const i of e) {
                            JS(i, l, t)
                        }
                    }
                    qP("headingRows", l, r, t, 0)
                })
            }

            _isInHeading(t, e) {
                const i = parseInt(e.getAttribute("headingRows") || 0);
                return !!i && t.parent.index < i
            }
        }

        function KS(t, e, i) {
            const n = [];
            const o = e > i ? i : 0;
            const r = e - 1;
            const s = new ZP(t, {startRow: o, endRow: r});
            for (const {row: t, rowspan: i, cell: o} of s) {
                if (i > 1 && t + i > e) {
                    n.push(o)
                }
            }
            return n
        }

        function JS(t, e, i) {
            const n = t.parent;
            const o = n.parent;
            const r = n.index;
            const s = parseInt(t.getAttribute("rowspan"));
            const a = e - r;
            const c = {};
            const l = s - a;
            if (l > 1) {
                c.rowspan = l
            }
            const d = parseInt(t.getAttribute("colspan") || 1);
            if (d > 1) {
                c.colspan = d
            }
            const u = o.getChildIndex(n);
            const h = u + a;
            const f = [...new ZP(o, {startRow: u, endRow: h, includeSpanned: true})];
            let g;
            for (const {row: e, column: n, cell: r, cellIndex: s} of f) {
                if (r === t && g === undefined) {
                    g = n
                }
                if (g !== undefined && g === n && e === h) {
                    const t = o.getChild(e);
                    const n = i.createPositionAt(t, s);
                    UP(i, n, c)
                }
            }
            qP("rowspan", a, t, i)
        }

        class YS extends jw {
            refresh() {
                const t = this.editor.model;
                const e = sS(t.document.selection);
                const i = this.editor.plugins.get("TableUtils");
                const n = e.length > 0;
                this.isEnabled = n;
                this.value = n && e.every(t => KP(i, t))
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = this.editor.plugins.get("TableUtils");
                const n = sS(e.document.selection);
                const o = n[0];
                const r = n[n.length - 1];
                const s = o.parent;
                const a = s.parent;
                const [c, l] = [i.getCellLocation(o).column, i.getCellLocation(r).column].sort();
                if (t.forceValue === this.value) {
                    return
                }
                const d = this.value ? c : l + 1;
                e.change(t => {
                    qP("headingColumns", d, a, t, 0)
                })
            }
        }

        class QS extends mp {
            static get pluginName() {
                return "TableUtils"
            }

            getCellLocation(t) {
                const e = t.parent;
                const i = e.parent;
                const n = i.getChildIndex(e);
                const o = new ZP(i, {startRow: n, endRow: n});
                for (const {cell: e, row: i, column: n} of o) {
                    if (e === t) {
                        return {row: i, column: n}
                    }
                }
            }

            createTable(t, e, i) {
                const n = t.createElement("table");
                XS(t, n, 0, e, i);
                return n
            }

            insertRows(t, e = {}) {
                const i = this.editor.model;
                const n = e.at || 0;
                const o = e.rows || 1;
                i.change(e => {
                    const i = t.getAttribute("headingRows") || 0;
                    if (i > n) {
                        e.setAttribute("headingRows", i + o, t)
                    }
                    if (n === 0 || n === t.childCount) {
                        XS(e, t, n, o, this.getColumns(t));
                        return
                    }
                    const r = new ZP(t, {endRow: n});
                    let s = 0;
                    for (const {row: t, rowspan: i, colspan: a, cell: c} of r) {
                        const r = t < n;
                        const l = t + i > n;
                        if (r && l) {
                            e.setAttribute("rowspan", i + o, c)
                        }
                        if (t === n) {
                            s += a
                        }
                    }
                    XS(e, t, n, o, s)
                })
            }

            insertColumns(t, e = {}) {
                const i = this.editor.model;
                const n = e.at || 0;
                const o = e.columns || 1;
                i.change(e => {
                    const i = t.getAttribute("headingColumns");
                    if (n < i) {
                        e.setAttribute("headingColumns", i + o, t)
                    }
                    const r = this.getColumns(t);
                    if (n === 0 || r === n) {
                        for (const i of t.getChildren()) {
                            ZS(o, e, e.createPositionAt(i, n ? "end" : 0))
                        }
                        return
                    }
                    const s = new ZP(t, {column: n, includeSpanned: true});
                    for (const {row: i, cell: r, cellIndex: a} of s) {
                        const c = parseInt(r.getAttribute("rowspan") || 1);
                        const l = parseInt(r.getAttribute("colspan") || 1);
                        if (r.index !== n && l > 1) {
                            e.setAttribute("colspan", l + o, r);
                            s.skipRow(i);
                            if (c > 1) {
                                for (let t = i + 1; t < i + c; t++) {
                                    s.skipRow(t)
                                }
                            }
                        } else {
                            const n = e.createPositionAt(t.getChild(i), a);
                            ZS(o, e, n)
                        }
                    }
                })
            }

            splitCellVertically(t, e = 2) {
                const i = this.editor.model;
                const n = t.parent;
                const o = n.parent;
                const r = parseInt(t.getAttribute("rowspan") || 1);
                const s = parseInt(t.getAttribute("colspan") || 1);
                i.change(i => {
                    if (s > 1) {
                        const {newCellsSpan: n, updatedSpan: o} = tE(s, e);
                        qP("colspan", o, t, i);
                        const a = {};
                        if (n > 1) {
                            a.colspan = n
                        }
                        if (r > 1) {
                            a.rowspan = r
                        }
                        const c = s > e ? e - 1 : s - 1;
                        ZS(c, i, i.createPositionAfter(t), a)
                    }
                    if (s < e) {
                        const n = e - s;
                        const a = [...new ZP(o)];
                        const {column: c} = a.find(({cell: e}) => e === t);
                        const l = a.filter(({cell: e, colspan: i, column: n}) => {
                            const o = e !== t && n === c;
                            const r = n < c && n + i > c;
                            return o || r
                        });
                        for (const {cell: t, colspan: e} of l) {
                            i.setAttribute("colspan", e + n, t)
                        }
                        const d = {};
                        if (r > 1) {
                            d.rowspan = r
                        }
                        ZS(n, i, i.createPositionAfter(t), d);
                        const u = o.getAttribute("headingColumns") || 0;
                        if (u > c) {
                            qP("headingColumns", u + n, o, i)
                        }
                    }
                })
            }

            splitCellHorizontally(t, e = 2) {
                const i = this.editor.model;
                const n = t.parent;
                const o = n.parent;
                const r = o.getChildIndex(n);
                const s = parseInt(t.getAttribute("rowspan") || 1);
                const a = parseInt(t.getAttribute("colspan") || 1);
                i.change(i => {
                    if (s > 1) {
                        const n = [...new ZP(o, {startRow: r, endRow: r + s - 1, includeSpanned: true})];
                        const {newCellsSpan: c, updatedSpan: l} = tE(s, e);
                        qP("rowspan", l, t, i);
                        const {column: d} = n.find(({cell: e}) => e === t);
                        const u = {};
                        if (c > 1) {
                            u.rowspan = c
                        }
                        if (a > 1) {
                            u.colspan = a
                        }
                        for (const {column: t, row: e, cellIndex: s} of n) {
                            const n = e >= r + l;
                            const a = t === d;
                            const h = (e + r + l) % c === 0;
                            if (n && a && h) {
                                const t = i.createPositionAt(o.getChild(e), s);
                                ZS(1, i, t, u)
                            }
                        }
                    }
                    if (s < e) {
                        const n = e - s;
                        const c = [...new ZP(o, {startRow: 0, endRow: r})];
                        for (const {cell: e, rowspan: o, row: s} of c) {
                            if (e !== t && s + o > r) {
                                const t = o + n;
                                i.setAttribute("rowspan", t, e)
                            }
                        }
                        const l = {};
                        if (a > 1) {
                            l.colspan = a
                        }
                        XS(i, o, r + 1, n, 1, l);
                        const d = o.getAttribute("headingRows") || 0;
                        if (d > r) {
                            qP("headingRows", d + n, o, i)
                        }
                    }
                })
            }

            getColumns(t) {
                const e = t.getChild(0);
                return [...e.getChildren()].reduce((t, e) => {
                    const i = parseInt(e.getAttribute("colspan") || 1);
                    return t + i
                }, 0)
            }

            getRows(t) {
                return t.childCount
            }
        }

        function XS(t, e, i, n, o, r = {}) {
            for (let s = 0; s < n; s++) {
                const n = t.createElement("tableRow");
                t.insert(n, e, i);
                ZS(o, t, t.createPositionAt(n, "end"), r)
            }
        }

        function ZS(t, e, i, n = {}) {
            for (let o = 0; o < t; o++) {
                UP(e, i, n)
            }
        }

        function tE(t, e) {
            if (t < e) {
                return {newCellsSpan: 1, updatedSpan: 1}
            }
            const i = Math.floor(t / e);
            const n = t - i * e + i;
            return {newCellsSpan: i, updatedSpan: n}
        }

        function eE(t) {
            t.document.registerPostFixer(e => iE(e, t))
        }

        function iE(t, e) {
            const i = e.document.differ.getChanges();
            let n = false;
            const o = new Set;
            for (const e of i) {
                let i;
                if (e.name == "table" && e.type == "insert") {
                    i = e.position.nodeAfter
                }
                if (e.name == "tableRow" || e.name == "tableCell") {
                    i = WP("table", e.position)
                }
                if (aE(e)) {
                    i = WP("table", e.range.start)
                }
                if (i && !o.has(i)) {
                    n = nE(i, t) || n;
                    n = oE(i, t) || n;
                    o.add(i)
                }
            }
            return n
        }

        function nE(t, e) {
            let i = false;
            const n = rE(t);
            if (n.length) {
                i = true;
                for (const t of n) {
                    qP("rowspan", t.rowspan, t.cell, e, 1)
                }
            }
            return i
        }

        function oE(t, e) {
            let i = false;
            const n = sE(t);
            const o = n[0];
            const r = Object.values(n).every(t => t === o);
            if (!r) {
                const o = Object.values(n).reduce((t, e) => e > t ? e : t, 0);
                for (const [r, s] of Object.entries(n)) {
                    const n = o - s;
                    if (n) {
                        for (let i = 0; i < n; i++) {
                            UP(e, e.createPositionAt(t.getChild(r), "end"))
                        }
                        i = true
                    }
                }
            }
            return i
        }

        function rE(t) {
            const e = parseInt(t.getAttribute("headingRows") || 0);
            const i = t.childCount;
            const n = [];
            for (const {row: o, rowspan: r, cell: s} of new ZP(t)) {
                if (r < 2) {
                    continue
                }
                const t = o < e;
                const a = t ? e : i;
                if (o + r > a) {
                    const t = a - o;
                    n.push({cell: s, rowspan: t})
                }
            }
            return n
        }

        function sE(t) {
            const e = {};
            for (const {row: i} of new ZP(t, {includeSpanned: true})) {
                if (!e[i]) {
                    e[i] = 0
                }
                e[i] += 1
            }
            return e
        }

        function aE(t) {
            const e = t.type === "attribute";
            const i = t.attributeKey;
            return e && (i === "headingRows" || i === "colspan" || i === "rowspan")
        }

        function cE(t) {
            t.document.registerPostFixer(e => lE(e, t))
        }

        function lE(t, e) {
            const i = e.document.differ.getChanges();
            let n = false;
            for (const e of i) {
                if (e.type == "insert" && e.name == "table") {
                    n = dE(e.position.nodeAfter, t) || n
                }
                if (e.type == "insert" && e.name == "tableRow") {
                    n = uE(e.position.nodeAfter, t) || n
                }
                if (e.type == "insert" && e.name == "tableCell") {
                    n = hE(e.position.nodeAfter, t) || n
                }
                if (fE(e)) {
                    n = hE(e.position.parent, t) || n
                }
            }
            return n
        }

        function dE(t, e) {
            let i = false;
            for (const n of t.getChildren()) {
                i = uE(n, e) || i
            }
            return i
        }

        function uE(t, e) {
            let i = false;
            for (const n of t.getChildren()) {
                i = hE(n, e) || i
            }
            return i
        }

        function hE(t, e) {
            if (t.childCount == 0) {
                e.insertElement("paragraph", t);
                return true
            }
            const i = Array.from(t.getChildren()).filter(t => t.is("text"));
            for (const t of i) {
                e.wrap(e.createRangeOn(t), "paragraph")
            }
            return !!i.length
        }

        function fE(t) {
            if (!t.position || !t.position.parent.is("tableCell")) {
                return false
            }
            return t.type == "insert" && t.name == "$text" || t.type == "remove"
        }

        function gE(t) {
            t.document.registerPostFixer(() => mE(t))
        }

        function mE(t) {
            const e = t.document.differ;
            const i = new Set;
            for (const t of e.getChanges()) {
                const e = t.type == "insert" || t.type == "remove" ? t.position.parent : t.range.start.parent;
                if (e.is("tableCell") && pE(e, t.type)) {
                    i.add(e)
                }
            }
            if (i.size) {
                for (const t of i.values()) {
                    e.refreshItem(t)
                }
                return true
            }
            return false
        }

        function pE(t, e) {
            const i = Array.from(t.getChildren()).some(t => t.is("paragraph"));
            if (!i) {
                return false
            }
            if (e == "attribute") {
                const e = Array.from(t.getChild(0).getAttributeKeys()).length;
                return t.childCount === 1 && e < 2
            }
            return t.childCount <= (e == "insert" ? 2 : 1)
        }

        var bE = i(92);

        class wE extends mp {
            static get pluginName() {
                return "TableEditing"
            }

            init() {
                const t = this.editor;
                const e = t.model;
                const i = e.schema;
                const n = t.conversion;
                i.register("table", {
                    allowWhere: "$block",
                    allowAttributes: ["headingRows", "headingColumns"],
                    isLimit: true,
                    isObject: true,
                    isBlock: true
                });
                i.register("tableRow", {allowIn: "table", isLimit: true});
                i.register("tableCell", {allowIn: "tableRow", allowAttributes: ["colspan", "rowspan"], isObject: true});
                i.extend("$block", {allowIn: "tableCell"});
                i.addChildCheck((t, e) => {
                    if (e.name == "table" && Array.from(t.getNames()).includes("table")) {
                        return false
                    }
                });
                n.for("upcast").add(JP());
                n.for("editingDowncast").add(lS({asWidget: true}));
                n.for("dataDowncast").add(lS());
                n.for("upcast").elementToElement({model: "tableRow", view: "tr"});
                n.for("editingDowncast").add(dS({asWidget: true}));
                n.for("dataDowncast").add(dS());
                n.for("downcast").add(gS());
                n.for("upcast").add(YP("td"));
                n.for("upcast").add(YP("th"));
                n.for("editingDowncast").add(uS({asWidget: true}));
                n.for("dataDowncast").add(uS());
                n.attributeToAttribute({model: "colspan", view: "colspan"});
                n.attributeToAttribute({model: "rowspan", view: "rowspan"});
                n.for("editingDowncast").add(fS({asWidget: true}));
                n.for("dataDowncast").add(fS());
                n.for("editingDowncast").add(hS({asWidget: true}));
                n.for("dataDowncast").add(hS());
                t.commands.add("insertTable", new SS(t));
                t.commands.add("insertTableRowAbove", new RS(t, {order: "above"}));
                t.commands.add("insertTableRowBelow", new RS(t, {order: "below"}));
                t.commands.add("insertTableColumnLeft", new OS(t, {order: "left"}));
                t.commands.add("insertTableColumnRight", new OS(t, {order: "right"}));
                t.commands.add("removeTableRow", new FS(t));
                t.commands.add("removeTableColumn", new WS(t));
                t.commands.add("splitTableCellVertically", new IS(t, {direction: "vertically"}));
                t.commands.add("splitTableCellHorizontally", new IS(t, {direction: "horizontally"}));
                t.commands.add("mergeTableCellRight", new VS(t, {direction: "right"}));
                t.commands.add("mergeTableCellLeft", new VS(t, {direction: "left"}));
                t.commands.add("mergeTableCellDown", new VS(t, {direction: "down"}));
                t.commands.add("mergeTableCellUp", new VS(t, {direction: "up"}));
                t.commands.add("setTableColumnHeader", new YS(t));
                t.commands.add("setTableRowHeader", new GS(t));
                eE(e);
                gE(e);
                cE(e);
                this.editor.keystrokes.set("Tab", (...t) => this._handleTabOnSelectedTable(...t), {priority: "low"});
                this.editor.keystrokes.set("Tab", this._getTabHandler(true), {priority: "low"});
                this.editor.keystrokes.set("Shift+Tab", this._getTabHandler(false), {priority: "low"})
            }

            static get requires() {
                return [QS]
            }

            _handleTabOnSelectedTable(t, e) {
                const i = this.editor;
                const n = i.model.document.selection;
                if (!n.isCollapsed && n.rangeCount === 1 && n.getFirstRange().isFlat) {
                    const t = n.getSelectedElement();
                    if (!t || !t.is("table")) {
                        return
                    }
                    e();
                    i.model.change(e => {
                        e.setSelection(e.createRangeIn(t.getChild(0).getChild(0)))
                    })
                }
            }

            _getTabHandler(t) {
                const e = this.editor;
                return (i, n) => {
                    const o = e.model.document.selection;
                    const r = rS(o)[0];
                    if (!r) {
                        return
                    }
                    n();
                    const s = r.parent;
                    const a = s.parent;
                    const c = a.getChildIndex(s);
                    const l = s.getChildIndex(r);
                    const d = l === 0;
                    if (!t && d && c === 0) {
                        return
                    }
                    const u = l === s.childCount - 1;
                    const h = c === a.childCount - 1;
                    if (t && h && u) {
                        e.execute("insertTableRowBelow");
                        if (c === a.childCount - 1) {
                            return
                        }
                    }
                    let f;
                    if (t && u) {
                        const t = a.getChild(c + 1);
                        f = t.getChild(0)
                    } else if (!t && d) {
                        const t = a.getChild(c - 1);
                        f = t.getChild(t.childCount - 1)
                    } else {
                        f = s.getChild(l + (t ? 1 : -1))
                    }
                    e.model.change(t => {
                        t.setSelection(t.createRangeIn(f))
                    })
                }
            }
        }

        var kE = i(94);

        class _E extends Gp {
            constructor(t) {
                super(t);
                const e = this.bindTemplate;
                this.items = this.createCollection();
                this.set("rows", 0);
                this.set("columns", 0);
                this.bind("label").to(this, "columns", this, "rows", (t, e) => `${e} × ${t}`);
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck"]},
                    children: [{
                        tag: "div",
                        attributes: {class: ["ck-insert-table-dropdown__grid"]},
                        children: this.items
                    }, {
                        tag: "div",
                        attributes: {class: ["ck-insert-table-dropdown__label"]},
                        children: [{text: e.to("label")}]
                    }],
                    on: {
                        mousedown: e.to(t => {
                            t.preventDefault()
                        }), click: e.to(() => {
                            this.fire("execute")
                        })
                    }
                });
                for (let t = 0; t < 100; t++) {
                    const e = new vE;
                    e.on("over", () => {
                        const e = Math.floor(t / 10);
                        const i = t % 10;
                        this.set("rows", e + 1);
                        this.set("columns", i + 1)
                    });
                    this.items.add(e)
                }
                this.on("change:columns", () => {
                    this._highlightGridBoxes()
                });
                this.on("change:rows", () => {
                    this._highlightGridBoxes()
                })
            }

            focus() {
            }

            focusLast() {
            }

            _highlightGridBoxes() {
                const t = this.rows;
                const e = this.columns;
                this.items.map((i, n) => {
                    const o = Math.floor(n / 10);
                    const r = n % 10;
                    const s = o < t && r < e;
                    i.set("isOn", s)
                })
            }
        }

        class vE extends Gp {
            constructor(t) {
                super(t);
                const e = this.bindTemplate;
                this.set("isOn", false);
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck-insert-table-dropdown-grid-box", e.if("isOn", "ck-on")]},
                    on: {mouseover: e.to("over")}
                })
            }
        }

        var yE = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M3 6v3h4V6H3zm0 4v3h4v-3H3zm0 4v3h4v-3H3zm5 3h4v-3H8v3zm5 0h4v-3h-4v3zm4-4v-3h-4v3h4zm0-4V6h-4v3h4zm1.5 8a1.5 1.5 0 0 1-1.5 1.5H3A1.5 1.5 0 0 1 1.5 17V4c.222-.863 1.068-1.5 2-1.5h13c.932 0 1.778.637 2 1.5v13zM12 13v-3H8v3h4zm0-4V6H8v3h4z"/></svg>';
        var xE = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z" opacity=".6"/><path d="M18 7v1H2V7h16zm0 5v1H2v-1h16z" opacity=".6"/><path d="M14 1v18a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1zm-2 1H8v4h4V2zm0 6H8v4h4V8zm0 6H8v4h4v-4z"/></svg>';
        var CE = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z" opacity=".6"/><path d="M7 2h1v16H7V2zm5 0h1v16h-1V2z" opacity=".6"/><path d="M1 6h18a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1zm1 2v4h4V8H2zm6 0v4h4V8H8zm6 0v4h4V8h-4z"/></svg>';
        var AE = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z" opacity=".6"/><path d="M7 2h1v16H7V2zm5 0h1v7h-1V2zm6 5v1H2V7h16zM8 12v1H2v-1h6z" opacity=".6"/><path d="M7 7h12a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1zm1 2v9h10V9H8z"/></svg>';

        class TE extends mp {
            init() {
                const t = this.editor;
                const e = this.editor.t;
                const i = t.locale.contentLanguageDirection;
                const n = i === "ltr";
                t.ui.componentFactory.add("insertTable", i => {
                    const n = t.commands.get("insertTable");
                    const o = Wb(i);
                    o.bind("isEnabled").to(n);
                    o.buttonView.set({icon: yE, label: e("ki"), tooltip: true});
                    let r;
                    o.on("change:isOpen", () => {
                        if (r) {
                            return
                        }
                        r = new _E(i);
                        o.panelView.children.add(r);
                        r.delegate("execute").to(o);
                        o.buttonView.on("open", () => {
                            r.rows = 0;
                            r.columns = 0
                        });
                        o.on("execute", () => {
                            t.execute("insertTable", {rows: r.rows, columns: r.columns});
                            t.editing.view.focus()
                        })
                    });
                    return o
                });
                t.ui.componentFactory.add("tableColumn", t => {
                    const i = [{
                        type: "switchbutton",
                        model: {commandName: "setTableColumnHeader", label: e("kj"), bindIsOn: true}
                    }, {type: "separator"}, {
                        type: "button",
                        model: {commandName: n ? "insertTableColumnLeft" : "insertTableColumnRight", label: e("kk")}
                    }, {
                        type: "button",
                        model: {commandName: n ? "insertTableColumnRight" : "insertTableColumnLeft", label: e("kl")}
                    }, {type: "button", model: {commandName: "removeTableColumn", label: e("km")}}];
                    return this._prepareDropdown(e("kn"), xE, i, t)
                });
                t.ui.componentFactory.add("tableRow", t => {
                    const i = [{
                        type: "switchbutton",
                        model: {commandName: "setTableRowHeader", label: e("ko"), bindIsOn: true}
                    }, {type: "separator"}, {
                        type: "button",
                        model: {commandName: "insertTableRowBelow", label: e("kp")}
                    }, {type: "button", model: {commandName: "insertTableRowAbove", label: e("kq")}}, {
                        type: "button",
                        model: {commandName: "removeTableRow", label: e("kr")}
                    }];
                    return this._prepareDropdown(e("ks"), CE, i, t)
                });
                t.ui.componentFactory.add("mergeTableCells", t => {
                    const i = [{
                        type: "button",
                        model: {commandName: "mergeTableCellUp", label: e("kt")}
                    }, {
                        type: "button",
                        model: {commandName: n ? "mergeTableCellRight" : "mergeTableCellLeft", label: e("ku")}
                    }, {type: "button", model: {commandName: "mergeTableCellDown", label: e("kv")}}, {
                        type: "button",
                        model: {commandName: n ? "mergeTableCellLeft" : "mergeTableCellRight", label: e("kw")}
                    }, {type: "separator"}, {
                        type: "button",
                        model: {commandName: "splitTableCellVertically", label: e("kx")}
                    }, {type: "button", model: {commandName: "splitTableCellHorizontally", label: e("ky")}}];
                    return this._prepareDropdown(e("kz"), AE, i, t)
                })
            }

            _prepareDropdown(t, e, i, n) {
                const o = this.editor;
                const r = Wb(n);
                const s = [];
                const a = new ys;
                for (const t of i) {
                    PE(t, o, s, a)
                }
                Ub(r, a, o.ui.componentFactory);
                r.buttonView.set({label: t, icon: e, tooltip: true});
                r.bind("isEnabled").toMany(s, "isEnabled", (...t) => t.some(t => t));
                this.listenTo(r, "execute", t => {
                    o.execute(t.source.commandName);
                    o.editing.view.focus()
                });
                return r
            }
        }

        function PE(t, e, i, n) {
            const o = t.model = new e_(t.model);
            const {commandName: r, bindIsOn: s} = t.model;
            if (t.type === "button" || t.type === "switchbutton") {
                const t = e.commands.get(r);
                i.push(t);
                o.set({commandName: r});
                o.bind("isEnabled").to(t);
                if (s) {
                    o.bind("isOn").to(t, "value")
                }
            }
            o.set({withText: true});
            n.add(t)
        }

        class SE extends Ju {
            constructor(t) {
                super(t);
                this.domEventType = ["mousemove", "mouseup", "mouseleave"]
            }

            onDomEvent(t) {
                this.fire(t.type, t)
            }
        }

        function EE(t, e, i) {
            const n = Array.from(t);
            const o = n[0];
            const r = n[n.length - 1];
            const {row: s, column: a} = e.getCellLocation(o);
            const c = RE(n, a, i, e);
            const {row: l, column: d} = e.getCellLocation(r);
            const u = d - a + 1;
            const h = l - s + 1;
            IE(c, u, h, i, e);
            const f = WP("table", o);
            VE(c, f, s, a, i);
            return c
        }

        function RE(t, e, i, n) {
            const o = i.createElement("table");
            const r = new Map;
            const s = new Map;
            for (const e of t) {
                const t = WP("tableRow", e);
                if (!r.has(t)) {
                    const e = t._clone();
                    i.append(e, o);
                    r.set(t, e)
                }
                const a = e._clone(true);
                const {column: c} = n.getCellLocation(e);
                s.set(a, c);
                i.append(a, r.get(t))
            }
            OE(o, e, s, i, n);
            return o
        }

        function OE(t, e, i, n, o) {
            for (const r of t.getChildren()) {
                for (const t of Array.from(r.getChildren())) {
                    const {column: r} = o.getCellLocation(t);
                    const s = i.get(t);
                    const a = s - e;
                    if (r !== a) {
                        for (let e = 0; e < a - r; e++) {
                            const e = n.createElement("tableCell");
                            n.insert(e, n.createPositionBefore(t));
                            const i = n.createElement("paragraph");
                            n.insert(i, e, 0);
                            n.insertText("", i, 0)
                        }
                    }
                }
            }
        }

        function IE(t, e, i, n, o) {
            for (const r of t.getChildren()) {
                for (const t of r.getChildren()) {
                    const r = parseInt(t.getAttribute("colspan") || 1);
                    const s = parseInt(t.getAttribute("rowspan") || 1);
                    const {row: a, column: c} = o.getCellLocation(t);
                    if (c + r > e) {
                        const i = e - c;
                        if (i > 1) {
                            n.setAttribute("colspan", i, t)
                        } else {
                            n.removeAttribute("colspan", t)
                        }
                    }
                    if (a + s > i) {
                        const e = i - a;
                        if (e > 1) {
                            n.setAttribute("rowspan", e, t)
                        } else {
                            n.removeAttribute("rowspan", t)
                        }
                    }
                }
            }
        }

        function VE(t, e, i, n, o) {
            const r = parseInt(e.getAttribute("headingRows") || 0);
            if (r > 0) {
                const e = r - i;
                o.setAttribute("headingRows", e, t)
            }
            const s = parseInt(e.getAttribute("headingColumns") || 0);
            if (s > 0) {
                const e = s - n;
                o.setAttribute("headingColumns", e, t)
            }
        }

        var NE = i(96);

        class ME extends mp {
            static get pluginName() {
                return "TableSelection"
            }

            static get requires() {
                return [QS]
            }

            init() {
                const t = this.editor;
                const e = t.model;
                this.listenTo(e, "deleteContent", (t, e) => this._handleDeleteContent(t, e), {priority: "high"});
                t.editing.view.addObserver(SE);
                this._defineSelectionConverter();
                this._enableShiftClickSelection();
                this._enableMouseDragSelection()
            }

            getSelectedTableCells() {
                const t = this.editor.model.document.selection;
                const e = oS(t);
                if (e.length == 0) {
                    return null
                }
                return e
            }

            getSelectionAsFragment() {
                const t = this.getSelectedTableCells();
                if (!t) {
                    return null
                }
                return this.editor.model.change(e => {
                    const i = e.createDocumentFragment();
                    const n = EE(t, this.editor.plugins.get("TableUtils"), e);
                    e.insert(n, i, 0);
                    return i
                })
            }

            _defineSelectionConverter() {
                const t = this.editor;
                const e = new Set;
                t.conversion.for("editingDowncast").add(t => t.on("selection", (t, n, o) => {
                    const r = o.writer;
                    i(r);
                    const s = this.getSelectedTableCells();
                    if (!s) {
                        return
                    }
                    for (const t of s) {
                        const i = o.mapper.toViewElement(t);
                        r.addClass("ck-editor__editable_selected", i);
                        e.add(i)
                    }
                    const a = o.mapper.toViewElement(s[s.length - 1]);
                    r.setSelection(a, 0)
                }, {priority: "lowest"}));

                function i(t) {
                    for (const i of e) {
                        t.removeClass("ck-editor__editable_selected", i)
                    }
                    e.clear()
                }
            }

            _enableShiftClickSelection() {
                const t = this.editor;
                let e = false;
                this.listenTo(t.editing.view.document, "mousedown", (i, n) => {
                    if (!this.isEnabled) {
                        return
                    }
                    if (!n.domEvent.shiftKey) {
                        return
                    }
                    const o = rS(t.model.document.selection)[0];
                    if (!o) {
                        return
                    }
                    const r = this._getModelTableCellFromDomEvent(n);
                    if (r && zE(o, r)) {
                        e = true;
                        this._setCellSelection(o, r);
                        n.preventDefault()
                    }
                });
                this.listenTo(t.editing.view.document, "mouseup", () => {
                    e = false
                });
                this.listenTo(t.editing.view.document, "selectionChange", t => {
                    if (e) {
                        t.stop()
                    }
                }, {priority: "highest"})
            }

            _enableMouseDragSelection() {
                const t = this.editor;
                let e, i;
                let n = false;
                let o = false;
                this.listenTo(t.editing.view.document, "mousedown", (t, i) => {
                    if (!this.isEnabled) {
                        return
                    }
                    if (i.domEvent.shiftKey || i.domEvent.ctrlKey || i.domEvent.altKey) {
                        return
                    }
                    e = this._getModelTableCellFromDomEvent(i)
                });
                this.listenTo(t.editing.view.document, "mousemove", (t, r) => {
                    if (!r.domEvent.buttons) {
                        return
                    }
                    if (!e) {
                        return
                    }
                    const s = this._getModelTableCellFromDomEvent(r);
                    if (s && zE(e, s)) {
                        i = s;
                        if (!n && i != e) {
                            n = true
                        }
                    }
                    if (!n) {
                        return
                    }
                    o = true;
                    this._setCellSelection(e, i);
                    r.preventDefault()
                });
                this.listenTo(t.editing.view.document, "mouseup", () => {
                    n = false;
                    o = false;
                    e = null;
                    i = null
                });
                this.listenTo(t.editing.view.document, "selectionChange", t => {
                    if (o) {
                        t.stop()
                    }
                }, {priority: "highest"})
            }

            _handleDeleteContent(t, e) {
                const [i, n] = e;
                const o = this.editor.model;
                const r = !n || n.direction == "backward";
                const s = oS(i);
                if (!s.length) {
                    return
                }
                t.stop();
                o.change(t => {
                    const e = s[r ? s.length - 1 : 0];
                    o.change(t => {
                        for (const e of s) {
                            o.deleteContent(t.createSelection(e, "in"))
                        }
                    });
                    const n = o.schema.getNearestSelectionRange(t.createPositionAt(e, 0));
                    if (n) {
                        if (i.is("documentSelection")) {
                            t.setSelection(n)
                        } else {
                            i.setTo(n)
                        }
                    }
                })
            }

            _setCellSelection(t, e) {
                const i = this._getCellsToSelect(t, e);
                this.editor.model.change(t => {
                    t.setSelection(i.cells.map(e => t.createRangeOn(e)), {backward: i.backward})
                })
            }

            _getModelTableCellFromDomEvent(t) {
                const e = t.target;
                const i = this.editor.editing.view.createPositionAt(e, 0);
                const n = this.editor.editing.mapper.toModelPosition(i);
                const o = n.parent;
                if (!o) {
                    return
                }
                if (o.is("tableCell")) {
                    return o
                }
                return WP("tableCell", o)
            }

            _getCellsToSelect(t, e) {
                const i = this.editor.plugins.get("TableUtils");
                const n = i.getCellLocation(t);
                const o = i.getCellLocation(e);
                const r = Math.min(n.row, o.row);
                const s = Math.max(n.row, o.row);
                const a = Math.min(n.column, o.column);
                const c = Math.max(n.column, o.column);
                const l = [];
                for (const e of new ZP(WP("table", t), {startRow: r, endRow: s})) {
                    if (e.column >= a && e.column <= c) {
                        l.push(e.cell)
                    }
                }
                if (BE(n, o)) {
                    return {cells: l.reverse(), backward: true}
                }
                return {cells: l, backward: false}
            }
        }

        function BE(t, e) {
            if (t.row > e.row) {
                return true
            }
            if (t.row == e.row && t.column > e.column) {
                return true
            }
            return false
        }

        function zE(t, e) {
            return t.parent.parent == e.parent.parent
        }

        class LE extends mp {
            static get pluginName() {
                return "TableClipboard"
            }

            static get requires() {
                return [ME]
            }

            init() {
                const t = this.editor;
                const e = t.editing.view.document;
                this.listenTo(e, "copy", (t, e) => this._onCopyCut(t, e));
                this.listenTo(e, "cut", (t, e) => this._onCopyCut(t, e))
            }

            _onCopyCut(t, e) {
                const i = this.editor.plugins.get("TableSelection");
                if (!i.getSelectedTableCells()) {
                    return
                }
                if (t.name == "cut" && this.editor.isReadOnly) {
                    return
                }
                e.preventDefault();
                t.stop();
                const n = this.editor.data;
                const o = this.editor.editing.view.document;
                const r = n.toView(i.getSelectionAsFragment());
                o.fire("clipboardOutput", {dataTransfer: e.dataTransfer, content: r, method: t.name})
            }
        }

        var FE = i(98);

        class DE extends mp {
            static get requires() {
                return [wE, TE, ME, LE, Fv]
            }

            static get pluginName() {
                return "Table"
            }
        }

        var jE = i(100);

        class HE extends Gp {
            constructor(t, e) {
                super(t);
                const i = `ck-labeled-view-${is()}`;
                const n = `ck-labeled-view-status-${is()}`;
                this.view = e(this, i, n);
                this.set("label");
                this.set("isEnabled", true);
                this.set("errorText", null);
                this.set("infoText", null);
                this.set("class");
                this.labelView = this._createLabelView(i);
                this.statusView = this._createStatusView(n);
                this.bind("_statusText").to(this, "errorText", this, "infoText", (t, e) => t || e);
                const o = this.bindTemplate;
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-labeled-view", o.to("class"), o.if("isEnabled", "ck-disabled", t => !t)]},
                    children: [this.labelView, this.view, this.statusView]
                })
            }

            _createLabelView(t) {
                const e = new Mk(this.locale);
                e.for = t;
                e.bind("text").to(this, "label");
                return e
            }

            _createStatusView(t) {
                const e = new Gp(this.locale);
                const i = this.bindTemplate;
                e.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-labeled-view__status", i.if("errorText", "ck-labeled-view__status_error"), i.if("_statusText", "ck-hidden", t => !t)],
                        id: t,
                        role: i.if("errorText", "alert")
                    },
                    children: [{text: i.to("_statusText")}]
                });
                return e
            }

            focus() {
                this.view.focus()
            }
        }

        function WE(t, e, i) {
            const n = new Yv(t.locale);
            n.set({id: e, ariaDescribedById: i});
            n.bind("isReadOnly").to(t, "isEnabled", t => !t);
            n.bind("hasError").to(t, "errorText", t => !!t);
            n.on("input", () => {
                t.errorText = null
            });
            return n
        }

        function qE(t, e, i) {
            const n = Wb(t.locale);
            n.set({id: e, ariaDescribedById: i});
            n.bind("isEnabled").to(t);
            return n
        }

        var UE = i(102);

        class $E extends Gp {
            constructor(t, e) {
                super(t);
                const i = this.bindTemplate;
                this.set("value", "");
                this.set("id");
                this.set("isReadOnly", false);
                this.set("hasError", false);
                this.set("ariaDescribedById");
                this.options = e;
                this._dropdownView = this._createDropdownView(t);
                this._inputView = this._createInputTextView(t);
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-input-color", i.if("hasError", "ck-error")],
                        id: i.to("id"),
                        "aria-invalid": i.if("hasError", true),
                        "aria-describedby": i.to("ariaDescribedById")
                    },
                    children: [this._inputView, this._dropdownView]
                })
            }

            focus() {
                this._inputView.focus()
            }

            _createDropdownView() {
                const t = this.locale;
                const e = this.bindTemplate;
                const i = this._createColorGrid(t);
                const n = Wb(t);
                const o = new Gp;
                const r = this._createRemoveColorButton(t);
                o.setTemplate({
                    tag: "span",
                    attributes: {
                        class: ["ck", "ck-input-color__button__preview"],
                        style: {backgroundColor: e.to("value")}
                    },
                    children: [{
                        tag: "span",
                        attributes: {class: ["ck", "ck-input-color__button__preview__no-color-indicator", e.if("value", "ck-hidden", t => t != "")]}
                    }]
                });
                n.buttonView.extendTemplate({attributes: {class: "ck-input-color__button"}});
                n.buttonView.children.add(o);
                n.panelPosition = t.uiLanguageDirection === "rtl" ? "se" : "sw";
                n.panelView.children.add(r);
                n.panelView.children.add(i);
                n.bind("isEnabled").to(this, "isReadOnly", t => !t);
                return n
            }

            _createInputTextView() {
                const t = this.locale;
                const e = new Yv(t);
                e.bind("value").to(this);
                e.bind("isReadOnly").to(this);
                e.bind("hasError").to(this);
                e.on("input", () => {
                    this.value = e.element.value
                });
                e.delegate("input").to(this);
                return e
            }

            _createRemoveColorButton() {
                const t = this.locale;
                const e = t.t;
                const i = new hb(t);
                i.class = "ck-input-color__remove-color";
                i.withText = true;
                i.icon = zk;
                i.label = e("li");
                i.on("execute", () => {
                    this.value = "";
                    this._dropdownView.isOpen = false;
                    this.fire("input")
                });
                return i
            }

            _createColorGrid(t) {
                const e = new Vk(t, {colorDefinitions: this.options.colorDefinitions, columns: this.options.columns});
                e.on("execute", (t, e) => {
                    this.value = e.value;
                    this._dropdownView.isOpen = false;
                    this.fire("input")
                });
                e.bind("selectedColor").to(this, "value");
                return e
            }
        }

        const GE = nb.defaultPositions;
        const KE = [GE.northArrowSouth, GE.northArrowSouthWest, GE.northArrowSouthEast, GE.southArrowNorth, GE.southArrowNorthWest, GE.southArrowNorthEast];
        const JE = t => t === "";

        function YE(t, e) {
            const i = t.plugins.get("ContextualBalloon");
            if (nS(t.editing.view.document.selection)) {
                let n;
                if (e === "cell") {
                    n = XE(t)
                } else {
                    n = QE(t)
                }
                i.updatePosition(n)
            }
        }

        function QE(t) {
            const e = t.model.document.selection.getFirstPosition();
            const i = WP("table", e);
            const n = t.editing.mapper.toViewElement(i);
            return {target: t.editing.view.domConverter.viewToDom(n), positions: KE}
        }

        function XE(t) {
            const e = uR(t.model.document.selection.getFirstPosition());
            const i = t.editing.mapper.toViewElement(e);
            return {target: t.editing.view.domConverter.viewToDom(i), positions: KE}
        }

        function ZE(t) {
            return {
                none: t("mq"),
                solid: t("mr"),
                dotted: t("ms"),
                dashed: t("mt"),
                double: t("mu"),
                groove: t("mv"),
                ridge: t("mw"),
                inset: t("mx"),
                outset: t("my")
            }
        }

        function tR(t) {
            return t("mz")
        }

        function eR(t) {
            return t("na")
        }

        function iR(t) {
            t = t.trim();
            return JE(t) || tC(t)
        }

        function nR(t) {
            t = t.trim();
            return JE(t) || lR(t) || oC(t) || sC(t)
        }

        function oR(t) {
            t = t.trim();
            return JE(t) || lR(t) || oC(t)
        }

        function rR(t) {
            const e = new ys;
            const i = ZE(t.t);
            for (const n in i) {
                const o = {
                    type: "button",
                    model: new e_({_borderStyleValue: n === "none" ? "" : n, label: i[n], withText: true})
                };
                if (n === "none") {
                    o.model.bind("isOn").to(t, "borderStyle", t => !t)
                } else {
                    o.model.bind("isOn").to(t, "borderStyle", t => t === n)
                }
                e.add(o)
            }
            return e
        }

        function sR({view: t, icons: e, toolbar: i, labels: n, propertyName: o, nameToValue: r}) {
            for (const s in n) {
                const a = new hb(t.locale);
                a.set({label: n[s], icon: e[s]});
                a.bind("isOn").to(t, o, t => t === r(s));
                a.on("execute", () => {
                    t[o] = r(s)
                });
                i.items.add(a)
            }
        }

        const aR = [{color: "hsl(0, 0%, 0%)", label: "Black"}, {
            color: "hsl(0, 0%, 30%)",
            label: "Dim grey"
        }, {color: "hsl(0, 0%, 60%)", label: "Grey"}, {
            color: "hsl(0, 0%, 90%)",
            label: "Light grey"
        }, {color: "hsl(0, 0%, 100%)", label: "White", hasBorder: true}, {
            color: "hsl(0, 75%, 60%)",
            label: "Red"
        }, {color: "hsl(30, 75%, 60%)", label: "Orange"}, {
            color: "hsl(60, 75%, 60%)",
            label: "Yellow"
        }, {color: "hsl(90, 75%, 60%)", label: "Light green"}, {
            color: "hsl(120, 75%, 60%)",
            label: "Green"
        }, {color: "hsl(150, 75%, 60%)", label: "Aquamarine"}, {
            color: "hsl(180, 75%, 60%)",
            label: "Turquoise"
        }, {color: "hsl(210, 75%, 60%)", label: "Light blue"}, {
            color: "hsl(240, 75%, 60%)",
            label: "Blue"
        }, {color: "hsl(270, 75%, 60%)", label: "Purple"}];

        function cR(t) {
            return (e, i, n) => {
                const o = new $E(e.locale, {colorDefinitions: dR(t.colorConfig), columns: t.columns});
                o.set({id: i, ariaDescribedById: n});
                o.bind("isReadOnly").to(e, "isEnabled", t => !t);
                o.bind("errorText").to(e);
                o.on("input", () => {
                    e.errorText = null
                });
                return o
            }
        }

        function lR(t) {
            const e = parseFloat(t);
            return !Number.isNaN(e) && t === String(e)
        }

        function dR(t) {
            return t.map(t => ({color: t.model, label: t.label, options: {hasBorder: t.hasBorder}}))
        }

        function uR(t) {
            const e = t.nodeAfter && t.nodeAfter.is("tableCell");
            return e ? t.nodeAfter : WP("tableCell", t)
        }

        var hR = i(104);

        class fR extends Gp {
            constructor(t, e = {}) {
                super(t);
                const i = this.bindTemplate;
                this.set("class", e.class || null);
                this.children = this.createCollection();
                if (e.children) {
                    e.children.forEach(t => this.children.add(t))
                }
                this.set("_role", null);
                this.set("_ariaLabelledBy", null);
                if (e.labelView) {
                    this.set({_role: "group", _ariaLabelledBy: e.labelView.id})
                }
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-form__row", i.to("class")],
                        role: i.to("_role"),
                        "aria-labelledby": i.to("_ariaLabelledBy")
                    },
                    children: this.children
                })
            }
        }

        var gR = i(106);

        class mR extends Gp {
            constructor(t, e = {}) {
                super(t);
                const i = this.bindTemplate;
                this.children = this.createCollection();
                this.set("class", e.class || null);
                this.set("label", e.label || "");
                const n = new Gp(t);
                n.setTemplate({
                    tag: "span",
                    attributes: {class: ["ck", "ck-form__header__label"]},
                    children: [{text: i.to("label")}]
                });
                this.children.add(n);
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-form__header", i.to("class")]},
                    children: this.children
                })
            }
        }

        var pR = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.261 7.062l2.88 1.663a.75.75 0 0 1-.75 1.3L10.5 8.933v7.317a.75.75 0 1 1-1.5 0V8.932l-1.89 1.093a.75.75 0 0 1-.75-1.3l2.879-1.663a.752.752 0 0 1 .511-.187.752.752 0 0 1 .511.187zM15.25 4a.75.75 0 1 1 0 1.5H4.75a.75.75 0 0 1 0-1.5h10.5z"/></svg>';
        var bR = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.75 11.875a.752.752 0 0 1 .508.184l2.883 1.666a.75.75 0 0 1-.659 1.344l-.091-.044-1.892-1.093.001 4.318a.75.75 0 1 1-1.5 0v-4.317l-1.89 1.092a.75.75 0 0 1-.75-1.3l2.879-1.663a.752.752 0 0 1 .51-.187zM15.25 9a.75.75 0 1 1 0 1.5H4.75a.75.75 0 1 1 0-1.5h10.5zM9.75.375a.75.75 0 0 1 .75.75v4.318l1.89-1.093.092-.045a.75.75 0 0 1 .659 1.344l-2.883 1.667a.752.752 0 0 1-.508.184.752.752 0 0 1-.511-.187L6.359 5.65a.75.75 0 0 1 .75-1.299L9 5.442V1.125a.75.75 0 0 1 .75-.75z"/></svg>';
        var wR = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.239 13.938l-2.88-1.663a.75.75 0 0 1 .75-1.3L9 12.067V4.75a.75.75 0 1 1 1.5 0v7.318l1.89-1.093a.75.75 0 0 1 .75 1.3l-2.879 1.663a.752.752 0 0 1-.511.187.752.752 0 0 1-.511-.187zM4.25 17a.75.75 0 1 1 0-1.5h10.5a.75.75 0 0 1 0 1.5H4.25z"/></svg>';
        var kR = i(12);
        var _R = i(13);
        var vR = i(110);
        const yR = {left: Zw, center: ek, right: tk, justify: ik, top: pR, middle: bR, bottom: wR};

        class xR extends Gp {
            constructor(t, e) {
                super(t);
                this.set({
                    borderStyle: "",
                    borderWidth: "",
                    borderColor: "",
                    padding: "",
                    backgroundColor: "",
                    width: "",
                    height: "",
                    horizontalAlignment: "",
                    verticalAlignment: ""
                });
                this.options = e;
                const {borderStyleDropdown: i, borderWidthInput: n, borderColorInput: o, borderRowLabel: r} = this._createBorderFields();
                const {widthInput: s, operatorLabel: a, heightInput: c, dimensionsLabel: l} = this._createDimensionFields();
                const {horizontalAlignmentToolbar: d, verticalAlignmentToolbar: u, alignmentLabel: h} = this._createAlignmentFields();
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.children = this.createCollection();
                this.borderStyleDropdown = i;
                this.borderWidthInput = n;
                this.borderColorInput = o;
                this.backgroundInput = this._createBackgroundField();
                this.paddingInput = this._createPaddingField();
                this.widthInput = s;
                this.heightInput = c;
                this.horizontalAlignmentToolbar = d;
                this.verticalAlignmentToolbar = u;
                const {saveButtonView: f, cancelButtonView: g} = this._createActionButtons();
                this.saveButtonView = f;
                this.cancelButtonView = g;
                this._focusables = new bp;
                this._focusCycler = new yb({
                    focusables: this._focusables,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "shift + tab", focusNext: "tab"}
                });
                this.children.add(new mR(t, {label: this.t("Свойства ячейки")}));
                this.children.add(new fR(t, {
                    labelView: r,
                    children: [r, i, o, n],
                    class: "ck-table-form__border-row"
                }));
                this.children.add(new fR(t, {children: [this.backgroundInput]}));
                this.children.add(new fR(t, {
                    children: [new fR(t, {
                        labelView: l,
                        children: [l, s, a, c],
                        class: "ck-table-form__dimensions-row"
                    }), new fR(t, {children: [this.paddingInput], class: "ck-table-cell-properties-form__padding-row"})]
                }));
                this.children.add(new fR(t, {
                    labelView: h,
                    children: [h, d, u],
                    class: "ck-table-cell-properties-form__alignment-row"
                }));
                this.children.add(new fR(t, {
                    children: [this.saveButtonView, this.cancelButtonView],
                    class: "ck-table-form__action-row"
                }));
                this.setTemplate({
                    tag: "form",
                    attributes: {
                        class: ["ck", "ck-form", "ck-table-form", "ck-table-cell-properties-form"],
                        tabindex: "-1"
                    },
                    children: this.children
                })
            }

            render() {
                super.render();
                Qv({view: this});
                [this.borderStyleDropdown, this.borderColorInput, this.borderWidthInput, this.backgroundInput, this.widthInput, this.heightInput, this.paddingInput, this.horizontalAlignmentToolbar, this.verticalAlignmentToolbar, this.saveButtonView, this.cancelButtonView].forEach(t => {
                    this._focusables.add(t);
                    this.focusTracker.add(t.element)
                });
                this.keystrokes.listenTo(this.element)
            }

            focus() {
                this._focusCycler.focusFirst()
            }

            _createBorderFields() {
                const t = cR({colorConfig: this.options.borderColors, columns: 5});
                const e = this.locale;
                const i = this.t;
                const n = new Mk(e);
                n.text = i("nb");
                const o = ZE(i);
                const r = new HE(e, qE);
                r.set({label: i("nc"), class: "ck-table-form__border-style"});
                r.view.buttonView.set({isOn: false, withText: true, tooltip: i("nc")});
                r.view.buttonView.bind("label").to(this, "borderStyle", t => o[t ? t : "none"]);
                r.view.on("execute", t => {
                    this.borderStyle = t.source._borderStyleValue
                });
                Ub(r.view, rR(this));
                const s = new HE(e, WE);
                s.set({label: i("nd"), class: "ck-table-form__border-width"});
                s.view.bind("value").to(this, "borderWidth");
                s.bind("isEnabled").to(this, "borderStyle", CR);
                s.view.on("input", () => {
                    this.borderWidth = s.view.element.value
                });
                const a = new HE(e, t);
                a.set({label: i("ne"), class: "ck-table-form__border-color"});
                a.view.bind("value").to(this, "borderColor");
                a.bind("isEnabled").to(this, "borderStyle", CR);
                a.view.on("input", () => {
                    this.borderColor = a.view.value
                });
                this.on("change:borderStyle", (t, e, i) => {
                    if (!CR(i)) {
                        this.borderColor = "";
                        this.borderWidth = ""
                    }
                });
                return {borderRowLabel: n, borderStyleDropdown: r, borderColorInput: a, borderWidthInput: s}
            }

            _createBackgroundField() {
                const t = this.locale;
                const e = this.t;
                const i = cR({colorConfig: this.options.backgroundColors, columns: 5});
                const n = new HE(t, i);
                n.set({label: e("nf"), class: "ck-table-cell-properties-form__background"});
                n.view.bind("value").to(this, "backgroundColor");
                n.view.on("input", () => {
                    this.backgroundColor = n.view.value
                });
                return n
            }

            _createDimensionFields() {
                const t = this.locale;
                const e = this.t;
                const i = new Mk(t);
                i.text = e("ng");
                const n = new HE(t, WE);
                n.set({label: e("nd"), class: "ck-table-form__dimensions-row__width"});
                n.view.bind("value").to(this, "width");
                n.view.on("input", () => {
                    this.width = n.view.element.value
                });
                const o = new Gp(t);
                o.setTemplate({
                    tag: "span",
                    attributes: {class: ["ck-table-form__dimension-operator"]},
                    children: [{text: "×"}]
                });
                const r = new HE(t, WE);
                r.set({label: e("nh"), class: "ck-table-form__dimensions-row__height"});
                r.view.bind("value").to(this, "height");
                r.view.on("input", () => {
                    this.height = r.view.element.value
                });
                return {dimensionsLabel: i, widthInput: n, operatorLabel: o, heightInput: r}
            }

            _createPaddingField() {
                const t = this.locale;
                const e = this.t;
                const i = new HE(t, WE);
                i.set({label: e("ni"), class: "ck-table-cell-properties-form__padding"});
                i.view.bind("value").to(this, "padding");
                i.view.on("input", () => {
                    this.padding = i.view.element.value
                });
                return i
            }

            _createAlignmentFields() {
                const t = this.locale;
                const e = this.t;
                const i = new Mk(t);
                i.text = e("nj");
                const n = new Xb(t);
                const o = this.locale.contentLanguageDirection === "rtl";
                n.set({isCompact: true, ariaLabel: e("nk")});
                sR({
                    view: this,
                    icons: yR,
                    toolbar: n,
                    labels: this._horizontalAlignmentLabels,
                    propertyName: "horizontalAlignment",
                    nameToValue: t => t === (o ? "right" : "left") ? "" : t
                });
                const r = new Xb(t);
                r.set({isCompact: true, ariaLabel: e("nl")});
                sR({
                    view: this,
                    icons: yR,
                    toolbar: r,
                    labels: this._verticalAlignmentLabels,
                    propertyName: "verticalAlignment",
                    nameToValue: t => t === "middle" ? "" : t
                });
                return {horizontalAlignmentToolbar: n, verticalAlignmentToolbar: r, alignmentLabel: i}
            }

            _createActionButtons() {
                const t = this.locale;
                const e = this.t;
                const i = new hb(t);
                const n = new hb(t);
                const o = [this.borderWidthInput, this.borderColorInput, this.backgroundInput, this.paddingInput];
                i.set({label: e("lo"), icon: Xv, class: "ck-button-save", type: "submit", withText: true});
                i.bind("isEnabled").toMany(o, "errorText", (...t) => t.every(t => !t));
                n.set({label: e("lp"), icon: Zv, class: "ck-button-cancel", type: "cancel", withText: true});
                n.delegate("execute").to(this, "cancel");
                return {saveButtonView: i, cancelButtonView: n}
            }

            get _horizontalAlignmentLabels() {
                const t = this.locale;
                const e = this.t;
                const i = e("nm");
                const n = e("nn");
                const o = e("no");
                const r = e("np");
                if (t.uiLanguageDirection === "rtl") {
                    return {right: o, center: n, left: i, justify: r}
                } else {
                    return {left: i, center: n, right: o, justify: r}
                }
            }

            get _verticalAlignmentLabels() {
                const t = this.t;
                return {top: t("nq"), middle: t("nr"), bottom: t("ns")}
            }
        }

        function CR(t) {
            return !!t
        }

        var AR = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.105 18l-.17 1H2.5A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1h15A1.5 1.5 0 0 1 19 2.5v9.975l-.85-.124-.15-.302V8h-5v4h.021l-.172.351-1.916.28-.151.027c-.287.063-.54.182-.755.341L8 13v5h3.105zM2 12h5V8H2v4zm10-4H8v4h4V8zM2 2v5h5V2H2zm0 16h5v-5H2v5zM13 7h5V2h-5v5zM8 2v5h4V2H8z" opacity=".6"/><path d="M15.5 11.5l1.323 2.68 2.957.43-2.14 2.085.505 2.946L15.5 18.25l-2.645 1.39.505-2.945-2.14-2.086 2.957-.43L15.5 11.5zM13 6a1 1 0 0 1 1 1v3.172a2.047 2.047 0 0 0-.293.443l-.858 1.736-1.916.28-.151.027A1.976 1.976 0 0 0 9.315 14H7a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h6zm-1 2H8v4h4V8z"/></svg>';
        const TR = 500;

        class PR extends mp {
            static get requires() {
                return [kb]
            }

            static get pluginName() {
                return "TableCellPropertiesUI"
            }

            constructor(t) {
                super(t);
                t.config.define("table.tableCellProperties", {borderColors: aR, backgroundColors: aR})
            }

            init() {
                const t = this.editor;
                const e = t.t;
                this._balloon = t.plugins.get(kb);
                this.view = this._createPropertiesView();
                this._undoStepBatch = null;
                t.ui.componentFactory.add("tableCellProperties", t => {
                    const i = new hb(t);
                    i.set({label: e("kh"), icon: AR, tooltip: true});
                    this.listenTo(i, "execute", () => this._showView());
                    return i
                })
            }

            destroy() {
                super.destroy();
                this.view.destroy()
            }

            _createPropertiesView() {
                const t = this.editor;
                const e = t.editing.view.document;
                const i = t.config.get("table.tableCellProperties");
                const n = __(i.borderColors);
                const o = k_(t.locale, n);
                const r = __(i.backgroundColors);
                const s = k_(t.locale, r);
                const a = new xR(t.locale, {borderColors: o, backgroundColors: s});
                const c = t.t;
                a.render();
                this.listenTo(a, "submit", () => {
                    this._hideView()
                });
                this.listenTo(a, "cancel", () => {
                    if (this._undoStepBatch.operations.length) {
                        t.execute("undo", this._undoStepBatch)
                    }
                    this._hideView()
                });
                a.keystrokes.set("Esc", (t, e) => {
                    this._hideView();
                    e()
                });
                this.listenTo(t.ui, "update", () => {
                    if (!nS(e.selection)) {
                        this._hideView()
                    } else if (this._isViewVisible) {
                        YE(t, "cell")
                    }
                });
                Db({
                    emitter: a,
                    activator: () => this._isViewInBalloon,
                    contextElements: [this._balloon.view.element],
                    callback: () => this._hideView()
                });
                const l = tR(c);
                const d = eR(c);
                a.on("change:borderStyle", this._getPropertyChangeCallback("tableCellBorderStyle"));
                a.on("change:borderColor", this._getValidatedPropertyChangeCallback({
                    viewField: a.borderColorInput,
                    commandName: "tableCellBorderColor",
                    errorText: l,
                    validator: iR
                }));
                a.on("change:borderWidth", this._getValidatedPropertyChangeCallback({
                    viewField: a.borderWidthInput,
                    commandName: "tableCellBorderWidth",
                    errorText: d,
                    validator: oR
                }));
                a.on("change:padding", this._getValidatedPropertyChangeCallback({
                    viewField: a.paddingInput,
                    commandName: "tableCellPadding",
                    errorText: d,
                    validator: nR
                }));
                a.on("change:width", this._getValidatedPropertyChangeCallback({
                    viewField: a.widthInput,
                    commandName: "tableCellWidth",
                    errorText: d,
                    validator: nR
                }));
                a.on("change:height", this._getValidatedPropertyChangeCallback({
                    viewField: a.heightInput,
                    commandName: "tableCellHeight",
                    errorText: d,
                    validator: nR
                }));
                a.on("change:backgroundColor", this._getValidatedPropertyChangeCallback({
                    viewField: a.backgroundInput,
                    commandName: "tableCellBackgroundColor",
                    errorText: l,
                    validator: iR
                }));
                a.on("change:horizontalAlignment", this._getPropertyChangeCallback("tableCellHorizontalAlignment"));
                a.on("change:verticalAlignment", this._getPropertyChangeCallback("tableCellVerticalAlignment"));
                return a
            }

            _fillViewFormFromCommandValues() {
                const t = this.editor.commands;
                this.view.set({
                    borderStyle: t.get("tableCellBorderStyle").value || "",
                    borderColor: t.get("tableCellBorderColor").value || "",
                    borderWidth: t.get("tableCellBorderWidth").value || "",
                    width: t.get("tableCellWidth").value || "",
                    height: t.get("tableCellHeight").value || "",
                    padding: t.get("tableCellPadding").value || "",
                    backgroundColor: t.get("tableCellBackgroundColor").value || "",
                    horizontalAlignment: t.get("tableCellHorizontalAlignment").value || "",
                    verticalAlignment: t.get("tableCellVerticalAlignment").value || ""
                })
            }

            _showView() {
                const t = this.editor;
                this._balloon.add({view: this.view, position: XE(t)});
                this._undoStepBatch = t.model.createBatch();
                this._fillViewFormFromCommandValues();
                this.view.focus()
            }

            _hideView() {
                if (!this._isViewInBalloon) {
                    return
                }
                const t = this.editor;
                this.stopListening(t.ui, "update");
                this.view.saveButtonView.focus();
                this._balloon.remove(this.view);
                this.editor.editing.view.focus()
            }

            get _isViewVisible() {
                return this._balloon.visibleView === this.view
            }

            get _isViewInBalloon() {
                return this._balloon.hasView(this.view)
            }

            _getPropertyChangeCallback(t) {
                return (e, i, n) => {
                    this.editor.execute(t, {value: n, batch: this._undoStepBatch})
                }
            }

            _getValidatedPropertyChangeCallback({commandName: t, viewField: e, validator: i, errorText: n}) {
                const o = uh(() => {
                    e.errorText = n
                }, TR);
                return (n, r, s) => {
                    o.cancel();
                    if (i(s)) {
                        this.editor.execute(t, {value: s, batch: this._undoStepBatch});
                        e.errorText = null
                    } else {
                        o()
                    }
                }
            }
        }

        function SR(t) {
            t.setNormalizer("border", ER);
            t.setNormalizer("border-top", RR("top"));
            t.setNormalizer("border-right", RR("right"));
            t.setNormalizer("border-bottom", RR("bottom"));
            t.setNormalizer("border-left", RR("left"));
            t.setNormalizer("border-color", OR("color"));
            t.setNormalizer("border-width", OR("width"));
            t.setNormalizer("border-style", OR("style"));
            t.setNormalizer("border-top-color", VR("color", "top"));
            t.setNormalizer("border-top-style", VR("style", "top"));
            t.setNormalizer("border-top-width", VR("width", "top"));
            t.setNormalizer("border-right-color", VR("color", "right"));
            t.setNormalizer("border-right-style", VR("style", "right"));
            t.setNormalizer("border-right-width", VR("width", "right"));
            t.setNormalizer("border-bottom-color", VR("color", "bottom"));
            t.setNormalizer("border-bottom-style", VR("style", "bottom"));
            t.setNormalizer("border-bottom-width", VR("width", "bottom"));
            t.setNormalizer("border-left-color", VR("color", "left"));
            t.setNormalizer("border-left-style", VR("style", "left"));
            t.setNormalizer("border-left-width", VR("width", "left"));
            t.setExtractor("border-top", NR("top"));
            t.setExtractor("border-right", NR("right"));
            t.setExtractor("border-bottom", NR("bottom"));
            t.setExtractor("border-left", NR("left"));
            t.setExtractor("border-top-color", "border.color.top");
            t.setExtractor("border-right-color", "border.color.right");
            t.setExtractor("border-bottom-color", "border.color.bottom");
            t.setExtractor("border-left-color", "border.color.left");
            t.setExtractor("border-top-width", "border.width.top");
            t.setExtractor("border-right-width", "border.width.right");
            t.setExtractor("border-bottom-width", "border.width.bottom");
            t.setExtractor("border-left-width", "border.width.left");
            t.setExtractor("border-top-style", "border.style.top");
            t.setExtractor("border-right-style", "border.style.right");
            t.setExtractor("border-bottom-style", "border.style.bottom");
            t.setExtractor("border-left-style", "border.style.left");
            t.setReducer("border-color", pC("border-color"));
            t.setReducer("border-style", pC("border-style"));
            t.setReducer("border-width", pC("border-width"));
            t.setReducer("border-top", LR("top"));
            t.setReducer("border-right", LR("right"));
            t.setReducer("border-bottom", LR("bottom"));
            t.setReducer("border-left", LR("left"));
            t.setReducer("border", zR);
            t.setStyleRelation("border", ["border-color", "border-style", "border-width", "border-top", "border-right", "border-bottom", "border-left", "border-top-color", "border-right-color", "border-bottom-color", "border-left-color", "border-top-style", "border-right-style", "border-bottom-style", "border-left-style", "border-top-width", "border-right-width", "border-bottom-width", "border-left-width"]);
            t.setStyleRelation("border-color", ["border-top-color", "border-right-color", "border-bottom-color", "border-left-color"]);
            t.setStyleRelation("border-style", ["border-top-style", "border-right-style", "border-bottom-style", "border-left-style"]);
            t.setStyleRelation("border-width", ["border-top-width", "border-right-width", "border-bottom-width", "border-left-width"]);
            t.setStyleRelation("border-top", ["border-top-color", "border-top-style", "border-top-width"]);
            t.setStyleRelation("border-right", ["border-right-color", "border-right-style", "border-right-width"]);
            t.setStyleRelation("border-bottom", ["border-bottom-color", "border-bottom-style", "border-bottom-width"]);
            t.setStyleRelation("border-left", ["border-left-color", "border-left-style", "border-left-width"])
        }

        function ER(t) {
            const {color: e, style: i, width: n} = BR(t);
            return {path: "border", value: {color: mC(e), style: mC(i), width: mC(n)}}
        }

        function RR(t) {
            return e => {
                const {color: i, style: n, width: o} = BR(e);
                const r = {};
                if (i !== undefined) {
                    r.color = {[t]: i}
                }
                if (n !== undefined) {
                    r.style = {[t]: n}
                }
                if (o !== undefined) {
                    r.width = {[t]: o}
                }
                return {path: "border", value: r}
            }
        }

        function OR(t) {
            return e => ({path: "border", value: IR(e, t)})
        }

        function IR(t, e) {
            return {[e]: mC(t)}
        }

        function VR(t, e) {
            return i => ({path: "border", value: {[t]: {[e]: i}}})
        }

        function NR(t) {
            return (e, i) => {
                if (i.border) {
                    return MR(i.border, t)
                }
            }
        }

        function MR(t, e) {
            const i = {};
            if (t.width && t.width[e]) {
                i.width = t.width[e]
            }
            if (t.style && t.style[e]) {
                i.style = t.style[e]
            }
            if (t.color && t.color[e]) {
                i.color = t.color[e]
            }
            return i
        }

        function BR(t) {
            const e = {};
            const i = kC(t);
            for (const t of i) {
                if (oC(t) || /thin|medium|thick/.test(t)) {
                    e.width = t
                } else if (iC(t)) {
                    e.style = t
                } else {
                    e.color = t
                }
            }
            return e
        }

        function zR(t) {
            const e = [];
            e.push(...FR(MR(t, "top"), "top"));
            e.push(...FR(MR(t, "right"), "right"));
            e.push(...FR(MR(t, "bottom"), "bottom"));
            e.push(...FR(MR(t, "left"), "left"));
            return e
        }

        function LR(t) {
            return e => FR(e, t)
        }

        function FR(t, e) {
            const i = [];
            if (t && t.width !== undefined) {
                i.push(t.width)
            }
            if (t && t.style !== undefined) {
                i.push(t.style)
            }
            if (t && t.color !== undefined) {
                i.push(t.color)
            }
            if (i.length) {
                return [[`border-${e}`, i.join(" ")]]
            }
            return []
        }

        function DR(t) {
            t.setNormalizer("padding", wC("padding"));
            t.setNormalizer("padding-top", t => ({path: "padding.top", value: t}));
            t.setNormalizer("padding-right", t => ({path: "padding.right", value: t}));
            t.setNormalizer("padding-bottom", t => ({path: "padding.bottom", value: t}));
            t.setNormalizer("padding-left", t => ({path: "padding.left", value: t}));
            t.setReducer("padding", pC("padding"));
            t.setStyleRelation("padding", ["padding-top", "padding-right", "padding-bottom", "padding-left"])
        }

        function jR(t) {
            t.setNormalizer("background", HR);
            t.setNormalizer("background-color", t => ({path: "background.color", value: t}));
            t.setReducer("background", t => {
                const e = [];
                e.push(["background-color", t.color]);
                return e
            })
        }

        function HR(t) {
            const e = {};
            const i = kC(t);
            for (const t of i) {
                if (cC(t)) {
                    e.repeat = e.repeat || [];
                    e.repeat.push(t)
                } else if (dC(t)) {
                    e.position = e.position || [];
                    e.position.push(t)
                } else if (hC(t)) {
                    e.attachment = t
                } else if (tC(t)) {
                    e.color = t
                } else if (gC(t)) {
                    e.image = t
                }
            }
            return {path: "background", value: e}
        }

        function WR(t, e, i, n) {
            t.for("upcast").attributeToAttribute({
                view: {styles: {[n]: /[\s\S]+/}},
                model: {name: e, key: i, value: t => t.getNormalizedStyle(n)}
            })
        }

        function qR(t, e) {
            t.for("upcast").add(t => t.on("element:" + e, (t, e, i) => {
                const n = ["border-top", "border-right", "border-bottom", "border-left"].filter(t => e.viewItem.hasStyle(t));
                if (!n.length) {
                    return
                }
                const o = {styles: n};
                if (!i.consumable.test(e.viewItem, o)) {
                    return
                }
                if (!e.modelRange) {
                    e = Object.assign(e, i.convertChildren(e.viewItem, e.modelCursor))
                }
                const r = [...e.modelRange.getItems({shallow: true})].pop();
                i.consumable.consume(e.viewItem, o);
                i.writer.setAttribute("borderStyle", e.viewItem.getNormalizedStyle("border-style"), r);
                i.writer.setAttribute("borderColor", e.viewItem.getNormalizedStyle("border-color"), r);
                i.writer.setAttribute("borderWidth", e.viewItem.getNormalizedStyle("border-width"), r)
            }))
        }

        function UR(t, e, i, n) {
            t.for("downcast").attributeToAttribute({
                model: {name: e, key: i},
                view: t => ({key: "style", value: {[n]: t}})
            })
        }

        function $R(t, e, i) {
            t.for("downcast").add(t => t.on(`attribute:${e}:table`, (t, e, n) => {
                const {item: o, attributeNewValue: r} = e;
                const {mapper: s, writer: a} = n;
                if (!n.consumable.consume(e.item, t.name)) {
                    return
                }
                const c = [...s.toViewElement(o).getChildren()].find(t => t.is("table"));
                if (r) {
                    a.setStyle(i, r, c)
                } else {
                    a.removeStyle(i, c)
                }
            }))
        }

        class GR extends jw {
            constructor(t, e) {
                super(t);
                this.attributeName = e
            }

            refresh() {
                const t = this.editor;
                const e = sS(t.model.document.selection);
                this.isEnabled = !!e.length;
                this.value = this._getSingleValue(e)
            }

            execute(t = {}) {
                const {value: e, batch: i} = t;
                const n = this.editor.model;
                const o = sS(n.document.selection);
                const r = this._getValueToSet(e);
                n.enqueueChange(i || "default", t => {
                    if (r) {
                        o.forEach(e => t.setAttribute(this.attributeName, r, e))
                    } else {
                        o.forEach(e => t.removeAttribute(this.attributeName, e))
                    }
                })
            }

            _getAttribute(t) {
                if (!t) {
                    return
                }
                return t.getAttribute(this.attributeName)
            }

            _getValueToSet(t) {
                return t
            }

            _getSingleValue(t) {
                const e = this._getAttribute(t[0]);
                const i = t.every(t => this._getAttribute(t) === e);
                return i ? e : undefined
            }
        }

        class KR extends GR {
            constructor(t) {
                super(t, "padding")
            }

            _getAttribute(t) {
                if (!t) {
                    return
                }
                return $P(t.getAttribute(this.attributeName))
            }

            _getValueToSet(t) {
                return GP(t, "px")
            }
        }

        class JR extends GR {
            constructor(t) {
                super(t, "width")
            }

            _getValueToSet(t) {
                return GP(t, "px")
            }
        }

        class YR extends GR {
            constructor(t) {
                super(t, "height")
            }

            _getValueToSet(t) {
                return GP(t, "px")
            }
        }

        class QR extends GR {
            constructor(t) {
                super(t, "backgroundColor")
            }
        }

        class XR extends GR {
            constructor(t) {
                super(t, "verticalAlignment")
            }
        }

        class ZR extends GR {
            constructor(t) {
                super(t, "horizontalAlignment")
            }
        }

        class tO extends GR {
            constructor(t) {
                super(t, "borderStyle")
            }

            _getAttribute(t) {
                if (!t) {
                    return
                }
                return $P(t.getAttribute(this.attributeName))
            }
        }

        class eO extends GR {
            constructor(t) {
                super(t, "borderColor")
            }

            _getAttribute(t) {
                if (!t) {
                    return
                }
                return $P(t.getAttribute(this.attributeName))
            }
        }

        class iO extends GR {
            constructor(t) {
                super(t, "borderWidth")
            }

            _getAttribute(t) {
                if (!t) {
                    return
                }
                return $P(t.getAttribute(this.attributeName))
            }

            _getValueToSet(t) {
                return GP(t, "px")
            }
        }

        const nO = /^(top|bottom)$/;

        class oO extends mp {
            static get pluginName() {
                return "TableCellPropertiesEditing"
            }

            static get requires() {
                return [wE]
            }

            init() {
                const t = this.editor;
                const e = t.model.schema;
                const i = t.conversion;
                t.data.addStyleProcessorRules(SR);
                rO(e, i);
                t.commands.add("tableCellBorderStyle", new tO(t));
                t.commands.add("tableCellBorderColor", new eO(t));
                t.commands.add("tableCellBorderWidth", new iO(t));
                sO(e, i);
                t.commands.add("tableCellHorizontalAlignment", new ZR(t));
                cO(e, i, "width", "width");
                t.commands.add("tableCellWidth", new JR(t));
                cO(e, i, "height", "height");
                t.commands.add("tableCellHeight", new YR(t));
                t.data.addStyleProcessorRules(DR);
                cO(e, i, "padding", "padding");
                t.commands.add("tableCellPadding", new KR(t));
                t.data.addStyleProcessorRules(jR);
                cO(e, i, "backgroundColor", "background-color");
                t.commands.add("tableCellBackgroundColor", new QR(t));
                aO(e, i);
                t.commands.add("tableCellVerticalAlignment", new XR(t))
            }
        }

        function rO(t, e) {
            t.extend("tableCell", {allowAttributes: ["borderWidth", "borderColor", "borderStyle"]});
            qR(e, "td");
            qR(e, "th");
            UR(e, "tableCell", "borderStyle", "border-style");
            UR(e, "tableCell", "borderColor", "border-color");
            UR(e, "tableCell", "borderWidth", "border-width")
        }

        function sO(t, e) {
            t.extend("tableCell", {allowAttributes: ["horizontalAlignment"]});
            e.attributeToAttribute({
                model: {
                    name: "tableCell",
                    key: "horizontalAlignment",
                    values: ["right", "center", "justify"]
                },
                view: {
                    right: {key: "style", value: {"text-align": "right"}},
                    center: {key: "style", value: {"text-align": "center"}},
                    justify: {key: "style", value: {"text-align": "justify"}}
                }
            })
        }

        function aO(t, e) {
            t.extend("tableCell", {allowAttributes: ["verticalAlignment"]});
            e.attributeToAttribute({
                model: {name: "tableCell", key: "verticalAlignment", values: ["top", "bottom"]},
                view: {
                    top: {key: "style", value: {"vertical-align": "top"}},
                    bottom: {key: "style", value: {"vertical-align": "bottom"}}
                }
            });
            e.for("upcast").attributeToAttribute({
                view: {attributes: {valign: nO}},
                model: {name: "tableCell", key: "verticalAlignment", value: t => t.getAttribute("valign")}
            })
        }

        function cO(t, e, i, n) {
            t.extend("tableCell", {allowAttributes: [i]});
            WR(e, "tableCell", i, n);
            UR(e, "tableCell", i, n)
        }

        class lO extends mp {
            static get pluginName() {
                return "TableCellProperties"
            }

            static get requires() {
                return [oO, PR]
            }
        }

        class dO extends mp {
            static get requires() {
                return [ly]
            }

            static get pluginName() {
                return "TableToolbar"
            }

            afterInit() {
                const t = this.editor;
                const e = t.t;
                const i = t.plugins.get(ly);
                const n = t.config.get("table.contentToolbar");
                const o = t.config.get("table.tableToolbar");
                if (n) {
                    i.register("tableContent", {ariaLabel: e("iv"), items: n, getRelatedElement: nS})
                }
                if (o) {
                    i.register("table", {ariaLabel: e("iv"), items: o, getRelatedElement: iS})
                }
            }
        }

        class uO extends jw {
            constructor(t, e) {
                super(t);
                this.attributeName = e
            }

            refresh() {
                const t = this.editor;
                const e = t.model.document.selection;
                const i = WP("table", e.getFirstPosition());
                this.isEnabled = !!i;
                this.value = this._getValue(i)
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.document.selection;
                const {value: n, batch: o} = t;
                const r = WP("table", i.getFirstPosition());
                const s = this._getValueToSet(n);
                e.enqueueChange(o || "default", t => {
                    if (s) {
                        t.setAttribute(this.attributeName, s, r)
                    } else {
                        t.removeAttribute(this.attributeName, r)
                    }
                })
            }

            _getValue(t) {
                if (!t) {
                    return
                }
                return t.getAttribute(this.attributeName)
            }

            _getValueToSet(t) {
                return t
            }
        }

        class hO extends uO {
            constructor(t) {
                super(t, "backgroundColor")
            }
        }

        class fO extends uO {
            constructor(t) {
                super(t, "borderColor")
            }

            _getValue(t) {
                if (!t) {
                    return
                }
                return $P(t.getAttribute(this.attributeName))
            }
        }

        class gO extends uO {
            constructor(t) {
                super(t, "borderStyle")
            }

            _getValue(t) {
                if (!t) {
                    return
                }
                return $P(t.getAttribute(this.attributeName))
            }
        }

        class mO extends uO {
            constructor(t) {
                super(t, "borderWidth")
            }

            _getValue(t) {
                if (!t) {
                    return
                }
                return $P(t.getAttribute(this.attributeName))
            }

            _getValueToSet(t) {
                return GP(t, "px")
            }
        }

        class pO extends uO {
            constructor(t) {
                super(t, "width")
            }

            _getValueToSet(t) {
                return GP(t, "px")
            }
        }

        class bO extends uO {
            constructor(t) {
                super(t, "height")
            }

            _getValueToSet(t) {
                return GP(t, "px")
            }
        }

        class wO extends uO {
            constructor(t) {
                super(t, "alignment")
            }
        }

        const kO = /^(left|right)$/;

        class _O extends mp {
            static get pluginName() {
                return "TablePropertiesEditing"
            }

            static get requires() {
                return [wE]
            }

            init() {
                const t = this.editor;
                const e = t.model.schema;
                const i = t.conversion;
                t.data.addStyleProcessorRules(SR);
                vO(e, i);
                t.commands.add("tableBorderColor", new fO(t));
                t.commands.add("tableBorderStyle", new gO(t));
                t.commands.add("tableBorderWidth", new mO(t));
                yO(e, i);
                t.commands.add("tableAlignment", new wO(t));
                CO(e, i, "width", "width");
                t.commands.add("tableWidth", new pO(t));
                CO(e, i, "height", "height");
                t.commands.add("tableHeight", new bO(t));
                t.data.addStyleProcessorRules(jR);
                xO(e, i, "backgroundColor", "background-color");
                t.commands.add("tableBackgroundColor", new hO(t))
            }
        }

        function vO(t, e) {
            t.extend("table", {allowAttributes: ["borderWidth", "borderColor", "borderStyle"]});
            qR(e, "table");
            $R(e, "borderColor", "border-color");
            $R(e, "borderStyle", "border-style");
            $R(e, "borderWidth", "border-width")
        }

        function yO(t, e) {
            t.extend("table", {allowAttributes: ["alignment"]});
            e.attributeToAttribute({
                model: {name: "table", key: "alignment", values: ["left", "right"]},
                view: {left: {key: "style", value: {float: "left"}}, right: {key: "style", value: {float: "right"}}},
                converterPriority: "high"
            });
            e.for("upcast").attributeToAttribute({
                view: {attributes: {align: kO}},
                model: {name: "table", key: "alignment", value: t => t.getAttribute("align")}
            })
        }

        function xO(t, e, i, n) {
            t.extend("table", {allowAttributes: [i]});
            WR(e, "table", i, n);
            $R(e, i, n)
        }

        function CO(t, e, i, n) {
            t.extend("table", {allowAttributes: [i]});
            WR(e, "table", i, n);
            UR(e, "table", i, n)
        }

        var AO = i(112);
        const TO = {left: ky, center: _y, right: vy};

        class PO extends Gp {
            constructor(t, e) {
                super(t);
                this.set({
                    borderStyle: "",
                    borderWidth: "",
                    borderColor: "",
                    backgroundColor: "",
                    width: "",
                    height: "",
                    alignment: ""
                });
                this.options = e;
                const {borderStyleDropdown: i, borderWidthInput: n, borderColorInput: o, borderRowLabel: r} = this._createBorderFields();
                const {widthInput: s, operatorLabel: a, heightInput: c, dimensionsLabel: l} = this._createDimensionFields();
                const {alignmentToolbar: d, alignmentLabel: u} = this._createAlignmentFields();
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.children = this.createCollection();
                this.borderStyleDropdown = i;
                this.borderWidthInput = n;
                this.borderColorInput = o;
                this.backgroundInput = this._createBackgroundField();
                this.widthInput = s;
                this.heightInput = c;
                this.alignmentToolbar = d;
                const {saveButtonView: h, cancelButtonView: f} = this._createActionButtons();
                this.saveButtonView = h;
                this.cancelButtonView = f;
                this._focusables = new bp;
                this._focusCycler = new yb({
                    focusables: this._focusables,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "shift + tab", focusNext: "tab"}
                });
                this.children.add(new mR(t, {label: this.t("Свойства таблицы")}));
                this.children.add(new fR(t, {
                    labelView: r,
                    children: [r, i, o, n],
                    class: "ck-table-form__border-row"
                }));
                this.children.add(new fR(t, {children: [this.backgroundInput]}));
                this.children.add(new fR(t, {
                    children: [new fR(t, {
                        labelView: l,
                        children: [l, s, a, c],
                        class: "ck-table-form__dimensions-row"
                    }), new fR(t, {labelView: u, children: [u, d], class: "ck-table-properties-form__alignment-row"})]
                }));
                this.children.add(new fR(t, {
                    children: [this.saveButtonView, this.cancelButtonView],
                    class: "ck-table-form__action-row"
                }));
                this.setTemplate({
                    tag: "form",
                    attributes: {class: ["ck", "ck-form", "ck-table-form", "ck-table-properties-form"], tabindex: "-1"},
                    children: this.children
                })
            }

            render() {
                super.render();
                Qv({view: this});
                [this.borderStyleDropdown, this.borderColorInput, this.borderWidthInput, this.backgroundInput, this.widthInput, this.heightInput, this.alignmentToolbar, this.saveButtonView, this.cancelButtonView].forEach(t => {
                    this._focusables.add(t);
                    this.focusTracker.add(t.element)
                });
                this.keystrokes.listenTo(this.element)
            }

            focus() {
                this._focusCycler.focusFirst()
            }

            _createBorderFields() {
                const t = cR({colorConfig: this.options.borderColors, columns: 5});
                const e = this.locale;
                const i = this.t;
                const n = new Mk(e);
                n.text = i("nb");
                const o = ZE(this.t);
                const r = new HE(e, qE);
                r.set({label: i("nc"), class: "ck-table-form__border-style"});
                r.view.buttonView.set({isOn: false, withText: true, tooltip: i("nc")});
                r.view.buttonView.bind("label").to(this, "borderStyle", t => o[t ? t : "none"]);
                r.view.on("execute", t => {
                    this.borderStyle = t.source._borderStyleValue
                });
                Ub(r.view, rR(this));
                const s = new HE(e, WE);
                s.set({label: i("nd"), class: "ck-table-form__border-width"});
                s.view.bind("value").to(this, "borderWidth");
                s.bind("isEnabled").to(this, "borderStyle", SO);
                s.view.on("input", () => {
                    this.borderWidth = s.view.element.value
                });
                const a = new HE(e, t);
                a.set({label: i("ne"), class: "ck-table-form__border-color"});
                a.view.bind("value").to(this, "borderColor");
                a.bind("isEnabled").to(this, "borderStyle", SO);
                a.view.on("input", () => {
                    this.borderColor = a.view.value
                });
                this.on("change:borderStyle", (t, e, i) => {
                    if (!SO(i)) {
                        this.borderColor = "";
                        this.borderWidth = ""
                    }
                });
                return {borderRowLabel: n, borderStyleDropdown: r, borderColorInput: a, borderWidthInput: s}
            }

            _createBackgroundField() {
                const t = cR({colorConfig: this.options.backgroundColors, columns: 5});
                const e = this.locale;
                const i = this.t;
                const n = new HE(e, t);
                n.set({label: i("nf"), class: "ck-table-properties-form__background"});
                n.view.bind("value").to(this, "backgroundColor");
                n.view.on("input", () => {
                    this.backgroundColor = n.view.value
                });
                return n
            }

            _createDimensionFields() {
                const t = this.locale;
                const e = this.t;
                const i = new Mk(t);
                i.text = e("ng");
                const n = new HE(t, WE);
                n.set({label: e("nd"), class: "ck-table-form__dimensions-row__width"});
                n.view.bind("value").to(this, "width");
                n.view.on("input", () => {
                    this.width = n.view.element.value
                });
                const o = new Gp(t);
                o.setTemplate({
                    tag: "span",
                    attributes: {class: ["ck-table-form__dimension-operator"]},
                    children: [{text: "×"}]
                });
                const r = new HE(t, WE);
                r.set({label: e("nh"), class: "ck-table-form__dimensions-row__height"});
                r.view.bind("value").to(this, "height");
                r.view.on("input", () => {
                    this.height = r.view.element.value
                });
                return {dimensionsLabel: i, widthInput: n, operatorLabel: o, heightInput: r}
            }

            _createAlignmentFields() {
                const t = this.locale;
                const e = this.t;
                const i = new Mk(t);
                i.text = e("nt");
                const n = new Xb(t);
                n.set({isCompact: true, ariaLabel: e("nu")});
                sR({
                    view: this,
                    icons: TO,
                    toolbar: n,
                    labels: this._alignmentLabels,
                    propertyName: "alignment",
                    nameToValue: t => t === "center" ? "" : t
                });
                return {alignmentLabel: i, alignmentToolbar: n}
            }

            _createActionButtons() {
                const t = this.locale;
                const e = this.t;
                const i = new hb(t);
                const n = new hb(t);
                const o = [this.borderWidthInput, this.borderColorInput, this.backgroundInput, this.widthInput, this.heightInput];
                i.set({label: e("lo"), icon: Xv, class: "ck-button-save", type: "submit", withText: true});
                i.bind("isEnabled").toMany(o, "errorText", (...t) => t.every(t => !t));
                n.set({label: e("lp"), icon: Zv, class: "ck-button-cancel", type: "cancel", withText: true});
                n.delegate("execute").to(this, "cancel");
                return {saveButtonView: i, cancelButtonView: n}
            }

            get _alignmentLabels() {
                const t = this.locale;
                const e = this.t;
                const i = e("nv");
                const n = e("nw");
                const o = e("nx");
                if (t.uiLanguageDirection === "rtl") {
                    return {right: o, center: n, left: i}
                } else {
                    return {left: i, center: n, right: o}
                }
            }
        }

        function SO(t) {
            return !!t
        }

        var EO = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M8 2v5h4V2h1v5h5v1h-5v4h.021l-.172.351-1.916.28-.151.027c-.287.063-.54.182-.755.341L8 13v5H7v-5H2v-1h5V8H2V7h5V2h1zm4 6H8v4h4V8z" opacity=".6"/><path d="M15.5 11.5l1.323 2.68 2.957.43-2.14 2.085.505 2.946L15.5 18.25l-2.645 1.39.505-2.945-2.14-2.086 2.957-.43L15.5 11.5zM17 1a2 2 0 0 1 2 2v9.475l-.85-.124-.857-1.736a2.048 2.048 0 0 0-.292-.44L17 3H3v14h7.808l.402.392L10.935 19H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h14z"/></svg>';
        const RO = 500;

        class OO extends mp {
            static get requires() {
                return [kb]
            }

            static get pluginName() {
                return "TablePropertiesUI"
            }

            constructor(t) {
                super(t);
                t.config.define("table.tableProperties", {borderColors: aR, backgroundColors: aR})
            }

            init() {
                const t = this.editor;
                const e = t.t;
                this._balloon = t.plugins.get(kb);
                this.view = this._createPropertiesView();
                this._undoStepBatch = null;
                t.ui.componentFactory.add("tableProperties", t => {
                    const i = new hb(t);
                    i.set({label: e("kg"), icon: EO, tooltip: true});
                    this.listenTo(i, "execute", () => this._showView());
                    return i
                })
            }

            destroy() {
                super.destroy();
                this.view.destroy()
            }

            _createPropertiesView() {
                const t = this.editor;
                const e = t.editing.view.document;
                const i = t.config.get("table.tableProperties");
                const n = __(i.borderColors);
                const o = k_(t.locale, n);
                const r = __(i.backgroundColors);
                const s = k_(t.locale, r);
                const a = new PO(t.locale, {borderColors: o, backgroundColors: s});
                const c = t.t;
                a.render();
                this.listenTo(a, "submit", () => {
                    this._hideView()
                });
                this.listenTo(a, "cancel", () => {
                    if (this._undoStepBatch.operations.length) {
                        t.execute("undo", this._undoStepBatch)
                    }
                    this._hideView()
                });
                a.keystrokes.set("Esc", (t, e) => {
                    this._hideView();
                    e()
                });
                this.listenTo(t.ui, "update", () => {
                    if (!nS(e.selection)) {
                        this._hideView()
                    } else if (this._isViewVisible) {
                        YE(t, "table")
                    }
                });
                Db({
                    emitter: a,
                    activator: () => this._isViewInBalloon,
                    contextElements: [this._balloon.view.element],
                    callback: () => this._hideView()
                });
                const l = tR(c);
                const d = eR(c);
                a.on("change:borderStyle", this._getPropertyChangeCallback("tableBorderStyle"));
                a.on("change:borderColor", this._getValidatedPropertyChangeCallback({
                    viewField: a.borderColorInput,
                    commandName: "tableBorderColor",
                    errorText: l,
                    validator: iR
                }));
                a.on("change:borderWidth", this._getValidatedPropertyChangeCallback({
                    viewField: a.borderWidthInput,
                    commandName: "tableBorderWidth",
                    errorText: d,
                    validator: oR
                }));
                a.on("change:backgroundColor", this._getValidatedPropertyChangeCallback({
                    viewField: a.backgroundInput,
                    commandName: "tableBackgroundColor",
                    errorText: l,
                    validator: iR
                }));
                a.on("change:width", this._getValidatedPropertyChangeCallback({
                    viewField: a.widthInput,
                    commandName: "tableWidth",
                    errorText: d,
                    validator: nR
                }));
                a.on("change:height", this._getValidatedPropertyChangeCallback({
                    viewField: a.heightInput,
                    commandName: "tableHeight",
                    errorText: d,
                    validator: nR
                }));
                a.on("change:alignment", this._getPropertyChangeCallback("tableAlignment"));
                return a
            }

            _fillViewFormFromCommandValues() {
                const t = this.editor.commands;
                this.view.set({
                    borderStyle: t.get("tableBorderStyle").value || "",
                    borderColor: t.get("tableBorderColor").value || "",
                    borderWidth: t.get("tableBorderWidth").value || "",
                    backgroundColor: t.get("tableBackgroundColor").value || "",
                    width: t.get("tableWidth").value || "",
                    height: t.get("tableHeight").value || "",
                    alignment: t.get("tableAlignment").value || ""
                })
            }

            _showView() {
                const t = this.editor;
                this._balloon.add({view: this.view, position: QE(t)});
                this._undoStepBatch = t.model.createBatch();
                this._fillViewFormFromCommandValues();
                this.view.focus()
            }

            _hideView() {
                if (!this._isViewInBalloon) {
                    return
                }
                const t = this.editor;
                this.stopListening(t.ui, "update");
                this.view.saveButtonView.focus();
                this._balloon.remove(this.view);
                this.editor.editing.view.focus()
            }

            get _isViewVisible() {
                return this._balloon.visibleView === this.view
            }

            get _isViewInBalloon() {
                return this._balloon.hasView(this.view)
            }

            _getPropertyChangeCallback(t) {
                return (e, i, n) => {
                    this.editor.execute(t, {value: n, batch: this._undoStepBatch})
                }
            }

            _getValidatedPropertyChangeCallback({commandName: t, viewField: e, validator: i, errorText: n}) {
                const o = uh(() => {
                    e.errorText = n
                }, RO);
                return (n, r, s) => {
                    o.cancel();
                    if (i(s)) {
                        this.editor.execute(t, {value: s, batch: this._undoStepBatch});
                        e.errorText = null
                    } else {
                        o()
                    }
                }
            }
        }

        class IO extends mp {
            static get pluginName() {
                return "TableProperties"
            }

            static get requires() {
                return [_O, OO]
            }
        }

        const VO = "underline";

        class NO extends mp {
            static get pluginName() {
                return "UnderlineEditing"
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: VO});
                t.model.schema.setAttributeProperties(VO, {isFormatting: true, copyOnEnter: true});
                t.conversion.attributeToElement({
                    model: VO,
                    view: "u",
                    upcastAlso: {styles: {"text-decoration": "underline"}}
                });
                t.commands.add(VO, new yk(t, VO));
                t.keystrokes.set("CTRL+U", "underline")
            }
        }

        var MO = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M3 18v-1.5h14V18zm2.2-8V3.6c0-.4.4-.6.8-.6.3 0 .7.2.7.6v6.2c0 2 1.3 2.8 3.2 2.8 1.9 0 3.4-.9 3.4-2.9V3.6c0-.3.4-.5.8-.5.3 0 .7.2.7.5V10c0 2.7-2.2 4-4.9 4-2.6 0-4.7-1.2-4.7-4z"/></svg>';
        const BO = "underline";

        class zO extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add(BO, i => {
                    const n = t.commands.get(BO);
                    const o = new hb(i);
                    o.set({label: e("jn"), icon: MO, keystroke: "CTRL+U", tooltip: true, isToggleable: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute(BO);
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class LO extends mp {
            static get requires() {
                return [NO, zO]
            }

            static get pluginName() {
                return "Underline"
            }
        }

        function* FO(t, e) {
            for (const i of e) {
                if (i && t.getAttributeProperties(i[0]).copyOnEnter) {
                    yield i
                }
            }
        }

        class DO extends jw {
            execute() {
                const t = this.editor.model;
                const e = t.document;
                t.change(i => {
                    jO(this.editor.model, i, e.selection, t.schema);
                    this.fire("afterExecute", {writer: i})
                })
            }
        }

        function jO(t, e, i, n) {
            const o = i.isCollapsed;
            const r = i.getFirstRange();
            const s = r.start.parent;
            const a = r.end.parent;
            if (n.isLimit(s) || n.isLimit(a)) {
                if (!o && s == a) {
                    t.deleteContent(i)
                }
                return
            }
            if (o) {
                const t = FO(e.model.schema, i.getAttributes());
                HO(e, r.start);
                e.setSelectionAttribute(t)
            } else {
                const n = !(r.start.isAtStart && r.end.isAtEnd);
                const o = s == a;
                t.deleteContent(i, {leaveUnmerged: n});
                if (n) {
                    if (o) {
                        HO(e, i.focus)
                    } else {
                        e.setSelection(a, 0)
                    }
                }
            }
        }

        function HO(t, e) {
            t.split(e);
            t.setSelection(e.parent.nextSibling, 0)
        }

        class WO extends Gd {
            constructor(t) {
                super(t);
                const e = this.document;
                e.on("keydown", (t, i) => {
                    if (this.isEnabled && i.keyCode == Nl.enter) {
                        let n;
                        e.once("enter", t => n = t, {priority: "highest"});
                        e.fire("enter", new Ku(e, i.domEvent, {isSoft: i.shiftKey}));
                        if (n && n.stop.called) {
                            t.stop()
                        }
                    }
                })
            }

            observe() {
            }
        }

        class qO extends mp {
            static get pluginName() {
                return "Enter"
            }

            init() {
                const t = this.editor;
                const e = t.editing.view;
                const i = e.document;
                e.addObserver(WO);
                t.commands.add("enter", new DO(t));
                this.listenTo(i, "enter", (i, n) => {
                    n.preventDefault();
                    if (n.isSoft) {
                        return
                    }
                    t.execute("enter");
                    e.scrollToTheSelection()
                }, {priority: "low"})
            }
        }

        class UO extends jw {
            execute() {
                const t = this.editor.model;
                const e = t.document;
                t.change(i => {
                    GO(t, i, e.selection);
                    this.fire("afterExecute", {writer: i})
                })
            }

            refresh() {
                const t = this.editor.model;
                const e = t.document;
                this.isEnabled = $O(t.schema, e.selection)
            }
        }

        function $O(t, e) {
            if (e.rangeCount > 1) {
                return false
            }
            const i = e.anchor;
            if (!i || !t.checkChild(i, "softBreak")) {
                return false
            }
            const n = e.getFirstRange();
            const o = n.start.parent;
            const r = n.end.parent;
            if ((JO(o, t) || JO(r, t)) && o !== r) {
                return false
            }
            return true
        }

        function GO(t, e, i) {
            const n = i.isCollapsed;
            const o = i.getFirstRange();
            const r = o.start.parent;
            const s = o.end.parent;
            const a = r == s;
            if (n) {
                const n = FO(t.schema, i.getAttributes());
                KO(t, e, o.end);
                e.removeSelectionAttribute(i.getAttributeKeys());
                e.setSelectionAttribute(n)
            } else {
                const n = !(o.start.isAtStart && o.end.isAtEnd);
                t.deleteContent(i, {leaveUnmerged: n});
                if (a) {
                    KO(t, e, i.focus)
                } else {
                    if (n) {
                        e.setSelection(s, 0)
                    }
                }
            }
        }

        function KO(t, e, i) {
            const n = e.createElement("softBreak");
            t.insertContent(n, i);
            e.setSelection(n, "after")
        }

        function JO(t, e) {
            if (t.is("rootElement")) {
                return false
            }
            return e.isLimit(t) || JO(t.parent, e)
        }

        class YO extends mp {
            static get pluginName() {
                return "ShiftEnter"
            }

            init() {
                const t = this.editor;
                const e = t.model.schema;
                const i = t.conversion;
                const n = t.editing.view;
                const o = n.document;
                e.register("softBreak", {allowWhere: "$text", isInline: true});
                i.for("upcast").elementToElement({model: "softBreak", view: "br"});
                i.for("downcast").elementToElement({model: "softBreak", view: (t, e) => e.createEmptyElement("br")});
                n.addObserver(WO);
                t.commands.add("shiftEnter", new UO(t));
                this.listenTo(o, "enter", (e, i) => {
                    i.preventDefault();
                    if (!i.isSoft) {
                        return
                    }
                    t.execute("shiftEnter");
                    n.scrollToTheSelection()
                }, {priority: "low"})
            }
        }

        const QO = new Map;

        function XO(t, e, i) {
            let n = QO.get(t);
            if (!n) {
                n = new Map;
                QO.set(t, n)
            }
            n.set(e, i)
        }

        function ZO(t, e) {
            const i = QO.get(t);
            if (i && i.has(e)) {
                return i.get(e)
            }
            return tI
        }

        function tI(t) {
            return [t]
        }

        function eI(t, e, i = {}) {
            const n = ZO(t.constructor, e.constructor);
            try {
                t = t.clone();
                return n(t, e, i)
            } catch (t) {
                throw t
            }
        }

        function iI(t, e, i) {
            t = t.slice();
            e = e.slice();
            const n = new nI(i.document, i.useRelations, i.forceWeakRemove);
            n.setOriginalOperations(t);
            n.setOriginalOperations(e);
            const o = n.originalOperations;
            if (t.length == 0 || e.length == 0) {
                return {operationsA: t, operationsB: e, originalOperations: o}
            }
            const r = new WeakMap;
            for (const e of t) {
                r.set(e, 0)
            }
            const s = {
                nextBaseVersionA: t[t.length - 1].baseVersion + 1,
                nextBaseVersionB: e[e.length - 1].baseVersion + 1,
                originalOperationsACount: t.length,
                originalOperationsBCount: e.length
            };
            let a = 0;
            while (a < t.length) {
                const i = t[a];
                const o = r.get(i);
                if (o == e.length) {
                    a++;
                    continue
                }
                const s = e[o];
                const c = eI(i, s, n.getContext(i, s, true));
                const l = eI(s, i, n.getContext(s, i, false));
                n.updateRelation(i, s);
                n.setOriginalOperations(c, i);
                n.setOriginalOperations(l, s);
                for (const t of c) {
                    r.set(t, o + l.length)
                }
                t.splice(a, 1, ...c);
                e.splice(o, 1, ...l)
            }
            if (i.padWithNoOps) {
                const i = t.length - s.originalOperationsACount;
                const n = e.length - s.originalOperationsBCount;
                rI(t, n - i);
                rI(e, i - n)
            }
            oI(t, s.nextBaseVersionB);
            oI(e, s.nextBaseVersionA);
            return {operationsA: t, operationsB: e, originalOperations: o}
        }

        class nI {
            constructor(t, e, i = false) {
                this.originalOperations = new Map;
                this._history = t.history;
                this._useRelations = e;
                this._forceWeakRemove = !!i;
                this._relations = new Map
            }

            setOriginalOperations(t, e = null) {
                const i = e ? this.originalOperations.get(e) : null;
                for (const e of t) {
                    this.originalOperations.set(e, i || e)
                }
            }

            updateRelation(t, e) {
                switch (t.constructor) {
                    case Zg: {
                        switch (e.constructor) {
                            case om: {
                                if (t.targetPosition.isEqual(e.sourcePosition) || e.movedRange.containsPosition(t.targetPosition)) {
                                    this._setRelation(t, e, "insertAtSource")
                                } else if (t.targetPosition.isEqual(e.deletionPosition)) {
                                    this._setRelation(t, e, "insertBetween")
                                } else if (t.targetPosition.isAfter(e.sourcePosition)) {
                                    this._setRelation(t, e, "moveTargetAfter")
                                }
                                break
                            }
                            case Zg: {
                                if (t.targetPosition.isEqual(e.sourcePosition) || t.targetPosition.isBefore(e.sourcePosition)) {
                                    this._setRelation(t, e, "insertBefore")
                                } else {
                                    this._setRelation(t, e, "insertAfter")
                                }
                                break
                            }
                        }
                        break
                    }
                    case rm: {
                        switch (e.constructor) {
                            case om: {
                                if (t.splitPosition.isBefore(e.sourcePosition)) {
                                    this._setRelation(t, e, "splitBefore")
                                }
                                break
                            }
                            case Zg: {
                                if (t.splitPosition.isEqual(e.sourcePosition) || t.splitPosition.isBefore(e.sourcePosition)) {
                                    this._setRelation(t, e, "splitBefore")
                                }
                                break
                            }
                        }
                        break
                    }
                    case om: {
                        switch (e.constructor) {
                            case om: {
                                if (!t.targetPosition.isEqual(e.sourcePosition)) {
                                    this._setRelation(t, e, "mergeTargetNotMoved")
                                }
                                if (t.sourcePosition.isEqual(e.targetPosition)) {
                                    this._setRelation(t, e, "mergeSourceNotMoved")
                                }
                                if (t.sourcePosition.isEqual(e.sourcePosition)) {
                                    this._setRelation(t, e, "mergeSameElement")
                                }
                                break
                            }
                            case rm: {
                                if (t.sourcePosition.isEqual(e.splitPosition)) {
                                    this._setRelation(t, e, "splitAtSource")
                                }
                            }
                        }
                        break
                    }
                    case em: {
                        const i = t.newRange;
                        if (!i) {
                            return
                        }
                        switch (e.constructor) {
                            case Zg: {
                                const n = $h._createFromPositionAndShift(e.sourcePosition, e.howMany);
                                const o = n.containsPosition(i.start) || n.start.isEqual(i.start);
                                const r = n.containsPosition(i.end) || n.end.isEqual(i.end);
                                if ((o || r) && !n.containsRange(i)) {
                                    this._setRelation(t, e, {
                                        side: o ? "left" : "right",
                                        path: o ? i.start.path.slice() : i.end.path.slice()
                                    })
                                }
                                break
                            }
                            case om: {
                                const n = i.start.isEqual(e.targetPosition);
                                const o = i.start.isEqual(e.deletionPosition);
                                const r = i.end.isEqual(e.deletionPosition);
                                const s = i.end.isEqual(e.sourcePosition);
                                if (n || o || r || s) {
                                    this._setRelation(t, e, {
                                        wasInLeftElement: n,
                                        wasStartBeforeMergedElement: o,
                                        wasEndBeforeMergedElement: r,
                                        wasInRightElement: s
                                    })
                                }
                                break
                            }
                        }
                        break
                    }
                }
            }

            getContext(t, e, i) {
                return {
                    aIsStrong: i,
                    aWasUndone: this._wasUndone(t),
                    bWasUndone: this._wasUndone(e),
                    abRelation: this._useRelations ? this._getRelation(t, e) : null,
                    baRelation: this._useRelations ? this._getRelation(e, t) : null,
                    forceWeakRemove: this._forceWeakRemove
                }
            }

            _wasUndone(t) {
                const e = this.originalOperations.get(t);
                return e.wasUndone || this._history.isUndoneOperation(e)
            }

            _getRelation(t, e) {
                const i = this.originalOperations.get(e);
                const n = this._history.getUndoneOperation(i);
                if (!n) {
                    return null
                }
                const o = this.originalOperations.get(t);
                const r = this._relations.get(o);
                if (r) {
                    return r.get(n) || null
                }
                return null
            }

            _setRelation(t, e, i) {
                const n = this.originalOperations.get(t);
                const o = this.originalOperations.get(e);
                let r = this._relations.get(n);
                if (!r) {
                    r = new Map;
                    this._relations.set(n, r)
                }
                r.set(o, i)
            }
        }

        function oI(t, e) {
            for (const i of t) {
                i.baseVersion = e++
            }
        }

        function rI(t, e) {
            for (let i = 0; i < e; i++) {
                t.push(new Sm(0))
            }
        }

        XO(Qg, Qg, (t, e, i) => {
            if (t.key === e.key) {
                const n = t.range.getDifference(e.range).map(e => new Qg(e, t.key, t.oldValue, t.newValue, 0));
                const o = t.range.getIntersection(e.range);
                if (o) {
                    if (i.aIsStrong) {
                        n.push(new Qg(o, e.key, e.newValue, t.newValue, 0))
                    }
                }
                if (n.length == 0) {
                    return [new Sm(0)]
                }
                return n
            } else {
                return [t]
            }
        });
        XO(Qg, tm, (t, e) => {
            if (t.range.start.hasSameParentAs(e.position) && t.range.containsPosition(e.position)) {
                const i = t.range._getTransformedByInsertion(e.position, e.howMany, !e.shouldReceiveAttributes);
                const n = i.map(e => new Qg(e, t.key, t.oldValue, t.newValue, t.baseVersion));
                if (e.shouldReceiveAttributes) {
                    const i = sI(e, t.key, t.oldValue);
                    if (i) {
                        n.unshift(i)
                    }
                }
                return n
            }
            t.range = t.range._getTransformedByInsertion(e.position, e.howMany, false)[0];
            return [t]
        });

        function sI(t, e, i) {
            const n = t.nodes;
            const o = n.getNode(0).getAttribute(e);
            if (o == i) {
                return null
            }
            const r = new $h(t.position, t.position.getShiftedBy(t.howMany));
            return new Qg(r, e, o, i, 0)
        }

        XO(Qg, om, (t, e) => {
            const i = [];
            if (t.range.start.hasSameParentAs(e.deletionPosition)) {
                if (t.range.containsPosition(e.deletionPosition) || t.range.start.isEqual(e.deletionPosition)) {
                    i.push($h._createFromPositionAndShift(e.graveyardPosition, 1))
                }
            }
            const n = t.range._getTransformedByMergeOperation(e);
            if (!n.isCollapsed) {
                i.push(n)
            }
            return i.map(e => new Qg(e, t.key, t.oldValue, t.newValue, t.baseVersion))
        });
        XO(Qg, Zg, (t, e) => {
            const i = aI(t.range, e);
            return i.map(e => new Qg(e, t.key, t.oldValue, t.newValue, t.baseVersion))
        });

        function aI(t, e) {
            const i = $h._createFromPositionAndShift(e.sourcePosition, e.howMany);
            let n = null;
            let o = [];
            if (i.containsRange(t, true)) {
                n = t
            } else if (t.start.hasSameParentAs(i.start)) {
                o = t.getDifference(i);
                n = t.getIntersection(i)
            } else {
                o = [t]
            }
            const r = [];
            for (let t of o) {
                t = t._getTransformedByDeletion(e.sourcePosition, e.howMany);
                const i = e.getMovedRangeStart();
                const n = t.start.hasSameParentAs(i);
                t = t._getTransformedByInsertion(i, e.howMany, n);
                r.push(...t)
            }
            if (n) {
                r.push(n._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany, false)[0])
            }
            return r
        }

        XO(Qg, rm, (t, e) => {
            if (t.range.end.isEqual(e.insertionPosition)) {
                if (!e.graveyardPosition) {
                    t.range.end.offset++
                }
                return [t]
            }
            if (t.range.start.hasSameParentAs(e.splitPosition) && t.range.containsPosition(e.splitPosition)) {
                const i = t.clone();
                i.range = new $h(e.moveTargetPosition.clone(), t.range.end._getCombined(e.splitPosition, e.moveTargetPosition));
                t.range.end = e.splitPosition.clone();
                t.range.end.stickiness = "toPrevious";
                return [t, i]
            }
            t.range = t.range._getTransformedBySplitOperation(e);
            return [t]
        });
        XO(tm, Qg, (t, e) => {
            const i = [t];
            if (t.shouldReceiveAttributes && t.position.hasSameParentAs(e.range.start) && e.range.containsPosition(t.position)) {
                const n = sI(t, e.key, e.newValue);
                if (n) {
                    i.push(n)
                }
            }
            return i
        });
        XO(tm, tm, (t, e, i) => {
            if (t.position.isEqual(e.position) && i.aIsStrong) {
                return [t]
            }
            t.position = t.position._getTransformedByInsertOperation(e);
            return [t]
        });
        XO(tm, Zg, (t, e) => {
            t.position = t.position._getTransformedByMoveOperation(e);
            return [t]
        });
        XO(tm, rm, (t, e) => {
            t.position = t.position._getTransformedBySplitOperation(e);
            return [t]
        });
        XO(tm, om, (t, e) => {
            t.position = t.position._getTransformedByMergeOperation(e);
            return [t]
        });
        XO(em, tm, (t, e) => {
            if (t.oldRange) {
                t.oldRange = t.oldRange._getTransformedByInsertOperation(e)[0]
            }
            if (t.newRange) {
                t.newRange = t.newRange._getTransformedByInsertOperation(e)[0]
            }
            return [t]
        });
        XO(em, em, (t, e, i) => {
            if (t.name == e.name) {
                if (i.aIsStrong) {
                    t.oldRange = e.newRange ? e.newRange.clone() : null
                } else {
                    return [new Sm(0)]
                }
            }
            return [t]
        });
        XO(em, om, (t, e) => {
            if (t.oldRange) {
                t.oldRange = t.oldRange._getTransformedByMergeOperation(e)
            }
            if (t.newRange) {
                t.newRange = t.newRange._getTransformedByMergeOperation(e)
            }
            return [t]
        });
        XO(em, Zg, (t, e, i) => {
            if (t.oldRange) {
                t.oldRange = $h._createFromRanges(t.oldRange._getTransformedByMoveOperation(e))
            }
            if (t.newRange) {
                if (i.abRelation) {
                    const n = $h._createFromRanges(t.newRange._getTransformedByMoveOperation(e));
                    if (i.abRelation.side == "left" && e.targetPosition.isEqual(t.newRange.start)) {
                        t.newRange.start.path = i.abRelation.path;
                        t.newRange.end = n.end;
                        return [t]
                    } else if (i.abRelation.side == "right" && e.targetPosition.isEqual(t.newRange.end)) {
                        t.newRange.start = n.start;
                        t.newRange.end.path = i.abRelation.path;
                        return [t]
                    }
                }
                t.newRange = $h._createFromRanges(t.newRange._getTransformedByMoveOperation(e))
            }
            return [t]
        });
        XO(em, rm, (t, e, i) => {
            if (t.oldRange) {
                t.oldRange = t.oldRange._getTransformedBySplitOperation(e)
            }
            if (t.newRange) {
                if (i.abRelation) {
                    const n = t.newRange._getTransformedBySplitOperation(e);
                    if (t.newRange.start.isEqual(e.splitPosition) && i.abRelation.wasStartBeforeMergedElement) {
                        t.newRange.start = Uh._createAt(e.insertionPosition)
                    } else if (t.newRange.start.isEqual(e.splitPosition) && !i.abRelation.wasInLeftElement) {
                        t.newRange.start = Uh._createAt(e.moveTargetPosition)
                    }
                    if (t.newRange.end.isEqual(e.splitPosition) && i.abRelation.wasInRightElement) {
                        t.newRange.end = Uh._createAt(e.moveTargetPosition)
                    } else if (t.newRange.end.isEqual(e.splitPosition) && i.abRelation.wasEndBeforeMergedElement) {
                        t.newRange.end = Uh._createAt(e.insertionPosition)
                    } else {
                        t.newRange.end = n.end
                    }
                    return [t]
                }
                t.newRange = t.newRange._getTransformedBySplitOperation(e)
            }
            return [t]
        });
        XO(om, tm, (t, e) => {
            if (t.sourcePosition.hasSameParentAs(e.position)) {
                t.howMany += e.howMany
            }
            t.sourcePosition = t.sourcePosition._getTransformedByInsertOperation(e);
            t.targetPosition = t.targetPosition._getTransformedByInsertOperation(e);
            return [t]
        });
        XO(om, om, (t, e, i) => {
            if (t.sourcePosition.isEqual(e.sourcePosition) && t.targetPosition.isEqual(e.targetPosition)) {
                if (!i.bWasUndone) {
                    return [new Sm(0)]
                } else {
                    const i = e.graveyardPosition.path.slice();
                    i.push(0);
                    t.sourcePosition = new Uh(e.graveyardPosition.root, i);
                    t.howMany = 0;
                    return [t]
                }
            }
            if (t.sourcePosition.isEqual(e.sourcePosition) && !t.targetPosition.isEqual(e.targetPosition) && !i.bWasUndone && i.abRelation != "splitAtSource") {
                const n = t.targetPosition.root.rootName == "$graveyard";
                const o = e.targetPosition.root.rootName == "$graveyard";
                const r = n && !o;
                const s = o && !n;
                const a = s || !r && i.aIsStrong;
                if (a) {
                    const i = e.targetPosition._getTransformedByMergeOperation(e);
                    const n = t.targetPosition._getTransformedByMergeOperation(e);
                    return [new Zg(i, t.howMany, n, 0)]
                } else {
                    return [new Sm(0)]
                }
            }
            if (t.sourcePosition.hasSameParentAs(e.targetPosition)) {
                t.howMany += e.howMany
            }
            t.sourcePosition = t.sourcePosition._getTransformedByMergeOperation(e);
            t.targetPosition = t.targetPosition._getTransformedByMergeOperation(e);
            if (!t.graveyardPosition.isEqual(e.graveyardPosition) || !i.aIsStrong) {
                t.graveyardPosition = t.graveyardPosition._getTransformedByMergeOperation(e)
            }
            return [t]
        });
        XO(om, Zg, (t, e, i) => {
            const n = $h._createFromPositionAndShift(e.sourcePosition, e.howMany);
            if (e.type == "remove" && !i.bWasUndone && !i.forceWeakRemove) {
                if (t.deletionPosition.hasSameParentAs(e.sourcePosition) && n.containsPosition(t.sourcePosition)) {
                    return [new Sm(0)]
                }
            }
            if (t.sourcePosition.hasSameParentAs(e.targetPosition)) {
                t.howMany += e.howMany
            }
            if (t.sourcePosition.hasSameParentAs(e.sourcePosition)) {
                t.howMany -= e.howMany
            }
            t.sourcePosition = t.sourcePosition._getTransformedByMoveOperation(e);
            t.targetPosition = t.targetPosition._getTransformedByMoveOperation(e);
            if (!t.graveyardPosition.isEqual(e.targetPosition)) {
                t.graveyardPosition = t.graveyardPosition._getTransformedByMoveOperation(e)
            }
            return [t]
        });
        XO(om, rm, (t, e, i) => {
            if (e.graveyardPosition) {
                t.graveyardPosition = t.graveyardPosition._getTransformedByDeletion(e.graveyardPosition, 1);
                if (t.deletionPosition.isEqual(e.graveyardPosition)) {
                    t.howMany = e.howMany
                }
            }
            if (t.targetPosition.isEqual(e.splitPosition)) {
                const n = e.howMany != 0;
                const o = e.graveyardPosition && t.deletionPosition.isEqual(e.graveyardPosition);
                if (n || o || i.abRelation == "mergeTargetNotMoved") {
                    t.sourcePosition = t.sourcePosition._getTransformedBySplitOperation(e);
                    return [t]
                }
            }
            if (t.sourcePosition.isEqual(e.splitPosition)) {
                if (i.abRelation == "mergeSourceNotMoved") {
                    t.howMany = 0;
                    t.targetPosition = t.targetPosition._getTransformedBySplitOperation(e);
                    return [t]
                }
                if (i.abRelation == "mergeSameElement" || t.sourcePosition.offset > 0) {
                    t.sourcePosition = e.moveTargetPosition.clone();
                    t.targetPosition = t.targetPosition._getTransformedBySplitOperation(e);
                    return [t]
                }
            }
            if (t.sourcePosition.hasSameParentAs(e.splitPosition)) {
                t.howMany = e.splitPosition.offset
            }
            t.sourcePosition = t.sourcePosition._getTransformedBySplitOperation(e);
            t.targetPosition = t.targetPosition._getTransformedBySplitOperation(e);
            return [t]
        });
        XO(Zg, tm, (t, e) => {
            const i = $h._createFromPositionAndShift(t.sourcePosition, t.howMany);
            const n = i._getTransformedByInsertOperation(e, false)[0];
            t.sourcePosition = n.start;
            t.howMany = n.end.offset - n.start.offset;
            if (!t.targetPosition.isEqual(e.position)) {
                t.targetPosition = t.targetPosition._getTransformedByInsertOperation(e)
            }
            return [t]
        });
        XO(Zg, Zg, (t, e, i) => {
            const n = $h._createFromPositionAndShift(t.sourcePosition, t.howMany);
            const o = $h._createFromPositionAndShift(e.sourcePosition, e.howMany);
            let r = i.aIsStrong;
            let s = !i.aIsStrong;
            if (i.abRelation == "insertBefore" || i.baRelation == "insertAfter") {
                s = true
            } else if (i.abRelation == "insertAfter" || i.baRelation == "insertBefore") {
                s = false
            }
            let a;
            if (t.targetPosition.isEqual(e.targetPosition) && s) {
                a = t.targetPosition._getTransformedByDeletion(e.sourcePosition, e.howMany)
            } else {
                a = t.targetPosition._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany)
            }
            if (cI(t, e) && cI(e, t)) {
                return [e.getReversed()]
            }
            const c = n.containsPosition(e.targetPosition);
            if (c && n.containsRange(o, true)) {
                n.start = n.start._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany);
                n.end = n.end._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany);
                return lI([n], a)
            }
            const l = o.containsPosition(t.targetPosition);
            if (l && o.containsRange(n, true)) {
                n.start = n.start._getCombined(e.sourcePosition, e.getMovedRangeStart());
                n.end = n.end._getCombined(e.sourcePosition, e.getMovedRangeStart());
                return lI([n], a)
            }
            const d = Vs(t.sourcePosition.getParentPath(), e.sourcePosition.getParentPath());
            if (d == "prefix" || d == "extension") {
                n.start = n.start._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany);
                n.end = n.end._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany);
                return lI([n], a)
            }
            if (t.type == "remove" && e.type != "remove" && !i.aWasUndone && !i.forceWeakRemove) {
                r = true
            } else if (t.type != "remove" && e.type == "remove" && !i.bWasUndone && !i.forceWeakRemove) {
                r = false
            }
            const u = [];
            const h = n.getDifference(o);
            for (const t of h) {
                t.start = t.start._getTransformedByDeletion(e.sourcePosition, e.howMany);
                t.end = t.end._getTransformedByDeletion(e.sourcePosition, e.howMany);
                const i = Vs(t.start.getParentPath(), e.getMovedRangeStart().getParentPath()) == "same";
                const n = t._getTransformedByInsertion(e.getMovedRangeStart(), e.howMany, i);
                u.push(...n)
            }
            const f = n.getIntersection(o);
            if (f !== null && r) {
                f.start = f.start._getCombined(e.sourcePosition, e.getMovedRangeStart());
                f.end = f.end._getCombined(e.sourcePosition, e.getMovedRangeStart());
                if (u.length === 0) {
                    u.push(f)
                } else if (u.length == 1) {
                    if (o.start.isBefore(n.start) || o.start.isEqual(n.start)) {
                        u.unshift(f)
                    } else {
                        u.push(f)
                    }
                } else {
                    u.splice(1, 0, f)
                }
            }
            if (u.length === 0) {
                return [new Sm(t.baseVersion)]
            }
            return lI(u, a)
        });
        XO(Zg, rm, (t, e, i) => {
            let n = t.targetPosition.clone();
            if (!t.targetPosition.isEqual(e.insertionPosition) || !e.graveyardPosition || i.abRelation == "moveTargetAfter") {
                n = t.targetPosition._getTransformedBySplitOperation(e)
            }
            const o = $h._createFromPositionAndShift(t.sourcePosition, t.howMany);
            if (o.end.isEqual(e.insertionPosition)) {
                if (!e.graveyardPosition) {
                    t.howMany++
                }
                t.targetPosition = n;
                return [t]
            }
            if (o.start.hasSameParentAs(e.splitPosition) && o.containsPosition(e.splitPosition)) {
                let t = new $h(e.splitPosition, o.end);
                t = t._getTransformedBySplitOperation(e);
                const i = [new $h(o.start, e.splitPosition), t];
                return lI(i, n)
            }
            if (t.targetPosition.isEqual(e.splitPosition) && i.abRelation == "insertAtSource") {
                n = e.moveTargetPosition
            }
            if (t.targetPosition.isEqual(e.insertionPosition) && i.abRelation == "insertBetween") {
                n = t.targetPosition
            }
            const r = o._getTransformedBySplitOperation(e);
            const s = [r];
            if (e.graveyardPosition) {
                const n = o.start.isEqual(e.graveyardPosition) || o.containsPosition(e.graveyardPosition);
                if (t.howMany > 1 && n && !i.aWasUndone) {
                    s.push($h._createFromPositionAndShift(e.insertionPosition, 1))
                }
            }
            return lI(s, n)
        });
        XO(Zg, om, (t, e, i) => {
            const n = $h._createFromPositionAndShift(t.sourcePosition, t.howMany);
            if (e.deletionPosition.hasSameParentAs(t.sourcePosition) && n.containsPosition(e.sourcePosition)) {
                if (t.type == "remove" && !i.forceWeakRemove) {
                    if (!i.aWasUndone) {
                        const i = [];
                        let n = e.graveyardPosition.clone();
                        let o = e.targetPosition._getTransformedByMergeOperation(e);
                        if (t.howMany > 1) {
                            i.push(new Zg(t.sourcePosition, t.howMany - 1, t.targetPosition, 0));
                            n = n._getTransformedByMove(t.sourcePosition, t.targetPosition, t.howMany - 1);
                            o = o._getTransformedByMove(t.sourcePosition, t.targetPosition, t.howMany - 1)
                        }
                        const r = e.deletionPosition._getCombined(t.sourcePosition, t.targetPosition);
                        const s = new Zg(n, 1, r, 0);
                        const a = s.getMovedRangeStart().path.slice();
                        a.push(0);
                        const c = new Uh(s.targetPosition.root, a);
                        o = o._getTransformedByMove(n, r, 1);
                        const l = new Zg(o, e.howMany, c, 0);
                        i.push(s);
                        i.push(l);
                        return i
                    }
                } else {
                    if (t.howMany == 1) {
                        if (!i.bWasUndone) {
                            return [new Sm(0)]
                        } else {
                            t.sourcePosition = e.graveyardPosition.clone();
                            t.targetPosition = t.targetPosition._getTransformedByMergeOperation(e);
                            return [t]
                        }
                    }
                }
            }
            const o = $h._createFromPositionAndShift(t.sourcePosition, t.howMany);
            const r = o._getTransformedByMergeOperation(e);
            t.sourcePosition = r.start;
            t.howMany = r.end.offset - r.start.offset;
            t.targetPosition = t.targetPosition._getTransformedByMergeOperation(e);
            return [t]
        });
        XO(im, tm, (t, e) => {
            t.position = t.position._getTransformedByInsertOperation(e);
            return [t]
        });
        XO(im, om, (t, e) => {
            if (t.position.isEqual(e.deletionPosition)) {
                t.position = e.graveyardPosition.clone();
                t.position.stickiness = "toNext";
                return [t]
            }
            t.position = t.position._getTransformedByMergeOperation(e);
            return [t]
        });
        XO(im, Zg, (t, e) => {
            t.position = t.position._getTransformedByMoveOperation(e);
            return [t]
        });
        XO(im, im, (t, e, i) => {
            if (t.position.isEqual(e.position)) {
                if (i.aIsStrong) {
                    t.oldName = e.newName
                } else {
                    return [new Sm(0)]
                }
            }
            return [t]
        });
        XO(im, rm, (t, e) => {
            const i = t.position.path;
            const n = e.splitPosition.getParentPath();
            if (Vs(i, n) == "same" && !e.graveyardPosition) {
                const e = new im(t.position.getShiftedBy(1), t.oldName, t.newName, 0);
                return [t, e]
            }
            t.position = t.position._getTransformedBySplitOperation(e);
            return [t]
        });
        XO(nm, nm, (t, e, i) => {
            if (t.root === e.root && t.key === e.key) {
                if (!i.aIsStrong || t.newValue === e.newValue) {
                    return [new Sm(0)]
                } else {
                    t.oldValue = e.newValue
                }
            }
            return [t]
        });
        XO(rm, tm, (t, e) => {
            if (t.splitPosition.hasSameParentAs(e.position) && t.splitPosition.offset < e.position.offset) {
                t.howMany += e.howMany
            }
            t.splitPosition = t.splitPosition._getTransformedByInsertOperation(e);
            t.insertionPosition = rm.getInsertionPosition(t.splitPosition);
            return [t]
        });
        XO(rm, om, (t, e, i) => {
            if (!t.graveyardPosition && !i.bWasUndone && t.splitPosition.hasSameParentAs(e.sourcePosition)) {
                const i = e.graveyardPosition.path.slice();
                i.push(0);
                const n = new Uh(e.graveyardPosition.root, i);
                const o = rm.getInsertionPosition(new Uh(e.graveyardPosition.root, i));
                const r = new rm(n, 0, null, 0);
                r.insertionPosition = o;
                t.splitPosition = t.splitPosition._getTransformedByMergeOperation(e);
                t.insertionPosition = rm.getInsertionPosition(t.splitPosition);
                t.graveyardPosition = r.insertionPosition.clone();
                t.graveyardPosition.stickiness = "toNext";
                return [r, t]
            }
            if (t.splitPosition.hasSameParentAs(e.deletionPosition) && !t.splitPosition.isAfter(e.deletionPosition)) {
                t.howMany--
            }
            if (t.splitPosition.hasSameParentAs(e.targetPosition)) {
                t.howMany += e.howMany
            }
            t.splitPosition = t.splitPosition._getTransformedByMergeOperation(e);
            t.insertionPosition = rm.getInsertionPosition(t.splitPosition);
            if (t.graveyardPosition) {
                t.graveyardPosition = t.graveyardPosition._getTransformedByMergeOperation(e)
            }
            return [t]
        });
        XO(rm, Zg, (t, e, i) => {
            const n = $h._createFromPositionAndShift(e.sourcePosition, e.howMany);
            if (t.graveyardPosition) {
                const o = n.start.isEqual(t.graveyardPosition) || n.containsPosition(t.graveyardPosition);
                if (!i.bWasUndone && o) {
                    const i = t.splitPosition._getTransformedByMoveOperation(e);
                    const n = t.graveyardPosition._getTransformedByMoveOperation(e);
                    const o = n.path.slice();
                    o.push(0);
                    const r = new Uh(n.root, o);
                    const s = new Zg(i, t.howMany, r, 0);
                    return [s]
                }
                t.graveyardPosition = t.graveyardPosition._getTransformedByMoveOperation(e)
            }
            if (t.splitPosition.hasSameParentAs(e.sourcePosition) && n.containsPosition(t.splitPosition)) {
                const i = e.howMany - (t.splitPosition.offset - e.sourcePosition.offset);
                t.howMany -= i;
                if (t.splitPosition.hasSameParentAs(e.targetPosition) && t.splitPosition.offset < e.targetPosition.offset) {
                    t.howMany += e.howMany
                }
                t.splitPosition = e.sourcePosition.clone();
                t.insertionPosition = rm.getInsertionPosition(t.splitPosition);
                return [t]
            }
            const o = t.splitPosition.isEqual(e.targetPosition);
            if (o && (i.baRelation == "insertAtSource" || i.abRelation == "splitBefore")) {
                t.howMany += e.howMany;
                t.splitPosition = t.splitPosition._getTransformedByDeletion(e.sourcePosition, e.howMany);
                t.insertionPosition = rm.getInsertionPosition(t.splitPosition);
                return [t]
            }
            if (!e.sourcePosition.isEqual(e.targetPosition)) {
                if (t.splitPosition.hasSameParentAs(e.sourcePosition) && t.splitPosition.offset <= e.sourcePosition.offset) {
                    t.howMany -= e.howMany
                }
                if (t.splitPosition.hasSameParentAs(e.targetPosition) && t.splitPosition.offset < e.targetPosition.offset) {
                    t.howMany += e.howMany
                }
            }
            t.splitPosition.stickiness = "toNone";
            t.splitPosition = t.splitPosition._getTransformedByMoveOperation(e);
            t.splitPosition.stickiness = "toNext";
            if (t.graveyardPosition) {
                t.insertionPosition = t.insertionPosition._getTransformedByMoveOperation(e)
            } else {
                t.insertionPosition = rm.getInsertionPosition(t.splitPosition)
            }
            return [t]
        });
        XO(rm, rm, (t, e, i) => {
            if (t.splitPosition.isEqual(e.splitPosition)) {
                if (!t.graveyardPosition && !e.graveyardPosition) {
                    return [new Sm(0)]
                }
                if (t.graveyardPosition && e.graveyardPosition && t.graveyardPosition.isEqual(e.graveyardPosition)) {
                    return [new Sm(0)]
                }
                if (i.abRelation == "splitBefore") {
                    t.howMany = 0;
                    t.graveyardPosition = t.graveyardPosition._getTransformedBySplitOperation(e);
                    return [t]
                }
            }
            if (t.graveyardPosition && e.graveyardPosition && t.graveyardPosition.isEqual(e.graveyardPosition)) {
                const n = t.splitPosition.root.rootName == "$graveyard";
                const o = e.splitPosition.root.rootName == "$graveyard";
                const r = n && !o;
                const s = o && !n;
                const a = s || !r && i.aIsStrong;
                if (a) {
                    const i = [];
                    if (e.howMany) {
                        i.push(new Zg(e.moveTargetPosition, e.howMany, e.splitPosition, 0))
                    }
                    if (t.howMany) {
                        i.push(new Zg(t.splitPosition, t.howMany, t.moveTargetPosition, 0))
                    }
                    return i
                } else {
                    return [new Sm(0)]
                }
            }
            if (t.graveyardPosition) {
                t.graveyardPosition = t.graveyardPosition._getTransformedBySplitOperation(e)
            }
            if (t.splitPosition.isEqual(e.insertionPosition) && i.abRelation == "splitBefore") {
                t.howMany++;
                return [t]
            }
            if (e.splitPosition.isEqual(t.insertionPosition) && i.baRelation == "splitBefore") {
                const i = e.insertionPosition.path.slice();
                i.push(0);
                const n = new Uh(e.insertionPosition.root, i);
                const o = new Zg(t.insertionPosition, 1, n, 0);
                return [t, o]
            }
            if (t.splitPosition.hasSameParentAs(e.splitPosition) && t.splitPosition.offset < e.splitPosition.offset) {
                t.howMany -= e.howMany
            }
            t.splitPosition = t.splitPosition._getTransformedBySplitOperation(e);
            t.insertionPosition = rm.getInsertionPosition(t.splitPosition);
            return [t]
        });

        function cI(t, e) {
            return t.targetPosition._getTransformedByDeletion(e.sourcePosition, e.howMany) === null
        }

        function lI(t, e) {
            const i = [];
            for (let n = 0; n < t.length; n++) {
                const o = t[n];
                const r = new Zg(o.start, o.end.offset - o.start.offset, e, 0);
                i.push(r);
                for (let e = n + 1; e < t.length; e++) {
                    t[e] = t[e]._getTransformedByMove(r.sourcePosition, r.targetPosition, r.howMany)[0]
                }
                e = e._getTransformedByMove(r.sourcePosition, r.targetPosition, r.howMany)
            }
            return i
        }

        class dI extends jw {
            constructor(t) {
                super(t);
                this._stack = [];
                this._createdBatches = new WeakSet;
                this.refresh()
            }

            refresh() {
                this.isEnabled = this._stack.length > 0
            }

            addBatch(t) {
                const e = this.editor.model.document.selection;
                const i = {ranges: e.hasOwnRange ? Array.from(e.getRanges()) : [], isBackward: e.isBackward};
                this._stack.push({batch: t, selection: i});
                this.refresh()
            }

            clearStack() {
                this._stack = [];
                this.refresh()
            }

            _restoreSelection(t, e, i) {
                const n = this.editor.model;
                const o = n.document;
                const r = [];
                for (const e of t) {
                    const t = uI(e, i);
                    const n = t.find(t => t.start.root != o.graveyard);
                    if (n) {
                        r.push(n)
                    }
                }
                if (r.length) {
                    n.change(t => {
                        t.setSelection(r, {backward: e})
                    })
                }
            }

            _undo(t, e) {
                const i = this.editor.model;
                const n = i.document;
                this._createdBatches.add(e);
                const o = t.operations.slice().filter(t => t.isDocumentOperation);
                o.reverse();
                for (const t of o) {
                    const o = t.baseVersion + 1;
                    const r = Array.from(n.history.getOperations(o));
                    const s = iI([t.getReversed()], r, {
                        useRelations: true,
                        document: this.editor.model.document,
                        padWithNoOps: false,
                        forceWeakRemove: true
                    });
                    const a = s.operationsA;
                    for (const o of a) {
                        e.addOperation(o);
                        i.applyOperation(o);
                        n.history.setOperationAsUndone(t, o)
                    }
                }
            }
        }

        function uI(t, e) {
            const i = t.getTransformedByOperations(e);
            i.sort((t, e) => t.start.isBefore(e.start) ? -1 : 1);
            for (let t = 1; t < i.length; t++) {
                const e = i[t - 1];
                const n = i[t];
                if (e.end.isTouching(n.start)) {
                    e.end = n.end;
                    i.splice(t, 1);
                    t--
                }
            }
            return i
        }

        class hI extends dI {
            execute(t = null) {
                const e = t ? this._stack.findIndex(e => e.batch == t) : this._stack.length - 1;
                const i = this._stack.splice(e, 1)[0];
                const n = this.editor.model.createBatch("transparent");
                this.editor.model.enqueueChange(n, () => {
                    this._undo(i.batch, n);
                    const t = this.editor.model.document.history.getOperations(i.batch.baseVersion);
                    this._restoreSelection(i.selection.ranges, i.selection.isBackward, t);
                    this.fire("revert", i.batch, n)
                });
                this.refresh()
            }
        }

        class fI extends dI {
            execute() {
                const t = this._stack.pop();
                const e = this.editor.model.createBatch("transparent");
                this.editor.model.enqueueChange(e, () => {
                    const i = t.batch.operations[t.batch.operations.length - 1];
                    const n = i.baseVersion + 1;
                    const o = this.editor.model.document.history.getOperations(n);
                    this._restoreSelection(t.selection.ranges, t.selection.isBackward, o);
                    this._undo(t.batch, e)
                });
                this.refresh()
            }
        }

        class gI extends mp {
            static get pluginName() {
                return "UndoEditing"
            }

            constructor(t) {
                super(t);
                this._batchRegistry = new WeakSet
            }

            init() {
                const t = this.editor;
                this._undoCommand = new hI(t);
                this._redoCommand = new fI(t);
                t.commands.add("undo", this._undoCommand);
                t.commands.add("redo", this._redoCommand);
                this.listenTo(t.model, "applyOperation", (t, e) => {
                    const i = e[0];
                    if (!i.isDocumentOperation) {
                        return
                    }
                    const n = i.batch;
                    const o = this._redoCommand._createdBatches.has(n);
                    const r = this._undoCommand._createdBatches.has(n);
                    const s = this._batchRegistry.has(n);
                    if (s || n.type == "transparent" && !o && !r) {
                        return
                    } else {
                        if (o) {
                            this._undoCommand.addBatch(n)
                        } else if (!r) {
                            this._undoCommand.addBatch(n);
                            this._redoCommand.clearStack()
                        }
                    }
                    this._batchRegistry.add(n)
                }, {priority: "highest"});
                this.listenTo(this._undoCommand, "revert", (t, e, i) => {
                    this._redoCommand.addBatch(i)
                });
                t.keystrokes.set("CTRL+Z", "undo");
                t.keystrokes.set("CTRL+Y", "redo");
                t.keystrokes.set("CTRL+SHIFT+Z", "redo")
            }
        }

        var mI = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M5.042 9.367l2.189 1.837a.75.75 0 0 1-.965 1.149l-3.788-3.18a.747.747 0 0 1-.21-.284.75.75 0 0 1 .17-.945L6.23 4.762a.75.75 0 1 1 .964 1.15L4.863 7.866h8.917A.75.75 0 0 1 14 7.9a4 4 0 1 1-1.477 7.718l.344-1.489a2.5 2.5 0 1 0 1.094-4.73l.008-.032H5.042z"/></svg>';
        var pI = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M14.958 9.367l-2.189 1.837a.75.75 0 0 0 .965 1.149l3.788-3.18a.747.747 0 0 0 .21-.284.75.75 0 0 0-.17-.945L13.77 4.762a.75.75 0 1 0-.964 1.15l2.331 1.955H6.22A.75.75 0 0 0 6 7.9a4 4 0 1 0 1.477 7.718l-.344-1.489A2.5 2.5 0 1 1 6.039 9.4l-.008-.032h8.927z"/></svg>';

        class bI extends mp {
            init() {
                const t = this.editor;
                const e = t.locale;
                const i = t.t;
                const n = e.uiLanguageDirection == "ltr" ? mI : pI;
                const o = e.uiLanguageDirection == "ltr" ? pI : mI;
                this._addButton("undo", i("mo"), "CTRL+Z", n);
                this._addButton("redo", i("mp"), "CTRL+Y", o)
            }

            _addButton(t, e, i, n) {
                const o = this.editor;
                o.ui.componentFactory.add(t, r => {
                    const s = o.commands.get(t);
                    const a = new hb(r);
                    a.set({label: e, icon: n, keystroke: i, tooltip: true});
                    a.bind("isEnabled").to(s, "isEnabled");
                    this.listenTo(a, "execute", () => {
                        o.execute(t);
                        o.editing.view.focus()
                    });
                    return a
                })
            }
        }

        class wI extends mp {
            static get requires() {
                return [gI, bI]
            }

            static get pluginName() {
                return "Undo"
            }
        }

        class kI extends mp {
            static get requires() {
                return [Rx, qO, YO, cP, wI]
            }

            static get pluginName() {
                return "Essentials"
            }
        }

        class _I extends Fw {
        }

        _I.builtinPlugins = [rk, uk, vk, Sk, r_, p_, A_, R_, W_, bv, cy, fy, Ry, Ky, zx, Wx, vC, PC, tT, zT, WT, wP, CP, vP, kP, yP, _P, xP, RP, BP, HP, DE, lO, dO, IO, LO, kI, V_]
    }])["default"]
}));

},{"../../ru":2}],2:[function(require,module,exports){
module.exports =  {
    a: "Image toolbar",
    b: "Спецсимволы",
    c: "leftwards double arrow",
    d: "rightwards double arrow",
    e: "upwards double arrow",
    f: "downwards double arrow",
    g: "leftwards dashed arrow",
    h: "rightwards dashed arrow",
    i: "upwards dashed arrow",
    j: "downwards dashed arrow",
    k: "leftwards arrow to bar",
    l: "rightwards arrow to bar",
    m: "upwards arrow to bar",
    n: "downwards arrow to bar",
    o: "up down arrow with base",
    p: "back with leftwards arrow above",
    q: "end with leftwards arrow above",
    r: "on with exclamation mark with left right arrow above",
    s: "soon with rightwards arrow above",
    t: "top with upwards arrow above",
    u: "Dollar sign",
    v: "Euro sign",
    w: "Yen sign",
    x: "Pound sign",
    y: "Cent sign",
    z: "Euro-currency sign",
    aa: "Colon sign",
    ab: "Cruzeiro sign",
    ac: "French franc sign",
    ad: "Lira sign",
    ae: "Currency sign",
    af: "Bitcoin sign",
    ag: "Mill sign",
    ah: "Naira sign",
    ai: "Peseta sign",
    aj: "Rupee sign",
    ak: "Won sign",
    al: "New sheqel sign",
    am: "Dong sign",
    an: "Kip sign",
    ao: "Tugrik sign",
    ap: "Drachma sign",
    aq: "German penny sign",
    ar: "Peso sign",
    as: "Guarani sign",
    at: "Austral sign",
    au: "Hryvnia sign",
    av: "Cedi sign",
    aw: "Livre tournois sign",
    ax: "Spesmilo sign",
    ay: "Tenge sign",
    az: "Indian rupee sign",
    ba: "Turkish lira sign",
    bb: "Nordic mark sign",
    bc: "Manat sign",
    bd: "Ruble sign",
    be: "Latin capital letter a with macron",
    bf: "Latin small letter a with macron",
    bg: "Latin capital letter a with breve",
    bh: "Latin small letter a with breve",
    bi: "Latin capital letter a with ogonek",
    bj: "Latin small letter a with ogonek",
    bk: "Latin capital letter c with acute",
    bl: "Latin small letter c with acute",
    bm: "Latin capital letter c with circumflex",
    bn: "Latin small letter c with circumflex",
    bo: "Latin capital letter c with dot above",
    bp: "Latin small letter c with dot above",
    bq: "Latin capital letter c with caron",
    br: "Latin small letter c with caron",
    bs: "Latin capital letter d with caron",
    bt: "Latin small letter d with caron",
    bu: "Latin capital letter d with stroke",
    bv: "Latin small letter d with stroke",
    bw: "Latin capital letter e with macron",
    bx: "Latin small letter e with macron",
    by: "Latin capital letter e with breve",
    bz: "Latin small letter e with breve",
    ca: "Latin capital letter e with dot above",
    cb: "Latin small letter e with dot above",
    cc: "Latin capital letter e with ogonek",
    cd: "Latin small letter e with ogonek",
    ce: "Latin capital letter e with caron",
    cf: "Latin small letter e with caron",
    cg: "Latin capital letter g with circumflex",
    ch: "Latin small letter g with circumflex",
    ci: "Latin capital letter g with breve",
    cj: "Latin small letter g with breve",
    ck: "Latin capital letter g with dot above",
    cl: "Latin small letter g with dot above",
    cm: "Latin capital letter g with cedilla",
    cn: "Latin small letter g with cedilla",
    co: "Latin capital letter h with circumflex",
    cp: "Latin small letter h with circumflex",
    cq: "Latin capital letter h with stroke",
    cr: "Latin small letter h with stroke",
    cs: "Latin capital letter i with tilde",
    ct: "Latin small letter i with tilde",
    cu: "Latin capital letter i with macron",
    cv: "Latin small letter i with macron",
    cw: "Latin capital letter i with breve",
    cx: "Latin small letter i with breve",
    cy: "Latin capital letter i with ogonek",
    cz: "Latin small letter i with ogonek",
    da: "Latin capital letter i with dot above",
    db: "Latin small letter dotless i",
    dc: "Latin capital ligature ij",
    dd: "Latin small ligature ij",
    de: "Latin capital letter j with circumflex",
    df: "Latin small letter j with circumflex",
    dg: "Latin capital letter k with cedilla",
    dh: "Latin small letter k with cedilla",
    di: "Latin small letter kra",
    dj: "Latin capital letter l with acute",
    dk: "Latin small letter l with acute",
    dl: "Latin capital letter l with cedilla",
    dm: "Latin small letter l with cedilla",
    dn: "Latin capital letter l with caron",
    do: "Latin small letter l with caron",
    dp: "Latin capital letter l with middle dot",
    dq: "Latin small letter l with middle dot",
    dr: "Latin capital letter l with stroke",
    ds: "Latin small letter l with stroke",
    dt: "Latin capital letter n with acute",
    du: "Latin small letter n with acute",
    dv: "Latin capital letter n with cedilla",
    dw: "Latin small letter n with cedilla",
    dx: "Latin capital letter n with caron",
    dy: "Latin small letter n with caron",
    dz: "Latin small letter n preceded by apostrophe",
    ea: "Latin capital letter eng",
    eb: "Latin small letter eng",
    ec: "Latin capital letter o with macron",
    ed: "Latin small letter o with macron",
    ee: "Latin capital letter o with breve",
    ef: "Latin small letter o with breve",
    eg: "Latin capital letter o with double acute",
    eh: "Latin small letter o with double acute",
    ei: "Latin capital ligature oe",
    ej: "Latin small ligature oe",
    ek: "Latin capital letter r with acute",
    el: "Latin small letter r with acute",
    em: "Latin capital letter r with cedilla",
    en: "Latin small letter r with cedilla",
    eo: "Latin capital letter r with caron",
    ep: "Latin small letter r with caron",
    eq: "Latin capital letter s with acute",
    er: "Latin small letter s with acute",
    es: "Latin capital letter s with circumflex",
    et: "Latin small letter s with circumflex",
    eu: "Latin capital letter s with cedilla",
    ev: "Latin small letter s with cedilla",
    ew: "Latin capital letter s with caron",
    ex: "Latin small letter s with caron",
    ey: "Latin capital letter t with cedilla",
    ez: "Latin small letter t with cedilla",
    fa: "Latin capital letter t with caron",
    fb: "Latin small letter t with caron",
    fc: "Latin capital letter t with stroke",
    fd: "Latin small letter t with stroke",
    fe: "Latin capital letter u with tilde",
    ff: "Latin small letter u with tilde",
    fg: "Latin capital letter u with macron",
    fh: "Latin small letter u with macron",
    fi: "Latin capital letter u with breve",
    fj: "Latin small letter u with breve",
    fk: "Latin capital letter u with ring above",
    fl: "Latin small letter u with ring above",
    fm: "Latin capital letter u with double acute",
    fn: "Latin small letter u with double acute",
    fo: "Latin capital letter u with ogonek",
    fp: "Latin small letter u with ogonek",
    fq: "Latin capital letter w with circumflex",
    fr: "Latin small letter w with circumflex",
    fs: "Latin capital letter y with circumflex",
    ft: "Latin small letter y with circumflex",
    fu: "Latin capital letter y with diaeresis",
    fv: "Latin capital letter z with acute",
    fw: "Latin small letter z with acute",
    fx: "Latin capital letter z with dot above",
    fy: "Latin small letter z with dot above",
    fz: "Latin capital letter z with caron",
    ga: "Latin small letter z with caron",
    gb: "Latin small letter long s",
    gc: "Less-than sign",
    gd: "Greater-than sign",
    ge: "Less-than or equal to",
    gf: "Greater-than or equal to",
    gg: "En dash",
    gh: "Em dash",
    gi: "Macron",
    gj: "Overline",
    gk: "Degree sign",
    gl: "Minus sign",
    gm: "Plus-minus sign",
    gn: "Division sign",
    go: "Fraction slash",
    gp: "Multiplication sign",
    gq: "Latin small letter f with hook",
    gr: "Integral",
    gs: "N-ary summation",
    gt: "Infinity",
    gu: "Square root",
    gv: "Tilde operator",
    gw: "Approximately equal to",
    gx: "Almost equal to",
    gy: "Not equal to",
    gz: "Identical to",
    ha: "Element of",
    hb: "Not an element of",
    hc: "Contains as member",
    hd: "N-ary product",
    he: "Logical and",
    hf: "Logical or",
    hg: "Not sign",
    hh: "Intersection",
    hi: "Union",
    hj: "Partial differential",
    hk: "For all",
    hl: "There exists",
    hm: "Empty set",
    hn: "Nabla",
    ho: "Asterisk operator",
    hp: "Proportional to",
    hq: "Angle",
    hr: "Vulgar fraction one quarter",
    hs: "Vulgar fraction one half",
    ht: "Vulgar fraction three quarters",
    hu: "Single left-pointing angle quotation mark",
    hv: "Single right-pointing angle quotation mark",
    hw: "Left-pointing double angle quotation mark",
    hx: "Right-pointing double angle quotation mark",
    hy: "Left single quotation mark",
    hz: "Right single quotation mark",
    ia: "Left double quotation mark",
    ib: "Right double quotation mark",
    ic: "Single low-9 quotation mark",
    id: "Double low-9 quotation mark",
    ie: "Inverted exclamation mark",
    if: "Inverted question mark",
    ig: "Two dot leader",
    ih: "Horizontal ellipsis",
    ii: "Double dagger",
    ij: "Per mille sign",
    ik: "Per ten thousand sign",
    il: "Double exclamation mark",
    im: "Question exclamation mark",
    in: "Exclamation question mark",
    io: "Double question mark",
    ip: "Copyright sign",
    iq: "Registered sign",
    ir: "Trade mark sign",
    is: "Section sign",
    it: "Paragraph sign",
    iu: "Reversed paragraph sign",
    iv: "Table toolbar",
    iw: "Выравнивание по левому краю",
    ix: "Выравнивание по правому краю",
    iy: "Выравнивание по центру",
    iz: "Выравнивание по ширине",
    ja: "Выравнивание текста",
    jb: "Выравнивание",
    jc: "Цитата",
    jd: "Выбрать заголовок",
    je: "Заголовок",
    jf: "Горизонтальная линия",
    jg: "Увеличить отступ",
    jh: "Уменьшить отступ",
    ji: "Жирный",
    jj: "Курсив",
    jk: "Зачеркнутый",
    jl: "Подстрочный",
    jm: "Надстрочный",
    jn: "Подчеркнутый",
    jo: "Семейство шрифтов",
    jp: "По умолчанию",
    jq: "Размер шрифта",
    jr: "Очень мелкий",
    js: "Мелкий",
    jt: "Крупный",
    ju: "Очень крупный",
    jv: "Цвет шрифта",
    jw: "Цвет фона",
    jx: "Виджет изображений",
    jy: "Оригинальный размер изображения",
    jz: "Боковое изображение",
    ka: "Выравнивание по левому краю",
    kb: "Выравнивание по центру",
    kc: "Выравнивание по правому краю",
    kd: "Вставить изображение",
    ke: "Загрузка не выполнена",
    kf: "Widget toolbar",
    kg: "Свойства таблицы",
    kh: "Свойства ячейки",
    ki: "Вставить таблицу",
    kj: "Столбец заголовков",
    kk: "Вставить столбец слева",
    kl: "Вставить столбец справа",
    km: "Удалить столбец",
    kn: "Столбец",
    ko: "Строка заголовков",
    kp: "Вставить строку ниже",
    kq: "Вставить строку выше",
    kr: "Удалить строку",
    ks: "Строка",
    kt: "Объединить с ячейкой сверху",
    ku: "Объединить с ячейкой справа",
    kv: "Объединить с ячейкой снизу",
    kw: "Объединить с ячейкой слева",
    kx: "Разделить ячейку вертикально",
    ky: "Разделить ячейку горизонтально",
    kz: "Объединить ячейки",
    la: "Убрать форматирование",
    lb: "Идёт загрузка",
    lc: "Нумерованный список",
    ld: "Маркированный список",
    le: "Character categories",
    lf: "Ссылка",
    lg: "Dropdown toolbar",
    lh: "Редактировать альтернативный текст",
    li: "Убрать цвет",
    lj: "Цвет страницы",
    lk: "Убрать ссылку",
    ll: "Редактировать ссылку",
    lm: "Открыть ссылку в новой вкладке",
    ln: "Для этой ссылки не установлен адрес URL",
    lo: "Сохранить",
    lp: "Отмена",
    lq: "Ссылка URL",
    lr: "Editor toolbar",
    ls: "Другие инструменты",
    lt: "Альтернативный текст",
    lu: "%0 of %1",
    lv: "Previous",
    lw: "Next",
    lx: "Чёрный",
    ly: "Тёмно-серый",
    lz: "Серый",
    ma: "Светло-серый",
    mb: "Белый",
    mc: "Красный",
    md: "Оранжевый",
    me: "Жёлтый",
    mf: "Салатовый",
    mg: "Зелёный",
    mh: "Аквамариновый",
    mi: "Бирюзовый",
    mj: "Голубой",
    mk: "Синий",
    ml: "Фиолетовый",
    mm: "Open in a new tab",
    mn: "Downloadable",
    mo: "Отменить",
    mp: "Повторить",
    mq: "Нет",
    mr: "Сплошная",
    ms: "Точки",
    mt: "Пунктир",
    mu: "Двойная",
    mv: "Groove",
    mw: "Ridge",
    mx: "Inset",
    my: "Outset",
    mz: 'The color is invalid. Try "#FF0000" or "rgb(255,0,0)" or "red".',
    na: 'The value is invalid. Try "10px" or "2em" or simply "2".',
    nb: "Граница",
    nc: "Стиль",
    nd: "Ширина",
    ne: "Цвет",
    nf: "Цвет фона",
    ng: "Габариты",
    nh: "Высота",
    ni: "Отступы",
    nj: "Выравнивание в ячейке",
    nk: "Horizontal text alignment toolbar",
    nl: "Vertical text alignment toolbar",
    nm: "Align cell text to the left",
    nn: "Align cell text to the center",
    no: "Align cell text to the right",
    np: "Justify cell text",
    nq: "Align cell text to the top",
    nr: "Align cell text to the middle",
    ns: "Align cell text to the bottom",
    nt: "Выравнивание",
    nu: "Выравнивание",
    nv: "По левому краю",
    nw: "По центру",
    nx: "По правому краю",
    ny: "Параграф",
    nz: "Заголовок 1",
    oa: "Заголовок 2",
    ob: "Заголовок 3",
    oc: "Заголовок 4",
    od: "Заголовок 5",
    oe: "Заголовок 6",
    of: "Редактор, %0"
};
},{}],3:[function(require,module,exports){
var css = ".container,\n.container-fluid {\n  margin-right: auto;\n  margin-left: auto;\n}\n.container-fluid {\n  padding-right: 2rem;\n  padding-left: 2rem;\n}\n.row {\n  box-sizing: border-box;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-flex: 0;\n  -ms-flex: 0 1 auto;\n  flex: 0 1 auto;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-right: -.5rem;\n  margin-left: -.5rem;\n}\n.row.reverse {\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: reverse;\n  -ms-flex-direction: row-reverse;\n  flex-direction: row-reverse;\n}\n.col.reverse {\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: reverse;\n  -ms-flex-direction: column-reverse;\n  flex-direction: column-reverse;\n}\n.col-xs,\n.col-xs-1,\n.col-xs-10,\n.col-xs-11,\n.col-xs-12,\n.col-xs-2,\n.col-xs-3,\n.col-xs-4,\n.col-xs-5,\n.col-xs-6,\n.col-xs-7,\n.col-xs-8,\n.col-xs-9,\n.col-xs-offset-0,\n.col-xs-offset-1,\n.col-xs-offset-10,\n.col-xs-offset-11,\n.col-xs-offset-12,\n.col-xs-offset-2,\n.col-xs-offset-3,\n.col-xs-offset-4,\n.col-xs-offset-5,\n.col-xs-offset-6,\n.col-xs-offset-7,\n.col-xs-offset-8,\n.col-xs-offset-9 {\n  box-sizing: border-box;\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 auto;\n  flex: 0 0 auto;\n  padding-right: .5rem;\n  padding-left: .5rem;\n}\n.col-xs {\n  -webkit-box-flex: 1;\n  -ms-flex-positive: 1;\n  flex-grow: 1;\n  -ms-flex-preferred-size: 0;\n  flex-basis: 0;\n  max-width: 100%;\n}\n.col-xs-1 {\n  -ms-flex-preferred-size: 8.33333333%;\n  flex-basis: 8.33333333%;\n  max-width: 8.33333333%;\n}\n.col-xs-2 {\n  -ms-flex-preferred-size: 16.66666667%;\n  flex-basis: 16.66666667%;\n  max-width: 16.66666667%;\n}\n.col-xs-3 {\n  -ms-flex-preferred-size: 25%;\n  flex-basis: 25%;\n  max-width: 25%;\n}\n.col-xs-4 {\n  -ms-flex-preferred-size: 33.33333333%;\n  flex-basis: 33.33333333%;\n  max-width: 33.33333333%;\n}\n.col-xs-5 {\n  -ms-flex-preferred-size: 41.66666667%;\n  flex-basis: 41.66666667%;\n  max-width: 41.66666667%;\n}\n.col-xs-6 {\n  -ms-flex-preferred-size: 50%;\n  flex-basis: 50%;\n  max-width: 50%;\n}\n.col-xs-7 {\n  -ms-flex-preferred-size: 58.33333333%;\n  flex-basis: 58.33333333%;\n  max-width: 58.33333333%;\n}\n.col-xs-8 {\n  -ms-flex-preferred-size: 66.66666667%;\n  flex-basis: 66.66666667%;\n  max-width: 66.66666667%;\n}\n.col-xs-9 {\n  -ms-flex-preferred-size: 75%;\n  flex-basis: 75%;\n  max-width: 75%;\n}\n.col-xs-10 {\n  -ms-flex-preferred-size: 83.33333333%;\n  flex-basis: 83.33333333%;\n  max-width: 83.33333333%;\n}\n.col-xs-11 {\n  -ms-flex-preferred-size: 91.66666667%;\n  flex-basis: 91.66666667%;\n  max-width: 91.66666667%;\n}\n.col-xs-12 {\n  -ms-flex-preferred-size: 100%;\n  flex-basis: 100%;\n  max-width: 100%;\n}\n.col-xs-offset-0 {\n  margin-left: 0;\n}\n.col-xs-offset-1 {\n  margin-left: 8.33333333%;\n}\n.col-xs-offset-2 {\n  margin-left: 16.66666667%;\n}\n.col-xs-offset-3 {\n  margin-left: 25%;\n}\n.col-xs-offset-4 {\n  margin-left: 33.33333333%;\n}\n.col-xs-offset-5 {\n  margin-left: 41.66666667%;\n}\n.col-xs-offset-6 {\n  margin-left: 50%;\n}\n.col-xs-offset-7 {\n  margin-left: 58.33333333%;\n}\n.col-xs-offset-8 {\n  margin-left: 66.66666667%;\n}\n.col-xs-offset-9 {\n  margin-left: 75%;\n}\n.col-xs-offset-10 {\n  margin-left: 83.33333333%;\n}\n.col-xs-offset-11 {\n  margin-left: 91.66666667%;\n}\n.start-xs {\n  -webkit-box-pack: start;\n  -ms-flex-pack: start;\n  justify-content: flex-start;\n  text-align: start;\n}\n.center-xs {\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  text-align: center;\n}\n.end-xs {\n  -webkit-box-pack: end;\n  -ms-flex-pack: end;\n  justify-content: flex-end;\n  text-align: end;\n}\n.top-xs {\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  align-items: flex-start;\n}\n.middle-xs {\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n}\n.bottom-xs {\n  -webkit-box-align: end;\n  -ms-flex-align: end;\n  align-items: flex-end;\n}\n.around-xs {\n  -ms-flex-pack: distribute;\n  justify-content: space-around;\n}\n.between-xs {\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n}\n.first-xs {\n  -webkit-box-ordinal-group: 0;\n  -ms-flex-order: -1;\n  order: -1;\n}\n.last-xs {\n  -webkit-box-ordinal-group: 2;\n  -ms-flex-order: 1;\n  order: 1;\n}\n@media only screen and (min-width:48em) {\n  .container {\n    width: 49rem;\n  }\n\n  .col-sm,\n  .col-sm-1,\n  .col-sm-10,\n  .col-sm-11,\n  .col-sm-12,\n  .col-sm-2,\n  .col-sm-3,\n  .col-sm-4,\n  .col-sm-5,\n  .col-sm-6,\n  .col-sm-7,\n  .col-sm-8,\n  .col-sm-9,\n  .col-sm-offset-0,\n  .col-sm-offset-1,\n  .col-sm-offset-10,\n  .col-sm-offset-11,\n  .col-sm-offset-12,\n  .col-sm-offset-2,\n  .col-sm-offset-3,\n  .col-sm-offset-4,\n  .col-sm-offset-5,\n  .col-sm-offset-6,\n  .col-sm-offset-7,\n  .col-sm-offset-8,\n  .col-sm-offset-9 {\n    box-sizing: border-box;\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    padding-right: .5rem;\n    padding-left: .5rem;\n  }\n\n  .col-sm {\n    -webkit-box-flex: 1;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    max-width: 100%;\n  }\n\n  .col-sm-1 {\n    -ms-flex-preferred-size: 8.33333333%;\n    flex-basis: 8.33333333%;\n    max-width: 8.33333333%;\n  }\n\n  .col-sm-2 {\n    -ms-flex-preferred-size: 16.66666667%;\n    flex-basis: 16.66666667%;\n    max-width: 16.66666667%;\n  }\n\n  .col-sm-3 {\n    -ms-flex-preferred-size: 25%;\n    flex-basis: 25%;\n    max-width: 25%;\n  }\n\n  .col-sm-4 {\n    -ms-flex-preferred-size: 33.33333333%;\n    flex-basis: 33.33333333%;\n    max-width: 33.33333333%;\n  }\n\n  .col-sm-5 {\n    -ms-flex-preferred-size: 41.66666667%;\n    flex-basis: 41.66666667%;\n    max-width: 41.66666667%;\n  }\n\n  .col-sm-6 {\n    -ms-flex-preferred-size: 50%;\n    flex-basis: 50%;\n    max-width: 50%;\n  }\n\n  .col-sm-7 {\n    -ms-flex-preferred-size: 58.33333333%;\n    flex-basis: 58.33333333%;\n    max-width: 58.33333333%;\n  }\n\n  .col-sm-8 {\n    -ms-flex-preferred-size: 66.66666667%;\n    flex-basis: 66.66666667%;\n    max-width: 66.66666667%;\n  }\n\n  .col-sm-9 {\n    -ms-flex-preferred-size: 75%;\n    flex-basis: 75%;\n    max-width: 75%;\n  }\n\n  .col-sm-10 {\n    -ms-flex-preferred-size: 83.33333333%;\n    flex-basis: 83.33333333%;\n    max-width: 83.33333333%;\n  }\n\n  .col-sm-11 {\n    -ms-flex-preferred-size: 91.66666667%;\n    flex-basis: 91.66666667%;\n    max-width: 91.66666667%;\n  }\n\n  .col-sm-12 {\n    -ms-flex-preferred-size: 100%;\n    flex-basis: 100%;\n    max-width: 100%;\n  }\n\n  .col-sm-offset-0 {\n    margin-left: 0;\n  }\n\n  .col-sm-offset-1 {\n    margin-left: 8.33333333%;\n  }\n\n  .col-sm-offset-2 {\n    margin-left: 16.66666667%;\n  }\n\n  .col-sm-offset-3 {\n    margin-left: 25%;\n  }\n\n  .col-sm-offset-4 {\n    margin-left: 33.33333333%;\n  }\n\n  .col-sm-offset-5 {\n    margin-left: 41.66666667%;\n  }\n\n  .col-sm-offset-6 {\n    margin-left: 50%;\n  }\n\n  .col-sm-offset-7 {\n    margin-left: 58.33333333%;\n  }\n\n  .col-sm-offset-8 {\n    margin-left: 66.66666667%;\n  }\n\n  .col-sm-offset-9 {\n    margin-left: 75%;\n  }\n\n  .col-sm-offset-10 {\n    margin-left: 83.33333333%;\n  }\n\n  .col-sm-offset-11 {\n    margin-left: 91.66666667%;\n  }\n\n  .start-sm {\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n    text-align: start;\n  }\n\n  .center-sm {\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    text-align: center;\n  }\n\n  .end-sm {\n    -webkit-box-pack: end;\n    -ms-flex-pack: end;\n    justify-content: flex-end;\n    text-align: end;\n  }\n\n  .top-sm {\n    -webkit-box-align: start;\n    -ms-flex-align: start;\n    align-items: flex-start;\n  }\n\n  .middle-sm {\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n  }\n\n  .bottom-sm {\n    -webkit-box-align: end;\n    -ms-flex-align: end;\n    align-items: flex-end;\n  }\n\n  .around-sm {\n    -ms-flex-pack: distribute;\n    justify-content: space-around;\n  }\n\n  .between-sm {\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n  }\n\n  .first-sm {\n    -webkit-box-ordinal-group: 0;\n    -ms-flex-order: -1;\n    order: -1;\n  }\n\n  .last-sm {\n    -webkit-box-ordinal-group: 2;\n    -ms-flex-order: 1;\n    order: 1;\n  }\n}\n@media only screen and (min-width:64em) {\n  .container {\n    width: 65rem;\n  }\n\n  .col-md,\n  .col-md-1,\n  .col-md-10,\n  .col-md-11,\n  .col-md-12,\n  .col-md-2,\n  .col-md-3,\n  .col-md-4,\n  .col-md-5,\n  .col-md-6,\n  .col-md-7,\n  .col-md-8,\n  .col-md-9,\n  .col-md-offset-0,\n  .col-md-offset-1,\n  .col-md-offset-10,\n  .col-md-offset-11,\n  .col-md-offset-12,\n  .col-md-offset-2,\n  .col-md-offset-3,\n  .col-md-offset-4,\n  .col-md-offset-5,\n  .col-md-offset-6,\n  .col-md-offset-7,\n  .col-md-offset-8,\n  .col-md-offset-9 {\n    box-sizing: border-box;\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    padding-right: .5rem;\n    padding-left: .5rem;\n  }\n\n  .col-md {\n    -webkit-box-flex: 1;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    max-width: 100%;\n  }\n\n  .col-md-1 {\n    -ms-flex-preferred-size: 8.33333333%;\n    flex-basis: 8.33333333%;\n    max-width: 8.33333333%;\n  }\n\n  .col-md-2 {\n    -ms-flex-preferred-size: 16.66666667%;\n    flex-basis: 16.66666667%;\n    max-width: 16.66666667%;\n  }\n\n  .col-md-3 {\n    -ms-flex-preferred-size: 25%;\n    flex-basis: 25%;\n    max-width: 25%;\n  }\n\n  .col-md-4 {\n    -ms-flex-preferred-size: 33.33333333%;\n    flex-basis: 33.33333333%;\n    max-width: 33.33333333%;\n  }\n\n  .col-md-5 {\n    -ms-flex-preferred-size: 41.66666667%;\n    flex-basis: 41.66666667%;\n    max-width: 41.66666667%;\n  }\n\n  .col-md-6 {\n    -ms-flex-preferred-size: 50%;\n    flex-basis: 50%;\n    max-width: 50%;\n  }\n\n  .col-md-7 {\n    -ms-flex-preferred-size: 58.33333333%;\n    flex-basis: 58.33333333%;\n    max-width: 58.33333333%;\n  }\n\n  .col-md-8 {\n    -ms-flex-preferred-size: 66.66666667%;\n    flex-basis: 66.66666667%;\n    max-width: 66.66666667%;\n  }\n\n  .col-md-9 {\n    -ms-flex-preferred-size: 75%;\n    flex-basis: 75%;\n    max-width: 75%;\n  }\n\n  .col-md-10 {\n    -ms-flex-preferred-size: 83.33333333%;\n    flex-basis: 83.33333333%;\n    max-width: 83.33333333%;\n  }\n\n  .col-md-11 {\n    -ms-flex-preferred-size: 91.66666667%;\n    flex-basis: 91.66666667%;\n    max-width: 91.66666667%;\n  }\n\n  .col-md-12 {\n    -ms-flex-preferred-size: 100%;\n    flex-basis: 100%;\n    max-width: 100%;\n  }\n\n  .col-md-offset-0 {\n    margin-left: 0;\n  }\n\n  .col-md-offset-1 {\n    margin-left: 8.33333333%;\n  }\n\n  .col-md-offset-2 {\n    margin-left: 16.66666667%;\n  }\n\n  .col-md-offset-3 {\n    margin-left: 25%;\n  }\n\n  .col-md-offset-4 {\n    margin-left: 33.33333333%;\n  }\n\n  .col-md-offset-5 {\n    margin-left: 41.66666667%;\n  }\n\n  .col-md-offset-6 {\n    margin-left: 50%;\n  }\n\n  .col-md-offset-7 {\n    margin-left: 58.33333333%;\n  }\n\n  .col-md-offset-8 {\n    margin-left: 66.66666667%;\n  }\n\n  .col-md-offset-9 {\n    margin-left: 75%;\n  }\n\n  .col-md-offset-10 {\n    margin-left: 83.33333333%;\n  }\n\n  .col-md-offset-11 {\n    margin-left: 91.66666667%;\n  }\n\n  .start-md {\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n    text-align: start;\n  }\n\n  .center-md {\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    text-align: center;\n  }\n\n  .end-md {\n    -webkit-box-pack: end;\n    -ms-flex-pack: end;\n    justify-content: flex-end;\n    text-align: end;\n  }\n\n  .top-md {\n    -webkit-box-align: start;\n    -ms-flex-align: start;\n    align-items: flex-start;\n  }\n\n  .middle-md {\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n  }\n\n  .bottom-md {\n    -webkit-box-align: end;\n    -ms-flex-align: end;\n    align-items: flex-end;\n  }\n\n  .around-md {\n    -ms-flex-pack: distribute;\n    justify-content: space-around;\n  }\n\n  .between-md {\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n  }\n\n  .first-md {\n    -webkit-box-ordinal-group: 0;\n    -ms-flex-order: -1;\n    order: -1;\n  }\n\n  .last-md {\n    -webkit-box-ordinal-group: 2;\n    -ms-flex-order: 1;\n    order: 1;\n  }\n}\n@media only screen and (min-width:75em) {\n  .container {\n    width: 76rem;\n  }\n\n  .col-lg,\n  .col-lg-1,\n  .col-lg-10,\n  .col-lg-11,\n  .col-lg-12,\n  .col-lg-2,\n  .col-lg-3,\n  .col-lg-4,\n  .col-lg-5,\n  .col-lg-6,\n  .col-lg-7,\n  .col-lg-8,\n  .col-lg-9,\n  .col-lg-offset-0,\n  .col-lg-offset-1,\n  .col-lg-offset-10,\n  .col-lg-offset-11,\n  .col-lg-offset-12,\n  .col-lg-offset-2,\n  .col-lg-offset-3,\n  .col-lg-offset-4,\n  .col-lg-offset-5,\n  .col-lg-offset-6,\n  .col-lg-offset-7,\n  .col-lg-offset-8,\n  .col-lg-offset-9 {\n    box-sizing: border-box;\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    padding-right: .5rem;\n    padding-left: .5rem;\n  }\n\n  .col-lg {\n    -webkit-box-flex: 1;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    max-width: 100%;\n  }\n\n  .col-lg-1 {\n    -ms-flex-preferred-size: 8.33333333%;\n    flex-basis: 8.33333333%;\n    max-width: 8.33333333%;\n  }\n\n  .col-lg-2 {\n    -ms-flex-preferred-size: 16.66666667%;\n    flex-basis: 16.66666667%;\n    max-width: 16.66666667%;\n  }\n\n  .col-lg-3 {\n    -ms-flex-preferred-size: 25%;\n    flex-basis: 25%;\n    max-width: 25%;\n  }\n\n  .col-lg-4 {\n    -ms-flex-preferred-size: 33.33333333%;\n    flex-basis: 33.33333333%;\n    max-width: 33.33333333%;\n  }\n\n  .col-lg-5 {\n    -ms-flex-preferred-size: 41.66666667%;\n    flex-basis: 41.66666667%;\n    max-width: 41.66666667%;\n  }\n\n  .col-lg-6 {\n    -ms-flex-preferred-size: 50%;\n    flex-basis: 50%;\n    max-width: 50%;\n  }\n\n  .col-lg-7 {\n    -ms-flex-preferred-size: 58.33333333%;\n    flex-basis: 58.33333333%;\n    max-width: 58.33333333%;\n  }\n\n  .col-lg-8 {\n    -ms-flex-preferred-size: 66.66666667%;\n    flex-basis: 66.66666667%;\n    max-width: 66.66666667%;\n  }\n\n  .col-lg-9 {\n    -ms-flex-preferred-size: 75%;\n    flex-basis: 75%;\n    max-width: 75%;\n  }\n\n  .col-lg-10 {\n    -ms-flex-preferred-size: 83.33333333%;\n    flex-basis: 83.33333333%;\n    max-width: 83.33333333%;\n  }\n\n  .col-lg-11 {\n    -ms-flex-preferred-size: 91.66666667%;\n    flex-basis: 91.66666667%;\n    max-width: 91.66666667%;\n  }\n\n  .col-lg-12 {\n    -ms-flex-preferred-size: 100%;\n    flex-basis: 100%;\n    max-width: 100%;\n  }\n\n  .col-lg-offset-0 {\n    margin-left: 0;\n  }\n\n  .col-lg-offset-1 {\n    margin-left: 8.33333333%;\n  }\n\n  .col-lg-offset-2 {\n    margin-left: 16.66666667%;\n  }\n\n  .col-lg-offset-3 {\n    margin-left: 25%;\n  }\n\n  .col-lg-offset-4 {\n    margin-left: 33.33333333%;\n  }\n\n  .col-lg-offset-5 {\n    margin-left: 41.66666667%;\n  }\n\n  .col-lg-offset-6 {\n    margin-left: 50%;\n  }\n\n  .col-lg-offset-7 {\n    margin-left: 58.33333333%;\n  }\n\n  .col-lg-offset-8 {\n    margin-left: 66.66666667%;\n  }\n\n  .col-lg-offset-9 {\n    margin-left: 75%;\n  }\n\n  .col-lg-offset-10 {\n    margin-left: 83.33333333%;\n  }\n\n  .col-lg-offset-11 {\n    margin-left: 91.66666667%;\n  }\n\n  .start-lg {\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n    text-align: start;\n  }\n\n  .center-lg {\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    text-align: center;\n  }\n\n  .end-lg {\n    -webkit-box-pack: end;\n    -ms-flex-pack: end;\n    justify-content: flex-end;\n    text-align: end;\n  }\n\n  .top-lg {\n    -webkit-box-align: start;\n    -ms-flex-align: start;\n    align-items: flex-start;\n  }\n\n  .middle-lg {\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n  }\n\n  .bottom-lg {\n    -webkit-box-align: end;\n    -ms-flex-align: end;\n    align-items: flex-end;\n  }\n\n  .around-lg {\n    -ms-flex-pack: distribute;\n    justify-content: space-around;\n  }\n\n  .between-lg {\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n  }\n\n  .first-lg {\n    -webkit-box-ordinal-group: 0;\n    -ms-flex-order: -1;\n    order: -1;\n  }\n\n  .last-lg {\n    -webkit-box-ordinal-group: 2;\n    -ms-flex-order: 1;\n    order: 1;\n  }\n}\n"; (require("browserify-css").createStyle(css, { "href": "dependencies\\flexboxgrid\\flexboxgrid.min.css" }, { "insertAt": "bottom" })); module.exports = css;
},{"browserify-css":5}],4:[function(require,module,exports){
module.exports = function atoa (a, n) { return Array.prototype.slice.call(a, n); }

},{}],5:[function(require,module,exports){
'use strict';
// For more information about browser field, check out the browser field at https://github.com/substack/browserify-handbook#browser-field.

var styleElementsInsertedAtTop = [];

var insertStyleElement = function(styleElement, options) {
    var head = document.head || document.getElementsByTagName('head')[0];
    var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];

    options = options || {};
    options.insertAt = options.insertAt || 'bottom';

    if (options.insertAt === 'top') {
        if (!lastStyleElementInsertedAtTop) {
            head.insertBefore(styleElement, head.firstChild);
        } else if (lastStyleElementInsertedAtTop.nextSibling) {
            head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
        } else {
            head.appendChild(styleElement);
        }
        styleElementsInsertedAtTop.push(styleElement);
    } else if (options.insertAt === 'bottom') {
        head.appendChild(styleElement);
    } else {
        throw new Error('Invalid value for parameter \'insertAt\'. Must be \'top\' or \'bottom\'.');
    }
};

module.exports = {
    // Create a <link> tag with optional data attributes
    createLink: function(href, attributes) {
        var head = document.head || document.getElementsByTagName('head')[0];
        var link = document.createElement('link');

        link.href = href;
        link.rel = 'stylesheet';

        for (var key in attributes) {
            if ( ! attributes.hasOwnProperty(key)) {
                continue;
            }
            var value = attributes[key];
            link.setAttribute('data-' + key, value);
        }

        head.appendChild(link);
    },
    // Create a <style> tag with optional data attributes
    createStyle: function(cssText, attributes, extraOptions) {
        extraOptions = extraOptions || {};

        var style = document.createElement('style');
        style.type = 'text/css';

        for (var key in attributes) {
            if ( ! attributes.hasOwnProperty(key)) {
                continue;
            }
            var value = attributes[key];
            style.setAttribute('data-' + key, value);
        }

        if (style.sheet) { // for jsdom and IE9+
            style.innerHTML = cssText;
            style.sheet.cssText = cssText;
            insertStyleElement(style, { insertAt: extraOptions.insertAt });
        } else if (style.styleSheet) { // for IE8 and below
            insertStyleElement(style, { insertAt: extraOptions.insertAt });
            style.styleSheet.cssText = cssText;
        } else { // for Chrome, Firefox, and Safari
            style.appendChild(document.createTextNode(cssText));
            insertStyleElement(style, { insertAt: extraOptions.insertAt });
        }
    }
};

},{}],6:[function(require,module,exports){
'use strict';

var ticky = require('ticky');

module.exports = function debounce (fn, args, ctx) {
  if (!fn) { return; }
  ticky(function run () {
    fn.apply(ctx || null, args || []);
  });
};

},{"ticky":15}],7:[function(require,module,exports){
'use strict';

var atoa = require('atoa');
var debounce = require('./debounce');

module.exports = function emitter (thing, options) {
  var opts = options || {};
  var evt = {};
  if (thing === undefined) { thing = {}; }
  thing.on = function (type, fn) {
    if (!evt[type]) {
      evt[type] = [fn];
    } else {
      evt[type].push(fn);
    }
    return thing;
  };
  thing.once = function (type, fn) {
    fn._once = true; // thing.off(fn) still works!
    thing.on(type, fn);
    return thing;
  };
  thing.off = function (type, fn) {
    var c = arguments.length;
    if (c === 1) {
      delete evt[type];
    } else if (c === 0) {
      evt = {};
    } else {
      var et = evt[type];
      if (!et) { return thing; }
      et.splice(et.indexOf(fn), 1);
    }
    return thing;
  };
  thing.emit = function () {
    var args = atoa(arguments);
    return thing.emitterSnapshot(args.shift()).apply(this, args);
  };
  thing.emitterSnapshot = function (type) {
    var et = (evt[type] || []).slice(0);
    return function () {
      var args = atoa(arguments);
      var ctx = this || thing;
      if (type === 'error' && opts.throws !== false && !et.length) { throw args.length === 1 ? args[0] : args; }
      et.forEach(function emitter (listen) {
        if (opts.async) { debounce(listen, args, ctx); } else { listen.apply(ctx, args); }
        if (listen._once) { thing.off(type, listen); }
      });
      return thing;
    };
  };
  return thing;
};

},{"./debounce":6,"atoa":4}],8:[function(require,module,exports){
(function (global){
'use strict';

var customEvent = require('custom-event');
var eventmap = require('./eventmap');
var doc = global.document;
var addEvent = addEventEasy;
var removeEvent = removeEventEasy;
var hardCache = [];

if (!global.addEventListener) {
  addEvent = addEventHard;
  removeEvent = removeEventHard;
}

module.exports = {
  add: addEvent,
  remove: removeEvent,
  fabricate: fabricateEvent
};

function addEventEasy (el, type, fn, capturing) {
  return el.addEventListener(type, fn, capturing);
}

function addEventHard (el, type, fn) {
  return el.attachEvent('on' + type, wrap(el, type, fn));
}

function removeEventEasy (el, type, fn, capturing) {
  return el.removeEventListener(type, fn, capturing);
}

function removeEventHard (el, type, fn) {
  var listener = unwrap(el, type, fn);
  if (listener) {
    return el.detachEvent('on' + type, listener);
  }
}

function fabricateEvent (el, type, model) {
  var e = eventmap.indexOf(type) === -1 ? makeCustomEvent() : makeClassicEvent();
  if (el.dispatchEvent) {
    el.dispatchEvent(e);
  } else {
    el.fireEvent('on' + type, e);
  }
  function makeClassicEvent () {
    var e;
    if (doc.createEvent) {
      e = doc.createEvent('Event');
      e.initEvent(type, true, true);
    } else if (doc.createEventObject) {
      e = doc.createEventObject();
    }
    return e;
  }
  function makeCustomEvent () {
    return new customEvent(type, { detail: model });
  }
}

function wrapperFactory (el, type, fn) {
  return function wrapper (originalEvent) {
    var e = originalEvent || global.event;
    e.target = e.target || e.srcElement;
    e.preventDefault = e.preventDefault || function preventDefault () { e.returnValue = false; };
    e.stopPropagation = e.stopPropagation || function stopPropagation () { e.cancelBubble = true; };
    e.which = e.which || e.keyCode;
    fn.call(el, e);
  };
}

function wrap (el, type, fn) {
  var wrapper = unwrap(el, type, fn) || wrapperFactory(el, type, fn);
  hardCache.push({
    wrapper: wrapper,
    element: el,
    type: type,
    fn: fn
  });
  return wrapper;
}

function unwrap (el, type, fn) {
  var i = find(el, type, fn);
  if (i) {
    var wrapper = hardCache[i].wrapper;
    hardCache.splice(i, 1); // free up a tad of memory
    return wrapper;
  }
}

function find (el, type, fn) {
  var i, item;
  for (i = 0; i < hardCache.length; i++) {
    item = hardCache[i];
    if (item.element === el && item.type === type && item.fn === fn) {
      return i;
    }
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./eventmap":9,"custom-event":10}],9:[function(require,module,exports){
(function (global){
'use strict';

var eventmap = [];
var eventname = '';
var ron = /^on/;

for (eventname in global) {
  if (ron.test(eventname)) {
    eventmap.push(eventname.slice(2));
  }
}

module.exports = eventmap;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],10:[function(require,module,exports){
(function (global){

var NativeCustomEvent = global.CustomEvent;

function useNative () {
  try {
    var p = new NativeCustomEvent('cat', { detail: { foo: 'bar' } });
    return  'cat' === p.type && 'bar' === p.detail.foo;
  } catch (e) {
  }
  return false;
}

/**
 * Cross-browser `CustomEvent` constructor.
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent
 *
 * @public
 */

module.exports = useNative() ? NativeCustomEvent :

// IE >= 9
'function' === typeof document.createEvent ? function CustomEvent (type, params) {
  var e = document.createEvent('CustomEvent');
  if (params) {
    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);
  } else {
    e.initCustomEvent(type, false, false, void 0);
  }
  return e;
} :

// IE <= 8
function CustomEvent (type, params) {
  var e = document.createEventObject();
  e.type = type;
  if (params) {
    e.bubbles = Boolean(params.bubbles);
    e.cancelable = Boolean(params.cancelable);
    e.detail = params.detail;
  } else {
    e.bubbles = false;
    e.cancelable = false;
    e.detail = void 0;
  }
  return e;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],11:[function(require,module,exports){
'use strict';

var cache = {};
var start = '(?:^|\\s)';
var end = '(?:\\s|$)';

function lookupClass (className) {
  var cached = cache[className];
  if (cached) {
    cached.lastIndex = 0;
  } else {
    cache[className] = cached = new RegExp(start + className + end, 'g');
  }
  return cached;
}

function addClass (el, className) {
  var current = el.className;
  if (!current.length) {
    el.className = className;
  } else if (!lookupClass(className).test(current)) {
    el.className += ' ' + className;
  }
}

function rmClass (el, className) {
  el.className = el.className.replace(lookupClass(className), ' ').trim();
}

module.exports = {
  add: addClass,
  rm: rmClass
};

},{}],12:[function(require,module,exports){
var css = ".gu-mirror {\n  position: fixed!important;\n  margin: 0!important;\n  z-index: 9999!important;\n  opacity: .8;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=80)\";\n  filter: alpha(opacity=80);\n}\n.gu-hide {\n  display: none!important;\n}\n.gu-unselectable {\n  -webkit-user-select: none!important;\n  -moz-user-select: none!important;\n  -ms-user-select: none!important;\n  user-select: none!important;\n}\n.gu-transit {\n  opacity: .2;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=20)\";\n  filter: alpha(opacity=20);\n}\n"; (require("browserify-css").createStyle(css, { "href": "node_modules\\dragula\\dist\\dragula.min.css" }, { "insertAt": "bottom" })); module.exports = css;
},{"browserify-css":5}],13:[function(require,module,exports){
(function (global){
'use strict';

var emitter = require('contra/emitter');
var crossvent = require('crossvent');
var classes = require('./classes');
var doc = document;
var documentElement = doc.documentElement;

function dragula (initialContainers, options) {
  var len = arguments.length;
  if (len === 1 && Array.isArray(initialContainers) === false) {
    options = initialContainers;
    initialContainers = [];
  }
  var _mirror; // mirror image
  var _source; // source container
  var _item; // item being dragged
  var _offsetX; // reference x
  var _offsetY; // reference y
  var _moveX; // reference move x
  var _moveY; // reference move y
  var _initialSibling; // reference sibling when grabbed
  var _currentSibling; // reference sibling now
  var _copy; // item used for copying
  var _renderTimer; // timer for setTimeout renderMirrorImage
  var _lastDropTarget = null; // last container item was over
  var _grabbed; // holds mousedown context until first mousemove

  var o = options || {};
  if (o.moves === void 0) { o.moves = always; }
  if (o.accepts === void 0) { o.accepts = always; }
  if (o.invalid === void 0) { o.invalid = invalidTarget; }
  if (o.containers === void 0) { o.containers = initialContainers || []; }
  if (o.isContainer === void 0) { o.isContainer = never; }
  if (o.copy === void 0) { o.copy = false; }
  if (o.copySortSource === void 0) { o.copySortSource = false; }
  if (o.revertOnSpill === void 0) { o.revertOnSpill = false; }
  if (o.removeOnSpill === void 0) { o.removeOnSpill = false; }
  if (o.direction === void 0) { o.direction = 'vertical'; }
  if (o.ignoreInputTextSelection === void 0) { o.ignoreInputTextSelection = true; }
  if (o.mirrorContainer === void 0) { o.mirrorContainer = doc.body; }

  var drake = emitter({
    containers: o.containers,
    start: manualStart,
    end: end,
    cancel: cancel,
    remove: remove,
    destroy: destroy,
    canMove: canMove,
    dragging: false
  });

  if (o.removeOnSpill === true) {
    drake.on('over', spillOver).on('out', spillOut);
  }

  events();

  return drake;

  function isContainer (el) {
    return drake.containers.indexOf(el) !== -1 || o.isContainer(el);
  }

  function events (remove) {
    var op = remove ? 'remove' : 'add';
    touchy(documentElement, op, 'mousedown', grab);
    touchy(documentElement, op, 'mouseup', release);
  }

  function eventualMovements (remove) {
    var op = remove ? 'remove' : 'add';
    touchy(documentElement, op, 'mousemove', startBecauseMouseMoved);
  }

  function movements (remove) {
    var op = remove ? 'remove' : 'add';
    crossvent[op](documentElement, 'selectstart', preventGrabbed); // IE8
    crossvent[op](documentElement, 'click', preventGrabbed);
  }

  function destroy () {
    events(true);
    release({});
  }

  function preventGrabbed (e) {
    if (_grabbed) {
      e.preventDefault();
    }
  }

  function grab (e) {
    _moveX = e.clientX;
    _moveY = e.clientY;

    var ignore = whichMouseButton(e) !== 1 || e.metaKey || e.ctrlKey;
    if (ignore) {
      return; // we only care about honest-to-god left clicks and touch events
    }
    var item = e.target;
    var context = canStart(item);
    if (!context) {
      return;
    }
    _grabbed = context;
    eventualMovements();
    if (e.type === 'mousedown') {
      if (isInput(item)) { // see also: https://github.com/bevacqua/dragula/issues/208
        item.focus(); // fixes https://github.com/bevacqua/dragula/issues/176
      } else {
        e.preventDefault(); // fixes https://github.com/bevacqua/dragula/issues/155
      }
    }
  }

  function startBecauseMouseMoved (e) {
    if (!_grabbed) {
      return;
    }
    if (whichMouseButton(e) === 0) {
      release({});
      return; // when text is selected on an input and then dragged, mouseup doesn't fire. this is our only hope
    }
    // truthy check fixes #239, equality fixes #207
    if (e.clientX !== void 0 && e.clientX === _moveX && e.clientY !== void 0 && e.clientY === _moveY) {
      return;
    }
    if (o.ignoreInputTextSelection) {
      var clientX = getCoord('clientX', e);
      var clientY = getCoord('clientY', e);
      var elementBehindCursor = doc.elementFromPoint(clientX, clientY);
      if (isInput(elementBehindCursor)) {
        return;
      }
    }

    var grabbed = _grabbed; // call to end() unsets _grabbed
    eventualMovements(true);
    movements();
    end();
    start(grabbed);

    var offset = getOffset(_item);
    _offsetX = getCoord('pageX', e) - offset.left;
    _offsetY = getCoord('pageY', e) - offset.top;

    classes.add(_copy || _item, 'gu-transit');
    renderMirrorImage();
    drag(e);
  }

  function canStart (item) {
    if (drake.dragging && _mirror) {
      return;
    }
    if (isContainer(item)) {
      return; // don't drag container itself
    }
    var handle = item;
    while (getParent(item) && isContainer(getParent(item)) === false) {
      if (o.invalid(item, handle)) {
        return;
      }
      item = getParent(item); // drag target should be a top element
      if (!item) {
        return;
      }
    }
    var source = getParent(item);
    if (!source) {
      return;
    }
    if (o.invalid(item, handle)) {
      return;
    }

    var movable = o.moves(item, source, handle, nextEl(item));
    if (!movable) {
      return;
    }

    return {
      item: item,
      source: source
    };
  }

  function canMove (item) {
    return !!canStart(item);
  }

  function manualStart (item) {
    var context = canStart(item);
    if (context) {
      start(context);
    }
  }

  function start (context) {
    if (isCopy(context.item, context.source)) {
      _copy = context.item.cloneNode(true);
      drake.emit('cloned', _copy, context.item, 'copy');
    }

    _source = context.source;
    _item = context.item;
    _initialSibling = _currentSibling = nextEl(context.item);

    drake.dragging = true;
    drake.emit('drag', _item, _source);
  }

  function invalidTarget () {
    return false;
  }

  function end () {
    if (!drake.dragging) {
      return;
    }
    var item = _copy || _item;
    drop(item, getParent(item));
  }

  function ungrab () {
    _grabbed = false;
    eventualMovements(true);
    movements(true);
  }

  function release (e) {
    ungrab();

    if (!drake.dragging) {
      return;
    }
    var item = _copy || _item;
    var clientX = getCoord('clientX', e);
    var clientY = getCoord('clientY', e);
    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
    if (dropTarget && ((_copy && o.copySortSource) || (!_copy || dropTarget !== _source))) {
      drop(item, dropTarget);
    } else if (o.removeOnSpill) {
      remove();
    } else {
      cancel();
    }
  }

  function drop (item, target) {
    var parent = getParent(item);
    if (_copy && o.copySortSource && target === _source) {
      parent.removeChild(_item);
    }
    if (isInitialPlacement(target)) {
      drake.emit('cancel', item, _source, _source);
    } else {
      drake.emit('drop', item, target, _source, _currentSibling);
    }
    cleanup();
  }

  function remove () {
    if (!drake.dragging) {
      return;
    }
    var item = _copy || _item;
    var parent = getParent(item);
    if (parent) {
      parent.removeChild(item);
    }
    drake.emit(_copy ? 'cancel' : 'remove', item, parent, _source);
    cleanup();
  }

  function cancel (revert) {
    if (!drake.dragging) {
      return;
    }
    var reverts = arguments.length > 0 ? revert : o.revertOnSpill;
    var item = _copy || _item;
    var parent = getParent(item);
    var initial = isInitialPlacement(parent);
    if (initial === false && reverts) {
      if (_copy) {
        if (parent) {
          parent.removeChild(_copy);
        }
      } else {
        _source.insertBefore(item, _initialSibling);
      }
    }
    if (initial || reverts) {
      drake.emit('cancel', item, _source, _source);
    } else {
      drake.emit('drop', item, parent, _source, _currentSibling);
    }
    cleanup();
  }

  function cleanup () {
    var item = _copy || _item;
    ungrab();
    removeMirrorImage();
    if (item) {
      classes.rm(item, 'gu-transit');
    }
    if (_renderTimer) {
      clearTimeout(_renderTimer);
    }
    drake.dragging = false;
    if (_lastDropTarget) {
      drake.emit('out', item, _lastDropTarget, _source);
    }
    drake.emit('dragend', item);
    _source = _item = _copy = _initialSibling = _currentSibling = _renderTimer = _lastDropTarget = null;
  }

  function isInitialPlacement (target, s) {
    var sibling;
    if (s !== void 0) {
      sibling = s;
    } else if (_mirror) {
      sibling = _currentSibling;
    } else {
      sibling = nextEl(_copy || _item);
    }
    return target === _source && sibling === _initialSibling;
  }

  function findDropTarget (elementBehindCursor, clientX, clientY) {
    var target = elementBehindCursor;
    while (target && !accepted()) {
      target = getParent(target);
    }
    return target;

    function accepted () {
      var droppable = isContainer(target);
      if (droppable === false) {
        return false;
      }

      var immediate = getImmediateChild(target, elementBehindCursor);
      var reference = getReference(target, immediate, clientX, clientY);
      var initial = isInitialPlacement(target, reference);
      if (initial) {
        return true; // should always be able to drop it right back where it was
      }
      return o.accepts(_item, target, _source, reference);
    }
  }

  function drag (e) {
    if (!_mirror) {
      return;
    }
    e.preventDefault();

    var clientX = getCoord('clientX', e);
    var clientY = getCoord('clientY', e);
    var x = clientX - _offsetX;
    var y = clientY - _offsetY;

    _mirror.style.left = x + 'px';
    _mirror.style.top = y + 'px';

    var item = _copy || _item;
    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
    var changed = dropTarget !== null && dropTarget !== _lastDropTarget;
    if (changed || dropTarget === null) {
      out();
      _lastDropTarget = dropTarget;
      over();
    }
    var parent = getParent(item);
    if (dropTarget === _source && _copy && !o.copySortSource) {
      if (parent) {
        parent.removeChild(item);
      }
      return;
    }
    var reference;
    var immediate = getImmediateChild(dropTarget, elementBehindCursor);
    if (immediate !== null) {
      reference = getReference(dropTarget, immediate, clientX, clientY);
    } else if (o.revertOnSpill === true && !_copy) {
      reference = _initialSibling;
      dropTarget = _source;
    } else {
      if (_copy && parent) {
        parent.removeChild(item);
      }
      return;
    }
    if (
      (reference === null && changed) ||
      reference !== item &&
      reference !== nextEl(item)
    ) {
      _currentSibling = reference;
      dropTarget.insertBefore(item, reference);
      drake.emit('shadow', item, dropTarget, _source);
    }
    function moved (type) { drake.emit(type, item, _lastDropTarget, _source); }
    function over () { if (changed) { moved('over'); } }
    function out () { if (_lastDropTarget) { moved('out'); } }
  }

  function spillOver (el) {
    classes.rm(el, 'gu-hide');
  }

  function spillOut (el) {
    if (drake.dragging) { classes.add(el, 'gu-hide'); }
  }

  function renderMirrorImage () {
    if (_mirror) {
      return;
    }
    var rect = _item.getBoundingClientRect();
    _mirror = _item.cloneNode(true);
    _mirror.style.width = getRectWidth(rect) + 'px';
    _mirror.style.height = getRectHeight(rect) + 'px';
    classes.rm(_mirror, 'gu-transit');
    classes.add(_mirror, 'gu-mirror');
    o.mirrorContainer.appendChild(_mirror);
    touchy(documentElement, 'add', 'mousemove', drag);
    classes.add(o.mirrorContainer, 'gu-unselectable');
    drake.emit('cloned', _mirror, _item, 'mirror');
  }

  function removeMirrorImage () {
    if (_mirror) {
      classes.rm(o.mirrorContainer, 'gu-unselectable');
      touchy(documentElement, 'remove', 'mousemove', drag);
      getParent(_mirror).removeChild(_mirror);
      _mirror = null;
    }
  }

  function getImmediateChild (dropTarget, target) {
    var immediate = target;
    while (immediate !== dropTarget && getParent(immediate) !== dropTarget) {
      immediate = getParent(immediate);
    }
    if (immediate === documentElement) {
      return null;
    }
    return immediate;
  }

  function getReference (dropTarget, target, x, y) {
    var horizontal = o.direction === 'horizontal';
    var reference = target !== dropTarget ? inside() : outside();
    return reference;

    function outside () { // slower, but able to figure out any position
      var len = dropTarget.children.length;
      var i;
      var el;
      var rect;
      for (i = 0; i < len; i++) {
        el = dropTarget.children[i];
        rect = el.getBoundingClientRect();
        if (horizontal && (rect.left + rect.width / 2) > x) { return el; }
        if (!horizontal && (rect.top + rect.height / 2) > y) { return el; }
      }
      return null;
    }

    function inside () { // faster, but only available if dropped inside a child element
      var rect = target.getBoundingClientRect();
      if (horizontal) {
        return resolve(x > rect.left + getRectWidth(rect) / 2);
      }
      return resolve(y > rect.top + getRectHeight(rect) / 2);
    }

    function resolve (after) {
      return after ? nextEl(target) : target;
    }
  }

  function isCopy (item, container) {
    return typeof o.copy === 'boolean' ? o.copy : o.copy(item, container);
  }
}

function touchy (el, op, type, fn) {
  var touch = {
    mouseup: 'touchend',
    mousedown: 'touchstart',
    mousemove: 'touchmove'
  };
  var pointers = {
    mouseup: 'pointerup',
    mousedown: 'pointerdown',
    mousemove: 'pointermove'
  };
  var microsoft = {
    mouseup: 'MSPointerUp',
    mousedown: 'MSPointerDown',
    mousemove: 'MSPointerMove'
  };
  if (global.navigator.pointerEnabled) {
    crossvent[op](el, pointers[type], fn);
  } else if (global.navigator.msPointerEnabled) {
    crossvent[op](el, microsoft[type], fn);
  } else {
    crossvent[op](el, touch[type], fn);
    crossvent[op](el, type, fn);
  }
}

function whichMouseButton (e) {
  if (e.touches !== void 0) { return e.touches.length; }
  if (e.which !== void 0 && e.which !== 0) { return e.which; } // see https://github.com/bevacqua/dragula/issues/261
  if (e.buttons !== void 0) { return e.buttons; }
  var button = e.button;
  if (button !== void 0) { // see https://github.com/jquery/jquery/blob/99e8ff1baa7ae341e94bb89c3e84570c7c3ad9ea/src/event.js#L573-L575
    return button & 1 ? 1 : button & 2 ? 3 : (button & 4 ? 2 : 0);
  }
}

function getOffset (el) {
  var rect = el.getBoundingClientRect();
  return {
    left: rect.left + getScroll('scrollLeft', 'pageXOffset'),
    top: rect.top + getScroll('scrollTop', 'pageYOffset')
  };
}

function getScroll (scrollProp, offsetProp) {
  if (typeof global[offsetProp] !== 'undefined') {
    return global[offsetProp];
  }
  if (documentElement.clientHeight) {
    return documentElement[scrollProp];
  }
  return doc.body[scrollProp];
}

function getElementBehindPoint (point, x, y) {
  var p = point || {};
  var state = p.className;
  var el;
  p.className += ' gu-hide';
  el = doc.elementFromPoint(x, y);
  p.className = state;
  return el;
}

function never () { return false; }
function always () { return true; }
function getRectWidth (rect) { return rect.width || (rect.right - rect.left); }
function getRectHeight (rect) { return rect.height || (rect.bottom - rect.top); }
function getParent (el) { return el.parentNode === doc ? null : el.parentNode; }
function isInput (el) { return el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' || el.tagName === 'SELECT' || isEditable(el); }
function isEditable (el) {
  if (!el) { return false; } // no parents were editable
  if (el.contentEditable === 'false') { return false; } // stop the lookup
  if (el.contentEditable === 'true') { return true; } // found a contentEditable element in the chain
  return isEditable(getParent(el)); // contentEditable is set to 'inherit'
}

function nextEl (el) {
  return el.nextElementSibling || manually();
  function manually () {
    var sibling = el;
    do {
      sibling = sibling.nextSibling;
    } while (sibling && sibling.nodeType !== 1);
    return sibling;
  }
}

function getEventHost (e) {
  // on touchend event, we have to use `e.changedTouches`
  // see http://stackoverflow.com/questions/7192563/touchend-event-properties
  // see https://github.com/bevacqua/dragula/issues/34
  if (e.targetTouches && e.targetTouches.length) {
    return e.targetTouches[0];
  }
  if (e.changedTouches && e.changedTouches.length) {
    return e.changedTouches[0];
  }
  return e;
}

function getCoord (coord, e) {
  var host = getEventHost(e);
  var missMap = {
    pageX: 'clientX', // IE8
    pageY: 'clientY' // IE8
  };
  if (coord in missMap && !(coord in host) && missMap[coord] in host) {
    coord = missMap[coord];
  }
  return host[coord];
}

module.exports = dragula;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./classes":11,"contra/emitter":7,"crossvent":8}],14:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],15:[function(require,module,exports){
(function (setImmediate){
var si = typeof setImmediate === 'function', tick;
if (si) {
  tick = function (fn) { setImmediate(fn); };
} else {
  tick = function (fn) { setTimeout(fn, 0); };
}

module.exports = tick;
}).call(this,require("timers").setImmediate)

},{"timers":16}],16:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)

},{"process/browser.js":14,"timers":16}],17:[function(require,module,exports){
module.exports={
  "name": "pdf-builder-2020",
  "version": "0.0.15-snapshot",
  "description": "",
  "main": "index.js",
  "scripts": {
    "build-all": "npm run build-pdf-editor && npm run build-manager & npm run deploy",
    "build-pdf-editor": "browserify -d src/pdf-editor/PdfEditor.js > public/pdf-editor/pdf-editor.js",
    "build-manager": "browserify -d src/manage-application/ManageApplication.js > public/manage-application/manager.js",
    "deploy": "xcopy /S /Y  \"./public\" \"C:/Users/Stranger_in_the_Q/IdeaProjects/itext-server/static\""
  },
  "devDependencies": {
    "babel-preset-es2015": "^6.24.1",
    "browserify": "^16.2.3",
    "browserify-css": "^0.14.0",
    "exports-loader": "^0.7.0",
    "graceful-fs": "^4.1.13",
    "imports-loader": "^0.8.0",
    "stripify": "^6.0.0"
  },
  "browserify": {
    "transform": [
      "browserify-css"
    ]
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "d3-selection": "^1.4.0",
    "dragula": "^3.7.2"
  }
}

},{}],18:[function(require,module,exports){
// var InlineEditor = require('../../dependencies/ckeditor/ckeditor5-inline-full/build/ckeditor')
var BalloonEditor = require('../../dependencies/ckeditor/ckeditor-baloon/build/ckeditor')
// require('../../dependencies/ckeditor/ckeditor5-inline-full/build/translations/ru')
module.exports = {

    removeTextEditor: function remove(el) {

    },

    initTextEditor: function (el) {
        ckEditor(el)
    }
};


function ckEditor(el) {

    if(!el || el.classList.contains('initialized'))
        return
    el.classList.add('initialized');
    // InlineEditor
    BalloonEditor
        .create(el, {

            toolbar: {
                items: [
                    'undo',
                    'redo',
                    '|',
                    'bold',
                    'italic',
                    'underline',
                    'strikethrough',
                    'subscript',
                    'superscript',
                    // 'blockQuote',
                    // 'bulletedList',
                    // 'numberedList',
                    '|',
                    'alignment',
                    'indent',
                    'outdent',
                    'fontFamily',
                    'fontSize',
                    'fontBackgroundColor',
                    'fontColor',
                    '|',
                    // 'imageUpload',
                    // 'insertTable',
                    'specialCharacters',
                    'horizontalLine',
                    'link'
                ]
            },
            language: 'ru',
            image: {
                // You need to configure the image toolbar, too, so it uses the new style buttons.
                toolbar: [
                    'imageUpload',
                    // 'imageTextAlternative',
                    // '|',
                    'imageStyle:alignLeft',
                    'imageStyle:full',
                    'imageStyle:alignRight'
                ],
                styles: [
                    'full',
                    'alignLeft',
                    'alignRight'
                ]
            },
            table: {
                contentToolbar: [
                    'tableColumn',
                    'tableRow',
                    'mergeTableCells',
                    'tableCellProperties',
                    'tableProperties'
                ]
            },
            licenseKey: '',

        }).then(editor => {
            el.editor = editor;
        })
}

},{"../../dependencies/ckeditor/ckeditor-baloon/build/ckeditor":1}],19:[function(require,module,exports){
let pageStyles = require('./page-styles');

function fixPageBreaks_by_AStanislavsky(tmp) {
    let s = tmp.querySelector('.page.container').style;
    s.height = '200px';
    s.display = 'table-cell'
}

module.exports = function (html) {
    let tmp = tmpElement(html);
    fixPageBreaks_by_AStanislavsky(tmp);
    fixFlex(tmp);
    fixImagesAlign(tmp);
    fixTablesAlign(tmp);
    pageBreaks(tmp);
    return page(tmp);
}

function page(el) {
    return `
        <html>
            <head>${style()}</head>
            <body>${el.innerHTML}</body>
        </html>
    `;
}

function style() {
    return `
        ${pageStyles}
        <style>
           
            figure > img {
                display: block;
                margin: 0 auto;
                max-width: 100%;
                min-width: 50px;
            }
            figure.image.image_resized img {
                width: 100%;
            }
           .image-style-align-left {
                float: left;
            }
           .image-style-align-right {
                float: right;
            }
            
        </style>
    `;
}

function pageBreaks(tmp) {
    tmp.querySelectorAll('.page-break').forEach(el => {
        el.innerHTML = '';
        el.classList.remove('page-break')
    })
}

function fixFlex(el) {
    el.querySelectorAll('.row').forEach(row => {
        let columns = row.querySelectorAll('.col-xs')
        columns.forEach(col => {
            let s = col.style;
            s.display = 'inline-block';
            s.float = "left";
            s.minWidth = s.width = 100 / columns.length + '%';
            s.verticalAlign = 'top';
            // s.padding = "0 3px";
            // s.backgroundColor = `hsl(${Math.random()*360},55%,85%)`
        })
    })
}

function fixImagesAlign(el) {
    el.querySelectorAll('figure.image').forEach(imgBlock => {
        let centerAlign = !imgBlock.classList.contains('image-style-align-left')
                        && !imgBlock.classList.contains('image-style-align-right');
        if (centerAlign)
            imgBlock.parentNode.style.textAlign = "center"
    })
}

function fixTablesAlign(el) {
    el.querySelectorAll('figure.table').forEach(tableBlock => {
        let centerAlign = !tableBlock.style.float;
        if (!centerAlign) return
        tableBlock.parentNode.style.textAlign = "center"
        tableBlock.style.display = "inline-block"
    })
}

function tmpElement(html) {
    let tmp = document.createElement('div');
    tmp.innerHTML = html;
    return tmp;
}
},{"./page-styles":29}],20:[function(require,module,exports){
let fill = '#432c12'

let move = `
    <path d="M352.201 425.775l-79.196 79.196c-9.373 9.373-24.568 9.373-33.941 
        0l-79.196-79.196c-15.119-15.119-4.411-40.971 16.971-40.97h51.162L228 284H127.196v51.162c0 
        21.382-25.851 32.09-40.971 16.971L7.029 272.937c-9.373-9.373-9.373-24.569 0-33.941L86.225 
        159.8c15.119-15.119 40.971-4.411 40.971 16.971V228H228V127.196h-51.23c-21.382 
        0-32.09-25.851-16.971-40.971l79.196-79.196c9.373-9.373 24.568-9.373 33.941 0l79.196 79.196c15.119 
        15.119 4.411 40.971-16.971 40.971h-51.162V228h100.804v-51.162c0-21.382 25.851-32.09 
        40.97-16.971l79.196 79.196c9.373 9.373 9.373 24.569 0 33.941L425.773 352.2c-15.119 15.119-40.971 
        4.411-40.97-16.971V284H284v100.804h51.23c21.382 0 32.09 25.851 16.971 40.971z"/>
`;

let copy = `
    <path fill="${fill}" d="M320 448v40c0 13.255-10.745 24-24 24H24c-13.255 
        0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h72v296c0 
        30.879 25.121 56 56 56h168zm0-344V0H152c-13.255 0-24 10.745-24 24v368c0 
        13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24V128H344c-13.2 
        0-24-10.8-24-24zm120.971-31.029L375.029 7.029A24 24 0 0 0 358.059 
        0H352v96h96v-6.059a24 24 0 0 0-7.029-16.97z"/>
`;

let del = `
    <path fill="${fill}" d="M81  81 l350  350 l-40 40 l-350 -350z"/>
    <path fill="${fill}" d="M411 81 l-350 350 l40  40 l350  -350z"/>
`;

let down = `
    <path fill="${fill}" d="M50 150 l200 200 l200 -200z"/>
`;

let up = `
    <path fill="${fill}" d="M50 350 l200 -200 l200 200z"/>
`;

module.exports = {
    move: (w, h) => svg(w, h, move, [-50, -50, 612, 612]),
    copy: (w, h) => svg(w, h, copy),
    del: (w, h) => svg(w, h, del),
    up: (w, h) => svg(w, h, up),
    down: (w, h) => svg(w, h,down)
};

function svg(w, h, html, vb) {
    vb = vb || [-50, -50, 548, 612];
    return `<svg xmlns="http://www.w3.org/2000/svg" 
                viewBox="${vb}" 
                width="${w}px"  
                height="${h}px">
            ${html}
        </svg>`
}
},{}],21:[function(require,module,exports){
require('./pdf-editor.css');
require('../../dependencies/flexboxgrid/flexboxgrid.min.css');
let ver = require('../../package.json').version

let dnd = require('./dnd')
let htmlTemplate = require('./html-template');
let TextEditor = require('./CkEditor5');
let blocks = require('./blocks');
let svgOverlay = require('./svgOverlay/svgOverlay');
let documentCleaner = require('./documentCleaner');
let forItextFormatter = require('./ForItextFormatter');
let mouseoverButtons = require('./mouseoverButtons');
let pageStyles = require('./page-styles');
let TemplatesFactory = require('./TemplatesFactory');
let templatesFactory = new TemplatesFactory();

class PdfEditor {

    constructor(properties) {
        this.properties = properties || {};
        this.properties.blockProperties = this.properties.blockProperties || {}
        this.properties.buttonsSize = this.properties.buttonsSize || 25;
        this.initPdfEditor();
        this.writeVersion();
        dnd.initDnD(this)

        this.initCollapsePanels()
        this.initClearBlockSelectionOnClickInMilkListener();

        blocks.initBlocks(this);
        svgOverlay.initSvgOverlay(this);

        addEventListener('mouseup', () => {
            this.manageHoverState()
            this.removeEmptyRows()
        })
        console.log('pdf-editor: ' + ver)
    }

    removeEmptyRows() {
        setTimeout(() => {
            let allBlocks = this.targetElement.querySelectorAll('.pdf-editor .page > .template');
            allBlocks.forEach(b => {
                if (!b.firstChild)
                    return
                this.clearNotNeededRows(b.firstChild);
                if (b.childElementCount === 1)
                    b.firstChild.classList.remove('empty-drop-zone')

                this.manageExtraRows(b.firstChild);
                this.markEmptyRows(b.firstChild);
            })
        })
    }

    initPdfEditor() {
        let targetElement = this.properties.target;
        if (typeof targetElement === "string")
            targetElement = document.querySelector(targetElement);
        targetElement.innerHTML = htmlTemplate(this.properties);
        targetElement.querySelector('.sidePanel #blocks')
            .innerHTML = templatesFactory.createBlocks();
        targetElement.querySelector('.sidePanel #elements')
            .innerHTML = templatesFactory.createElements();
        targetElement.addEventListener('mousemove',
            e => mouseoverButtons.manage(e, this));

        this.targetElement = targetElement;
    }

    writeVersion(){
        let page = this.targetElement.querySelector('.page');
        if (!page.getAttribute('created-ver'))
            page.setAttribute('created-ver', ver);
        page.setAttribute('last-edited-ver', ver);
    }

    initClearBlockSelectionOnClickInMilkListener() {
        this.targetElement.querySelector('.content').addEventListener('click', e => {
            let clear = ['content', 'page'].find(c => e.target.classList.contains(c))
            clear |= e.target.querySelector('.page-break');
            if (clear)
                this.clickOnBlock(null)
        });
    }

    initCollapsePanels() {
        this.targetElement.querySelectorAll('.groupName').forEach(groupName => {
            groupName.addEventListener('click', () => {
                groupName.classList.toggle('collapsed')
            });
        });
    }

    manageHoverState(target) {
        if (target === this.lastHover)
            return;
        this.lastHover = target;
        this.targetElement.querySelectorAll('.page.container > .template')
            .forEach(tpl => tpl.classList.remove('hover-state'))
        if (!target)
            return
        target.classList.add('hover-state')

    }

    markEmptyRows(target) {
        target.parentNode.querySelectorAll('.dropzone').forEach(dz => {
            let empty = dz.innerHTML.trim() === '';
            dz.classList.toggle('empty-drop-zone', empty)
        });
    }

    manageExtraRows(target) {
        // console.log('manageExtraRows')
        let first = [...target.parentNode.querySelectorAll('.dropzone')].shift()
        if (first && first.innerHTML.trim() !== '') {
            target.parentNode.insertBefore(this.newDropZone(), first);
        }
        let last = [...target.parentNode.querySelectorAll('.dropzone')].pop()
        if (last && last.innerHTML.trim() !== '') {
            target.parentNode.append(this.newDropZone());
        }
    }

    clearNotNeededRows(target) {
        try { // console.log('clearNotNeededRows')
            let dropZones = target.parentNode.querySelectorAll('.dropzone');
            for (let i = 0; i < dropZones.length; i++) {
                if (dropZones.length > 1 && dropZones[i].innerHTML.trim() === '') {
                    dropZones[i].remove();
                    dnd.removeElement(dropZones[i])
                }
            }
        } catch (e) {
            console.error(e)
        }
    }

    newDropZone() {
        let dz = document.createElement('div');
        dz.className = 'dropzone row';
        this.initDz(dz);
        return dz
    }

    initEditor(el) {
        this.removeBySel('.dz-buttons, .template-buttons');
        TextEditor.initTextEditor(el)
    }

    initDz(dropZone) {
        dnd.pushElement(dropZone);
        dropZone.classList.remove('origin');
    }

    removeBySel(sel) {
        this.targetElement.querySelectorAll(sel)
            .forEach(e => e.remove());
    }

    clickOnBlock(el) {
        this.selectedBlock = el;
        blocks.handleClick(el);
    }

    // public api

    getDocument() {
        let pageContent = this.targetElement.querySelector('.page').outerHTML;
        return documentCleaner(pageContent).innerHTML;
    }

    forItext(html){
        return forItextFormatter(html || this.getDocument())
    }

    loadDocument(data) {
        if (!data)
            return;
        let content = this.targetElement.querySelector('.content');
        content.innerHTML = pageStyles + data;
        content.querySelectorAll('.headerBlock, .textBlock, .imgBlock, .tableBlock').forEach(el => {
            el.classList.add('add_editor_here')
            el.classList.add('ck-editor__editable_inline')
        })
        let templates = content.querySelectorAll('.template');
        templates.forEach(tpl => blocks.initTemplate(tpl, '.dropzone'));

        content.querySelectorAll('.page > .template').forEach(block => {
            if(!block.firstChild)return
            this.manageExtraRows(block.firstChild);
            this.markEmptyRows(block.firstChild);
        })

        dnd.pushElement(content.querySelector('.page'));
    }

    getPageStyles(){
        return pageStyles;
    }
}

window.PdfEditor = PdfEditor;
},{"../../dependencies/flexboxgrid/flexboxgrid.min.css":3,"../../package.json":17,"./CkEditor5":18,"./ForItextFormatter":19,"./TemplatesFactory":22,"./blocks":24,"./dnd":25,"./documentCleaner":26,"./html-template":27,"./mouseoverButtons":28,"./page-styles":29,"./pdf-editor.css":30,"./svgOverlay/svgOverlay":33}],22:[function(require,module,exports){
class TemplatesFactory {

    createBlocks() {
        let row = `<div class='dropzone origin row'></div>`;
        return this.createTemplate(row) + this.createTemplate(this.pageBreakBlock());
    }
    
     createTemplate(content, col) {
        return `<div class='template ${col?'col-xs':''}'>${content}</div>`;
    }

     imgBlock() {
        let svg = `<svg preserveAspectRatio='xMidYMid meet' xmlns='http://www.w3.org/2000/svg' 
                            width='100px' height='100px' viewbox='0 0 100 100'>
                          <path stroke='black' fill='none' 
                                d='M10,90v-20l30,-30l15,15l35,-35v70z M5,5h90v90h-90z M30,10a10,10,0,1,0,0.001,0z'></path>
                        </svg>`;
        return `<img draggable="false" class="img" width="100px" height="100px"  src="data:image/svg+xml;base64,${btoa(svg)}" >`;
    }

     textBlock() {
        return `<span>
                    Если у меня много КЦ есть, я имею право носить малиновые штаны, 
                    и передо мной и пацак должен 2 раза приседать, и чатланин ку делать, 
                    и эцилоп меня не имеет права бить по ночам, никогда!
                </span>`
    }

     tableBlock() {
        let t = this.td();
        t += t + t + t;
        t = `<tr>${t}</tr>`;
        t += t + t;
        return `<table style="border: 1.5px solid"><tbody>${t}</tbody></table>`
    }

    td() {
        return `<td style="border: 1.5px solid"></td>`
    }

     headerBlock() {
        return `<p style="text-align:center;"><span class="text-huge"><strong>Заголовок</strong></span></p>`;
    }

     pageBreakBlock() {
        return `<div class="page-break" style="page-break-after: always">разрыв страницы</div>`;
    }

     createElements() {
        return  [
            this.headerBlock,
            this.textBlock,
            this.imgBlock,
            this.tableBlock
        ].map(fn => {
            let content = `<div class="${fn.name} add_editor_here">${fn.call(this)}</div>`;
            return this.createTemplate(content, true)
        }).join('')
    }
}

module.exports = TemplatesFactory;
},{}],23:[function(require,module,exports){
let templates = {

    block_name : `
        <div class="sub-label">Название блока</div>
        <input type="text" id="block_name">
    `,

    block_descr : `
        <div class="sub-label">Описание блока</div>
        <textarea id="block_descr"></textarea>
    `,

    block_no_edit: `
        <br>
        <input id="block_no_edit" type="checkbox">
        <label for="block_no_edit" class="sub-label">Разрешить редактирование</label>
    `,
    block_no_move: `
        <br>
        <input id="block_no_move" type="checkbox">
        <label for="block_no_move" class="sub-label">Разрешить перемещение</label>     
    `,

    block_no_copy: `
        <br>
        <input id="block_no_copy" type="checkbox">
        <label for="block_no_copy"  class="sub-label">Разрешить копирование</label>
    `,
    block_attach_button:`
        <br>
        <br>
        <button>Прикрепить из базы</button>
    `
}

module.exports = {

    htmlTemplate: properties => `
         <div style="padding:  0 10px; color:white; width:100%">
            ${Object.entries(properties.blockProperties).map(propertyBlock).join('')}
        </div>
    `,

};

function propertyBlock(entry) {
    return entry[1] !== false ? templates[entry[0]] : '';
}
},{}],24:[function(require,module,exports){
module.exports = {

    pdfEditor: null,

    newBlockNameText: 'Новый блок ',

    propertyKeys: {
        block_name: 'block_name',
        block_descr: 'block_descr',
        block_no_edit: 'block_no_edit',
        block_no_move: 'block_no_move',
        block_no_copy: 'block_no_copy',
    },

    initBlocks(pdfEditor){
        this.pdfEditor = pdfEditor;
        this.initBlockEditors()
    },

    handleClick(el) {
        let pdfEditor = this.pdfEditor;

        if (!pdfEditor.properties.propertiesPage)
            return

        if (!el) return;

        let keys = this.propertyKeys;

        [keys. block_name, keys. block_descr].forEach(key => {
            if (pdfEditor.properties.blockProperties[key])
                pdfEditor.targetElement.querySelector('#'+key).value = el.getAttribute(key)
        });

        [keys. block_no_edit, keys. block_no_move, keys.block_no_copy].forEach(key => {
            if (pdfEditor.properties.blockProperties[key])
                pdfEditor.targetElement.querySelector('#'+key).checked = "true" !== el.getAttribute(key);
        });
    },

    copyBlock(e) {
        e.stopPropagation();
        let tpl = e.target.closest('.template');
        let cloned = tpl.cloneNode(true);

        tpl.parentElement.insertBefore(cloned, tpl);
        tpl.parentElement.insertBefore(tpl, cloned); // stupid hack
        cloned.id = "";
        let name = this.propertyKeys.block_name;
        cloned.setAttribute(name, cloned.getAttribute(name) + ' копия')
        this.initTemplate(cloned, '.dropzone');

        cloned.querySelectorAll('div.add_editor_here').forEach(el =>{
            el.classList.remove('initialized');
            this.pdfEditor.initEditor(el);
        })
    },

    initTemplate(el, dropZoneSelector) {
        if (el.querySelector('.dropzone')) {

            if (!el.id)
                el.id = 'block_' + this.rnd() + this.rnd();

            let name = this.propertyKeys.block_name;
            if (!el.getAttribute(name))
                el.setAttribute(name, this.findNextNumber());

            el.addEventListener('click', () => this.pdfEditor.clickOnBlock(el));
            el.querySelectorAll(dropZoneSelector).forEach(dz => this.pdfEditor.initDz(dz));
        } else {
            this.pdfEditor.initEditor(el.querySelector('div.add_editor_here'));
        }
    },

    rnd() {
        return Math.random().toString(36).substring(2);
    },

    findNextNumber() {
        let numbers = [...this.pdfEditor.targetElement .querySelectorAll('.page > .template')].map(el => {
            let name = el.getAttribute(this.propertyKeys.block_name);
            return name && parseInt(name.split(this.newBlockNameText).pop());
        }).filter(n => n);
        let i = 1;
        for (; i < 1e5; i++)
            if (numbers.indexOf(i) === -1)
                break;
        return this.newBlockNameText + i;
    },

    initBlockEditors() {
        let  pdfEditor = this.pdfEditor;
        if (!pdfEditor.properties.propertiesPage)
            return

        Object.values(this.propertyKeys).forEach(function (id) {
            if (pdfEditor.properties.blockProperties[id])
                pdfEditor.targetElement.querySelector('#'+id).oninput = onInput;
        });

        function onInput() {
            if (!pdfEditor.selectedBlock || !pdfEditor.properties.blockProperties[this.id])
                return
            // console.log(self.selectedDropzone)
            pdfEditor.selectedBlock.setAttribute(this.id,
                this.type === 'checkbox' ? !this.checked : this.value
            );
            if (this.id !== 'block_no_edit')
                return;
            pdfEditor.selectedBlock
                .querySelectorAll('.add_editor_here')
                .forEach(el => {
                    if (this.checked)
                        el.setAttribute('contenteditable', true)
                    else
                        el.removeAttribute('contenteditable')
                })
        }
    }
};

},{}],25:[function(require,module,exports){
require('../../node_modules/dragula/dist/dragula.min.css');
let dragula = require('dragula');
let blocks = require('./blocks');

let drake;
let pdfEditor;
module.exports = {
    initDnD(pdfEditorInstance) {
        pdfEditor = pdfEditorInstance;
        drake = dragula([
            pdfEditor.targetElement.querySelector('#blocks'),
            pdfEditor.targetElement.querySelector('#elements'),
            pdfEditor.targetElement.querySelector('.page')
        ], {
            removeOnSpill: true,
            copy: function (el, source) {
                return source.classList.contains('templates');
            },
            accepts: (el, target) => dropAccepts(el, target),
            moves: function (el, container, handle) {
                return handle.classList.contains('handle') ||
                    container.classList.contains('templates');
            }
        });

        drake.on('drag', e => dragStart(e));
        drake.on('drop', (el, target) => handleDrop(el, target));
    },
    pushElement(element) {
        drake.containers.push(element)
    },
    removeElement(element) {
        drake.containers.splice( drake.containers.indexOf(element), 1 );
    }
};

function dragStart(e){

}

function dropAccepts(el, target) {
    let t = target.classList;
    if (t.contains('templates'))
        return false;
    if (el.querySelector('.dropzone') || el.querySelector('.page-break')) {
        return t.contains('page');
    } else {
        let canEdit = t.contains('dropzone') &&
            target.parentNode.getAttribute('block_no_edit') !== 'true';
        canEdit && pdfEditor.manageHoverState(target.parentNode, true);
        return canEdit;
    }
}


function handleDrop(el, target) {
    if (!target.classList.contains('page')){
        setTimeout(() => {
            pdfEditor.clearNotNeededRows(target);
            pdfEditor.manageExtraRows(target);
            pdfEditor.markEmptyRows(target);
        }, 10);
    }
    pdfEditor.clickOnBlock(pdfEditor.selectedBlock)
    blocks.initTemplate(el, '.origin');
}


},{"../../node_modules/dragula/dist/dragula.min.css":12,"./blocks":24,"dragula":13}],26:[function(require,module,exports){
module.exports = function (pageContent) {
    let tmp = document.createElement('div');
    tmp.innerHTML = pageContent;
    removeElements(tmp);
    cleanClasses(tmp);
    cleanAttributes(tmp);
    removeEmptyClassAttr(tmp);
    removeImageWidgetText(tmp);
    // pullUpFigureTagChildren(tmp)
    // console.log(tmp.innerHTML)
    return tmp;
}

function removeEmptyClassAttr(tmp) {
    tmp.querySelectorAll(`[class=""]`)
        .forEach(el => el.removeAttribute('class'));
}

function removeElements(tmp) {
    tmp.querySelectorAll([
        'style',
        '.ck-widget__selection-handle',
        '.ck-widget__resizer',
        '.dz-buttons',
        '.template-buttons',
        '.empty-drop-zone:first-child',
        '.empty-drop-zone:last-child'
    ].join(', ')).forEach(el => el.remove());
}

function cleanClasses(tmp) {
    [
        'initialized',
        'ck-blurred',
        'ck',
        'ck-content',
        'ck-editor__editable',
        'ck-rounded-corners',
        'ck-editor__editable_inline',
        'ck-editor__nested-editable',
        'ck-widget',
        'ck-widget_with-resizer',
        'ck-widget_selected',
        'ck-widget_with-selection-handle',
        'add_editor_here'
    ].forEach(c => tmp.querySelectorAll('.' + c)
        .forEach(el => el.classList.remove(c)));
}

function cleanAttributes(tmp) {
    [
        'aria-label',
        'contenteditable',
        'role',
        'lang',
        'dir',
        'data-cke-filler'
    ].forEach(attr => tmp.querySelectorAll(`[${attr}]`)
        .forEach(el => el.removeAttribute(attr)))
}

function removeImageWidgetText(tmp) {
    tmp.querySelectorAll('p, div')
        .forEach(el => el.innerHTML === 'Виджет изображений' && el.remove());
}

function pullUpFigureTagChildren(tmp) {
    tmp.querySelectorAll('figure')
        .forEach(f => {
            f.parentNode.insertBefore(f.firstChild, f);
            f.remove()
        })

}
},{}],27:[function(require,module,exports){


module.exports = properties => `
    ${require('./mouseoverButtons').styles(properties)}
    <div class="pdf-editor wrapper">
    
        <div class="sidePanel bg1">
            <div class="groupName">Блоки</div>
            <div id="blocks" class="templates"></div>
            <div class="groupName">Элементы</div>
            <div id="elements" class="templates"></div>
            ${properties.propertiesPage ? `
                <div class="groupName">Свойства</div>
                ${require('./blockProperties').htmlTemplate(properties)}
            ` : ''}
        </div>
        
        <div class="content">
            <div class="page container">${require('./page-styles')}</div>
        </div>

        ${require('./svgOverlay/svgOverlay').htmlTemplate(properties)}

    </div>
`;

},{"./blockProperties":23,"./mouseoverButtons":28,"./page-styles":29,"./svgOverlay/svgOverlay":33}],28:[function(require,module,exports){
let Icons = require('./Icons');
let blocks = require('./blocks');

module.exports = {
    manage: function(e, pdfEditor) {
        if (e.target.classList.contains('handle'))
            return;
        elementButtons(e, pdfEditor, blockButtons(e, pdfEditor));
    },
    styles: props => `
        <style>
            .pdf-editor .page .template:hover  .dz-buttons,
            .pdf-editor .page .template:hover  .template-buttons {
                opacity: 1;
            }
           .dz-buttons, .template-buttons {
                z-index: 111;
            } 
            .dz-buttons > div {
                transform: translate(${60+props.buttonsSize}px,0);
                width: 50px;
                user-select: none;
                text-align: right;
                height: 100px;
            }
            .dz-buttons svg, .template-buttons svg{
                pointer-events: none;
            }
            div.dz-buttons {
                margin-left: 700px;
            }
            .dz-buttons, .template-buttons {
                opacity: 0;
                position: relative;
                overflow: visible;
                width: 0px;
                height: 0px;
                line-height:0;
            }
            .template-buttons {
                transform: translate(${-10-props.buttonsSize}px, 0);
            }
            .template-buttons > div {
                width: 40px;
                height: 60px;
            }
        </style>
    `
}

function blockButtons(e, pdfEditor) {
    let size = pdfEditor.properties.buttonsSize
    let closestDz = e.target.closest('.page .template:not(.col-xs)');
    closestDz = closestDz || e.target.cl
    if (closestDz !== pdfEditor.mouseOverDz) {
        pdfEditor.removeBySel('.dz-buttons');
        pdfEditor.mouseOverDz = closestDz;
        if (closestDz) {
            let tb = document.createElement('div');
            tb.classList.add('dz-buttons');

            let canMove = closestDz.getAttribute('block_no_move') !== 'true';
            let canCopy = closestDz.getAttribute('block_no_copy') !== 'true';
            if (e.target.querySelector('.page-break'))
                canCopy = 0;
            tb.innerHTML = `
                    <div>
                        ${canMove ? `<span class='handle'>${Icons.move(size, size)}</span>` : ''}
                        ${canCopy ? `<span class='copy'>${Icons.copy(size, size)}</span>` : ''}
                        ${canMove ? `<span class='del'>${Icons.del(size, size)}</span>` : ''}
                        ${canMove ? `<span class='up'>${Icons.up(size, size)}</span>` : ''}
                        ${canMove ? `<span class='down'>${Icons.down(size, size)}</span>` : ''}
                    </div>
                `;
            closestDz.insertBefore(tb, closestDz.firstChild);

            let copy = tb.querySelector('.copy')
            copy && (copy.onclick = e => blocks.copyBlock(e))

            let del = tb.querySelector('.del')
            del && (del.onclick = e => {
                e.stopPropagation();
                let tpl = e.target.closest('.template');
                tpl.remove();
            });

            let up = tb.querySelector('.up')
            up && (up.onclick = e => {
                e.stopPropagation();
                let tpl = e.target.closest('.template');
                if (tpl.previousSibling && tpl.previousSibling.nodeName.toLowerCase() === "div")
                   tpl.parentNode.insertBefore(tpl, tpl.previousSibling)
            });

            let down = tb.querySelector('.down')
            down && (down.onclick = e => {
                e.stopPropagation();
                let tpl = e.target.closest('.template');
                tpl.parentNode.insertBefore(tpl, tpl.nextSibling.nextSibling)
            });
        }
    }
    return closestDz;
}

function elementButtons(e, pdfEditor, closestDz) {
    let size = pdfEditor.properties.buttonsSize
    let closestTpl = e.target.closest('.page .template.col-xs');
    if (closestTpl !== pdfEditor.mouseOverTpl) {
        pdfEditor.removeBySel('.template-buttons');
        pdfEditor.mouseOverTpl = closestTpl;
        let canEdit = closestDz && closestDz.getAttribute('block_no_edit') !== 'true';
        if (closestTpl && canEdit) {
            let closestTpl1 = e.target.closest('.page .template.col-xs:not(.mce-edit-focus)');
            let tb = document.createElement('div');
            tb.classList.add('template-buttons');
            tb.innerHTML = `
                    <div>
                        <div class='handle'>${Icons.move(size, size)}</div>
                    </div>
                `;
            closestTpl1.insertBefore(tb, closestTpl1.firstChild)
        }
    }
}



},{"./Icons":20,"./blocks":24}],29:[function(require,module,exports){
module.exports = `
<style>
p {
    margin-block-start: 0!important;
    margin-block-end: 0 !important;
}
.page {
    display: inline-block;
    min-height: 1110px;
    width: 100%;
    background: white;
    text-align: left;
    padding: 5px;
}
.template {
    color: black;
    width: 100%;
    padding: 0px;
}
.page > .template:not(:last-child) {
    margin-bottom: 5px;
}
div.dropzone.row {
    min-height: 35px;
    margin: 0;
    transition: 300ms;
}
div.dropzone.row.empty-drop-zone {
     min-height: 0px;
     opacity: 0;
}
div.template.hover-state div.dropzone.row.empty-drop-zone {
     min-height: 25px;
     opacity: 1;
     background-color: #0002;
}
.page .page-break {
    margin-left: -20px;
    margin-right: -20px;
    background: var(--bg-col);
    color: orange;
}
.page-break {
    background: #eee;
    height: 35px;
    pointer-events:none;
    text-align: center;
    line-height: 35px;
}
 .ck-widget__selection-handle {
    display: none;
 }
 .ck-widget_with-selection-handle{
    margin-top: 15px !important;
 }
 .ck-widget__selection-handle .ck.ck-icon {
    opacity: 0;
    pointer-events: none;
 }
 /*.template.col-xs {*/
 /*   padding: 2px!important;*/
 /*}*/
 /*.dropzone > .template {*/
 /*   height: 100%;*/
 /*}*/
 .page table {
    border-collapse: collapse;
 }
 .page table td {
    min-width: 40px;
 }
 
@page {
    margin: 0px;
}

.content .page.container div.add_editor_here{
    overflow: hidden;
    height: 100%;
}
</style>
`.split('\n').join('').split('    ').join('');
},{}],30:[function(require,module,exports){
var css = ".pdf-editor.wrapper {\n  display: flex;\n  flex-direction: row;\n  --bg-col: #444;\n}\n.pdf-editor .content {\n  flex-grow: 1;\n  background: var(--bg-col);\n  overflow-y: scroll;\n  padding: 50px 20px;\n  text-align: center;\n}\n.pdf-editor .page {\n  box-shadow: 1px 1px 4px 1px #2226;\n}\n.pdf-editor .sidePanel,\n.pdf-editor .propsPanel {\n  display: flex;\n  width: 360px;\n  /*background: #444;*/\n  flex-direction: column;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n  box-sizing: border-box;\n}\n.pdf-editor .templates {\n  /*flex-grow: 1;*/\n  /*overflow-y: auto;*/\n  /*overflow-x: hidden;*/\n  padding: 10px 25px;\n}\n.pdf-editor .templates .template {\n  margin-bottom: 5px;\n  /*padding:  5px 0;*/\n}\n.pdf-editor .buttons {\n  padding: 5px 5px 0 5px;\n}\n.pdf-editor .buttons button {\n  line-height: 30px;\n  border-radius: 11px;\n}\n.pdf-editor .template {\n  transition: 0.2s;\n}\n.pdf-editor #elements .template {\n  transition: 0.2s;\n  background: #eee;\n}\n.pdf-editor .sidePanel .dropzone {\n  background-color: #eee;\n  min-height: 35px;\n}\n.pdf-editor .sidePanel .template:hover {\n  transform: scale(1.1);\n  cursor: move;\n}\n.dropzone {\n  background-color: #0001;\n  /*border: 1px solid #0003;*/\n}\n/*div.dropzone.row:first-child,*/\n/*div.dropzone.row:last-child {*/\n/*    min-height: 0;*/\n/*}*/\n.handle {\n  cursor: move;\n}\n.copy {\n  cursor: pointer;\n}\n.handle,\n.copy,\n.del,\n.up,\n.down {\n  background-color: rgba(254, 177, 62, 0.4);\n  display: inline-block;\n  border-radius: 15%;\n  transition: 0.2s;\n  margin: 2px;\n}\n.handle:hover,\n.copy:hover,\n.del:hover,\n.up:hover,\n.down:hover {\n  background-color: rgba(254, 177, 62, 0.8);\n  /*background-color: rgb(187, 135, 64);*/\n}\n.dz-buttons,\n.template-buttons {\n  opacity: 0;\n  position: relative;\n  overflow: visible;\n  width: 0px;\n  height: 0px;\n  line-height: 0;\n}\n.template-buttons {\n  transform: translate(-40px, 0);\n}\n.template-buttons > div {\n  width: 40px;\n  height: 60px;\n  /*background: rebeccapurple;*/\n}\ndiv.dz-buttons {\n  margin-left: 700px;\n}\n.svg-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n}\ntable td {\n  min-width: 50px;\n  height: 20px;\n  border: 1px solid black;\n}\n.tableBlock {\n  padding-top: 3px;\n  padding-bottom: 3px;\n}\n.sub-label {\n  font-size: 16px;\n  color: #999;\n  font-family: Arial, sans-serif;\n}\n.sub-label:first-child {\n  padding-top: 5px;\n}\n.sidePanel #elements > div.template {\n  box-shadow: 0 0 0 1px gray;\n  text-align: center;\n}\n.sidePanel #elements  > div.template {\n  text-align: center;\n}\n.sidePanel #elements  table {\n  margin-top: 5px;\n  margin-bottom: 5px;\n}\n.sidePanel #elements  img {\n  margin-bottom: -4px;\n}\ndiv.template  table {\n  border-collapse: collapse;\n}\n.sidePanel textarea {\n  width: 333px;\n  height: 84px;\n}\n.sidePanel button,\n.sidePanel input[type=\"text\"] {\n  height: 28px;\n  width: 337px;\n}\n/*.sidePanel button {*/\n/*    outline: none;*/\n/*    padding-top: 5px;*/\n/*    border-radius: 5px;*/\n/*    border: 1px solid orange;*/\n/*    background: #444;*/\n/*    color: white;*/\n/*}*/\n.sidePanel textarea,\n.sidePanel input[type=\"text\"] {\n  border-radius: 4px;\n  background: #444;\n  color: white;\n  border: 1px solid #999;\n  margin-bottom: 5px;\n}\n.groupName {\n  width: 360px;\n  padding-left: 15px;\n  border-top: 1px solid gray;\n  border-bottom: 1px solid gray;\n  /*text-align: center;*/\n  font-size: 20px;\n  line-height: 30px;\n  font-family: Arial, sans-serif;\n  color: #999;\n  box-sizing: border-box;\n  cursor: pointer;\n}\n.groupName + div {\n  transition: 300ms;\n  max-height: 100vh;\n  overflow: hidden;\n}\n.groupName.collapsed + div {\n  max-height: 0;\n  min-height: 0 !important;\n  padding-top: 0;\n  padding-bottom: 0;\n  overflow: hidden;\n}\n.groupName:after {\n  content: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='30' height='30'><circle fill='%23777' cx='15' cy='15' r='10' /><polyline stroke-width='3' points='10 13 15 18 20 13' fill='none' stroke='%23444'/></svg>\");\n  transition: 300ms;\n  float: right;\n  margin-right: 10px;\n  display: inline-block;\n  line-height: 0px;\n}\n.groupName.collapsed:after {\n  transform: rotate(90deg) scale(-1,-1);\n}\n.sidePanel table {\n  /*padding: 5px;*/\n  margin-left: 40px;\n}\n.sidePanel tr:nth-child(2) td:nth-child(3) {\n  background: lightgray;\n}\n.pdf-editor .page {\n  width: 800px;\n}\n"; (require("browserify-css").createStyle(css, { "href": "src\\pdf-editor\\pdf-editor.css" }, { "insertAt": "bottom" })); module.exports = css;
},{"browserify-css":5}],31:[function(require,module,exports){
module.exports = {

    htmlTemplate: properties => `
         <path fill="none" stroke="#ff6e1b"></path>
    `,

    initComponent(parentComponent) {
        this.blockSelectionFrame = parentComponent.querySelector('path');
    },

    updateComponent(pdfEditor) {
        if (!pdfEditor.selectedBlock)
            return this.blockSelectionFrame.removeAttribute('d');
        let r = pdfEditor.selectedBlock.getBoundingClientRect();
        this.blockSelectionFrame.setAttribute('d',`M${r.x},${r.y}h${r.width}v${r.height+2}h-${r.width}z`)
    }
}
},{}],32:[function(require,module,exports){
let blocks = require('../blocks');

module.exports = {

    htmlTemplate(properties) {
        return (this.enabled = properties.floatingBlockName) ? `
            <g>
                <rect y="-30" rx="5" height="25" fill="rgb(187, 135, 64)"></rect>
                <text y="-10" x="10"></text>
            </g>
        ` : '';
    },

    initComponent(parentComponent) {
        if (!this.enabled)
            return
        this.blockNameGroup = parentComponent.querySelector('.svg-overlay g g');
        this.blockNameBg = parentComponent.querySelector('.svg-overlay g g rect');
        this.blockNameText = parentComponent.querySelector('.svg-overlay g g text');
    },

    updateComponent(pdfEditor) {
        if (!this.enabled)
            return
        let selectedBlock = pdfEditor.selectedBlock;
        if (!selectedBlock)
            return this.blockNameGroup.setAttribute(`transform`, `translate(0,-1000)`);
        let r = selectedBlock.getBoundingClientRect();
        this.blockNameGroup.setAttribute(`transform`, `translate(${r.x},${r.y})`);
        this.blockNameText.textContent = selectedBlock.getAttribute(blocks.propertyKeys.block_name);
        r = this.blockNameText.getBoundingClientRect();
        this.blockNameBg.setAttribute('width', r.width + 20);
    }
}
},{"../blocks":24}],33:[function(require,module,exports){
let floatingBlockName = require('./floatingBlockName');
let blockSelection = require('./blockSelection');

module.exports = {

    htmlTemplate: properties => `
        <svg class="svg-overlay">
            <defs>
                <clipPath id="editor_clip_rect">
                    <polygon></polygon>
                </clipPath>
            </defs>
            <g clip-path="url(#editor_clip_rect)">
                ${blockSelection.htmlTemplate(properties)}
                ${floatingBlockName.htmlTemplate(properties)}
            </g>
        </svg>
    `,

    initSvgOverlay: function (pdfEditor) {
        this.pdfEditor = pdfEditor;
        this.overlay = pdfEditor.targetElement.querySelector('.svg-overlay');
        this.overlayClipPolygon = this.overlay.querySelector('#editor_clip_rect polygon');
        blockSelection.initComponent(this.overlay);
        floatingBlockName.initComponent(this.overlay);
        this.updateComponent(this.pdfEditor);
    },

    updateComponent(pdfEditor) {

        requestAnimationFrame(() => this.updateComponent(pdfEditor));

        if (!this.pdfEditor .targetElement.querySelector('.pdf-editor .content'))
            return;

        this.overlay.setAttribute('viewBox',`0 0 ${innerWidth} ${innerHeight}`);
        this.overlay.setAttribute('width', innerWidth);
        this.overlay.setAttribute('height', innerHeight);

        let r = this.pdfEditor.targetElement .querySelector('.pdf-editor .content').getBoundingClientRect();
        let scrollWidth = 17;
        let pts = [
            r.x, r.y,
            r.x + r.width - scrollWidth, r.y,
            r.x + r.width - scrollWidth, r.y + r.height,
            r.x, r.y + r.height
        ];
        this.overlayClipPolygon.setAttribute('points', pts.join(' '));

        blockSelection.updateComponent(this.pdfEditor)
        floatingBlockName.updateComponent(this.pdfEditor)
    }

}
},{"./blockSelection":31,"./floatingBlockName":32}]},{},[21])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
