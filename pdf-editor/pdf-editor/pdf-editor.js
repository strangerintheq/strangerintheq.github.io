(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
/*!
 * @license Copyright (c) 2003-2020, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md.
 */


(function (t) {
    t["ru"] = Object.assign(t["ru"] || {}, require('../../ru'))
})(window.CKEDITOR_TRANSLATIONS || (window.CKEDITOR_TRANSLATIONS = {}));
(function t(e, i) {
    if (typeof exports === "object" && typeof module === "object") module.exports = i(); else if (typeof define === "function" && define.amd) define([], i); else if (typeof exports === "object") exports["BalloonEditor"] = i(); else e["BalloonEditor"] = i()
})(window, (function () {
    return function (t) {
        var e = {};

        function i(n) {
            if (e[n]) {
                return e[n].exports
            }
            var o = e[n] = {i: n, l: false, exports: {}};
            t[n].call(o.exports, o, o.exports, i);
            o.l = true;
            return o.exports
        }

        i.m = t;
        i.c = e;
        i.d = function (t, e, n) {
            if (!i.o(t, e)) {
                Object.defineProperty(t, e, {enumerable: true, get: n})
            }
        };
        i.r = function (t) {
            if (typeof Symbol !== "undefined" && Symbol.toStringTag) {
                Object.defineProperty(t, Symbol.toStringTag, {value: "Module"})
            }
            Object.defineProperty(t, "__esModule", {value: true})
        };
        i.t = function (t, e) {
            if (e & 1) t = i(t);
            if (e & 8) return t;
            if (e & 4 && typeof t === "object" && t && t.__esModule) return t;
            var n = Object.create(null);
            i.r(n);
            Object.defineProperty(n, "default", {enumerable: true, value: t});
            if (e & 2 && typeof t != "string") for (var o in t) i.d(n, o, function (e) {
                return t[e]
            }.bind(null, o));
            return n
        };
        i.n = function (t) {
            var e = t && t.__esModule ? function e() {
                return t["default"]
            } : function e() {
                return t
            };
            i.d(e, "a", e);
            return e
        };
        i.o = function (t, e) {
            return Object.prototype.hasOwnProperty.call(t, e)
        };
        i.p = "";
        return i(i.s = 114)
    }([function (t, e, i) {
        "use strict";
        i.d(e, "b", (function () {
            return o
        }));
        i.d(e, "a", (function () {
            return r
        }));
        const n = "https://ckeditor.com/docs/ckeditor5/latest/framework/guides/support/error-codes.html";

        class o extends Error {
            constructor(t, e, i) {
                t = r(t);
                if (i) {
                    t += " " + JSON.stringify(i)
                }
                super(t);
                this.name = "CKEditorError";
                this.context = e;
                this.data = i
            }

            is(t) {
                return t === "CKEditorError"
            }

            static rethrowUnexpectedError(t, e) {
                if (t.is && t.is("CKEditorError")) {
                    throw t
                }
                const i = new o(t.message, e);
                i.stack = t.stack;
                throw i
            }
        }

        function r(t) {
            const e = t.match(/^([^:]+):/);
            if (!e) {
                return t
            }
            return t + ` Read more: ${n}#error-${e[1]}\n`
        }
    }, function (t, e, i) {
        "use strict";
        var n = function t() {
            var e;
            return function t() {
                if (typeof e === "undefined") {
                    e = Boolean(window && document && document.all && !window.atob)
                }
                return e
            }
        }();
        var o = function t() {
            var e = {};
            return function t(i) {
                if (typeof e[i] === "undefined") {
                    var n = document.querySelector(i);
                    if (window.HTMLIFrameElement && n instanceof window.HTMLIFrameElement) {
                        try {
                            n = n.contentDocument.head
                        } catch (t) {
                            n = null
                        }
                    }
                    e[i] = n
                }
                return e[i]
            }
        }();
        var r = [];

        function s(t) {
            var e = -1;
            for (var i = 0; i < r.length; i++) {
                if (r[i].identifier === t) {
                    e = i;
                    break
                }
            }
            return e
        }

        function a(t, e) {
            var i = {};
            var n = [];
            for (var o = 0; o < t.length; o++) {
                var a = t[o];
                var c = e.base ? a[0] + e.base : a[0];
                var l = i[c] || 0;
                var d = "".concat(c, " ").concat(l);
                i[c] = l + 1;
                var u = s(d);
                var h = {css: a[1], media: a[2], sourceMap: a[3]};
                if (u !== -1) {
                    r[u].references++;
                    r[u].updater(h)
                } else {
                    r.push({identifier: d, updater: m(h, e), references: 1})
                }
                n.push(d)
            }
            return n
        }

        function c(t) {
            var e = document.createElement("style");
            var n = t.attributes || {};
            if (typeof n.nonce === "undefined") {
                var r = true ? i.nc : undefined;
                if (r) {
                    n.nonce = r
                }
            }
            Object.keys(n).forEach((function (t) {
                e.setAttribute(t, n[t])
            }));
            if (typeof t.insert === "function") {
                t.insert(e)
            } else {
                var s = o(t.insert || "head");
                if (!s) {
                    throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.")
                }
                s.appendChild(e)
            }
            return e
        }

        function l(t) {
            if (t.parentNode === null) {
                return false
            }
            t.parentNode.removeChild(t)
        }

        var d = function t() {
            var e = [];
            return function t(i, n) {
                e[i] = n;
                return e.filter(Boolean).join("\n")
            }
        }();

        function u(t, e, i, n) {
            var o = i ? "" : n.media ? "@media ".concat(n.media, " {").concat(n.css, "}") : n.css;
            if (t.styleSheet) {
                t.styleSheet.cssText = d(e, o)
            } else {
                var r = document.createTextNode(o);
                var s = t.childNodes;
                if (s[e]) {
                    t.removeChild(s[e])
                }
                if (s.length) {
                    t.insertBefore(r, s[e])
                } else {
                    t.appendChild(r)
                }
            }
        }

        function h(t, e, i) {
            var n = i.css;
            var o = i.media;
            var r = i.sourceMap;
            if (o) {
                t.setAttribute("media", o)
            } else {
                t.removeAttribute("media")
            }
            if (r && btoa) {
                n += "\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r)))), " */")
            }
            if (t.styleSheet) {
                t.styleSheet.cssText = n
            } else {
                while (t.firstChild) {
                    t.removeChild(t.firstChild)
                }
                t.appendChild(document.createTextNode(n))
            }
        }

        var f = null;
        var g = 0;

        function m(t, e) {
            var i;
            var n;
            var o;
            if (e.singleton) {
                var r = g++;
                i = f || (f = c(e));
                n = u.bind(null, i, r, false);
                o = u.bind(null, i, r, true)
            } else {
                i = c(e);
                n = h.bind(null, i, e);
                o = function t() {
                    l(i)
                }
            }
            n(t);
            return function e(i) {
                if (i) {
                    if (i.css === t.css && i.media === t.media && i.sourceMap === t.sourceMap) {
                        return
                    }
                    n(t = i)
                } else {
                    o()
                }
            }
        }

        t.exports = function (t, e) {
            e = e || {};
            if (!e.singleton && typeof e.singleton !== "boolean") {
                e.singleton = n()
            }
            t = t || [];
            var i = a(t, e);
            return function t(n) {
                n = n || [];
                if (Object.prototype.toString.call(n) !== "[object Array]") {
                    return
                }
                for (var o = 0; o < i.length; o++) {
                    var c = i[o];
                    var l = s(c);
                    r[l].references--
                }
                var d = a(n, e);
                for (var u = 0; u < i.length; u++) {
                    var h = i[u];
                    var f = s(h);
                    if (r[f].references === 0) {
                        r[f].updater();
                        r.splice(f, 1)
                    }
                }
                i = d
            }
        }
    }, , function (t, e, i) {
        "use strict";
        var n = i(7);
        var o = typeof self == "object" && self && self.Object === Object && self;
        var r = n["a"] || o || Function("return this")();
        e["a"] = r
    }, function (t, e, i) {
        "use strict";
        (function (t) {
            var n = i(3);
            var o = i(14);
            var r = typeof exports == "object" && exports && !exports.nodeType && exports;
            var s = r && typeof t == "object" && t && !t.nodeType && t;
            var a = s && s.exports === r;
            var c = a ? n["a"].Buffer : undefined;
            var l = c ? c.isBuffer : undefined;
            var d = l || o["a"];
            e["a"] = d
        }).call(this, i(9)(t))
    }, function (t, e, i) {
        "use strict";
        (function (t) {
            var n = i(7);
            var o = typeof exports == "object" && exports && !exports.nodeType && exports;
            var r = o && typeof t == "object" && t && !t.nodeType && t;
            var s = r && r.exports === o;
            var a = s && n["a"].process;
            var c = function () {
                try {
                    var t = r && r.require && r.require("util").types;
                    if (t) {
                        return t
                    }
                    return a && a.binding && a.binding("util")
                } catch (t) {
                }
            }();
            e["a"] = c
        }).call(this, i(9)(t))
    }, function (t, e, i) {
        "use strict";
        (function (t) {
            var e = i(0);
            const n = "18.0.0";
            const o = typeof window === "object" ? window : t;
            if (o.CKEDITOR_VERSION) {
                throw new e["b"]("ckeditor-duplicated-modules: Some CKEditor 5 modules are duplicated.", null)
            } else {
                o.CKEDITOR_VERSION = n
            }
        }).call(this, i(10))
    }, function (t, e, i) {
        "use strict";
        (function (t) {
            var i = typeof t == "object" && t && t.Object === Object && t;
            e["a"] = i
        }).call(this, i(10))
    }, function (t, e, i) {
        "use strict";
        (function (t) {
            var n = i(3);
            var o = typeof exports == "object" && exports && !exports.nodeType && exports;
            var r = o && typeof t == "object" && t && !t.nodeType && t;
            var s = r && r.exports === o;
            var a = s ? n["a"].Buffer : undefined, c = a ? a.allocUnsafe : undefined;

            function l(t, e) {
                if (e) {
                    return t.slice()
                }
                var i = t.length, n = c ? c(i) : new t.constructor(i);
                t.copy(n);
                return n
            }

            e["a"] = l
        }).call(this, i(9)(t))
    }, function (t, e) {
        t.exports = function (t) {
            if (!t.webpackPolyfill) {
                var e = Object.create(t);
                if (!e.children) e.children = [];
                Object.defineProperty(e, "loaded", {
                    enumerable: true, get: function () {
                        return e.l
                    }
                });
                Object.defineProperty(e, "id", {
                    enumerable: true, get: function () {
                        return e.i
                    }
                });
                Object.defineProperty(e, "exports", {enumerable: true});
                e.webpackPolyfill = 1
            }
            return e
        }
    }, function (t, e) {
        var i;
        i = function () {
            return this
        }();
        try {
            i = i || new Function("return this")()
        } catch (t) {
            if (typeof window === "object") i = window
        }
        t.exports = i
    }, function (t, e, i) {
        var n = i(1);
        var o = i(55);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e, i) {
        var n = i(1);
        var o = i(108);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e, i) {
        var n = i(1);
        var o = i(109);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e, i) {
        "use strict";

        function n() {
            return false
        }

        e["a"] = n
    }, function (t, e, i) {
        var n = i(1);
        var o = i(16);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck-hidden{display:none!important}.ck.ck-reset,.ck.ck-reset_all,.ck.ck-reset_all *{box-sizing:border-box;width:auto;height:auto;position:static}:root{--ck-z-default:1;--ck-z-modal:calc(var(--ck-z-default) + 999);--ck-color-base-foreground:#fafafa;--ck-color-base-background:#fff;--ck-color-base-border:#c4c4c4;--ck-color-base-action:#61b045;--ck-color-base-focus:#6cb5f9;--ck-color-base-text:#333;--ck-color-base-active:#198cf0;--ck-color-base-active-focus:#0e7fe1;--ck-color-base-error:#db3700;--ck-color-focus-border:#1f89e5;--ck-color-focus-outer-shadow:#bcdefb;--ck-color-focus-disabled-shadow:rgba(119,186,248,0.3);--ck-color-focus-error-shadow:rgba(255,64,31,0.3);--ck-color-text:var(--ck-color-base-text);--ck-color-shadow-drop:rgba(0,0,0,0.15);--ck-color-shadow-drop-active:rgba(0,0,0,0.2);--ck-color-shadow-inner:rgba(0,0,0,0.1);--ck-color-button-default-background:transparent;--ck-color-button-default-hover-background:#e6e6e6;--ck-color-button-default-active-background:#d9d9d9;--ck-color-button-default-active-shadow:#bfbfbf;--ck-color-button-default-disabled-background:transparent;--ck-color-button-on-background:#dedede;--ck-color-button-on-hover-background:#c4c4c4;--ck-color-button-on-active-background:#bababa;--ck-color-button-on-active-shadow:#a1a1a1;--ck-color-button-on-disabled-background:#dedede;--ck-color-button-action-background:var(--ck-color-base-action);--ck-color-button-action-hover-background:#579e3d;--ck-color-button-action-active-background:#53973b;--ck-color-button-action-active-shadow:#498433;--ck-color-button-action-disabled-background:#7ec365;--ck-color-button-action-text:var(--ck-color-base-background);--ck-color-button-save:#008a00;--ck-color-button-cancel:#db3700;--ck-color-switch-button-off-background:#b0b0b0;--ck-color-switch-button-off-hover-background:#a3a3a3;--ck-color-switch-button-on-background:var(--ck-color-button-action-background);--ck-color-switch-button-on-hover-background:#579e3d;--ck-color-switch-button-inner-background:var(--ck-color-base-background);--ck-color-switch-button-inner-shadow:rgba(0,0,0,0.1);--ck-color-dropdown-panel-background:var(--ck-color-base-background);--ck-color-dropdown-panel-border:var(--ck-color-base-border);--ck-color-input-background:var(--ck-color-base-background);--ck-color-input-border:#c7c7c7;--ck-color-input-error-border:var(--ck-color-base-error);--ck-color-input-text:var(--ck-color-base-text);--ck-color-input-disabled-background:#f2f2f2;--ck-color-input-disabled-border:#c7c7c7;--ck-color-input-disabled-text:#5c5c5c;--ck-color-list-background:var(--ck-color-base-background);--ck-color-list-button-hover-background:var(--ck-color-button-default-hover-background);--ck-color-list-button-on-background:var(--ck-color-base-active);--ck-color-list-button-on-background-focus:var(--ck-color-base-active-focus);--ck-color-list-button-on-text:var(--ck-color-base-background);--ck-color-panel-background:var(--ck-color-base-background);--ck-color-panel-border:var(--ck-color-base-border);--ck-color-toolbar-background:var(--ck-color-base-foreground);--ck-color-toolbar-border:var(--ck-color-base-border);--ck-color-tooltip-background:var(--ck-color-base-text);--ck-color-tooltip-text:var(--ck-color-base-background);--ck-color-engine-placeholder-text:#707070;--ck-color-upload-bar-background:#6cb5f9;--ck-color-link-default:#0000f0;--ck-color-link-selected-background:rgba(31,177,255,0.1);--ck-disabled-opacity:.5;--ck-focus-outer-shadow-geometry:0 0 0 3px;--ck-focus-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-outer-shadow);--ck-focus-disabled-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-disabled-shadow);--ck-focus-error-outer-shadow:var(--ck-focus-outer-shadow-geometry) var(--ck-color-focus-error-shadow);--ck-focus-ring:1px solid var(--ck-color-focus-border);--ck-font-size-base:13px;--ck-line-height-base:1.84615;--ck-font-face:Helvetica,Arial,Tahoma,Verdana,Sans-Serif;--ck-font-size-tiny:0.7em;--ck-font-size-small:0.75em;--ck-font-size-normal:1em;--ck-font-size-big:1.4em;--ck-font-size-large:1.8em;--ck-ui-component-min-height:2.3em}.ck.ck-reset,.ck.ck-reset_all,.ck.ck-reset_all *{margin:0;padding:0;border:0;background:transparent;text-decoration:none;vertical-align:middle;transition:none;word-wrap:break-word}.ck.ck-reset_all,.ck.ck-reset_all *{border-collapse:collapse;font:normal normal normal var(--ck-font-size-base)/var(--ck-line-height-base) var(--ck-font-face);color:var(--ck-color-text);text-align:left;white-space:nowrap;cursor:auto;float:none}.ck.ck-reset_all .ck-rtl *{text-align:right}.ck.ck-reset_all iframe{vertical-align:inherit}.ck.ck-reset_all textarea{white-space:pre-wrap}.ck.ck-reset_all input[type=password],.ck.ck-reset_all input[type=text],.ck.ck-reset_all textarea{cursor:text}.ck.ck-reset_all input[type=password][disabled],.ck.ck-reset_all input[type=text][disabled],.ck.ck-reset_all textarea[disabled]{cursor:default}.ck.ck-reset_all fieldset{padding:10px;border:2px groove #dfdee3}.ck.ck-reset_all button::-moz-focus-inner{padding:0;border:0}.ck[dir=rtl],.ck[dir=rtl] .ck{text-align:right}:root{--ck-border-radius:2px;--ck-inner-shadow:2px 2px 3px var(--ck-color-shadow-inner) inset;--ck-drop-shadow:0 1px 2px 1px var(--ck-color-shadow-drop);--ck-drop-shadow-active:0 3px 6px 1px var(--ck-color-shadow-drop-active);--ck-spacing-unit:0.6em;--ck-spacing-large:calc(var(--ck-spacing-unit)*1.5);--ck-spacing-standard:var(--ck-spacing-unit);--ck-spacing-medium:calc(var(--ck-spacing-unit)*0.8);--ck-spacing-small:calc(var(--ck-spacing-unit)*0.5);--ck-spacing-tiny:calc(var(--ck-spacing-unit)*0.3);--ck-spacing-extra-tiny:calc(var(--ck-spacing-unit)*0.16)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(18);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ':root{--ck-balloon-panel-arrow-z-index:calc(var(--ck-z-default) - 3)}.ck.ck-balloon-panel{display:none;position:absolute;z-index:var(--ck-z-modal)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{content:"";position:absolute}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_n]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_n]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel[class*=arrow_s]:before{z-index:var(--ck-balloon-panel-arrow-z-index)}.ck.ck-balloon-panel[class*=arrow_s]:after{z-index:calc(var(--ck-balloon-panel-arrow-z-index) + 1)}.ck.ck-balloon-panel.ck-balloon-panel_visible{display:block}:root{--ck-balloon-arrow-offset:2px;--ck-balloon-arrow-height:10px;--ck-balloon-arrow-half-width:8px}.ck.ck-balloon-panel{border-radius:0}.ck-rounded-corners .ck.ck-balloon-panel,.ck.ck-balloon-panel.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-balloon-panel{box-shadow:var(--ck-drop-shadow),0 0;min-height:15px;background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border)}.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:after,.ck.ck-balloon-panel.ck-balloon-panel_with-arrow:before{width:0;height:0;border-style:solid}.ck.ck-balloon-panel[class*=arrow_n]:after,.ck.ck-balloon-panel[class*=arrow_n]:before{border-left-width:var(--ck-balloon-arrow-half-width);border-bottom-width:var(--ck-balloon-arrow-height);border-right-width:var(--ck-balloon-arrow-half-width);border-top-width:0}.ck.ck-balloon-panel[class*=arrow_n]:before{border-bottom-color:var(--ck-color-panel-border)}.ck.ck-balloon-panel[class*=arrow_n]:after,.ck.ck-balloon-panel[class*=arrow_n]:before{border-left-color:transparent;border-right-color:transparent;border-top-color:transparent}.ck.ck-balloon-panel[class*=arrow_n]:after{border-bottom-color:var(--ck-color-panel-background);margin-top:var(--ck-balloon-arrow-offset)}.ck.ck-balloon-panel[class*=arrow_s]:after,.ck.ck-balloon-panel[class*=arrow_s]:before{border-left-width:var(--ck-balloon-arrow-half-width);border-bottom-width:0;border-right-width:var(--ck-balloon-arrow-half-width);border-top-width:var(--ck-balloon-arrow-height)}.ck.ck-balloon-panel[class*=arrow_s]:before{border-top-color:var(--ck-color-panel-border)}.ck.ck-balloon-panel[class*=arrow_s]:after,.ck.ck-balloon-panel[class*=arrow_s]:before{border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent}.ck.ck-balloon-panel[class*=arrow_s]:after{border-top-color:var(--ck-color-panel-background);margin-bottom:var(--ck-balloon-arrow-offset)}.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_n:before{left:50%;margin-left:calc(-1*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nw:before{left:calc(2*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_ne:before{right:calc(2*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_s:before{left:50%;margin-left:calc(-1*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_sw:before{left:calc(2*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_se:before{right:calc(2*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_sme:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_sme:before{right:25%;margin-right:calc(2*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_smw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_smw:before{left:25%;margin-left:calc(2*var(--ck-balloon-arrow-half-width));bottom:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nme:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nme:before{right:25%;margin-right:calc(2*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}.ck.ck-balloon-panel.ck-balloon-panel_arrow_nmw:after,.ck.ck-balloon-panel.ck-balloon-panel_arrow_nmw:before{left:25%;margin-left:calc(2*var(--ck-balloon-arrow-half-width));top:calc(-1*var(--ck-balloon-arrow-height))}'
    }, function (t, e, i) {
        var n = i(1);
        var o = i(20);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-icon{vertical-align:middle}:root{--ck-icon-size:calc(var(--ck-line-height-base)*var(--ck-font-size-normal))}.ck.ck-icon{width:var(--ck-icon-size);height:var(--ck-icon-size);font-size:.8333350694em;will-change:transform}.ck.ck-icon,.ck.ck-icon *{color:inherit;cursor:inherit}.ck.ck-icon :not([fill]){fill:currentColor}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(22);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = '.ck.ck-tooltip,.ck.ck-tooltip .ck-tooltip__text:after{position:absolute;pointer-events:none;-webkit-backface-visibility:hidden}.ck.ck-tooltip{visibility:hidden;opacity:0;display:none;z-index:var(--ck-z-modal)}.ck.ck-tooltip .ck-tooltip__text{display:inline-block}.ck.ck-tooltip .ck-tooltip__text:after{content:"";width:0;height:0}:root{--ck-tooltip-arrow-size:5px}.ck.ck-tooltip{left:50%;top:0;transition:opacity .2s ease-in-out .2s}.ck.ck-tooltip .ck-tooltip__text{border-radius:0}.ck-rounded-corners .ck.ck-tooltip .ck-tooltip__text,.ck.ck-tooltip .ck-tooltip__text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-tooltip .ck-tooltip__text{font-size:.9em;line-height:1.5;color:var(--ck-color-tooltip-text);padding:var(--ck-spacing-small) var(--ck-spacing-medium);background:var(--ck-color-tooltip-background);position:relative;left:-50%}.ck.ck-tooltip .ck-tooltip__text:after{transition:opacity .2s ease-in-out .2s;border-style:solid;left:50%}.ck.ck-tooltip.ck-tooltip_s{bottom:calc(-1*var(--ck-tooltip-arrow-size));transform:translateY(100%)}.ck.ck-tooltip.ck-tooltip_s .ck-tooltip__text:after{top:calc(-1*var(--ck-tooltip-arrow-size));transform:translateX(-50%);border-left-color:transparent;border-bottom-color:var(--ck-color-tooltip-background);border-right-color:transparent;border-top-color:transparent;border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:var(--ck-tooltip-arrow-size);border-right-width:var(--ck-tooltip-arrow-size);border-top-width:0}.ck.ck-tooltip.ck-tooltip_n{top:calc(-1*var(--ck-tooltip-arrow-size));transform:translateY(-100%)}.ck.ck-tooltip.ck-tooltip_n .ck-tooltip__text:after{bottom:calc(-1*var(--ck-tooltip-arrow-size));transform:translateX(-50%);border-left-color:transparent;border-bottom-color:transparent;border-right-color:transparent;border-top-color:var(--ck-color-tooltip-background);border-left-width:var(--ck-tooltip-arrow-size);border-bottom-width:0;border-right-width:var(--ck-tooltip-arrow-size);border-top-width:var(--ck-tooltip-arrow-size)}'
    }, function (t, e, i) {
        var n = i(1);
        var o = i(24);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-button,a.ck.ck-button{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none}.ck.ck-button .ck-tooltip,a.ck.ck-button .ck-tooltip{display:block}@media (hover:none){.ck.ck-button .ck-tooltip,a.ck.ck-button .ck-tooltip{display:none}}.ck.ck-button,a.ck.ck-button{position:relative;display:inline-flex;align-items:center;justify-content:left}.ck.ck-button .ck-button__label,a.ck.ck-button .ck-button__label{display:none}.ck.ck-button.ck-button_with-text .ck-button__label,a.ck.ck-button.ck-button_with-text .ck-button__label{display:inline-block}.ck.ck-button:not(.ck-button_with-text),a.ck.ck-button:not(.ck-button_with-text){justify-content:center}.ck.ck-button:hover .ck-tooltip,a.ck.ck-button:hover .ck-tooltip{visibility:visible;opacity:1}.ck.ck-button:focus:not(:hover) .ck-tooltip,a.ck.ck-button:focus:not(:hover) .ck-tooltip{display:none}.ck.ck-button,a.ck.ck-button{background:var(--ck-color-button-default-background)}.ck.ck-button:not(.ck-disabled):hover,a.ck.ck-button:not(.ck-disabled):hover{background:var(--ck-color-button-default-hover-background)}.ck.ck-button:not(.ck-disabled):active,a.ck.ck-button:not(.ck-disabled):active{background:var(--ck-color-button-default-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-default-active-shadow)}.ck.ck-button.ck-disabled,a.ck.ck-button.ck-disabled{background:var(--ck-color-button-default-disabled-background)}.ck.ck-button,a.ck.ck-button{border-radius:0}.ck-rounded-corners .ck.ck-button,.ck-rounded-corners a.ck.ck-button,.ck.ck-button.ck-rounded-corners,a.ck.ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-button,a.ck.ck-button{white-space:nowrap;cursor:default;vertical-align:middle;padding:var(--ck-spacing-tiny);text-align:center;min-width:var(--ck-ui-component-min-height);min-height:var(--ck-ui-component-min-height);line-height:1;font-size:inherit;border:1px solid transparent;transition:box-shadow .2s ease-in-out,border .2s ease-in-out;-webkit-appearance:none}.ck.ck-button:active,.ck.ck-button:focus,a.ck.ck-button:active,a.ck.ck-button:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),0 0}.ck.ck-button .ck-button__icon use,.ck.ck-button .ck-button__icon use *,a.ck.ck-button .ck-button__icon use,a.ck.ck-button .ck-button__icon use *{color:inherit}.ck.ck-button .ck-button__label,a.ck.ck-button .ck-button__label{font-size:inherit;font-weight:inherit;color:inherit;cursor:inherit;vertical-align:middle}[dir=ltr] .ck.ck-button .ck-button__label,[dir=ltr] a.ck.ck-button .ck-button__label{text-align:left}[dir=rtl] .ck.ck-button .ck-button__label,[dir=rtl] a.ck.ck-button .ck-button__label{text-align:right}.ck.ck-button .ck-button__keystroke,a.ck.ck-button .ck-button__keystroke{color:inherit}[dir=ltr] .ck.ck-button .ck-button__keystroke,[dir=ltr] a.ck.ck-button .ck-button__keystroke{margin-left:var(--ck-spacing-large)}[dir=rtl] .ck.ck-button .ck-button__keystroke,[dir=rtl] a.ck.ck-button .ck-button__keystroke{margin-right:var(--ck-spacing-large)}.ck.ck-button .ck-button__keystroke,a.ck.ck-button .ck-button__keystroke{font-weight:700;opacity:.7}.ck.ck-button.ck-disabled:active,.ck.ck-button.ck-disabled:focus,a.ck.ck-button.ck-disabled:active,a.ck.ck-button.ck-disabled:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),0 0}.ck.ck-button.ck-disabled .ck-button__icon,a.ck.ck-button.ck-disabled .ck-button__icon{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-disabled .ck-button__label,a.ck.ck-button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-disabled .ck-button__keystroke,a.ck.ck-button.ck-disabled .ck-button__keystroke{opacity:.3}.ck.ck-button.ck-button_with-text,a.ck.ck-button.ck-button_with-text{padding:var(--ck-spacing-tiny) var(--ck-spacing-standard)}[dir=ltr] .ck.ck-button.ck-button_with-text .ck-button__icon,[dir=ltr] a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-left:calc(-1*var(--ck-spacing-small));margin-right:var(--ck-spacing-small)}[dir=rtl] .ck.ck-button.ck-button_with-text .ck-button__icon,[dir=rtl] a.ck.ck-button.ck-button_with-text .ck-button__icon{margin-right:calc(-1*var(--ck-spacing-small));margin-left:var(--ck-spacing-small)}.ck.ck-button.ck-button_with-keystroke .ck-button__label,a.ck.ck-button.ck-button_with-keystroke .ck-button__label{flex-grow:1}.ck.ck-button.ck-on,a.ck.ck-button.ck-on{background:var(--ck-color-button-on-background)}.ck.ck-button.ck-on:not(.ck-disabled):hover,a.ck.ck-button.ck-on:not(.ck-disabled):hover{background:var(--ck-color-button-on-hover-background)}.ck.ck-button.ck-on:not(.ck-disabled):active,a.ck.ck-button.ck-on:not(.ck-disabled):active{background:var(--ck-color-button-on-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-on-active-shadow)}.ck.ck-button.ck-on.ck-disabled,a.ck.ck-button.ck-on.ck-disabled{background:var(--ck-color-button-on-disabled-background)}.ck.ck-button.ck-button-save,a.ck.ck-button.ck-button-save{color:var(--ck-color-button-save)}.ck.ck-button.ck-button-cancel,a.ck.ck-button.ck-button-cancel{color:var(--ck-color-button-cancel)}.ck.ck-button-action,a.ck.ck-button-action{background:var(--ck-color-button-action-background)}.ck.ck-button-action:not(.ck-disabled):hover,a.ck.ck-button-action:not(.ck-disabled):hover{background:var(--ck-color-button-action-hover-background)}.ck.ck-button-action:not(.ck-disabled):active,a.ck.ck-button-action:not(.ck-disabled):active{background:var(--ck-color-button-action-active-background);box-shadow:inset 0 2px 2px var(--ck-color-button-action-active-shadow)}.ck.ck-button-action.ck-disabled,a.ck.ck-button-action.ck-disabled{background:var(--ck-color-button-action-disabled-background)}.ck.ck-button-action,a.ck.ck-button-action{color:var(--ck-color-button-action-text)}.ck.ck-button-bold,a.ck.ck-button-bold{font-weight:700}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(26);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck .ck-balloon-rotator__navigation{display:flex;align-items:center;justify-content:center}.ck .ck-balloon-rotator__content .ck-toolbar{justify-content:center}.ck .ck-balloon-rotator__navigation{background:var(--ck-color-toolbar-background);border-bottom:1px solid var(--ck-color-toolbar-border);padding:0 var(--ck-spacing-small)}.ck .ck-balloon-rotator__navigation>*{margin-right:var(--ck-spacing-small);margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck .ck-balloon-rotator__navigation .ck-balloon-rotator__counter{margin-right:var(--ck-spacing-standard);margin-left:var(--ck-spacing-small)}.ck .ck-balloon-rotator__content .ck.ck-annotation-wrapper{box-shadow:none}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(28);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck .ck-fake-panel{position:absolute;z-index:calc(var(--ck-z-modal) - 1)}.ck .ck-fake-panel div{position:absolute}.ck .ck-fake-panel div:first-child{z-index:2}.ck .ck-fake-panel div:nth-child(2){z-index:1}:root{--ck-balloon-fake-panel-offset-horizontal:6px;--ck-balloon-fake-panel-offset-vertical:6px}.ck .ck-fake-panel div{box-shadow:var(--ck-drop-shadow),0 0;min-height:15px;background:var(--ck-color-panel-background);border:1px solid var(--ck-color-panel-border);border-radius:var(--ck-border-radius);width:100%;height:100%}.ck .ck-fake-panel div:first-child{margin-left:var(--ck-balloon-fake-panel-offset-horizontal);margin-top:var(--ck-balloon-fake-panel-offset-vertical)}.ck .ck-fake-panel div:nth-child(2){margin-left:calc(var(--ck-balloon-fake-panel-offset-horizontal)*2);margin-top:calc(var(--ck-balloon-fake-panel-offset-vertical)*2)}.ck .ck-fake-panel div:nth-child(3){margin-left:calc(var(--ck-balloon-fake-panel-offset-horizontal)*3);margin-top:calc(var(--ck-balloon-fake-panel-offset-vertical)*3)}.ck .ck-balloon-panel_arrow_s+.ck-fake-panel,.ck .ck-balloon-panel_arrow_se+.ck-fake-panel,.ck .ck-balloon-panel_arrow_sw+.ck-fake-panel{--ck-balloon-fake-panel-offset-vertical:-6px}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(30);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-dropdown{display:inline-block;position:relative}.ck.ck-dropdown .ck-dropdown__arrow{pointer-events:none;z-index:var(--ck-z-default)}.ck.ck-dropdown .ck-button.ck-dropdown__button{width:100%}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on .ck-tooltip{display:none}.ck.ck-dropdown .ck-dropdown__panel{-webkit-backface-visibility:hidden;display:none;z-index:var(--ck-z-modal);position:absolute}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel-visible{display:inline-block}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw{bottom:100%}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{top:100%;bottom:auto}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_ne,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_se{left:0}.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_nw,.ck.ck-dropdown .ck-dropdown__panel.ck-dropdown__panel_sw{right:0}:root{--ck-dropdown-arrow-size:calc(0.5*var(--ck-icon-size))}.ck.ck-dropdown{font-size:inherit}.ck.ck-dropdown .ck-dropdown__arrow{width:var(--ck-dropdown-arrow-size)}[dir=ltr] .ck.ck-dropdown .ck-dropdown__arrow{right:var(--ck-spacing-standard);margin-left:var(--ck-spacing-small)}[dir=rtl] .ck.ck-dropdown .ck-dropdown__arrow{left:var(--ck-spacing-standard);margin-right:var(--ck-spacing-small)}.ck.ck-dropdown.ck-disabled .ck-dropdown__arrow{opacity:var(--ck-disabled-opacity)}[dir=ltr] .ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-left:var(--ck-spacing-small)}[dir=rtl] .ck.ck-dropdown .ck-button.ck-dropdown__button:not(.ck-button_with-text){padding-right:var(--ck-spacing-small)}.ck.ck-dropdown .ck-button.ck-dropdown__button .ck-button__label{width:7em;overflow:hidden;text-overflow:ellipsis}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-disabled .ck-button__label{opacity:var(--ck-disabled-opacity)}.ck.ck-dropdown .ck-button.ck-dropdown__button.ck-on{border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown__panel{border-radius:0}.ck-rounded-corners .ck.ck-dropdown__panel,.ck.ck-dropdown__panel.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-dropdown__panel{box-shadow:var(--ck-drop-shadow),0 0;background:var(--ck-color-dropdown-panel-background);border:1px solid var(--ck-color-dropdown-panel-border);bottom:0;min-width:100%}.ck.ck-dropdown__panel.ck-dropdown__panel_se{border-top-left-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_sw{border-top-right-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_ne{border-bottom-left-radius:0}.ck.ck-dropdown__panel.ck-dropdown__panel_nw{border-bottom-right-radius:0}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(32);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-list{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-direction:column}.ck.ck-list .ck-list__item,.ck.ck-list .ck-list__separator{display:block}.ck.ck-list .ck-list__item>:focus{position:relative;z-index:var(--ck-z-default)}.ck.ck-list{border-radius:0}.ck-rounded-corners .ck.ck-list,.ck.ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-list{list-style-type:none;background:var(--ck-color-list-background)}.ck.ck-list__item{cursor:default;min-width:12em}.ck.ck-list__item .ck-button{min-height:unset;width:100%;text-align:left;border-radius:0;padding:calc(0.2*var(--ck-line-height-base)*var(--ck-font-size-base)) calc(0.4*var(--ck-line-height-base)*var(--ck-font-size-base))}.ck.ck-list__item .ck-button .ck-button__label{line-height:calc(1.2*var(--ck-line-height-base)*var(--ck-font-size-base))}.ck.ck-list__item .ck-button:active{box-shadow:none}.ck.ck-list__item .ck-button.ck-on{background:var(--ck-color-list-button-on-background);color:var(--ck-color-list-button-on-text)}.ck.ck-list__item .ck-button.ck-on:active{box-shadow:none}.ck.ck-list__item .ck-button.ck-on:hover:not(.ck-disabled){background:var(--ck-color-list-button-on-background-focus)}.ck.ck-list__item .ck-button.ck-on:focus:not(.ck-disabled){border-color:var(--ck-color-base-background)}.ck.ck-list__item .ck-button:hover:not(.ck-disabled){background:var(--ck-color-list-button-hover-background)}.ck.ck-list__item .ck-switchbutton.ck-on{background:var(--ck-color-list-background);color:inherit}.ck.ck-list__item .ck-switchbutton.ck-on:hover:not(.ck-disabled){background:var(--ck-color-list-button-hover-background);color:inherit}.ck.ck-list__separator{height:1px;width:100%;background:var(--ck-color-base-border)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(34);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{display:block}:root{--ck-switch-button-toggle-width:2.6153846154em;--ck-switch-button-toggle-inner-size:1.0769230769em;--ck-switch-button-toggle-spacing:1px;--ck-switch-button-translation:1.3846153847em}[dir=ltr] .ck.ck-button.ck-switchbutton .ck-button__label{margin-right:calc(2*var(--ck-spacing-large))}[dir=rtl] .ck.ck-button.ck-switchbutton .ck-button__label{margin-left:calc(2*var(--ck-spacing-large))}.ck.ck-button.ck-switchbutton .ck-button__toggle{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle,.ck.ck-button.ck-switchbutton .ck-button__toggle.ck-rounded-corners{border-radius:var(--ck-border-radius)}[dir=ltr] .ck.ck-button.ck-switchbutton .ck-button__toggle{margin-left:auto}[dir=rtl] .ck.ck-button.ck-switchbutton .ck-button__toggle{margin-right:auto}.ck.ck-button.ck-switchbutton .ck-button__toggle{transition:background .4s ease;width:var(--ck-switch-button-toggle-width);background:var(--ck-color-switch-button-off-background)}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{border-radius:0}.ck-rounded-corners .ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner,.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner.ck-rounded-corners{border-radius:var(--ck-border-radius);border-radius:calc(0.5*var(--ck-border-radius))}.ck.ck-button.ck-switchbutton .ck-button__toggle .ck-button__toggle__inner{margin:var(--ck-switch-button-toggle-spacing);width:var(--ck-switch-button-toggle-inner-size);height:var(--ck-switch-button-toggle-inner-size);background:var(--ck-color-switch-button-inner-background);transition:all .3s ease}.ck.ck-button.ck-switchbutton .ck-button__toggle:hover{background:var(--ck-color-switch-button-off-hover-background)}.ck.ck-button.ck-switchbutton .ck-button__toggle:hover .ck-button__toggle__inner{box-shadow:0 0 0 5px var(--ck-color-switch-button-inner-shadow)}.ck.ck-button.ck-switchbutton.ck-disabled .ck-button__toggle{opacity:var(--ck-disabled-opacity)}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle{background:var(--ck-color-switch-button-on-background)}.ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle:hover{background:var(--ck-color-switch-button-on-hover-background)}[dir=ltr] .ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(var(--ck-switch-button-translation))}[dir=rtl] .ck.ck-button.ck-switchbutton.ck-on .ck-button__toggle .ck-button__toggle__inner{transform:translateX(calc(-1*var(--ck-switch-button-translation)))}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(36);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-toolbar-dropdown .ck.ck-toolbar .ck.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar-dropdown .ck-dropdown__panel .ck-button:focus{z-index:calc(var(--ck-z-default) + 1)}.ck.ck-toolbar-dropdown .ck-toolbar{border:0}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(38);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-dropdown .ck-dropdown__panel .ck-list{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list,.ck.ck-dropdown .ck-dropdown__panel .ck-list.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:first-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-bottom-left-radius:0;border-bottom-right-radius:0}.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button{border-radius:0}.ck-rounded-corners .ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button,.ck.ck-dropdown .ck-dropdown__panel .ck-list .ck-list__item:last-child .ck-button.ck-rounded-corners{border-radius:var(--ck-border-radius);border-top-left-radius:0;border-top-right-radius:0}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(40);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-toolbar{-moz-user-select:none;-webkit-user-select:none;-ms-user-select:none;user-select:none;display:flex;flex-flow:row nowrap;align-items:center}.ck.ck-toolbar>.ck-toolbar__items{display:flex;flex-flow:row wrap;align-items:center;flex-grow:1}.ck.ck-toolbar .ck.ck-toolbar__separator{display:inline-block}.ck.ck-toolbar .ck.ck-toolbar__separator:first-child,.ck.ck-toolbar .ck.ck-toolbar__separator:last-child{display:none}.ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar.ck-toolbar_vertical>.ck-toolbar__items{flex-direction:column}.ck.ck-toolbar.ck-toolbar_floating>.ck-toolbar__items{flex-wrap:nowrap}.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown>.ck-dropdown__button .ck-dropdown__arrow{display:none}.ck.ck-toolbar{border-radius:0}.ck-rounded-corners .ck.ck-toolbar,.ck.ck-toolbar.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-toolbar{background:var(--ck-color-toolbar-background);padding:0 var(--ck-spacing-small);border:1px solid var(--ck-color-toolbar-border)}.ck.ck-toolbar .ck.ck-toolbar__separator{align-self:stretch;width:1px;min-width:1px;margin-top:0;margin-bottom:0;background:var(--ck-color-toolbar-border)}.ck.ck-toolbar>.ck-toolbar__items>*{margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small);margin-right:var(--ck-spacing-small)}.ck.ck-toolbar>.ck-toolbar__items:empty+.ck.ck-toolbar__separator{display:none}.ck.ck-toolbar>.ck-toolbar__items>*,.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown{margin-top:var(--ck-spacing-small);margin-bottom:var(--ck-spacing-small)}.ck.ck-toolbar.ck-toolbar_vertical{padding:0}.ck.ck-toolbar.ck-toolbar_vertical>.ck-toolbar__items>.ck{width:100%;margin:0;border-radius:0;border:0}.ck.ck-toolbar.ck-toolbar_compact{padding:0}.ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>*{margin:0}.ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>:not(:first-child):not(:last-child){border-radius:0}.ck.ck-toolbar>.ck.ck-toolbar__grouped-dropdown>.ck.ck-button.ck-dropdown__button{padding-left:var(--ck-spacing-tiny)}.ck-toolbar-container .ck.ck-toolbar{border:0}.ck.ck-toolbar[dir=rtl]>.ck-toolbar__items>.ck,[dir=rtl] .ck.ck-toolbar>.ck-toolbar__items>.ck{margin-right:0}.ck.ck-toolbar[dir=rtl]:not(.ck-toolbar_compact)>.ck-toolbar__items>.ck,[dir=rtl] .ck.ck-toolbar:not(.ck-toolbar_compact)>.ck-toolbar__items>.ck{margin-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=rtl]>.ck-toolbar__items>.ck:last-child,[dir=rtl] .ck.ck-toolbar>.ck-toolbar__items>.ck:last-child{margin-left:0}.ck.ck-toolbar[dir=rtl].ck-toolbar_compact>.ck-toolbar__items>.ck:first-child,[dir=rtl] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:first-child{border-top-left-radius:0;border-bottom-left-radius:0}.ck.ck-toolbar[dir=rtl].ck-toolbar_compact>.ck-toolbar__items>.ck:last-child,[dir=rtl] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:last-child{border-top-right-radius:0;border-bottom-right-radius:0}.ck.ck-toolbar[dir=rtl]>.ck.ck-toolbar__separator,[dir=rtl] .ck.ck-toolbar>.ck.ck-toolbar__separator{margin-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=rtl].ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child),[dir=rtl] .ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child){margin-left:var(--ck-spacing-small)}.ck.ck-toolbar[dir=ltr]>.ck-toolbar__items>.ck:last-child,[dir=ltr] .ck.ck-toolbar>.ck-toolbar__items>.ck:last-child{margin-right:0}.ck.ck-toolbar[dir=ltr].ck-toolbar_compact>.ck-toolbar__items>.ck:first-child,[dir=ltr] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:first-child{border-top-right-radius:0;border-bottom-right-radius:0}.ck.ck-toolbar[dir=ltr].ck-toolbar_compact>.ck-toolbar__items>.ck:last-child,[dir=ltr] .ck.ck-toolbar.ck-toolbar_compact>.ck-toolbar__items>.ck:last-child{border-top-left-radius:0;border-bottom-left-radius:0}.ck.ck-toolbar[dir=ltr]>.ck.ck-toolbar__separator,[dir=ltr] .ck.ck-toolbar>.ck.ck-toolbar__separator{margin-right:var(--ck-spacing-small)}.ck.ck-toolbar[dir=ltr].ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child),[dir=ltr] .ck.ck-toolbar.ck-toolbar_grouping>.ck-toolbar__items:not(:empty):not(:only-child){margin-right:var(--ck-spacing-small)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(42);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-placeholder:before,.ck .ck-placeholder:before{content:attr(data-placeholder);pointer-events:none}.ck.ck-read-only .ck-placeholder:before{display:none}.ck.ck-placeholder:before,.ck .ck-placeholder:before{cursor:text;color:var(--ck-color-engine-placeholder-text)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(44);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-editor__editable:not(.ck-editor__nested-editable){border-radius:0}.ck-rounded-corners .ck.ck-editor__editable:not(.ck-editor__nested-editable),.ck.ck-editor__editable:not(.ck-editor__nested-editable).ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-editor__editable:not(.ck-editor__nested-editable).ck-focused{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0}.ck.ck-editor__editable_inline{overflow:auto;padding:0 var(--ck-spacing-standard);border:1px solid transparent}.ck.ck-editor__editable_inline[dir=ltr]{text-align:left}.ck.ck-editor__editable_inline[dir=rtl]{text-align:right}.ck.ck-editor__editable_inline>:first-child{margin-top:var(--ck-spacing-large)}.ck.ck-editor__editable_inline>:last-child{margin-bottom:var(--ck-spacing-large)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_n]:after{border-bottom-color:var(--ck-color-base-foreground)}.ck.ck-balloon-panel.ck-toolbar-container[class*=arrow_s]:after{border-top-color:var(--ck-color-base-foreground)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(46);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck-content blockquote{overflow:hidden;padding-right:1.5em;padding-left:1.5em;margin-left:0;margin-right:0;font-style:italic;border-left:5px solid #ccc}.ck-content[dir=rtl] blockquote{border-left:0;border-right:5px solid #ccc}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(48);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-color-grid{display:grid}:root{--ck-color-grid-tile-size:24px;--ck-color-color-grid-check-icon:#000}.ck.ck-color-grid{grid-gap:5px;padding:8px}.ck.ck-color-grid__tile{width:var(--ck-color-grid-tile-size);height:var(--ck-color-grid-tile-size);min-width:var(--ck-color-grid-tile-size);min-height:var(--ck-color-grid-tile-size);padding:0;transition:box-shadow .2s ease;border:0}.ck.ck-color-grid__tile.ck-disabled{cursor:unset;transition:unset}.ck.ck-color-grid__tile.ck-color-table__color-tile_bordered{box-shadow:0 0 0 1px var(--ck-color-base-border)}.ck.ck-color-grid__tile .ck.ck-icon{display:none;color:var(--ck-color-color-grid-check-icon)}.ck.ck-color-grid__tile.ck-on{box-shadow:inset 0 0 0 1px var(--ck-color-base-background),0 0 0 2px var(--ck-color-base-text)}.ck.ck-color-grid__tile.ck-on .ck.ck-icon{display:block}.ck.ck-color-grid__tile.ck-on,.ck.ck-color-grid__tile:focus:not(.ck-disabled),.ck.ck-color-grid__tile:hover:not(.ck-disabled){border:0}.ck.ck-color-grid__tile:focus:not(.ck-disabled),.ck.ck-color-grid__tile:hover:not(.ck-disabled){box-shadow:inset 0 0 0 1px var(--ck-color-base-background),0 0 0 2px var(--ck-color-focus-border)}.ck.ck-color-grid__label{padding:0 var(--ck-spacing-standard)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(50);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-label{display:block}.ck.ck-voice-label{display:none}.ck.ck-label{font-weight:700}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(52);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck .ck-button.ck-color-table__remove-color{display:flex;align-items:center;width:100%}label.ck.ck-color-grid__label{font-weight:unset}.ck .ck-button.ck-color-table__remove-color{padding:calc(var(--ck-spacing-standard)/2) var(--ck-spacing-standard);border-bottom-left-radius:0;border-bottom-right-radius:0}.ck .ck-button.ck-color-table__remove-color:not(:focus){border-bottom:1px solid var(--ck-color-base-border)}[dir=ltr] .ck .ck-button.ck-color-table__remove-color .ck.ck-icon{margin-right:var(--ck-spacing-standard)}[dir=rtl] .ck .ck-button.ck-color-table__remove-color .ck.ck-icon{margin-left:var(--ck-spacing-standard)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(54);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".text-tiny{font-size:.7em}.text-small{font-size:.85em}.text-big{font-size:1.4em}.text-huge{font-size:1.8em}"
    }, function (t, e) {
        t.exports = ".ck.ck-heading_heading1{font-size:20px}.ck.ck-heading_heading2{font-size:17px}.ck.ck-heading_heading3{font-size:14px}.ck[class*=ck-heading_heading]{font-weight:700}.ck.ck-dropdown.ck-heading-dropdown .ck-dropdown__button .ck-button__label{width:8em}.ck.ck-dropdown.ck-heading-dropdown .ck-dropdown__panel .ck-list__item{min-width:18em}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(57);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck-editor__editable .ck-horizontal-line{overflow:hidden}.ck-content hr{border:solid #5e5e5e;border-width:1px 0 0;margin:0}.ck-editor__editable .ck-horizontal-line{padding:5px 0}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(59);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ":root{--ck-color-resizer:var(--ck-color-focus-border);--ck-resizer-size:10px;--ck-resizer-border-width:1px;--ck-resizer-border-radius:2px;--ck-resizer-offset:calc(var(--ck-resizer-size)/-2 - 2px);--ck-resizer-tooltip-offset:10px;--ck-color-resizer-tooltip-background:#262626;--ck-color-resizer-tooltip-text:#f2f2f2}.ck .ck-widget.ck-widget_with-selection-handle{position:relative}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{position:absolute}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon{display:block}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected .ck-widget__selection-handle,.ck .ck-widget.ck-widget_with-selection-handle:hover .ck-widget__selection-handle{visibility:visible}.ck .ck-size-view{background:var(--ck-color-resizer-tooltip-background);color:var(--ck-color-resizer-tooltip-text);border:1px solid var(--ck-color-resizer-tooltip-text);border-radius:var(--ck-resizer-border-radius);font-size:var(--ck-font-size-tiny);display:block;padding:var(--ck-spacing-small)}.ck .ck-size-view.ck-orientation-bottom-left,.ck .ck-size-view.ck-orientation-bottom-right,.ck .ck-size-view.ck-orientation-top-left,.ck .ck-size-view.ck-orientation-top-right{position:absolute}.ck .ck-size-view.ck-orientation-top-left{top:var(--ck-resizer-tooltip-offset);left:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-top-right{top:var(--ck-resizer-tooltip-offset);right:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-bottom-right{bottom:var(--ck-resizer-tooltip-offset);right:var(--ck-resizer-tooltip-offset)}.ck .ck-size-view.ck-orientation-bottom-left{bottom:var(--ck-resizer-tooltip-offset);left:var(--ck-resizer-tooltip-offset)}:root{--ck-widget-outline-thickness:3px;--ck-widget-handler-icon-size:16px;--ck-widget-handler-animation-duration:200ms;--ck-widget-handler-animation-curve:ease;--ck-color-widget-blurred-border:#dedede;--ck-color-widget-hover-border:#ffc83d;--ck-color-widget-editable-focus-background:var(--ck-color-base-background);--ck-color-widget-drag-handler-icon-color:var(--ck-color-base-background)}.ck .ck-widget{outline-width:var(--ck-widget-outline-thickness);outline-style:solid;outline-color:transparent;transition:outline-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_selected,.ck .ck-widget.ck-widget_selected:hover{outline:var(--ck-widget-outline-thickness) solid var(--ck-color-focus-border)}.ck .ck-widget:hover{outline-color:var(--ck-color-widget-hover-border)}.ck .ck-editor__nested-editable{border:1px solid transparent}.ck .ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck .ck-editor__nested-editable:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-inner-shadow),0 0;background-color:var(--ck-color-widget-editable-focus-background)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{padding:4px;box-sizing:border-box;background-color:transparent;opacity:0;transition:background-color var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),visibility var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve),opacity var(--ck-widget-handler-animation-duration) var(--ck-widget-handler-animation-curve);border-radius:var(--ck-border-radius) var(--ck-border-radius) 0 0;transform:translateY(-100%);left:calc(0px - var(--ck-widget-outline-thickness))}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon{width:var(--ck-widget-handler-icon-size);height:var(--ck-widget-handler-icon-size);color:var(--ck-color-widget-drag-handler-icon-color)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator{opacity:0;transition:opacity .3s var(--ck-widget-handler-animation-curve)}.ck .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle:hover .ck-icon .ck-icon__selected-indicator{opacity:1}.ck .ck-widget.ck-widget_with-selection-handle:hover .ck-widget__selection-handle{opacity:1;background-color:var(--ck-color-widget-hover-border)}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected .ck-widget__selection-handle,.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected:hover .ck-widget__selection-handle{opacity:1;background-color:var(--ck-color-focus-border)}.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected .ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator,.ck .ck-widget.ck-widget_with-selection-handle.ck-widget_selected:hover .ck-widget__selection-handle .ck-icon .ck-icon__selected-indicator{opacity:1}.ck-editor__editable>.ck-widget.ck-widget_with-selection-handle:first-child,.ck-editor__editable blockquote>.ck-widget.ck-widget_with-selection-handle:first-child{margin-top:calc(1em + var(--ck-widget-handler-icon-size))}.ck[dir=rtl] .ck-widget.ck-widget_with-selection-handle .ck-widget__selection-handle{left:auto;right:calc(0px - var(--ck-widget-outline-thickness))}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover{outline-color:var(--ck-color-widget-blurred-border)}.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected.ck-widget_with-selection-handle .ck-widget__selection-handle,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected.ck-widget_with-selection-handle .ck-widget__selection-handle:hover,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover.ck-widget_with-selection-handle .ck-widget__selection-handle,.ck-editor__editable.ck-blurred .ck-widget.ck-widget_selected:hover.ck-widget_with-selection-handle .ck-widget__selection-handle:hover{background:var(--ck-color-widget-blurred-border)}.ck-editor__editable.ck-read-only .ck-widget{--ck-widget-outline-thickness:0}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(61);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-labeled-input .ck-labeled-input__status{font-size:var(--ck-font-size-small);margin-top:var(--ck-spacing-small);white-space:normal}.ck.ck-labeled-input .ck-labeled-input__status_error{color:var(--ck-color-base-error)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(63);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ":root{--ck-input-text-width:18em}.ck.ck-input-text{border-radius:0}.ck-rounded-corners .ck.ck-input-text,.ck.ck-input-text.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-input-text{box-shadow:var(--ck-inner-shadow),0 0;background:var(--ck-color-input-background);border:1px solid var(--ck-color-input-border);padding:var(--ck-spacing-extra-tiny) var(--ck-spacing-medium);min-width:var(--ck-input-text-width);min-height:var(--ck-ui-component-min-height);transition:box-shadow .2s ease-in-out,border .2s ease-in-out}.ck.ck-input-text:focus{outline:none;border:var(--ck-focus-ring);box-shadow:var(--ck-focus-outer-shadow),var(--ck-inner-shadow)}.ck.ck-input-text[readonly]{border:1px solid var(--ck-color-input-disabled-border);background:var(--ck-color-input-disabled-background);color:var(--ck-color-input-disabled-text)}.ck.ck-input-text[readonly]:focus{box-shadow:var(--ck-focus-disabled-outer-shadow),var(--ck-inner-shadow)}.ck.ck-input-text.ck-error{border-color:var(--ck-color-input-error-border);animation:ck-text-input-shake .3s ease both}.ck.ck-input-text.ck-error:focus{box-shadow:var(--ck-focus-error-outer-shadow),var(--ck-inner-shadow)}@keyframes ck-text-input-shake{20%{transform:translateX(-2px)}40%{transform:translateX(2px)}60%{transform:translateX(-1px)}80%{transform:translateX(1px)}}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(65);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-text-alternative-form{display:flex;flex-direction:row;flex-wrap:nowrap}.ck.ck-text-alternative-form .ck-labeled-input{display:inline-block}.ck.ck-text-alternative-form .ck-label{display:none}@media screen and (max-width:600px){.ck.ck-text-alternative-form{flex-wrap:wrap}.ck.ck-text-alternative-form .ck-labeled-input{flex-basis:100%}.ck.ck-text-alternative-form .ck-button{flex-basis:50%}}.ck.ck-text-alternative-form{padding:var(--ck-spacing-standard)}.ck.ck-text-alternative-form:focus{outline:none}[dir=ltr] .ck.ck-text-alternative-form>:not(:first-child),[dir=rtl] .ck.ck-text-alternative-form>:not(:last-child){margin-left:var(--ck-spacing-standard)}@media screen and (max-width:600px){.ck.ck-text-alternative-form{padding:0;width:calc(0.8*var(--ck-input-text-width))}.ck.ck-text-alternative-form .ck-labeled-input{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) 0}.ck.ck-text-alternative-form .ck-labeled-input .ck-input-text{min-width:0;width:100%}.ck.ck-text-alternative-form .ck-button{padding:var(--ck-spacing-standard);margin-top:var(--ck-spacing-standard);border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border)}[dir=ltr] .ck.ck-text-alternative-form .ck-button{margin-left:0}[dir=ltr] .ck.ck-text-alternative-form .ck-button:first-of-type{border-right:1px solid var(--ck-color-base-border)}[dir=rtl] .ck.ck-text-alternative-form .ck-button{margin-left:0}[dir=rtl] .ck.ck-text-alternative-form .ck-button:last-of-type{border-right:1px solid var(--ck-color-base-border)}}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(67);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck-content .image{display:table;clear:both;text-align:center;margin:1em auto}.ck-content .image>img{display:block;margin:0 auto;max-width:100%;min-width:50px}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(69);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ":root{--ck-image-style-spacing:1.5em}.ck-content .image-style-align-center,.ck-content .image-style-align-left,.ck-content .image-style-align-right,.ck-content .image-style-side{max-width:50%}.ck-content .image-style-side{float:right;margin-left:var(--ck-image-style-spacing)}.ck-content .image-style-align-left{float:left;margin-right:var(--ck-image-style-spacing)}.ck-content .image-style-align-center{margin-left:auto;margin-right:auto}.ck-content .image-style-align-right{float:right;margin-left:var(--ck-image-style-spacing)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(71);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck .ck-widget_with-resizer{position:relative}.ck .ck-widget__resizer{display:none;position:absolute;pointer-events:none;left:0;top:0;outline:1px solid var(--ck-color-resizer)}.ck-focused .ck-widget_with-resizer.ck-widget_selected>.ck-widget__resizer{display:block}.ck .ck-widget__resizer__handle{position:absolute;pointer-events:all;width:var(--ck-resizer-size);height:var(--ck-resizer-size);background:var(--ck-color-focus-border);border:var(--ck-resizer-border-width) solid #fff;border-radius:var(--ck-resizer-border-radius)}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-left{top:var(--ck-resizer-offset);left:var(--ck-resizer-offset);cursor:nwse-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-top-right{top:var(--ck-resizer-offset);right:var(--ck-resizer-offset);cursor:nesw-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-right{bottom:var(--ck-resizer-offset);right:var(--ck-resizer-offset);cursor:nwse-resize}.ck .ck-widget__resizer__handle.ck-widget__resizer__handle-bottom-left{bottom:var(--ck-resizer-offset);left:var(--ck-resizer-offset);cursor:nesw-resize}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(73);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck-content .image.image_resized{max-width:100%;display:block;box-sizing:border-box}.ck-content .image.image_resized img{width:100%}.ck-content .image.image_resized>figcaption{display:block}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(75);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-editor__editable .image{position:relative}.ck.ck-editor__editable .image .ck-progress-bar{position:absolute;top:0;left:0}.ck.ck-editor__editable .image.ck-appear{animation:fadeIn .7s}.ck.ck-editor__editable .image .ck-progress-bar{height:2px;width:0;background:var(--ck-color-upload-bar-background);transition:width .1s}@keyframes fadeIn{0%{opacity:0}to{opacity:1}}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(77);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = '.ck-image-upload-complete-icon{display:block;position:absolute;top:10px;right:10px;border-radius:50%}.ck-image-upload-complete-icon:after{content:"";position:absolute}:root{--ck-color-image-upload-icon:#fff;--ck-color-image-upload-icon-background:#008a00;--ck-image-upload-icon-size:20px;--ck-image-upload-icon-width:2px}.ck-image-upload-complete-icon{width:var(--ck-image-upload-icon-size);height:var(--ck-image-upload-icon-size);opacity:0;background:var(--ck-color-image-upload-icon-background);animation-name:ck-upload-complete-icon-show,ck-upload-complete-icon-hide;animation-fill-mode:forwards,forwards;animation-duration:.5s,.5s;font-size:var(--ck-image-upload-icon-size);animation-delay:0ms,3s}.ck-image-upload-complete-icon:after{left:25%;top:50%;opacity:0;height:0;width:0;transform:scaleX(-1) rotate(135deg);transform-origin:left top;border-top:var(--ck-image-upload-icon-width) solid var(--ck-color-image-upload-icon);border-right:var(--ck-image-upload-icon-width) solid var(--ck-color-image-upload-icon);animation-name:ck-upload-complete-icon-check;animation-duration:.5s;animation-delay:.5s;animation-fill-mode:forwards;box-sizing:border-box}@keyframes ck-upload-complete-icon-show{0%{opacity:0}to{opacity:1}}@keyframes ck-upload-complete-icon-hide{0%{opacity:1}to{opacity:0}}@keyframes ck-upload-complete-icon-check{0%{opacity:1;width:0;height:0}33%{width:.3em;height:0}to{opacity:1;width:.3em;height:.45em}}'
    }, function (t, e, i) {
        var n = i(1);
        var o = i(79);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = '.ck .ck-upload-placeholder-loader{position:absolute;display:flex;align-items:center;justify-content:center;top:0;left:0}.ck .ck-upload-placeholder-loader:before{content:"";position:relative}:root{--ck-color-upload-placeholder-loader:#b3b3b3;--ck-upload-placeholder-loader-size:32px}.ck .ck-image-upload-placeholder{width:100%;margin:0}.ck .ck-upload-placeholder-loader{width:100%;height:100%}.ck .ck-upload-placeholder-loader:before{width:var(--ck-upload-placeholder-loader-size);height:var(--ck-upload-placeholder-loader-size);border-radius:50%;border-top:3px solid var(--ck-color-upload-placeholder-loader);border-right:2px solid transparent;animation:ck-upload-placeholder-loader 1s linear infinite}@keyframes ck-upload-placeholder-loader{to{transform:rotate(1turn)}}'
    }, function (t, e, i) {
        var n = i(1);
        var o = i(81);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck .ck-link_selected{background:var(--ck-color-link-selected-background)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(83);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-link-form{display:flex}.ck.ck-link-form .ck-label{display:none}@media screen and (max-width:600px){.ck.ck-link-form{flex-wrap:wrap}.ck.ck-link-form .ck-labeled-input{flex-basis:100%}.ck.ck-link-form .ck-button{flex-basis:50%}}.ck.ck-link-form_layout-vertical{display:block}.ck.ck-link-form{padding:var(--ck-spacing-standard)}.ck.ck-link-form:focus{outline:none}[dir=ltr] .ck.ck-link-form>:not(:first-child),[dir=rtl] .ck.ck-link-form>:not(:last-child){margin-left:var(--ck-spacing-standard)}@media screen and (max-width:600px){.ck.ck-link-form{padding:0;width:calc(0.8*var(--ck-input-text-width))}.ck.ck-link-form .ck-labeled-input{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) 0}.ck.ck-link-form .ck-labeled-input .ck-input-text{min-width:0;width:100%}.ck.ck-link-form .ck-button{padding:var(--ck-spacing-standard);margin-top:var(--ck-spacing-standard);border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border)}[dir=ltr] .ck.ck-link-form .ck-button{margin-left:0}[dir=ltr] .ck.ck-link-form .ck-button:first-of-type{border-right:1px solid var(--ck-color-base-border)}[dir=rtl] .ck.ck-link-form .ck-button{margin-left:0}[dir=rtl] .ck.ck-link-form .ck-button:last-of-type{border-right:1px solid var(--ck-color-base-border)}}.ck.ck-link-form_layout-vertical{padding:0;min-width:var(--ck-input-text-width)}.ck.ck-link-form_layout-vertical .ck-labeled-input{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) var(--ck-spacing-small)}.ck.ck-link-form_layout-vertical .ck-labeled-input .ck-input-text{min-width:0;width:100%}.ck.ck-link-form_layout-vertical .ck-button{padding:var(--ck-spacing-standard);margin:0;border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border);width:50%}[dir=ltr] .ck.ck-link-form_layout-vertical .ck-button{margin-left:0}[dir=ltr] .ck.ck-link-form_layout-vertical .ck-button:first-of-type{border-right:1px solid var(--ck-color-base-border)}[dir=rtl] .ck.ck-link-form_layout-vertical .ck-button{margin-left:0}[dir=rtl] .ck.ck-link-form_layout-vertical .ck-button:last-of-type{border-right:1px solid var(--ck-color-base-border)}.ck.ck-link-form_layout-vertical .ck.ck-list{margin-left:0}.ck.ck-link-form_layout-vertical .ck.ck-list .ck-button.ck-switchbutton{border:0;width:100%}.ck.ck-link-form_layout-vertical .ck.ck-list .ck-button.ck-switchbutton:hover{background:none}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(85);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-link-actions{display:flex;flex-direction:row;flex-wrap:nowrap}.ck.ck-link-actions .ck-link-actions__preview{display:inline-block}.ck.ck-link-actions .ck-link-actions__preview .ck-button__label{overflow:hidden}@media screen and (max-width:600px){.ck.ck-link-actions{flex-wrap:wrap}.ck.ck-link-actions .ck-link-actions__preview{flex-basis:100%}.ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){flex-basis:50%}}.ck.ck-link-actions{padding:var(--ck-spacing-standard)}.ck.ck-link-actions .ck-button.ck-link-actions__preview{padding-left:0;padding-right:0}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label{padding:0 var(--ck-spacing-medium);color:var(--ck-color-link-default);text-overflow:ellipsis;cursor:pointer;max-width:var(--ck-input-text-width);min-width:3em;text-align:center}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label:hover{text-decoration:underline}.ck.ck-link-actions .ck-button.ck-link-actions__preview,.ck.ck-link-actions .ck-button.ck-link-actions__preview:active,.ck.ck-link-actions .ck-button.ck-link-actions__preview:focus,.ck.ck-link-actions .ck-button.ck-link-actions__preview:hover{background:none}.ck.ck-link-actions .ck-button.ck-link-actions__preview:active{box-shadow:none}.ck.ck-link-actions .ck-button.ck-link-actions__preview:focus .ck-button__label{text-decoration:underline}.ck.ck-link-actions:focus{outline:none}[dir=ltr] .ck.ck-link-actions .ck-button:not(:first-child),[dir=rtl] .ck.ck-link-actions .ck-button:not(:last-child){margin-left:var(--ck-spacing-standard)}@media screen and (max-width:600px){.ck.ck-link-actions{padding:0;width:calc(0.8*var(--ck-input-text-width))}.ck.ck-link-actions .ck-button.ck-link-actions__preview{margin:var(--ck-spacing-standard) var(--ck-spacing-standard) 0}.ck.ck-link-actions .ck-button.ck-link-actions__preview .ck-button__label{min-width:0;max-width:100%}.ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){padding:var(--ck-spacing-standard);margin-top:var(--ck-spacing-standard);border-radius:0;border:0;border-top:1px solid var(--ck-color-base-border)}[dir=ltr] .ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){margin-left:0}[dir=ltr] .ck.ck-link-actions .ck-button:not(.ck-link-actions__preview):first-of-type{border-right:1px solid var(--ck-color-base-border)}[dir=rtl] .ck.ck-link-actions .ck-button:not(.ck-link-actions__preview){margin-left:0}[dir=rtl] .ck.ck-link-actions .ck-button:not(.ck-link-actions__preview):last-of-type{border-right:1px solid var(--ck-color-base-border)}}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(87);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-character-grid .ck-character-grid__tiles{display:grid;grid-template-columns:repeat(10,1fr)}:root{--ck-character-grid-tile-size:24px}.ck.ck-character-grid{overflow-y:auto;overflow-x:hidden;width:350px;max-height:200px}.ck.ck-character-grid .ck-character-grid__tiles{margin:var(--ck-spacing-standard);grid-gap:var(--ck-spacing-standard)}.ck.ck-character-grid .ck-character-grid__tile{width:var(--ck-character-grid-tile-size);height:var(--ck-character-grid-tile-size);min-width:var(--ck-character-grid-tile-size);min-height:var(--ck-character-grid-tile-size);font-size:1.2em;padding:0;transition:box-shadow .2s ease;border:0}.ck.ck-character-grid .ck-character-grid__tile:focus:not(.ck-disabled),.ck.ck-character-grid .ck-character-grid__tile:hover:not(.ck-disabled){border:0;box-shadow:inset 0 0 0 1px var(--ck-color-base-background),0 0 0 2px var(--ck-color-focus-border)}.ck.ck-character-grid .ck-character-grid__tile .ck-button__label{line-height:var(--ck-character-grid-tile-size);width:100%;text-align:center}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(89);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-character-info{display:flex;justify-content:space-between;padding:var(--ck-spacing-small) var(--ck-spacing-standard);border-top:1px solid var(--ck-color-base-border)}.ck.ck-character-info>*{text-transform:uppercase;font-size:var(--ck-font-size-small)}.ck.ck-character-info .ck-character-info__name{max-width:280px;text-overflow:ellipsis;overflow:hidden}.ck.ck-character-info .ck-character-info__code{opacity:.6}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(91);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-special-characters-navigation{display:flex;flex-direction:row;flex-wrap:nowrap;align-items:center;justify-content:space-between;border-bottom:1px solid var(--ck-color-base-border);padding:var(--ck-spacing-standard)}[dir=ltr] .ck.ck-special-characters-navigation{padding-left:var(--ck-spacing-large)}[dir=rtl] .ck.ck-special-characters-navigation{padding-right:var(--ck-spacing-large)}.ck.ck-special-characters-navigation>.ck-label{max-width:160px;text-overflow:ellipsis;overflow:hidden}.ck.ck-special-characters-navigation>.ck-dropdown .ck-dropdown__panel{max-height:250px;overflow-y:auto;overflow-x:hidden}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(93);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ":root{--ck-color-table-focused-cell-background:rgba(158,207,250,0.3)}.ck-widget.table td.ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck-widget.table td.ck-editor__nested-editable:focus,.ck-widget.table th.ck-editor__nested-editable.ck-editor__nested-editable_focused,.ck-widget.table th.ck-editor__nested-editable:focus{background:var(--ck-color-table-focused-cell-background);border-style:none;outline:1px solid var(--ck-color-focus-border);outline-offset:-1px}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(95);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck .ck-insert-table-dropdown__grid{display:flex;flex-direction:row;flex-wrap:wrap}:root{--ck-insert-table-dropdown-padding:10px;--ck-insert-table-dropdown-box-height:11px;--ck-insert-table-dropdown-box-width:12px;--ck-insert-table-dropdown-box-margin:1px}.ck .ck-insert-table-dropdown__grid{width:calc(var(--ck-insert-table-dropdown-box-width)*10 + var(--ck-insert-table-dropdown-box-margin)*20 + var(--ck-insert-table-dropdown-padding)*2);padding:var(--ck-insert-table-dropdown-padding) var(--ck-insert-table-dropdown-padding) 0}.ck .ck-insert-table-dropdown__label{text-align:center}.ck .ck-insert-table-dropdown-grid-box{width:var(--ck-insert-table-dropdown-box-width);height:var(--ck-insert-table-dropdown-box-height);margin:var(--ck-insert-table-dropdown-box-margin);border:1px solid var(--ck-color-base-border);border-radius:1px}.ck .ck-insert-table-dropdown-grid-box.ck-on{border-color:var(--ck-color-focus-border);background:var(--ck-color-focus-outer-shadow)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(97);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ":root{--ck-table-selected-cell-background:#cee5fd}.ck.ck-editor__editable .table table td.ck-editor__editable_selected,.ck.ck-editor__editable .table table th.ck-editor__editable_selected{background-color:var(--ck-table-selected-cell-background)!important;caret-color:transparent;outline:unset;box-shadow:unset}.ck.ck-editor__editable .table table td.ck-editor__editable_selected ::selection,.ck.ck-editor__editable .table table th.ck-editor__editable_selected ::selection{background-color:transparent}.ck.ck-editor__editable .table table td.ck-editor__editable_selected .ck-widget_selected,.ck.ck-editor__editable .table table th.ck-editor__editable_selected .ck-widget_selected{outline:unset}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(99);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck-content .table{margin:1em auto;display:table}.ck-content .table table{border-collapse:collapse;border-spacing:0;width:100%;height:100%;border:1px double #b3b3b3}.ck-content .table table td,.ck-content .table table th{min-width:2em;padding:.4em;border-color:#bfbfbf}.ck-content .table table th{font-weight:700;background:hsla(0,0%,0%,5%)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(101);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-labeled-view .ck-labeled-view__status{font-size:var(--ck-font-size-small);margin-top:var(--ck-spacing-small);white-space:normal}.ck.ck-labeled-view .ck-labeled-view__status_error{color:var(--ck-color-base-error)}.ck.ck-labeled-view>.ck.ck-label{width:100%;text-overflow:ellipsis;overflow:hidden}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(103);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-input-color{width:100%;display:flex}.ck.ck-input-color>input.ck.ck-input-text{min-width:auto;flex-grow:1}.ck.ck-input-color>input.ck.ck-input-text:active,.ck.ck-input-color>input.ck.ck-input-text:focus{z-index:var(--ck-z-default)}.ck.ck-input-color>div.ck.ck-dropdown{min-width:auto}.ck.ck-input-color>div.ck.ck-dropdown>.ck-input-color__button .ck-dropdown__arrow{display:none}.ck.ck-input-color .ck.ck-input-color__button .ck.ck-input-color__button__preview{position:relative;overflow:hidden}.ck.ck-input-color .ck.ck-input-color__button .ck.ck-input-color__button__preview>.ck.ck-input-color__button__preview__no-color-indicator{position:absolute;display:block}[dir=ltr] .ck.ck-input-color>.ck.ck-input-text{border-top-right-radius:0;border-bottom-right-radius:0}[dir=rtl] .ck.ck-input-color>.ck.ck-input-text{border-top-left-radius:0;border-bottom-left-radius:0}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button{padding:0}[dir=ltr] .ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button{border-top-left-radius:0;border-bottom-left-radius:0;margin-left:-1px}[dir=rtl] .ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button{border-top-right-radius:0;border-bottom-right-radius:0;margin-right:-1px}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button.ck-disabled{background:var(--ck-color-input-disabled-background)}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button>.ck.ck-input-color__button__preview{border-radius:0}.ck-rounded-corners .ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button>.ck.ck-input-color__button__preview,.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button>.ck.ck-input-color__button__preview.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button>.ck.ck-input-color__button__preview{width:20px;height:20px;border:1px solid var(--ck-color-input-border)}.ck.ck-input-color>.ck.ck-dropdown>.ck.ck-input-color__button>.ck.ck-input-color__button__preview>.ck.ck-input-color__button__preview__no-color-indicator{top:-30%;left:50%;height:150%;width:8%;background:red;border-radius:2px;transform:rotate(45deg);transform-origin:50%}.ck.ck-input-color .ck.ck-input-color__remove-color{width:100%;border-bottom:1px solid var(--ck-color-input-border);padding:calc(var(--ck-spacing-standard)/2) var(--ck-spacing-standard);border-bottom-left-radius:0;border-bottom-right-radius:0}[dir=ltr] .ck.ck-input-color .ck.ck-input-color__remove-color{border-top-right-radius:0}[dir=rtl] .ck.ck-input-color .ck.ck-input-color__remove-color{border-top-left-radius:0}.ck.ck-input-color .ck.ck-input-color__remove-color .ck.ck-icon{margin-right:var(--ck-spacing-standard)}[dir=rtl] .ck.ck-input-color .ck.ck-input-color__remove-color .ck.ck-icon{margin-right:0;margin-left:var(--ck-spacing-standard)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(105);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-form__row{display:flex;flex-direction:row;flex-wrap:nowrap;justify-content:space-between}.ck.ck-form__row>:not(.ck-label){flex-grow:1}.ck.ck-form__row.ck-table-form__action-row .ck-button-cancel,.ck.ck-form__row.ck-table-form__action-row .ck-button-save{justify-content:center}.ck.ck-form__row{padding:var(--ck-spacing-standard) var(--ck-spacing-large) 0}[dir=ltr] .ck.ck-form__row>:not(.ck-label)+*{margin-left:var(--ck-spacing-large)}[dir=rtl] .ck.ck-form__row>:not(.ck-label)+*{margin-right:var(--ck-spacing-large)}.ck.ck-form__row>.ck-label{width:100%;min-width:100%}.ck.ck-form__row.ck-table-form__action-row{margin-top:var(--ck-spacing-large)}.ck.ck-form__row.ck-table-form__action-row .ck-button .ck-button__label{color:var(--ck-color-text)}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(107);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ":root{--ck-table-form-header-height:38px}.ck.ck-form__header{padding:0 var(--ck-spacing-large);height:var(--ck-table-form-header-height);line-height:var(--ck-table-form-header-height);border-bottom:1px solid var(--ck-color-base-border)}.ck.ck-form__header .ck-form__header__label{font-weight:700}"
    }, function (t, e) {
        t.exports = ".ck.ck-form{padding:0 0 var(--ck-spacing-large)}.ck.ck-form:focus{outline:none}.ck.ck-form .ck.ck-input-text{min-width:100%;width:0}.ck.ck-form .ck.ck-dropdown{min-width:100%}.ck.ck-form .ck.ck-dropdown .ck-dropdown__button:not(:focus){border:1px solid var(--ck-color-base-border)}.ck.ck-form .ck.ck-dropdown .ck-dropdown__button .ck-button__label{width:100%}"
    }, function (t, e) {
        t.exports = '.ck.ck-table-form .ck-form__row.ck-table-form__border-row{flex-wrap:wrap}.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-labeled-view{display:flex;flex-direction:column-reverse}.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-labeled-view .ck.ck-dropdown,.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-table-form__border-style,.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-table-form__border-width{flex-grow:0}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row{flex-wrap:wrap;align-items:center}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-labeled-view{display:flex;flex-direction:column-reverse;align-items:center}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-labeled-view .ck.ck-dropdown,.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-table-form__dimension-operator{flex-grow:0}.ck.ck-table-form .ck.ck-labeled-view{position:relative}.ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status{position:absolute;left:50%;bottom:calc(-1*var(--ck-table-properties-error-arrow-size));transform:translate(-50%,100%);z-index:1}.ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status:after{content:"";position:absolute;top:calc(-1*var(--ck-table-properties-error-arrow-size));left:50%;transform:translateX(-50%)}:root{--ck-table-properties-error-arrow-size:6px;--ck-table-properties-min-error-width:150px}.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-labeled-view>.ck-label{font-size:var(--ck-font-size-tiny);text-align:center}.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-table-form__border-style{width:80px;min-width:80px}.ck.ck-table-form .ck-form__row.ck-table-form__border-row .ck-table-form__border-width{width:50px;min-width:50px}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row{padding:0}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-labeled-view>.ck-label{font-size:10px;text-align:center}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-table-form__dimensions-row__height,.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-table-form__dimensions-row__width{margin:0}.ck.ck-table-form .ck-form__row.ck-table-form__dimensions-row .ck-table-form__dimension-operator{align-self:start;display:inline-block;height:var(--ck-ui-component-min-height);line-height:var(--ck-ui-component-min-height);margin:0 var(--ck-spacing-small)}.ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status{border-radius:0}.ck-rounded-corners .ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status,.ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status.ck-rounded-corners{border-radius:var(--ck-border-radius)}.ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status{background:var(--ck-color-base-error);color:var(--ck-color-base-background);padding:var(--ck-spacing-small) var(--ck-spacing-medium);min-width:var(--ck-table-properties-min-error-width);text-align:center}.ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status:after{border-left:var(--ck-table-properties-error-arrow-size) solid transparent;border-bottom:var(--ck-table-properties-error-arrow-size) solid var(--ck-color-base-error);border-right:var(--ck-table-properties-error-arrow-size) solid transparent;border-top:0 solid transparent}.ck.ck-table-form .ck.ck-labeled-view .ck.ck-labeled-view__status{animation:ck-table-form-labeled-view-status-appear .15s ease both}.ck.ck-table-form .ck.ck-labeled-view .ck-input.ck-error:not(:focus)+.ck.ck-labeled-view__status{display:none}@keyframes ck-table-form-labeled-view-status-appear{0%{opacity:0}to{opacity:1}}'
    }, function (t, e, i) {
        var n = i(1);
        var o = i(111);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-table-cell-properties-form .ck-form__row.ck-table-cell-properties-form__alignment-row{flex-wrap:wrap}.ck.ck-table-cell-properties-form .ck-form__row.ck-table-cell-properties-form__alignment-row .ck.ck-toolbar{flex-grow:0}.ck.ck-table-cell-properties-form{width:320px}.ck.ck-table-cell-properties-form .ck-form__row.ck-table-cell-properties-form__padding-row{padding:0;width:35%}.ck.ck-table-cell-properties-form .ck-form__row.ck-table-cell-properties-form__alignment-row .ck.ck-toolbar{background:none}"
    }, function (t, e, i) {
        var n = i(1);
        var o = i(113);
        o = o.__esModule ? o.default : o;
        if (typeof o === "string") {
            o = [[t.i, o, ""]]
        }
        var r = {injectType: "singletonStyleTag"};
        r.insert = "head";
        r.singleton = true;
        var s = n(o, r);
        var a = o.locals ? o.locals : {};
        t.exports = a
    }, function (t, e) {
        t.exports = ".ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row{flex-wrap:wrap;flex-basis:0;align-content:baseline}.ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row .ck.ck-toolbar .ck-toolbar__items{flex-wrap:nowrap}.ck.ck-table-properties-form{width:320px}.ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row{padding:0}.ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row .ck.ck-toolbar{background:none}.ck.ck-table-properties-form .ck-form__row.ck-table-properties-form__alignment-row .ck.ck-toolbar .ck-toolbar__items>*{width:40px}"
    }, function (t, e, i) {
        "use strict";
        i.r(e);
        i.d(e, "default", (function () {
            return _I
        }));
        var n = i(3);
        var o = n["a"].Symbol;
        var r = o;
        var s = Object.prototype;
        var a = s.hasOwnProperty;
        var c = s.toString;
        var l = r ? r.toStringTag : undefined;

        function d(t) {
            var e = a.call(t, l), i = t[l];
            try {
                t[l] = undefined;
                var n = true
            } catch (t) {
            }
            var o = c.call(t);
            if (n) {
                if (e) {
                    t[l] = i
                } else {
                    delete t[l]
                }
            }
            return o
        }

        var u = d;
        var h = Object.prototype;
        var f = h.toString;

        function g(t) {
            return f.call(t)
        }

        var m = g;
        var p = "[object Null]", b = "[object Undefined]";
        var w = r ? r.toStringTag : undefined;

        function k(t) {
            if (t == null) {
                return t === undefined ? b : p
            }
            return w && w in Object(t) ? u(t) : m(t)
        }

        var _ = k;

        function v(t, e) {
            return function (i) {
                return t(e(i))
            }
        }

        var y = v;
        var x = y(Object.getPrototypeOf, Object);
        var C = x;

        function A(t) {
            return t != null && typeof t == "object"
        }

        var T = A;
        var P = "[object Object]";
        var S = Function.prototype, E = Object.prototype;
        var R = S.toString;
        var O = E.hasOwnProperty;
        var I = R.call(Object);

        function V(t) {
            if (!T(t) || _(t) != P) {
                return false
            }
            var e = C(t);
            if (e === null) {
                return true
            }
            var i = O.call(e, "constructor") && e.constructor;
            return typeof i == "function" && i instanceof i && R.call(i) == I
        }

        var N = V;

        function M() {
            this.__data__ = [];
            this.size = 0
        }

        var B = M;

        function z(t, e) {
            return t === e || t !== t && e !== e
        }

        var L = z;

        function F(t, e) {
            var i = t.length;
            while (i--) {
                if (L(t[i][0], e)) {
                    return i
                }
            }
            return -1
        }

        var D = F;
        var j = Array.prototype;
        var H = j.splice;

        function W(t) {
            var e = this.__data__, i = D(e, t);
            if (i < 0) {
                return false
            }
            var n = e.length - 1;
            if (i == n) {
                e.pop()
            } else {
                H.call(e, i, 1)
            }
            --this.size;
            return true
        }

        var q = W;

        function U(t) {
            var e = this.__data__, i = D(e, t);
            return i < 0 ? undefined : e[i][1]
        }

        var $ = U;

        function G(t) {
            return D(this.__data__, t) > -1
        }

        var K = G;

        function J(t, e) {
            var i = this.__data__, n = D(i, t);
            if (n < 0) {
                ++this.size;
                i.push([t, e])
            } else {
                i[n][1] = e
            }
            return this
        }

        var Y = J;

        function Q(t) {
            var e = -1, i = t == null ? 0 : t.length;
            this.clear();
            while (++e < i) {
                var n = t[e];
                this.set(n[0], n[1])
            }
        }

        Q.prototype.clear = B;
        Q.prototype["delete"] = q;
        Q.prototype.get = $;
        Q.prototype.has = K;
        Q.prototype.set = Y;
        var X = Q;

        function Z() {
            this.__data__ = new X;
            this.size = 0
        }

        var tt = Z;

        function et(t) {
            var e = this.__data__, i = e["delete"](t);
            this.size = e.size;
            return i
        }

        var it = et;

        function nt(t) {
            return this.__data__.get(t)
        }

        var ot = nt;

        function rt(t) {
            return this.__data__.has(t)
        }

        var st = rt;

        function at(t) {
            var e = typeof t;
            return t != null && (e == "object" || e == "function")
        }

        var ct = at;
        var lt = "[object AsyncFunction]", dt = "[object Function]", ut = "[object GeneratorFunction]",
            ht = "[object Proxy]";

        function ft(t) {
            if (!ct(t)) {
                return false
            }
            var e = _(t);
            return e == dt || e == ut || e == lt || e == ht
        }

        var gt = ft;
        var mt = n["a"]["__core-js_shared__"];
        var pt = mt;
        var bt = function () {
            var t = /[^.]+$/.exec(pt && pt.keys && pt.keys.IE_PROTO || "");
            return t ? "Symbol(src)_1." + t : ""
        }();

        function wt(t) {
            return !!bt && bt in t
        }

        var kt = wt;
        var _t = Function.prototype;
        var vt = _t.toString;

        function yt(t) {
            if (t != null) {
                try {
                    return vt.call(t)
                } catch (t) {
                }
                try {
                    return t + ""
                } catch (t) {
                }
            }
            return ""
        }

        var xt = yt;
        var Ct = /[\\^$.*+?()[\]{}|]/g;
        var At = /^\[object .+?Constructor\]$/;
        var Tt = Function.prototype, Pt = Object.prototype;
        var St = Tt.toString;
        var Et = Pt.hasOwnProperty;
        var Rt = RegExp("^" + St.call(Et).replace(Ct, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$");

        function Ot(t) {
            if (!ct(t) || kt(t)) {
                return false
            }
            var e = gt(t) ? Rt : At;
            return e.test(xt(t))
        }

        var It = Ot;

        function Vt(t, e) {
            return t == null ? undefined : t[e]
        }

        var Nt = Vt;

        function Mt(t, e) {
            var i = Nt(t, e);
            return It(i) ? i : undefined
        }

        var Bt = Mt;
        var zt = Bt(n["a"], "Map");
        var Lt = zt;
        var Ft = Bt(Object, "create");
        var Dt = Ft;

        function jt() {
            this.__data__ = Dt ? Dt(null) : {};
            this.size = 0
        }

        var Ht = jt;

        function Wt(t) {
            var e = this.has(t) && delete this.__data__[t];
            this.size -= e ? 1 : 0;
            return e
        }

        var qt = Wt;
        var Ut = "__lodash_hash_undefined__";
        var $t = Object.prototype;
        var Gt = $t.hasOwnProperty;

        function Kt(t) {
            var e = this.__data__;
            if (Dt) {
                var i = e[t];
                return i === Ut ? undefined : i
            }
            return Gt.call(e, t) ? e[t] : undefined
        }

        var Jt = Kt;
        var Yt = Object.prototype;
        var Qt = Yt.hasOwnProperty;

        function Xt(t) {
            var e = this.__data__;
            return Dt ? e[t] !== undefined : Qt.call(e, t)
        }

        var Zt = Xt;
        var te = "__lodash_hash_undefined__";

        function ee(t, e) {
            var i = this.__data__;
            this.size += this.has(t) ? 0 : 1;
            i[t] = Dt && e === undefined ? te : e;
            return this
        }

        var ie = ee;

        function ne(t) {
            var e = -1, i = t == null ? 0 : t.length;
            this.clear();
            while (++e < i) {
                var n = t[e];
                this.set(n[0], n[1])
            }
        }

        ne.prototype.clear = Ht;
        ne.prototype["delete"] = qt;
        ne.prototype.get = Jt;
        ne.prototype.has = Zt;
        ne.prototype.set = ie;
        var oe = ne;

        function re() {
            this.size = 0;
            this.__data__ = {hash: new oe, map: new (Lt || X), string: new oe}
        }

        var se = re;

        function ae(t) {
            var e = typeof t;
            return e == "string" || e == "number" || e == "symbol" || e == "boolean" ? t !== "__proto__" : t === null
        }

        var ce = ae;

        function le(t, e) {
            var i = t.__data__;
            return ce(e) ? i[typeof e == "string" ? "string" : "hash"] : i.map
        }

        var de = le;

        function ue(t) {
            var e = de(this, t)["delete"](t);
            this.size -= e ? 1 : 0;
            return e
        }

        var he = ue;

        function fe(t) {
            return de(this, t).get(t)
        }

        var ge = fe;

        function me(t) {
            return de(this, t).has(t)
        }

        var pe = me;

        function be(t, e) {
            var i = de(this, t), n = i.size;
            i.set(t, e);
            this.size += i.size == n ? 0 : 1;
            return this
        }

        var we = be;

        function ke(t) {
            var e = -1, i = t == null ? 0 : t.length;
            this.clear();
            while (++e < i) {
                var n = t[e];
                this.set(n[0], n[1])
            }
        }

        ke.prototype.clear = se;
        ke.prototype["delete"] = he;
        ke.prototype.get = ge;
        ke.prototype.has = pe;
        ke.prototype.set = we;
        var _e = ke;
        var ve = 200;

        function ye(t, e) {
            var i = this.__data__;
            if (i instanceof X) {
                var n = i.__data__;
                if (!Lt || n.length < ve - 1) {
                    n.push([t, e]);
                    this.size = ++i.size;
                    return this
                }
                i = this.__data__ = new _e(n)
            }
            i.set(t, e);
            this.size = i.size;
            return this
        }

        var xe = ye;

        function Ce(t) {
            var e = this.__data__ = new X(t);
            this.size = e.size
        }

        Ce.prototype.clear = tt;
        Ce.prototype["delete"] = it;
        Ce.prototype.get = ot;
        Ce.prototype.has = st;
        Ce.prototype.set = xe;
        var Ae = Ce;

        function Te(t, e) {
            var i = -1, n = t == null ? 0 : t.length;
            while (++i < n) {
                if (e(t[i], i, t) === false) {
                    break
                }
            }
            return t
        }

        var Pe = Te;
        var Se = function () {
            try {
                var t = Bt(Object, "defineProperty");
                t({}, "", {});
                return t
            } catch (t) {
            }
        }();
        var Ee = Se;

        function Re(t, e, i) {
            if (e == "__proto__" && Ee) {
                Ee(t, e, {configurable: true, enumerable: true, value: i, writable: true})
            } else {
                t[e] = i
            }
        }

        var Oe = Re;
        var Ie = Object.prototype;
        var Ve = Ie.hasOwnProperty;

        function Ne(t, e, i) {
            var n = t[e];
            if (!(Ve.call(t, e) && L(n, i)) || i === undefined && !(e in t)) {
                Oe(t, e, i)
            }
        }

        var Me = Ne;

        function Be(t, e, i, n) {
            var o = !i;
            i || (i = {});
            var r = -1, s = e.length;
            while (++r < s) {
                var a = e[r];
                var c = n ? n(i[a], t[a], a, i, t) : undefined;
                if (c === undefined) {
                    c = t[a]
                }
                if (o) {
                    Oe(i, a, c)
                } else {
                    Me(i, a, c)
                }
            }
            return i
        }

        var ze = Be;

        function Le(t, e) {
            var i = -1, n = Array(t);
            while (++i < t) {
                n[i] = e(i)
            }
            return n
        }

        var Fe = Le;
        var De = "[object Arguments]";

        function je(t) {
            return T(t) && _(t) == De
        }

        var He = je;
        var We = Object.prototype;
        var qe = We.hasOwnProperty;
        var Ue = We.propertyIsEnumerable;
        var $e = He(function () {
            return arguments
        }()) ? He : function (t) {
            return T(t) && qe.call(t, "callee") && !Ue.call(t, "callee")
        };
        var Ge = $e;
        var Ke = Array.isArray;
        var Je = Ke;
        var Ye = i(4);
        var Qe = 9007199254740991;
        var Xe = /^(?:0|[1-9]\d*)$/;

        function Ze(t, e) {
            var i = typeof t;
            e = e == null ? Qe : e;
            return !!e && (i == "number" || i != "symbol" && Xe.test(t)) && (t > -1 && t % 1 == 0 && t < e)
        }

        var ti = Ze;
        var ei = 9007199254740991;

        function ii(t) {
            return typeof t == "number" && t > -1 && t % 1 == 0 && t <= ei
        }

        var ni = ii;
        var oi = "[object Arguments]", ri = "[object Array]", si = "[object Boolean]", ai = "[object Date]",
            ci = "[object Error]", li = "[object Function]", di = "[object Map]", ui = "[object Number]",
            hi = "[object Object]", fi = "[object RegExp]", gi = "[object Set]", mi = "[object String]",
            pi = "[object WeakMap]";
        var bi = "[object ArrayBuffer]", wi = "[object DataView]", ki = "[object Float32Array]",
            _i = "[object Float64Array]", vi = "[object Int8Array]", yi = "[object Int16Array]",
            xi = "[object Int32Array]", Ci = "[object Uint8Array]", Ai = "[object Uint8ClampedArray]",
            Ti = "[object Uint16Array]", Pi = "[object Uint32Array]";
        var Si = {};
        Si[ki] = Si[_i] = Si[vi] = Si[yi] = Si[xi] = Si[Ci] = Si[Ai] = Si[Ti] = Si[Pi] = true;
        Si[oi] = Si[ri] = Si[bi] = Si[si] = Si[wi] = Si[ai] = Si[ci] = Si[li] = Si[di] = Si[ui] = Si[hi] = Si[fi] = Si[gi] = Si[mi] = Si[pi] = false;

        function Ei(t) {
            return T(t) && ni(t.length) && !!Si[_(t)]
        }

        var Ri = Ei;

        function Oi(t) {
            return function (e) {
                return t(e)
            }
        }

        var Ii = Oi;
        var Vi = i(5);
        var Ni = Vi["a"] && Vi["a"].isTypedArray;
        var Mi = Ni ? Ii(Ni) : Ri;
        var Bi = Mi;
        var zi = Object.prototype;
        var Li = zi.hasOwnProperty;

        function Fi(t, e) {
            var i = Je(t), n = !i && Ge(t), o = !i && !n && Object(Ye["a"])(t), r = !i && !n && !o && Bi(t),
                s = i || n || o || r, a = s ? Fe(t.length, String) : [], c = a.length;
            for (var l in t) {
                if ((e || Li.call(t, l)) && !(s && (l == "length" || o && (l == "offset" || l == "parent") || r && (l == "buffer" || l == "byteLength" || l == "byteOffset") || ti(l, c)))) {
                    a.push(l)
                }
            }
            return a
        }

        var Di = Fi;
        var ji = Object.prototype;

        function Hi(t) {
            var e = t && t.constructor, i = typeof e == "function" && e.prototype || ji;
            return t === i
        }

        var Wi = Hi;
        var qi = y(Object.keys, Object);
        var Ui = qi;
        var $i = Object.prototype;
        var Gi = $i.hasOwnProperty;

        function Ki(t) {
            if (!Wi(t)) {
                return Ui(t)
            }
            var e = [];
            for (var i in Object(t)) {
                if (Gi.call(t, i) && i != "constructor") {
                    e.push(i)
                }
            }
            return e
        }

        var Ji = Ki;

        function Yi(t) {
            return t != null && ni(t.length) && !gt(t)
        }

        var Qi = Yi;

        function Xi(t) {
            return Qi(t) ? Di(t) : Ji(t)
        }

        var Zi = Xi;

        function tn(t, e) {
            return t && ze(e, Zi(e), t)
        }

        var en = tn;

        function nn(t) {
            var e = [];
            if (t != null) {
                for (var i in Object(t)) {
                    e.push(i)
                }
            }
            return e
        }

        var on = nn;
        var rn = Object.prototype;
        var sn = rn.hasOwnProperty;

        function an(t) {
            if (!ct(t)) {
                return on(t)
            }
            var e = Wi(t), i = [];
            for (var n in t) {
                if (!(n == "constructor" && (e || !sn.call(t, n)))) {
                    i.push(n)
                }
            }
            return i
        }

        var cn = an;

        function ln(t) {
            return Qi(t) ? Di(t, true) : cn(t)
        }

        var dn = ln;

        function un(t, e) {
            return t && ze(e, dn(e), t)
        }

        var hn = un;
        var fn = i(8);

        function gn(t, e) {
            var i = -1, n = t.length;
            e || (e = Array(n));
            while (++i < n) {
                e[i] = t[i]
            }
            return e
        }

        var mn = gn;

        function pn(t, e) {
            var i = -1, n = t == null ? 0 : t.length, o = 0, r = [];
            while (++i < n) {
                var s = t[i];
                if (e(s, i, t)) {
                    r[o++] = s
                }
            }
            return r
        }

        var bn = pn;

        function wn() {
            return []
        }

        var kn = wn;
        var _n = Object.prototype;
        var vn = _n.propertyIsEnumerable;
        var yn = Object.getOwnPropertySymbols;
        var xn = !yn ? kn : function (t) {
            if (t == null) {
                return []
            }
            t = Object(t);
            return bn(yn(t), (function (e) {
                return vn.call(t, e)
            }))
        };
        var Cn = xn;

        function An(t, e) {
            return ze(t, Cn(t), e)
        }

        var Tn = An;

        function Pn(t, e) {
            var i = -1, n = e.length, o = t.length;
            while (++i < n) {
                t[o + i] = e[i]
            }
            return t
        }

        var Sn = Pn;
        var En = Object.getOwnPropertySymbols;
        var Rn = !En ? kn : function (t) {
            var e = [];
            while (t) {
                Sn(e, Cn(t));
                t = C(t)
            }
            return e
        };
        var On = Rn;

        function In(t, e) {
            return ze(t, On(t), e)
        }

        var Vn = In;

        function Nn(t, e, i) {
            var n = e(t);
            return Je(t) ? n : Sn(n, i(t))
        }

        var Mn = Nn;

        function Bn(t) {
            return Mn(t, Zi, Cn)
        }

        var zn = Bn;

        function Ln(t) {
            return Mn(t, dn, On)
        }

        var Fn = Ln;
        var Dn = Bt(n["a"], "DataView");
        var jn = Dn;
        var Hn = Bt(n["a"], "Promise");
        var Wn = Hn;
        var qn = Bt(n["a"], "Set");
        var Un = qn;
        var $n = Bt(n["a"], "WeakMap");
        var Gn = $n;
        var Kn = "[object Map]", Jn = "[object Object]", Yn = "[object Promise]", Qn = "[object Set]",
            Xn = "[object WeakMap]";
        var Zn = "[object DataView]";
        var to = xt(jn), eo = xt(Lt), io = xt(Wn), no = xt(Un), oo = xt(Gn);
        var ro = _;
        if (jn && ro(new jn(new ArrayBuffer(1))) != Zn || Lt && ro(new Lt) != Kn || Wn && ro(Wn.resolve()) != Yn || Un && ro(new Un) != Qn || Gn && ro(new Gn) != Xn) {
            ro = function (t) {
                var e = _(t), i = e == Jn ? t.constructor : undefined, n = i ? xt(i) : "";
                if (n) {
                    switch (n) {
                        case to:
                            return Zn;
                        case eo:
                            return Kn;
                        case io:
                            return Yn;
                        case no:
                            return Qn;
                        case oo:
                            return Xn
                    }
                }
                return e
            }
        }
        var so = ro;
        var ao = Object.prototype;
        var co = ao.hasOwnProperty;

        function lo(t) {
            var e = t.length, i = new t.constructor(e);
            if (e && typeof t[0] == "string" && co.call(t, "index")) {
                i.index = t.index;
                i.input = t.input
            }
            return i
        }

        var uo = lo;
        var ho = n["a"].Uint8Array;
        var fo = ho;

        function go(t) {
            var e = new t.constructor(t.byteLength);
            new fo(e).set(new fo(t));
            return e
        }

        var mo = go;

        function po(t, e) {
            var i = e ? mo(t.buffer) : t.buffer;
            return new t.constructor(i, t.byteOffset, t.byteLength)
        }

        var bo = po;
        var wo = /\w*$/;

        function ko(t) {
            var e = new t.constructor(t.source, wo.exec(t));
            e.lastIndex = t.lastIndex;
            return e
        }

        var _o = ko;
        var vo = r ? r.prototype : undefined, yo = vo ? vo.valueOf : undefined;

        function xo(t) {
            return yo ? Object(yo.call(t)) : {}
        }

        var Co = xo;

        function Ao(t, e) {
            var i = e ? mo(t.buffer) : t.buffer;
            return new t.constructor(i, t.byteOffset, t.length)
        }

        var To = Ao;
        var Po = "[object Boolean]", So = "[object Date]", Eo = "[object Map]", Ro = "[object Number]",
            Oo = "[object RegExp]", Io = "[object Set]", Vo = "[object String]", No = "[object Symbol]";
        var Mo = "[object ArrayBuffer]", Bo = "[object DataView]", zo = "[object Float32Array]",
            Lo = "[object Float64Array]", Fo = "[object Int8Array]", Do = "[object Int16Array]",
            jo = "[object Int32Array]", Ho = "[object Uint8Array]", Wo = "[object Uint8ClampedArray]",
            qo = "[object Uint16Array]", Uo = "[object Uint32Array]";

        function $o(t, e, i) {
            var n = t.constructor;
            switch (e) {
                case Mo:
                    return mo(t);
                case Po:
                case So:
                    return new n(+t);
                case Bo:
                    return bo(t, i);
                case zo:
                case Lo:
                case Fo:
                case Do:
                case jo:
                case Ho:
                case Wo:
                case qo:
                case Uo:
                    return To(t, i);
                case Eo:
                    return new n;
                case Ro:
                case Vo:
                    return new n(t);
                case Oo:
                    return _o(t);
                case Io:
                    return new n;
                case No:
                    return Co(t)
            }
        }

        var Go = $o;
        var Ko = Object.create;
        var Jo = function () {
            function t() {
            }

            return function (e) {
                if (!ct(e)) {
                    return {}
                }
                if (Ko) {
                    return Ko(e)
                }
                t.prototype = e;
                var i = new t;
                t.prototype = undefined;
                return i
            }
        }();
        var Yo = Jo;

        function Qo(t) {
            return typeof t.constructor == "function" && !Wi(t) ? Yo(C(t)) : {}
        }

        var Xo = Qo;
        var Zo = "[object Map]";

        function tr(t) {
            return T(t) && so(t) == Zo
        }

        var er = tr;
        var ir = Vi["a"] && Vi["a"].isMap;
        var nr = ir ? Ii(ir) : er;
        var or = nr;
        var rr = "[object Set]";

        function sr(t) {
            return T(t) && so(t) == rr
        }

        var ar = sr;
        var cr = Vi["a"] && Vi["a"].isSet;
        var lr = cr ? Ii(cr) : ar;
        var dr = lr;
        var ur = 1, hr = 2, fr = 4;
        var gr = "[object Arguments]", mr = "[object Array]", pr = "[object Boolean]", br = "[object Date]",
            wr = "[object Error]", kr = "[object Function]", _r = "[object GeneratorFunction]", vr = "[object Map]",
            yr = "[object Number]", xr = "[object Object]", Cr = "[object RegExp]", Ar = "[object Set]",
            Tr = "[object String]", Pr = "[object Symbol]", Sr = "[object WeakMap]";
        var Er = "[object ArrayBuffer]", Rr = "[object DataView]", Or = "[object Float32Array]",
            Ir = "[object Float64Array]", Vr = "[object Int8Array]", Nr = "[object Int16Array]",
            Mr = "[object Int32Array]", Br = "[object Uint8Array]", zr = "[object Uint8ClampedArray]",
            Lr = "[object Uint16Array]", Fr = "[object Uint32Array]";
        var Dr = {};
        Dr[gr] = Dr[mr] = Dr[Er] = Dr[Rr] = Dr[pr] = Dr[br] = Dr[Or] = Dr[Ir] = Dr[Vr] = Dr[Nr] = Dr[Mr] = Dr[vr] = Dr[yr] = Dr[xr] = Dr[Cr] = Dr[Ar] = Dr[Tr] = Dr[Pr] = Dr[Br] = Dr[zr] = Dr[Lr] = Dr[Fr] = true;
        Dr[wr] = Dr[kr] = Dr[Sr] = false;

        function jr(t, e, i, n, o, r) {
            var s, a = e & ur, c = e & hr, l = e & fr;
            if (i) {
                s = o ? i(t, n, o, r) : i(t)
            }
            if (s !== undefined) {
                return s
            }
            if (!ct(t)) {
                return t
            }
            var d = Je(t);
            if (d) {
                s = uo(t);
                if (!a) {
                    return mn(t, s)
                }
            } else {
                var u = so(t), h = u == kr || u == _r;
                if (Object(Ye["a"])(t)) {
                    return Object(fn["a"])(t, a)
                }
                if (u == xr || u == gr || h && !o) {
                    s = c || h ? {} : Xo(t);
                    if (!a) {
                        return c ? Vn(t, hn(s, t)) : Tn(t, en(s, t))
                    }
                } else {
                    if (!Dr[u]) {
                        return o ? t : {}
                    }
                    s = Go(t, u, a)
                }
            }
            r || (r = new Ae);
            var f = r.get(t);
            if (f) {
                return f
            }
            r.set(t, s);
            if (dr(t)) {
                t.forEach((function (n) {
                    s.add(jr(n, e, i, n, t, r))
                }))
            } else if (or(t)) {
                t.forEach((function (n, o) {
                    s.set(o, jr(n, e, i, o, t, r))
                }))
            }
            var g = l ? c ? Fn : zn : c ? keysIn : Zi;
            var m = d ? undefined : g(t);
            Pe(m || t, (function (n, o) {
                if (m) {
                    o = n;
                    n = t[o]
                }
                Me(s, o, jr(n, e, i, o, t, r))
            }));
            return s
        }

        var Hr = jr;
        var Wr = 1, qr = 4;

        function Ur(t, e) {
            e = typeof e == "function" ? e : undefined;
            return Hr(t, Wr | qr, e)
        }

        var $r = Ur;

        function Gr(t) {
            return T(t) && t.nodeType === 1 && !N(t)
        }

        var Kr = Gr;

        class Jr {
            constructor(t, e) {
                this._config = {};
                if (e) {
                    this.define(Yr(e))
                }
                if (t) {
                    this._setObjectToTarget(this._config, t)
                }
            }

            set(t, e) {
                this._setToTarget(this._config, t, e)
            }

            define(t, e) {
                const i = true;
                this._setToTarget(this._config, t, e, i)
            }

            get(t) {
                return this._getFromSource(this._config, t)
            }

            * names() {
                for (const t of Object.keys(this._config)) {
                    yield t
                }
            }

            _setToTarget(t, e, i, n = false) {
                if (N(e)) {
                    this._setObjectToTarget(t, e, n);
                    return
                }
                const o = e.split(".");
                e = o.pop();
                for (const e of o) {
                    if (!N(t[e])) {
                        t[e] = {}
                    }
                    t = t[e]
                }
                if (N(i)) {
                    if (!N(t[e])) {
                        t[e] = {}
                    }
                    t = t[e];
                    this._setObjectToTarget(t, i, n);
                    return
                }
                if (n && typeof t[e] != "undefined") {
                    return
                }
                t[e] = i
            }

            _getFromSource(t, e) {
                const i = e.split(".");
                e = i.pop();
                for (const e of i) {
                    if (!N(t[e])) {
                        t = null;
                        break
                    }
                    t = t[e]
                }
                return t ? Yr(t[e]) : undefined
            }

            _setObjectToTarget(t, e, i) {
                Object.keys(e).forEach(n => {
                    this._setToTarget(t, n, e[n], i)
                })
            }
        }

        function Yr(t) {
            return $r(t, Qr)
        }

        function Qr(t) {
            return Kr(t) ? t : undefined
        }

        function Xr() {
            return function t() {
                t.called = true
            }
        }

        var Zr = Xr;

        class ts {
            constructor(t, e) {
                this.source = t;
                this.name = e;
                this.path = [];
                this.stop = Zr();
                this.off = Zr()
            }
        }

        const es = new Array(256).fill().map((t, e) => ("0" + e.toString(16)).slice(-2));

        function is() {
            const t = Math.random() * 4294967296 >>> 0;
            const e = Math.random() * 4294967296 >>> 0;
            const i = Math.random() * 4294967296 >>> 0;
            const n = Math.random() * 4294967296 >>> 0;
            return "e" + es[t >> 0 & 255] + es[t >> 8 & 255] + es[t >> 16 & 255] + es[t >> 24 & 255] + es[e >> 0 & 255] + es[e >> 8 & 255] + es[e >> 16 & 255] + es[e >> 24 & 255] + es[i >> 0 & 255] + es[i >> 8 & 255] + es[i >> 16 & 255] + es[i >> 24 & 255] + es[n >> 0 & 255] + es[n >> 8 & 255] + es[n >> 16 & 255] + es[n >> 24 & 255]
        }

        const ns = {
            get(t) {
                if (typeof t != "number") {
                    return this[t] || this.normal
                } else {
                    return t
                }
            }, highest: 1e5, high: 1e3, normal: 0, low: -1e3, lowest: -1e5
        };
        var os = ns;
        var rs = i(6);
        var ss = i(0);
        const as = Symbol("listeningTo");
        const cs = Symbol("emitterId");
        const ls = {
            on(t, e, i = {}) {
                this.listenTo(this, t, e, i)
            }, once(t, e, i) {
                let n = false;
                const o = function (t, ...i) {
                    if (!n) {
                        n = true;
                        t.off();
                        e.call(this, t, ...i)
                    }
                };
                this.listenTo(this, t, o, i)
            }, off(t, e) {
                this.stopListening(this, t, e)
            }, listenTo(t, e, i, n = {}) {
                let o, r;
                if (!this[as]) {
                    this[as] = {}
                }
                const s = this[as];
                if (!fs(t)) {
                    hs(t)
                }
                const a = fs(t);
                if (!(o = s[a])) {
                    o = s[a] = {emitter: t, callbacks: {}}
                }
                if (!(r = o.callbacks[e])) {
                    r = o.callbacks[e] = []
                }
                r.push(i);
                ps(t, e);
                const c = bs(t, e);
                const l = os.get(n.priority);
                const d = {callback: i, priority: l};
                for (const t of c) {
                    let e = false;
                    for (let i = 0; i < t.length; i++) {
                        if (t[i].priority < l) {
                            t.splice(i, 0, d);
                            e = true;
                            break
                        }
                    }
                    if (!e) {
                        t.push(d)
                    }
                }
            }, stopListening(t, e, i) {
                const n = this[as];
                let o = t && fs(t);
                const r = n && o && n[o];
                const s = r && e && r.callbacks[e];
                if (!n || t && !r || e && !s) {
                    return
                }
                if (i) {
                    _s(t, e, i)
                } else if (s) {
                    while (i = s.pop()) {
                        _s(t, e, i)
                    }
                    delete r.callbacks[e]
                } else if (r) {
                    for (e in r.callbacks) {
                        this.stopListening(t, e)
                    }
                    delete n[o]
                } else {
                    for (o in n) {
                        this.stopListening(n[o].emitter)
                    }
                    delete this[as]
                }
            }, fire(t, ...e) {
                try {
                    const i = t instanceof ts ? t : new ts(this, t);
                    const n = i.name;
                    let o = ws(this, n);
                    i.path.push(this);
                    if (o) {
                        const t = [i, ...e];
                        o = Array.from(o);
                        for (let e = 0; e < o.length; e++) {
                            o[e].callback.apply(this, t);
                            if (i.off.called) {
                                delete i.off.called;
                                _s(this, n, o[e].callback)
                            }
                            if (i.stop.called) {
                                break
                            }
                        }
                    }
                    if (this._delegations) {
                        const t = this._delegations.get(n);
                        const o = this._delegations.get("*");
                        if (t) {
                            ks(t, i, e)
                        }
                        if (o) {
                            ks(o, i, e)
                        }
                    }
                    return i.return
                } catch (t) {
                    ss["b"].rethrowUnexpectedError(t, this)
                }
            }, delegate(...t) {
                return {
                    to: (e, i) => {
                        if (!this._delegations) {
                            this._delegations = new Map
                        }
                        t.forEach(t => {
                            const n = this._delegations.get(t);
                            if (!n) {
                                this._delegations.set(t, new Map([[e, i]]))
                            } else {
                                n.set(e, i)
                            }
                        })
                    }
                }
            }, stopDelegating(t, e) {
                if (!this._delegations) {
                    return
                }
                if (!t) {
                    this._delegations.clear()
                } else if (!e) {
                    this._delegations.delete(t)
                } else {
                    const i = this._delegations.get(t);
                    if (i) {
                        i.delete(e)
                    }
                }
            }
        };
        var ds = ls;

        function us(t, e) {
            if (t[as] && t[as][e]) {
                return t[as][e].emitter
            }
            return null
        }

        function hs(t, e) {
            if (!t[cs]) {
                t[cs] = e || is()
            }
        }

        function fs(t) {
            return t[cs]
        }

        function gs(t) {
            if (!t._events) {
                Object.defineProperty(t, "_events", {value: {}})
            }
            return t._events
        }

        function ms() {
            return {callbacks: [], childEvents: []}
        }

        function ps(t, e) {
            const i = gs(t);
            if (i[e]) {
                return
            }
            let n = e;
            let o = null;
            const r = [];
            while (n !== "") {
                if (i[n]) {
                    break
                }
                i[n] = ms();
                r.push(i[n]);
                if (o) {
                    i[n].childEvents.push(o)
                }
                o = n;
                n = n.substr(0, n.lastIndexOf(":"))
            }
            if (n !== "") {
                for (const t of r) {
                    t.callbacks = i[n].callbacks.slice()
                }
                i[n].childEvents.push(o)
            }
        }

        function bs(t, e) {
            const i = gs(t)[e];
            if (!i) {
                return []
            }
            let n = [i.callbacks];
            for (let e = 0; e < i.childEvents.length; e++) {
                const o = bs(t, i.childEvents[e]);
                n = n.concat(o)
            }
            return n
        }

        function ws(t, e) {
            let i;
            if (!t._events || !(i = t._events[e]) || !i.callbacks.length) {
                if (e.indexOf(":") > -1) {
                    return ws(t, e.substr(0, e.lastIndexOf(":")))
                } else {
                    return null
                }
            }
            return i.callbacks
        }

        function ks(t, e, i) {
            for (let [n, o] of t) {
                if (!o) {
                    o = e.name
                } else if (typeof o == "function") {
                    o = o(e.name)
                }
                const t = new ts(e.source, o);
                t.path = [...e.path];
                n.fire(t, ...i)
            }
        }

        function _s(t, e, i) {
            const n = bs(t, e);
            for (const t of n) {
                for (let e = 0; e < t.length; e++) {
                    if (t[e].callback == i) {
                        t.splice(e, 1);
                        e--
                    }
                }
            }
        }

        function vs(t, ...e) {
            e.forEach(e => {
                Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e)).forEach(i => {
                    if (i in t.prototype) {
                        return
                    }
                    const n = Object.getOwnPropertyDescriptor(e, i);
                    n.enumerable = false;
                    Object.defineProperty(t.prototype, i, n)
                })
            })
        }

        class ys {
            constructor(t = {}) {
                this._items = [];
                this._itemMap = new Map;
                this._idProperty = t.idProperty || "id";
                this._bindToExternalToInternalMap = new WeakMap;
                this._bindToInternalToExternalMap = new WeakMap;
                this._skippedIndexesFromExternal = []
            }

            get length() {
                return this._items.length
            }

            get first() {
                return this._items[0] || null
            }

            get last() {
                return this._items[this.length - 1] || null
            }

            add(t, e) {
                let i;
                const n = this._idProperty;
                if (n in t) {
                    i = t[n];
                    if (typeof i != "string") {
                        throw new ss["b"]("collection-add-invalid-id", this)
                    }
                    if (this.get(i)) {
                        throw new ss["b"]("collection-add-item-already-exists", this)
                    }
                } else {
                    t[n] = i = is()
                }
                if (e === undefined) {
                    e = this._items.length
                } else if (e > this._items.length || e < 0) {
                    throw new ss["b"]("collection-add-item-invalid-index", this)
                }
                this._items.splice(e, 0, t);
                this._itemMap.set(i, t);
                this.fire("add", t, e);
                return this
            }

            get(t) {
                let e;
                if (typeof t == "string") {
                    e = this._itemMap.get(t)
                } else if (typeof t == "number") {
                    e = this._items[t]
                } else {
                    throw new ss["b"]("collection-get-invalid-arg: Index or id must be given.", this)
                }
                return e || null
            }

            has(t) {
                if (typeof t == "string") {
                    return this._itemMap.has(t)
                } else {
                    const e = this._idProperty;
                    const i = t[e];
                    return this._itemMap.has(i)
                }
            }

            getIndex(t) {
                let e;
                if (typeof t == "string") {
                    e = this._itemMap.get(t)
                } else {
                    e = t
                }
                return this._items.indexOf(e)
            }

            remove(t) {
                let e, i, n;
                let o = false;
                const r = this._idProperty;
                if (typeof t == "string") {
                    i = t;
                    n = this._itemMap.get(i);
                    o = !n;
                    if (n) {
                        e = this._items.indexOf(n)
                    }
                } else if (typeof t == "number") {
                    e = t;
                    n = this._items[e];
                    o = !n;
                    if (n) {
                        i = n[r]
                    }
                } else {
                    n = t;
                    i = n[r];
                    e = this._items.indexOf(n);
                    o = e == -1 || !this._itemMap.get(i)
                }
                if (o) {
                    throw new ss["b"]("collection-remove-404: Item not found.", this)
                }
                this._items.splice(e, 1);
                this._itemMap.delete(i);
                const s = this._bindToInternalToExternalMap.get(n);
                this._bindToInternalToExternalMap.delete(n);
                this._bindToExternalToInternalMap.delete(s);
                this.fire("remove", n, e);
                return n
            }

            map(t, e) {
                return this._items.map(t, e)
            }

            find(t, e) {
                return this._items.find(t, e)
            }

            filter(t, e) {
                return this._items.filter(t, e)
            }

            clear() {
                if (this._bindToCollection) {
                    this.stopListening(this._bindToCollection);
                    this._bindToCollection = null
                }
                while (this.length) {
                    this.remove(0)
                }
            }

            bindTo(t) {
                if (this._bindToCollection) {
                    throw new ss["b"]("collection-bind-to-rebind: The collection cannot be bound more than once.", this)
                }
                this._bindToCollection = t;
                return {
                    as: t => {
                        this._setUpBindToBinding(e => new t(e))
                    }, using: t => {
                        if (typeof t == "function") {
                            this._setUpBindToBinding(e => t(e))
                        } else {
                            this._setUpBindToBinding(e => e[t])
                        }
                    }
                }
            }

            _setUpBindToBinding(t) {
                const e = this._bindToCollection;
                const i = (i, n, o) => {
                    const r = e._bindToCollection == this;
                    const s = e._bindToInternalToExternalMap.get(n);
                    if (r && s) {
                        this._bindToExternalToInternalMap.set(n, s);
                        this._bindToInternalToExternalMap.set(s, n)
                    } else {
                        const i = t(n);
                        if (!i) {
                            this._skippedIndexesFromExternal.push(o);
                            return
                        }
                        let r = o;
                        for (const t of this._skippedIndexesFromExternal) {
                            if (o > t) {
                                r--
                            }
                        }
                        for (const t of e._skippedIndexesFromExternal) {
                            if (r >= t) {
                                r++
                            }
                        }
                        this._bindToExternalToInternalMap.set(n, i);
                        this._bindToInternalToExternalMap.set(i, n);
                        this.add(i, r);
                        for (let t = 0; t < e._skippedIndexesFromExternal.length; t++) {
                            if (r <= e._skippedIndexesFromExternal[t]) {
                                e._skippedIndexesFromExternal[t]++
                            }
                        }
                    }
                };
                for (const t of e) {
                    i(null, t, e.getIndex(t))
                }
                this.listenTo(e, "add", i);
                this.listenTo(e, "remove", (t, e, i) => {
                    const n = this._bindToExternalToInternalMap.get(e);
                    if (n) {
                        this.remove(n)
                    }
                    this._skippedIndexesFromExternal = this._skippedIndexesFromExternal.reduce((t, e) => {
                        if (i < e) {
                            t.push(e - 1)
                        }
                        if (i > e) {
                            t.push(e)
                        }
                        return t
                    }, [])
                })
            }

            [Symbol.iterator]() {
                return this._items[Symbol.iterator]()
            }
        }

        vs(ys, ds);

        class xs {
            constructor(t, e = [], i = []) {
                this._context = t;
                this._plugins = new Map;
                this._availablePlugins = new Map;
                for (const t of e) {
                    if (t.pluginName) {
                        this._availablePlugins.set(t.pluginName, t)
                    }
                }
                this._contextPlugins = new Map;
                for (const [t, e] of i) {
                    this._contextPlugins.set(t, e);
                    this._contextPlugins.set(e, t);
                    if (t.pluginName) {
                        this._availablePlugins.set(t.pluginName, t)
                    }
                }
            }

            * [Symbol.iterator]() {
                for (const t of this._plugins) {
                    if (typeof t[0] == "function") {
                        yield t
                    }
                }
            }

            get(t) {
                const e = this._plugins.get(t);
                if (!e) {
                    const e = "plugincollection-plugin-not-loaded: The requested plugin is not loaded.";
                    let i = t;
                    if (typeof t == "function") {
                        i = t.pluginName || t.name
                    }
                    throw new ss["b"](e, this._context, {plugin: i})
                }
                return e
            }

            has(t) {
                return this._plugins.has(t)
            }

            init(t, e = []) {
                const i = this;
                const n = this._context;
                const o = new Set;
                const r = [];
                const s = g(t);
                const a = g(e);
                const c = f(t);
                if (c) {
                    const t = "plugincollection-plugin-not-found: Some plugins are not available and could not be loaded.";
                    console.error(Object(ss["a"])(t), {plugins: c});
                    return Promise.reject(new ss["b"](t, n, {plugins: c}))
                }
                return Promise.all(s.map(l)).then(() => d(r, "init")).then(() => d(r, "afterInit")).then(() => r);

                function l(t) {
                    if (a.includes(t)) {
                        return
                    }
                    if (i._plugins.has(t) || o.has(t)) {
                        return
                    }
                    return u(t).catch(e => {
                        console.error(Object(ss["a"])("plugincollection-load: It was not possible to load the plugin."), {plugin: t});
                        throw e
                    })
                }

                function d(t, e) {
                    return t.reduce((t, n) => {
                        if (!n[e]) {
                            return t
                        }
                        if (i._contextPlugins.has(n)) {
                            return t
                        }
                        return t.then(n[e].bind(n))
                    }, Promise.resolve())
                }

                function u(t) {
                    return new Promise(s => {
                        o.add(t);
                        if (t.requires) {
                            t.requires.forEach(i => {
                                const o = h(i);
                                if (t.isContextPlugin && !o.isContextPlugin) {
                                    throw new ss["b"]("plugincollection-context-required: Context plugin can not require plugin which is not a context plugin", null, {
                                        plugin: o.name,
                                        requiredBy: t.name
                                    })
                                }
                                if (e.includes(o)) {
                                    throw new ss["b"]("plugincollection-required: Cannot load a plugin because one of its dependencies is listed in" + "the `removePlugins` option.", n, {
                                        plugin: o.name,
                                        requiredBy: t.name
                                    })
                                }
                                l(o)
                            })
                        }
                        const a = i._contextPlugins.get(t) || new t(n);
                        i._add(t, a);
                        r.push(a);
                        s()
                    })
                }

                function h(t) {
                    if (typeof t == "function") {
                        return t
                    }
                    return i._availablePlugins.get(t)
                }

                function f(t) {
                    const e = [];
                    for (const i of t) {
                        if (!h(i)) {
                            e.push(i)
                        }
                    }
                    return e.length ? e : null
                }

                function g(t) {
                    return t.map(t => h(t)).filter(t => !!t)
                }
            }

            destroy() {
                const t = [];
                for (const [, e] of this) {
                    if (typeof e.destroy == "function" && !this._contextPlugins.has(e)) {
                        t.push(e.destroy())
                    }
                }
                return Promise.all(t)
            }

            _add(t, e) {
                this._plugins.set(t, e);
                const i = t.pluginName;
                if (!i) {
                    return
                }
                if (this._plugins.has(i)) {
                    throw new ss["b"]("plugincollection-plugin-name-conflict: Two plugins with the same name were loaded.", null, {
                        pluginName: i,
                        plugin1: this._plugins.get(i).constructor,
                        plugin2: t
                    })
                }
                this._plugins.set(i, e)
            }
        }

        vs(xs, ds);
        if (!window.CKEDITOR_TRANSLATIONS) {
            window.CKEDITOR_TRANSLATIONS = {}
        }

        function Cs(t, e) {
            const i = window.CKEDITOR_TRANSLATIONS[t] || (window.CKEDITOR_TRANSLATIONS[t] = {});
            Object.assign(i, e)
        }

        function As(t, e) {
            const i = Ss();
            if (i === 1) {
                t = Object.keys(window.CKEDITOR_TRANSLATIONS)[0]
            }
            if (i === 0 || !Ps(t, e)) {
                return e.replace(/ \[context: [^\]]+\]$/, "")
            }
            const n = window.CKEDITOR_TRANSLATIONS[t];
            return n[e].replace(/ \[context: [^\]]+\]$/, "")
        }

        function Ts() {
            window.CKEDITOR_TRANSLATIONS = {}
        }

        function Ps(t, e) {
            return t in window.CKEDITOR_TRANSLATIONS && e in window.CKEDITOR_TRANSLATIONS[t]
        }

        function Ss() {
            return Object.keys(window.CKEDITOR_TRANSLATIONS).length
        }

        const Es = ["ar", "fa", "he", "ku", "ug"];

        class Rs {
            constructor(t = {}) {
                this.uiLanguage = t.uiLanguage || "en";
                this.contentLanguage = t.contentLanguage || this.uiLanguage;
                this.uiLanguageDirection = Os(this.uiLanguage);
                this.contentLanguageDirection = Os(this.contentLanguage);
                this.t = (...t) => this._t(...t)
            }

            get language() {
                console.warn("locale-deprecated-language-property: " + "The Locale#language property has been deprecated and will be removed in the near future. " + "Please use #uiLanguage and #contentLanguage properties instead.");
                return this.uiLanguage
            }

            _t(t, e) {
                let i = As(this.uiLanguage, t);
                if (e) {
                    i = i.replace(/%(\d+)/g, (t, i) => i < e.length ? e[i] : t)
                }
                return i
            }
        }

        function Os(t) {
            return Es.includes(t) ? "rtl" : "ltr"
        }

        class Is {
            constructor(t) {
                this.config = new Jr(t, this.constructor.defaultConfig);
                const e = this.constructor.builtinPlugins;
                this.config.define("plugins", e);
                this.plugins = new xs(this, e);
                const i = this.config.get("language") || {};
                this.locale = new Rs({
                    uiLanguage: typeof i === "string" ? i : i.ui,
                    contentLanguage: this.config.get("language.content")
                });
                this.t = this.locale.t;
                this.editors = new ys;
                this._contextOwner = null
            }

            initPlugins() {
                const t = this.config.get("plugins") || [];
                for (const e of t) {
                    if (typeof e != "function") {
                        throw new ss["b"]("context-initplugins-constructor-only: Only a constructor function is allowed as a context plugin.", null, {Plugin: e})
                    }
                    if (e.isContextPlugin !== true) {
                        throw new ss["b"]("context-initplugins-invalid-plugin: Only a plugin marked as a context plugin is allowed to be used with a context.", null, {Plugin: e})
                    }
                }
                return this.plugins.init(t)
            }

            destroy() {
                return Promise.all(Array.from(this.editors, t => t.destroy())).then(() => this.plugins.destroy())
            }

            _addEditor(t, e) {
                if (this._contextOwner) {
                    throw new ss["b"]("context-addEditor-private-context: Cannot add multiple editors to the context which is created by the editor.")
                }
                this.editors.add(t);
                if (e) {
                    this._contextOwner = t
                }
            }

            _removeEditor(t) {
                if (this.editors.has(t)) {
                    this.editors.remove(t)
                }
                if (this._contextOwner === t) {
                    return this.destroy()
                }
                return Promise.resolve()
            }

            _getEditorConfig() {
                const t = {};
                for (const e of this.config.names()) {
                    if (!["plugins", "removePlugins", "extraPlugins"].includes(e)) {
                        t[e] = this.config.get(e)
                    }
                }
                return t
            }

            static create(t) {
                return new Promise(e => {
                    const i = new this(t);
                    e(i.initPlugins().then(() => i))
                })
            }
        }

        function Vs(t, e) {
            const i = Math.min(t.length, e.length);
            for (let n = 0; n < i; n++) {
                if (t[n] != e[n]) {
                    return n
                }
            }
            if (t.length == e.length) {
                return "same"
            } else if (t.length < e.length) {
                return "prefix"
            } else {
                return "extension"
            }
        }

        var Ns = 4;

        function Ms(t) {
            return Hr(t, Ns)
        }

        var Bs = Ms;

        class zs {
            constructor(t) {
                this.document = t;
                this.parent = null
            }

            get index() {
                let t;
                if (!this.parent) {
                    return null
                }
                if ((t = this.parent.getChildIndex(this)) == -1) {
                    throw new ss["b"]("view-node-not-found-in-parent: The node's parent does not contain this node.", this)
                }
                return t
            }

            get nextSibling() {
                const t = this.index;
                return t !== null && this.parent.getChild(t + 1) || null
            }

            get previousSibling() {
                const t = this.index;
                return t !== null && this.parent.getChild(t - 1) || null
            }

            get root() {
                let t = this;
                while (t.parent) {
                    t = t.parent
                }
                return t
            }

            isAttached() {
                return this.root.is("rootElement")
            }

            getPath() {
                const t = [];
                let e = this;
                while (e.parent) {
                    t.unshift(e.index);
                    e = e.parent
                }
                return t
            }

            getAncestors(t = {includeSelf: false, parentFirst: false}) {
                const e = [];
                let i = t.includeSelf ? this : this.parent;
                while (i) {
                    e[t.parentFirst ? "push" : "unshift"](i);
                    i = i.parent
                }
                return e
            }

            getCommonAncestor(t, e = {}) {
                const i = this.getAncestors(e);
                const n = t.getAncestors(e);
                let o = 0;
                while (i[o] == n[o] && i[o]) {
                    o++
                }
                return o === 0 ? null : i[o - 1]
            }

            isBefore(t) {
                if (this == t) {
                    return false
                }
                if (this.root !== t.root) {
                    return false
                }
                const e = this.getPath();
                const i = t.getPath();
                const n = Vs(e, i);
                switch (n) {
                    case"prefix":
                        return true;
                    case"extension":
                        return false;
                    default:
                        return e[n] < i[n]
                }
            }

            isAfter(t) {
                if (this == t) {
                    return false
                }
                if (this.root !== t.root) {
                    return false
                }
                return !this.isBefore(t)
            }

            _remove() {
                this.parent._removeChildren(this.index)
            }

            _fireChange(t, e) {
                this.fire("change:" + t, e);
                if (this.parent) {
                    this.parent._fireChange(t, e)
                }
            }

            toJSON() {
                const t = Bs(this);
                delete t.parent;
                return t
            }

            is(t) {
                return t == "node" || t == "view:node"
            }
        }

        vs(zs, ds);

        class Ls extends zs {
            constructor(t, e) {
                super(t);
                this._textData = e
            }

            is(t) {
                return t == "text" || t == "view:text" || super.is(t)
            }

            get data() {
                return this._textData
            }

            get _data() {
                return this.data
            }

            set _data(t) {
                this._fireChange("text", this);
                this._textData = t
            }

            isSimilar(t) {
                if (!(t instanceof Ls)) {
                    return false
                }
                return this === t || this.data === t.data
            }

            _clone() {
                return new Ls(this.document, this.data)
            }
        }

        class Fs {
            constructor(t, e, i) {
                this.textNode = t;
                if (e < 0 || e > t.data.length) {
                    throw new ss["b"]("view-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.", this)
                }
                if (i < 0 || e + i > t.data.length) {
                    throw new ss["b"]("view-textproxy-wrong-length: Given length value is incorrect.", this)
                }
                this.data = t.data.substring(e, e + i);
                this.offsetInText = e
            }

            get offsetSize() {
                return this.data.length
            }

            get isPartial() {
                return this.data.length !== this.textNode.data.length
            }

            get parent() {
                return this.textNode.parent
            }

            get root() {
                return this.textNode.root
            }

            get document() {
                return this.textNode.document
            }

            is(t) {
                return t == "textProxy" || t == "view:textProxy"
            }

            getAncestors(t = {includeSelf: false, parentFirst: false}) {
                const e = [];
                let i = t.includeSelf ? this.textNode : this.parent;
                while (i !== null) {
                    e[t.parentFirst ? "push" : "unshift"](i);
                    i = i.parent
                }
                return e
            }
        }

        function Ds(t) {
            const e = new Map;
            for (const i in t) {
                e.set(i, t[i])
            }
            return e
        }

        function js(t) {
            return !!(t && t[Symbol.iterator])
        }

        function Hs(t) {
            if (js(t)) {
                return new Map(t)
            } else {
                return Ds(t)
            }
        }

        class Ws {
            constructor(...t) {
                this._patterns = [];
                this.add(...t)
            }

            add(...t) {
                for (let e of t) {
                    if (typeof e == "string" || e instanceof RegExp) {
                        e = {name: e}
                    }
                    if (e.classes && (typeof e.classes == "string" || e.classes instanceof RegExp)) {
                        e.classes = [e.classes]
                    }
                    this._patterns.push(e)
                }
            }

            match(...t) {
                for (const e of t) {
                    for (const t of this._patterns) {
                        const i = qs(e, t);
                        if (i) {
                            return {element: e, pattern: t, match: i}
                        }
                    }
                }
                return null
            }

            matchAll(...t) {
                const e = [];
                for (const i of t) {
                    for (const t of this._patterns) {
                        const n = qs(i, t);
                        if (n) {
                            e.push({element: i, pattern: t, match: n})
                        }
                    }
                }
                return e.length > 0 ? e : null
            }

            getElementName() {
                if (this._patterns.length !== 1) {
                    return null
                }
                const t = this._patterns[0];
                const e = t.name;
                return typeof t != "function" && e && !(e instanceof RegExp) ? e : null
            }
        }

        function qs(t, e) {
            if (typeof e == "function") {
                return e(t)
            }
            const i = {};
            if (e.name) {
                i.name = Us(e.name, t.name);
                if (!i.name) {
                    return null
                }
            }
            if (e.attributes) {
                i.attributes = $s(e.attributes, t);
                if (!i.attributes) {
                    return null
                }
            }
            if (e.classes) {
                i.classes = Gs(e.classes, t);
                if (!i.classes) {
                    return false
                }
            }
            if (e.styles) {
                i.styles = Ks(e.styles, t);
                if (!i.styles) {
                    return false
                }
            }
            return i
        }

        function Us(t, e) {
            if (t instanceof RegExp) {
                return t.test(e)
            }
            return t === e
        }

        function $s(t, e) {
            const i = [];
            for (const n in t) {
                const o = t[n];
                if (e.hasAttribute(n)) {
                    const t = e.getAttribute(n);
                    if (o === true) {
                        i.push(n)
                    } else if (o instanceof RegExp) {
                        if (o.test(t)) {
                            i.push(n)
                        } else {
                            return null
                        }
                    } else if (t === o) {
                        i.push(n)
                    } else {
                        return null
                    }
                } else {
                    return null
                }
            }
            return i
        }

        function Gs(t, e) {
            const i = [];
            for (const n of t) {
                if (n instanceof RegExp) {
                    const t = e.getClassNames();
                    for (const e of t) {
                        if (n.test(e)) {
                            i.push(e)
                        }
                    }
                    if (i.length === 0) {
                        return null
                    }
                } else if (e.hasClass(n)) {
                    i.push(n)
                } else {
                    return null
                }
            }
            return i
        }

        function Ks(t, e) {
            const i = [];
            for (const n in t) {
                const o = t[n];
                if (e.hasStyle(n)) {
                    const t = e.getStyle(n);
                    if (o instanceof RegExp) {
                        if (o.test(t)) {
                            i.push(n)
                        } else {
                            return null
                        }
                    } else if (t === o) {
                        i.push(n)
                    } else {
                        return null
                    }
                } else {
                    return null
                }
            }
            return i
        }

        var Js = "[object Symbol]";

        function Ys(t) {
            return typeof t == "symbol" || T(t) && _(t) == Js
        }

        var Qs = Ys;
        var Xs = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, Zs = /^\w*$/;

        function ta(t, e) {
            if (Je(t)) {
                return false
            }
            var i = typeof t;
            if (i == "number" || i == "symbol" || i == "boolean" || t == null || Qs(t)) {
                return true
            }
            return Zs.test(t) || !Xs.test(t) || e != null && t in Object(e)
        }

        var ea = ta;
        var ia = "Expected a function";

        function na(t, e) {
            if (typeof t != "function" || e != null && typeof e != "function") {
                throw new TypeError(ia)
            }
            var i = function () {
                var n = arguments, o = e ? e.apply(this, n) : n[0], r = i.cache;
                if (r.has(o)) {
                    return r.get(o)
                }
                var s = t.apply(this, n);
                i.cache = r.set(o, s) || r;
                return s
            };
            i.cache = new (na.Cache || _e);
            return i
        }

        na.Cache = _e;
        var oa = na;
        var ra = 500;

        function sa(t) {
            var e = oa(t, (function (t) {
                if (i.size === ra) {
                    i.clear()
                }
                return t
            }));
            var i = e.cache;
            return e
        }

        var aa = sa;
        var ca = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var la = /\\(\\)?/g;
        var da = aa((function (t) {
            var e = [];
            if (t.charCodeAt(0) === 46) {
                e.push("")
            }
            t.replace(ca, (function (t, i, n, o) {
                e.push(n ? o.replace(la, "$1") : i || t)
            }));
            return e
        }));
        var ua = da;

        function ha(t, e) {
            var i = -1, n = t == null ? 0 : t.length, o = Array(n);
            while (++i < n) {
                o[i] = e(t[i], i, t)
            }
            return o
        }

        var fa = ha;
        var ga = 1 / 0;
        var ma = r ? r.prototype : undefined, pa = ma ? ma.toString : undefined;

        function ba(t) {
            if (typeof t == "string") {
                return t
            }
            if (Je(t)) {
                return fa(t, ba) + ""
            }
            if (Qs(t)) {
                return pa ? pa.call(t) : ""
            }
            var e = t + "";
            return e == "0" && 1 / t == -ga ? "-0" : e
        }

        var wa = ba;

        function ka(t) {
            return t == null ? "" : wa(t)
        }

        var _a = ka;

        function va(t, e) {
            if (Je(t)) {
                return t
            }
            return ea(t, e) ? [t] : ua(_a(t))
        }

        var ya = va;

        function xa(t) {
            var e = t == null ? 0 : t.length;
            return e ? t[e - 1] : undefined
        }

        var Ca = xa;
        var Aa = 1 / 0;

        function Ta(t) {
            if (typeof t == "string" || Qs(t)) {
                return t
            }
            var e = t + "";
            return e == "0" && 1 / t == -Aa ? "-0" : e
        }

        var Pa = Ta;

        function Sa(t, e) {
            e = ya(e, t);
            var i = 0, n = e.length;
            while (t != null && i < n) {
                t = t[Pa(e[i++])]
            }
            return i && i == n ? t : undefined
        }

        var Ea = Sa;

        function Ra(t, e, i) {
            var n = -1, o = t.length;
            if (e < 0) {
                e = -e > o ? 0 : o + e
            }
            i = i > o ? o : i;
            if (i < 0) {
                i += o
            }
            o = e > i ? 0 : i - e >>> 0;
            e >>>= 0;
            var r = Array(o);
            while (++n < o) {
                r[n] = t[n + e]
            }
            return r
        }

        var Oa = Ra;

        function Ia(t, e) {
            return e.length < 2 ? t : Ea(t, Oa(e, 0, -1))
        }

        var Va = Ia;

        function Na(t, e) {
            e = ya(e, t);
            t = Va(t, e);
            return t == null || delete t[Pa(Ca(e))]
        }

        var Ma = Na;

        function Ba(t, e) {
            return t == null ? true : Ma(t, e)
        }

        var za = Ba;

        function La(t, e, i) {
            var n = t == null ? undefined : Ea(t, e);
            return n === undefined ? i : n
        }

        var Fa = La;

        function Da(t, e, i) {
            if (i !== undefined && !L(t[e], i) || i === undefined && !(e in t)) {
                Oe(t, e, i)
            }
        }

        var ja = Da;

        function Ha(t) {
            return function (e, i, n) {
                var o = -1, r = Object(e), s = n(e), a = s.length;
                while (a--) {
                    var c = s[t ? a : ++o];
                    if (i(r[c], c, r) === false) {
                        break
                    }
                }
                return e
            }
        }

        var Wa = Ha;
        var qa = Wa();
        var Ua = qa;

        function $a(t) {
            return T(t) && Qi(t)
        }

        var Ga = $a;

        function Ka(t, e) {
            if (e === "constructor" && typeof t[e] === "function") {
                return
            }
            if (e == "__proto__") {
                return
            }
            return t[e]
        }

        var Ja = Ka;

        function Ya(t) {
            return ze(t, dn(t))
        }

        var Qa = Ya;

        function Xa(t, e, i, n, o, r, s) {
            var a = Ja(t, i), c = Ja(e, i), l = s.get(c);
            if (l) {
                ja(t, i, l);
                return
            }
            var d = r ? r(a, c, i + "", t, e, s) : undefined;
            var u = d === undefined;
            if (u) {
                var h = Je(c), f = !h && Object(Ye["a"])(c), g = !h && !f && Bi(c);
                d = c;
                if (h || f || g) {
                    if (Je(a)) {
                        d = a
                    } else if (Ga(a)) {
                        d = mn(a)
                    } else if (f) {
                        u = false;
                        d = Object(fn["a"])(c, true)
                    } else if (g) {
                        u = false;
                        d = To(c, true)
                    } else {
                        d = []
                    }
                } else if (N(c) || Ge(c)) {
                    d = a;
                    if (Ge(a)) {
                        d = Qa(a)
                    } else if (!ct(a) || gt(a)) {
                        d = Xo(c)
                    }
                } else {
                    u = false
                }
            }
            if (u) {
                s.set(c, d);
                o(d, c, n, r, s);
                s["delete"](c)
            }
            ja(t, i, d)
        }

        var Za = Xa;

        function tc(t, e, i, n, o) {
            if (t === e) {
                return
            }
            Ua(e, (function (r, s) {
                o || (o = new Ae);
                if (ct(r)) {
                    Za(t, e, s, i, tc, n, o)
                } else {
                    var a = n ? n(Ja(t, s), r, s + "", t, e, o) : undefined;
                    if (a === undefined) {
                        a = r
                    }
                    ja(t, s, a)
                }
            }), dn)
        }

        var ec = tc;

        function ic(t) {
            return t
        }

        var nc = ic;

        function oc(t, e, i) {
            switch (i.length) {
                case 0:
                    return t.call(e);
                case 1:
                    return t.call(e, i[0]);
                case 2:
                    return t.call(e, i[0], i[1]);
                case 3:
                    return t.call(e, i[0], i[1], i[2])
            }
            return t.apply(e, i)
        }

        var rc = oc;
        var sc = Math.max;

        function ac(t, e, i) {
            e = sc(e === undefined ? t.length - 1 : e, 0);
            return function () {
                var n = arguments, o = -1, r = sc(n.length - e, 0), s = Array(r);
                while (++o < r) {
                    s[o] = n[e + o]
                }
                o = -1;
                var a = Array(e + 1);
                while (++o < e) {
                    a[o] = n[o]
                }
                a[e] = i(s);
                return rc(t, this, a)
            }
        }

        var cc = ac;

        function lc(t) {
            return function () {
                return t
            }
        }

        var dc = lc;
        var uc = !Ee ? nc : function (t, e) {
            return Ee(t, "toString", {configurable: true, enumerable: false, value: dc(e), writable: true})
        };
        var hc = uc;
        var fc = 800, gc = 16;
        var mc = Date.now;

        function pc(t) {
            var e = 0, i = 0;
            return function () {
                var n = mc(), o = gc - (n - i);
                i = n;
                if (o > 0) {
                    if (++e >= fc) {
                        return arguments[0]
                    }
                } else {
                    e = 0
                }
                return t.apply(undefined, arguments)
            }
        }

        var bc = pc;
        var wc = bc(hc);
        var kc = wc;

        function _c(t, e) {
            return kc(cc(t, e, nc), t + "")
        }

        var vc = _c;

        function yc(t, e, i) {
            if (!ct(i)) {
                return false
            }
            var n = typeof e;
            if (n == "number" ? Qi(i) && ti(e, i.length) : n == "string" && e in i) {
                return L(i[e], t)
            }
            return false
        }

        var xc = yc;

        function Cc(t) {
            return vc((function (e, i) {
                var n = -1, o = i.length, r = o > 1 ? i[o - 1] : undefined, s = o > 2 ? i[2] : undefined;
                r = t.length > 3 && typeof r == "function" ? (o--, r) : undefined;
                if (s && xc(i[0], i[1], s)) {
                    r = o < 3 ? undefined : r;
                    o = 1
                }
                e = Object(e);
                while (++n < o) {
                    var a = i[n];
                    if (a) {
                        t(e, a, n, r)
                    }
                }
                return e
            }))
        }

        var Ac = Cc;
        var Tc = Ac((function (t, e, i) {
            ec(t, e, i)
        }));
        var Pc = Tc;

        function Sc(t, e, i, n) {
            if (!ct(t)) {
                return t
            }
            e = ya(e, t);
            var o = -1, r = e.length, s = r - 1, a = t;
            while (a != null && ++o < r) {
                var c = Pa(e[o]), l = i;
                if (o != s) {
                    var d = a[c];
                    l = n ? n(d, c, a) : undefined;
                    if (l === undefined) {
                        l = ct(d) ? d : ti(e[o + 1]) ? [] : {}
                    }
                }
                Me(a, c, l);
                a = a[c]
            }
            return t
        }

        var Ec = Sc;

        function Rc(t, e, i) {
            return t == null ? t : Ec(t, e, i)
        }

        var Oc = Rc;

        class Ic {
            constructor(t) {
                this._styles = {};
                this._styleProcessor = t
            }

            get isEmpty() {
                const t = Object.entries(this._styles);
                const e = Array.from(t);
                return !e.length
            }

            get size() {
                if (this.isEmpty) {
                    return 0
                }
                return this.getStyleNames().length
            }

            setTo(t) {
                this.clear();
                const e = Array.from(Nc(t).entries());
                for (const [t, i] of e) {
                    this._styleProcessor.toNormalizedForm(t, i, this._styles)
                }
            }

            has(t) {
                if (this.isEmpty) {
                    return false
                }
                const e = this._styleProcessor.getReducedForm(t, this._styles);
                const i = e.find(([e]) => e === t);
                return Array.isArray(i)
            }

            set(t, e) {
                if (ct(t)) {
                    for (const [e, i] of Object.entries(t)) {
                        this._styleProcessor.toNormalizedForm(e, i, this._styles)
                    }
                } else {
                    this._styleProcessor.toNormalizedForm(t, e, this._styles)
                }
            }

            remove(t) {
                const e = Mc(t);
                za(this._styles, e);
                delete this._styles[t];
                this._cleanEmptyObjectsOnPath(e)
            }

            getNormalized(t) {
                return this._styleProcessor.getNormalized(t, this._styles)
            }

            toString() {
                if (this.isEmpty) {
                    return ""
                }
                return this._getStylesEntries().map(t => t.join(":")).sort().join(";") + ";"
            }

            getAsString(t) {
                if (this.isEmpty) {
                    return
                }
                if (this._styles[t] && !ct(this._styles[t])) {
                    return this._styles[t]
                }
                const e = this._styleProcessor.getReducedForm(t, this._styles);
                const i = e.find(([e]) => e === t);
                if (Array.isArray(i)) {
                    return i[1]
                }
            }

            getStyleNames() {
                if (this.isEmpty) {
                    return []
                }
                const t = this._getStylesEntries();
                return t.map(([t]) => t)
            }

            clear() {
                this._styles = {}
            }

            _getStylesEntries() {
                const t = [];
                const e = Object.keys(this._styles);
                for (const i of e) {
                    t.push(...this._styleProcessor.getReducedForm(i, this._styles))
                }
                return t
            }

            _cleanEmptyObjectsOnPath(t) {
                const e = t.split(".");
                const i = e.length > 1;
                if (!i) {
                    return
                }
                const n = e.splice(0, e.length - 1).join(".");
                const o = Fa(this._styles, n);
                if (!o) {
                    return
                }
                const r = !Array.from(Object.keys(o)).length;
                if (r) {
                    this.remove(n)
                }
            }
        }

        class Vc {
            constructor() {
                this._normalizers = new Map;
                this._extractors = new Map;
                this._reducers = new Map;
                this._consumables = new Map
            }

            toNormalizedForm(t, e, i) {
                if (ct(e)) {
                    Bc(i, Mc(t), e);
                    return
                }
                if (this._normalizers.has(t)) {
                    const n = this._normalizers.get(t);
                    const {path: o, value: r} = n(e);
                    Bc(i, o, r)
                } else {
                    Bc(i, t, e)
                }
            }

            getNormalized(t, e) {
                if (!t) {
                    return Pc({}, e)
                }
                if (e[t] !== undefined) {
                    return e[t]
                }
                if (this._extractors.has(t)) {
                    const i = this._extractors.get(t);
                    if (typeof i === "string") {
                        return Fa(e, i)
                    }
                    const n = i(t, e);
                    if (n) {
                        return n
                    }
                }
                return Fa(e, Mc(t))
            }

            getReducedForm(t, e) {
                const i = this.getNormalized(t, e);
                if (i === undefined) {
                    return []
                }
                if (this._reducers.has(t)) {
                    const e = this._reducers.get(t);
                    return e(i)
                }
                return [[t, i]]
            }

            getRelatedStyles(t) {
                return this._consumables.get(t) || []
            }

            setNormalizer(t, e) {
                this._normalizers.set(t, e)
            }

            setExtractor(t, e) {
                this._extractors.set(t, e)
            }

            setReducer(t, e) {
                this._reducers.set(t, e)
            }

            setStyleRelation(t, e) {
                this._mapStyleNames(t, e);
                for (const i of e) {
                    this._mapStyleNames(i, [t])
                }
            }

            _mapStyleNames(t, e) {
                if (!this._consumables.has(t)) {
                    this._consumables.set(t, [])
                }
                this._consumables.get(t).push(...e)
            }
        }

        function Nc(t) {
            let e = null;
            let i = 0;
            let n = 0;
            let o = null;
            const r = new Map;
            if (t === "") {
                return r
            }
            if (t.charAt(t.length - 1) != ";") {
                t = t + ";"
            }
            for (let s = 0; s < t.length; s++) {
                const a = t.charAt(s);
                if (e === null) {
                    switch (a) {
                        case":":
                            if (!o) {
                                o = t.substr(i, s - i);
                                n = s + 1
                            }
                            break;
                        case'"':
                        case"'":
                            e = a;
                            break;
                        case";": {
                            const e = t.substr(n, s - n);
                            if (o) {
                                r.set(o.trim(), e.trim())
                            }
                            o = null;
                            i = s + 1;
                            break
                        }
                    }
                } else if (a === e) {
                    e = null
                }
            }
            return r
        }

        function Mc(t) {
            return t.replace("-", ".")
        }

        function Bc(t, e, i) {
            let n = i;
            if (ct(i)) {
                n = Pc({}, Fa(t, e), i)
            }
            Oc(t, e, n)
        }

        class zc extends zs {
            constructor(t, e, i, n) {
                super(t);
                this.name = e;
                this._attrs = Lc(i);
                this._children = [];
                if (n) {
                    this._insertChild(0, n)
                }
                this._classes = new Set;
                if (this._attrs.has("class")) {
                    const t = this._attrs.get("class");
                    Fc(this._classes, t);
                    this._attrs.delete("class")
                }
                this._styles = new Ic(this.document.stylesProcessor);
                if (this._attrs.has("style")) {
                    this._styles.setTo(this._attrs.get("style"));
                    this._attrs.delete("style")
                }
                this._customProperties = new Map
            }

            get childCount() {
                return this._children.length
            }

            get isEmpty() {
                return this._children.length === 0
            }

            is(t, e = null) {
                const i = t.replace(/^view:/, "");
                if (!e) {
                    return i == "element" || i == this.name || super.is(t)
                } else {
                    return i == "element" && e == this.name
                }
            }

            getChild(t) {
                return this._children[t]
            }

            getChildIndex(t) {
                return this._children.indexOf(t)
            }

            getChildren() {
                return this._children[Symbol.iterator]()
            }

            * getAttributeKeys() {
                if (this._classes.size > 0) {
                    yield"class"
                }
                if (!this._styles.isEmpty) {
                    yield"style"
                }
                yield* this._attrs.keys()
            }

            * getAttributes() {
                yield* this._attrs.entries();
                if (this._classes.size > 0) {
                    yield["class", this.getAttribute("class")]
                }
                if (!this._styles.isEmpty) {
                    yield["style", this.getAttribute("style")]
                }
            }

            getAttribute(t) {
                if (t == "class") {
                    if (this._classes.size > 0) {
                        return [...this._classes].join(" ")
                    }
                    return undefined
                }
                if (t == "style") {
                    const t = this._styles.toString();
                    return t == "" ? undefined : t
                }
                return this._attrs.get(t)
            }

            hasAttribute(t) {
                if (t == "class") {
                    return this._classes.size > 0
                }
                if (t == "style") {
                    return !this._styles.isEmpty
                }
                return this._attrs.has(t)
            }

            isSimilar(t) {
                if (!(t instanceof zc)) {
                    return false
                }
                if (this === t) {
                    return true
                }
                if (this.name != t.name) {
                    return false
                }
                if (this._attrs.size !== t._attrs.size || this._classes.size !== t._classes.size || this._styles.size !== t._styles.size) {
                    return false
                }
                for (const [e, i] of this._attrs) {
                    if (!t._attrs.has(e) || t._attrs.get(e) !== i) {
                        return false
                    }
                }
                for (const e of this._classes) {
                    if (!t._classes.has(e)) {
                        return false
                    }
                }
                for (const e of this._styles.getStyleNames()) {
                    if (!t._styles.has(e) || t._styles.getAsString(e) !== this._styles.getAsString(e)) {
                        return false
                    }
                }
                return true
            }

            hasClass(...t) {
                for (const e of t) {
                    if (!this._classes.has(e)) {
                        return false
                    }
                }
                return true
            }

            getClassNames() {
                return this._classes.keys()
            }

            getStyle(t) {
                return this._styles.getAsString(t)
            }

            getNormalizedStyle(t) {
                return this._styles.getNormalized(t)
            }

            getStyleNames() {
                return this._styles.getStyleNames()
            }

            hasStyle(...t) {
                for (const e of t) {
                    if (!this._styles.has(e)) {
                        return false
                    }
                }
                return true
            }

            findAncestor(...t) {
                const e = new Ws(...t);
                let i = this.parent;
                while (i) {
                    if (e.match(i)) {
                        return i
                    }
                    i = i.parent
                }
                return null
            }

            getCustomProperty(t) {
                return this._customProperties.get(t)
            }

            * getCustomProperties() {
                yield* this._customProperties.entries()
            }

            getIdentity() {
                const t = Array.from(this._classes).sort().join(",");
                const e = this._styles.toString();
                const i = Array.from(this._attrs).map(t => `${t[0]}="${t[1]}"`).sort().join(" ");
                return this.name + (t == "" ? "" : ` class="${t}"`) + (!e ? "" : ` style="${e}"`) + (i == "" ? "" : ` ${i}`)
            }

            _clone(t = false) {
                const e = [];
                if (t) {
                    for (const i of this.getChildren()) {
                        e.push(i._clone(t))
                    }
                }
                const i = new this.constructor(this.document, this.name, this._attrs, e);
                i._classes = new Set(this._classes);
                i._styles.set(this._styles.getNormalized());
                i._customProperties = new Map(this._customProperties);
                i.getFillerOffset = this.getFillerOffset;
                return i
            }

            _appendChild(t) {
                return this._insertChild(this.childCount, t)
            }

            _insertChild(t, e) {
                this._fireChange("children", this);
                let i = 0;
                const n = Dc(this.document, e);
                for (const e of n) {
                    if (e.parent !== null) {
                        e._remove()
                    }
                    e.parent = this;
                    e.document = this.document;
                    this._children.splice(t, 0, e);
                    t++;
                    i++
                }
                return i
            }

            _removeChildren(t, e = 1) {
                this._fireChange("children", this);
                for (let i = t; i < t + e; i++) {
                    this._children[i].parent = null
                }
                return this._children.splice(t, e)
            }

            _setAttribute(t, e) {
                e = String(e);
                this._fireChange("attributes", this);
                if (t == "class") {
                    Fc(this._classes, e)
                } else if (t == "style") {
                    this._styles.setTo(e)
                } else {
                    this._attrs.set(t, e)
                }
            }

            _removeAttribute(t) {
                this._fireChange("attributes", this);
                if (t == "class") {
                    if (this._classes.size > 0) {
                        this._classes.clear();
                        return true
                    }
                    return false
                }
                if (t == "style") {
                    if (!this._styles.isEmpty) {
                        this._styles.clear();
                        return true
                    }
                    return false
                }
                return this._attrs.delete(t)
            }

            _addClass(t) {
                this._fireChange("attributes", this);
                t = Array.isArray(t) ? t : [t];
                t.forEach(t => this._classes.add(t))
            }

            _removeClass(t) {
                this._fireChange("attributes", this);
                t = Array.isArray(t) ? t : [t];
                t.forEach(t => this._classes.delete(t))
            }

            _setStyle(t, e) {
                this._fireChange("attributes", this);
                this._styles.set(t, e)
            }

            _removeStyle(t) {
                this._fireChange("attributes", this);
                t = Array.isArray(t) ? t : [t];
                t.forEach(t => this._styles.remove(t))
            }

            _setCustomProperty(t, e) {
                this._customProperties.set(t, e)
            }

            _removeCustomProperty(t) {
                return this._customProperties.delete(t)
            }
        }

        function Lc(t) {
            t = Hs(t);
            for (const [e, i] of t) {
                if (i === null) {
                    t.delete(e)
                } else if (typeof i != "string") {
                    t.set(e, String(i))
                }
            }
            return t
        }

        function Fc(t, e) {
            const i = e.split(/\s+/);
            t.clear();
            i.forEach(e => t.add(e))
        }

        function Dc(t, e) {
            if (typeof e == "string") {
                return [new Ls(t, e)]
            }
            if (!js(e)) {
                e = [e]
            }
            return Array.from(e).map(e => {
                if (typeof e == "string") {
                    return new Ls(t, e)
                }
                if (e instanceof Fs) {
                    return new Ls(t, e.data)
                }
                return e
            })
        }

        class jc extends zc {
            constructor(t, e, i, n) {
                super(t, e, i, n);
                this.getFillerOffset = Hc
            }

            is(t, e = null) {
                const i = t && t.replace(/^view:/, "");
                if (!e) {
                    return i == "containerElement" || super.is(t)
                } else {
                    return i == "containerElement" && e == this.name || super.is(t, e)
                }
            }
        }

        function Hc() {
            const t = [...this.getChildren()];
            const e = t[this.childCount - 1];
            if (e && e.is("element", "br")) {
                return this.childCount
            }
            for (const e of t) {
                if (!e.is("uiElement")) {
                    return null
                }
            }
            return this.childCount
        }

        var Wc = Ac((function (t, e) {
            ze(e, dn(e), t)
        }));
        var qc = Wc;
        const Uc = Symbol("observableProperties");
        const $c = Symbol("boundObservables");
        const Gc = Symbol("boundProperties");
        const Kc = {
            set(t, e) {
                if (ct(t)) {
                    Object.keys(t).forEach(e => {
                        this.set(e, t[e])
                    }, this);
                    return
                }
                Yc(this);
                const i = this[Uc];
                if (t in this && !i.has(t)) {
                    throw new ss["b"]("observable-set-cannot-override: Cannot override an existing property.", this)
                }
                Object.defineProperty(this, t, {
                    enumerable: true, configurable: true, get() {
                        return i.get(t)
                    }, set(e) {
                        const n = i.get(t);
                        let o = this.fire("set:" + t, t, e, n);
                        if (o === undefined) {
                            o = e
                        }
                        if (n !== o || !i.has(t)) {
                            i.set(t, o);
                            this.fire("change:" + t, t, o, n)
                        }
                    }
                });
                this[t] = e
            }, bind(...t) {
                if (!t.length || !tl(t)) {
                    throw new ss["b"]("observable-bind-wrong-properties: All properties must be strings.", this)
                }
                if (new Set(t).size !== t.length) {
                    throw new ss["b"]("observable-bind-duplicate-properties: Properties must be unique.", this)
                }
                Yc(this);
                const e = this[Gc];
                t.forEach(t => {
                    if (e.has(t)) {
                        throw new ss["b"]("observable-bind-rebind: Cannot bind the same property more than once.", this)
                    }
                });
                const i = new Map;
                t.forEach(t => {
                    const n = {property: t, to: []};
                    e.set(t, n);
                    i.set(t, n)
                });
                return {to: Qc, toMany: Xc, _observable: this, _bindProperties: t, _to: [], _bindings: i}
            }, unbind(...t) {
                if (!(Uc in this)) {
                    return
                }
                const e = this[Gc];
                const i = this[$c];
                if (t.length) {
                    if (!tl(t)) {
                        throw new ss["b"]("observable-unbind-wrong-properties: Properties must be strings.", this)
                    }
                    t.forEach(t => {
                        const n = e.get(t);
                        if (!n) {
                            return
                        }
                        let o, r, s, a;
                        n.to.forEach(t => {
                            o = t[0];
                            r = t[1];
                            s = i.get(o);
                            a = s[r];
                            a.delete(n);
                            if (!a.size) {
                                delete s[r]
                            }
                            if (!Object.keys(s).length) {
                                i.delete(o);
                                this.stopListening(o, "change")
                            }
                        });
                        e.delete(t)
                    })
                } else {
                    i.forEach((t, e) => {
                        this.stopListening(e, "change")
                    });
                    i.clear();
                    e.clear()
                }
            }, decorate(t) {
                const e = this[t];
                if (!e) {
                    throw new ss["b"]("observablemixin-cannot-decorate-undefined: Cannot decorate an undefined method.", this, {
                        object: this,
                        methodName: t
                    })
                }
                this.on(t, (t, i) => {
                    t.return = e.apply(this, i)
                });
                this[t] = function (...e) {
                    return this.fire(t, e)
                }
            }
        };
        qc(Kc, ds);
        var Jc = Kc;

        function Yc(t) {
            if (Uc in t) {
                return
            }
            Object.defineProperty(t, Uc, {value: new Map});
            Object.defineProperty(t, $c, {value: new Map});
            Object.defineProperty(t, Gc, {value: new Map})
        }

        function Qc(...t) {
            const e = el(...t);
            const i = Array.from(this._bindings.keys());
            const n = i.length;
            if (!e.callback && e.to.length > 1) {
                throw new ss["b"]("observable-bind-to-no-callback: Binding multiple observables only possible with callback.", this)
            }
            if (n > 1 && e.callback) {
                throw new ss["b"]("observable-bind-to-extra-callback: Cannot bind multiple properties and use a callback in one binding.", this)
            }
            e.to.forEach(t => {
                if (t.properties.length && t.properties.length !== n) {
                    throw new ss["b"]("observable-bind-to-properties-length: The number of properties must match.", this)
                }
                if (!t.properties.length) {
                    t.properties = this._bindProperties
                }
            });
            this._to = e.to;
            if (e.callback) {
                this._bindings.get(i[0]).callback = e.callback
            }
            rl(this._observable, this._to);
            nl(this);
            this._bindProperties.forEach(t => {
                ol(this._observable, t)
            })
        }

        function Xc(t, e, i) {
            if (this._bindings.size > 1) {
                throw new ss["b"]("observable-bind-to-many-not-one-binding: Cannot bind multiple properties with toMany().", this)
            }
            this.to(...Zc(t, e), i)
        }

        function Zc(t, e) {
            const i = t.map(t => [t, e]);
            return Array.prototype.concat.apply([], i)
        }

        function tl(t) {
            return t.every(t => typeof t == "string")
        }

        function el(...t) {
            if (!t.length) {
                throw new ss["b"]("observable-bind-to-parse-error: Invalid argument syntax in `to()`.", null)
            }
            const e = {to: []};
            let i;
            if (typeof t[t.length - 1] == "function") {
                e.callback = t.pop()
            }
            t.forEach(t => {
                if (typeof t == "string") {
                    i.properties.push(t)
                } else if (typeof t == "object") {
                    i = {observable: t, properties: []};
                    e.to.push(i)
                } else {
                    throw new ss["b"]("observable-bind-to-parse-error: Invalid argument syntax in `to()`.", null)
                }
            });
            return e
        }

        function il(t, e, i, n) {
            const o = t[$c];
            const r = o.get(i);
            const s = r || {};
            if (!s[n]) {
                s[n] = new Set
            }
            s[n].add(e);
            if (!r) {
                o.set(i, s)
            }
        }

        function nl(t) {
            let e;
            t._bindings.forEach((i, n) => {
                t._to.forEach(o => {
                    e = o.properties[i.callback ? 0 : t._bindProperties.indexOf(n)];
                    i.to.push([o.observable, e]);
                    il(t._observable, i, o.observable, e)
                })
            })
        }

        function ol(t, e) {
            const i = t[Gc];
            const n = i.get(e);
            let o;
            if (n.callback) {
                o = n.callback.apply(t, n.to.map(t => t[0][t[1]]))
            } else {
                o = n.to[0];
                o = o[0][o[1]]
            }
            if (t.hasOwnProperty(e)) {
                t[e] = o
            } else {
                t.set(e, o)
            }
        }

        function rl(t, e) {
            e.forEach(e => {
                const i = t[$c];
                let n;
                if (!i.get(e.observable)) {
                    t.listenTo(e.observable, "change", (o, r) => {
                        n = i.get(e.observable)[r];
                        if (n) {
                            n.forEach(e => {
                                ol(t, e.property)
                            })
                        }
                    })
                }
            })
        }

        class sl extends jc {
            constructor(t, e, i, n) {
                super(t, e, i, n);
                this.set("isReadOnly", false);
                this.set("isFocused", false);
                this.bind("isReadOnly").to(t);
                this.bind("isFocused").to(t, "isFocused", e => e && t.selection.editableElement == this);
                this.listenTo(t.selection, "change", () => {
                    this.isFocused = t.isFocused && t.selection.editableElement == this
                })
            }

            is(t, e = null) {
                const i = t && t.replace(/^view:/, "");
                if (!e) {
                    return i == "editableElement" || super.is(t)
                } else {
                    return i == "editableElement" && e == this.name || super.is(t, e)
                }
            }

            destroy() {
                this.stopListening()
            }
        }

        vs(sl, Jc);
        const al = Symbol("rootName");

        class cl extends sl {
            constructor(t, e) {
                super(t, e);
                this.rootName = "main"
            }

            is(t, e = null) {
                const i = t.replace(/^view:/, "");
                if (!e) {
                    return i == "rootElement" || super.is(t)
                } else {
                    return i == "rootElement" && e == this.name || super.is(t, e)
                }
            }

            get rootName() {
                return this.getCustomProperty(al)
            }

            set rootName(t) {
                this._setCustomProperty(al, t)
            }

            set _name(t) {
                this.name = t
            }
        }

        class ll {
            constructor(t = {}) {
                if (!t.boundaries && !t.startPosition) {
                    throw new ss["b"]("view-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.", null)
                }
                if (t.direction && t.direction != "forward" && t.direction != "backward") {
                    throw new ss["b"]("view-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.", t.startPosition, {direction: t.direction})
                }
                this.boundaries = t.boundaries || null;
                if (t.startPosition) {
                    this.position = dl._createAt(t.startPosition)
                } else {
                    this.position = dl._createAt(t.boundaries[t.direction == "backward" ? "end" : "start"])
                }
                this.direction = t.direction || "forward";
                this.singleCharacters = !!t.singleCharacters;
                this.shallow = !!t.shallow;
                this.ignoreElementEnd = !!t.ignoreElementEnd;
                this._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;
                this._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null
            }

            [Symbol.iterator]() {
                return this
            }

            skip(t) {
                let e, i, n;
                do {
                    n = this.position;
                    ({done: e, value: i} = this.next())
                } while (!e && t(i));
                if (!e) {
                    this.position = n
                }
            }

            next() {
                if (this.direction == "forward") {
                    return this._next()
                } else {
                    return this._previous()
                }
            }

            _next() {
                let t = this.position.clone();
                const e = this.position;
                const i = t.parent;
                if (i.parent === null && t.offset === i.childCount) {
                    return {done: true}
                }
                if (i === this._boundaryEndParent && t.offset == this.boundaries.end.offset) {
                    return {done: true}
                }
                let n;
                if (i instanceof Ls) {
                    if (t.isAtEnd) {
                        this.position = dl._createAfter(i);
                        return this._next()
                    }
                    n = i.data[t.offset]
                } else {
                    n = i.getChild(t.offset)
                }
                if (n instanceof zc) {
                    if (!this.shallow) {
                        t = new dl(n, 0)
                    } else {
                        t.offset++
                    }
                    this.position = t;
                    return this._formatReturnValue("elementStart", n, e, t, 1)
                } else if (n instanceof Ls) {
                    if (this.singleCharacters) {
                        t = new dl(n, 0);
                        this.position = t;
                        return this._next()
                    } else {
                        let i = n.data.length;
                        let o;
                        if (n == this._boundaryEndParent) {
                            i = this.boundaries.end.offset;
                            o = new Fs(n, 0, i);
                            t = dl._createAfter(o)
                        } else {
                            o = new Fs(n, 0, n.data.length);
                            t.offset++
                        }
                        this.position = t;
                        return this._formatReturnValue("text", o, e, t, i)
                    }
                } else if (typeof n == "string") {
                    let n;
                    if (this.singleCharacters) {
                        n = 1
                    } else {
                        const e = i === this._boundaryEndParent ? this.boundaries.end.offset : i.data.length;
                        n = e - t.offset
                    }
                    const o = new Fs(i, t.offset, n);
                    t.offset += n;
                    this.position = t;
                    return this._formatReturnValue("text", o, e, t, n)
                } else {
                    t = dl._createAfter(i);
                    this.position = t;
                    if (this.ignoreElementEnd) {
                        return this._next()
                    } else {
                        return this._formatReturnValue("elementEnd", i, e, t)
                    }
                }
            }

            _previous() {
                let t = this.position.clone();
                const e = this.position;
                const i = t.parent;
                if (i.parent === null && t.offset === 0) {
                    return {done: true}
                }
                if (i == this._boundaryStartParent && t.offset == this.boundaries.start.offset) {
                    return {done: true}
                }
                let n;
                if (i instanceof Ls) {
                    if (t.isAtStart) {
                        this.position = dl._createBefore(i);
                        return this._previous()
                    }
                    n = i.data[t.offset - 1]
                } else {
                    n = i.getChild(t.offset - 1)
                }
                if (n instanceof zc) {
                    if (!this.shallow) {
                        t = new dl(n, n.childCount);
                        this.position = t;
                        if (this.ignoreElementEnd) {
                            return this._previous()
                        } else {
                            return this._formatReturnValue("elementEnd", n, e, t)
                        }
                    } else {
                        t.offset--;
                        this.position = t;
                        return this._formatReturnValue("elementStart", n, e, t, 1)
                    }
                } else if (n instanceof Ls) {
                    if (this.singleCharacters) {
                        t = new dl(n, n.data.length);
                        this.position = t;
                        return this._previous()
                    } else {
                        let i = n.data.length;
                        let o;
                        if (n == this._boundaryStartParent) {
                            const e = this.boundaries.start.offset;
                            o = new Fs(n, e, n.data.length - e);
                            i = o.data.length;
                            t = dl._createBefore(o)
                        } else {
                            o = new Fs(n, 0, n.data.length);
                            t.offset--
                        }
                        this.position = t;
                        return this._formatReturnValue("text", o, e, t, i)
                    }
                } else if (typeof n == "string") {
                    let n;
                    if (!this.singleCharacters) {
                        const e = i === this._boundaryStartParent ? this.boundaries.start.offset : 0;
                        n = t.offset - e
                    } else {
                        n = 1
                    }
                    t.offset -= n;
                    const o = new Fs(i, t.offset, n);
                    this.position = t;
                    return this._formatReturnValue("text", o, e, t, n)
                } else {
                    t = dl._createBefore(i);
                    this.position = t;
                    return this._formatReturnValue("elementStart", i, e, t, 1)
                }
            }

            _formatReturnValue(t, e, i, n, o) {
                if (e instanceof Fs) {
                    if (e.offsetInText + e.data.length == e.textNode.data.length) {
                        if (this.direction == "forward" && !(this.boundaries && this.boundaries.end.isEqual(this.position))) {
                            n = dl._createAfter(e.textNode);
                            this.position = n
                        } else {
                            i = dl._createAfter(e.textNode)
                        }
                    }
                    if (e.offsetInText === 0) {
                        if (this.direction == "backward" && !(this.boundaries && this.boundaries.start.isEqual(this.position))) {
                            n = dl._createBefore(e.textNode);
                            this.position = n
                        } else {
                            i = dl._createBefore(e.textNode)
                        }
                    }
                }
                return {done: false, value: {type: t, item: e, previousPosition: i, nextPosition: n, length: o}}
            }
        }

        class dl {
            constructor(t, e) {
                this.parent = t;
                this.offset = e
            }

            get nodeAfter() {
                if (this.parent.is("text")) {
                    return null
                }
                return this.parent.getChild(this.offset) || null
            }

            get nodeBefore() {
                if (this.parent.is("text")) {
                    return null
                }
                return this.parent.getChild(this.offset - 1) || null
            }

            get isAtStart() {
                return this.offset === 0
            }

            get isAtEnd() {
                const t = this.parent.is("text") ? this.parent.data.length : this.parent.childCount;
                return this.offset === t
            }

            get root() {
                return this.parent.root
            }

            get editableElement() {
                let t = this.parent;
                while (!(t instanceof sl)) {
                    if (t.parent) {
                        t = t.parent
                    } else {
                        return null
                    }
                }
                return t
            }

            getShiftedBy(t) {
                const e = dl._createAt(this);
                const i = e.offset + t;
                e.offset = i < 0 ? 0 : i;
                return e
            }

            getLastMatchingPosition(t, e = {}) {
                e.startPosition = this;
                const i = new ll(e);
                i.skip(t);
                return i.position
            }

            getAncestors() {
                if (this.parent.is("documentFragment")) {
                    return [this.parent]
                } else {
                    return this.parent.getAncestors({includeSelf: true})
                }
            }

            getCommonAncestor(t) {
                const e = this.getAncestors();
                const i = t.getAncestors();
                let n = 0;
                while (e[n] == i[n] && e[n]) {
                    n++
                }
                return n === 0 ? null : e[n - 1]
            }

            is(t) {
                return t == "position" || t == "view:position"
            }

            isEqual(t) {
                return this.parent == t.parent && this.offset == t.offset
            }

            isBefore(t) {
                return this.compareWith(t) == "before"
            }

            isAfter(t) {
                return this.compareWith(t) == "after"
            }

            compareWith(t) {
                if (this.root !== t.root) {
                    return "different"
                }
                if (this.isEqual(t)) {
                    return "same"
                }
                const e = this.parent.is("node") ? this.parent.getPath() : [];
                const i = t.parent.is("node") ? t.parent.getPath() : [];
                e.push(this.offset);
                i.push(t.offset);
                const n = Vs(e, i);
                switch (n) {
                    case"prefix":
                        return "before";
                    case"extension":
                        return "after";
                    default:
                        return e[n] < i[n] ? "before" : "after"
                }
            }

            getWalker(t = {}) {
                t.startPosition = this;
                return new ll(t)
            }

            clone() {
                return new dl(this.parent, this.offset)
            }

            static _createAt(t, e) {
                if (t instanceof dl) {
                    return new this(t.parent, t.offset)
                } else {
                    const i = t;
                    if (e == "end") {
                        e = i.is("text") ? i.data.length : i.childCount
                    } else if (e == "before") {
                        return this._createBefore(i)
                    } else if (e == "after") {
                        return this._createAfter(i)
                    } else if (e !== 0 && !e) {
                        throw new ss["b"]("view-createPositionAt-offset-required: " + "View#createPositionAt() requires the offset when the first parameter is a view item.", i)
                    }
                    return new dl(i, e)
                }
            }

            static _createAfter(t) {
                if (t.is("textProxy")) {
                    return new dl(t.textNode, t.offsetInText + t.data.length)
                }
                if (!t.parent) {
                    throw new ss["b"]("view-position-after-root: You can not make position after root.", t, {root: t})
                }
                return new dl(t.parent, t.index + 1)
            }

            static _createBefore(t) {
                if (t.is("textProxy")) {
                    return new dl(t.textNode, t.offsetInText)
                }
                if (!t.parent) {
                    throw new ss["b"]("view-position-before-root: You can not make position before root.", t, {root: t})
                }
                return new dl(t.parent, t.index)
            }
        }

        class ul {
            constructor(t, e = null) {
                this.start = t.clone();
                this.end = e ? e.clone() : t.clone()
            }

            * [Symbol.iterator]() {
                yield* new ll({boundaries: this, ignoreElementEnd: true})
            }

            get isCollapsed() {
                return this.start.isEqual(this.end)
            }

            get isFlat() {
                return this.start.parent === this.end.parent
            }

            get root() {
                return this.start.root
            }

            getEnlarged() {
                let t = this.start.getLastMatchingPosition(hl, {direction: "backward"});
                let e = this.end.getLastMatchingPosition(hl);
                if (t.parent.is("text") && t.isAtStart) {
                    t = dl._createBefore(t.parent)
                }
                if (e.parent.is("text") && e.isAtEnd) {
                    e = dl._createAfter(e.parent)
                }
                return new ul(t, e)
            }

            getTrimmed() {
                let t = this.start.getLastMatchingPosition(hl);
                if (t.isAfter(this.end) || t.isEqual(this.end)) {
                    return new ul(t, t)
                }
                let e = this.end.getLastMatchingPosition(hl, {direction: "backward"});
                const i = t.nodeAfter;
                const n = e.nodeBefore;
                if (i && i.is("text")) {
                    t = new dl(i, 0)
                }
                if (n && n.is("text")) {
                    e = new dl(n, n.data.length)
                }
                return new ul(t, e)
            }

            isEqual(t) {
                return this == t || this.start.isEqual(t.start) && this.end.isEqual(t.end)
            }

            containsPosition(t) {
                return t.isAfter(this.start) && t.isBefore(this.end)
            }

            containsRange(t, e = false) {
                if (t.isCollapsed) {
                    e = false
                }
                const i = this.containsPosition(t.start) || e && this.start.isEqual(t.start);
                const n = this.containsPosition(t.end) || e && this.end.isEqual(t.end);
                return i && n
            }

            getDifference(t) {
                const e = [];
                if (this.isIntersecting(t)) {
                    if (this.containsPosition(t.start)) {
                        e.push(new ul(this.start, t.start))
                    }
                    if (this.containsPosition(t.end)) {
                        e.push(new ul(t.end, this.end))
                    }
                } else {
                    e.push(this.clone())
                }
                return e
            }

            getIntersection(t) {
                if (this.isIntersecting(t)) {
                    let e = this.start;
                    let i = this.end;
                    if (this.containsPosition(t.start)) {
                        e = t.start
                    }
                    if (this.containsPosition(t.end)) {
                        i = t.end
                    }
                    return new ul(e, i)
                }
                return null
            }

            getWalker(t = {}) {
                t.boundaries = this;
                return new ll(t)
            }

            getCommonAncestor() {
                return this.start.getCommonAncestor(this.end)
            }

            getContainedElement() {
                if (this.isCollapsed) {
                    return null
                }
                let t = this.start.nodeAfter;
                let e = this.end.nodeBefore;
                if (this.start.parent.is("text") && this.start.isAtEnd && this.start.parent.nextSibling) {
                    t = this.start.parent.nextSibling
                }
                if (this.end.parent.is("text") && this.end.isAtStart && this.end.parent.previousSibling) {
                    e = this.end.parent.previousSibling
                }
                if (t && t.is("element") && t === e) {
                    return t
                }
                return null
            }

            clone() {
                return new ul(this.start, this.end)
            }

            * getItems(t = {}) {
                t.boundaries = this;
                t.ignoreElementEnd = true;
                const e = new ll(t);
                for (const t of e) {
                    yield t.item
                }
            }

            * getPositions(t = {}) {
                t.boundaries = this;
                const e = new ll(t);
                yield e.position;
                for (const t of e) {
                    yield t.nextPosition
                }
            }

            is(t) {
                return t == "range" || t == "view:range"
            }

            isIntersecting(t) {
                return this.start.isBefore(t.end) && this.end.isAfter(t.start)
            }

            static _createFromParentsAndOffsets(t, e, i, n) {
                return new this(new dl(t, e), new dl(i, n))
            }

            static _createFromPositionAndShift(t, e) {
                const i = t;
                const n = t.getShiftedBy(e);
                return e > 0 ? new this(i, n) : new this(n, i)
            }

            static _createIn(t) {
                return this._createFromParentsAndOffsets(t, 0, t, t.childCount)
            }

            static _createOn(t) {
                const e = t.is("textProxy") ? t.offsetSize : 1;
                return this._createFromPositionAndShift(dl._createBefore(t), e)
            }
        }

        function hl(t) {
            if (t.item.is("attributeElement") || t.item.is("uiElement")) {
                return true
            }
            return false
        }

        function fl(t) {
            let e = 0;
            for (const i of t) {
                e++
            }
            return e
        }

        class gl {
            constructor(t = null, e, i) {
                this._ranges = [];
                this._lastRangeBackward = false;
                this._isFake = false;
                this._fakeSelectionLabel = "";
                this.setTo(t, e, i)
            }

            get isFake() {
                return this._isFake
            }

            get fakeSelectionLabel() {
                return this._fakeSelectionLabel
            }

            get anchor() {
                if (!this._ranges.length) {
                    return null
                }
                const t = this._ranges[this._ranges.length - 1];
                const e = this._lastRangeBackward ? t.end : t.start;
                return e.clone()
            }

            get focus() {
                if (!this._ranges.length) {
                    return null
                }
                const t = this._ranges[this._ranges.length - 1];
                const e = this._lastRangeBackward ? t.start : t.end;
                return e.clone()
            }

            get isCollapsed() {
                return this.rangeCount === 1 && this._ranges[0].isCollapsed
            }

            get rangeCount() {
                return this._ranges.length
            }

            get isBackward() {
                return !this.isCollapsed && this._lastRangeBackward
            }

            get editableElement() {
                if (this.anchor) {
                    return this.anchor.editableElement
                }
                return null
            }

            * getRanges() {
                for (const t of this._ranges) {
                    yield t.clone()
                }
            }

            getFirstRange() {
                let t = null;
                for (const e of this._ranges) {
                    if (!t || e.start.isBefore(t.start)) {
                        t = e
                    }
                }
                return t ? t.clone() : null
            }

            getLastRange() {
                let t = null;
                for (const e of this._ranges) {
                    if (!t || e.end.isAfter(t.end)) {
                        t = e
                    }
                }
                return t ? t.clone() : null
            }

            getFirstPosition() {
                const t = this.getFirstRange();
                return t ? t.start.clone() : null
            }

            getLastPosition() {
                const t = this.getLastRange();
                return t ? t.end.clone() : null
            }

            isEqual(t) {
                if (this.isFake != t.isFake) {
                    return false
                }
                if (this.isFake && this.fakeSelectionLabel != t.fakeSelectionLabel) {
                    return false
                }
                if (this.rangeCount != t.rangeCount) {
                    return false
                } else if (this.rangeCount === 0) {
                    return true
                }
                if (!this.anchor.isEqual(t.anchor) || !this.focus.isEqual(t.focus)) {
                    return false
                }
                for (const e of this._ranges) {
                    let i = false;
                    for (const n of t._ranges) {
                        if (e.isEqual(n)) {
                            i = true;
                            break
                        }
                    }
                    if (!i) {
                        return false
                    }
                }
                return true
            }

            isSimilar(t) {
                if (this.isBackward != t.isBackward) {
                    return false
                }
                const e = fl(this.getRanges());
                const i = fl(t.getRanges());
                if (e != i) {
                    return false
                }
                if (e == 0) {
                    return true
                }
                for (let e of this.getRanges()) {
                    e = e.getTrimmed();
                    let i = false;
                    for (let n of t.getRanges()) {
                        n = n.getTrimmed();
                        if (e.start.isEqual(n.start) && e.end.isEqual(n.end)) {
                            i = true;
                            break
                        }
                    }
                    if (!i) {
                        return false
                    }
                }
                return true
            }

            getSelectedElement() {
                if (this.rangeCount !== 1) {
                    return null
                }
                return this.getFirstRange().getContainedElement()
            }

            setTo(t, e, i) {
                if (t === null) {
                    this._setRanges([]);
                    this._setFakeOptions(e)
                } else if (t instanceof gl || t instanceof ml) {
                    this._setRanges(t.getRanges(), t.isBackward);
                    this._setFakeOptions({fake: t.isFake, label: t.fakeSelectionLabel})
                } else if (t instanceof ul) {
                    this._setRanges([t], e && e.backward);
                    this._setFakeOptions(e)
                } else if (t instanceof dl) {
                    this._setRanges([new ul(t)]);
                    this._setFakeOptions(e)
                } else if (t instanceof zs) {
                    const n = !!i && !!i.backward;
                    let o;
                    if (e === undefined) {
                        throw new ss["b"]("view-selection-setTo-required-second-parameter: " + "selection.setTo requires the second parameter when the first parameter is a node.", this)
                    } else if (e == "in") {
                        o = ul._createIn(t)
                    } else if (e == "on") {
                        o = ul._createOn(t)
                    } else {
                        o = new ul(dl._createAt(t, e))
                    }
                    this._setRanges([o], n);
                    this._setFakeOptions(i)
                } else if (js(t)) {
                    this._setRanges(t, e && e.backward);
                    this._setFakeOptions(e)
                } else {
                    throw new ss["b"]("view-selection-setTo-not-selectable: Cannot set selection to given place.", this)
                }
                this.fire("change")
            }

            setFocus(t, e) {
                if (this.anchor === null) {
                    throw new ss["b"]("view-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.", this)
                }
                const i = dl._createAt(t, e);
                if (i.compareWith(this.focus) == "same") {
                    return
                }
                const n = this.anchor;
                this._ranges.pop();
                if (i.compareWith(n) == "before") {
                    this._addRange(new ul(i, n), true)
                } else {
                    this._addRange(new ul(n, i))
                }
                this.fire("change")
            }

            is(t) {
                return t == "selection" || t == "view:selection"
            }

            _setRanges(t, e = false) {
                t = Array.from(t);
                this._ranges = [];
                for (const e of t) {
                    this._addRange(e)
                }
                this._lastRangeBackward = !!e
            }

            _setFakeOptions(t = {}) {
                this._isFake = !!t.fake;
                this._fakeSelectionLabel = t.fake ? t.label || "" : ""
            }

            _addRange(t, e = false) {
                if (!(t instanceof ul)) {
                    throw new ss["b"]("view-selection-add-range-not-range: " + "Selection range set to an object that is not an instance of view.Range", this)
                }
                this._pushRange(t);
                this._lastRangeBackward = !!e
            }

            _pushRange(t) {
                for (const e of this._ranges) {
                    if (t.isIntersecting(e)) {
                        throw new ss["b"]("view-selection-range-intersects: Trying to add a range that intersects with another range from selection.", this, {
                            addedRange: t,
                            intersectingRange: e
                        })
                    }
                }
                this._ranges.push(new ul(t.start, t.end))
            }
        }

        vs(gl, ds);

        class ml {
            constructor(t = null, e, i) {
                this._selection = new gl;
                this._selection.delegate("change").to(this);
                this._selection.setTo(t, e, i)
            }

            get isFake() {
                return this._selection.isFake
            }

            get fakeSelectionLabel() {
                return this._selection.fakeSelectionLabel
            }

            get anchor() {
                return this._selection.anchor
            }

            get focus() {
                return this._selection.focus
            }

            get isCollapsed() {
                return this._selection.isCollapsed
            }

            get rangeCount() {
                return this._selection.rangeCount
            }

            get isBackward() {
                return this._selection.isBackward
            }

            get editableElement() {
                return this._selection.editableElement
            }

            get _ranges() {
                return this._selection._ranges
            }

            * getRanges() {
                yield* this._selection.getRanges()
            }

            getFirstRange() {
                return this._selection.getFirstRange()
            }

            getLastRange() {
                return this._selection.getLastRange()
            }

            getFirstPosition() {
                return this._selection.getFirstPosition()
            }

            getLastPosition() {
                return this._selection.getLastPosition()
            }

            getSelectedElement() {
                return this._selection.getSelectedElement()
            }

            isEqual(t) {
                return this._selection.isEqual(t)
            }

            isSimilar(t) {
                return this._selection.isSimilar(t)
            }

            is(t) {
                return t == "selection" || t == "documentSelection" || t == "view:selection" || t == "view:documentSelection"
            }

            _setTo(t, e, i) {
                this._selection.setTo(t, e, i)
            }

            _setFocus(t, e) {
                this._selection.setFocus(t, e)
            }
        }

        vs(ml, ds);

        class pl {
            constructor(t) {
                this.selection = new ml;
                this.roots = new ys({idProperty: "rootName"});
                this.stylesProcessor = t;
                this.set("isReadOnly", false);
                this.set("isFocused", false);
                this.set("isComposing", false);
                this._postFixers = new Set
            }

            getRoot(t = "main") {
                return this.roots.get(t)
            }

            registerPostFixer(t) {
                this._postFixers.add(t)
            }

            destroy() {
                this.roots.map(t => t.destroy());
                this.stopListening()
            }

            _callPostFixers(t) {
                let e = false;
                do {
                    for (const i of this._postFixers) {
                        e = i(t);
                        if (e) {
                            break
                        }
                    }
                } while (e)
            }
        }

        vs(pl, Jc);
        const bl = 10;

        class wl extends zc {
            constructor(t, e, i, n) {
                super(t, e, i, n);
                this.getFillerOffset = kl;
                this._priority = bl;
                this._id = null;
                this._clonesGroup = null
            }

            get priority() {
                return this._priority
            }

            get id() {
                return this._id
            }

            getElementsWithSameId() {
                if (this.id === null) {
                    throw new ss["b"]("attribute-element-get-elements-with-same-id-no-id: " + "Cannot get elements with the same id for an attribute element without id.", this)
                }
                return new Set(this._clonesGroup)
            }

            is(t, e = null) {
                const i = t && t.replace(/^view:/, "");
                if (!e) {
                    return i == "attributeElement" || super.is(t)
                } else {
                    return i == "attributeElement" && e == this.name || super.is(t, e)
                }
            }

            isSimilar(t) {
                if (this.id !== null || t.id !== null) {
                    return this.id === t.id
                }
                return super.isSimilar(t) && this.priority == t.priority
            }

            _clone(t) {
                const e = super._clone(t);
                e._priority = this._priority;
                e._id = this._id;
                return e
            }
        }

        wl.DEFAULT_PRIORITY = bl;

        function kl() {
            if (_l(this)) {
                return null
            }
            let t = this.parent;
            while (t && t.is("attributeElement")) {
                if (_l(t) > 1) {
                    return null
                }
                t = t.parent
            }
            if (!t || _l(t) > 1) {
                return null
            }
            return this.childCount
        }

        function _l(t) {
            return Array.from(t.getChildren()).filter(t => !t.is("uiElement")).length
        }

        class vl extends zc {
            constructor(t, e, i, n) {
                super(t, e, i, n);
                this.getFillerOffset = yl
            }

            is(t, e = null) {
                const i = t.replace(/^view:/, "");
                if (!e) {
                    return i == "emptyElement" || super.is(t)
                } else {
                    return i == "emptyElement" && e == this.name || super.is(t, e)
                }
            }

            _insertChild(t, e) {
                if (e && (e instanceof zs || Array.from(e).length > 0)) {
                    throw new ss["b"]("view-emptyelement-cannot-add: Cannot add child nodes to EmptyElement instance.", [this, e])
                }
            }
        }

        function yl() {
            return null
        }

        const xl = navigator.userAgent.toLowerCase();
        const Cl = {
            isMac: Tl(xl),
            isEdge: Pl(xl),
            isGecko: Sl(xl),
            isSafari: El(xl),
            isAndroid: Rl(xl),
            features: {isRegExpUnicodePropertySupported: Ol()}
        };
        var Al = Cl;

        function Tl(t) {
            return t.indexOf("macintosh") > -1
        }

        function Pl(t) {
            return !!t.match(/edge\/(\d+.?\d*)/)
        }

        function Sl(t) {
            return !!t.match(/gecko\/\d+/)
        }

        function El(t) {
            return t.indexOf(" applewebkit/") > -1 && t.indexOf("chrome") === -1
        }

        function Rl(t) {
            return t.indexOf("android") > -1
        }

        function Ol() {
            let t = false;
            try {
                t = "ć".search(new RegExp("[\\p{L}]", "u")) === 0
            } catch (t) {
            }
            return t
        }

        const Il = {"⌘": "ctrl", "⇧": "shift", "⌥": "alt"};
        const Vl = {ctrl: "⌘", shift: "⇧", alt: "⌥"};
        const Nl = Ll();

        function Ml(t) {
            let e;
            if (typeof t == "string") {
                e = Nl[t.toLowerCase()];
                if (!e) {
                    throw new ss["b"]("keyboard-unknown-key: Unknown key name.", null, {key: t})
                }
            } else {
                e = t.keyCode + (t.altKey ? Nl.alt : 0) + (t.ctrlKey ? Nl.ctrl : 0) + (t.shiftKey ? Nl.shift : 0)
            }
            return e
        }

        function Bl(t) {
            if (typeof t == "string") {
                t = Fl(t)
            }
            return t.map(t => typeof t == "string" ? Ml(t) : t).reduce((t, e) => e + t, 0)
        }

        function zl(t) {
            if (!Al.isMac) {
                return t
            }
            return Fl(t).map(t => Vl[t.toLowerCase()] || t).reduce((t, e) => {
                if (t.slice(-1) in Il) {
                    return t + e
                } else {
                    return t + "+" + e
                }
            })
        }

        function Ll() {
            const t = {
                arrowleft: 37,
                arrowup: 38,
                arrowright: 39,
                arrowdown: 40,
                backspace: 8,
                delete: 46,
                enter: 13,
                space: 32,
                esc: 27,
                tab: 9,
                ctrl: 1114112,
                cmd: 1114112,
                shift: 2228224,
                alt: 4456448
            };
            for (let e = 65; e <= 90; e++) {
                const i = String.fromCharCode(e);
                t[i.toLowerCase()] = e
            }
            for (let e = 48; e <= 57; e++) {
                t[e - 48] = e
            }
            for (let e = 112; e <= 123; e++) {
                t["f" + (e - 111)] = e
            }
            return t
        }

        function Fl(t) {
            return t.split(/\s*\+\s*/)
        }

        class Dl extends zc {
            constructor(t, e, i, n) {
                super(t, e, i, n);
                this.getFillerOffset = Hl
            }

            is(t, e = null) {
                const i = t.replace(/^view:/, "");
                if (!e) {
                    return i == "uiElement" || super.is(t)
                } else {
                    return i == "uiElement" && e == this.name || super.is(t, e)
                }
            }

            _insertChild(t, e) {
                if (e && (e instanceof zs || Array.from(e).length > 0)) {
                    throw new ss["b"]("view-uielement-cannot-add: Cannot add child nodes to UIElement instance.", this)
                }
            }

            render(t) {
                return this.toDomElement(t)
            }

            toDomElement(t) {
                const e = t.createElement(this.name);
                for (const t of this.getAttributeKeys()) {
                    e.setAttribute(t, this.getAttribute(t))
                }
                return e
            }
        }

        function jl(t) {
            t.document.on("keydown", (e, i) => Wl(e, i, t.domConverter))
        }

        function Hl() {
            return null
        }

        function Wl(t, e, i) {
            if (e.keyCode == Nl.arrowright) {
                const t = e.domTarget.ownerDocument.defaultView.getSelection();
                const n = t.rangeCount == 1 && t.getRangeAt(0).collapsed;
                if (n || e.shiftKey) {
                    const e = t.focusNode;
                    const o = t.focusOffset;
                    const r = i.domPositionToView(e, o);
                    if (r === null) {
                        return
                    }
                    let s = false;
                    const a = r.getLastMatchingPosition(t => {
                        if (t.item.is("uiElement")) {
                            s = true
                        }
                        if (t.item.is("uiElement") || t.item.is("attributeElement")) {
                            return true
                        }
                        return false
                    });
                    if (s) {
                        const e = i.viewPositionToDom(a);
                        if (n) {
                            t.collapse(e.parent, e.offset)
                        } else {
                            t.extend(e.parent, e.offset)
                        }
                    }
                }
            }
        }

        class ql {
            constructor(t, e) {
                this.document = t;
                this._children = [];
                if (e) {
                    this._insertChild(0, e)
                }
            }

            [Symbol.iterator]() {
                return this._children[Symbol.iterator]()
            }

            get childCount() {
                return this._children.length
            }

            get isEmpty() {
                return this.childCount === 0
            }

            get root() {
                return this
            }

            get parent() {
                return null
            }

            is(t) {
                return t == "documentFragment" || t == "view:documentFragment"
            }

            _appendChild(t) {
                return this._insertChild(this.childCount, t)
            }

            getChild(t) {
                return this._children[t]
            }

            getChildIndex(t) {
                return this._children.indexOf(t)
            }

            getChildren() {
                return this._children[Symbol.iterator]()
            }

            _insertChild(t, e) {
                this._fireChange("children", this);
                let i = 0;
                const n = Ul(this.document, e);
                for (const e of n) {
                    if (e.parent !== null) {
                        e._remove()
                    }
                    e.parent = this;
                    this._children.splice(t, 0, e);
                    t++;
                    i++
                }
                return i
            }

            _removeChildren(t, e = 1) {
                this._fireChange("children", this);
                for (let i = t; i < t + e; i++) {
                    this._children[i].parent = null
                }
                return this._children.splice(t, e)
            }

            _fireChange(t, e) {
                this.fire("change:" + t, e)
            }
        }

        vs(ql, ds);

        function Ul(t, e) {
            if (typeof e == "string") {
                return [new Ls(t, e)]
            }
            if (!js(e)) {
                e = [e]
            }
            return Array.from(e).map(e => {
                if (typeof e == "string") {
                    return new Ls(t, e)
                }
                if (e instanceof Fs) {
                    return new Ls(t, e.data)
                }
                return e
            })
        }

        class $l {
            constructor(t) {
                this.document = t;
                this._cloneGroups = new Map
            }

            setSelection(t, e, i) {
                this.document.selection._setTo(t, e, i)
            }

            setSelectionFocus(t, e) {
                this.document.selection._setFocus(t, e)
            }

            createText(t) {
                return new Ls(this.document, t)
            }

            createAttributeElement(t, e, i = {}) {
                const n = new wl(this.document, t, e);
                if (i.priority) {
                    n._priority = i.priority
                }
                if (i.id) {
                    n._id = i.id
                }
                return n
            }

            createContainerElement(t, e) {
                return new jc(this.document, t, e)
            }

            createEditableElement(t, e) {
                const i = new sl(this.document, t, e);
                i._document = this.document;
                return i
            }

            createEmptyElement(t, e) {
                return new vl(this.document, t, e)
            }

            createUIElement(t, e, i) {
                const n = new Dl(this.document, t, e);
                if (i) {
                    n.render = i
                }
                return n
            }

            setAttribute(t, e, i) {
                i._setAttribute(t, e)
            }

            removeAttribute(t, e) {
                e._removeAttribute(t)
            }

            addClass(t, e) {
                e._addClass(t)
            }

            removeClass(t, e) {
                e._removeClass(t)
            }

            setStyle(t, e, i) {
                if (N(t) && i === undefined) {
                    i = e
                }
                i._setStyle(t, e)
            }

            removeStyle(t, e) {
                e._removeStyle(t)
            }

            setCustomProperty(t, e, i) {
                i._setCustomProperty(t, e)
            }

            removeCustomProperty(t, e) {
                return e._removeCustomProperty(t)
            }

            breakAttributes(t) {
                if (t instanceof dl) {
                    return this._breakAttributes(t)
                } else {
                    return this._breakAttributesRange(t)
                }
            }

            breakContainer(t) {
                const e = t.parent;
                if (!e.is("containerElement")) {
                    throw new ss["b"]("view-writer-break-non-container-element: Trying to break an element which is not a container element.", this.document)
                }
                if (!e.parent) {
                    throw new ss["b"]("view-writer-break-root: Trying to break root element.", this.document)
                }
                if (t.isAtStart) {
                    return dl._createBefore(e)
                } else if (!t.isAtEnd) {
                    const i = e._clone(false);
                    this.insert(dl._createAfter(e), i);
                    const n = new ul(t, dl._createAt(e, "end"));
                    const o = new dl(i, 0);
                    this.move(n, o)
                }
                return dl._createAfter(e)
            }

            mergeAttributes(t) {
                const e = t.offset;
                const i = t.parent;
                if (i.is("text")) {
                    return t
                }
                if (i.is("attributeElement") && i.childCount === 0) {
                    const t = i.parent;
                    const e = i.index;
                    i._remove();
                    this._removeFromClonedElementsGroup(i);
                    return this.mergeAttributes(new dl(t, e))
                }
                const n = i.getChild(e - 1);
                const o = i.getChild(e);
                if (!n || !o) {
                    return t
                }
                if (n.is("text") && o.is("text")) {
                    return Xl(n, o)
                } else if (n.is("attributeElement") && o.is("attributeElement") && n.isSimilar(o)) {
                    const t = n.childCount;
                    n._appendChild(o.getChildren());
                    o._remove();
                    this._removeFromClonedElementsGroup(o);
                    return this.mergeAttributes(new dl(n, t))
                }
                return t
            }

            mergeContainers(t) {
                const e = t.nodeBefore;
                const i = t.nodeAfter;
                if (!e || !i || !e.is("containerElement") || !i.is("containerElement")) {
                    throw new ss["b"]("view-writer-merge-containers-invalid-position: " + "Element before and after given position cannot be merged.", this.document)
                }
                const n = e.getChild(e.childCount - 1);
                const o = n instanceof Ls ? dl._createAt(n, "end") : dl._createAt(e, "end");
                this.move(ul._createIn(i), dl._createAt(e, "end"));
                this.remove(ul._createOn(i));
                return o
            }

            insert(t, e) {
                e = js(e) ? [...e] : [e];
                Zl(e, this.document);
                const i = Kl(t);
                if (!i) {
                    throw new ss["b"]("view-writer-invalid-position-container", this.document)
                }
                const n = this._breakAttributes(t, true);
                const o = i._insertChild(n.offset, e);
                for (const t of e) {
                    this._addToClonedElementsGroup(t)
                }
                const r = n.getShiftedBy(o);
                const s = this.mergeAttributes(n);
                if (o === 0) {
                    return new ul(s, s)
                } else {
                    if (!s.isEqual(n)) {
                        r.offset--
                    }
                    const t = this.mergeAttributes(r);
                    return new ul(s, t)
                }
            }

            remove(t) {
                const e = t instanceof ul ? t : ul._createOn(t);
                id(e, this.document);
                if (e.isCollapsed) {
                    return new ql(this.document)
                }
                const {start: i, end: n} = this._breakAttributesRange(e, true);
                const o = i.parent;
                const r = n.offset - i.offset;
                const s = o._removeChildren(i.offset, r);
                for (const t of s) {
                    this._removeFromClonedElementsGroup(t)
                }
                const a = this.mergeAttributes(i);
                e.start = a;
                e.end = a.clone();
                return new ql(this.document, s)
            }

            clear(t, e) {
                id(t, this.document);
                const i = t.getWalker({direction: "backward", ignoreElementEnd: true});
                for (const n of i) {
                    const i = n.item;
                    let o;
                    if (i.is("element") && e.isSimilar(i)) {
                        o = ul._createOn(i)
                    } else if (!n.nextPosition.isAfter(t.start) && i.is("textProxy")) {
                        const t = i.getAncestors().find(t => t.is("element") && e.isSimilar(t));
                        if (t) {
                            o = ul._createIn(t)
                        }
                    }
                    if (o) {
                        if (o.end.isAfter(t.end)) {
                            o.end = t.end
                        }
                        if (o.start.isBefore(t.start)) {
                            o.start = t.start
                        }
                        this.remove(o)
                    }
                }
            }

            move(t, e) {
                let i;
                if (e.isAfter(t.end)) {
                    e = this._breakAttributes(e, true);
                    const n = e.parent;
                    const o = n.childCount;
                    t = this._breakAttributesRange(t, true);
                    i = this.remove(t);
                    e.offset += n.childCount - o
                } else {
                    i = this.remove(t)
                }
                return this.insert(e, i)
            }

            wrap(t, e) {
                if (!(e instanceof wl)) {
                    throw new ss["b"]("view-writer-wrap-invalid-attribute", this.document)
                }
                id(t, this.document);
                if (!t.isCollapsed) {
                    return this._wrapRange(t, e)
                } else {
                    let i = t.start;
                    if (i.parent.is("element") && !Gl(i.parent)) {
                        i = i.getLastMatchingPosition(t => t.item.is("uiElement"))
                    }
                    i = this._wrapPosition(i, e);
                    const n = this.document.selection;
                    if (n.isCollapsed && n.getFirstPosition().isEqual(t.start)) {
                        this.setSelection(i)
                    }
                    return new ul(i)
                }
            }

            unwrap(t, e) {
                if (!(e instanceof wl)) {
                    throw new ss["b"]("view-writer-unwrap-invalid-attribute", this.document)
                }
                id(t, this.document);
                if (t.isCollapsed) {
                    return t
                }
                const {start: i, end: n} = this._breakAttributesRange(t, true);
                const o = i.parent;
                const r = this._unwrapChildren(o, i.offset, n.offset, e);
                const s = this.mergeAttributes(r.start);
                if (!s.isEqual(r.start)) {
                    r.end.offset--
                }
                const a = this.mergeAttributes(r.end);
                return new ul(s, a)
            }

            rename(t, e) {
                const i = new jc(this.document, t, e.getAttributes());
                this.insert(dl._createAfter(e), i);
                this.move(ul._createIn(e), dl._createAt(i, 0));
                this.remove(ul._createOn(e));
                return i
            }

            clearClonedElementsGroup(t) {
                this._cloneGroups.delete(t)
            }

            createPositionAt(t, e) {
                return dl._createAt(t, e)
            }

            createPositionAfter(t) {
                return dl._createAfter(t)
            }

            createPositionBefore(t) {
                return dl._createBefore(t)
            }

            createRange(t, e) {
                return new ul(t, e)
            }

            createRangeOn(t) {
                return ul._createOn(t)
            }

            createRangeIn(t) {
                return ul._createIn(t)
            }

            createSelection(t, e, i) {
                return new gl(t, e, i)
            }

            _wrapChildren(t, e, i, n) {
                let o = e;
                const r = [];
                while (o < i) {
                    const e = t.getChild(o);
                    const i = e.is("text");
                    const s = e.is("attributeElement");
                    const a = e.is("emptyElement");
                    const c = e.is("uiElement");
                    if (s && this._wrapAttributeElement(n, e)) {
                        r.push(new dl(t, o))
                    } else if (i || a || c || s && Jl(n, e)) {
                        const i = n._clone();
                        e._remove();
                        i._appendChild(e);
                        t._insertChild(o, i);
                        this._addToClonedElementsGroup(i);
                        r.push(new dl(t, o))
                    } else if (s) {
                        this._wrapChildren(e, 0, e.childCount, n)
                    }
                    o++
                }
                let s = 0;
                for (const t of r) {
                    t.offset -= s;
                    if (t.offset == e) {
                        continue
                    }
                    const n = this.mergeAttributes(t);
                    if (!n.isEqual(t)) {
                        s++;
                        i--
                    }
                }
                return ul._createFromParentsAndOffsets(t, e, t, i)
            }

            _unwrapChildren(t, e, i, n) {
                let o = e;
                const r = [];
                while (o < i) {
                    const e = t.getChild(o);
                    if (!e.is("attributeElement")) {
                        o++;
                        continue
                    }
                    if (e.isSimilar(n)) {
                        const n = e.getChildren();
                        const s = e.childCount;
                        e._remove();
                        t._insertChild(o, n);
                        this._removeFromClonedElementsGroup(e);
                        r.push(new dl(t, o), new dl(t, o + s));
                        o += s;
                        i += s - 1;
                        continue
                    }
                    if (this._unwrapAttributeElement(n, e)) {
                        r.push(new dl(t, o), new dl(t, o + 1));
                        o++;
                        continue
                    }
                    this._unwrapChildren(e, 0, e.childCount, n);
                    o++
                }
                let s = 0;
                for (const t of r) {
                    t.offset -= s;
                    if (t.offset == e || t.offset == i) {
                        continue
                    }
                    const n = this.mergeAttributes(t);
                    if (!n.isEqual(t)) {
                        s++;
                        i--
                    }
                }
                return ul._createFromParentsAndOffsets(t, e, t, i)
            }

            _wrapRange(t, e) {
                const {start: i, end: n} = this._breakAttributesRange(t, true);
                const o = i.parent;
                const r = this._wrapChildren(o, i.offset, n.offset, e);
                const s = this.mergeAttributes(r.start);
                if (!s.isEqual(r.start)) {
                    r.end.offset--
                }
                const a = this.mergeAttributes(r.end);
                return new ul(s, a)
            }

            _wrapPosition(t, e) {
                if (e.isSimilar(t.parent)) {
                    return Yl(t.clone())
                }
                if (t.parent.is("text")) {
                    t = Ql(t)
                }
                const i = this.createAttributeElement();
                i._priority = Number.POSITIVE_INFINITY;
                i.isSimilar = () => false;
                t.parent._insertChild(t.offset, i);
                const n = new ul(t, t.getShiftedBy(1));
                this.wrap(n, e);
                const o = new dl(i.parent, i.index);
                i._remove();
                const r = o.nodeBefore;
                const s = o.nodeAfter;
                if (r instanceof Ls && s instanceof Ls) {
                    return Xl(r, s)
                }
                return Yl(o)
            }

            _wrapAttributeElement(t, e) {
                if (!nd(t, e)) {
                    return false
                }
                if (t.name !== e.name || t.priority !== e.priority) {
                    return false
                }
                for (const i of t.getAttributeKeys()) {
                    if (i === "class" || i === "style") {
                        continue
                    }
                    if (e.hasAttribute(i) && e.getAttribute(i) !== t.getAttribute(i)) {
                        return false
                    }
                }
                for (const i of t.getStyleNames()) {
                    if (e.hasStyle(i) && e.getStyle(i) !== t.getStyle(i)) {
                        return false
                    }
                }
                for (const i of t.getAttributeKeys()) {
                    if (i === "class" || i === "style") {
                        continue
                    }
                    if (!e.hasAttribute(i)) {
                        this.setAttribute(i, t.getAttribute(i), e)
                    }
                }
                for (const i of t.getStyleNames()) {
                    if (!e.hasStyle(i)) {
                        this.setStyle(i, t.getStyle(i), e)
                    }
                }
                for (const i of t.getClassNames()) {
                    if (!e.hasClass(i)) {
                        this.addClass(i, e)
                    }
                }
                return true
            }

            _unwrapAttributeElement(t, e) {
                if (!nd(t, e)) {
                    return false
                }
                if (t.name !== e.name || t.priority !== e.priority) {
                    return false
                }
                for (const i of t.getAttributeKeys()) {
                    if (i === "class" || i === "style") {
                        continue
                    }
                    if (!e.hasAttribute(i) || e.getAttribute(i) !== t.getAttribute(i)) {
                        return false
                    }
                }
                if (!e.hasClass(...t.getClassNames())) {
                    return false
                }
                for (const i of t.getStyleNames()) {
                    if (!e.hasStyle(i) || e.getStyle(i) !== t.getStyle(i)) {
                        return false
                    }
                }
                for (const i of t.getAttributeKeys()) {
                    if (i === "class" || i === "style") {
                        continue
                    }
                    this.removeAttribute(i, e)
                }
                this.removeClass(Array.from(t.getClassNames()), e);
                this.removeStyle(Array.from(t.getStyleNames()), e);
                return true
            }

            _breakAttributesRange(t, e = false) {
                const i = t.start;
                const n = t.end;
                id(t, this.document);
                if (t.isCollapsed) {
                    const i = this._breakAttributes(t.start, e);
                    return new ul(i, i)
                }
                const o = this._breakAttributes(n, e);
                const r = o.parent.childCount;
                const s = this._breakAttributes(i, e);
                o.offset += o.parent.childCount - r;
                return new ul(s, o)
            }

            _breakAttributes(t, e = false) {
                const i = t.offset;
                const n = t.parent;
                if (t.parent.is("emptyElement")) {
                    throw new ss["b"]("view-writer-cannot-break-empty-element", this.document)
                }
                if (t.parent.is("uiElement")) {
                    throw new ss["b"]("view-writer-cannot-break-ui-element", this.document)
                }
                if (!e && n.is("text") && ed(n.parent)) {
                    return t.clone()
                }
                if (ed(n)) {
                    return t.clone()
                }
                if (n.is("text")) {
                    return this._breakAttributes(Ql(t), e)
                }
                const o = n.childCount;
                if (i == o) {
                    const t = new dl(n.parent, n.index + 1);
                    return this._breakAttributes(t, e)
                } else {
                    if (i === 0) {
                        const t = new dl(n.parent, n.index);
                        return this._breakAttributes(t, e)
                    } else {
                        const t = n.index + 1;
                        const o = n._clone();
                        n.parent._insertChild(t, o);
                        this._addToClonedElementsGroup(o);
                        const r = n.childCount - i;
                        const s = n._removeChildren(i, r);
                        o._appendChild(s);
                        const a = new dl(n.parent, t);
                        return this._breakAttributes(a, e)
                    }
                }
            }

            _addToClonedElementsGroup(t) {
                if (!t.root.is("rootElement")) {
                    return
                }
                if (t.is("element")) {
                    for (const e of t.getChildren()) {
                        this._addToClonedElementsGroup(e)
                    }
                }
                const e = t.id;
                if (!e) {
                    return
                }
                let i = this._cloneGroups.get(e);
                if (!i) {
                    i = new Set;
                    this._cloneGroups.set(e, i)
                }
                i.add(t);
                t._clonesGroup = i
            }

            _removeFromClonedElementsGroup(t) {
                if (t.is("element")) {
                    for (const e of t.getChildren()) {
                        this._removeFromClonedElementsGroup(e)
                    }
                }
                const e = t.id;
                if (!e) {
                    return
                }
                const i = this._cloneGroups.get(e);
                if (!i) {
                    return
                }
                i.delete(t)
            }
        }

        function Gl(t) {
            return Array.from(t.getChildren()).some(t => !t.is("uiElement"))
        }

        function Kl(t) {
            let e = t.parent;
            while (!ed(e)) {
                if (!e) {
                    return undefined
                }
                e = e.parent
            }
            return e
        }

        function Jl(t, e) {
            if (t.priority < e.priority) {
                return true
            } else if (t.priority > e.priority) {
                return false
            }
            return t.getIdentity() < e.getIdentity()
        }

        function Yl(t) {
            const e = t.nodeBefore;
            if (e && e.is("text")) {
                return new dl(e, e.data.length)
            }
            const i = t.nodeAfter;
            if (i && i.is("text")) {
                return new dl(i, 0)
            }
            return t
        }

        function Ql(t) {
            if (t.offset == t.parent.data.length) {
                return new dl(t.parent.parent, t.parent.index + 1)
            }
            if (t.offset === 0) {
                return new dl(t.parent.parent, t.parent.index)
            }
            const e = t.parent.data.slice(t.offset);
            t.parent._data = t.parent.data.slice(0, t.offset);
            t.parent.parent._insertChild(t.parent.index + 1, new Ls(t.root.document, e));
            return new dl(t.parent.parent, t.parent.index + 1)
        }

        function Xl(t, e) {
            const i = t.data.length;
            t._data += e.data;
            e._remove();
            return new dl(t, i)
        }

        function Zl(t, e) {
            for (const i of t) {
                if (!td.some(t => i instanceof t)) {
                    throw new ss["b"]("view-writer-insert-invalid-node", e)
                }
                if (!i.is("text")) {
                    Zl(i.getChildren(), e)
                }
            }
        }

        const td = [Ls, wl, jc, vl, Dl];

        function ed(t) {
            return t && (t.is("containerElement") || t.is("documentFragment"))
        }

        function id(t, e) {
            const i = Kl(t.start);
            const n = Kl(t.end);
            if (!i || !n || i !== n) {
                throw new ss["b"]("view-writer-invalid-range-container", e)
            }
        }

        function nd(t, e) {
            return t.id === null && e.id === null
        }

        function od(t) {
            return Object.prototype.toString.call(t) == "[object Text]"
        }

        const rd = t => t.createTextNode(" ");
        const sd = t => {
            const e = t.createElement("br");
            e.dataset.ckeFiller = true;
            return e
        };
        const ad = 7;
        const cd = (() => {
            let t = "";
            for (let e = 0; e < ad; e++) {
                t += "​"
            }
            return t
        })();

        function ld(t) {
            return od(t) && t.data.substr(0, ad) === cd
        }

        function dd(t) {
            return t.data.length == ad && ld(t)
        }

        function ud(t) {
            if (ld(t)) {
                return t.data.slice(ad)
            } else {
                return t.data
            }
        }

        function hd(t) {
            t.document.on("keydown", fd)
        }

        function fd(t, e) {
            if (e.keyCode == Nl.arrowleft) {
                const t = e.domTarget.ownerDocument.defaultView.getSelection();
                if (t.rangeCount == 1 && t.getRangeAt(0).collapsed) {
                    const e = t.getRangeAt(0).startContainer;
                    const i = t.getRangeAt(0).startOffset;
                    if (ld(e) && i <= ad) {
                        t.collapse(e, 0)
                    }
                }
            }
        }

        function gd(t, e, i, n = false) {
            i = i || function (t, e) {
                return t === e
            };
            if (!Array.isArray(t)) {
                t = Array.from(t)
            }
            if (!Array.isArray(e)) {
                e = Array.from(e)
            }
            const o = md(t, e, i);
            return n ? kd(o, e.length) : wd(e, o)
        }

        function md(t, e, i) {
            const n = pd(t, e, i);
            if (n === -1) {
                return {firstIndex: -1, lastIndexOld: -1, lastIndexNew: -1}
            }
            const o = bd(t, n);
            const r = bd(e, n);
            const s = pd(o, r, i);
            const a = t.length - s;
            const c = e.length - s;
            return {firstIndex: n, lastIndexOld: a, lastIndexNew: c}
        }

        function pd(t, e, i) {
            for (let n = 0; n < Math.max(t.length, e.length); n++) {
                if (t[n] === undefined || e[n] === undefined || !i(t[n], e[n])) {
                    return n
                }
            }
            return -1
        }

        function bd(t, e) {
            return t.slice(e).reverse()
        }

        function wd(t, e) {
            const i = [];
            const {firstIndex: n, lastIndexOld: o, lastIndexNew: r} = e;
            if (r - n > 0) {
                i.push({index: n, type: "insert", values: t.slice(n, r)})
            }
            if (o - n > 0) {
                i.push({index: n + (r - n), type: "delete", howMany: o - n})
            }
            return i
        }

        function kd(t, e) {
            const {firstIndex: i, lastIndexOld: n, lastIndexNew: o} = t;
            if (i === -1) {
                return Array(e).fill("equal")
            }
            let r = [];
            if (i > 0) {
                r = r.concat(Array(i).fill("equal"))
            }
            if (o - i > 0) {
                r = r.concat(Array(o - i).fill("insert"))
            }
            if (n - i > 0) {
                r = r.concat(Array(n - i).fill("delete"))
            }
            if (o < e) {
                r = r.concat(Array(e - o).fill("equal"))
            }
            return r
        }

        function _d(t, e, i) {
            i = i || function (t, e) {
                return t === e
            };
            const n = t.length;
            const o = e.length;
            if (n > 200 || o > 200 || n + o > 300) {
                return _d.fastDiff(t, e, i, true)
            }
            let r, s;
            if (o < n) {
                const i = t;
                t = e;
                e = i;
                r = "delete";
                s = "insert"
            } else {
                r = "insert";
                s = "delete"
            }
            const a = t.length;
            const c = e.length;
            const l = c - a;
            const d = {};
            const u = {};

            function h(n) {
                const o = (u[n - 1] !== undefined ? u[n - 1] : -1) + 1;
                const l = u[n + 1] !== undefined ? u[n + 1] : -1;
                const h = o > l ? -1 : 1;
                if (d[n + h]) {
                    d[n] = d[n + h].slice(0)
                }
                if (!d[n]) {
                    d[n] = []
                }
                d[n].push(o > l ? r : s);
                let f = Math.max(o, l);
                let g = f - n;
                while (g < a && f < c && i(t[g], e[f])) {
                    g++;
                    f++;
                    d[n].push("equal")
                }
                return f
            }

            let f = 0;
            let g;
            do {
                for (g = -f; g < l; g++) {
                    u[g] = h(g)
                }
                for (g = l + f; g > l; g--) {
                    u[g] = h(g)
                }
                u[l] = h(l);
                f++
            } while (u[l] !== c);
            return d[l].slice(1)
        }

        _d.fastDiff = gd;

        function vd(t, e, i) {
            t.insertBefore(i, t.childNodes[e] || null)
        }

        function yd(t) {
            const e = t.parentNode;
            if (e) {
                e.removeChild(t)
            }
        }

        function xd(t) {
            if (t) {
                if (t.defaultView) {
                    return t instanceof t.defaultView.Document
                } else if (t.ownerDocument && t.ownerDocument.defaultView) {
                    return t instanceof t.ownerDocument.defaultView.Node
                }
            }
            return false
        }

        class Cd {
            constructor(t, e) {
                this.domDocuments = new Set;
                this.domConverter = t;
                this.markedAttributes = new Set;
                this.markedChildren = new Set;
                this.markedTexts = new Set;
                this.selection = e;
                this.isFocused = false;
                this._inlineFiller = null;
                this._fakeSelectionContainer = null
            }

            markToSync(t, e) {
                if (t === "text") {
                    if (this.domConverter.mapViewToDom(e.parent)) {
                        this.markedTexts.add(e)
                    }
                } else {
                    if (!this.domConverter.mapViewToDom(e)) {
                        return
                    }
                    if (t === "attributes") {
                        this.markedAttributes.add(e)
                    } else if (t === "children") {
                        this.markedChildren.add(e)
                    } else {
                        throw new ss["b"]("view-renderer-unknown-type: Unknown type passed to Renderer.markToSync.", this)
                    }
                }
            }

            render() {
                let t;
                for (const t of this.markedChildren) {
                    this._updateChildrenMappings(t)
                }
                if (this._inlineFiller && !this._isSelectionInInlineFiller()) {
                    this._removeInlineFiller()
                }
                if (this._inlineFiller) {
                    t = this._getInlineFillerPosition()
                } else if (this._needsInlineFillerAtSelection()) {
                    t = this.selection.getFirstPosition();
                    this.markedChildren.add(t.parent)
                }
                for (const t of this.markedAttributes) {
                    this._updateAttrs(t)
                }
                for (const e of this.markedChildren) {
                    this._updateChildren(e, {inlineFillerPosition: t})
                }
                for (const e of this.markedTexts) {
                    if (!this.markedChildren.has(e.parent) && this.domConverter.mapViewToDom(e.parent)) {
                        this._updateText(e, {inlineFillerPosition: t})
                    }
                }
                if (t) {
                    const e = this.domConverter.viewPositionToDom(t);
                    const i = e.parent.ownerDocument;
                    if (!ld(e.parent)) {
                        this._inlineFiller = Td(i, e.parent, e.offset)
                    } else {
                        this._inlineFiller = e.parent
                    }
                } else {
                    this._inlineFiller = null
                }
                this._updateSelection();
                this._updateFocus();
                this.markedTexts.clear();
                this.markedAttributes.clear();
                this.markedChildren.clear()
            }

            _updateChildrenMappings(t) {
                const e = this.domConverter.mapViewToDom(t);
                if (!e) {
                    return
                }
                const i = this.domConverter.mapViewToDom(t).childNodes;
                const n = Array.from(this.domConverter.viewChildrenToDom(t, e.ownerDocument, {withChildren: false}));
                const o = this._diffNodeLists(i, n);
                const r = this._findReplaceActions(o, i, n);
                if (r.indexOf("replace") !== -1) {
                    const e = {equal: 0, insert: 0, delete: 0};
                    for (const o of r) {
                        if (o === "replace") {
                            const o = e.equal + e.insert;
                            const r = e.equal + e.delete;
                            const s = t.getChild(o);
                            if (s && !s.is("uiElement")) {
                                this._updateElementMappings(s, i[r])
                            }
                            yd(n[o]);
                            e.equal++
                        } else {
                            e[o]++
                        }
                    }
                }
            }

            _updateElementMappings(t, e) {
                this.domConverter.unbindDomElement(e);
                this.domConverter.bindElements(e, t);
                this.markedChildren.add(t);
                this.markedAttributes.add(t)
            }

            _getInlineFillerPosition() {
                const t = this.selection.getFirstPosition();
                if (t.parent.is("text")) {
                    return dl._createBefore(this.selection.getFirstPosition().parent)
                } else {
                    return t
                }
            }

            _isSelectionInInlineFiller() {
                if (this.selection.rangeCount != 1 || !this.selection.isCollapsed) {
                    return false
                }
                const t = this.selection.getFirstPosition();
                const e = this.domConverter.viewPositionToDom(t);
                if (e && od(e.parent) && ld(e.parent)) {
                    return true
                }
                return false
            }

            _removeInlineFiller() {
                const t = this._inlineFiller;
                if (!ld(t)) {
                    throw new ss["b"]("view-renderer-filler-was-lost: The inline filler node was lost.", this)
                }
                if (dd(t)) {
                    t.parentNode.removeChild(t)
                } else {
                    t.data = t.data.substr(ad)
                }
                this._inlineFiller = null
            }

            _needsInlineFillerAtSelection() {
                if (this.selection.rangeCount != 1 || !this.selection.isCollapsed) {
                    return false
                }
                const t = this.selection.getFirstPosition();
                const e = t.parent;
                const i = t.offset;
                if (!this.domConverter.mapViewToDom(e.root)) {
                    return false
                }
                if (!e.is("element")) {
                    return false
                }
                if (!Ad(e)) {
                    return false
                }
                if (i === e.getFillerOffset()) {
                    return false
                }
                const n = t.nodeBefore;
                const o = t.nodeAfter;
                if (n instanceof Ls || o instanceof Ls) {
                    return false
                }
                return true
            }

            _updateText(t, e) {
                const i = this.domConverter.findCorrespondingDomText(t);
                const n = this.domConverter.viewToDom(t, i.ownerDocument);
                const o = i.data;
                let r = n.data;
                const s = e.inlineFillerPosition;
                if (s && s.parent == t.parent && s.offset == t.index) {
                    r = cd + r
                }
                if (o != r) {
                    const t = gd(o, r);
                    for (const e of t) {
                        if (e.type === "insert") {
                            i.insertData(e.index, e.values.join(""))
                        } else {
                            i.deleteData(e.index, e.howMany)
                        }
                    }
                }
            }

            _updateAttrs(t) {
                const e = this.domConverter.mapViewToDom(t);
                if (!e) {
                    return
                }
                const i = Array.from(e.attributes).map(t => t.name);
                const n = t.getAttributeKeys();
                for (const i of n) {
                    e.setAttribute(i, t.getAttribute(i))
                }
                for (const n of i) {
                    if (!t.hasAttribute(n)) {
                        e.removeAttribute(n)
                    }
                }
            }

            _updateChildren(t, e) {
                const i = this.domConverter.mapViewToDom(t);
                if (!i) {
                    return
                }
                const n = e.inlineFillerPosition;
                const o = this.domConverter.mapViewToDom(t).childNodes;
                const r = Array.from(this.domConverter.viewChildrenToDom(t, i.ownerDocument, {
                    bind: true,
                    inlineFillerPosition: n
                }));
                if (n && n.parent === t) {
                    Td(i.ownerDocument, r, n.offset)
                }
                const s = this._diffNodeLists(o, r);
                let a = 0;
                const c = new Set;
                for (const t of s) {
                    if (t === "delete") {
                        c.add(o[a]);
                        yd(o[a])
                    } else if (t === "equal") {
                        a++
                    }
                }
                a = 0;
                for (const t of s) {
                    if (t === "insert") {
                        vd(i, a, r[a]);
                        a++
                    } else if (t === "equal") {
                        this._markDescendantTextToSync(this.domConverter.domToView(r[a]));
                        a++
                    }
                }
                for (const t of c) {
                    if (!t.parentNode) {
                        this.domConverter.unbindDomElement(t)
                    }
                }
            }

            _diffNodeLists(t, e) {
                t = Rd(t, this._fakeSelectionContainer);
                return _d(t, e, Sd.bind(null, this.domConverter))
            }

            _findReplaceActions(t, e, i) {
                if (t.indexOf("insert") === -1 || t.indexOf("delete") === -1) {
                    return t
                }
                let n = [];
                let o = [];
                let r = [];
                const s = {equal: 0, insert: 0, delete: 0};
                for (const a of t) {
                    if (a === "insert") {
                        r.push(i[s.equal + s.insert])
                    } else if (a === "delete") {
                        o.push(e[s.equal + s.delete])
                    } else {
                        n = n.concat(_d(o, r, Pd).map(t => t === "equal" ? "replace" : t));
                        n.push("equal");
                        o = [];
                        r = []
                    }
                    s[a]++
                }
                return n.concat(_d(o, r, Pd).map(t => t === "equal" ? "replace" : t))
            }

            _markDescendantTextToSync(t) {
                if (!t) {
                    return
                }
                if (t.is("text")) {
                    this.markedTexts.add(t)
                } else if (t.is("element")) {
                    for (const e of t.getChildren()) {
                        this._markDescendantTextToSync(e)
                    }
                }
            }

            _updateSelection() {
                if (this.selection.rangeCount === 0) {
                    this._removeDomSelection();
                    this._removeFakeSelection();
                    return
                }
                const t = this.domConverter.mapViewToDom(this.selection.editableElement);
                if (!this.isFocused || !t) {
                    return
                }
                if (this.selection.isFake) {
                    this._updateFakeSelection(t)
                } else {
                    this._removeFakeSelection();
                    this._updateDomSelection(t)
                }
            }

            _updateFakeSelection(t) {
                const e = t.ownerDocument;
                if (!this._fakeSelectionContainer) {
                    this._fakeSelectionContainer = Od(e)
                }
                const i = this._fakeSelectionContainer;
                this.domConverter.bindFakeSelection(i, this.selection);
                if (!this._fakeSelectionNeedsUpdate(t)) {
                    return
                }
                if (!i.parentElement || i.parentElement != t) {
                    t.appendChild(i)
                }
                i.textContent = this.selection.fakeSelectionLabel || " ";
                const n = e.getSelection();
                const o = e.createRange();
                n.removeAllRanges();
                o.selectNodeContents(i);
                n.addRange(o)
            }

            _updateDomSelection(t) {
                const e = t.ownerDocument.defaultView.getSelection();
                if (!this._domSelectionNeedsUpdate(e)) {
                    return
                }
                const i = this.domConverter.viewPositionToDom(this.selection.anchor);
                const n = this.domConverter.viewPositionToDom(this.selection.focus);
                t.focus();
                e.collapse(i.parent, i.offset);
                e.extend(n.parent, n.offset);
                if (Al.isGecko) {
                    Ed(n, e)
                }
            }

            _domSelectionNeedsUpdate(t) {
                if (!this.domConverter.isDomSelectionCorrect(t)) {
                    return true
                }
                const e = t && this.domConverter.domSelectionToView(t);
                if (e && this.selection.isEqual(e)) {
                    return false
                }
                if (!this.selection.isCollapsed && this.selection.isSimilar(e)) {
                    return false
                }
                return true
            }

            _fakeSelectionNeedsUpdate(t) {
                const e = this._fakeSelectionContainer;
                const i = t.ownerDocument.getSelection();
                if (!e || e.parentElement !== t) {
                    return true
                }
                if (i.anchorNode !== e && !e.contains(i.anchorNode)) {
                    return true
                }
                return e.textContent !== this.selection.fakeSelectionLabel
            }

            _removeDomSelection() {
                for (const t of this.domDocuments) {
                    const e = t.getSelection();
                    if (e.rangeCount) {
                        const e = t.activeElement;
                        const i = this.domConverter.mapDomToView(e);
                        if (e && i) {
                            t.getSelection().removeAllRanges()
                        }
                    }
                }
            }

            _removeFakeSelection() {
                const t = this._fakeSelectionContainer;
                if (t) {
                    t.remove()
                }
            }

            _updateFocus() {
                if (this.isFocused) {
                    const t = this.selection.editableElement;
                    if (t) {
                        this.domConverter.focus(t)
                    }
                }
            }
        }

        vs(Cd, Jc);

        function Ad(t) {
            if (t.getAttribute("contenteditable") == "false") {
                return false
            }
            const e = t.findAncestor(t => t.hasAttribute("contenteditable"));
            return !e || e.getAttribute("contenteditable") == "true"
        }

        function Td(t, e, i) {
            const n = e instanceof Array ? e : e.childNodes;
            const o = n[i];
            if (od(o)) {
                o.data = cd + o.data;
                return o
            } else {
                const o = t.createTextNode(cd);
                if (Array.isArray(e)) {
                    n.splice(i, 0, o)
                } else {
                    vd(e, i, o)
                }
                return o
            }
        }

        function Pd(t, e) {
            return xd(t) && xd(e) && !od(t) && !od(e) && t.tagName.toLowerCase() === e.tagName.toLowerCase()
        }

        function Sd(t, e, i) {
            if (e === i) {
                return true
            } else if (od(e) && od(i)) {
                return e.data === i.data
            } else if (t.isBlockFiller(e) && t.isBlockFiller(i)) {
                return true
            }
            return false
        }

        function Ed(t, e) {
            const i = t.parent;
            if (i.nodeType != Node.ELEMENT_NODE || t.offset != i.childNodes.length - 1) {
                return
            }
            const n = i.childNodes[t.offset];
            if (n && n.tagName == "BR") {
                e.addRange(e.getRangeAt(0))
            }
        }

        function Rd(t, e) {
            const i = Array.from(t);
            if (i.length == 0 || !e) {
                return i
            }
            const n = i[i.length - 1];
            if (n == e) {
                i.pop()
            }
            return i
        }

        function Od(t) {
            const e = t.createElement("div");
            Object.assign(e.style, {position: "fixed", top: 0, left: "-9999px", width: "42px"});
            e.textContent = " ";
            return e
        }

        var Id = {window: window, document: document};

        function Vd(t) {
            let e = 0;
            while (t.previousSibling) {
                t = t.previousSibling;
                e++
            }
            return e
        }

        function Nd(t) {
            const e = [];
            while (t && t.nodeType != Node.DOCUMENT_NODE) {
                e.unshift(t);
                t = t.parentNode
            }
            return e
        }

        function Md(t, e) {
            const i = Nd(t);
            const n = Nd(e);
            let o = 0;
            while (i[o] == n[o] && i[o]) {
                o++
            }
            return o === 0 ? null : i[o - 1]
        }

        const Bd = sd(document);

        class zd {
            constructor(t, e = {}) {
                this.document = t;
                this.blockFillerMode = e.blockFillerMode || "br";
                this.preElements = ["pre"];
                this.blockElements = ["p", "div", "h1", "h2", "h3", "h4", "h5", "h6", "li", "dd", "dt", "figcaption"];
                this._blockFiller = this.blockFillerMode == "br" ? sd : rd;
                this._domToViewMapping = new WeakMap;
                this._viewToDomMapping = new WeakMap;
                this._fakeSelectionMapping = new WeakMap
            }

            bindFakeSelection(t, e) {
                this._fakeSelectionMapping.set(t, new gl(e))
            }

            fakeSelectionToView(t) {
                return this._fakeSelectionMapping.get(t)
            }

            bindElements(t, e) {
                this._domToViewMapping.set(t, e);
                this._viewToDomMapping.set(e, t)
            }

            unbindDomElement(t) {
                const e = this._domToViewMapping.get(t);
                if (e) {
                    this._domToViewMapping.delete(t);
                    this._viewToDomMapping.delete(e);
                    for (const e of Array.from(t.childNodes)) {
                        this.unbindDomElement(e)
                    }
                }
            }

            bindDocumentFragments(t, e) {
                this._domToViewMapping.set(t, e);
                this._viewToDomMapping.set(e, t)
            }

            viewToDom(t, e, i = {}) {
                if (t.is("text")) {
                    const i = this._processDataFromViewText(t);
                    return e.createTextNode(i)
                } else {
                    if (this.mapViewToDom(t)) {
                        return this.mapViewToDom(t)
                    }
                    let n;
                    if (t.is("documentFragment")) {
                        n = e.createDocumentFragment();
                        if (i.bind) {
                            this.bindDocumentFragments(n, t)
                        }
                    } else if (t.is("uiElement")) {
                        n = t.render(e);
                        if (i.bind) {
                            this.bindElements(n, t)
                        }
                        return n
                    } else {
                        if (t.hasAttribute("xmlns")) {
                            n = e.createElementNS(t.getAttribute("xmlns"), t.name)
                        } else {
                            n = e.createElement(t.name)
                        }
                        if (i.bind) {
                            this.bindElements(n, t)
                        }
                        for (const e of t.getAttributeKeys()) {
                            n.setAttribute(e, t.getAttribute(e))
                        }
                    }
                    if (i.withChildren || i.withChildren === undefined) {
                        for (const o of this.viewChildrenToDom(t, e, i)) {
                            n.appendChild(o)
                        }
                    }
                    return n
                }
            }

            * viewChildrenToDom(t, e, i = {}) {
                const n = t.getFillerOffset && t.getFillerOffset();
                let o = 0;
                for (const r of t.getChildren()) {
                    if (n === o) {
                        yield this._blockFiller(e)
                    }
                    yield this.viewToDom(r, e, i);
                    o++
                }
                if (n === o) {
                    yield this._blockFiller(e)
                }
            }

            viewRangeToDom(t) {
                const e = this.viewPositionToDom(t.start);
                const i = this.viewPositionToDom(t.end);
                const n = document.createRange();
                n.setStart(e.parent, e.offset);
                n.setEnd(i.parent, i.offset);
                return n
            }

            viewPositionToDom(t) {
                const e = t.parent;
                if (e.is("text")) {
                    const i = this.findCorrespondingDomText(e);
                    if (!i) {
                        return null
                    }
                    let n = t.offset;
                    if (ld(i)) {
                        n += ad
                    }
                    return {parent: i, offset: n}
                } else {
                    let i, n, o;
                    if (t.offset === 0) {
                        i = this.mapViewToDom(e);
                        if (!i) {
                            return null
                        }
                        o = i.childNodes[0]
                    } else {
                        const e = t.nodeBefore;
                        n = e.is("text") ? this.findCorrespondingDomText(e) : this.mapViewToDom(t.nodeBefore);
                        if (!n) {
                            return null
                        }
                        i = n.parentNode;
                        o = n.nextSibling
                    }
                    if (od(o) && ld(o)) {
                        return {parent: o, offset: ad}
                    }
                    const r = n ? Vd(n) + 1 : 0;
                    return {parent: i, offset: r}
                }
            }

            domToView(t, e = {}) {
                if (this.isBlockFiller(t, this.blockFillerMode)) {
                    return null
                }
                const i = this.getParentUIElement(t, this._domToViewMapping);
                if (i) {
                    return i
                }
                if (od(t)) {
                    if (dd(t)) {
                        return null
                    } else {
                        const e = this._processDataFromDomText(t);
                        return e === "" ? null : new Ls(this.document, e)
                    }
                } else if (this.isComment(t)) {
                    return null
                } else {
                    if (this.mapDomToView(t)) {
                        return this.mapDomToView(t)
                    }
                    let i;
                    if (this.isDocumentFragment(t)) {
                        i = new ql(this.document);
                        if (e.bind) {
                            this.bindDocumentFragments(t, i)
                        }
                    } else {
                        const n = e.keepOriginalCase ? t.tagName : t.tagName.toLowerCase();
                        i = new zc(this.document, n);
                        if (e.bind) {
                            this.bindElements(t, i)
                        }
                        const o = t.attributes;
                        for (let t = o.length - 1; t >= 0; t--) {
                            i._setAttribute(o[t].name, o[t].value)
                        }
                    }
                    if (e.withChildren || e.withChildren === undefined) {
                        for (const n of this.domChildrenToView(t, e)) {
                            i._appendChild(n)
                        }
                    }
                    return i
                }
            }

            * domChildrenToView(t, e = {}) {
                for (let i = 0; i < t.childNodes.length; i++) {
                    const n = t.childNodes[i];
                    const o = this.domToView(n, e);
                    if (o !== null) {
                        yield o
                    }
                }
            }

            domSelectionToView(t) {
                if (t.rangeCount === 1) {
                    let e = t.getRangeAt(0).startContainer;
                    if (od(e)) {
                        e = e.parentNode
                    }
                    const i = this.fakeSelectionToView(e);
                    if (i) {
                        return i
                    }
                }
                const e = this.isDomSelectionBackward(t);
                const i = [];
                for (let e = 0; e < t.rangeCount; e++) {
                    const n = t.getRangeAt(e);
                    const o = this.domRangeToView(n);
                    if (o) {
                        i.push(o)
                    }
                }
                return new gl(i, {backward: e})
            }

            domRangeToView(t) {
                const e = this.domPositionToView(t.startContainer, t.startOffset);
                const i = this.domPositionToView(t.endContainer, t.endOffset);
                if (e && i) {
                    return new ul(e, i)
                }
                return null
            }

            domPositionToView(t, e) {
                if (this.isBlockFiller(t, this.blockFillerMode)) {
                    return this.domPositionToView(t.parentNode, Vd(t))
                }
                const i = this.mapDomToView(t);
                if (i && i.is("uiElement")) {
                    return dl._createBefore(i)
                }
                if (od(t)) {
                    if (dd(t)) {
                        return this.domPositionToView(t.parentNode, Vd(t))
                    }
                    const i = this.findCorrespondingViewText(t);
                    let n = e;
                    if (!i) {
                        return null
                    }
                    if (ld(t)) {
                        n -= ad;
                        n = n < 0 ? 0 : n
                    }
                    return new dl(i, n)
                } else {
                    if (e === 0) {
                        const e = this.mapDomToView(t);
                        if (e) {
                            return new dl(e, 0)
                        }
                    } else {
                        const i = t.childNodes[e - 1];
                        const n = od(i) ? this.findCorrespondingViewText(i) : this.mapDomToView(i);
                        if (n && n.parent) {
                            return new dl(n.parent, n.index + 1)
                        }
                    }
                    return null
                }
            }

            mapDomToView(t) {
                return this.getParentUIElement(t) || this._domToViewMapping.get(t)
            }

            findCorrespondingViewText(t) {
                if (dd(t)) {
                    return null
                }
                const e = this.getParentUIElement(t);
                if (e) {
                    return e
                }
                const i = t.previousSibling;
                if (i) {
                    if (!this.isElement(i)) {
                        return null
                    }
                    const t = this.mapDomToView(i);
                    if (t) {
                        const e = t.nextSibling;
                        if (e instanceof Ls) {
                            return t.nextSibling
                        } else {
                            return null
                        }
                    }
                } else {
                    const e = this.mapDomToView(t.parentNode);
                    if (e) {
                        const t = e.getChild(0);
                        if (t instanceof Ls) {
                            return t
                        } else {
                            return null
                        }
                    }
                }
                return null
            }

            mapViewToDom(t) {
                return this._viewToDomMapping.get(t)
            }

            findCorrespondingDomText(t) {
                const e = t.previousSibling;
                if (e && this.mapViewToDom(e)) {
                    return this.mapViewToDom(e).nextSibling
                }
                if (!e && t.parent && this.mapViewToDom(t.parent)) {
                    return this.mapViewToDom(t.parent).childNodes[0]
                }
                return null
            }

            focus(t) {
                const e = this.mapViewToDom(t);
                if (e && e.ownerDocument.activeElement !== e) {
                    const {scrollX: t, scrollY: i} = Id.window;
                    const n = [];
                    Fd(e, t => {
                        const {scrollLeft: e, scrollTop: i} = t;
                        n.push([e, i])
                    });
                    e.focus();
                    Fd(e, t => {
                        const [e, i] = n.shift();
                        t.scrollLeft = e;
                        t.scrollTop = i
                    });
                    Id.window.scrollTo(t, i)
                }
            }

            isElement(t) {
                return t && t.nodeType == Node.ELEMENT_NODE
            }

            isDocumentFragment(t) {
                return t && t.nodeType == Node.DOCUMENT_FRAGMENT_NODE
            }

            isComment(t) {
                return t && t.nodeType == Node.COMMENT_NODE
            }

            isBlockFiller(t) {
                if (this.blockFillerMode == "br") {
                    return t.isEqualNode(Bd)
                }
                if (t.tagName === "BR" && jd(t, this.blockElements) && t.parentNode.childNodes.length === 1) {
                    return true
                }
                return Dd(t, this.blockElements)
            }

            isDomSelectionBackward(t) {
                if (t.isCollapsed) {
                    return false
                }
                const e = document.createRange();
                e.setStart(t.anchorNode, t.anchorOffset);
                e.setEnd(t.focusNode, t.focusOffset);
                const i = e.collapsed;
                e.detach();
                return i
            }

            getParentUIElement(t) {
                const e = Nd(t);
                e.pop();
                while (e.length) {
                    const t = e.pop();
                    const i = this._domToViewMapping.get(t);
                    if (i && i.is("uiElement")) {
                        return i
                    }
                }
                return null
            }

            isDomSelectionCorrect(t) {
                return this._isDomSelectionPositionCorrect(t.anchorNode, t.anchorOffset) && this._isDomSelectionPositionCorrect(t.focusNode, t.focusOffset)
            }

            _isDomSelectionPositionCorrect(t, e) {
                if (od(t) && ld(t) && e < ad) {
                    return false
                }
                if (this.isElement(t) && ld(t.childNodes[e])) {
                    return false
                }
                const i = this.mapDomToView(t);
                if (i && i.is("uiElement")) {
                    return false
                }
                return true
            }

            _processDataFromViewText(t) {
                let e = t.data;
                if (t.getAncestors().some(t => this.preElements.includes(t.name))) {
                    return e
                }
                if (e.charAt(0) == " ") {
                    const i = this._getTouchingViewTextNode(t, false);
                    const n = i && this._nodeEndsWithSpace(i);
                    if (n || !i) {
                        e = " " + e.substr(1)
                    }
                }
                if (e.charAt(e.length - 1) == " ") {
                    const i = this._getTouchingViewTextNode(t, true);
                    if (e.charAt(e.length - 2) == " " || !i || i.data.charAt(0) == " ") {
                        e = e.substr(0, e.length - 1) + " "
                    }
                }
                return e.replace(/ {2}/g, "  ")
            }

            _nodeEndsWithSpace(t) {
                if (t.getAncestors().some(t => this.preElements.includes(t.name))) {
                    return false
                }
                const e = this._processDataFromViewText(t);
                return e.charAt(e.length - 1) == " "
            }

            _processDataFromDomText(t) {
                let e = t.data;
                if (Ld(t, this.preElements)) {
                    return ud(t)
                }
                e = e.replace(/[ \n\t\r]{1,}/g, " ");
                const i = this._getTouchingInlineDomNode(t, false);
                const n = this._getTouchingInlineDomNode(t, true);
                const o = this._checkShouldLeftTrimDomText(i);
                const r = this._checkShouldRightTrimDomText(t, n);
                if (o) {
                    e = e.replace(/^ /, "")
                }
                if (r) {
                    e = e.replace(/ $/, "")
                }
                e = ud(new Text(e));
                e = e.replace(/ \u00A0/g, "  ");
                if (/( |\u00A0)\u00A0$/.test(e) || !n || n.data && n.data.charAt(0) == " ") {
                    e = e.replace(/\u00A0$/, " ")
                }
                if (o) {
                    e = e.replace(/^\u00A0/, " ")
                }
                return e
            }

            _checkShouldLeftTrimDomText(t) {
                if (!t) {
                    return true
                }
                if (Kr(t)) {
                    return true
                }
                return /[^\S\u00A0]/.test(t.data.charAt(t.data.length - 1))
            }

            _checkShouldRightTrimDomText(t, e) {
                if (e) {
                    return false
                }
                return !ld(t)
            }

            _getTouchingViewTextNode(t, e) {
                const i = new ll({
                    startPosition: e ? dl._createAfter(t) : dl._createBefore(t),
                    direction: e ? "forward" : "backward"
                });
                for (const t of i) {
                    if (t.item.is("containerElement")) {
                        return null
                    } else if (t.item.is("br")) {
                        return null
                    } else if (t.item.is("textProxy")) {
                        return t.item
                    }
                }
                return null
            }

            _getTouchingInlineDomNode(t, e) {
                if (!t.parentNode) {
                    return null
                }
                const i = e ? "nextNode" : "previousNode";
                const n = t.ownerDocument;
                const o = Nd(t)[0];
                const r = n.createTreeWalker(o, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, {
                    acceptNode(t) {
                        if (od(t)) {
                            return NodeFilter.FILTER_ACCEPT
                        }
                        if (t.tagName == "BR") {
                            return NodeFilter.FILTER_ACCEPT
                        }
                        return NodeFilter.FILTER_SKIP
                    }
                });
                r.currentNode = t;
                const s = r[i]();
                if (s !== null) {
                    const e = Md(t, s);
                    if (e && !Ld(t, this.blockElements, e) && !Ld(s, this.blockElements, e)) {
                        return s
                    }
                }
                return null
            }
        }

        function Ld(t, e, i) {
            let n = Nd(t);
            if (i) {
                n = n.slice(n.indexOf(i) + 1)
            }
            return n.some(t => t.tagName && e.includes(t.tagName.toLowerCase()))
        }

        function Fd(t, e) {
            while (t && t != Id.document) {
                e(t);
                t = t.parentNode
            }
        }

        function Dd(t, e) {
            const i = od(t) && t.data == " ";
            return i && jd(t, e) && t.parentNode.childNodes.length === 1
        }

        function jd(t, e) {
            const i = t.parentNode;
            return i && i.tagName && e.includes(i.tagName.toLowerCase())
        }

        function Hd(t) {
            const e = Object.prototype.toString.apply(t);
            if (e == "[object Window]") {
                return true
            }
            if (e == "[object global]") {
                return true
            }
            return false
        }

        const Wd = qc({}, ds, {
            listenTo(t, ...e) {
                if (xd(t) || Hd(t)) {
                    const i = this._getProxyEmitter(t) || new Ud(t);
                    i.attach(...e);
                    t = i
                }
                ds.listenTo.call(this, t, ...e)
            }, stopListening(t, e, i) {
                if (xd(t) || Hd(t)) {
                    const e = this._getProxyEmitter(t);
                    if (!e) {
                        return
                    }
                    t = e
                }
                ds.stopListening.call(this, t, e, i);
                if (t instanceof Ud) {
                    t.detach(e)
                }
            }, _getProxyEmitter(t) {
                return us(this, $d(t))
            }
        });
        var qd = Wd;

        class Ud {
            constructor(t) {
                hs(this, $d(t));
                this._domNode = t
            }
        }

        qc(Ud.prototype, ds, {
            attach(t, e, i = {}) {
                if (this._domListeners && this._domListeners[t]) {
                    return
                }
                const n = this._createDomListener(t, !!i.useCapture);
                this._domNode.addEventListener(t, n, !!i.useCapture);
                if (!this._domListeners) {
                    this._domListeners = {}
                }
                this._domListeners[t] = n
            }, detach(t) {
                let e;
                if (this._domListeners[t] && (!(e = this._events[t]) || !e.callbacks.length)) {
                    this._domListeners[t].removeListener()
                }
            }, _createDomListener(t, e) {
                const i = e => {
                    this.fire(t, e)
                };
                i.removeListener = () => {
                    this._domNode.removeEventListener(t, i, e);
                    delete this._domListeners[t]
                };
                return i
            }
        });

        function $d(t) {
            return t["data-ck-expando"] || (t["data-ck-expando"] = is())
        }

        class Gd {
            constructor(t) {
                this.view = t;
                this.document = t.document;
                this.isEnabled = false
            }

            enable() {
                this.isEnabled = true
            }

            disable() {
                this.isEnabled = false
            }

            destroy() {
                this.disable();
                this.stopListening()
            }
        }

        vs(Gd, qd);
        var Kd = "__lodash_hash_undefined__";

        function Jd(t) {
            this.__data__.set(t, Kd);
            return this
        }

        var Yd = Jd;

        function Qd(t) {
            return this.__data__.has(t)
        }

        var Xd = Qd;

        function Zd(t) {
            var e = -1, i = t == null ? 0 : t.length;
            this.__data__ = new _e;
            while (++e < i) {
                this.add(t[e])
            }
        }

        Zd.prototype.add = Zd.prototype.push = Yd;
        Zd.prototype.has = Xd;
        var tu = Zd;

        function eu(t, e) {
            var i = -1, n = t == null ? 0 : t.length;
            while (++i < n) {
                if (e(t[i], i, t)) {
                    return true
                }
            }
            return false
        }

        var iu = eu;

        function nu(t, e) {
            return t.has(e)
        }

        var ou = nu;
        var ru = 1, su = 2;

        function au(t, e, i, n, o, r) {
            var s = i & ru, a = t.length, c = e.length;
            if (a != c && !(s && c > a)) {
                return false
            }
            var l = r.get(t);
            if (l && r.get(e)) {
                return l == e
            }
            var d = -1, u = true, h = i & su ? new tu : undefined;
            r.set(t, e);
            r.set(e, t);
            while (++d < a) {
                var f = t[d], g = e[d];
                if (n) {
                    var m = s ? n(g, f, d, e, t, r) : n(f, g, d, t, e, r)
                }
                if (m !== undefined) {
                    if (m) {
                        continue
                    }
                    u = false;
                    break
                }
                if (h) {
                    if (!iu(e, (function (t, e) {
                        if (!ou(h, e) && (f === t || o(f, t, i, n, r))) {
                            return h.push(e)
                        }
                    }))) {
                        u = false;
                        break
                    }
                } else if (!(f === g || o(f, g, i, n, r))) {
                    u = false;
                    break
                }
            }
            r["delete"](t);
            r["delete"](e);
            return u
        }

        var cu = au;

        function lu(t) {
            var e = -1, i = Array(t.size);
            t.forEach((function (t, n) {
                i[++e] = [n, t]
            }));
            return i
        }

        var du = lu;

        function uu(t) {
            var e = -1, i = Array(t.size);
            t.forEach((function (t) {
                i[++e] = t
            }));
            return i
        }

        var hu = uu;
        var fu = 1, gu = 2;
        var mu = "[object Boolean]", pu = "[object Date]", bu = "[object Error]", wu = "[object Map]",
            ku = "[object Number]", _u = "[object RegExp]", vu = "[object Set]", yu = "[object String]",
            xu = "[object Symbol]";
        var Cu = "[object ArrayBuffer]", Au = "[object DataView]";
        var Tu = r ? r.prototype : undefined, Pu = Tu ? Tu.valueOf : undefined;

        function Su(t, e, i, n, o, r, s) {
            switch (i) {
                case Au:
                    if (t.byteLength != e.byteLength || t.byteOffset != e.byteOffset) {
                        return false
                    }
                    t = t.buffer;
                    e = e.buffer;
                case Cu:
                    if (t.byteLength != e.byteLength || !r(new fo(t), new fo(e))) {
                        return false
                    }
                    return true;
                case mu:
                case pu:
                case ku:
                    return L(+t, +e);
                case bu:
                    return t.name == e.name && t.message == e.message;
                case _u:
                case yu:
                    return t == e + "";
                case wu:
                    var a = du;
                case vu:
                    var c = n & fu;
                    a || (a = hu);
                    if (t.size != e.size && !c) {
                        return false
                    }
                    var l = s.get(t);
                    if (l) {
                        return l == e
                    }
                    n |= gu;
                    s.set(t, e);
                    var d = cu(a(t), a(e), n, o, r, s);
                    s["delete"](t);
                    return d;
                case xu:
                    if (Pu) {
                        return Pu.call(t) == Pu.call(e)
                    }
            }
            return false
        }

        var Eu = Su;
        var Ru = 1;
        var Ou = Object.prototype;
        var Iu = Ou.hasOwnProperty;

        function Vu(t, e, i, n, o, r) {
            var s = i & Ru, a = zn(t), c = a.length, l = zn(e), d = l.length;
            if (c != d && !s) {
                return false
            }
            var u = c;
            while (u--) {
                var h = a[u];
                if (!(s ? h in e : Iu.call(e, h))) {
                    return false
                }
            }
            var f = r.get(t);
            if (f && r.get(e)) {
                return f == e
            }
            var g = true;
            r.set(t, e);
            r.set(e, t);
            var m = s;
            while (++u < c) {
                h = a[u];
                var p = t[h], b = e[h];
                if (n) {
                    var w = s ? n(b, p, h, e, t, r) : n(p, b, h, t, e, r)
                }
                if (!(w === undefined ? p === b || o(p, b, i, n, r) : w)) {
                    g = false;
                    break
                }
                m || (m = h == "constructor")
            }
            if (g && !m) {
                var k = t.constructor, _ = e.constructor;
                if (k != _ && ("constructor" in t && "constructor" in e) && !(typeof k == "function" && k instanceof k && typeof _ == "function" && _ instanceof _)) {
                    g = false
                }
            }
            r["delete"](t);
            r["delete"](e);
            return g
        }

        var Nu = Vu;
        var Mu = 1;
        var Bu = "[object Arguments]", zu = "[object Array]", Lu = "[object Object]";
        var Fu = Object.prototype;
        var Du = Fu.hasOwnProperty;

        function ju(t, e, i, n, o, r) {
            var s = Je(t), a = Je(e), c = s ? zu : so(t), l = a ? zu : so(e);
            c = c == Bu ? Lu : c;
            l = l == Bu ? Lu : l;
            var d = c == Lu, u = l == Lu, h = c == l;
            if (h && Object(Ye["a"])(t)) {
                if (!Object(Ye["a"])(e)) {
                    return false
                }
                s = true;
                d = false
            }
            if (h && !d) {
                r || (r = new Ae);
                return s || Bi(t) ? cu(t, e, i, n, o, r) : Eu(t, e, c, i, n, o, r)
            }
            if (!(i & Mu)) {
                var f = d && Du.call(t, "__wrapped__"), g = u && Du.call(e, "__wrapped__");
                if (f || g) {
                    var m = f ? t.value() : t, p = g ? e.value() : e;
                    r || (r = new Ae);
                    return o(m, p, i, n, r)
                }
            }
            if (!h) {
                return false
            }
            r || (r = new Ae);
            return Nu(t, e, i, n, o, r)
        }

        var Hu = ju;

        function Wu(t, e, i, n, o) {
            if (t === e) {
                return true
            }
            if (t == null || e == null || !T(t) && !T(e)) {
                return t !== t && e !== e
            }
            return Hu(t, e, i, n, Wu, o)
        }

        var qu = Wu;

        function Uu(t, e, i) {
            i = typeof i == "function" ? i : undefined;
            var n = i ? i(t, e) : undefined;
            return n === undefined ? qu(t, e, undefined, i) : !!n
        }

        var $u = Uu;

        class Gu extends Gd {
            constructor(t) {
                super(t);
                this._config = {childList: true, characterData: true, characterDataOldValue: true, subtree: true};
                this.domConverter = t.domConverter;
                this.renderer = t._renderer;
                this._domElements = [];
                this._mutationObserver = new window.MutationObserver(this._onMutations.bind(this))
            }

            flush() {
                this._onMutations(this._mutationObserver.takeRecords())
            }

            observe(t) {
                this._domElements.push(t);
                if (this.isEnabled) {
                    this._mutationObserver.observe(t, this._config)
                }
            }

            enable() {
                super.enable();
                for (const t of this._domElements) {
                    this._mutationObserver.observe(t, this._config)
                }
            }

            disable() {
                super.disable();
                this._mutationObserver.disconnect()
            }

            destroy() {
                super.destroy();
                this._mutationObserver.disconnect()
            }

            _onMutations(t) {
                if (t.length === 0) {
                    return
                }
                const e = this.domConverter;
                const i = new Map;
                const n = new Set;
                for (const i of t) {
                    if (i.type === "childList") {
                        const t = e.mapDomToView(i.target);
                        if (t && t.is("uiElement")) {
                            continue
                        }
                        if (t && !this._isBogusBrMutation(i)) {
                            n.add(t)
                        }
                    }
                }
                for (const o of t) {
                    const t = e.mapDomToView(o.target);
                    if (t && t.is("uiElement")) {
                        continue
                    }
                    if (o.type === "characterData") {
                        const t = e.findCorrespondingViewText(o.target);
                        if (t && !n.has(t.parent)) {
                            i.set(t, {type: "text", oldText: t.data, newText: ud(o.target), node: t})
                        } else if (!t && ld(o.target)) {
                            n.add(e.mapDomToView(o.target.parentNode))
                        }
                    }
                }
                const o = [];
                for (const t of i.values()) {
                    this.renderer.markToSync("text", t.node);
                    o.push(t)
                }
                for (const t of n) {
                    const i = e.mapViewToDom(t);
                    const n = Array.from(t.getChildren());
                    const r = Array.from(e.domChildrenToView(i, {withChildren: false}));
                    if (!$u(n, r, a)) {
                        this.renderer.markToSync("children", t);
                        o.push({type: "children", oldChildren: n, newChildren: r, node: t})
                    }
                }
                const r = t[0].target.ownerDocument.getSelection();
                let s = null;
                if (r && r.anchorNode) {
                    const t = e.domPositionToView(r.anchorNode, r.anchorOffset);
                    const i = e.domPositionToView(r.focusNode, r.focusOffset);
                    if (t && i) {
                        s = new gl(t);
                        s.setFocus(i)
                    }
                }
                if (o.length) {
                    this.document.fire("mutations", o, s);
                    this.view.forceRender()
                }

                function a(t, e) {
                    if (Array.isArray(t)) {
                        return
                    }
                    if (t === e) {
                        return true
                    } else if (t.is("text") && e.is("text")) {
                        return t.data === e.data
                    }
                    return false
                }
            }

            _isBogusBrMutation(t) {
                let e = null;
                if (t.nextSibling === null && t.removedNodes.length === 0 && t.addedNodes.length == 1) {
                    e = this.domConverter.domToView(t.addedNodes[0], {withChildren: false})
                }
                return e && e.is("element", "br")
            }
        }

        class Ku {
            constructor(t, e, i) {
                this.view = t;
                this.document = t.document;
                this.domEvent = e;
                this.domTarget = e.target;
                qc(this, i)
            }

            get target() {
                return this.view.domConverter.mapDomToView(this.domTarget)
            }

            preventDefault() {
                this.domEvent.preventDefault()
            }

            stopPropagation() {
                this.domEvent.stopPropagation()
            }
        }

        class Ju extends Gd {
            constructor(t) {
                super(t);
                this.useCapture = false
            }

            observe(t) {
                const e = typeof this.domEventType == "string" ? [this.domEventType] : this.domEventType;
                e.forEach(e => {
                    this.listenTo(t, e, (t, e) => {
                        if (this.isEnabled) {
                            this.onDomEvent(e)
                        }
                    }, {useCapture: this.useCapture})
                })
            }

            fire(t, e, i) {
                if (this.isEnabled) {
                    this.document.fire(t, new Ku(this.view, e, i))
                }
            }
        }

        class Yu extends Ju {
            constructor(t) {
                super(t);
                this.domEventType = ["keydown", "keyup"]
            }

            onDomEvent(t) {
                this.fire(t.type, t, {
                    keyCode: t.keyCode,
                    altKey: t.altKey,
                    ctrlKey: t.ctrlKey || t.metaKey,
                    shiftKey: t.shiftKey,
                    get keystroke() {
                        return Ml(this)
                    }
                })
            }
        }

        var Qu = function () {
            return n["a"].Date.now()
        };
        var Xu = Qu;
        var Zu = 0 / 0;
        var th = /^\s+|\s+$/g;
        var eh = /^[-+]0x[0-9a-f]+$/i;
        var ih = /^0b[01]+$/i;
        var nh = /^0o[0-7]+$/i;
        var oh = parseInt;

        function rh(t) {
            if (typeof t == "number") {
                return t
            }
            if (Qs(t)) {
                return Zu
            }
            if (ct(t)) {
                var e = typeof t.valueOf == "function" ? t.valueOf() : t;
                t = ct(e) ? e + "" : e
            }
            if (typeof t != "string") {
                return t === 0 ? t : +t
            }
            t = t.replace(th, "");
            var i = ih.test(t);
            return i || nh.test(t) ? oh(t.slice(2), i ? 2 : 8) : eh.test(t) ? Zu : +t
        }

        var sh = rh;
        var ah = "Expected a function";
        var ch = Math.max, lh = Math.min;

        function dh(t, e, i) {
            var n, o, r, s, a, c, l = 0, d = false, u = false, h = true;
            if (typeof t != "function") {
                throw new TypeError(ah)
            }
            e = sh(e) || 0;
            if (ct(i)) {
                d = !!i.leading;
                u = "maxWait" in i;
                r = u ? ch(sh(i.maxWait) || 0, e) : r;
                h = "trailing" in i ? !!i.trailing : h
            }

            function f(e) {
                var i = n, r = o;
                n = o = undefined;
                l = e;
                s = t.apply(r, i);
                return s
            }

            function g(t) {
                l = t;
                a = setTimeout(b, e);
                return d ? f(t) : s
            }

            function m(t) {
                var i = t - c, n = t - l, o = e - i;
                return u ? lh(o, r - n) : o
            }

            function p(t) {
                var i = t - c, n = t - l;
                return c === undefined || i >= e || i < 0 || u && n >= r
            }

            function b() {
                var t = Xu();
                if (p(t)) {
                    return w(t)
                }
                a = setTimeout(b, m(t))
            }

            function w(t) {
                a = undefined;
                if (h && n) {
                    return f(t)
                }
                n = o = undefined;
                return s
            }

            function k() {
                if (a !== undefined) {
                    clearTimeout(a)
                }
                l = 0;
                n = c = o = a = undefined
            }

            function _() {
                return a === undefined ? s : w(Xu())
            }

            function v() {
                var t = Xu(), i = p(t);
                n = arguments;
                o = this;
                c = t;
                if (i) {
                    if (a === undefined) {
                        return g(c)
                    }
                    if (u) {
                        clearTimeout(a);
                        a = setTimeout(b, e);
                        return f(c)
                    }
                }
                if (a === undefined) {
                    a = setTimeout(b, e)
                }
                return s
            }

            v.cancel = k;
            v.flush = _;
            return v
        }

        var uh = dh;

        class hh extends Gd {
            constructor(t) {
                super(t);
                this._fireSelectionChangeDoneDebounced = uh(t => this.document.fire("selectionChangeDone", t), 200)
            }

            observe() {
                const t = this.document;
                t.on("keydown", (e, i) => {
                    const n = t.selection;
                    if (n.isFake && fh(i.keyCode) && this.isEnabled) {
                        i.preventDefault();
                        this._handleSelectionMove(i.keyCode)
                    }
                }, {priority: "lowest"})
            }

            destroy() {
                super.destroy();
                this._fireSelectionChangeDoneDebounced.cancel()
            }

            _handleSelectionMove(t) {
                const e = this.document.selection;
                const i = new gl(e.getRanges(), {backward: e.isBackward, fake: false});
                if (t == Nl.arrowleft || t == Nl.arrowup) {
                    i.setTo(i.getFirstPosition())
                }
                if (t == Nl.arrowright || t == Nl.arrowdown) {
                    i.setTo(i.getLastPosition())
                }
                const n = {oldSelection: e, newSelection: i, domSelection: null};
                this.document.fire("selectionChange", n);
                this._fireSelectionChangeDoneDebounced(n)
            }
        }

        function fh(t) {
            return t == Nl.arrowright || t == Nl.arrowleft || t == Nl.arrowup || t == Nl.arrowdown
        }

        class gh extends Gd {
            constructor(t) {
                super(t);
                this.mutationObserver = t.getObserver(Gu);
                this.selection = this.document.selection;
                this.domConverter = t.domConverter;
                this._documents = new WeakSet;
                this._fireSelectionChangeDoneDebounced = uh(t => this.document.fire("selectionChangeDone", t), 200);
                this._clearInfiniteLoopInterval = setInterval(() => this._clearInfiniteLoop(), 1e3);
                this._loopbackCounter = 0
            }

            observe(t) {
                const e = t.ownerDocument;
                if (this._documents.has(e)) {
                    return
                }
                this.listenTo(e, "selectionchange", () => {
                    this._handleSelectionChange(e)
                });
                this._documents.add(e)
            }

            destroy() {
                super.destroy();
                clearInterval(this._clearInfiniteLoopInterval);
                this._fireSelectionChangeDoneDebounced.cancel()
            }

            _handleSelectionChange(t) {
                if (!this.isEnabled) {
                    return
                }
                this.mutationObserver.flush();
                const e = t.defaultView.getSelection();
                const i = this.domConverter.domSelectionToView(e);
                if (i.rangeCount == 0) {
                    return
                }
                if (this.selection.isEqual(i) && this.domConverter.isDomSelectionCorrect(e)) {
                    return
                }
                if (++this._loopbackCounter > 60) {
                    return
                }
                if (this.selection.isSimilar(i)) {
                    this.view.forceRender()
                } else {
                    const t = {oldSelection: this.selection, newSelection: i, domSelection: e};
                    this.document.fire("selectionChange", t);
                    this._fireSelectionChangeDoneDebounced(t)
                }
            }

            _clearInfiniteLoop() {
                this._loopbackCounter = 0
            }
        }

        class mh extends Ju {
            constructor(t) {
                super(t);
                this.domEventType = ["focus", "blur"];
                this.useCapture = true;
                const e = this.document;
                e.on("focus", () => {
                    e.isFocused = true;
                    this._renderTimeoutId = setTimeout(() => t.forceRender(), 50)
                });
                e.on("blur", (i, n) => {
                    const o = e.selection.editableElement;
                    if (o === null || o === n.target) {
                        e.isFocused = false;
                        t.forceRender()
                    }
                })
            }

            onDomEvent(t) {
                this.fire(t.type, t)
            }

            destroy() {
                if (this._renderTimeoutId) {
                    clearTimeout(this._renderTimeoutId)
                }
                super.destroy()
            }
        }

        class ph extends Ju {
            constructor(t) {
                super(t);
                this.domEventType = ["compositionstart", "compositionupdate", "compositionend"];
                const e = this.document;
                e.on("compositionstart", () => {
                    e.isComposing = true
                });
                e.on("compositionend", () => {
                    e.isComposing = false
                })
            }

            onDomEvent(t) {
                this.fire(t.type, t)
            }
        }

        class bh extends Ju {
            constructor(t) {
                super(t);
                this.domEventType = ["beforeinput"]
            }

            onDomEvent(t) {
                this.fire(t.type, t)
            }
        }

        function wh(t) {
            return Object.prototype.toString.apply(t) == "[object Range]"
        }

        function kh(t) {
            const e = t.ownerDocument.defaultView.getComputedStyle(t);
            return {
                top: parseInt(e.borderTopWidth, 10),
                right: parseInt(e.borderRightWidth, 10),
                bottom: parseInt(e.borderBottomWidth, 10),
                left: parseInt(e.borderLeftWidth, 10)
            }
        }

        const _h = ["top", "right", "bottom", "left", "width", "height"];

        class vh {
            constructor(t) {
                const e = wh(t);
                Object.defineProperty(this, "_source", {value: t._source || t, writable: true, enumerable: false});
                if (Kr(t) || e) {
                    if (e) {
                        yh(this, vh.getDomRangeRects(t)[0])
                    } else {
                        yh(this, t.getBoundingClientRect())
                    }
                } else if (Hd(t)) {
                    const {innerWidth: e, innerHeight: i} = t;
                    yh(this, {top: 0, right: e, bottom: i, left: 0, width: e, height: i})
                } else {
                    yh(this, t)
                }
            }

            clone() {
                return new vh(this)
            }

            moveTo(t, e) {
                this.top = e;
                this.right = t + this.width;
                this.bottom = e + this.height;
                this.left = t;
                return this
            }

            moveBy(t, e) {
                this.top += e;
                this.right += t;
                this.left += t;
                this.bottom += e;
                return this
            }

            getIntersection(t) {
                const e = {
                    top: Math.max(this.top, t.top),
                    right: Math.min(this.right, t.right),
                    bottom: Math.min(this.bottom, t.bottom),
                    left: Math.max(this.left, t.left)
                };
                e.width = e.right - e.left;
                e.height = e.bottom - e.top;
                if (e.width < 0 || e.height < 0) {
                    return null
                } else {
                    return new vh(e)
                }
            }

            getIntersectionArea(t) {
                const e = this.getIntersection(t);
                if (e) {
                    return e.getArea()
                } else {
                    return 0
                }
            }

            getArea() {
                return this.width * this.height
            }

            getVisible() {
                const t = this._source;
                let e = this.clone();
                if (!xh(t)) {
                    let i = t.parentNode || t.commonAncestorContainer;
                    while (i && !xh(i)) {
                        const t = new vh(i);
                        const n = e.getIntersection(t);
                        if (n) {
                            if (n.getArea() < e.getArea()) {
                                e = n
                            }
                        } else {
                            return null
                        }
                        i = i.parentNode
                    }
                }
                return e
            }

            isEqual(t) {
                for (const e of _h) {
                    if (this[e] !== t[e]) {
                        return false
                    }
                }
                return true
            }

            contains(t) {
                const e = this.getIntersection(t);
                return !!(e && e.isEqual(t))
            }

            excludeScrollbarsAndBorders() {
                const t = this._source;
                let e, i, n;
                if (Hd(t)) {
                    e = t.innerWidth - t.document.documentElement.clientWidth;
                    i = t.innerHeight - t.document.documentElement.clientHeight;
                    n = t.getComputedStyle(t.document.documentElement).direction
                } else {
                    const o = kh(this._source);
                    e = t.offsetWidth - t.clientWidth - o.left - o.right;
                    i = t.offsetHeight - t.clientHeight - o.top - o.bottom;
                    n = t.ownerDocument.defaultView.getComputedStyle(t).direction;
                    this.left += o.left;
                    this.top += o.top;
                    this.right -= o.right;
                    this.bottom -= o.bottom;
                    this.width = this.right - this.left;
                    this.height = this.bottom - this.top
                }
                this.width -= e;
                if (n === "ltr") {
                    this.right -= e
                } else {
                    this.left += e
                }
                this.height -= i;
                this.bottom -= i;
                return this
            }

            static getDomRangeRects(t) {
                const e = [];
                const i = Array.from(t.getClientRects());
                if (i.length) {
                    for (const t of i) {
                        e.push(new vh(t))
                    }
                } else {
                    let i = t.startContainer;
                    if (od(i)) {
                        i = i.parentNode
                    }
                    const n = new vh(i.getBoundingClientRect());
                    n.right = n.left;
                    n.width = 0;
                    e.push(n)
                }
                return e
            }
        }

        function yh(t, e) {
            for (const i of _h) {
                t[i] = e[i]
            }
        }

        function xh(t) {
            if (!Kr(t)) {
                return false
            }
            return t === t.ownerDocument.body
        }

        const Ch = {};

        function Ah({target: t, viewportOffset: e = 0}) {
            const i = Vh(t);
            let n = i;
            let o = null;
            while (n) {
                let r;
                if (n == i) {
                    r = Nh(t)
                } else {
                    r = Nh(o)
                }
                Sh(r, () => Mh(t, n));
                const s = Mh(t, n);
                Ph(n, s, e);
                if (n.parent != n) {
                    o = n.frameElement;
                    n = n.parent;
                    if (!o) {
                        return
                    }
                } else {
                    n = null
                }
            }
        }

        function Th(t) {
            const e = Nh(t);
            Sh(e, () => new vh(t))
        }

        Object.assign(Ch, {scrollViewportToShowTarget: Ah, scrollAncestorsToShowTarget: Th});

        function Ph(t, e, i) {
            const n = e.clone().moveBy(0, i);
            const o = e.clone().moveBy(0, -i);
            const r = new vh(t).excludeScrollbarsAndBorders();
            const s = [o, n];
            if (!s.every(t => r.contains(t))) {
                let {scrollX: s, scrollY: a} = t;
                if (Rh(o, r)) {
                    a -= r.top - e.top + i
                } else if (Eh(n, r)) {
                    a += e.bottom - r.bottom + i
                }
                if (Oh(e, r)) {
                    s -= r.left - e.left + i
                } else if (Ih(e, r)) {
                    s += e.right - r.right + i
                }
                t.scrollTo(s, a)
            }
        }

        function Sh(t, e) {
            const i = Vh(t);
            let n, o;
            while (t != i.document.body) {
                o = e();
                n = new vh(t).excludeScrollbarsAndBorders();
                if (!n.contains(o)) {
                    if (Rh(o, n)) {
                        t.scrollTop -= n.top - o.top
                    } else if (Eh(o, n)) {
                        t.scrollTop += o.bottom - n.bottom
                    }
                    if (Oh(o, n)) {
                        t.scrollLeft -= n.left - o.left
                    } else if (Ih(o, n)) {
                        t.scrollLeft += o.right - n.right
                    }
                }
                t = t.parentNode
            }
        }

        function Eh(t, e) {
            return t.bottom > e.bottom
        }

        function Rh(t, e) {
            return t.top < e.top
        }

        function Oh(t, e) {
            return t.left < e.left
        }

        function Ih(t, e) {
            return t.right > e.right
        }

        function Vh(t) {
            if (wh(t)) {
                return t.startContainer.ownerDocument.defaultView
            } else {
                return t.ownerDocument.defaultView
            }
        }

        function Nh(t) {
            if (wh(t)) {
                let e = t.commonAncestorContainer;
                if (od(e)) {
                    e = e.parentNode
                }
                return e
            } else {
                return t.parentNode
            }
        }

        function Mh(t, e) {
            const i = Vh(t);
            const n = new vh(t);
            if (i === e) {
                return n
            } else {
                let t = i;
                while (t != e) {
                    const e = t.frameElement;
                    const i = new vh(e).excludeScrollbarsAndBorders();
                    n.moveBy(i.left, i.top);
                    t = t.parent
                }
            }
            return n
        }

        class Bh {
            constructor(t) {
                this.document = new pl(t);
                this.domConverter = new zd(this.document);
                this.domRoots = new Map;
                this.set("isRenderingInProgress", false);
                this._renderer = new Cd(this.domConverter, this.document.selection);
                this._renderer.bind("isFocused").to(this.document);
                this._initialDomRootAttributes = new WeakMap;
                this._observers = new Map;
                this._ongoingChange = false;
                this._postFixersInProgress = false;
                this._renderingDisabled = false;
                this._hasChangedSinceTheLastRendering = false;
                this._writer = new $l(this.document);
                this.addObserver(Gu);
                this.addObserver(gh);
                this.addObserver(mh);
                this.addObserver(Yu);
                this.addObserver(hh);
                this.addObserver(ph);
                if (Al.isAndroid) {
                    this.addObserver(bh)
                }
                hd(this);
                jl(this);
                this.on("render", () => {
                    this._render();
                    this.document.fire("layoutChanged");
                    this._hasChangedSinceTheLastRendering = false
                });
                this.listenTo(this.document.selection, "change", () => {
                    this._hasChangedSinceTheLastRendering = true
                })
            }

            attachDomRoot(t, e = "main") {
                const i = this.document.getRoot(e);
                i._name = t.tagName.toLowerCase();
                const n = {};
                for (const {name: e, value: o} of Array.from(t.attributes)) {
                    n[e] = o;
                    if (e === "class") {
                        this._writer.addClass(o.split(" "), i)
                    } else {
                        this._writer.setAttribute(e, o, i)
                    }
                }
                this._initialDomRootAttributes.set(t, n);
                const o = () => {
                    this._writer.setAttribute("contenteditable", !i.isReadOnly, i);
                    if (i.isReadOnly) {
                        this._writer.addClass("ck-read-only", i)
                    } else {
                        this._writer.removeClass("ck-read-only", i)
                    }
                };
                o();
                this.domRoots.set(e, t);
                this.domConverter.bindElements(t, i);
                this._renderer.markToSync("children", i);
                this._renderer.markToSync("attributes", i);
                this._renderer.domDocuments.add(t.ownerDocument);
                i.on("change:children", (t, e) => this._renderer.markToSync("children", e));
                i.on("change:attributes", (t, e) => this._renderer.markToSync("attributes", e));
                i.on("change:text", (t, e) => this._renderer.markToSync("text", e));
                i.on("change:isReadOnly", () => this.change(o));
                i.on("change", () => {
                    this._hasChangedSinceTheLastRendering = true
                });
                for (const i of this._observers.values()) {
                    i.observe(t, e)
                }
            }

            detachDomRoot(t) {
                const e = this.domRoots.get(t);
                Array.from(e.attributes).forEach(({name: t}) => e.removeAttribute(t));
                const i = this._initialDomRootAttributes.get(e);
                for (const t in i) {
                    e.setAttribute(t, i[t])
                }
                this.domRoots.delete(t);
                this.domConverter.unbindDomElement(e)
            }

            getDomRoot(t = "main") {
                return this.domRoots.get(t)
            }

            addObserver(t) {
                let e = this._observers.get(t);
                if (e) {
                    return e
                }
                e = new t(this);
                this._observers.set(t, e);
                for (const [t, i] of this.domRoots) {
                    e.observe(i, t)
                }
                e.enable();
                return e
            }

            getObserver(t) {
                return this._observers.get(t)
            }

            disableObservers() {
                for (const t of this._observers.values()) {
                    t.disable()
                }
            }

            enableObservers() {
                for (const t of this._observers.values()) {
                    t.enable()
                }
            }

            scrollToTheSelection() {
                const t = this.document.selection.getFirstRange();
                if (t) {
                    Ah({target: this.domConverter.viewRangeToDom(t), viewportOffset: 20})
                }
            }

            focus() {
                if (!this.document.isFocused) {
                    const t = this.document.selection.editableElement;
                    if (t) {
                        this.domConverter.focus(t);
                        this.forceRender()
                    } else {
                    }
                }
            }

            change(t) {
                if (this.isRenderingInProgress || this._postFixersInProgress) {
                    throw new ss["b"]("cannot-change-view-tree: " + "Attempting to make changes to the view when it is in an incorrect state: rendering or post-fixers are in progress. " + "This may cause some unexpected behavior and inconsistency between the DOM and the view.", this)
                }
                try {
                    if (this._ongoingChange) {
                        return t(this._writer)
                    }
                    this._ongoingChange = true;
                    const e = t(this._writer);
                    this._ongoingChange = false;
                    if (!this._renderingDisabled && this._hasChangedSinceTheLastRendering) {
                        this._postFixersInProgress = true;
                        this.document._callPostFixers(this._writer);
                        this._postFixersInProgress = false;
                        this.fire("render")
                    }
                    return e
                } catch (t) {
                    ss["b"].rethrowUnexpectedError(t, this)
                }
            }

            forceRender() {
                this._hasChangedSinceTheLastRendering = true;
                this.change(() => {
                })
            }

            destroy() {
                for (const t of this._observers.values()) {
                    t.destroy()
                }
                this.document.destroy();
                this.stopListening()
            }

            createPositionAt(t, e) {
                return dl._createAt(t, e)
            }

            createPositionAfter(t) {
                return dl._createAfter(t)
            }

            createPositionBefore(t) {
                return dl._createBefore(t)
            }

            createRange(t, e) {
                return new ul(t, e)
            }

            createRangeOn(t) {
                return ul._createOn(t)
            }

            createRangeIn(t) {
                return ul._createIn(t)
            }

            createSelection(t, e, i) {
                return new gl(t, e, i)
            }

            _disableRendering(t) {
                this._renderingDisabled = t;
                if (t == false) {
                    this.change(() => {
                    })
                }
            }

            _render() {
                this.isRenderingInProgress = true;
                this.disableObservers();
                this._renderer.render();
                this.enableObservers();
                this.isRenderingInProgress = false
            }
        }

        vs(Bh, Jc);

        class zh {
            constructor(t) {
                this.parent = null;
                this._attrs = Hs(t)
            }

            get index() {
                let t;
                if (!this.parent) {
                    return null
                }
                if ((t = this.parent.getChildIndex(this)) === null) {
                    throw new ss["b"]("model-node-not-found-in-parent: The node's parent does not contain this node.", this)
                }
                return t
            }

            get startOffset() {
                let t;
                if (!this.parent) {
                    return null
                }
                if ((t = this.parent.getChildStartOffset(this)) === null) {
                    throw new ss["b"]("model-node-not-found-in-parent: The node's parent does not contain this node.", this)
                }
                return t
            }

            get offsetSize() {
                return 1
            }

            get endOffset() {
                if (!this.parent) {
                    return null
                }
                return this.startOffset + this.offsetSize
            }

            get nextSibling() {
                const t = this.index;
                return t !== null && this.parent.getChild(t + 1) || null
            }

            get previousSibling() {
                const t = this.index;
                return t !== null && this.parent.getChild(t - 1) || null
            }

            get root() {
                let t = this;
                while (t.parent) {
                    t = t.parent
                }
                return t
            }

            isAttached() {
                return this.root.is("rootElement")
            }

            getPath() {
                const t = [];
                let e = this;
                while (e.parent) {
                    t.unshift(e.startOffset);
                    e = e.parent
                }
                return t
            }

            getAncestors(t = {includeSelf: false, parentFirst: false}) {
                const e = [];
                let i = t.includeSelf ? this : this.parent;
                while (i) {
                    e[t.parentFirst ? "push" : "unshift"](i);
                    i = i.parent
                }
                return e
            }

            getCommonAncestor(t, e = {}) {
                const i = this.getAncestors(e);
                const n = t.getAncestors(e);
                let o = 0;
                while (i[o] == n[o] && i[o]) {
                    o++
                }
                return o === 0 ? null : i[o - 1]
            }

            isBefore(t) {
                if (this == t) {
                    return false
                }
                if (this.root !== t.root) {
                    return false
                }
                const e = this.getPath();
                const i = t.getPath();
                const n = Vs(e, i);
                switch (n) {
                    case"prefix":
                        return true;
                    case"extension":
                        return false;
                    default:
                        return e[n] < i[n]
                }
            }

            isAfter(t) {
                if (this == t) {
                    return false
                }
                if (this.root !== t.root) {
                    return false
                }
                return !this.isBefore(t)
            }

            hasAttribute(t) {
                return this._attrs.has(t)
            }

            getAttribute(t) {
                return this._attrs.get(t)
            }

            getAttributes() {
                return this._attrs.entries()
            }

            getAttributeKeys() {
                return this._attrs.keys()
            }

            toJSON() {
                const t = {};
                if (this._attrs.size) {
                    t.attributes = Array.from(this._attrs).reduce((t, e) => {
                        t[e[0]] = e[1];
                        return t
                    }, {})
                }
                return t
            }

            is(t) {
                return t == "node" || t == "model:node"
            }

            _clone() {
                return new zh(this._attrs)
            }

            _remove() {
                this.parent._removeChildren(this.index)
            }

            _setAttribute(t, e) {
                this._attrs.set(t, e)
            }

            _setAttributesTo(t) {
                this._attrs = Hs(t)
            }

            _removeAttribute(t) {
                return this._attrs.delete(t)
            }

            _clearAttributes() {
                this._attrs.clear()
            }
        }

        class Lh extends zh {
            constructor(t, e) {
                super(e);
                this._data = t || ""
            }

            get offsetSize() {
                return this.data.length
            }

            get data() {
                return this._data
            }

            is(t) {
                return t == "text" || t == "model:text" || super.is(t)
            }

            toJSON() {
                const t = super.toJSON();
                t.data = this.data;
                return t
            }

            _clone() {
                return new Lh(this.data, this.getAttributes())
            }

            static fromJSON(t) {
                return new Lh(t.data, t.attributes)
            }
        }

        class Fh {
            constructor(t, e, i) {
                this.textNode = t;
                if (e < 0 || e > t.offsetSize) {
                    throw new ss["b"]("model-textproxy-wrong-offsetintext: Given offsetInText value is incorrect.", this)
                }
                if (i < 0 || e + i > t.offsetSize) {
                    throw new ss["b"]("model-textproxy-wrong-length: Given length value is incorrect.", this)
                }
                this.data = t.data.substring(e, e + i);
                this.offsetInText = e
            }

            get startOffset() {
                return this.textNode.startOffset !== null ? this.textNode.startOffset + this.offsetInText : null
            }

            get offsetSize() {
                return this.data.length
            }

            get endOffset() {
                return this.startOffset !== null ? this.startOffset + this.offsetSize : null
            }

            get isPartial() {
                return this.offsetSize !== this.textNode.offsetSize
            }

            get parent() {
                return this.textNode.parent
            }

            get root() {
                return this.textNode.root
            }

            is(t) {
                return t == "textProxy" || t == "model:textProxy"
            }

            getPath() {
                const t = this.textNode.getPath();
                if (t.length > 0) {
                    t[t.length - 1] += this.offsetInText
                }
                return t
            }

            getAncestors(t = {includeSelf: false, parentFirst: false}) {
                const e = [];
                let i = t.includeSelf ? this : this.parent;
                while (i) {
                    e[t.parentFirst ? "push" : "unshift"](i);
                    i = i.parent
                }
                return e
            }

            hasAttribute(t) {
                return this.textNode.hasAttribute(t)
            }

            getAttribute(t) {
                return this.textNode.getAttribute(t)
            }

            getAttributes() {
                return this.textNode.getAttributes()
            }

            getAttributeKeys() {
                return this.textNode.getAttributeKeys()
            }
        }

        class Dh {
            constructor(t) {
                this._nodes = [];
                if (t) {
                    this._insertNodes(0, t)
                }
            }

            [Symbol.iterator]() {
                return this._nodes[Symbol.iterator]()
            }

            get length() {
                return this._nodes.length
            }

            get maxOffset() {
                return this._nodes.reduce((t, e) => t + e.offsetSize, 0)
            }

            getNode(t) {
                return this._nodes[t] || null
            }

            getNodeIndex(t) {
                const e = this._nodes.indexOf(t);
                return e == -1 ? null : e
            }

            getNodeStartOffset(t) {
                const e = this.getNodeIndex(t);
                return e === null ? null : this._nodes.slice(0, e).reduce((t, e) => t + e.offsetSize, 0)
            }

            indexToOffset(t) {
                if (t == this._nodes.length) {
                    return this.maxOffset
                }
                const e = this._nodes[t];
                if (!e) {
                    throw new ss["b"]("model-nodelist-index-out-of-bounds: Given index cannot be found in the node list.", this)
                }
                return this.getNodeStartOffset(e)
            }

            offsetToIndex(t) {
                let e = 0;
                for (const i of this._nodes) {
                    if (t >= e && t < e + i.offsetSize) {
                        return this.getNodeIndex(i)
                    }
                    e += i.offsetSize
                }
                if (e != t) {
                    throw new ss["b"]("model-nodelist-offset-out-of-bounds: Given offset cannot be found in the node list.", this, {
                        offset: t,
                        nodeList: this
                    })
                }
                return this.length
            }

            _insertNodes(t, e) {
                for (const t of e) {
                    if (!(t instanceof zh)) {
                        throw new ss["b"]("model-nodelist-insertNodes-not-node: Trying to insert an object which is not a Node instance.", this)
                    }
                }
                this._nodes.splice(t, 0, ...e)
            }

            _removeNodes(t, e = 1) {
                return this._nodes.splice(t, e)
            }

            toJSON() {
                return this._nodes.map(t => t.toJSON())
            }
        }

        class jh extends zh {
            constructor(t, e, i) {
                super(e);
                this.name = t;
                this._children = new Dh;
                if (i) {
                    this._insertChild(0, i)
                }
            }

            get childCount() {
                return this._children.length
            }

            get maxOffset() {
                return this._children.maxOffset
            }

            get isEmpty() {
                return this.childCount === 0
            }

            is(t, e = null) {
                const i = t.replace(/^model:/, "");
                if (!e) {
                    return i == "element" || i == this.name || super.is(t)
                } else {
                    return i == "element" && e == this.name
                }
            }

            getChild(t) {
                return this._children.getNode(t)
            }

            getChildren() {
                return this._children[Symbol.iterator]()
            }

            getChildIndex(t) {
                return this._children.getNodeIndex(t)
            }

            getChildStartOffset(t) {
                return this._children.getNodeStartOffset(t)
            }

            offsetToIndex(t) {
                return this._children.offsetToIndex(t)
            }

            getNodeByPath(t) {
                let e = this;
                for (const i of t) {
                    e = e.getChild(e.offsetToIndex(i))
                }
                return e
            }

            toJSON() {
                const t = super.toJSON();
                t.name = this.name;
                if (this._children.length > 0) {
                    t.children = [];
                    for (const e of this._children) {
                        t.children.push(e.toJSON())
                    }
                }
                return t
            }

            _clone(t = false) {
                const e = t ? Array.from(this._children).map(t => t._clone(true)) : null;
                return new jh(this.name, this.getAttributes(), e)
            }

            _appendChild(t) {
                this._insertChild(this.childCount, t)
            }

            _insertChild(t, e) {
                const i = Hh(e);
                for (const t of i) {
                    if (t.parent !== null) {
                        t._remove()
                    }
                    t.parent = this
                }
                this._children._insertNodes(t, i)
            }

            _removeChildren(t, e = 1) {
                const i = this._children._removeNodes(t, e);
                for (const t of i) {
                    t.parent = null
                }
                return i
            }

            static fromJSON(t) {
                let e = null;
                if (t.children) {
                    e = [];
                    for (const i of t.children) {
                        if (i.name) {
                            e.push(jh.fromJSON(i))
                        } else {
                            e.push(Lh.fromJSON(i))
                        }
                    }
                }
                return new jh(t.name, t.attributes, e)
            }
        }

        function Hh(t) {
            if (typeof t == "string") {
                return [new Lh(t)]
            }
            if (!js(t)) {
                t = [t]
            }
            return Array.from(t).map(t => {
                if (typeof t == "string") {
                    return new Lh(t)
                }
                if (t instanceof Fh) {
                    return new Lh(t.data, t.getAttributes())
                }
                return t
            })
        }

        class Wh {
            constructor(t = {}) {
                if (!t.boundaries && !t.startPosition) {
                    throw new ss["b"]("model-tree-walker-no-start-position: Neither boundaries nor starting position have been defined.", null)
                }
                const e = t.direction || "forward";
                if (e != "forward" && e != "backward") {
                    throw new ss["b"]("model-tree-walker-unknown-direction: Only `backward` and `forward` direction allowed.", t, {direction: e})
                }
                this.direction = e;
                this.boundaries = t.boundaries || null;
                if (t.startPosition) {
                    this.position = t.startPosition.clone()
                } else {
                    this.position = Uh._createAt(this.boundaries[this.direction == "backward" ? "end" : "start"])
                }
                this.position.stickiness = "toNone";
                this.singleCharacters = !!t.singleCharacters;
                this.shallow = !!t.shallow;
                this.ignoreElementEnd = !!t.ignoreElementEnd;
                this._boundaryStartParent = this.boundaries ? this.boundaries.start.parent : null;
                this._boundaryEndParent = this.boundaries ? this.boundaries.end.parent : null;
                this._visitedParent = this.position.parent
            }

            [Symbol.iterator]() {
                return this
            }

            skip(t) {
                let e, i, n, o;
                do {
                    n = this.position;
                    o = this._visitedParent;
                    ({done: e, value: i} = this.next())
                } while (!e && t(i));
                if (!e) {
                    this.position = n;
                    this._visitedParent = o
                }
            }

            next() {
                if (this.direction == "forward") {
                    return this._next()
                } else {
                    return this._previous()
                }
            }

            _next() {
                const t = this.position;
                const e = this.position.clone();
                const i = this._visitedParent;
                if (i.parent === null && e.offset === i.maxOffset) {
                    return {done: true}
                }
                if (i === this._boundaryEndParent && e.offset == this.boundaries.end.offset) {
                    return {done: true}
                }
                const n = e.textNode ? e.textNode : e.nodeAfter;
                if (n instanceof jh) {
                    if (!this.shallow) {
                        e.path.push(0);
                        this._visitedParent = n
                    } else {
                        e.offset++
                    }
                    this.position = e;
                    return qh("elementStart", n, t, e, 1)
                } else if (n instanceof Lh) {
                    let o;
                    if (this.singleCharacters) {
                        o = 1
                    } else {
                        let t = n.endOffset;
                        if (this._boundaryEndParent == i && this.boundaries.end.offset < t) {
                            t = this.boundaries.end.offset
                        }
                        o = t - e.offset
                    }
                    const r = e.offset - n.startOffset;
                    const s = new Fh(n, r, o);
                    e.offset += o;
                    this.position = e;
                    return qh("text", s, t, e, o)
                } else {
                    e.path.pop();
                    e.offset++;
                    this.position = e;
                    this._visitedParent = i.parent;
                    if (this.ignoreElementEnd) {
                        return this._next()
                    } else {
                        return qh("elementEnd", i, t, e)
                    }
                }
            }

            _previous() {
                const t = this.position;
                const e = this.position.clone();
                const i = this._visitedParent;
                if (i.parent === null && e.offset === 0) {
                    return {done: true}
                }
                if (i == this._boundaryStartParent && e.offset == this.boundaries.start.offset) {
                    return {done: true}
                }
                const n = e.textNode ? e.textNode : e.nodeBefore;
                if (n instanceof jh) {
                    e.offset--;
                    if (!this.shallow) {
                        e.path.push(n.maxOffset);
                        this.position = e;
                        this._visitedParent = n;
                        if (this.ignoreElementEnd) {
                            return this._previous()
                        } else {
                            return qh("elementEnd", n, t, e)
                        }
                    } else {
                        this.position = e;
                        return qh("elementStart", n, t, e, 1)
                    }
                } else if (n instanceof Lh) {
                    let o;
                    if (this.singleCharacters) {
                        o = 1
                    } else {
                        let t = n.startOffset;
                        if (this._boundaryStartParent == i && this.boundaries.start.offset > t) {
                            t = this.boundaries.start.offset
                        }
                        o = e.offset - t
                    }
                    const r = e.offset - n.startOffset;
                    const s = new Fh(n, r - o, o);
                    e.offset -= o;
                    this.position = e;
                    return qh("text", s, t, e, o)
                } else {
                    e.path.pop();
                    this.position = e;
                    this._visitedParent = i.parent;
                    return qh("elementStart", i, t, e, 1)
                }
            }
        }

        function qh(t, e, i, n, o) {
            return {done: false, value: {type: t, item: e, previousPosition: i, nextPosition: n, length: o}}
        }

        class Uh {
            constructor(t, e, i = "toNone") {
                if (!t.is("element") && !t.is("documentFragment")) {
                    throw new ss["b"]("model-position-root-invalid: Position root invalid.", t)
                }
                if (!(e instanceof Array) || e.length === 0) {
                    throw new ss["b"]("model-position-path-incorrect-format: Position path must be an array with at least one item.", t, {path: e})
                }
                e = t.getPath().concat(e);
                t = t.root;
                this.root = t;
                this.path = e;
                this.stickiness = i
            }

            get offset() {
                return Ca(this.path)
            }

            set offset(t) {
                this.path[this.path.length - 1] = t
            }

            get parent() {
                let t = this.root;
                for (let e = 0; e < this.path.length - 1; e++) {
                    t = t.getChild(t.offsetToIndex(this.path[e]));
                    if (!t) {
                        throw new ss["b"]("model-position-path-incorrect: The position's path is incorrect.", this, {position: this})
                    }
                }
                if (t.is("text")) {
                    throw new ss["b"]("model-position-path-incorrect: The position's path is incorrect.", this, {position: this})
                }
                return t
            }

            get index() {
                return this.parent.offsetToIndex(this.offset)
            }

            get textNode() {
                const t = this.parent.getChild(this.index);
                return t instanceof Lh && t.startOffset < this.offset ? t : null
            }

            get nodeAfter() {
                return this.textNode === null ? this.parent.getChild(this.index) : null
            }

            get nodeBefore() {
                return this.textNode === null ? this.parent.getChild(this.index - 1) : null
            }

            get isAtStart() {
                return this.offset === 0
            }

            get isAtEnd() {
                return this.offset == this.parent.maxOffset
            }

            compareWith(t) {
                if (this.root != t.root) {
                    return "different"
                }
                const e = Vs(this.path, t.path);
                switch (e) {
                    case"same":
                        return "same";
                    case"prefix":
                        return "before";
                    case"extension":
                        return "after";
                    default:
                        return this.path[e] < t.path[e] ? "before" : "after"
                }
            }

            getLastMatchingPosition(t, e = {}) {
                e.startPosition = this;
                const i = new Wh(e);
                i.skip(t);
                return i.position
            }

            getParentPath() {
                return this.path.slice(0, -1)
            }

            getAncestors() {
                if (this.parent.is("documentFragment")) {
                    return [this.parent]
                } else {
                    return this.parent.getAncestors({includeSelf: true})
                }
            }

            getCommonPath(t) {
                if (this.root != t.root) {
                    return []
                }
                const e = Vs(this.path, t.path);
                const i = typeof e == "string" ? Math.min(this.path.length, t.path.length) : e;
                return this.path.slice(0, i)
            }

            getCommonAncestor(t) {
                const e = this.getAncestors();
                const i = t.getAncestors();
                let n = 0;
                while (e[n] == i[n] && e[n]) {
                    n++
                }
                return n === 0 ? null : e[n - 1]
            }

            getShiftedBy(t) {
                const e = this.clone();
                const i = e.offset + t;
                e.offset = i < 0 ? 0 : i;
                return e
            }

            isAfter(t) {
                return this.compareWith(t) == "after"
            }

            isBefore(t) {
                return this.compareWith(t) == "before"
            }

            isEqual(t) {
                return this.compareWith(t) == "same"
            }

            isTouching(t) {
                let e = null;
                let i = null;
                const n = this.compareWith(t);
                switch (n) {
                    case"same":
                        return true;
                    case"before":
                        e = Uh._createAt(this);
                        i = Uh._createAt(t);
                        break;
                    case"after":
                        e = Uh._createAt(t);
                        i = Uh._createAt(this);
                        break;
                    default:
                        return false
                }
                let o = e.parent;
                while (e.path.length + i.path.length) {
                    if (e.isEqual(i)) {
                        return true
                    }
                    if (e.path.length > i.path.length) {
                        if (e.offset !== o.maxOffset) {
                            return false
                        }
                        e.path = e.path.slice(0, -1);
                        o = o.parent;
                        e.offset++
                    } else {
                        if (i.offset !== 0) {
                            return false
                        }
                        i.path = i.path.slice(0, -1)
                    }
                }
            }

            is(t) {
                return t == "position" || t == "model:position"
            }

            hasSameParentAs(t) {
                if (this.root !== t.root) {
                    return false
                }
                const e = this.getParentPath();
                const i = t.getParentPath();
                return Vs(e, i) == "same"
            }

            getTransformedByOperation(t) {
                let e;
                switch (t.type) {
                    case"insert":
                        e = this._getTransformedByInsertOperation(t);
                        break;
                    case"move":
                    case"remove":
                    case"reinsert":
                        e = this._getTransformedByMoveOperation(t);
                        break;
                    case"split":
                        e = this._getTransformedBySplitOperation(t);
                        break;
                    case"merge":
                        e = this._getTransformedByMergeOperation(t);
                        break;
                    default:
                        e = Uh._createAt(this);
                        break
                }
                return e
            }

            _getTransformedByInsertOperation(t) {
                return this._getTransformedByInsertion(t.position, t.howMany)
            }

            _getTransformedByMoveOperation(t) {
                return this._getTransformedByMove(t.sourcePosition, t.targetPosition, t.howMany)
            }

            _getTransformedBySplitOperation(t) {
                const e = t.movedRange;
                const i = e.containsPosition(this) || e.start.isEqual(this) && this.stickiness == "toNext";
                if (i) {
                    return this._getCombined(t.splitPosition, t.moveTargetPosition)
                } else {
                    if (t.graveyardPosition) {
                        return this._getTransformedByMove(t.graveyardPosition, t.insertionPosition, 1)
                    } else {
                        return this._getTransformedByInsertion(t.insertionPosition, 1)
                    }
                }
            }

            _getTransformedByMergeOperation(t) {
                const e = t.movedRange;
                const i = e.containsPosition(this) || e.start.isEqual(this);
                let n;
                if (i) {
                    n = this._getCombined(t.sourcePosition, t.targetPosition);
                    if (t.sourcePosition.isBefore(t.targetPosition)) {
                        n = n._getTransformedByDeletion(t.deletionPosition, 1)
                    }
                } else if (this.isEqual(t.deletionPosition)) {
                    n = Uh._createAt(t.deletionPosition)
                } else {
                    n = this._getTransformedByMove(t.deletionPosition, t.graveyardPosition, 1)
                }
                return n
            }

            _getTransformedByDeletion(t, e) {
                const i = Uh._createAt(this);
                if (this.root != t.root) {
                    return i
                }
                if (Vs(t.getParentPath(), this.getParentPath()) == "same") {
                    if (t.offset < this.offset) {
                        if (t.offset + e > this.offset) {
                            return null
                        } else {
                            i.offset -= e
                        }
                    }
                } else if (Vs(t.getParentPath(), this.getParentPath()) == "prefix") {
                    const n = t.path.length - 1;
                    if (t.offset <= this.path[n]) {
                        if (t.offset + e > this.path[n]) {
                            return null
                        } else {
                            i.path[n] -= e
                        }
                    }
                }
                return i
            }

            _getTransformedByInsertion(t, e) {
                const i = Uh._createAt(this);
                if (this.root != t.root) {
                    return i
                }
                if (Vs(t.getParentPath(), this.getParentPath()) == "same") {
                    if (t.offset < this.offset || t.offset == this.offset && this.stickiness != "toPrevious") {
                        i.offset += e
                    }
                } else if (Vs(t.getParentPath(), this.getParentPath()) == "prefix") {
                    const n = t.path.length - 1;
                    if (t.offset <= this.path[n]) {
                        i.path[n] += e
                    }
                }
                return i
            }

            _getTransformedByMove(t, e, i) {
                e = e._getTransformedByDeletion(t, i);
                if (t.isEqual(e)) {
                    return Uh._createAt(this)
                }
                const n = this._getTransformedByDeletion(t, i);
                const o = n === null || t.isEqual(this) && this.stickiness == "toNext" || t.getShiftedBy(i).isEqual(this) && this.stickiness == "toPrevious";
                if (o) {
                    return this._getCombined(t, e)
                } else {
                    return n._getTransformedByInsertion(e, i)
                }
            }

            _getCombined(t, e) {
                const i = t.path.length - 1;
                const n = Uh._createAt(e);
                n.stickiness = this.stickiness;
                n.offset = n.offset + this.path[i] - t.offset;
                n.path = n.path.concat(this.path.slice(i + 1));
                return n
            }

            toJSON() {
                return {root: this.root.toJSON(), path: Array.from(this.path), stickiness: this.stickiness}
            }

            clone() {
                return new this.constructor(this.root, this.path, this.stickiness)
            }

            static _createAt(t, e, i = "toNone") {
                if (t instanceof Uh) {
                    return new Uh(t.root, t.path, t.stickiness)
                } else {
                    const n = t;
                    if (e == "end") {
                        e = n.maxOffset
                    } else if (e == "before") {
                        return this._createBefore(n, i)
                    } else if (e == "after") {
                        return this._createAfter(n, i)
                    } else if (e !== 0 && !e) {
                        throw new ss["b"]("model-createPositionAt-offset-required: " + "Model#createPositionAt() requires the offset when the first parameter is a model item.", [this, t])
                    }
                    if (!n.is("element") && !n.is("documentFragment")) {
                        throw new ss["b"]("model-position-parent-incorrect: Position parent have to be a element or document fragment.", [this, t])
                    }
                    const o = n.getPath();
                    o.push(e);
                    return new this(n.root, o, i)
                }
            }

            static _createAfter(t, e) {
                if (!t.parent) {
                    throw new ss["b"]("model-position-after-root: You cannot make a position after root.", [this, t], {root: t})
                }
                return this._createAt(t.parent, t.endOffset, e)
            }

            static _createBefore(t, e) {
                if (!t.parent) {
                    throw new ss["b"]("model-position-before-root: You cannot make a position before root.", t, {root: t})
                }
                return this._createAt(t.parent, t.startOffset, e)
            }

            static fromJSON(t, e) {
                if (t.root === "$graveyard") {
                    const i = new Uh(e.graveyard, t.path);
                    i.stickiness = t.stickiness;
                    return i
                }
                if (!e.getRoot(t.root)) {
                    throw new ss["b"]("model-position-fromjson-no-root: Cannot create position for document. Root with specified name does not exist.", e, {rootName: t.root})
                }
                return new Uh(e.getRoot(t.root), t.path, t.stickiness)
            }
        }

        class $h {
            constructor(t, e = null) {
                this.start = Uh._createAt(t);
                this.end = e ? Uh._createAt(e) : Uh._createAt(t);
                this.start.stickiness = this.isCollapsed ? "toNone" : "toNext";
                this.end.stickiness = this.isCollapsed ? "toNone" : "toPrevious"
            }

            * [Symbol.iterator]() {
                yield* new Wh({boundaries: this, ignoreElementEnd: true})
            }

            get isCollapsed() {
                return this.start.isEqual(this.end)
            }

            get isFlat() {
                const t = this.start.getParentPath();
                const e = this.end.getParentPath();
                return Vs(t, e) == "same"
            }

            get root() {
                return this.start.root
            }

            containsPosition(t) {
                return t.isAfter(this.start) && t.isBefore(this.end)
            }

            containsRange(t, e = false) {
                if (t.isCollapsed) {
                    e = false
                }
                const i = this.containsPosition(t.start) || e && this.start.isEqual(t.start);
                const n = this.containsPosition(t.end) || e && this.end.isEqual(t.end);
                return i && n
            }

            containsItem(t) {
                const e = Uh._createBefore(t);
                return this.containsPosition(e) || this.start.isEqual(e)
            }

            is(t) {
                return t == "range" || t == "model:range"
            }

            isEqual(t) {
                return this.start.isEqual(t.start) && this.end.isEqual(t.end)
            }

            isIntersecting(t) {
                return this.start.isBefore(t.end) && this.end.isAfter(t.start)
            }

            getDifference(t) {
                const e = [];
                if (this.isIntersecting(t)) {
                    if (this.containsPosition(t.start)) {
                        e.push(new $h(this.start, t.start))
                    }
                    if (this.containsPosition(t.end)) {
                        e.push(new $h(t.end, this.end))
                    }
                } else {
                    e.push(new $h(this.start, this.end))
                }
                return e
            }

            getIntersection(t) {
                if (this.isIntersecting(t)) {
                    let e = this.start;
                    let i = this.end;
                    if (this.containsPosition(t.start)) {
                        e = t.start
                    }
                    if (this.containsPosition(t.end)) {
                        i = t.end
                    }
                    return new $h(e, i)
                }
                return null
            }

            getMinimalFlatRanges() {
                const t = [];
                const e = this.start.getCommonPath(this.end).length;
                const i = Uh._createAt(this.start);
                let n = i.parent;
                while (i.path.length > e + 1) {
                    const e = n.maxOffset - i.offset;
                    if (e !== 0) {
                        t.push(new $h(i, i.getShiftedBy(e)))
                    }
                    i.path = i.path.slice(0, -1);
                    i.offset++;
                    n = n.parent
                }
                while (i.path.length <= this.end.path.length) {
                    const e = this.end.path[i.path.length - 1];
                    const n = e - i.offset;
                    if (n !== 0) {
                        t.push(new $h(i, i.getShiftedBy(n)))
                    }
                    i.offset = e;
                    i.path.push(0)
                }
                return t
            }

            getWalker(t = {}) {
                t.boundaries = this;
                return new Wh(t)
            }

            * getItems(t = {}) {
                t.boundaries = this;
                t.ignoreElementEnd = true;
                const e = new Wh(t);
                for (const t of e) {
                    yield t.item
                }
            }

            * getPositions(t = {}) {
                t.boundaries = this;
                const e = new Wh(t);
                yield e.position;
                for (const t of e) {
                    yield t.nextPosition
                }
            }

            getTransformedByOperation(t) {
                switch (t.type) {
                    case"insert":
                        return this._getTransformedByInsertOperation(t);
                    case"move":
                    case"remove":
                    case"reinsert":
                        return this._getTransformedByMoveOperation(t);
                    case"split":
                        return [this._getTransformedBySplitOperation(t)];
                    case"merge":
                        return [this._getTransformedByMergeOperation(t)]
                }
                return [new $h(this.start, this.end)]
            }

            getTransformedByOperations(t) {
                const e = [new $h(this.start, this.end)];
                for (const i of t) {
                    for (let t = 0; t < e.length; t++) {
                        const n = e[t].getTransformedByOperation(i);
                        e.splice(t, 1, ...n);
                        t += n.length - 1
                    }
                }
                for (let t = 0; t < e.length; t++) {
                    const i = e[t];
                    for (let n = t + 1; n < e.length; n++) {
                        const t = e[n];
                        if (i.containsRange(t) || t.containsRange(i) || i.isEqual(t)) {
                            e.splice(n, 1)
                        }
                    }
                }
                return e
            }

            getCommonAncestor() {
                return this.start.getCommonAncestor(this.end)
            }

            getContainedElement() {
                if (this.isCollapsed) {
                    return null
                }
                const t = this.start.nodeAfter;
                const e = this.end.nodeBefore;
                if (t && t.is("element") && t === e) {
                    return t
                }
                return null
            }

            toJSON() {
                return {start: this.start.toJSON(), end: this.end.toJSON()}
            }

            clone() {
                return new this.constructor(this.start, this.end)
            }

            _getTransformedByInsertOperation(t, e = false) {
                return this._getTransformedByInsertion(t.position, t.howMany, e)
            }

            _getTransformedByMoveOperation(t, e = false) {
                const i = t.sourcePosition;
                const n = t.howMany;
                const o = t.targetPosition;
                return this._getTransformedByMove(i, o, n, e)
            }

            _getTransformedBySplitOperation(t) {
                const e = this.start._getTransformedBySplitOperation(t);
                let i = this.end._getTransformedBySplitOperation(t);
                if (this.end.isEqual(t.insertionPosition)) {
                    i = this.end.getShiftedBy(1)
                }
                if (e.root != i.root) {
                    i = this.end.getShiftedBy(-1)
                }
                return new $h(e, i)
            }

            _getTransformedByMergeOperation(t) {
                if (this.start.isEqual(t.targetPosition) && this.end.isEqual(t.deletionPosition)) {
                    return new $h(this.start)
                }
                let e = this.start._getTransformedByMergeOperation(t);
                let i = this.end._getTransformedByMergeOperation(t);
                if (e.root != i.root) {
                    i = this.end.getShiftedBy(-1)
                }
                if (e.isAfter(i)) {
                    if (t.sourcePosition.isBefore(t.targetPosition)) {
                        e = Uh._createAt(i);
                        e.offset = 0
                    } else {
                        if (!t.deletionPosition.isEqual(e)) {
                            i = t.deletionPosition
                        }
                        e = t.targetPosition
                    }
                    return new $h(e, i)
                }
                return new $h(e, i)
            }

            _getTransformedByInsertion(t, e, i = false) {
                if (i && this.containsPosition(t)) {
                    return [new $h(this.start, t), new $h(t.getShiftedBy(e), this.end._getTransformedByInsertion(t, e))]
                } else {
                    const i = new $h(this.start, this.end);
                    i.start = i.start._getTransformedByInsertion(t, e);
                    i.end = i.end._getTransformedByInsertion(t, e);
                    return [i]
                }
            }

            _getTransformedByMove(t, e, i, n = false) {
                if (this.isCollapsed) {
                    const n = this.start._getTransformedByMove(t, e, i);
                    return [new $h(n)]
                }
                const o = $h._createFromPositionAndShift(t, i);
                const r = e._getTransformedByDeletion(t, i);
                if (this.containsPosition(e) && !n) {
                    if (o.containsPosition(this.start) || o.containsPosition(this.end)) {
                        const n = this.start._getTransformedByMove(t, e, i);
                        const o = this.end._getTransformedByMove(t, e, i);
                        return [new $h(n, o)]
                    }
                }
                let s;
                const a = this.getDifference(o);
                let c = null;
                const l = this.getIntersection(o);
                if (a.length == 1) {
                    c = new $h(a[0].start._getTransformedByDeletion(t, i), a[0].end._getTransformedByDeletion(t, i))
                } else if (a.length == 2) {
                    c = new $h(this.start, this.end._getTransformedByDeletion(t, i))
                }
                if (c) {
                    s = c._getTransformedByInsertion(r, i, l !== null || n)
                } else {
                    s = []
                }
                if (l) {
                    const t = new $h(l.start._getCombined(o.start, r), l.end._getCombined(o.start, r));
                    if (s.length == 2) {
                        s.splice(1, 0, t)
                    } else {
                        s.push(t)
                    }
                }
                return s
            }

            _getTransformedByDeletion(t, e) {
                let i = this.start._getTransformedByDeletion(t, e);
                let n = this.end._getTransformedByDeletion(t, e);
                if (i == null && n == null) {
                    return null
                }
                if (i == null) {
                    i = t
                }
                if (n == null) {
                    n = t
                }
                return new $h(i, n)
            }

            static _createFromPositionAndShift(t, e) {
                const i = t;
                const n = t.getShiftedBy(e);
                return e > 0 ? new this(i, n) : new this(n, i)
            }

            static _createIn(t) {
                return new this(Uh._createAt(t, 0), Uh._createAt(t, t.maxOffset))
            }

            static _createOn(t) {
                return this._createFromPositionAndShift(Uh._createBefore(t), t.offsetSize)
            }

            static _createFromRanges(t) {
                if (t.length === 0) {
                    throw new ss["b"]("range-create-from-ranges-empty-array: At least one range has to be passed.", null)
                } else if (t.length == 1) {
                    return t[0].clone()
                }
                const e = t[0];
                t.sort((t, e) => t.start.isAfter(e.start) ? 1 : -1);
                const i = t.indexOf(e);
                const n = new this(e.start, e.end);
                if (i > 0) {
                    for (let e = i - 1; true; e++) {
                        if (t[e].end.isEqual(n.start)) {
                            n.start = Uh._createAt(t[e].start)
                        } else {
                            break
                        }
                    }
                }
                for (let e = i + 1; e < t.length; e++) {
                    if (t[e].start.isEqual(n.end)) {
                        n.end = Uh._createAt(t[e].end)
                    } else {
                        break
                    }
                }
                return n
            }

            static fromJSON(t, e) {
                return new this(Uh.fromJSON(t.start, e), Uh.fromJSON(t.end, e))
            }
        }

        class Gh {
            constructor() {
                this._modelToViewMapping = new WeakMap;
                this._viewToModelMapping = new WeakMap;
                this._viewToModelLengthCallbacks = new Map;
                this._markerNameToElements = new Map;
                this._elementToMarkerNames = new Map;
                this._unboundMarkerNames = new Set;
                this.on("modelToViewPosition", (t, e) => {
                    if (e.viewPosition) {
                        return
                    }
                    const i = this._modelToViewMapping.get(e.modelPosition.parent);
                    e.viewPosition = this._findPositionIn(i, e.modelPosition.offset)
                }, {priority: "low"});
                this.on("viewToModelPosition", (t, e) => {
                    if (e.modelPosition) {
                        return
                    }
                    const i = this.findMappedViewAncestor(e.viewPosition);
                    const n = this._viewToModelMapping.get(i);
                    const o = this._toModelOffset(e.viewPosition.parent, e.viewPosition.offset, i);
                    e.modelPosition = Uh._createAt(n, o)
                }, {priority: "low"})
            }

            bindElements(t, e) {
                this._modelToViewMapping.set(t, e);
                this._viewToModelMapping.set(e, t)
            }

            unbindViewElement(t) {
                const e = this.toModelElement(t);
                this._viewToModelMapping.delete(t);
                if (this._elementToMarkerNames.has(t)) {
                    for (const e of this._elementToMarkerNames.get(t)) {
                        this._unboundMarkerNames.add(e)
                    }
                }
                if (this._modelToViewMapping.get(e) == t) {
                    this._modelToViewMapping.delete(e)
                }
            }

            unbindModelElement(t) {
                const e = this.toViewElement(t);
                this._modelToViewMapping.delete(t);
                if (this._viewToModelMapping.get(e) == t) {
                    this._viewToModelMapping.delete(e)
                }
            }

            bindElementToMarker(t, e) {
                const i = this._markerNameToElements.get(e) || new Set;
                i.add(t);
                const n = this._elementToMarkerNames.get(t) || new Set;
                n.add(e);
                this._markerNameToElements.set(e, i);
                this._elementToMarkerNames.set(t, n)
            }

            unbindElementFromMarkerName(t, e) {
                const i = this._markerNameToElements.get(e);
                if (i) {
                    i.delete(t);
                    if (i.size == 0) {
                        this._markerNameToElements.delete(e)
                    }
                }
                const n = this._elementToMarkerNames.get(t);
                if (n) {
                    n.delete(e);
                    if (n.size == 0) {
                        this._elementToMarkerNames.delete(t)
                    }
                }
            }

            flushUnboundMarkerNames() {
                const t = Array.from(this._unboundMarkerNames);
                this._unboundMarkerNames.clear();
                return t
            }

            clearBindings() {
                this._modelToViewMapping = new WeakMap;
                this._viewToModelMapping = new WeakMap;
                this._markerNameToElements = new Map;
                this._elementToMarkerNames = new Map;
                this._unboundMarkerNames = new Set
            }

            toModelElement(t) {
                return this._viewToModelMapping.get(t)
            }

            toViewElement(t) {
                return this._modelToViewMapping.get(t)
            }

            toModelRange(t) {
                return new $h(this.toModelPosition(t.start), this.toModelPosition(t.end))
            }

            toViewRange(t) {
                return new ul(this.toViewPosition(t.start), this.toViewPosition(t.end))
            }

            toModelPosition(t) {
                const e = {viewPosition: t, mapper: this};
                this.fire("viewToModelPosition", e);
                return e.modelPosition
            }

            toViewPosition(t, e = {isPhantom: false}) {
                const i = {modelPosition: t, mapper: this, isPhantom: e.isPhantom};
                this.fire("modelToViewPosition", i);
                return i.viewPosition
            }

            markerNameToElements(t) {
                const e = this._markerNameToElements.get(t);
                if (!e) {
                    return null
                }
                const i = new Set;
                for (const t of e) {
                    if (t.is("attributeElement")) {
                        for (const e of t.getElementsWithSameId()) {
                            i.add(e)
                        }
                    } else {
                        i.add(t)
                    }
                }
                return i
            }

            registerViewToModelLength(t, e) {
                this._viewToModelLengthCallbacks.set(t, e)
            }

            findMappedViewAncestor(t) {
                let e = t.parent;
                while (!this._viewToModelMapping.has(e)) {
                    e = e.parent
                }
                return e
            }

            _toModelOffset(t, e, i) {
                if (i != t) {
                    const n = this._toModelOffset(t.parent, t.index, i);
                    const o = this._toModelOffset(t, e, t);
                    return n + o
                }
                if (t.is("text")) {
                    return e
                }
                let n = 0;
                for (let i = 0; i < e; i++) {
                    n += this.getModelLength(t.getChild(i))
                }
                return n
            }

            getModelLength(t) {
                if (this._viewToModelLengthCallbacks.get(t.name)) {
                    const e = this._viewToModelLengthCallbacks.get(t.name);
                    return e(t)
                } else if (this._viewToModelMapping.has(t)) {
                    return 1
                } else if (t.is("text")) {
                    return t.data.length
                } else if (t.is("uiElement")) {
                    return 0
                } else {
                    let e = 0;
                    for (const i of t.getChildren()) {
                        e += this.getModelLength(i)
                    }
                    return e
                }
            }

            _findPositionIn(t, e) {
                let i;
                let n = 0;
                let o = 0;
                let r = 0;
                if (t.is("text")) {
                    return new dl(t, e)
                }
                while (o < e) {
                    i = t.getChild(r);
                    n = this.getModelLength(i);
                    o += n;
                    r++
                }
                if (o == e) {
                    return this._moveViewPositionToTextNode(new dl(t, r))
                } else {
                    return this._findPositionIn(i, e - (o - n))
                }
            }

            _moveViewPositionToTextNode(t) {
                const e = t.nodeBefore;
                const i = t.nodeAfter;
                if (e instanceof Ls) {
                    return new dl(e, e.data.length)
                } else if (i instanceof Ls) {
                    return new dl(i, 0)
                }
                return t
            }
        }

        vs(Gh, ds);

        class Kh {
            constructor() {
                this._consumable = new Map;
                this._textProxyRegistry = new Map
            }

            add(t, e) {
                e = Jh(e);
                if (t instanceof Fh) {
                    t = this._getSymbolForTextProxy(t)
                }
                if (!this._consumable.has(t)) {
                    this._consumable.set(t, new Map)
                }
                this._consumable.get(t).set(e, true)
            }

            consume(t, e) {
                e = Jh(e);
                if (t instanceof Fh) {
                    t = this._getSymbolForTextProxy(t)
                }
                if (this.test(t, e)) {
                    this._consumable.get(t).set(e, false);
                    return true
                } else {
                    return false
                }
            }

            test(t, e) {
                e = Jh(e);
                if (t instanceof Fh) {
                    t = this._getSymbolForTextProxy(t)
                }
                const i = this._consumable.get(t);
                if (i === undefined) {
                    return null
                }
                const n = i.get(e);
                if (n === undefined) {
                    return null
                }
                return n
            }

            revert(t, e) {
                e = Jh(e);
                if (t instanceof Fh) {
                    t = this._getSymbolForTextProxy(t)
                }
                const i = this.test(t, e);
                if (i === false) {
                    this._consumable.get(t).set(e, true);
                    return true
                } else if (i === true) {
                    return false
                }
                return null
            }

            _getSymbolForTextProxy(t) {
                let e = null;
                const i = this._textProxyRegistry.get(t.startOffset);
                if (i) {
                    const n = i.get(t.endOffset);
                    if (n) {
                        e = n.get(t.parent)
                    }
                }
                if (!e) {
                    e = this._addSymbolForTextProxy(t.startOffset, t.endOffset, t.parent)
                }
                return e
            }

            _addSymbolForTextProxy(t, e, i) {
                const n = Symbol("textProxySymbol");
                let o, r;
                o = this._textProxyRegistry.get(t);
                if (!o) {
                    o = new Map;
                    this._textProxyRegistry.set(t, o)
                }
                r = o.get(e);
                if (!r) {
                    r = new Map;
                    o.set(e, r)
                }
                r.set(i, n);
                return n
            }
        }

        function Jh(t) {
            const e = t.split(":");
            return e.length > 1 ? e[0] + ":" + e[1] : e[0]
        }

        class Yh {
            constructor(t) {
                this.conversionApi = qc({dispatcher: this}, t)
            }

            convertChanges(t, e, i) {
                for (const e of t.getMarkersToRemove()) {
                    this.convertMarkerRemove(e.name, e.range, i)
                }
                for (const e of t.getChanges()) {
                    if (e.type == "insert") {
                        this.convertInsert($h._createFromPositionAndShift(e.position, e.length), i)
                    } else if (e.type == "remove") {
                        this.convertRemove(e.position, e.length, e.name, i)
                    } else {
                        this.convertAttribute(e.range, e.attributeKey, e.attributeOldValue, e.attributeNewValue, i)
                    }
                }
                for (const t of this.conversionApi.mapper.flushUnboundMarkerNames()) {
                    const n = e.get(t).getRange();
                    this.convertMarkerRemove(t, n, i);
                    this.convertMarkerAdd(t, n, i)
                }
                for (const e of t.getMarkersToAdd()) {
                    this.convertMarkerAdd(e.name, e.range, i)
                }
            }

            convertInsert(t, e) {
                this.conversionApi.writer = e;
                this.conversionApi.consumable = this._createInsertConsumable(t);
                for (const e of t) {
                    const t = e.item;
                    const i = $h._createFromPositionAndShift(e.previousPosition, e.length);
                    const n = {item: t, range: i};
                    this._testAndFire("insert", n);
                    for (const e of t.getAttributeKeys()) {
                        n.attributeKey = e;
                        n.attributeOldValue = null;
                        n.attributeNewValue = t.getAttribute(e);
                        this._testAndFire(`attribute:${e}`, n)
                    }
                }
                this._clearConversionApi()
            }

            convertRemove(t, e, i, n) {
                this.conversionApi.writer = n;
                this.fire("remove:" + i, {position: t, length: e}, this.conversionApi);
                this._clearConversionApi()
            }

            convertAttribute(t, e, i, n, o) {
                this.conversionApi.writer = o;
                this.conversionApi.consumable = this._createConsumableForRange(t, `attribute:${e}`);
                for (const o of t) {
                    const t = o.item;
                    const r = $h._createFromPositionAndShift(o.previousPosition, o.length);
                    const s = {item: t, range: r, attributeKey: e, attributeOldValue: i, attributeNewValue: n};
                    this._testAndFire(`attribute:${e}`, s)
                }
                this._clearConversionApi()
            }

            convertSelection(t, e, i) {
                const n = Array.from(e.getMarkersAtPosition(t.getFirstPosition()));
                this.conversionApi.writer = i;
                this.conversionApi.consumable = this._createSelectionConsumable(t, n);
                this.fire("selection", {selection: t}, this.conversionApi);
                if (!t.isCollapsed) {
                    return
                }
                for (const e of n) {
                    const i = e.getRange();
                    if (!Qh(t.getFirstPosition(), e, this.conversionApi.mapper)) {
                        continue
                    }
                    const n = {item: t, markerName: e.name, markerRange: i};
                    if (this.conversionApi.consumable.test(t, "addMarker:" + e.name)) {
                        this.fire("addMarker:" + e.name, n, this.conversionApi)
                    }
                }
                for (const e of t.getAttributeKeys()) {
                    const i = {
                        item: t,
                        range: t.getFirstRange(),
                        attributeKey: e,
                        attributeOldValue: null,
                        attributeNewValue: t.getAttribute(e)
                    };
                    if (this.conversionApi.consumable.test(t, "attribute:" + i.attributeKey)) {
                        this.fire("attribute:" + i.attributeKey + ":$text", i, this.conversionApi)
                    }
                }
                this._clearConversionApi()
            }

            convertMarkerAdd(t, e, i) {
                if (!e.root.document || e.root.rootName == "$graveyard") {
                    return
                }
                this.conversionApi.writer = i;
                const n = "addMarker:" + t;
                const o = new Kh;
                o.add(e, n);
                this.conversionApi.consumable = o;
                this.fire(n, {markerName: t, markerRange: e}, this.conversionApi);
                if (!o.test(e, n)) {
                    return
                }
                this.conversionApi.consumable = this._createConsumableForRange(e, n);
                for (const i of e.getItems()) {
                    if (!this.conversionApi.consumable.test(i, n)) {
                        continue
                    }
                    const o = {item: i, range: $h._createOn(i), markerName: t, markerRange: e};
                    this.fire(n, o, this.conversionApi)
                }
                this._clearConversionApi()
            }

            convertMarkerRemove(t, e, i) {
                if (!e.root.document || e.root.rootName == "$graveyard") {
                    return
                }
                this.conversionApi.writer = i;
                this.fire("removeMarker:" + t, {markerName: t, markerRange: e}, this.conversionApi);
                this._clearConversionApi()
            }

            _createInsertConsumable(t) {
                const e = new Kh;
                for (const i of t) {
                    const t = i.item;
                    e.add(t, "insert");
                    for (const i of t.getAttributeKeys()) {
                        e.add(t, "attribute:" + i)
                    }
                }
                return e
            }

            _createConsumableForRange(t, e) {
                const i = new Kh;
                for (const n of t.getItems()) {
                    i.add(n, e)
                }
                return i
            }

            _createSelectionConsumable(t, e) {
                const i = new Kh;
                i.add(t, "selection");
                for (const n of e) {
                    i.add(t, "addMarker:" + n.name)
                }
                for (const e of t.getAttributeKeys()) {
                    i.add(t, "attribute:" + e)
                }
                return i
            }

            _testAndFire(t, e) {
                if (!this.conversionApi.consumable.test(e.item, t)) {
                    return
                }
                const i = e.item.name || "$text";
                this.fire(t + ":" + i, e, this.conversionApi)
            }

            _clearConversionApi() {
                delete this.conversionApi.writer;
                delete this.conversionApi.consumable
            }
        }

        vs(Yh, ds);

        function Qh(t, e, i) {
            const n = e.getRange();
            const o = Array.from(t.getAncestors());
            o.shift();
            o.reverse();
            const r = o.some(t => {
                if (n.containsItem(t)) {
                    const e = i.toViewElement(t);
                    return !!e.getCustomProperty("addHighlight")
                }
            });
            return !r
        }

        class Xh {
            constructor(t, e, i) {
                this._lastRangeBackward = false;
                this._ranges = [];
                this._attrs = new Map;
                if (t) {
                    this.setTo(t, e, i)
                }
            }

            get anchor() {
                if (this._ranges.length > 0) {
                    const t = this._ranges[this._ranges.length - 1];
                    return this._lastRangeBackward ? t.end : t.start
                }
                return null
            }

            get focus() {
                if (this._ranges.length > 0) {
                    const t = this._ranges[this._ranges.length - 1];
                    return this._lastRangeBackward ? t.start : t.end
                }
                return null
            }

            get isCollapsed() {
                const t = this._ranges.length;
                if (t === 1) {
                    return this._ranges[0].isCollapsed
                } else {
                    return false
                }
            }

            get rangeCount() {
                return this._ranges.length
            }

            get isBackward() {
                return !this.isCollapsed && this._lastRangeBackward
            }

            isEqual(t) {
                if (this.rangeCount != t.rangeCount) {
                    return false
                } else if (this.rangeCount === 0) {
                    return true
                }
                if (!this.anchor.isEqual(t.anchor) || !this.focus.isEqual(t.focus)) {
                    return false
                }
                for (const e of this._ranges) {
                    let i = false;
                    for (const n of t._ranges) {
                        if (e.isEqual(n)) {
                            i = true;
                            break
                        }
                    }
                    if (!i) {
                        return false
                    }
                }
                return true
            }

            * getRanges() {
                for (const t of this._ranges) {
                    yield new $h(t.start, t.end)
                }
            }

            getFirstRange() {
                let t = null;
                for (const e of this._ranges) {
                    if (!t || e.start.isBefore(t.start)) {
                        t = e
                    }
                }
                return t ? new $h(t.start, t.end) : null
            }

            getLastRange() {
                let t = null;
                for (const e of this._ranges) {
                    if (!t || e.end.isAfter(t.end)) {
                        t = e
                    }
                }
                return t ? new $h(t.start, t.end) : null
            }

            getFirstPosition() {
                const t = this.getFirstRange();
                return t ? t.start.clone() : null
            }

            getLastPosition() {
                const t = this.getLastRange();
                return t ? t.end.clone() : null
            }

            setTo(t, e, i) {
                if (t === null) {
                    this._setRanges([])
                } else if (t instanceof Xh) {
                    this._setRanges(t.getRanges(), t.isBackward)
                } else if (t && typeof t.getRanges == "function") {
                    this._setRanges(t.getRanges(), t.isBackward)
                } else if (t instanceof $h) {
                    this._setRanges([t], !!e && !!e.backward)
                } else if (t instanceof Uh) {
                    this._setRanges([new $h(t)])
                } else if (t instanceof zh) {
                    const n = !!i && !!i.backward;
                    let o;
                    if (e == "in") {
                        o = $h._createIn(t)
                    } else if (e == "on") {
                        o = $h._createOn(t)
                    } else if (e !== undefined) {
                        o = new $h(Uh._createAt(t, e))
                    } else {
                        throw new ss["b"]("model-selection-setTo-required-second-parameter: " + "selection.setTo requires the second parameter when the first parameter is a node.", [this, t])
                    }
                    this._setRanges([o], n)
                } else if (js(t)) {
                    this._setRanges(t, e && !!e.backward)
                } else {
                    throw new ss["b"]("model-selection-setTo-not-selectable: Cannot set the selection to the given place.", [this, t])
                }
            }

            _setRanges(t, e = false) {
                t = Array.from(t);
                const i = t.some(e => {
                    if (!(e instanceof $h)) {
                        throw new ss["b"]("model-selection-set-ranges-not-range: " + "Selection range set to an object that is not an instance of model.Range.", [this, t])
                    }
                    return this._ranges.every(t => !t.isEqual(e))
                });
                if (t.length === this._ranges.length && !i) {
                    return
                }
                this._removeAllRanges();
                for (const e of t) {
                    this._pushRange(e)
                }
                this._lastRangeBackward = !!e;
                this.fire("change:range", {directChange: true})
            }

            setFocus(t, e) {
                if (this.anchor === null) {
                    throw new ss["b"]("model-selection-setFocus-no-ranges: Cannot set selection focus if there are no ranges in selection.", [this, t])
                }
                const i = Uh._createAt(t, e);
                if (i.compareWith(this.focus) == "same") {
                    return
                }
                const n = this.anchor;
                if (this._ranges.length) {
                    this._popRange()
                }
                if (i.compareWith(n) == "before") {
                    this._pushRange(new $h(i, n));
                    this._lastRangeBackward = true
                } else {
                    this._pushRange(new $h(n, i));
                    this._lastRangeBackward = false
                }
                this.fire("change:range", {directChange: true})
            }

            getAttribute(t) {
                return this._attrs.get(t)
            }

            getAttributes() {
                return this._attrs.entries()
            }

            getAttributeKeys() {
                return this._attrs.keys()
            }

            hasAttribute(t) {
                return this._attrs.has(t)
            }

            removeAttribute(t) {
                if (this.hasAttribute(t)) {
                    this._attrs.delete(t);
                    this.fire("change:attribute", {attributeKeys: [t], directChange: true})
                }
            }

            setAttribute(t, e) {
                if (this.getAttribute(t) !== e) {
                    this._attrs.set(t, e);
                    this.fire("change:attribute", {attributeKeys: [t], directChange: true})
                }
            }

            getSelectedElement() {
                if (this.rangeCount !== 1) {
                    return null
                }
                return this.getFirstRange().getContainedElement()
            }

            is(t) {
                return t == "selection" || t == "model:selection"
            }

            * getSelectedBlocks() {
                const t = new WeakSet;
                for (const e of this.getRanges()) {
                    const i = ef(e.start, t);
                    if (i && nf(i, e)) {
                        yield i
                    }
                    for (const i of e.getWalker()) {
                        const n = i.item;
                        if (i.type == "elementEnd" && tf(n, t, e)) {
                            yield n
                        }
                    }
                    const n = ef(e.end, t);
                    if (n && !e.end.isTouching(Uh._createAt(n, 0)) && nf(n, e)) {
                        yield n
                    }
                }
            }

            containsEntireContent(t = this.anchor.root) {
                const e = Uh._createAt(t, 0);
                const i = Uh._createAt(t, "end");
                return e.isTouching(this.getFirstPosition()) && i.isTouching(this.getLastPosition())
            }

            _pushRange(t) {
                this._checkRange(t);
                this._ranges.push(new $h(t.start, t.end))
            }

            _checkRange(t) {
                for (let e = 0; e < this._ranges.length; e++) {
                    if (t.isIntersecting(this._ranges[e])) {
                        throw new ss["b"]("model-selection-range-intersects: Trying to add a range that intersects with another range in the selection.", [this, t], {
                            addedRange: t,
                            intersectingRange: this._ranges[e]
                        })
                    }
                }
            }

            _removeAllRanges() {
                while (this._ranges.length > 0) {
                    this._popRange()
                }
            }

            _popRange() {
                this._ranges.pop()
            }
        }

        vs(Xh, ds);

        function Zh(t, e) {
            if (e.has(t)) {
                return false
            }
            e.add(t);
            return t.root.document.model.schema.isBlock(t) && t.parent
        }

        function tf(t, e, i) {
            return Zh(t, e) && nf(t, i)
        }

        function ef(t, e) {
            const i = t.parent;
            const n = i.root.document.model.schema;
            const o = t.parent.getAncestors({parentFirst: true, includeSelf: true});
            let r = false;
            const s = o.find(t => {
                if (r) {
                    return false
                }
                r = n.isLimit(t);
                return !r && Zh(t, e)
            });
            o.forEach(t => e.add(t));
            return s
        }

        function nf(t, e) {
            const i = of(t);
            if (!i) {
                return true
            }
            const n = e.containsRange($h._createOn(i), true);
            return !n
        }

        function of(t) {
            const e = t.root.document.model.schema;
            let i = t.parent;
            while (i) {
                if (e.isBlock(i)) {
                    return i
                }
                i = i.parent
            }
        }

        class rf extends $h {
            constructor(t, e) {
                super(t, e);
                sf.call(this)
            }

            detach() {
                this.stopListening()
            }

            is(t) {
                return t == "liveRange" || t == "model:liveRange" || super.is(t)
            }

            toRange() {
                return new $h(this.start, this.end)
            }

            static fromRange(t) {
                return new rf(t.start, t.end)
            }
        }

        function sf() {
            this.listenTo(this.root.document.model, "applyOperation", (t, e) => {
                const i = e[0];
                if (!i.isDocumentOperation) {
                    return
                }
                af.call(this, i)
            }, {priority: "low"})
        }

        function af(t) {
            const e = this.getTransformedByOperation(t);
            const i = $h._createFromRanges(e);
            const n = !i.isEqual(this);
            const o = cf(this, t);
            let r = null;
            if (n) {
                if (i.root.rootName == "$graveyard") {
                    if (t.type == "remove") {
                        r = t.sourcePosition
                    } else {
                        r = t.deletionPosition
                    }
                }
                const e = this.toRange();
                this.start = i.start;
                this.end = i.end;
                this.fire("change:range", e, {deletionPosition: r})
            } else if (o) {
                this.fire("change:content", this.toRange(), {deletionPosition: r})
            }
        }

        function cf(t, e) {
            switch (e.type) {
                case"insert":
                    return t.containsPosition(e.position);
                case"move":
                case"remove":
                case"reinsert":
                case"merge":
                    return t.containsPosition(e.sourcePosition) || t.start.isEqual(e.sourcePosition) || t.containsPosition(e.targetPosition);
                case"split":
                    return t.containsPosition(e.splitPosition) || t.containsPosition(e.insertionPosition)
            }
            return false
        }

        vs(rf, ds);
        const lf = "selection:";

        class df {
            constructor(t) {
                this._selection = new uf(t);
                this._selection.delegate("change:range").to(this);
                this._selection.delegate("change:attribute").to(this);
                this._selection.delegate("change:marker").to(this)
            }

            get isCollapsed() {
                return this._selection.isCollapsed
            }

            get anchor() {
                return this._selection.anchor
            }

            get focus() {
                return this._selection.focus
            }

            get rangeCount() {
                return this._selection.rangeCount
            }

            get hasOwnRange() {
                return this._selection.hasOwnRange
            }

            get isBackward() {
                return this._selection.isBackward
            }

            get isGravityOverridden() {
                return this._selection.isGravityOverridden
            }

            get markers() {
                return this._selection.markers
            }

            get _ranges() {
                return this._selection._ranges
            }

            getRanges() {
                return this._selection.getRanges()
            }

            getFirstPosition() {
                return this._selection.getFirstPosition()
            }

            getLastPosition() {
                return this._selection.getLastPosition()
            }

            getFirstRange() {
                return this._selection.getFirstRange()
            }

            getLastRange() {
                return this._selection.getLastRange()
            }

            getSelectedBlocks() {
                return this._selection.getSelectedBlocks()
            }

            getSelectedElement() {
                return this._selection.getSelectedElement()
            }

            containsEntireContent(t) {
                return this._selection.containsEntireContent(t)
            }

            destroy() {
                this._selection.destroy()
            }

            getAttributeKeys() {
                return this._selection.getAttributeKeys()
            }

            getAttributes() {
                return this._selection.getAttributes()
            }

            getAttribute(t) {
                return this._selection.getAttribute(t)
            }

            hasAttribute(t) {
                return this._selection.hasAttribute(t)
            }

            refresh() {
                this._selection._updateMarkers();
                this._selection._updateAttributes(false)
            }

            is(t) {
                return t == "selection" || t == "model:selection" || t == "documentSelection" || t == "model:documentSelection"
            }

            _setFocus(t, e) {
                this._selection.setFocus(t, e)
            }

            _setTo(t, e, i) {
                this._selection.setTo(t, e, i)
            }

            _setAttribute(t, e) {
                this._selection.setAttribute(t, e)
            }

            _removeAttribute(t) {
                this._selection.removeAttribute(t)
            }

            _getStoredAttributes() {
                return this._selection._getStoredAttributes()
            }

            _overrideGravity() {
                return this._selection.overrideGravity()
            }

            _restoreGravity(t) {
                this._selection.restoreGravity(t)
            }

            static _getStoreAttributeKey(t) {
                return lf + t
            }

            static _isStoreAttributeKey(t) {
                return t.startsWith(lf)
            }
        }

        vs(df, ds);

        class uf extends Xh {
            constructor(t) {
                super();
                this.markers = new ys({idProperty: "name"});
                this._model = t.model;
                this._document = t;
                this._attributePriority = new Map;
                this._fixGraveyardRangesData = [];
                this._hasChangedRange = false;
                this._overriddenGravityRegister = new Set;
                this.listenTo(this._model, "applyOperation", (t, e) => {
                    const i = e[0];
                    if (!i.isDocumentOperation || i.type == "marker" || i.type == "rename" || i.type == "noop") {
                        return
                    }
                    while (this._fixGraveyardRangesData.length) {
                        const {liveRange: t, sourcePosition: e} = this._fixGraveyardRangesData.shift();
                        this._fixGraveyardSelection(t, e)
                    }
                    if (this._hasChangedRange) {
                        this._hasChangedRange = false;
                        this.fire("change:range", {directChange: false})
                    }
                }, {priority: "lowest"});
                this.on("change:range", () => {
                    for (const t of this.getRanges()) {
                        if (!this._document._validateSelectionRange(t)) {
                            throw new ss["b"]("document-selection-wrong-position: Range from document selection starts or ends at incorrect position.", this, {range: t})
                        }
                    }
                });
                this.listenTo(this._model.markers, "update", () => this._updateMarkers());
                this.listenTo(this._document, "change", (t, e) => {
                    ff(this._model, e)
                })
            }

            get isCollapsed() {
                const t = this._ranges.length;
                return t === 0 ? this._document._getDefaultRange().isCollapsed : super.isCollapsed
            }

            get anchor() {
                return super.anchor || this._document._getDefaultRange().start
            }

            get focus() {
                return super.focus || this._document._getDefaultRange().end
            }

            get rangeCount() {
                return this._ranges.length ? this._ranges.length : 1
            }

            get hasOwnRange() {
                return this._ranges.length > 0
            }

            get isGravityOverridden() {
                return !!this._overriddenGravityRegister.size
            }

            destroy() {
                for (let t = 0; t < this._ranges.length; t++) {
                    this._ranges[t].detach()
                }
                this.stopListening()
            }

            * getRanges() {
                if (this._ranges.length) {
                    yield* super.getRanges()
                } else {
                    yield this._document._getDefaultRange()
                }
            }

            getFirstRange() {
                return super.getFirstRange() || this._document._getDefaultRange()
            }

            getLastRange() {
                return super.getLastRange() || this._document._getDefaultRange()
            }

            setTo(t, e, i) {
                super.setTo(t, e, i);
                this._updateAttributes(true);
                this._updateMarkers()
            }

            setFocus(t, e) {
                super.setFocus(t, e);
                this._updateAttributes(true);
                this._updateMarkers()
            }

            setAttribute(t, e) {
                if (this._setAttribute(t, e)) {
                    const e = [t];
                    this.fire("change:attribute", {attributeKeys: e, directChange: true})
                }
            }

            removeAttribute(t) {
                if (this._removeAttribute(t)) {
                    const e = [t];
                    this.fire("change:attribute", {attributeKeys: e, directChange: true})
                }
            }

            overrideGravity() {
                const t = is();
                this._overriddenGravityRegister.add(t);
                if (this._overriddenGravityRegister.size === 1) {
                    this._updateAttributes(true)
                }
                return t
            }

            restoreGravity(t) {
                if (!this._overriddenGravityRegister.has(t)) {
                    throw new ss["b"]("document-selection-gravity-wrong-restore: Attempting to restore the selection gravity for an unknown UID.", this, {uid: t})
                }
                this._overriddenGravityRegister.delete(t);
                if (!this.isGravityOverridden) {
                    this._updateAttributes(true)
                }
            }

            _popRange() {
                this._ranges.pop().detach()
            }

            _pushRange(t) {
                const e = this._prepareRange(t);
                if (e) {
                    this._ranges.push(e)
                }
            }

            _prepareRange(t) {
                this._checkRange(t);
                if (t.root == this._document.graveyard) {
                    return
                }
                const e = rf.fromRange(t);
                e.on("change:range", (t, i, n) => {
                    this._hasChangedRange = true;
                    if (e.root == this._document.graveyard) {
                        this._fixGraveyardRangesData.push({liveRange: e, sourcePosition: n.deletionPosition})
                    }
                });
                return e
            }

            _updateMarkers() {
                const t = [];
                let e = false;
                for (const e of this._model.markers) {
                    const i = e.getRange();
                    for (const n of this.getRanges()) {
                        if (i.containsRange(n, !n.isCollapsed)) {
                            t.push(e)
                        }
                    }
                }
                const i = Array.from(this.markers);
                for (const i of t) {
                    if (!this.markers.has(i)) {
                        this.markers.add(i);
                        e = true
                    }
                }
                for (const i of Array.from(this.markers)) {
                    if (!t.includes(i)) {
                        this.markers.remove(i);
                        e = true
                    }
                }
                if (e) {
                    this.fire("change:marker", {oldMarkers: i, directChange: false})
                }
            }

            _updateAttributes(t) {
                const e = Hs(this._getSurroundingAttributes());
                const i = Hs(this.getAttributes());
                if (t) {
                    this._attributePriority = new Map;
                    this._attrs = new Map
                } else {
                    for (const [t, e] of this._attributePriority) {
                        if (e == "low") {
                            this._attrs.delete(t);
                            this._attributePriority.delete(t)
                        }
                    }
                }
                this._setAttributesTo(e);
                const n = [];
                for (const [t, e] of this.getAttributes()) {
                    if (!i.has(t) || i.get(t) !== e) {
                        n.push(t)
                    }
                }
                for (const [t] of i) {
                    if (!this.hasAttribute(t)) {
                        n.push(t)
                    }
                }
                if (n.length > 0) {
                    this.fire("change:attribute", {attributeKeys: n, directChange: false})
                }
            }

            _setAttribute(t, e, i = true) {
                const n = i ? "normal" : "low";
                if (n == "low" && this._attributePriority.get(t) == "normal") {
                    return false
                }
                const o = super.getAttribute(t);
                if (o === e) {
                    return false
                }
                this._attrs.set(t, e);
                this._attributePriority.set(t, n);
                return true
            }

            _removeAttribute(t, e = true) {
                const i = e ? "normal" : "low";
                if (i == "low" && this._attributePriority.get(t) == "normal") {
                    return false
                }
                this._attributePriority.set(t, i);
                if (!super.hasAttribute(t)) {
                    return false
                }
                this._attrs.delete(t);
                return true
            }

            _setAttributesTo(t) {
                const e = new Set;
                for (const [e, i] of this.getAttributes()) {
                    if (t.get(e) === i) {
                        continue
                    }
                    this._removeAttribute(e, false)
                }
                for (const [i, n] of t) {
                    const t = this._setAttribute(i, n, false);
                    if (t) {
                        e.add(i)
                    }
                }
                return e
            }

            * _getStoredAttributes() {
                const t = this.getFirstPosition().parent;
                if (this.isCollapsed && t.isEmpty) {
                    for (const e of t.getAttributeKeys()) {
                        if (e.startsWith(lf)) {
                            const i = e.substr(lf.length);
                            yield[i, t.getAttribute(e)]
                        }
                    }
                }
            }

            _getSurroundingAttributes() {
                const t = this.getFirstPosition();
                const e = this._model.schema;
                let i = null;
                if (!this.isCollapsed) {
                    const t = this.getFirstRange();
                    for (const n of t) {
                        if (n.item.is("element") && e.isObject(n.item)) {
                            break
                        }
                        if (n.type == "text") {
                            i = n.item.getAttributes();
                            break
                        }
                    }
                } else {
                    const e = t.textNode ? t.textNode : t.nodeBefore;
                    const n = t.textNode ? t.textNode : t.nodeAfter;
                    if (!this.isGravityOverridden) {
                        i = hf(e)
                    }
                    if (!i) {
                        i = hf(n)
                    }
                    if (!this.isGravityOverridden && !i) {
                        let t = e;
                        while (t && !i) {
                            t = t.previousSibling;
                            i = hf(t)
                        }
                    }
                    if (!i) {
                        let t = n;
                        while (t && !i) {
                            t = t.nextSibling;
                            i = hf(t)
                        }
                    }
                    if (!i) {
                        i = this._getStoredAttributes()
                    }
                }
                return i
            }

            _fixGraveyardSelection(t, e) {
                const i = e.clone();
                const n = this._model.schema.getNearestSelectionRange(i);
                const o = this._ranges.indexOf(t);
                this._ranges.splice(o, 1);
                t.detach();
                if (n) {
                    const t = this._prepareRange(n);
                    this._ranges.splice(o, 0, t)
                }
            }
        }

        function hf(t) {
            if (t instanceof Fh || t instanceof Lh) {
                return t.getAttributes()
            }
            return null
        }

        function ff(t, e) {
            const i = t.document.differ;
            for (const n of i.getChanges()) {
                if (n.type != "insert") {
                    continue
                }
                const i = n.position.parent;
                const o = n.length === i.maxOffset;
                if (o) {
                    t.enqueueChange(e, t => {
                        const e = Array.from(i.getAttributeKeys()).filter(t => t.startsWith(lf));
                        for (const n of e) {
                            t.removeAttribute(n, i)
                        }
                    })
                }
            }
        }

        class gf {
            constructor(t) {
                this._dispatchers = t
            }

            add(t) {
                for (const e of this._dispatchers) {
                    t(e)
                }
                return this
            }
        }

        var mf = 1, pf = 4;

        function bf(t) {
            return Hr(t, mf | pf)
        }

        var wf = bf;

        class kf extends gf {
            elementToElement(t) {
                return this.add(Nf(t))
            }

            attributeToElement(t) {
                return this.add(Mf(t))
            }

            attributeToAttribute(t) {
                return this.add(Bf(t))
            }

            markerToElement(t) {
                return this.add(zf(t))
            }

            markerToHighlight(t) {
                return this.add(Lf(t))
            }
        }

        function _f() {
            return (t, e, i) => {
                if (!i.consumable.consume(e.item, "insert")) {
                    return
                }
                const n = i.writer;
                const o = i.mapper.toViewPosition(e.range.start);
                const r = n.createText(e.item.data);
                n.insert(o, r)
            }
        }

        function vf() {
            return (t, e, i) => {
                const n = i.mapper.toViewPosition(e.position);
                const o = e.position.getShiftedBy(e.length);
                const r = i.mapper.toViewPosition(o, {isPhantom: true});
                const s = i.writer.createRange(n, r);
                const a = i.writer.remove(s.getTrimmed());
                for (const t of i.writer.createRangeIn(a).getItems()) {
                    i.mapper.unbindViewElement(t)
                }
            }
        }

        function yf(t, e) {
            const i = t.createAttributeElement("span", e.attributes);
            if (e.classes) {
                i._addClass(e.classes)
            }
            if (e.priority) {
                i._priority = e.priority
            }
            i._id = e.id;
            return i
        }

        function xf() {
            return (t, e, i) => {
                const n = e.selection;
                if (n.isCollapsed) {
                    return
                }
                if (!i.consumable.consume(n, "selection")) {
                    return
                }
                const o = [];
                for (const t of n.getRanges()) {
                    const e = i.mapper.toViewRange(t);
                    o.push(e)
                }
                i.writer.setSelection(o, {backward: n.isBackward})
            }
        }

        function Cf() {
            return (t, e, i) => {
                const n = e.selection;
                if (!n.isCollapsed) {
                    return
                }
                if (!i.consumable.consume(n, "selection")) {
                    return
                }
                const o = i.writer;
                const r = n.getFirstPosition();
                const s = i.mapper.toViewPosition(r);
                const a = o.breakAttributes(s);
                o.setSelection(a)
            }
        }

        function Af() {
            return (t, e, i) => {
                const n = i.writer;
                const o = n.document.selection;
                for (const t of o.getRanges()) {
                    if (t.isCollapsed) {
                        if (t.end.parent.isAttached()) {
                            i.writer.mergeAttributes(t.start)
                        }
                    }
                }
                n.setSelection(null)
            }
        }

        function Tf(t) {
            return (e, i, n) => {
                const o = t(i.attributeOldValue, n.writer);
                const r = t(i.attributeNewValue, n.writer);
                if (!o && !r) {
                    return
                }
                if (!n.consumable.consume(i.item, e.name)) {
                    return
                }
                const s = n.writer;
                const a = s.document.selection;
                if (i.item instanceof Xh || i.item instanceof df) {
                    s.wrap(a.getFirstRange(), r)
                } else {
                    let t = n.mapper.toViewRange(i.range);
                    if (i.attributeOldValue !== null && o) {
                        t = s.unwrap(t, o)
                    }
                    if (i.attributeNewValue !== null && r) {
                        s.wrap(t, r)
                    }
                }
            }
        }

        function Pf(t) {
            return (e, i, n) => {
                const o = t(i.item, n.writer);
                if (!o) {
                    return
                }
                if (!n.consumable.consume(i.item, "insert")) {
                    return
                }
                const r = n.mapper.toViewPosition(i.range.start);
                n.mapper.bindElements(i.item, o);
                n.writer.insert(r, o)
            }
        }

        function Sf(t) {
            return (e, i, n) => {
                i.isOpening = true;
                const o = t(i, n.writer);
                i.isOpening = false;
                const r = t(i, n.writer);
                if (!o || !r) {
                    return
                }
                const s = i.markerRange;
                if (s.isCollapsed && !n.consumable.consume(s, e.name)) {
                    return
                }
                for (const t of s) {
                    if (!n.consumable.consume(t.item, e.name)) {
                        return
                    }
                }
                const a = n.mapper;
                const c = n.writer;
                c.insert(a.toViewPosition(s.start), o);
                n.mapper.bindElementToMarker(o, i.markerName);
                if (!s.isCollapsed) {
                    c.insert(a.toViewPosition(s.end), r);
                    n.mapper.bindElementToMarker(r, i.markerName)
                }
                e.stop()
            }
        }

        function Ef() {
            return (t, e, i) => {
                const n = i.mapper.markerNameToElements(e.markerName);
                if (!n) {
                    return
                }
                for (const t of n) {
                    i.mapper.unbindElementFromMarkerName(t, e.markerName);
                    i.writer.clear(i.writer.createRangeOn(t), t)
                }
                i.writer.clearClonedElementsGroup(e.markerName);
                t.stop()
            }
        }

        function Rf(t) {
            return (e, i, n) => {
                const o = t(i.attributeOldValue, i);
                const r = t(i.attributeNewValue, i);
                if (!o && !r) {
                    return
                }
                if (!n.consumable.consume(i.item, e.name)) {
                    return
                }
                const s = n.mapper.toViewElement(i.item);
                const a = n.writer;
                if (!s) {
                    throw new ss["b"]("conversion-attribute-to-attribute-on-text: " + "Trying to convert text node's attribute with attribute-to-attribute converter.", [i, n])
                }
                if (i.attributeOldValue !== null && o) {
                    if (o.key == "class") {
                        const t = Array.isArray(o.value) ? o.value : [o.value];
                        for (const e of t) {
                            a.removeClass(e, s)
                        }
                    } else if (o.key == "style") {
                        const t = Object.keys(o.value);
                        for (const e of t) {
                            a.removeStyle(e, s)
                        }
                    } else {
                        a.removeAttribute(o.key, s)
                    }
                }
                if (i.attributeNewValue !== null && r) {
                    if (r.key == "class") {
                        const t = Array.isArray(r.value) ? r.value : [r.value];
                        for (const e of t) {
                            a.addClass(e, s)
                        }
                    } else if (r.key == "style") {
                        const t = Object.keys(r.value);
                        for (const e of t) {
                            a.setStyle(e, r.value[e], s)
                        }
                    } else {
                        a.setAttribute(r.key, r.value, s)
                    }
                }
            }
        }

        function Of(t) {
            return (e, i, n) => {
                if (!i.item) {
                    return
                }
                if (!(i.item instanceof Xh || i.item instanceof df) && !i.item.is("textProxy")) {
                    return
                }
                const o = Wf(t, i, n);
                if (!o) {
                    return
                }
                if (!n.consumable.consume(i.item, e.name)) {
                    return
                }
                const r = n.writer;
                const s = yf(r, o);
                const a = r.document.selection;
                if (i.item instanceof Xh || i.item instanceof df) {
                    r.wrap(a.getFirstRange(), s, a)
                } else {
                    const t = n.mapper.toViewRange(i.range);
                    const e = r.wrap(t, s);
                    for (const t of e.getItems()) {
                        if (t.is("attributeElement") && t.isSimilar(s)) {
                            n.mapper.bindElementToMarker(t, i.markerName);
                            break
                        }
                    }
                }
            }
        }

        function If(t) {
            return (e, i, n) => {
                if (!i.item) {
                    return
                }
                if (!(i.item instanceof jh)) {
                    return
                }
                const o = Wf(t, i, n);
                if (!o) {
                    return
                }
                if (!n.consumable.test(i.item, e.name)) {
                    return
                }
                const r = n.mapper.toViewElement(i.item);
                if (r && r.getCustomProperty("addHighlight")) {
                    n.consumable.consume(i.item, e.name);
                    for (const t of $h._createIn(i.item)) {
                        n.consumable.consume(t.item, e.name)
                    }
                    r.getCustomProperty("addHighlight")(r, o, n.writer);
                    n.mapper.bindElementToMarker(r, i.markerName)
                }
            }
        }

        function Vf(t) {
            return (e, i, n) => {
                if (i.markerRange.isCollapsed) {
                    return
                }
                const o = Wf(t, i, n);
                if (!o) {
                    return
                }
                const r = yf(n.writer, o);
                const s = n.mapper.markerNameToElements(i.markerName);
                if (!s) {
                    return
                }
                for (const t of s) {
                    n.mapper.unbindElementFromMarkerName(t, i.markerName);
                    if (t.is("attributeElement")) {
                        n.writer.unwrap(n.writer.createRangeOn(t), r)
                    } else {
                        t.getCustomProperty("removeHighlight")(t, o.id, n.writer)
                    }
                }
                n.writer.clearClonedElementsGroup(i.markerName);
                e.stop()
            }
        }

        function Nf(t) {
            t = wf(t);
            t.view = Ff(t.view, "container");
            return e => {
                e.on("insert:" + t.model, Pf(t.view), {priority: t.converterPriority || "normal"})
            }
        }

        function Mf(t) {
            t = wf(t);
            const e = t.model.key ? t.model.key : t.model;
            let i = "attribute:" + e;
            if (t.model.name) {
                i += ":" + t.model.name
            }
            if (t.model.values) {
                for (const e of t.model.values) {
                    t.view[e] = Ff(t.view[e], "attribute")
                }
            } else {
                t.view = Ff(t.view, "attribute")
            }
            const n = jf(t);
            return e => {
                e.on(i, Tf(n), {priority: t.converterPriority || "normal"})
            }
        }

        function Bf(t) {
            t = wf(t);
            const e = t.model.key ? t.model.key : t.model;
            let i = "attribute:" + e;
            if (t.model.name) {
                i += ":" + t.model.name
            }
            if (t.model.values) {
                for (const e of t.model.values) {
                    t.view[e] = Hf(t.view[e])
                }
            } else {
                t.view = Hf(t.view)
            }
            const n = jf(t);
            return e => {
                e.on(i, Rf(n), {priority: t.converterPriority || "normal"})
            }
        }

        function zf(t) {
            t = wf(t);
            t.view = Ff(t.view, "ui");
            return e => {
                e.on("addMarker:" + t.model, Sf(t.view), {priority: t.converterPriority || "normal"});
                e.on("removeMarker:" + t.model, Ef(t.view), {priority: t.converterPriority || "normal"})
            }
        }

        function Lf(t) {
            return e => {
                e.on("addMarker:" + t.model, Of(t.view), {priority: t.converterPriority || "normal"});
                e.on("addMarker:" + t.model, If(t.view), {priority: t.converterPriority || "normal"});
                e.on("removeMarker:" + t.model, Vf(t.view), {priority: t.converterPriority || "normal"})
            }
        }

        function Ff(t, e) {
            if (typeof t == "function") {
                return t
            }
            return (i, n) => Df(t, n, e)
        }

        function Df(t, e, i) {
            if (typeof t == "string") {
                t = {name: t}
            }
            let n;
            const o = Object.assign({}, t.attributes);
            if (i == "container") {
                n = e.createContainerElement(t.name, o)
            } else if (i == "attribute") {
                const i = {priority: t.priority || wl.DEFAULT_PRIORITY};
                n = e.createAttributeElement(t.name, o, i)
            } else {
                n = e.createUIElement(t.name, o)
            }
            if (t.styles) {
                const i = Object.keys(t.styles);
                for (const o of i) {
                    e.setStyle(o, t.styles[o], n)
                }
            }
            if (t.classes) {
                const i = t.classes;
                if (typeof i == "string") {
                    e.addClass(i, n)
                } else {
                    for (const t of i) {
                        e.addClass(t, n)
                    }
                }
            }
            return n
        }

        function jf(t) {
            if (t.model.values) {
                return (e, i) => {
                    const n = t.view[e];
                    if (n) {
                        return n(e, i)
                    }
                    return null
                }
            } else {
                return t.view
            }
        }

        function Hf(t) {
            if (typeof t == "string") {
                return e => ({key: t, value: e})
            } else if (typeof t == "object") {
                if (t.value) {
                    return () => t
                } else {
                    return e => ({key: t.key, value: e})
                }
            } else {
                return t
            }
        }

        function Wf(t, e, i) {
            const n = typeof t == "function" ? t(e, i) : t;
            if (!n) {
                return null
            }
            if (!n.priority) {
                n.priority = 10
            }
            if (!n.id) {
                n.id = e.markerName
            }
            return n
        }

        class qf extends gf {
            elementToElement(t) {
                return this.add(Kf(t))
            }

            elementToAttribute(t) {
                return this.add(Jf(t))
            }

            attributeToAttribute(t) {
                return this.add(Yf(t))
            }

            elementToMarker(t) {
                return this.add(Qf(t))
            }
        }

        function Uf() {
            return (t, e, i) => {
                if (!e.modelRange && i.consumable.consume(e.viewItem, {name: true})) {
                    const {modelRange: t, modelCursor: n} = i.convertChildren(e.viewItem, e.modelCursor);
                    e.modelRange = t;
                    e.modelCursor = n
                }
            }
        }

        function $f() {
            return (t, e, i) => {
                if (i.schema.checkChild(e.modelCursor, "$text")) {
                    if (i.consumable.consume(e.viewItem)) {
                        const t = i.writer.createText(e.viewItem.data);
                        i.writer.insert(t, e.modelCursor);
                        e.modelRange = $h._createFromPositionAndShift(e.modelCursor, t.offsetSize);
                        e.modelCursor = e.modelRange.end
                    }
                }
            }
        }

        function Gf(t, e) {
            return (i, n) => {
                const o = n.newSelection;
                const r = new Xh;
                const s = [];
                for (const t of o.getRanges()) {
                    s.push(e.toModelRange(t))
                }
                r.setTo(s, {backward: o.isBackward});
                if (!r.isEqual(t.document.selection)) {
                    t.change(t => {
                        t.setSelection(r)
                    })
                }
            }
        }

        function Kf(t) {
            t = wf(t);
            const e = Zf(t);
            const i = Xf(t.view);
            const n = i ? "element:" + i : "element";
            return i => {
                i.on(n, e, {priority: t.converterPriority || "normal"})
            }
        }

        function Jf(t) {
            t = wf(t);
            ig(t);
            const e = ng(t, false);
            const i = Xf(t.view);
            const n = i ? "element:" + i : "element";
            return i => {
                i.on(n, e, {priority: t.converterPriority || "low"})
            }
        }

        function Yf(t) {
            t = wf(t);
            let e = null;
            if (typeof t.view == "string" || t.view.key) {
                e = eg(t)
            }
            ig(t, e);
            const i = ng(t, true);
            return e => {
                e.on("element", i, {priority: t.converterPriority || "low"})
            }
        }

        function Qf(t) {
            t = wf(t);
            sg(t);
            return Kf(t)
        }

        function Xf(t) {
            if (typeof t == "string") {
                return t
            }
            if (typeof t == "object" && typeof t.name == "string") {
                return t.name
            }
            return null
        }

        function Zf(t) {
            const e = t.view ? new Ws(t.view) : null;
            return (i, n, o) => {
                let r = {};
                if (e) {
                    const t = e.match(n.viewItem);
                    if (!t) {
                        return
                    }
                    r = t.match
                }
                r.name = true;
                const s = tg(t.model, n.viewItem, o.writer);
                if (!s) {
                    return
                }
                if (!o.consumable.test(n.viewItem, r)) {
                    return
                }
                const a = o.splitToAllowedParent(s, n.modelCursor);
                if (!a) {
                    return
                }
                o.writer.insert(s, a.position);
                o.convertChildren(n.viewItem, o.writer.createPositionAt(s, 0));
                o.consumable.consume(n.viewItem, r);
                const c = o.getSplitParts(s);
                n.modelRange = new $h(o.writer.createPositionBefore(s), o.writer.createPositionAfter(c[c.length - 1]));
                if (a.cursorParent) {
                    n.modelCursor = o.writer.createPositionAt(a.cursorParent, 0)
                } else {
                    n.modelCursor = n.modelRange.end
                }
            }
        }

        function tg(t, e, i) {
            if (t instanceof Function) {
                return t(e, i)
            } else {
                return i.createElement(t)
            }
        }

        function eg(t) {
            if (typeof t.view == "string") {
                t.view = {key: t.view}
            }
            const e = t.view.key;
            let i;
            if (e == "class" || e == "style") {
                const n = e == "class" ? "classes" : "styles";
                i = {[n]: t.view.value}
            } else {
                const n = typeof t.view.value == "undefined" ? /[\s\S]*/ : t.view.value;
                i = {attributes: {[e]: n}}
            }
            if (t.view.name) {
                i.name = t.view.name
            }
            t.view = i;
            return e
        }

        function ig(t, e = null) {
            const i = e === null ? true : t => t.getAttribute(e);
            const n = typeof t.model != "object" ? t.model : t.model.key;
            const o = typeof t.model != "object" || typeof t.model.value == "undefined" ? i : t.model.value;
            t.model = {key: n, value: o}
        }

        function ng(t, e) {
            const i = new Ws(t.view);
            return (n, o, r) => {
                const s = i.match(o.viewItem);
                if (!s) {
                    return
                }
                const a = t.model.key;
                const c = typeof t.model.value == "function" ? t.model.value(o.viewItem) : t.model.value;
                if (c === null) {
                    return
                }
                if (og(t.view, o.viewItem)) {
                    s.match.name = true
                } else {
                    delete s.match.name
                }
                if (!r.consumable.test(o.viewItem, s.match)) {
                    return
                }
                if (!o.modelRange) {
                    o = Object.assign(o, r.convertChildren(o.viewItem, o.modelCursor))
                }
                const l = rg(o.modelRange, {key: a, value: c}, e, r);
                if (l) {
                    r.consumable.consume(o.viewItem, s.match)
                }
            }
        }

        function og(t, e) {
            const i = typeof t == "function" ? t(e) : t;
            if (typeof i == "object" && !Xf(i)) {
                return false
            }
            return !i.classes && !i.attributes && !i.styles
        }

        function rg(t, e, i, n) {
            let o = false;
            for (const r of Array.from(t.getItems({shallow: i}))) {
                if (n.schema.checkAttribute(r, e.key)) {
                    n.writer.setAttribute(e.key, e.value, r);
                    o = true
                }
            }
            return o
        }

        function sg(t) {
            const e = t.model;
            t.model = (t, i) => {
                const n = typeof e == "string" ? e : e(t);
                return i.createElement("$marker", {"data-name": n})
            }
        }

        class ag {
            constructor(t, e) {
                this.model = t;
                this.view = new Bh(e);
                this.mapper = new Gh;
                this.downcastDispatcher = new Yh({mapper: this.mapper});
                const i = this.model.document;
                const n = i.selection;
                const o = this.model.markers;
                this.listenTo(this.model, "_beforeChanges", () => {
                    this.view._disableRendering(true)
                }, {priority: "highest"});
                this.listenTo(this.model, "_afterChanges", () => {
                    this.view._disableRendering(false)
                }, {priority: "lowest"});
                this.listenTo(i, "change", () => {
                    this.view.change(t => {
                        this.downcastDispatcher.convertChanges(i.differ, o, t);
                        this.downcastDispatcher.convertSelection(n, o, t)
                    })
                }, {priority: "low"});
                this.listenTo(this.view.document, "selectionChange", Gf(this.model, this.mapper));
                this.downcastDispatcher.on("insert:$text", _f(), {priority: "lowest"});
                this.downcastDispatcher.on("remove", vf(), {priority: "low"});
                this.downcastDispatcher.on("selection", Af(), {priority: "low"});
                this.downcastDispatcher.on("selection", xf(), {priority: "low"});
                this.downcastDispatcher.on("selection", Cf(), {priority: "low"});
                this.view.document.roots.bindTo(this.model.document.roots).using(t => {
                    if (t.rootName == "$graveyard") {
                        return null
                    }
                    const e = new cl(this.view.document, t.name);
                    e.rootName = t.rootName;
                    this.mapper.bindElements(t, e);
                    return e
                })
            }

            destroy() {
                this.view.destroy();
                this.stopListening()
            }
        }

        vs(ag, Jc);

        class cg {
            constructor() {
                this._commands = new Map
            }

            add(t, e) {
                this._commands.set(t, e)
            }

            get(t) {
                return this._commands.get(t)
            }

            execute(t, ...e) {
                const i = this.get(t);
                if (!i) {
                    throw new ss["b"]("commandcollection-command-not-found: Command does not exist.", this, {commandName: t})
                }
                i.execute(...e)
            }

            * names() {
                yield* this._commands.keys()
            }

            * commands() {
                yield* this._commands.values()
            }

            [Symbol.iterator]() {
                return this._commands[Symbol.iterator]()
            }

            destroy() {
                for (const t of this.commands()) {
                    t.destroy()
                }
            }
        }

        class lg {
            constructor() {
                this._consumables = new Map
            }

            add(t, e) {
                let i;
                if (t.is("text") || t.is("documentFragment")) {
                    this._consumables.set(t, true);
                    return
                }
                if (!this._consumables.has(t)) {
                    i = new dg(t);
                    this._consumables.set(t, i)
                } else {
                    i = this._consumables.get(t)
                }
                i.add(e)
            }

            test(t, e) {
                const i = this._consumables.get(t);
                if (i === undefined) {
                    return null
                }
                if (t.is("text") || t.is("documentFragment")) {
                    return i
                }
                return i.test(e)
            }

            consume(t, e) {
                if (this.test(t, e)) {
                    if (t.is("text") || t.is("documentFragment")) {
                        this._consumables.set(t, false)
                    } else {
                        this._consumables.get(t).consume(e)
                    }
                    return true
                }
                return false
            }

            revert(t, e) {
                const i = this._consumables.get(t);
                if (i !== undefined) {
                    if (t.is("text") || t.is("documentFragment")) {
                        this._consumables.set(t, true)
                    } else {
                        i.revert(e)
                    }
                }
            }

            static consumablesFromElement(t) {
                const e = {element: t, name: true, attributes: [], classes: [], styles: []};
                const i = t.getAttributeKeys();
                for (const t of i) {
                    if (t == "style" || t == "class") {
                        continue
                    }
                    e.attributes.push(t)
                }
                const n = t.getClassNames();
                for (const t of n) {
                    e.classes.push(t)
                }
                const o = t.getStyleNames();
                for (const t of o) {
                    e.styles.push(t)
                }
                return e
            }

            static createFrom(t, e) {
                if (!e) {
                    e = new lg(t)
                }
                if (t.is("text")) {
                    e.add(t);
                    return e
                }
                if (t.is("element")) {
                    e.add(t, lg.consumablesFromElement(t))
                }
                if (t.is("documentFragment")) {
                    e.add(t)
                }
                for (const i of t.getChildren()) {
                    e = lg.createFrom(i, e)
                }
                return e
            }
        }

        class dg {
            constructor(t) {
                this.element = t;
                this._canConsumeName = null;
                this._consumables = {attributes: new Map, styles: new Map, classes: new Map}
            }

            add(t) {
                if (t.name) {
                    this._canConsumeName = true
                }
                for (const e in this._consumables) {
                    if (e in t) {
                        this._add(e, t[e])
                    }
                }
            }

            test(t) {
                if (t.name && !this._canConsumeName) {
                    return this._canConsumeName
                }
                for (const e in this._consumables) {
                    if (e in t) {
                        const i = this._test(e, t[e]);
                        if (i !== true) {
                            return i
                        }
                    }
                }
                return true
            }

            consume(t) {
                if (t.name) {
                    this._canConsumeName = false
                }
                for (const e in this._consumables) {
                    if (e in t) {
                        this._consume(e, t[e])
                    }
                }
            }

            revert(t) {
                if (t.name) {
                    this._canConsumeName = true
                }
                for (const e in this._consumables) {
                    if (e in t) {
                        this._revert(e, t[e])
                    }
                }
            }

            _add(t, e) {
                const i = Je(e) ? e : [e];
                const n = this._consumables[t];
                for (const e of i) {
                    if (t === "attributes" && (e === "class" || e === "style")) {
                        throw new ss["b"]("viewconsumable-invalid-attribute: Classes and styles should be handled separately.", this)
                    }
                    n.set(e, true);
                    if (t === "styles") {
                        for (const t of this.element.document.stylesProcessor.getRelatedStyles(e)) {
                            n.set(t, true)
                        }
                    }
                }
            }

            _test(t, e) {
                const i = Je(e) ? e : [e];
                const n = this._consumables[t];
                for (const e of i) {
                    if (t === "attributes" && (e === "class" || e === "style")) {
                        const t = e == "class" ? "classes" : "styles";
                        const i = this._test(t, [...this._consumables[t].keys()]);
                        if (i !== true) {
                            return i
                        }
                    } else {
                        const t = n.get(e);
                        if (t === undefined) {
                            return null
                        }
                        if (!t) {
                            return false
                        }
                    }
                }
                return true
            }

            _consume(t, e) {
                const i = Je(e) ? e : [e];
                const n = this._consumables[t];
                for (const e of i) {
                    if (t === "attributes" && (e === "class" || e === "style")) {
                        const t = e == "class" ? "classes" : "styles";
                        this._consume(t, [...this._consumables[t].keys()])
                    } else {
                        n.set(e, false);
                        if (t == "styles") {
                            for (const t of this.element.document.stylesProcessor.getRelatedStyles(e)) {
                                n.set(t, false)
                            }
                        }
                    }
                }
            }

            _revert(t, e) {
                const i = Je(e) ? e : [e];
                const n = this._consumables[t];
                for (const e of i) {
                    if (t === "attributes" && (e === "class" || e === "style")) {
                        const t = e == "class" ? "classes" : "styles";
                        this._revert(t, [...this._consumables[t].keys()])
                    } else {
                        const t = n.get(e);
                        if (t === false) {
                            n.set(e, true)
                        }
                    }
                }
            }
        }

        class ug {
            constructor() {
                this._sourceDefinitions = {};
                this._attributeProperties = {};
                this.decorate("checkChild");
                this.decorate("checkAttribute");
                this.on("checkAttribute", (t, e) => {
                    e[0] = new hg(e[0])
                }, {priority: "highest"});
                this.on("checkChild", (t, e) => {
                    e[0] = new hg(e[0]);
                    e[1] = this.getDefinition(e[1])
                }, {priority: "highest"})
            }

            register(t, e) {
                if (this._sourceDefinitions[t]) {
                    throw new ss["b"]("schema-cannot-register-item-twice: A single item cannot be registered twice in the schema.", this, {itemName: t})
                }
                this._sourceDefinitions[t] = [Object.assign({}, e)];
                this._clearCache()
            }

            extend(t, e) {
                if (!this._sourceDefinitions[t]) {
                    throw new ss["b"]("schema-cannot-extend-missing-item: Cannot extend an item which was not registered yet.", this, {itemName: t})
                }
                this._sourceDefinitions[t].push(Object.assign({}, e));
                this._clearCache()
            }

            getDefinitions() {
                if (!this._compiledDefinitions) {
                    this._compile()
                }
                return this._compiledDefinitions
            }

            getDefinition(t) {
                let e;
                if (typeof t == "string") {
                    e = t
                } else if (t.is && (t.is("text") || t.is("textProxy"))) {
                    e = "$text"
                } else {
                    e = t.name
                }
                return this.getDefinitions()[e]
            }

            isRegistered(t) {
                return !!this.getDefinition(t)
            }

            isBlock(t) {
                const e = this.getDefinition(t);
                return !!(e && e.isBlock)
            }

            isLimit(t) {
                const e = this.getDefinition(t);
                if (!e) {
                    return false
                }
                return !!(e.isLimit || e.isObject)
            }

            isObject(t) {
                const e = this.getDefinition(t);
                return !!(e && e.isObject)
            }

            isInline(t) {
                const e = this.getDefinition(t);
                return !!(e && e.isInline)
            }

            checkChild(t, e) {
                if (!e) {
                    return false
                }
                return this._checkContextMatch(e, t)
            }

            checkAttribute(t, e) {
                const i = this.getDefinition(t.last);
                if (!i) {
                    return false
                }
                return i.allowAttributes.includes(e)
            }

            checkMerge(t, e = null) {
                if (t instanceof Uh) {
                    const e = t.nodeBefore;
                    const i = t.nodeAfter;
                    if (!(e instanceof jh)) {
                        throw new ss["b"]("schema-check-merge-no-element-before: The node before the merge position must be an element.", this)
                    }
                    if (!(i instanceof jh)) {
                        throw new ss["b"]("schema-check-merge-no-element-after: The node after the merge position must be an element.", this)
                    }
                    return this.checkMerge(e, i)
                }
                for (const i of e.getChildren()) {
                    if (!this.checkChild(t, i)) {
                        return false
                    }
                }
                return true
            }

            addChildCheck(t) {
                this.on("checkChild", (e, [i, n]) => {
                    if (!n) {
                        return
                    }
                    const o = t(i, n);
                    if (typeof o == "boolean") {
                        e.stop();
                        e.return = o
                    }
                }, {priority: "high"})
            }

            addAttributeCheck(t) {
                this.on("checkAttribute", (e, [i, n]) => {
                    const o = t(i, n);
                    if (typeof o == "boolean") {
                        e.stop();
                        e.return = o
                    }
                }, {priority: "high"})
            }

            setAttributeProperties(t, e) {
                this._attributeProperties[t] = Object.assign(this.getAttributeProperties(t), e)
            }

            getAttributeProperties(t) {
                return this._attributeProperties[t] || {}
            }

            getLimitElement(t) {
                let e;
                if (t instanceof Uh) {
                    e = t.parent
                } else {
                    const i = t instanceof $h ? [t] : Array.from(t.getRanges());
                    e = i.reduce((t, e) => {
                        const i = e.getCommonAncestor();
                        if (!t) {
                            return i
                        }
                        return t.getCommonAncestor(i, {includeSelf: true})
                    }, null)
                }
                while (!this.isLimit(e)) {
                    if (e.parent) {
                        e = e.parent
                    } else {
                        break
                    }
                }
                return e
            }

            checkAttributeInSelection(t, e) {
                if (t.isCollapsed) {
                    const i = t.getFirstPosition();
                    const n = [...i.getAncestors(), new Lh("", t.getAttributes())];
                    return this.checkAttribute(n, e)
                } else {
                    const i = t.getRanges();
                    for (const t of i) {
                        for (const i of t) {
                            if (this.checkAttribute(i.item, e)) {
                                return true
                            }
                        }
                    }
                }
                return false
            }

            * getValidRanges(t, e) {
                t = Pg(t);
                for (const i of t) {
                    yield* this._getValidRangesForRange(i, e)
                }
            }

            getNearestSelectionRange(t, e = "both") {
                if (this.checkChild(t, "$text")) {
                    return new $h(t)
                }
                let i, n;
                const o = t.getAncestors().reverse().find(t => this.isLimit(t)) || t.root;
                if (e == "both" || e == "backward") {
                    i = new Wh({boundaries: $h._createIn(o), startPosition: t, direction: "backward"})
                }
                if (e == "both" || e == "forward") {
                    n = new Wh({boundaries: $h._createIn(o), startPosition: t})
                }
                for (const t of Tg(i, n)) {
                    const e = t.walker == i ? "elementEnd" : "elementStart";
                    const n = t.value;
                    if (n.type == e && this.isObject(n.item)) {
                        return $h._createOn(n.item)
                    }
                    if (this.checkChild(n.nextPosition, "$text")) {
                        return new $h(n.nextPosition)
                    }
                }
                return null
            }

            findAllowedParent(t, e) {
                let i = t.parent;
                while (i) {
                    if (this.checkChild(i, e)) {
                        return i
                    }
                    if (this.isLimit(i)) {
                        return null
                    }
                    i = i.parent
                }
                return null
            }

            removeDisallowedAttributes(t, e) {
                for (const i of t) {
                    if (i.is("text")) {
                        Sg(this, i, e)
                    } else {
                        const t = $h._createIn(i);
                        const n = t.getPositions();
                        for (const t of n) {
                            const i = t.nodeBefore || t.parent;
                            Sg(this, i, e)
                        }
                    }
                }
            }

            createContext(t) {
                return new hg(t)
            }

            _clearCache() {
                this._compiledDefinitions = null
            }

            _compile() {
                const t = {};
                const e = this._sourceDefinitions;
                const i = Object.keys(e);
                for (const n of i) {
                    t[n] = fg(e[n], n)
                }
                for (const e of i) {
                    gg(t, e)
                }
                for (const e of i) {
                    mg(t, e)
                }
                for (const e of i) {
                    pg(t, e);
                    bg(t, e)
                }
                for (const e of i) {
                    wg(t, e);
                    kg(t, e)
                }
                this._compiledDefinitions = t
            }

            _checkContextMatch(t, e, i = e.length - 1) {
                const n = e.getItem(i);
                if (t.allowIn.includes(n.name)) {
                    if (i == 0) {
                        return true
                    } else {
                        const t = this.getDefinition(n);
                        return this._checkContextMatch(t, e, i - 1)
                    }
                } else {
                    return false
                }
            }

            * _getValidRangesForRange(t, e) {
                let i = t.start;
                let n = t.start;
                for (const o of t.getItems({shallow: true})) {
                    if (o.is("element")) {
                        yield* this._getValidRangesForRange($h._createIn(o), e)
                    }
                    if (!this.checkAttribute(o, e)) {
                        if (!i.isEqual(n)) {
                            yield new $h(i, n)
                        }
                        i = Uh._createAfter(o)
                    }
                    n = Uh._createAfter(o)
                }
                if (!i.isEqual(n)) {
                    yield new $h(i, n)
                }
            }
        }

        vs(ug, Jc);

        class hg {
            constructor(t) {
                if (t instanceof hg) {
                    return t
                }
                if (typeof t == "string") {
                    t = [t]
                } else if (!Array.isArray(t)) {
                    t = t.getAncestors({includeSelf: true})
                }
                if (t[0] && typeof t[0] != "string" && t[0].is("documentFragment")) {
                    t.shift()
                }
                this._items = t.map(Ag)
            }

            get length() {
                return this._items.length
            }

            get last() {
                return this._items[this._items.length - 1]
            }

            [Symbol.iterator]() {
                return this._items[Symbol.iterator]()
            }

            push(t) {
                const e = new hg([t]);
                e._items = [...this._items, ...e._items];
                return e
            }

            getItem(t) {
                return this._items[t]
            }

            * getNames() {
                yield* this._items.map(t => t.name)
            }

            endsWith(t) {
                return Array.from(this.getNames()).join(" ").endsWith(t)
            }

            startsWith(t) {
                return Array.from(this.getNames()).join(" ").startsWith(t)
            }
        }

        function fg(t, e) {
            const i = {
                name: e,
                allowIn: [],
                allowContentOf: [],
                allowWhere: [],
                allowAttributes: [],
                allowAttributesOf: [],
                inheritTypesFrom: []
            };
            _g(t, i);
            vg(t, i, "allowIn");
            vg(t, i, "allowContentOf");
            vg(t, i, "allowWhere");
            vg(t, i, "allowAttributes");
            vg(t, i, "allowAttributesOf");
            vg(t, i, "inheritTypesFrom");
            yg(t, i);
            return i
        }

        function gg(t, e) {
            for (const i of t[e].allowContentOf) {
                if (t[i]) {
                    const n = xg(t, i);
                    n.forEach(t => {
                        t.allowIn.push(e)
                    })
                }
            }
            delete t[e].allowContentOf
        }

        function mg(t, e) {
            for (const i of t[e].allowWhere) {
                const n = t[i];
                if (n) {
                    const i = n.allowIn;
                    t[e].allowIn.push(...i)
                }
            }
            delete t[e].allowWhere
        }

        function pg(t, e) {
            for (const i of t[e].allowAttributesOf) {
                const n = t[i];
                if (n) {
                    const i = n.allowAttributes;
                    t[e].allowAttributes.push(...i)
                }
            }
            delete t[e].allowAttributesOf
        }

        function bg(t, e) {
            const i = t[e];
            for (const e of i.inheritTypesFrom) {
                const n = t[e];
                if (n) {
                    const t = Object.keys(n).filter(t => t.startsWith("is"));
                    for (const e of t) {
                        if (!(e in i)) {
                            i[e] = n[e]
                        }
                    }
                }
            }
            delete i.inheritTypesFrom
        }

        function wg(t, e) {
            const i = t[e];
            const n = i.allowIn.filter(e => t[e]);
            i.allowIn = Array.from(new Set(n))
        }

        function kg(t, e) {
            const i = t[e];
            i.allowAttributes = Array.from(new Set(i.allowAttributes))
        }

        function _g(t, e) {
            for (const i of t) {
                const t = Object.keys(i).filter(t => t.startsWith("is"));
                for (const n of t) {
                    e[n] = i[n]
                }
            }
        }

        function vg(t, e, i) {
            for (const n of t) {
                if (typeof n[i] == "string") {
                    e[i].push(n[i])
                } else if (Array.isArray(n[i])) {
                    e[i].push(...n[i])
                }
            }
        }

        function yg(t, e) {
            for (const i of t) {
                const t = i.inheritAllFrom;
                if (t) {
                    e.allowContentOf.push(t);
                    e.allowWhere.push(t);
                    e.allowAttributesOf.push(t);
                    e.inheritTypesFrom.push(t)
                }
            }
        }

        function xg(t, e) {
            const i = t[e];
            return Cg(t).filter(t => t.allowIn.includes(i.name))
        }

        function Cg(t) {
            return Object.keys(t).map(e => t[e])
        }

        function Ag(t) {
            if (typeof t == "string") {
                return {
                    name: t, * getAttributeKeys() {
                    }, getAttribute() {
                    }
                }
            } else {
                return {
                    name: t.is("element") ? t.name : "$text", * getAttributeKeys() {
                        yield* t.getAttributeKeys()
                    }, getAttribute(e) {
                        return t.getAttribute(e)
                    }
                }
            }
        }

        function* Tg(t, e) {
            let i = false;
            while (!i) {
                i = true;
                if (t) {
                    const e = t.next();
                    if (!e.done) {
                        i = false;
                        yield{walker: t, value: e.value}
                    }
                }
                if (e) {
                    const t = e.next();
                    if (!t.done) {
                        i = false;
                        yield{walker: e, value: t.value}
                    }
                }
            }
        }

        function* Pg(t) {
            for (const e of t) {
                yield* e.getMinimalFlatRanges()
            }
        }

        function Sg(t, e, i) {
            for (const n of e.getAttributeKeys()) {
                if (!t.checkAttribute(e, n)) {
                    i.removeAttribute(n, e)
                }
            }
        }

        class Eg {
            constructor(t = {}) {
                this._splitParts = new Map;
                this._modelCursor = null;
                this.conversionApi = Object.assign({}, t);
                this.conversionApi.convertItem = this._convertItem.bind(this);
                this.conversionApi.convertChildren = this._convertChildren.bind(this);
                this.conversionApi.splitToAllowedParent = this._splitToAllowedParent.bind(this);
                this.conversionApi.getSplitParts = this._getSplitParts.bind(this)
            }

            convert(t, e, i = ["$root"]) {
                this.fire("viewCleanup", t);
                this._modelCursor = Og(i, e);
                this.conversionApi.writer = e;
                this.conversionApi.consumable = lg.createFrom(t);
                this.conversionApi.store = {};
                const {modelRange: n} = this._convertItem(t, this._modelCursor);
                const o = e.createDocumentFragment();
                if (n) {
                    this._removeEmptyElements();
                    for (const t of Array.from(this._modelCursor.parent.getChildren())) {
                        e.append(t, o)
                    }
                    o.markers = Rg(o, e)
                }
                this._modelCursor = null;
                this._splitParts.clear();
                this.conversionApi.writer = null;
                this.conversionApi.store = null;
                return o
            }

            _convertItem(t, e) {
                const i = Object.assign({viewItem: t, modelCursor: e, modelRange: null});
                if (t.is("element")) {
                    this.fire("element:" + t.name, i, this.conversionApi)
                } else if (t.is("text")) {
                    this.fire("text", i, this.conversionApi)
                } else {
                    this.fire("documentFragment", i, this.conversionApi)
                }
                if (i.modelRange && !(i.modelRange instanceof $h)) {
                    throw new ss["b"]("view-conversion-dispatcher-incorrect-result: Incorrect conversion result was dropped.", this)
                }
                return {modelRange: i.modelRange, modelCursor: i.modelCursor}
            }

            _convertChildren(t, e) {
                const i = new $h(e);
                let n = e;
                for (const e of Array.from(t.getChildren())) {
                    const t = this._convertItem(e, n);
                    if (t.modelRange instanceof $h) {
                        i.end = t.modelRange.end;
                        n = t.modelCursor
                    }
                }
                return {modelRange: i, modelCursor: n}
            }

            _splitToAllowedParent(t, e) {
                const i = this.conversionApi.schema.findAllowedParent(e, t);
                if (!i) {
                    return null
                }
                if (i === e.parent) {
                    return {position: e}
                }
                if (this._modelCursor.parent.getAncestors().includes(i)) {
                    return null
                }
                const n = this.conversionApi.writer.split(e, i);
                const o = [];
                for (const t of n.range.getWalker()) {
                    if (t.type == "elementEnd") {
                        o.push(t.item)
                    } else {
                        const e = o.pop();
                        const i = t.item;
                        this._registerSplitPair(e, i)
                    }
                }
                return {position: n.position, cursorParent: n.range.end.parent}
            }

            _registerSplitPair(t, e) {
                if (!this._splitParts.has(t)) {
                    this._splitParts.set(t, [t])
                }
                const i = this._splitParts.get(t);
                this._splitParts.set(e, i);
                i.push(e)
            }

            _getSplitParts(t) {
                let e;
                if (!this._splitParts.has(t)) {
                    e = [t]
                } else {
                    e = this._splitParts.get(t)
                }
                return e
            }

            _removeEmptyElements() {
                let t = false;
                for (const e of this._splitParts.keys()) {
                    if (e.isEmpty) {
                        this.conversionApi.writer.remove(e);
                        this._splitParts.delete(e);
                        t = true
                    }
                }
                if (t) {
                    this._removeEmptyElements()
                }
            }
        }

        vs(Eg, ds);

        function Rg(t, e) {
            const i = new Set;
            const n = new Map;
            const o = $h._createIn(t).getItems();
            for (const t of o) {
                if (t.name == "$marker") {
                    i.add(t)
                }
            }
            for (const t of i) {
                const i = t.getAttribute("data-name");
                const o = e.createPositionBefore(t);
                if (!n.has(i)) {
                    n.set(i, new $h(o.clone()))
                } else {
                    n.get(i).end = o.clone()
                }
                e.remove(t)
            }
            return n
        }

        function Og(t, e) {
            let i;
            for (const n of new hg(t)) {
                const t = {};
                for (const e of n.getAttributeKeys()) {
                    t[e] = n.getAttribute(e)
                }
                const o = e.createElement(n.name, t);
                if (i) {
                    e.append(o, i)
                }
                i = Uh._createAt(o, 0)
            }
            return i
        }

        class Ig {
            constructor(t, e) {
                this.model = t;
                this.stylesProcessor = e;
                this.processor;
                this.mapper = new Gh;
                this.downcastDispatcher = new Yh({mapper: this.mapper});
                this.downcastDispatcher.on("insert:$text", _f(), {priority: "lowest"});
                this.upcastDispatcher = new Eg({schema: t.schema});
                this.viewDocument = new pl(e);
                this._viewWriter = new $l(this.viewDocument);
                this.upcastDispatcher.on("text", $f(), {priority: "lowest"});
                this.upcastDispatcher.on("element", Uf(), {priority: "lowest"});
                this.upcastDispatcher.on("documentFragment", Uf(), {priority: "lowest"});
                this.decorate("init");
                this.on("init", () => {
                    this.fire("ready")
                }, {priority: "lowest"})
            }

            get(t) {
                const {rootName: e = "main", trim: i = "empty"} = t || {};
                if (!this._checkIfRootsExists([e])) {
                    throw new ss["b"]("datacontroller-get-non-existent-root: Attempting to get data from a non-existing root.", this)
                }
                const n = this.model.document.getRoot(e);
                if (i === "empty" && !this.model.hasContent(n, {ignoreWhitespaces: true})) {
                    return ""
                }
                return this.stringify(n)
            }

            stringify(t) {
                const e = this.toView(t);
                return this.processor.toData(e)
            }

            toView(t) {
                const e = this.viewDocument;
                const i = this._viewWriter;
                this.mapper.clearBindings();
                const n = $h._createIn(t);
                const o = new ql(e);
                this.mapper.bindElements(t, o);
                this.downcastDispatcher.convertInsert(n, i);
                if (!t.is("documentFragment")) {
                    const e = Vg(t);
                    for (const [t, n] of e) {
                        this.downcastDispatcher.convertMarkerAdd(t, n, i)
                    }
                }
                return o
            }

            init(t) {
                if (this.model.document.version) {
                    throw new ss["b"]("datacontroller-init-document-not-empty: Trying to set initial data to not empty document.", this)
                }
                let e = {};
                if (typeof t === "string") {
                    e.main = t
                } else {
                    e = t
                }
                if (!this._checkIfRootsExists(Object.keys(e))) {
                    throw new ss["b"]("datacontroller-init-non-existent-root: Attempting to init data on a non-existing root.", this)
                }
                this.model.enqueueChange("transparent", t => {
                    for (const i of Object.keys(e)) {
                        const n = this.model.document.getRoot(i);
                        t.insert(this.parse(e[i], n), n, 0)
                    }
                });
                return Promise.resolve()
            }

            set(t) {
                let e = {};
                if (typeof t === "string") {
                    e.main = t
                } else {
                    e = t
                }
                if (!this._checkIfRootsExists(Object.keys(e))) {
                    throw new ss["b"]("datacontroller-set-non-existent-root: Attempting to set data on a non-existing root.", this)
                }
                this.model.enqueueChange("transparent", t => {
                    t.setSelection(null);
                    t.removeSelectionAttribute(this.model.document.selection.getAttributeKeys());
                    for (const i of Object.keys(e)) {
                        const n = this.model.document.getRoot(i);
                        t.remove(t.createRangeIn(n));
                        t.insert(this.parse(e[i], n), n, 0)
                    }
                })
            }

            parse(t, e = "$root") {
                const i = this.processor.toView(t);
                return this.toModel(i, e)
            }

            toModel(t, e = "$root") {
                return this.model.change(i => this.upcastDispatcher.convert(t, i, e))
            }

            addStyleProcessorRules(t) {
                t(this.stylesProcessor)
            }

            destroy() {
                this.stopListening()
            }

            _checkIfRootsExists(t) {
                for (const e of t) {
                    if (!this.model.document.getRootNames().includes(e)) {
                        return false
                    }
                }
                return true
            }
        }

        vs(Ig, Jc);

        function Vg(t) {
            const e = [];
            const i = t.root.document;
            if (!i) {
                return []
            }
            const n = $h._createIn(t);
            for (const t of i.model.markers) {
                const i = n.getIntersection(t.getRange());
                if (i) {
                    e.push([t.name, i])
                }
            }
            return e
        }

        class Ng {
            constructor(t, e) {
                this._helpers = new Map;
                this._downcast = Array.isArray(t) ? t : [t];
                this._createConversionHelpers({name: "downcast", dispatchers: this._downcast, isDowncast: true});
                this._upcast = Array.isArray(e) ? e : [e];
                this._createConversionHelpers({name: "upcast", dispatchers: this._upcast, isDowncast: false})
            }

            addAlias(t, e) {
                const i = this._downcast.includes(e);
                const n = this._upcast.includes(e);
                if (!n && !i) {
                    throw new ss["b"]("conversion-add-alias-dispatcher-not-registered: " + "Trying to register and alias for a dispatcher that nas not been registered.", this)
                }
                this._createConversionHelpers({name: t, dispatchers: [e], isDowncast: i})
            }

            for(t) {
                if (!this._helpers.has(t)) {
                    throw new ss["b"]("conversion-for-unknown-group: Trying to add a converter to an unknown dispatchers group.", this)
                }
                return this._helpers.get(t)
            }

            elementToElement(t) {
                this.for("downcast").elementToElement(t);
                for (const {model: e, view: i} of Mg(t)) {
                    this.for("upcast").elementToElement({model: e, view: i, converterPriority: t.converterPriority})
                }
            }

            attributeToElement(t) {
                this.for("downcast").attributeToElement(t);
                for (const {model: e, view: i} of Mg(t)) {
                    this.for("upcast").elementToAttribute({view: i, model: e, converterPriority: t.converterPriority})
                }
            }

            attributeToAttribute(t) {
                this.for("downcast").attributeToAttribute(t);
                for (const {model: e, view: i} of Mg(t)) {
                    this.for("upcast").attributeToAttribute({view: i, model: e})
                }
            }

            _createConversionHelpers({name: t, dispatchers: e, isDowncast: i}) {
                if (this._helpers.has(t)) {
                    throw new ss["b"]("conversion-group-exists: Trying to register a group name that has already been registered.", this)
                }
                const n = i ? new kf(e) : new qf(e);
                this._helpers.set(t, n)
            }
        }

        function* Mg(t) {
            if (t.model.values) {
                for (const e of t.model.values) {
                    const i = {key: t.model.key, value: e};
                    const n = t.view[e];
                    const o = t.upcastAlso ? t.upcastAlso[e] : undefined;
                    yield* Bg(i, n, o)
                }
            } else {
                yield* Bg(t.model, t.view, t.upcastAlso)
            }
        }

        function* Bg(t, e, i) {
            yield{model: t, view: e};
            if (i) {
                i = Array.isArray(i) ? i : [i];
                for (const e of i) {
                    yield{model: t, view: e}
                }
            }
        }

        class zg {
            constructor(t = "default") {
                this.operations = [];
                this.type = t
            }

            get baseVersion() {
                for (const t of this.operations) {
                    if (t.baseVersion !== null) {
                        return t.baseVersion
                    }
                }
                return null
            }

            addOperation(t) {
                t.batch = this;
                this.operations.push(t);
                return t
            }
        }

        class Lg {
            constructor(t) {
                this.baseVersion = t;
                this.isDocumentOperation = this.baseVersion !== null;
                this.batch = null
            }

            _validate() {
            }

            toJSON() {
                const t = Object.assign({}, this);
                t.__className = this.constructor.className;
                delete t.batch;
                delete t.isDocumentOperation;
                return t
            }

            static get className() {
                return "Operation"
            }

            static fromJSON(t) {
                return new this(t.baseVersion)
            }
        }

        class Fg {
            constructor(t) {
                this.markers = new Map;
                this._children = new Dh;
                if (t) {
                    this._insertChild(0, t)
                }
            }

            [Symbol.iterator]() {
                return this.getChildren()
            }

            get childCount() {
                return this._children.length
            }

            get maxOffset() {
                return this._children.maxOffset
            }

            get isEmpty() {
                return this.childCount === 0
            }

            get root() {
                return this
            }

            get parent() {
                return null
            }

            is(t) {
                return t == "documentFragment" || t == "model:documentFragment"
            }

            getChild(t) {
                return this._children.getNode(t)
            }

            getChildren() {
                return this._children[Symbol.iterator]()
            }

            getChildIndex(t) {
                return this._children.getNodeIndex(t)
            }

            getChildStartOffset(t) {
                return this._children.getNodeStartOffset(t)
            }

            getPath() {
                return []
            }

            getNodeByPath(t) {
                let e = this;
                for (const i of t) {
                    e = e.getChild(e.offsetToIndex(i))
                }
                return e
            }

            offsetToIndex(t) {
                return this._children.offsetToIndex(t)
            }

            toJSON() {
                const t = [];
                for (const e of this._children) {
                    t.push(e.toJSON())
                }
                return t
            }

            static fromJSON(t) {
                const e = [];
                for (const i of t) {
                    if (i.name) {
                        e.push(jh.fromJSON(i))
                    } else {
                        e.push(Lh.fromJSON(i))
                    }
                }
                return new Fg(e)
            }

            _appendChild(t) {
                this._insertChild(this.childCount, t)
            }

            _insertChild(t, e) {
                const i = Dg(e);
                for (const t of i) {
                    if (t.parent !== null) {
                        t._remove()
                    }
                    t.parent = this
                }
                this._children._insertNodes(t, i)
            }

            _removeChildren(t, e = 1) {
                const i = this._children._removeNodes(t, e);
                for (const t of i) {
                    t.parent = null
                }
                return i
            }
        }

        function Dg(t) {
            if (typeof t == "string") {
                return [new Lh(t)]
            }
            if (!js(t)) {
                t = [t]
            }
            return Array.from(t).map(t => {
                if (typeof t == "string") {
                    return new Lh(t)
                }
                if (t instanceof Fh) {
                    return new Lh(t.data, t.getAttributes())
                }
                return t
            })
        }

        function jg(t, e) {
            e = Ug(e);
            const i = e.reduce((t, e) => t + e.offsetSize, 0);
            const n = t.parent;
            Gg(t);
            const o = t.index;
            n._insertChild(o, e);
            $g(n, o + e.length);
            $g(n, o);
            return new $h(t, t.getShiftedBy(i))
        }

        function Hg(t) {
            if (!t.isFlat) {
                throw new ss["b"]("operation-utils-remove-range-not-flat: " + "Trying to remove a range which starts and ends in different element.", this)
            }
            const e = t.start.parent;
            Gg(t.start);
            Gg(t.end);
            const i = e._removeChildren(t.start.index, t.end.index - t.start.index);
            $g(e, t.start.index);
            return i
        }

        function Wg(t, e) {
            if (!t.isFlat) {
                throw new ss["b"]("operation-utils-move-range-not-flat: " + "Trying to move a range which starts and ends in different element.", this)
            }
            const i = Hg(t);
            e = e._getTransformedByDeletion(t.start, t.end.offset - t.start.offset);
            return jg(e, i)
        }

        function qg(t, e, i) {
            Gg(t.start);
            Gg(t.end);
            for (const n of t.getItems({shallow: true})) {
                const t = n.is("textProxy") ? n.textNode : n;
                if (i !== null) {
                    t._setAttribute(e, i)
                } else {
                    t._removeAttribute(e)
                }
                $g(t.parent, t.index)
            }
            $g(t.end.parent, t.end.index)
        }

        function Ug(t) {
            const e = [];
            if (!(t instanceof Array)) {
                t = [t]
            }
            for (let i = 0; i < t.length; i++) {
                if (typeof t[i] == "string") {
                    e.push(new Lh(t[i]))
                } else if (t[i] instanceof Fh) {
                    e.push(new Lh(t[i].data, t[i].getAttributes()))
                } else if (t[i] instanceof Fg || t[i] instanceof Dh) {
                    for (const n of t[i]) {
                        e.push(n)
                    }
                } else if (t[i] instanceof zh) {
                    e.push(t[i])
                }
            }
            for (let t = 1; t < e.length; t++) {
                const i = e[t];
                const n = e[t - 1];
                if (i instanceof Lh && n instanceof Lh && Kg(i, n)) {
                    e.splice(t - 1, 2, new Lh(n.data + i.data, n.getAttributes()));
                    t--
                }
            }
            return e
        }

        function $g(t, e) {
            const i = t.getChild(e - 1);
            const n = t.getChild(e);
            if (i && n && i.is("text") && n.is("text") && Kg(i, n)) {
                const o = new Lh(i.data + n.data, i.getAttributes());
                t._removeChildren(e - 1, 2);
                t._insertChild(e - 1, o)
            }
        }

        function Gg(t) {
            const e = t.textNode;
            const i = t.parent;
            if (e) {
                const n = t.offset - e.startOffset;
                const o = e.index;
                i._removeChildren(o, 1);
                const r = new Lh(e.data.substr(0, n), e.getAttributes());
                const s = new Lh(e.data.substr(n), e.getAttributes());
                i._insertChild(o, [r, s])
            }
        }

        function Kg(t, e) {
            const i = t.getAttributes();
            const n = e.getAttributes();
            for (const t of i) {
                if (t[1] !== e.getAttribute(t[0])) {
                    return false
                }
                n.next()
            }
            return n.next().done
        }

        function Jg(t, e) {
            return qu(t, e)
        }

        var Yg = Jg;

        class Qg extends Lg {
            constructor(t, e, i, n, o) {
                super(o);
                this.range = t.clone();
                this.key = e;
                this.oldValue = i === undefined ? null : i;
                this.newValue = n === undefined ? null : n
            }

            get type() {
                if (this.oldValue === null) {
                    return "addAttribute"
                } else if (this.newValue === null) {
                    return "removeAttribute"
                } else {
                    return "changeAttribute"
                }
            }

            clone() {
                return new Qg(this.range, this.key, this.oldValue, this.newValue, this.baseVersion)
            }

            getReversed() {
                return new Qg(this.range, this.key, this.newValue, this.oldValue, this.baseVersion + 1)
            }

            toJSON() {
                const t = super.toJSON();
                t.range = this.range.toJSON();
                return t
            }

            _validate() {
                if (!this.range.isFlat) {
                    throw new ss["b"]("attribute-operation-range-not-flat: The range to change is not flat.", this)
                }
                for (const t of this.range.getItems({shallow: true})) {
                    if (this.oldValue !== null && !Yg(t.getAttribute(this.key), this.oldValue)) {
                        throw new ss["b"]("attribute-operation-wrong-old-value: Changed node has different attribute value than operation's " + "old attribute value.", this, {
                            item: t,
                            key: this.key,
                            value: this.oldValue
                        })
                    }
                    if (this.oldValue === null && this.newValue !== null && t.hasAttribute(this.key)) {
                        throw new ss["b"]("attribute-operation-attribute-exists: The attribute with given key already exists.", this, {
                            node: t,
                            key: this.key
                        })
                    }
                }
            }

            _execute() {
                if (!Yg(this.oldValue, this.newValue)) {
                    qg(this.range, this.key, this.newValue)
                }
            }

            static get className() {
                return "AttributeOperation"
            }

            static fromJSON(t, e) {
                return new Qg($h.fromJSON(t.range, e), t.key, t.oldValue, t.newValue, t.baseVersion)
            }
        }

        class Xg extends Lg {
            constructor(t, e) {
                super(null);
                this.sourcePosition = t.clone();
                this.howMany = e
            }

            get type() {
                return "detach"
            }

            toJSON() {
                const t = super.toJSON();
                t.sourcePosition = this.sourcePosition.toJSON();
                return t
            }

            _validate() {
                if (this.sourcePosition.root.document) {
                    throw new ss["b"]("detach-operation-on-document-node: Cannot detach document node.", this)
                }
            }

            _execute() {
                Hg($h._createFromPositionAndShift(this.sourcePosition, this.howMany))
            }

            static get className() {
                return "DetachOperation"
            }
        }

        class Zg extends Lg {
            constructor(t, e, i, n) {
                super(n);
                this.sourcePosition = t.clone();
                this.sourcePosition.stickiness = "toNext";
                this.howMany = e;
                this.targetPosition = i.clone();
                this.targetPosition.stickiness = "toNone"
            }

            get type() {
                if (this.targetPosition.root.rootName == "$graveyard") {
                    return "remove"
                } else if (this.sourcePosition.root.rootName == "$graveyard") {
                    return "reinsert"
                }
                return "move"
            }

            clone() {
                return new this.constructor(this.sourcePosition, this.howMany, this.targetPosition, this.baseVersion)
            }

            getMovedRangeStart() {
                return this.targetPosition._getTransformedByDeletion(this.sourcePosition, this.howMany)
            }

            getReversed() {
                const t = this.sourcePosition._getTransformedByInsertion(this.targetPosition, this.howMany);
                return new this.constructor(this.getMovedRangeStart(), this.howMany, t, this.baseVersion + 1)
            }

            _validate() {
                const t = this.sourcePosition.parent;
                const e = this.targetPosition.parent;
                const i = this.sourcePosition.offset;
                const n = this.targetPosition.offset;
                if (i + this.howMany > t.maxOffset) {
                    throw new ss["b"]("move-operation-nodes-do-not-exist: The nodes which should be moved do not exist.", this)
                } else if (t === e && i < n && n < i + this.howMany) {
                    throw new ss["b"]("move-operation-range-into-itself: Trying to move a range of nodes to the inside of that range.", this)
                } else if (this.sourcePosition.root == this.targetPosition.root) {
                    if (Vs(this.sourcePosition.getParentPath(), this.targetPosition.getParentPath()) == "prefix") {
                        const t = this.sourcePosition.path.length - 1;
                        if (this.targetPosition.path[t] >= i && this.targetPosition.path[t] < i + this.howMany) {
                            throw new ss["b"]("move-operation-node-into-itself: Trying to move a range of nodes into one of nodes from that range.", this)
                        }
                    }
                }
            }

            _execute() {
                Wg($h._createFromPositionAndShift(this.sourcePosition, this.howMany), this.targetPosition)
            }

            toJSON() {
                const t = super.toJSON();
                t.sourcePosition = this.sourcePosition.toJSON();
                t.targetPosition = this.targetPosition.toJSON();
                return t
            }

            static get className() {
                return "MoveOperation"
            }

            static fromJSON(t, e) {
                const i = Uh.fromJSON(t.sourcePosition, e);
                const n = Uh.fromJSON(t.targetPosition, e);
                return new this(i, t.howMany, n, t.baseVersion)
            }
        }

        class tm extends Lg {
            constructor(t, e, i) {
                super(i);
                this.position = t.clone();
                this.position.stickiness = "toNone";
                this.nodes = new Dh(Ug(e));
                this.shouldReceiveAttributes = false
            }

            get type() {
                return "insert"
            }

            get howMany() {
                return this.nodes.maxOffset
            }

            clone() {
                const t = new Dh([...this.nodes].map(t => t._clone(true)));
                const e = new tm(this.position, t, this.baseVersion);
                e.shouldReceiveAttributes = this.shouldReceiveAttributes;
                return e
            }

            getReversed() {
                const t = this.position.root.document.graveyard;
                const e = new Uh(t, [0]);
                return new Zg(this.position, this.nodes.maxOffset, e, this.baseVersion + 1)
            }

            _validate() {
                const t = this.position.parent;
                if (!t || t.maxOffset < this.position.offset) {
                    throw new ss["b"]("insert-operation-position-invalid: Insertion position is invalid.", this)
                }
            }

            _execute() {
                const t = this.nodes;
                this.nodes = new Dh([...t].map(t => t._clone(true)));
                jg(this.position, t)
            }

            toJSON() {
                const t = super.toJSON();
                t.position = this.position.toJSON();
                t.nodes = this.nodes.toJSON();
                return t
            }

            static get className() {
                return "InsertOperation"
            }

            static fromJSON(t, e) {
                const i = [];
                for (const e of t.nodes) {
                    if (e.name) {
                        i.push(jh.fromJSON(e))
                    } else {
                        i.push(Lh.fromJSON(e))
                    }
                }
                const n = new tm(Uh.fromJSON(t.position, e), i, t.baseVersion);
                n.shouldReceiveAttributes = t.shouldReceiveAttributes;
                return n
            }
        }

        class em extends Lg {
            constructor(t, e, i, n, o, r) {
                super(r);
                this.name = t;
                this.oldRange = e ? e.clone() : null;
                this.newRange = i ? i.clone() : null;
                this.affectsData = o;
                this._markers = n
            }

            get type() {
                return "marker"
            }

            clone() {
                return new em(this.name, this.oldRange, this.newRange, this._markers, this.affectsData, this.baseVersion)
            }

            getReversed() {
                return new em(this.name, this.newRange, this.oldRange, this._markers, this.affectsData, this.baseVersion + 1)
            }

            _execute() {
                const t = this.newRange ? "_set" : "_remove";
                this._markers[t](this.name, this.newRange, true, this.affectsData)
            }

            toJSON() {
                const t = super.toJSON();
                if (this.oldRange) {
                    t.oldRange = this.oldRange.toJSON()
                }
                if (this.newRange) {
                    t.newRange = this.newRange.toJSON()
                }
                delete t._markers;
                return t
            }

            static get className() {
                return "MarkerOperation"
            }

            static fromJSON(t, e) {
                return new em(t.name, t.oldRange ? $h.fromJSON(t.oldRange, e) : null, t.newRange ? $h.fromJSON(t.newRange, e) : null, e.model.markers, t.affectsData, t.baseVersion)
            }
        }

        class im extends Lg {
            constructor(t, e, i, n) {
                super(n);
                this.position = t;
                this.position.stickiness = "toNext";
                this.oldName = e;
                this.newName = i
            }

            get type() {
                return "rename"
            }

            clone() {
                return new im(this.position.clone(), this.oldName, this.newName, this.baseVersion)
            }

            getReversed() {
                return new im(this.position.clone(), this.newName, this.oldName, this.baseVersion + 1)
            }

            _validate() {
                const t = this.position.nodeAfter;
                if (!(t instanceof jh)) {
                    throw new ss["b"]("rename-operation-wrong-position: Given position is invalid or node after it is not an instance of Element.", this)
                } else if (t.name !== this.oldName) {
                    throw new ss["b"]("rename-operation-wrong-name: Element to change has different name than operation's old name.", this)
                }
            }

            _execute() {
                const t = this.position.nodeAfter;
                t.name = this.newName
            }

            toJSON() {
                const t = super.toJSON();
                t.position = this.position.toJSON();
                return t
            }

            static get className() {
                return "RenameOperation"
            }

            static fromJSON(t, e) {
                return new im(Uh.fromJSON(t.position, e), t.oldName, t.newName, t.baseVersion)
            }
        }

        class nm extends Lg {
            constructor(t, e, i, n, o) {
                super(o);
                this.root = t;
                this.key = e;
                this.oldValue = i;
                this.newValue = n
            }

            get type() {
                if (this.oldValue === null) {
                    return "addRootAttribute"
                } else if (this.newValue === null) {
                    return "removeRootAttribute"
                } else {
                    return "changeRootAttribute"
                }
            }

            clone() {
                return new nm(this.root, this.key, this.oldValue, this.newValue, this.baseVersion)
            }

            getReversed() {
                return new nm(this.root, this.key, this.newValue, this.oldValue, this.baseVersion + 1)
            }

            _validate() {
                if (this.root != this.root.root || this.root.is("documentFragment")) {
                    throw new ss["b"]("rootattribute-operation-not-a-root: The element to change is not a root element.", this, {
                        root: this.root,
                        key: this.key
                    })
                }
                if (this.oldValue !== null && this.root.getAttribute(this.key) !== this.oldValue) {
                    throw new ss["b"]("rootattribute-operation-wrong-old-value: Changed node has different attribute value than operation's " + "old attribute value.", this, {
                        root: this.root,
                        key: this.key
                    })
                }
                if (this.oldValue === null && this.newValue !== null && this.root.hasAttribute(this.key)) {
                    throw new ss["b"]("rootattribute-operation-attribute-exists: The attribute with given key already exists.", this, {
                        root: this.root,
                        key: this.key
                    })
                }
            }

            _execute() {
                if (this.newValue !== null) {
                    this.root._setAttribute(this.key, this.newValue)
                } else {
                    this.root._removeAttribute(this.key)
                }
            }

            toJSON() {
                const t = super.toJSON();
                t.root = this.root.toJSON();
                return t
            }

            static get className() {
                return "RootAttributeOperation"
            }

            static fromJSON(t, e) {
                if (!e.getRoot(t.root)) {
                    throw new ss["b"]("rootattribute-operation-fromjson-no-root: Cannot create RootAttributeOperation. Root with specified name does not exist.", this, {rootName: t.root})
                }
                return new nm(e.getRoot(t.root), t.key, t.oldValue, t.newValue, t.baseVersion)
            }
        }

        class om extends Lg {
            constructor(t, e, i, n, o) {
                super(o);
                this.sourcePosition = t.clone();
                this.sourcePosition.stickiness = "toPrevious";
                this.howMany = e;
                this.targetPosition = i.clone();
                this.targetPosition.stickiness = "toNext";
                this.graveyardPosition = n.clone()
            }

            get type() {
                return "merge"
            }

            get deletionPosition() {
                return new Uh(this.sourcePosition.root, this.sourcePosition.path.slice(0, -1))
            }

            get movedRange() {
                const t = this.sourcePosition.getShiftedBy(Number.POSITIVE_INFINITY);
                return new $h(this.sourcePosition, t)
            }

            clone() {
                return new this.constructor(this.sourcePosition, this.howMany, this.targetPosition, this.graveyardPosition, this.baseVersion)
            }

            getReversed() {
                const t = this.targetPosition._getTransformedByMergeOperation(this);
                const e = this.sourcePosition.path.slice(0, -1);
                const i = new Uh(this.sourcePosition.root, e)._getTransformedByMergeOperation(this);
                const n = new rm(t, this.howMany, this.graveyardPosition, this.baseVersion + 1);
                n.insertionPosition = i;
                return n
            }

            _validate() {
                const t = this.sourcePosition.parent;
                const e = this.targetPosition.parent;
                if (!t.parent) {
                    throw new ss["b"]("merge-operation-source-position-invalid: Merge source position is invalid.", this)
                } else if (!e.parent) {
                    throw new ss["b"]("merge-operation-target-position-invalid: Merge target position is invalid.", this)
                } else if (this.howMany != t.maxOffset) {
                    throw new ss["b"]("merge-operation-how-many-invalid: Merge operation specifies wrong number of nodes to move.", this)
                }
            }

            _execute() {
                const t = this.sourcePosition.parent;
                const e = $h._createIn(t);
                Wg(e, this.targetPosition);
                Wg($h._createOn(t), this.graveyardPosition)
            }

            toJSON() {
                const t = super.toJSON();
                t.sourcePosition = t.sourcePosition.toJSON();
                t.targetPosition = t.targetPosition.toJSON();
                t.graveyardPosition = t.graveyardPosition.toJSON();
                return t
            }

            static get className() {
                return "MergeOperation"
            }

            static fromJSON(t, e) {
                const i = Uh.fromJSON(t.sourcePosition, e);
                const n = Uh.fromJSON(t.targetPosition, e);
                const o = Uh.fromJSON(t.graveyardPosition, e);
                return new this(i, t.howMany, n, o, t.baseVersion)
            }
        }

        class rm extends Lg {
            constructor(t, e, i, n) {
                super(n);
                this.splitPosition = t.clone();
                this.splitPosition.stickiness = "toNext";
                this.howMany = e;
                this.insertionPosition = rm.getInsertionPosition(t);
                this.insertionPosition.stickiness = "toNone";
                this.graveyardPosition = i ? i.clone() : null;
                if (this.graveyardPosition) {
                    this.graveyardPosition.stickiness = "toNext"
                }
            }

            get type() {
                return "split"
            }

            get moveTargetPosition() {
                const t = this.insertionPosition.path.slice();
                t.push(0);
                return new Uh(this.insertionPosition.root, t)
            }

            get movedRange() {
                const t = this.splitPosition.getShiftedBy(Number.POSITIVE_INFINITY);
                return new $h(this.splitPosition, t)
            }

            clone() {
                const t = new this.constructor(this.splitPosition, this.howMany, this.graveyardPosition, this.baseVersion);
                t.insertionPosition = this.insertionPosition;
                return t
            }

            getReversed() {
                const t = this.splitPosition.root.document.graveyard;
                const e = new Uh(t, [0]);
                return new om(this.moveTargetPosition, this.howMany, this.splitPosition, e, this.baseVersion + 1)
            }

            _validate() {
                const t = this.splitPosition.parent;
                const e = this.splitPosition.offset;
                if (!t || t.maxOffset < e) {
                    throw new ss["b"]("split-operation-position-invalid: Split position is invalid.", this)
                } else if (!t.parent) {
                    throw new ss["b"]("split-operation-split-in-root: Cannot split root element.", this)
                } else if (this.howMany != t.maxOffset - this.splitPosition.offset) {
                    throw new ss["b"]("split-operation-how-many-invalid: Split operation specifies wrong number of nodes to move.", this)
                } else if (this.graveyardPosition && !this.graveyardPosition.nodeAfter) {
                    throw new ss["b"]("split-operation-graveyard-position-invalid: Graveyard position invalid.", this)
                }
            }

            _execute() {
                const t = this.splitPosition.parent;
                if (this.graveyardPosition) {
                    Wg($h._createFromPositionAndShift(this.graveyardPosition, 1), this.insertionPosition)
                } else {
                    const e = t._clone();
                    jg(this.insertionPosition, e)
                }
                const e = new $h(Uh._createAt(t, this.splitPosition.offset), Uh._createAt(t, t.maxOffset));
                Wg(e, this.moveTargetPosition)
            }

            toJSON() {
                const t = super.toJSON();
                t.splitPosition = this.splitPosition.toJSON();
                t.insertionPosition = this.insertionPosition.toJSON();
                if (this.graveyardPosition) {
                    t.graveyardPosition = this.graveyardPosition.toJSON()
                }
                return t
            }

            static get className() {
                return "SplitOperation"
            }

            static getInsertionPosition(t) {
                const e = t.path.slice(0, -1);
                e[e.length - 1]++;
                return new Uh(t.root, e)
            }

            static fromJSON(t, e) {
                const i = Uh.fromJSON(t.splitPosition, e);
                const n = Uh.fromJSON(t.insertionPosition, e);
                const o = t.graveyardPosition ? Uh.fromJSON(t.graveyardPosition, e) : null;
                const r = new this(i, t.howMany, o, t.baseVersion);
                r.insertionPosition = n;
                return r
            }
        }

        class sm extends jh {
            constructor(t, e, i = "main") {
                super(e);
                this._document = t;
                this.rootName = i
            }

            get document() {
                return this._document
            }

            is(t, e) {
                const i = t.replace("model:", "");
                if (!e) {
                    return i == "rootElement" || super.is(t)
                } else {
                    return i == "rootElement" && e == this.name || super.is(t, e)
                }
            }

            toJSON() {
                return this.rootName
            }
        }

        class am {
            constructor(t, e) {
                this.model = t;
                this.batch = e
            }

            createText(t, e) {
                return new Lh(t, e)
            }

            createElement(t, e) {
                return new jh(t, e)
            }

            createDocumentFragment() {
                return new Fg
            }

            insert(t, e, i = 0) {
                this._assertWriterUsedCorrectly();
                if (t instanceof Lh && t.data == "") {
                    return
                }
                const n = Uh._createAt(e, i);
                if (t.parent) {
                    if (hm(t.root, n.root)) {
                        this.move($h._createOn(t), n);
                        return
                    } else {
                        if (t.root.document) {
                            throw new ss["b"]("model-writer-insert-forbidden-move: " + "Cannot move a node from a document to a different tree. " + "It is forbidden to move a node that was already in a document outside of it.", this)
                        } else {
                            this.remove(t)
                        }
                    }
                }
                const o = n.root.document ? n.root.document.version : null;
                const r = new tm(n, t, o);
                if (t instanceof Lh) {
                    r.shouldReceiveAttributes = true
                }
                this.batch.addOperation(r);
                this.model.applyOperation(r);
                if (t instanceof Fg) {
                    for (const [e, i] of t.markers) {
                        const t = Uh._createAt(i.root, 0);
                        const o = new $h(i.start._getCombined(t, n), i.end._getCombined(t, n));
                        const r = {range: o, usingOperation: true, affectsData: true};
                        if (this.model.markers.has(e)) {
                            this.updateMarker(e, r)
                        } else {
                            this.addMarker(e, r)
                        }
                    }
                }
            }

            insertText(t, e, i, n) {
                if (e instanceof Fg || e instanceof jh || e instanceof Uh) {
                    this.insert(this.createText(t), e, i)
                } else {
                    this.insert(this.createText(t, e), i, n)
                }
            }

            insertElement(t, e, i, n) {
                if (e instanceof Fg || e instanceof jh || e instanceof Uh) {
                    this.insert(this.createElement(t), e, i)
                } else {
                    this.insert(this.createElement(t, e), i, n)
                }
            }

            append(t, e) {
                this.insert(t, e, "end")
            }

            appendText(t, e, i) {
                if (e instanceof Fg || e instanceof jh) {
                    this.insert(this.createText(t), e, "end")
                } else {
                    this.insert(this.createText(t, e), i, "end")
                }
            }

            appendElement(t, e, i) {
                if (e instanceof Fg || e instanceof jh) {
                    this.insert(this.createElement(t), e, "end")
                } else {
                    this.insert(this.createElement(t, e), i, "end")
                }
            }

            setAttribute(t, e, i) {
                this._assertWriterUsedCorrectly();
                if (i instanceof $h) {
                    const n = i.getMinimalFlatRanges();
                    for (const i of n) {
                        cm(this, t, e, i)
                    }
                } else {
                    lm(this, t, e, i)
                }
            }

            setAttributes(t, e) {
                for (const [i, n] of Hs(t)) {
                    this.setAttribute(i, n, e)
                }
            }

            removeAttribute(t, e) {
                this._assertWriterUsedCorrectly();
                if (e instanceof $h) {
                    const i = e.getMinimalFlatRanges();
                    for (const e of i) {
                        cm(this, t, null, e)
                    }
                } else {
                    lm(this, t, null, e)
                }
            }

            clearAttributes(t) {
                this._assertWriterUsedCorrectly();
                const e = t => {
                    for (const e of t.getAttributeKeys()) {
                        this.removeAttribute(e, t)
                    }
                };
                if (!(t instanceof $h)) {
                    e(t)
                } else {
                    for (const i of t.getItems()) {
                        e(i)
                    }
                }
            }

            move(t, e, i) {
                this._assertWriterUsedCorrectly();
                if (!(t instanceof $h)) {
                    throw new ss["b"]("writer-move-invalid-range: Invalid range to move.", this)
                }
                if (!t.isFlat) {
                    throw new ss["b"]("writer-move-range-not-flat: Range to move is not flat.", this)
                }
                const n = Uh._createAt(e, i);
                if (n.isEqual(t.start)) {
                    return
                }
                this._addOperationForAffectedMarkers("move", t);
                if (!hm(t.root, n.root)) {
                    throw new ss["b"]("writer-move-different-document: Range is going to be moved between different documents.", this)
                }
                const o = t.root.document ? t.root.document.version : null;
                const r = new Zg(t.start, t.end.offset - t.start.offset, n, o);
                this.batch.addOperation(r);
                this.model.applyOperation(r)
            }

            remove(t) {
                this._assertWriterUsedCorrectly();
                const e = t instanceof $h ? t : $h._createOn(t);
                const i = e.getMinimalFlatRanges().reverse();
                for (const t of i) {
                    this._addOperationForAffectedMarkers("move", t);
                    um(t.start, t.end.offset - t.start.offset, this.batch, this.model)
                }
            }

            merge(t) {
                this._assertWriterUsedCorrectly();
                const e = t.nodeBefore;
                const i = t.nodeAfter;
                this._addOperationForAffectedMarkers("merge", t);
                if (!(e instanceof jh)) {
                    throw new ss["b"]("writer-merge-no-element-before: Node before merge position must be an element.", this)
                }
                if (!(i instanceof jh)) {
                    throw new ss["b"]("writer-merge-no-element-after: Node after merge position must be an element.", this)
                }
                if (!t.root.document) {
                    this._mergeDetached(t)
                } else {
                    this._merge(t)
                }
            }

            createPositionFromPath(t, e, i) {
                return this.model.createPositionFromPath(t, e, i)
            }

            createPositionAt(t, e) {
                return this.model.createPositionAt(t, e)
            }

            createPositionAfter(t) {
                return this.model.createPositionAfter(t)
            }

            createPositionBefore(t) {
                return this.model.createPositionBefore(t)
            }

            createRange(t, e) {
                return this.model.createRange(t, e)
            }

            createRangeIn(t) {
                return this.model.createRangeIn(t)
            }

            createRangeOn(t) {
                return this.model.createRangeOn(t)
            }

            createSelection(t, e, i) {
                return this.model.createSelection(t, e, i)
            }

            _mergeDetached(t) {
                const e = t.nodeBefore;
                const i = t.nodeAfter;
                this.move($h._createIn(i), Uh._createAt(e, "end"));
                this.remove(i)
            }

            _merge(t) {
                const e = Uh._createAt(t.nodeBefore, "end");
                const i = Uh._createAt(t.nodeAfter, 0);
                const n = t.root.document.graveyard;
                const o = new Uh(n, [0]);
                const r = t.root.document.version;
                const s = new om(i, t.nodeAfter.maxOffset, e, o, r);
                this.batch.addOperation(s);
                this.model.applyOperation(s)
            }

            rename(t, e) {
                this._assertWriterUsedCorrectly();
                if (!(t instanceof jh)) {
                    throw new ss["b"]("writer-rename-not-element-instance: Trying to rename an object which is not an instance of Element.", this)
                }
                const i = t.root.document ? t.root.document.version : null;
                const n = new im(Uh._createBefore(t), t.name, e, i);
                this.batch.addOperation(n);
                this.model.applyOperation(n)
            }

            split(t, e) {
                this._assertWriterUsedCorrectly();
                let i = t.parent;
                if (!i.parent) {
                    throw new ss["b"]("writer-split-element-no-parent: Element with no parent can not be split.", this)
                }
                if (!e) {
                    e = i.parent
                }
                if (!t.parent.getAncestors({includeSelf: true}).includes(e)) {
                    throw new ss["b"]("writer-split-invalid-limit-element: Limit element is not a position ancestor.", this)
                }
                let n, o;
                do {
                    const e = i.root.document ? i.root.document.version : null;
                    const r = i.maxOffset - t.offset;
                    const s = new rm(t, r, null, e);
                    this.batch.addOperation(s);
                    this.model.applyOperation(s);
                    if (!n && !o) {
                        n = i;
                        o = t.parent.nextSibling
                    }
                    t = this.createPositionAfter(t.parent);
                    i = t.parent
                } while (i !== e);
                return {position: t, range: new $h(Uh._createAt(n, "end"), Uh._createAt(o, 0))}
            }

            wrap(t, e) {
                this._assertWriterUsedCorrectly();
                if (!t.isFlat) {
                    throw new ss["b"]("writer-wrap-range-not-flat: Range to wrap is not flat.", this)
                }
                const i = e instanceof jh ? e : new jh(e);
                if (i.childCount > 0) {
                    throw new ss["b"]("writer-wrap-element-not-empty: Element to wrap with is not empty.", this)
                }
                if (i.parent !== null) {
                    throw new ss["b"]("writer-wrap-element-attached: Element to wrap with is already attached to tree model.", this)
                }
                this.insert(i, t.start);
                const n = new $h(t.start.getShiftedBy(1), t.end.getShiftedBy(1));
                this.move(n, Uh._createAt(i, 0))
            }

            unwrap(t) {
                this._assertWriterUsedCorrectly();
                if (t.parent === null) {
                    throw new ss["b"]("writer-unwrap-element-no-parent: Trying to unwrap an element which has no parent.", this)
                }
                this.move($h._createIn(t), this.createPositionAfter(t));
                this.remove(t)
            }

            addMarker(t, e) {
                this._assertWriterUsedCorrectly();
                if (!e || typeof e.usingOperation != "boolean") {
                    throw new ss["b"]("writer-addMarker-no-usingOperation: The options.usingOperation parameter is required when adding a new marker.", this)
                }
                const i = e.usingOperation;
                const n = e.range;
                const o = e.affectsData === undefined ? false : e.affectsData;
                if (this.model.markers.has(t)) {
                    throw new ss["b"]("writer-addMarker-marker-exists: Marker with provided name already exists.", this)
                }
                if (!n) {
                    throw new ss["b"]("writer-addMarker-no-range: Range parameter is required when adding a new marker.", this)
                }
                if (!i) {
                    return this.model.markers._set(t, n, i, o)
                }
                dm(this, t, null, n, o);
                return this.model.markers.get(t)
            }

            updateMarker(t, e) {
                this._assertWriterUsedCorrectly();
                const i = typeof t == "string" ? t : t.name;
                const n = this.model.markers.get(i);
                if (!n) {
                    throw new ss["b"]("writer-updateMarker-marker-not-exists: Marker with provided name does not exists.", this)
                }
                if (!e) {
                    this.model.markers._refresh(n);
                    return
                }
                const o = typeof e.usingOperation == "boolean";
                const r = typeof e.affectsData == "boolean";
                const s = r ? e.affectsData : n.affectsData;
                if (!o && !e.range && !r) {
                    throw new ss["b"]("writer-updateMarker-wrong-options: One of the options is required - provide range, usingOperations or affectsData.", this)
                }
                const a = n.getRange();
                const c = e.range ? e.range : a;
                if (o && e.usingOperation !== n.managedUsingOperations) {
                    if (e.usingOperation) {
                        dm(this, i, null, c, s)
                    } else {
                        dm(this, i, a, null, s);
                        this.model.markers._set(i, c, undefined, s)
                    }
                    return
                }
                if (n.managedUsingOperations) {
                    dm(this, i, a, c, s)
                } else {
                    this.model.markers._set(i, c, undefined, s)
                }
            }

            removeMarker(t) {
                this._assertWriterUsedCorrectly();
                const e = typeof t == "string" ? t : t.name;
                if (!this.model.markers.has(e)) {
                    throw new ss["b"]("writer-removeMarker-no-marker: Trying to remove marker which does not exist.", this)
                }
                const i = this.model.markers.get(e);
                if (!i.managedUsingOperations) {
                    this.model.markers._remove(e);
                    return
                }
                const n = i.getRange();
                dm(this, e, n, null, i.affectsData)
            }

            setSelection(t, e, i) {
                this._assertWriterUsedCorrectly();
                this.model.document.selection._setTo(t, e, i)
            }

            setSelectionFocus(t, e) {
                this._assertWriterUsedCorrectly();
                this.model.document.selection._setFocus(t, e)
            }

            setSelectionAttribute(t, e) {
                this._assertWriterUsedCorrectly();
                if (typeof t === "string") {
                    this._setSelectionAttribute(t, e)
                } else {
                    for (const [e, i] of Hs(t)) {
                        this._setSelectionAttribute(e, i)
                    }
                }
            }

            removeSelectionAttribute(t) {
                this._assertWriterUsedCorrectly();
                if (typeof t === "string") {
                    this._removeSelectionAttribute(t)
                } else {
                    for (const e of t) {
                        this._removeSelectionAttribute(e)
                    }
                }
            }

            overrideSelectionGravity() {
                return this.model.document.selection._overrideGravity()
            }

            restoreSelectionGravity(t) {
                this.model.document.selection._restoreGravity(t)
            }

            _setSelectionAttribute(t, e) {
                const i = this.model.document.selection;
                if (i.isCollapsed && i.anchor.parent.isEmpty) {
                    const n = df._getStoreAttributeKey(t);
                    this.setAttribute(n, e, i.anchor.parent)
                }
                i._setAttribute(t, e)
            }

            _removeSelectionAttribute(t) {
                const e = this.model.document.selection;
                if (e.isCollapsed && e.anchor.parent.isEmpty) {
                    const i = df._getStoreAttributeKey(t);
                    this.removeAttribute(i, e.anchor.parent)
                }
                e._removeAttribute(t)
            }

            _assertWriterUsedCorrectly() {
                if (this.model._currentWriter !== this) {
                    throw new ss["b"]("writer-incorrect-use: Trying to use a writer outside the change() block.", this)
                }
            }

            _addOperationForAffectedMarkers(t, e) {
                for (const i of this.model.markers) {
                    if (!i.managedUsingOperations) {
                        continue
                    }
                    const n = i.getRange();
                    let o = false;
                    if (t == "move") {
                        o = e.containsPosition(n.start) || e.start.isEqual(n.start) || e.containsPosition(n.end) || e.end.isEqual(n.end)
                    } else {
                        const t = e.nodeBefore;
                        const i = e.nodeAfter;
                        const r = n.start.parent == t && n.start.isAtEnd;
                        const s = n.end.parent == i && n.end.offset == 0;
                        const a = n.end.nodeAfter == i;
                        const c = n.start.nodeAfter == i;
                        o = r || s || a || c
                    }
                    if (o) {
                        this.updateMarker(i.name, {range: n})
                    }
                }
            }
        }

        function cm(t, e, i, n) {
            const o = t.model;
            const r = o.document;
            let s = n.start;
            let a;
            let c;
            let l;
            for (const t of n.getWalker({shallow: true})) {
                l = t.item.getAttribute(e);
                if (a && c != l) {
                    if (c != i) {
                        d()
                    }
                    s = a
                }
                a = t.nextPosition;
                c = l
            }
            if (a instanceof Uh && a != s && c != i) {
                d()
            }

            function d() {
                const n = new $h(s, a);
                const l = n.root.document ? r.version : null;
                const d = new Qg(n, e, c, i, l);
                t.batch.addOperation(d);
                o.applyOperation(d)
            }
        }

        function lm(t, e, i, n) {
            const o = t.model;
            const r = o.document;
            const s = n.getAttribute(e);
            let a, c;
            if (s != i) {
                const l = n.root === n;
                if (l) {
                    const t = n.document ? r.version : null;
                    c = new nm(n, e, s, i, t)
                } else {
                    a = new $h(Uh._createBefore(n), t.createPositionAfter(n));
                    const o = a.root.document ? r.version : null;
                    c = new Qg(a, e, s, i, o)
                }
                t.batch.addOperation(c);
                o.applyOperation(c)
            }
        }

        function dm(t, e, i, n, o) {
            const r = t.model;
            const s = r.document;
            const a = new em(e, i, n, r.markers, o, s.version);
            t.batch.addOperation(a);
            r.applyOperation(a)
        }

        function um(t, e, i, n) {
            let o;
            if (t.root.document) {
                const i = n.document;
                const r = new Uh(i.graveyard, [0]);
                o = new Zg(t, e, r, i.version)
            } else {
                o = new Xg(t, e)
            }
            i.addOperation(o);
            n.applyOperation(o)
        }

        function hm(t, e) {
            if (t === e) {
                return true
            }
            if (t instanceof sm && e instanceof sm) {
                return true
            }
            return false
        }

        class fm {
            constructor(t) {
                this._markerCollection = t;
                this._changesInElement = new Map;
                this._elementSnapshots = new Map;
                this._changedMarkers = new Map;
                this._changeCount = 0;
                this._cachedChanges = null;
                this._cachedChangesWithGraveyard = null
            }

            get isEmpty() {
                return this._changesInElement.size == 0 && this._changedMarkers.size == 0
            }

            refreshItem(t) {
                if (this._isInInsertedElement(t.parent)) {
                    return
                }
                this._markRemove(t.parent, t.startOffset, t.offsetSize);
                this._markInsert(t.parent, t.startOffset, t.offsetSize);
                const e = $h._createOn(t);
                for (const t of this._markerCollection.getMarkersIntersectingRange(e)) {
                    const e = t.getRange();
                    this.bufferMarkerChange(t.name, e, e, t.affectsData)
                }
                this._cachedChanges = null
            }

            bufferOperation(t) {
                switch (t.type) {
                    case"insert": {
                        if (this._isInInsertedElement(t.position.parent)) {
                            return
                        }
                        this._markInsert(t.position.parent, t.position.offset, t.nodes.maxOffset);
                        break
                    }
                    case"addAttribute":
                    case"removeAttribute":
                    case"changeAttribute": {
                        for (const e of t.range.getItems({shallow: true})) {
                            if (this._isInInsertedElement(e.parent)) {
                                continue
                            }
                            this._markAttribute(e)
                        }
                        break
                    }
                    case"remove":
                    case"move":
                    case"reinsert": {
                        if (t.sourcePosition.isEqual(t.targetPosition) || t.sourcePosition.getShiftedBy(t.howMany).isEqual(t.targetPosition)) {
                            return
                        }
                        const e = this._isInInsertedElement(t.sourcePosition.parent);
                        const i = this._isInInsertedElement(t.targetPosition.parent);
                        if (!e) {
                            this._markRemove(t.sourcePosition.parent, t.sourcePosition.offset, t.howMany)
                        }
                        if (!i) {
                            this._markInsert(t.targetPosition.parent, t.getMovedRangeStart().offset, t.howMany)
                        }
                        break
                    }
                    case"rename": {
                        if (this._isInInsertedElement(t.position.parent)) {
                            return
                        }
                        this._markRemove(t.position.parent, t.position.offset, 1);
                        this._markInsert(t.position.parent, t.position.offset, 1);
                        const e = $h._createFromPositionAndShift(t.position, 1);
                        for (const t of this._markerCollection.getMarkersIntersectingRange(e)) {
                            const e = t.getRange();
                            this.bufferMarkerChange(t.name, e, e, t.affectsData)
                        }
                        break
                    }
                    case"split": {
                        const e = t.splitPosition.parent;
                        if (!this._isInInsertedElement(e)) {
                            this._markRemove(e, t.splitPosition.offset, t.howMany)
                        }
                        if (!this._isInInsertedElement(t.insertionPosition.parent)) {
                            this._markInsert(t.insertionPosition.parent, t.insertionPosition.offset, 1)
                        }
                        if (t.graveyardPosition) {
                            this._markRemove(t.graveyardPosition.parent, t.graveyardPosition.offset, 1)
                        }
                        break
                    }
                    case"merge": {
                        const e = t.sourcePosition.parent;
                        if (!this._isInInsertedElement(e.parent)) {
                            this._markRemove(e.parent, e.startOffset, 1)
                        }
                        const i = t.graveyardPosition.parent;
                        this._markInsert(i, t.graveyardPosition.offset, 1);
                        const n = t.targetPosition.parent;
                        if (!this._isInInsertedElement(n)) {
                            this._markInsert(n, t.targetPosition.offset, e.maxOffset)
                        }
                        break
                    }
                }
                this._cachedChanges = null
            }

            bufferMarkerChange(t, e, i, n) {
                const o = this._changedMarkers.get(t);
                if (!o) {
                    this._changedMarkers.set(t, {oldRange: e, newRange: i, affectsData: n})
                } else {
                    o.newRange = i;
                    o.affectsData = n;
                    if (o.oldRange == null && o.newRange == null) {
                        this._changedMarkers.delete(t)
                    }
                }
            }

            getMarkersToRemove() {
                const t = [];
                for (const [e, i] of this._changedMarkers) {
                    if (i.oldRange != null) {
                        t.push({name: e, range: i.oldRange})
                    }
                }
                return t
            }

            getMarkersToAdd() {
                const t = [];
                for (const [e, i] of this._changedMarkers) {
                    if (i.newRange != null) {
                        t.push({name: e, range: i.newRange})
                    }
                }
                return t
            }

            getChangedMarkers() {
                return Array.from(this._changedMarkers).map(t => ({
                    name: t[0],
                    data: {oldRange: t[1].oldRange, newRange: t[1].newRange}
                }))
            }

            hasDataChanges() {
                for (const [, t] of this._changedMarkers) {
                    if (t.affectsData) {
                        return true
                    }
                }
                return this._changesInElement.size > 0
            }

            getChanges(t = {includeChangesInGraveyard: false}) {
                if (this._cachedChanges) {
                    if (t.includeChangesInGraveyard) {
                        return this._cachedChangesWithGraveyard.slice()
                    } else {
                        return this._cachedChanges.slice()
                    }
                }
                const e = [];
                for (const t of this._changesInElement.keys()) {
                    const i = this._changesInElement.get(t).sort((t, e) => {
                        if (t.offset === e.offset) {
                            if (t.type != e.type) {
                                return t.type == "remove" ? -1 : 1
                            }
                            return 0
                        }
                        return t.offset < e.offset ? -1 : 1
                    });
                    const n = this._elementSnapshots.get(t);
                    const o = gm(t.getChildren());
                    const r = mm(n.length, i);
                    let s = 0;
                    let a = 0;
                    for (const i of r) {
                        if (i === "i") {
                            e.push(this._getInsertDiff(t, s, o[s].name));
                            s++
                        } else if (i === "r") {
                            e.push(this._getRemoveDiff(t, s, n[a].name));
                            a++
                        } else if (i === "a") {
                            const i = o[s].attributes;
                            const r = n[a].attributes;
                            let c;
                            if (o[s].name == "$text") {
                                c = new $h(Uh._createAt(t, s), Uh._createAt(t, s + 1))
                            } else {
                                const e = t.offsetToIndex(s);
                                c = new $h(Uh._createAt(t, s), Uh._createAt(t.getChild(e), 0))
                            }
                            e.push(...this._getAttributesDiff(c, r, i));
                            s++;
                            a++
                        } else {
                            s++;
                            a++
                        }
                    }
                }
                e.sort((t, e) => {
                    if (t.position.root != e.position.root) {
                        return t.position.root.rootName < e.position.root.rootName ? -1 : 1
                    }
                    if (t.position.isEqual(e.position)) {
                        return t.changeCount - e.changeCount
                    }
                    return t.position.isBefore(e.position) ? -1 : 1
                });
                for (let t = 1; t < e.length; t++) {
                    const i = e[t - 1];
                    const n = e[t];
                    const o = i.type == "remove" && n.type == "remove" && i.name == "$text" && n.name == "$text" && i.position.isEqual(n.position);
                    const r = i.type == "insert" && n.type == "insert" && i.name == "$text" && n.name == "$text" && i.position.parent == n.position.parent && i.position.offset + i.length == n.position.offset;
                    const s = i.type == "attribute" && n.type == "attribute" && i.position.parent == n.position.parent && i.range.isFlat && n.range.isFlat && i.position.offset + i.length == n.position.offset && i.attributeKey == n.attributeKey && i.attributeOldValue == n.attributeOldValue && i.attributeNewValue == n.attributeNewValue;
                    if (o || r || s) {
                        e[t - 1].length++;
                        if (s) {
                            e[t - 1].range.end = e[t - 1].range.end.getShiftedBy(1)
                        }
                        e.splice(t, 1);
                        t--
                    }
                }
                for (const t of e) {
                    delete t.changeCount;
                    if (t.type == "attribute") {
                        delete t.position;
                        delete t.length
                    }
                }
                this._changeCount = 0;
                this._cachedChangesWithGraveyard = e.slice();
                this._cachedChanges = e.slice().filter(pm);
                if (t.includeChangesInGraveyard) {
                    return this._cachedChangesWithGraveyard
                } else {
                    return this._cachedChanges
                }
            }

            reset() {
                this._changesInElement.clear();
                this._elementSnapshots.clear();
                this._changedMarkers.clear();
                this._cachedChanges = null
            }

            _markInsert(t, e, i) {
                const n = {type: "insert", offset: e, howMany: i, count: this._changeCount++};
                this._markChange(t, n)
            }

            _markRemove(t, e, i) {
                const n = {type: "remove", offset: e, howMany: i, count: this._changeCount++};
                this._markChange(t, n);
                this._removeAllNestedChanges(t, e, i)
            }

            _markAttribute(t) {
                const e = {type: "attribute", offset: t.startOffset, howMany: t.offsetSize, count: this._changeCount++};
                this._markChange(t.parent, e)
            }

            _markChange(t, e) {
                this._makeSnapshot(t);
                const i = this._getChangesForElement(t);
                this._handleChange(e, i);
                i.push(e);
                for (let t = 0; t < i.length; t++) {
                    if (i[t].howMany < 1) {
                        i.splice(t, 1);
                        t--
                    }
                }
            }

            _getChangesForElement(t) {
                let e;
                if (this._changesInElement.has(t)) {
                    e = this._changesInElement.get(t)
                } else {
                    e = [];
                    this._changesInElement.set(t, e)
                }
                return e
            }

            _makeSnapshot(t) {
                if (!this._elementSnapshots.has(t)) {
                    this._elementSnapshots.set(t, gm(t.getChildren()))
                }
            }

            _handleChange(t, e) {
                t.nodesToHandle = t.howMany;
                for (const i of e) {
                    const n = t.offset + t.howMany;
                    const o = i.offset + i.howMany;
                    if (t.type == "insert") {
                        if (i.type == "insert") {
                            if (t.offset <= i.offset) {
                                i.offset += t.howMany
                            } else if (t.offset < o) {
                                i.howMany += t.nodesToHandle;
                                t.nodesToHandle = 0
                            }
                        }
                        if (i.type == "remove") {
                            if (t.offset < i.offset) {
                                i.offset += t.howMany
                            }
                        }
                        if (i.type == "attribute") {
                            if (t.offset <= i.offset) {
                                i.offset += t.howMany
                            } else if (t.offset < o) {
                                const o = i.howMany;
                                i.howMany = t.offset - i.offset;
                                e.unshift({
                                    type: "attribute",
                                    offset: n,
                                    howMany: o - i.howMany,
                                    count: this._changeCount++
                                })
                            }
                        }
                    }
                    if (t.type == "remove") {
                        if (i.type == "insert") {
                            if (n <= i.offset) {
                                i.offset -= t.howMany
                            } else if (n <= o) {
                                if (t.offset < i.offset) {
                                    const e = n - i.offset;
                                    i.offset = t.offset;
                                    i.howMany -= e;
                                    t.nodesToHandle -= e
                                } else {
                                    i.howMany -= t.nodesToHandle;
                                    t.nodesToHandle = 0
                                }
                            } else {
                                if (t.offset <= i.offset) {
                                    t.nodesToHandle -= i.howMany;
                                    i.howMany = 0
                                } else if (t.offset < o) {
                                    const e = o - t.offset;
                                    i.howMany -= e;
                                    t.nodesToHandle -= e
                                }
                            }
                        }
                        if (i.type == "remove") {
                            if (n <= i.offset) {
                                i.offset -= t.howMany
                            } else if (t.offset < i.offset) {
                                t.nodesToHandle += i.howMany;
                                i.howMany = 0
                            }
                        }
                        if (i.type == "attribute") {
                            if (n <= i.offset) {
                                i.offset -= t.howMany
                            } else if (t.offset < i.offset) {
                                const e = n - i.offset;
                                i.offset = t.offset;
                                i.howMany -= e
                            } else if (t.offset < o) {
                                if (n <= o) {
                                    const n = i.howMany;
                                    i.howMany = t.offset - i.offset;
                                    const o = n - i.howMany - t.nodesToHandle;
                                    e.unshift({
                                        type: "attribute",
                                        offset: t.offset,
                                        howMany: o,
                                        count: this._changeCount++
                                    })
                                } else {
                                    i.howMany -= o - t.offset
                                }
                            }
                        }
                    }
                    if (t.type == "attribute") {
                        if (i.type == "insert") {
                            if (t.offset < i.offset && n > i.offset) {
                                if (n > o) {
                                    const t = {
                                        type: "attribute",
                                        offset: o,
                                        howMany: n - o,
                                        count: this._changeCount++
                                    };
                                    this._handleChange(t, e);
                                    e.push(t)
                                }
                                t.nodesToHandle = i.offset - t.offset;
                                t.howMany = t.nodesToHandle
                            } else if (t.offset >= i.offset && t.offset < o) {
                                if (n > o) {
                                    t.nodesToHandle = n - o;
                                    t.offset = o
                                } else {
                                    t.nodesToHandle = 0
                                }
                            }
                        }
                        if (i.type == "remove") {
                            if (t.offset < i.offset && n > i.offset) {
                                const o = {
                                    type: "attribute",
                                    offset: i.offset,
                                    howMany: n - i.offset,
                                    count: this._changeCount++
                                };
                                this._handleChange(o, e);
                                e.push(o);
                                t.nodesToHandle = i.offset - t.offset;
                                t.howMany = t.nodesToHandle
                            }
                        }
                        if (i.type == "attribute") {
                            if (t.offset >= i.offset && n <= o) {
                                t.nodesToHandle = 0;
                                t.howMany = 0;
                                t.offset = 0
                            } else if (t.offset <= i.offset && n >= o) {
                                i.howMany = 0
                            }
                        }
                    }
                }
                t.howMany = t.nodesToHandle;
                delete t.nodesToHandle
            }

            _getInsertDiff(t, e, i) {
                return {
                    type: "insert",
                    position: Uh._createAt(t, e),
                    name: i,
                    length: 1,
                    changeCount: this._changeCount++
                }
            }

            _getRemoveDiff(t, e, i) {
                return {
                    type: "remove",
                    position: Uh._createAt(t, e),
                    name: i,
                    length: 1,
                    changeCount: this._changeCount++
                }
            }

            _getAttributesDiff(t, e, i) {
                const n = [];
                i = new Map(i);
                for (const [o, r] of e) {
                    const e = i.has(o) ? i.get(o) : null;
                    if (e !== r) {
                        n.push({
                            type: "attribute",
                            position: t.start,
                            range: t.clone(),
                            length: 1,
                            attributeKey: o,
                            attributeOldValue: r,
                            attributeNewValue: e,
                            changeCount: this._changeCount++
                        })
                    }
                    i.delete(o)
                }
                for (const [e, o] of i) {
                    n.push({
                        type: "attribute",
                        position: t.start,
                        range: t.clone(),
                        length: 1,
                        attributeKey: e,
                        attributeOldValue: null,
                        attributeNewValue: o,
                        changeCount: this._changeCount++
                    })
                }
                return n
            }

            _isInInsertedElement(t) {
                const e = t.parent;
                if (!e) {
                    return false
                }
                const i = this._changesInElement.get(e);
                const n = t.startOffset;
                if (i) {
                    for (const t of i) {
                        if (t.type == "insert" && n >= t.offset && n < t.offset + t.howMany) {
                            return true
                        }
                    }
                }
                return this._isInInsertedElement(e)
            }

            _removeAllNestedChanges(t, e, i) {
                const n = new $h(Uh._createAt(t, e), Uh._createAt(t, e + i));
                for (const t of n.getItems({shallow: true})) {
                    if (t.is("element")) {
                        this._elementSnapshots.delete(t);
                        this._changesInElement.delete(t);
                        this._removeAllNestedChanges(t, 0, t.maxOffset)
                    }
                }
            }
        }

        function gm(t) {
            const e = [];
            for (const i of t) {
                if (i.is("text")) {
                    for (let t = 0; t < i.data.length; t++) {
                        e.push({name: "$text", attributes: new Map(i.getAttributes())})
                    }
                } else {
                    e.push({name: i.name, attributes: new Map(i.getAttributes())})
                }
            }
            return e
        }

        function mm(t, e) {
            const i = [];
            let n = 0;
            let o = 0;
            for (const t of e) {
                if (t.offset > n) {
                    for (let e = 0; e < t.offset - n; e++) {
                        i.push("e")
                    }
                    o += t.offset - n
                }
                if (t.type == "insert") {
                    for (let e = 0; e < t.howMany; e++) {
                        i.push("i")
                    }
                    n = t.offset + t.howMany
                } else if (t.type == "remove") {
                    for (let e = 0; e < t.howMany; e++) {
                        i.push("r")
                    }
                    n = t.offset;
                    o += t.howMany
                } else {
                    i.push(..."a".repeat(t.howMany).split(""));
                    n = t.offset + t.howMany;
                    o += t.howMany
                }
            }
            if (o < t) {
                for (let e = 0; e < t - o - n; e++) {
                    i.push("e")
                }
            }
            return i
        }

        function pm(t) {
            const e = t.position && t.position.root.rootName == "$graveyard";
            const i = t.range && t.range.root.rootName == "$graveyard";
            return !e && !i
        }

        class bm {
            constructor() {
                this._operations = [];
                this._undoPairs = new Map;
                this._undoneOperations = new Set
            }

            addOperation(t) {
                if (this._operations.includes(t)) {
                    return
                }
                this._operations.push(t)
            }

            getOperations(t = 0, e = Number.POSITIVE_INFINITY) {
                if (t < 0) {
                    return []
                }
                return this._operations.slice(t, e)
            }

            getOperation(t) {
                return this._operations[t]
            }

            setOperationAsUndone(t, e) {
                this._undoPairs.set(e, t);
                this._undoneOperations.add(t)
            }

            isUndoingOperation(t) {
                return this._undoPairs.has(t)
            }

            isUndoneOperation(t) {
                return this._undoneOperations.has(t)
            }

            getUndoneOperation(t) {
                return this._undoPairs.get(t)
            }
        }

        function wm(t) {
            return !!t && t.length == 1 && /[\u0300-\u036f\u1ab0-\u1aff\u1dc0-\u1dff\u20d0-\u20ff\ufe20-\ufe2f]/.test(t)
        }

        function km(t) {
            return !!t && t.length == 1 && /[\ud800-\udbff]/.test(t)
        }

        function _m(t) {
            return !!t && t.length == 1 && /[\udc00-\udfff]/.test(t)
        }

        function vm(t, e) {
            return km(t.charAt(e - 1)) && _m(t.charAt(e))
        }

        function ym(t, e) {
            return wm(t.charAt(e))
        }

        const xm = "$graveyard";

        class Cm {
            constructor(t) {
                this.model = t;
                this.version = 0;
                this.history = new bm(this);
                this.selection = new df(this);
                this.roots = new ys({idProperty: "rootName"});
                this.differ = new fm(t.markers);
                this._postFixers = new Set;
                this._hasSelectionChangedFromTheLastChangeBlock = false;
                this.createRoot("$root", xm);
                this.listenTo(t, "applyOperation", (t, e) => {
                    const i = e[0];
                    if (i.isDocumentOperation && i.baseVersion !== this.version) {
                        throw new ss["b"]("model-document-applyOperation-wrong-version: Only operations with matching versions can be applied.", this, {operation: i})
                    }
                }, {priority: "highest"});
                this.listenTo(t, "applyOperation", (t, e) => {
                    const i = e[0];
                    if (i.isDocumentOperation) {
                        this.differ.bufferOperation(i)
                    }
                }, {priority: "high"});
                this.listenTo(t, "applyOperation", (t, e) => {
                    const i = e[0];
                    if (i.isDocumentOperation) {
                        this.version++;
                        this.history.addOperation(i)
                    }
                }, {priority: "low"});
                this.listenTo(this.selection, "change", () => {
                    this._hasSelectionChangedFromTheLastChangeBlock = true
                });
                this.listenTo(t.markers, "update", (t, e, i, n) => {
                    this.differ.bufferMarkerChange(e.name, i, n, e.affectsData);
                    if (i === null) {
                        e.on("change", (t, i) => {
                            this.differ.bufferMarkerChange(e.name, i, e.getRange(), e.affectsData)
                        })
                    }
                })
            }

            get graveyard() {
                return this.getRoot(xm)
            }

            createRoot(t = "$root", e = "main") {
                if (this.roots.get(e)) {
                    throw new ss["b"]("model-document-createRoot-name-exists: Root with specified name already exists.", this, {name: e})
                }
                const i = new sm(this, t, e);
                this.roots.add(i);
                return i
            }

            destroy() {
                this.selection.destroy();
                this.stopListening()
            }

            getRoot(t = "main") {
                return this.roots.get(t)
            }

            getRootNames() {
                return Array.from(this.roots, t => t.rootName).filter(t => t != xm)
            }

            registerPostFixer(t) {
                this._postFixers.add(t)
            }

            toJSON() {
                const t = Bs(this);
                t.selection = "[engine.model.DocumentSelection]";
                t.model = "[engine.model.Model]";
                return t
            }

            _handleChangeBlock(t) {
                if (this._hasDocumentChangedFromTheLastChangeBlock()) {
                    this._callPostFixers(t);
                    this.selection.refresh();
                    if (this.differ.hasDataChanges()) {
                        this.fire("change:data", t.batch)
                    } else {
                        this.fire("change", t.batch)
                    }
                    this.selection.refresh();
                    this.differ.reset()
                }
                this._hasSelectionChangedFromTheLastChangeBlock = false
            }

            _hasDocumentChangedFromTheLastChangeBlock() {
                return !this.differ.isEmpty || this._hasSelectionChangedFromTheLastChangeBlock
            }

            _getDefaultRoot() {
                for (const t of this.roots) {
                    if (t !== this.graveyard) {
                        return t
                    }
                }
                return this.graveyard
            }

            _getDefaultRange() {
                const t = this._getDefaultRoot();
                const e = this.model;
                const i = e.schema;
                const n = e.createPositionFromPath(t, [0]);
                const o = i.getNearestSelectionRange(n);
                return o || e.createRange(n)
            }

            _validateSelectionRange(t) {
                return Am(t.start) && Am(t.end)
            }

            _callPostFixers(t) {
                let e = false;
                do {
                    for (const i of this._postFixers) {
                        this.selection.refresh();
                        e = i(t);
                        if (e) {
                            break
                        }
                    }
                } while (e)
            }
        }

        vs(Cm, ds);

        function Am(t) {
            const e = t.textNode;
            if (e) {
                const i = e.data;
                const n = t.offset - e.startOffset;
                return !vm(i, n) && !ym(i, n)
            }
            return true
        }

        class Tm {
            constructor() {
                this._markers = new Map
            }

            [Symbol.iterator]() {
                return this._markers.values()
            }

            has(t) {
                return this._markers.has(t)
            }

            get(t) {
                return this._markers.get(t) || null
            }

            _set(t, e, i = false, n = false) {
                const o = t instanceof Pm ? t.name : t;
                const r = this._markers.get(o);
                if (r) {
                    const t = r.getRange();
                    let s = false;
                    if (!t.isEqual(e)) {
                        r._attachLiveRange(rf.fromRange(e));
                        s = true
                    }
                    if (i != r.managedUsingOperations) {
                        r._managedUsingOperations = i;
                        s = true
                    }
                    if (typeof n === "boolean" && n != r.affectsData) {
                        r._affectsData = n;
                        s = true
                    }
                    if (s) {
                        this.fire("update:" + o, r, t, e)
                    }
                    return r
                }
                const s = rf.fromRange(e);
                const a = new Pm(o, s, i, n);
                this._markers.set(o, a);
                this.fire("update:" + o, a, null, e);
                return a
            }

            _remove(t) {
                const e = t instanceof Pm ? t.name : t;
                const i = this._markers.get(e);
                if (i) {
                    this._markers.delete(e);
                    this.fire("update:" + e, i, i.getRange(), null);
                    this._destroyMarker(i);
                    return true
                }
                return false
            }

            _refresh(t) {
                const e = t instanceof Pm ? t.name : t;
                const i = this._markers.get(e);
                if (!i) {
                    throw new ss["b"]("markercollection-refresh-marker-not-exists: Marker with provided name does not exists.", this)
                }
                const n = i.getRange();
                this.fire("update:" + e, i, n, n, i.managedUsingOperations, i.affectsData)
            }

            * getMarkersAtPosition(t) {
                for (const e of this) {
                    if (e.getRange().containsPosition(t)) {
                        yield e
                    }
                }
            }

            * getMarkersIntersectingRange(t) {
                for (const e of this) {
                    if (e.getRange().getIntersection(t) !== null) {
                        yield e
                    }
                }
            }

            destroy() {
                for (const t of this._markers.values()) {
                    this._destroyMarker(t)
                }
                this._markers = null;
                this.stopListening()
            }

            * getMarkersGroup(t) {
                for (const e of this._markers.values()) {
                    if (e.name.startsWith(t + ":")) {
                        yield e
                    }
                }
            }

            _destroyMarker(t) {
                t.stopListening();
                t._detachLiveRange()
            }
        }

        vs(Tm, ds);

        class Pm {
            constructor(t, e, i, n) {
                this.name = t;
                this._liveRange = this._attachLiveRange(e);
                this._managedUsingOperations = i;
                this._affectsData = n
            }

            get managedUsingOperations() {
                if (!this._liveRange) {
                    throw new ss["b"]("marker-destroyed: Cannot use a destroyed marker instance.", this)
                }
                return this._managedUsingOperations
            }

            get affectsData() {
                if (!this._liveRange) {
                    throw new ss["b"]("marker-destroyed: Cannot use a destroyed marker instance.", this)
                }
                return this._affectsData
            }

            getStart() {
                if (!this._liveRange) {
                    throw new ss["b"]("marker-destroyed: Cannot use a destroyed marker instance.", this)
                }
                return this._liveRange.start.clone()
            }

            getEnd() {
                if (!this._liveRange) {
                    throw new ss["b"]("marker-destroyed: Cannot use a destroyed marker instance.", this)
                }
                return this._liveRange.end.clone()
            }

            getRange() {
                if (!this._liveRange) {
                    throw new ss["b"]("marker-destroyed: Cannot use a destroyed marker instance.", this)
                }
                return this._liveRange.toRange()
            }

            is(t) {
                return t == "marker" || t == "model:marker"
            }

            _attachLiveRange(t) {
                if (this._liveRange) {
                    this._detachLiveRange()
                }
                t.delegate("change:range").to(this);
                t.delegate("change:content").to(this);
                this._liveRange = t;
                return t
            }

            _detachLiveRange() {
                this._liveRange.stopDelegating("change:range", this);
                this._liveRange.stopDelegating("change:content", this);
                this._liveRange.detach();
                this._liveRange = null
            }
        }

        vs(Pm, ds);

        class Sm extends Lg {
            get type() {
                return "noop"
            }

            clone() {
                return new Sm(this.baseVersion)
            }

            getReversed() {
                return new Sm(this.baseVersion + 1)
            }

            _execute() {
            }

            static get className() {
                return "NoOperation"
            }
        }

        const Em = {};
        Em[Qg.className] = Qg;
        Em[tm.className] = tm;
        Em[em.className] = em;
        Em[Zg.className] = Zg;
        Em[Sm.className] = Sm;
        Em[Lg.className] = Lg;
        Em[im.className] = im;
        Em[nm.className] = nm;
        Em[rm.className] = rm;
        Em[om.className] = om;

        class Rm {
            static fromJSON(t, e) {
                return Em[t.__className].fromJSON(t, e)
            }
        }

        class Om extends Uh {
            constructor(t, e, i = "toNone") {
                super(t, e, i);
                if (!this.root.is("rootElement")) {
                    throw new ss["b"]("model-liveposition-root-not-rootelement: LivePosition's root has to be an instance of RootElement.", t)
                }
                Im.call(this)
            }

            detach() {
                this.stopListening()
            }

            is(t) {
                return t == "livePosition" || t == "model:livePosition" || super.is(t)
            }

            toPosition() {
                return new Uh(this.root, this.path.slice(), this.stickiness)
            }

            static fromPosition(t, e) {
                return new this(t.root, t.path.slice(), e ? e : t.stickiness)
            }
        }

        function Im() {
            this.listenTo(this.root.document.model, "applyOperation", (t, e) => {
                const i = e[0];
                if (!i.isDocumentOperation) {
                    return
                }
                Vm.call(this, i)
            }, {priority: "low"})
        }

        function Vm(t) {
            const e = this.getTransformedByOperation(t);
            if (!this.isEqual(e)) {
                const t = this.toPosition();
                this.path = e.path;
                this.root = e.root;
                this.fire("change", t)
            }
        }

        vs(Om, ds);

        function Nm(t, e, i, n) {
            return t.change(o => {
                let r;
                if (!i) {
                    r = t.document.selection
                } else if (i instanceof Xh || i instanceof df) {
                    r = i
                } else {
                    r = o.createSelection(i, n)
                }
                if (!r.isCollapsed) {
                    t.deleteContent(r, {doNotAutoparagraph: true})
                }
                const s = new Mm(t, o, r.anchor);
                let a;
                if (e.is("documentFragment")) {
                    a = e.getChildren()
                } else {
                    a = [e]
                }
                s.handleNodes(a, {isFirst: true, isLast: true});
                const c = s.getSelectionRange();
                if (c) {
                    if (r instanceof df) {
                        o.setSelection(c)
                    } else {
                        r.setTo(c)
                    }
                } else {
                }
                const l = s.getAffectedRange() || t.createRange(r.anchor);
                s.destroy();
                return l
            })
        }

        class Mm {
            constructor(t, e, i) {
                this.model = t;
                this.writer = e;
                this.position = i;
                this.canMergeWith = new Set([this.position.parent]);
                this.schema = t.schema;
                this._filterAttributesOf = [];
                this._affectedStart = null;
                this._affectedEnd = null
            }

            handleNodes(t, e) {
                t = Array.from(t);
                for (let i = 0; i < t.length; i++) {
                    const n = t[i];
                    this._handleNode(n, {isFirst: i === 0 && e.isFirst, isLast: i === t.length - 1 && e.isLast})
                }
                this.schema.removeDisallowedAttributes(this._filterAttributesOf, this.writer);
                this._filterAttributesOf = []
            }

            getSelectionRange() {
                if (this.nodeToSelect) {
                    return $h._createOn(this.nodeToSelect)
                }
                return this.model.schema.getNearestSelectionRange(this.position)
            }

            getAffectedRange() {
                if (!this._affectedStart) {
                    return null
                }
                return new $h(this._affectedStart, this._affectedEnd)
            }

            destroy() {
                if (this._affectedStart) {
                    this._affectedStart.detach()
                }
                if (this._affectedEnd) {
                    this._affectedEnd.detach()
                }
            }

            _handleNode(t, e) {
                if (this.schema.isObject(t)) {
                    this._handleObject(t, e);
                    return
                }
                const i = this._checkAndSplitToAllowedPosition(t, e);
                if (!i) {
                    this._handleDisallowedNode(t, e);
                    return
                }
                this._insert(t);
                this._mergeSiblingsOf(t, e)
            }

            _handleObject(t, e) {
                if (this._checkAndSplitToAllowedPosition(t)) {
                    this._insert(t)
                } else {
                    this._tryAutoparagraphing(t, e)
                }
            }

            _handleDisallowedNode(t, e) {
                if (t.is("element")) {
                    this.handleNodes(t.getChildren(), e)
                } else {
                    this._tryAutoparagraphing(t, e)
                }
            }

            _insert(t) {
                if (!this.schema.checkChild(this.position, t)) {
                    throw new ss["b"]("insertcontent-wrong-position: Given node cannot be inserted on the given position.", this, {
                        node: t,
                        position: this.position
                    })
                }
                const e = Om.fromPosition(this.position, "toNext");
                this._setAffectedBoundaries(this.position);
                this.writer.insert(t, this.position);
                this.position = e.toPosition();
                e.detach();
                if (this.schema.isObject(t) && !this.schema.checkChild(this.position, "$text")) {
                    this.nodeToSelect = t
                } else {
                    this.nodeToSelect = null
                }
                this._filterAttributesOf.push(t)
            }

            _setAffectedBoundaries(t) {
                if (!this._affectedStart) {
                    this._affectedStart = Om.fromPosition(t, "toPrevious")
                }
                if (!this._affectedEnd || this._affectedEnd.isBefore(t)) {
                    if (this._affectedEnd) {
                        this._affectedEnd.detach()
                    }
                    this._affectedEnd = Om.fromPosition(t, "toNext")
                }
            }

            _mergeSiblingsOf(t, e) {
                if (!(t instanceof jh)) {
                    return
                }
                const i = this._canMergeLeft(t, e);
                const n = this._canMergeRight(t, e);
                const o = Om._createBefore(t);
                o.stickiness = "toNext";
                const r = Om._createAfter(t);
                r.stickiness = "toNext";
                if (i) {
                    const t = Om.fromPosition(this.position);
                    t.stickiness = "toNext";
                    if (this._affectedStart.isEqual(o)) {
                        this._affectedStart.detach();
                        this._affectedStart = Om._createAt(o.nodeBefore, "end", "toPrevious")
                    }
                    this.writer.merge(o);
                    if (o.isEqual(this._affectedEnd) && e.isLast) {
                        this._affectedEnd.detach();
                        this._affectedEnd = Om._createAt(o.nodeBefore, "end", "toNext")
                    }
                    this.position = t.toPosition();
                    t.detach()
                }
                if (n) {
                    if (!this.position.isEqual(r)) {
                        throw new ss["b"]("insertcontent-invalid-insertion-position", this)
                    }
                    this.position = Uh._createAt(r.nodeBefore, "end");
                    const t = Om.fromPosition(this.position, "toPrevious");
                    if (this._affectedEnd.isEqual(r)) {
                        this._affectedEnd.detach();
                        this._affectedEnd = Om._createAt(r.nodeBefore, "end", "toNext")
                    }
                    this.writer.merge(r);
                    if (r.getShiftedBy(-1).isEqual(this._affectedStart) && e.isFirst) {
                        this._affectedStart.detach();
                        this._affectedStart = Om._createAt(r.nodeBefore, 0, "toPrevious")
                    }
                    this.position = t.toPosition();
                    t.detach()
                }
                if (i || n) {
                    this._filterAttributesOf.push(this.position.parent)
                }
                o.detach();
                r.detach()
            }

            _canMergeLeft(t, e) {
                const i = t.previousSibling;
                return e.isFirst && i instanceof jh && this.canMergeWith.has(i) && this.model.schema.checkMerge(i, t)
            }

            _canMergeRight(t, e) {
                const i = t.nextSibling;
                return e.isLast && i instanceof jh && this.canMergeWith.has(i) && this.model.schema.checkMerge(t, i)
            }

            _tryAutoparagraphing(t, e) {
                const i = this.writer.createElement("paragraph");
                if (this._getAllowedIn(i, this.position.parent) && this.schema.checkChild(i, t)) {
                    i._appendChild(t);
                    this._handleNode(i, e)
                }
            }

            _checkAndSplitToAllowedPosition(t) {
                const e = this._getAllowedIn(t, this.position.parent);
                if (!e) {
                    return false
                }
                while (e != this.position.parent) {
                    if (this.schema.isLimit(this.position.parent)) {
                        return false
                    }
                    if (this.position.isAtStart) {
                        const t = this.position.parent;
                        this.position = this.writer.createPositionBefore(t);
                        if (t.isEmpty && t.parent === e) {
                            this.writer.remove(t)
                        }
                    } else if (this.position.isAtEnd) {
                        this.position = this.writer.createPositionAfter(this.position.parent)
                    } else {
                        const t = this.writer.createPositionAfter(this.position.parent);
                        this._setAffectedBoundaries(this.position);
                        this.writer.split(this.position);
                        this.position = t;
                        this.canMergeWith.add(this.position.nodeAfter)
                    }
                }
                return true
            }

            _getAllowedIn(t, e) {
                if (this.schema.checkChild(e, t)) {
                    return e
                }
                if (e.parent) {
                    return this._getAllowedIn(t, e.parent)
                }
                return null
            }
        }

        function Bm(t, e, i = {}) {
            if (e.isCollapsed) {
                return
            }
            const n = e.getFirstRange();
            if (n.root.rootName == "$graveyard") {
                return
            }
            const o = t.schema;
            t.change(t => {
                if (!i.doNotResetEntireContent && Hm(o, e)) {
                    jm(t, e, o);
                    return
                }
                const r = n.start;
                const s = Om.fromPosition(n.end, "toNext");
                if (!n.start.isTouching(n.end)) {
                    t.remove(n)
                }
                if (!i.leaveUnmerged) {
                    zm(t, r, s);
                    o.removeDisallowedAttributes(r.parent.getChildren(), t)
                }
                Wm(t, e, r);
                if (!i.doNotAutoparagraph && Lm(o, r)) {
                    Dm(t, r, e)
                }
                s.detach()
            })
        }

        function zm(t, e, i) {
            const n = e.parent;
            const o = i.parent;
            if (n == o) {
                return
            }
            if (t.model.schema.isLimit(n) || t.model.schema.isLimit(o)) {
                return
            }
            if (!Fm(e, i, t.model.schema)) {
                return
            }
            e = t.createPositionAfter(n);
            i = t.createPositionBefore(o);
            if (!i.isEqual(e)) {
                t.insert(o, e)
            }
            t.merge(e);
            while (i.parent.isEmpty) {
                const e = i.parent;
                i = t.createPositionBefore(e);
                t.remove(e)
            }
            zm(t, e, i)
        }

        function Lm(t, e) {
            const i = t.checkChild(e, "$text");
            const n = t.checkChild(e, "paragraph");
            return !i && n
        }

        function Fm(t, e, i) {
            const n = new $h(t, e);
            for (const t of n.getWalker()) {
                if (i.isLimit(t.item)) {
                    return false
                }
            }
            return true
        }

        function Dm(t, e, i) {
            const n = t.createElement("paragraph");
            t.insert(n, e);
            Wm(t, i, t.createPositionAt(n, 0))
        }

        function jm(t, e) {
            const i = t.model.schema.getLimitElement(e);
            t.remove(t.createRangeIn(i));
            Dm(t, t.createPositionAt(i, 0), e)
        }

        function Hm(t, e) {
            const i = t.getLimitElement(e);
            if (!e.containsEntireContent(i)) {
                return false
            }
            const n = e.getFirstRange();
            if (n.start.parent == n.end.parent) {
                return false
            }
            return t.checkChild(i, "paragraph")
        }

        function Wm(t, e, i) {
            if (e instanceof df) {
                t.setSelection(i)
            } else {
                e.setTo(i)
            }
        }

        const qm = ' ,.?!:;"-()';

        function Um(t, e, i = {}) {
            const n = t.schema;
            const o = i.direction != "backward";
            const r = i.unit ? i.unit : "character";
            const s = e.focus;
            const a = new Wh({boundaries: Jm(s, o), singleCharacters: true, direction: o ? "forward" : "backward"});
            const c = {walker: a, schema: n, isForward: o, unit: r};
            let l;
            while (l = a.next()) {
                if (l.done) {
                    return
                }
                const i = $m(c, l.value);
                if (i) {
                    if (e instanceof df) {
                        t.change(t => {
                            t.setSelectionFocus(i)
                        })
                    } else {
                        e.setFocus(i)
                    }
                    return
                }
            }
        }

        function $m(t, e) {
            if (e.type == "text") {
                if (t.unit === "word") {
                    return Km(t.walker, t.isForward)
                }
                return Gm(t.walker, t.unit, t.isForward)
            }
            if (e.type == (t.isForward ? "elementStart" : "elementEnd")) {
                if (t.schema.isObject(e.item)) {
                    return Uh._createAt(e.item, t.isForward ? "after" : "before")
                }
                if (t.schema.checkChild(e.nextPosition, "$text")) {
                    return e.nextPosition
                }
            } else {
                if (t.schema.isLimit(e.item)) {
                    t.walker.skip(() => true);
                    return
                }
                if (t.schema.checkChild(e.nextPosition, "$text")) {
                    return e.nextPosition
                }
            }
        }

        function Gm(t, e) {
            const i = t.position.textNode;
            if (i) {
                const n = i.data;
                let o = t.position.offset - i.startOffset;
                while (vm(n, o) || e == "character" && ym(n, o)) {
                    t.next();
                    o = t.position.offset - i.startOffset
                }
            }
            return t.position
        }

        function Km(t, e) {
            let i = t.position.textNode;
            if (i) {
                let n = t.position.offset - i.startOffset;
                while (!Ym(i.data, n, e) && !Qm(i, n, e)) {
                    t.next();
                    const o = e ? t.position.nodeAfter : t.position.nodeBefore;
                    if (o && o.is("text")) {
                        const n = o.data.charAt(e ? 0 : o.data.length - 1);
                        if (!qm.includes(n)) {
                            t.next();
                            i = t.position.textNode
                        }
                    }
                    n = t.position.offset - i.startOffset
                }
            }
            return t.position
        }

        function Jm(t, e) {
            const i = t.root;
            const n = Uh._createAt(i, e ? "end" : 0);
            if (e) {
                return new $h(t, n)
            } else {
                return new $h(n, t)
            }
        }

        function Ym(t, e, i) {
            const n = e + (i ? 0 : -1);
            return qm.includes(t.charAt(n))
        }

        function Qm(t, e, i) {
            return e === (i ? t.endOffset : 0)
        }

        function Xm(t, e) {
            return t.change(t => {
                const i = t.createDocumentFragment();
                const n = e.getFirstRange();
                if (!n || n.isCollapsed) {
                    return i
                }
                const o = n.start.root;
                const r = n.start.getCommonPath(n.end);
                const s = o.getNodeByPath(r);
                let a;
                if (n.start.parent == n.end.parent) {
                    a = n
                } else {
                    a = t.createRange(t.createPositionAt(s, n.start.path[r.length]), t.createPositionAt(s, n.end.path[r.length] + 1))
                }
                const c = a.end.offset - a.start.offset;
                for (const e of a.getItems({shallow: true})) {
                    if (e.is("textProxy")) {
                        t.appendText(e.data, e.getAttributes(), i)
                    } else {
                        t.append(e._clone(true), i)
                    }
                }
                if (a != n) {
                    const e = n._getTransformedByMove(a.start, t.createPositionAt(i, 0), c)[0];
                    const o = t.createRange(t.createPositionAt(i, 0), e.start);
                    const r = t.createRange(e.end, t.createPositionAt(i, "end"));
                    Zm(r, t);
                    Zm(o, t)
                }
                return i
            })
        }

        function Zm(t, e) {
            const i = [];
            Array.from(t.getItems({direction: "backward"})).map(t => e.createRangeOn(t)).filter(e => {
                const i = (e.start.isAfter(t.start) || e.start.isEqual(t.start)) && (e.end.isBefore(t.end) || e.end.isEqual(t.end));
                return i
            }).forEach(t => {
                i.push(t.start.parent);
                e.remove(t)
            });
            i.forEach(t => {
                let i = t;
                while (i.parent && i.isEmpty) {
                    const t = e.createRangeOn(i);
                    i = i.parent;
                    e.remove(t)
                }
            })
        }

        function tp(t) {
            t.document.registerPostFixer(e => ep(e, t))
        }

        function ep(t, e) {
            const i = e.document.selection;
            const n = e.schema;
            const o = [];
            let r = false;
            for (const t of i.getRanges()) {
                const e = ip(t, n);
                if (e) {
                    o.push(e);
                    r = true
                } else {
                    o.push(t)
                }
            }
            if (r) {
                t.setSelection(ap(o), {backward: i.isBackward})
            }
        }

        function ip(t, e) {
            if (t.isCollapsed) {
                return np(t, e)
            }
            return op(t, e)
        }

        function np(t, e) {
            const i = t.start;
            const n = e.getNearestSelectionRange(i);
            if (!n) {
                return null
            }
            if (!n.isCollapsed) {
                return n
            }
            const o = n.start;
            if (i.isEqual(o)) {
                return null
            }
            return new $h(o)
        }

        function op(t, e) {
            const i = t.start;
            const n = t.end;
            const o = e.checkChild(i, "$text");
            const r = e.checkChild(n, "$text");
            const s = e.getLimitElement(i);
            const a = e.getLimitElement(n);
            if (s === a) {
                if (o && r) {
                    return null
                }
                if (sp(i, n, e)) {
                    const t = i.nodeAfter && e.isObject(i.nodeAfter);
                    const o = t ? null : e.getNearestSelectionRange(i, "forward");
                    const r = n.nodeBefore && e.isObject(n.nodeBefore);
                    const s = r ? null : e.getNearestSelectionRange(n, "backward");
                    const a = o ? o.start : i;
                    const c = s ? s.start : n;
                    return new $h(a, c)
                }
            }
            const c = s && !s.is("rootElement");
            const l = a && !a.is("rootElement");
            if (c || l) {
                const t = i.nodeAfter && n.nodeBefore && i.nodeAfter.parent === n.nodeBefore.parent;
                const o = c && (!t || !cp(i.nodeAfter, e));
                const r = l && (!t || !cp(n.nodeBefore, e));
                let d = i;
                let u = n;
                if (o) {
                    d = Uh._createBefore(rp(s, e))
                }
                if (r) {
                    u = Uh._createAfter(rp(a, e))
                }
                return new $h(d, u)
            }
            return null
        }

        function rp(t, e) {
            let i = t;
            let n = i;
            while (e.isLimit(n) && n.parent) {
                i = n;
                n = n.parent
            }
            return i
        }

        function sp(t, e, i) {
            const n = t.nodeAfter && !i.isLimit(t.nodeAfter) || i.checkChild(t, "$text");
            const o = e.nodeBefore && !i.isLimit(e.nodeBefore) || i.checkChild(e, "$text");
            return n || o
        }

        function ap(t) {
            const e = [];
            e.push(t.shift());
            for (const i of t) {
                const t = e.pop();
                if (i.isIntersecting(t)) {
                    const n = t.start.isAfter(i.start) ? i.start : t.start;
                    const o = t.end.isAfter(i.end) ? t.end : i.end;
                    const r = new $h(n, o);
                    e.push(r)
                } else {
                    e.push(t);
                    e.push(i)
                }
            }
            return e
        }

        function cp(t, e) {
            return t && e.isObject(t)
        }

        class lp {
            constructor() {
                this.markers = new Tm;
                this.document = new Cm(this);
                this.schema = new ug;
                this._pendingChanges = [];
                this._currentWriter = null;
                ["insertContent", "deleteContent", "modifySelection", "getSelectedContent", "applyOperation"].forEach(t => this.decorate(t));
                this.on("applyOperation", (t, e) => {
                    const i = e[0];
                    i._validate()
                }, {priority: "highest"});
                this.schema.register("$root", {isLimit: true});
                this.schema.register("$block", {allowIn: "$root", isBlock: true});
                this.schema.register("$text", {allowIn: "$block", isInline: true});
                this.schema.register("$clipboardHolder", {allowContentOf: "$root", isLimit: true});
                this.schema.extend("$text", {allowIn: "$clipboardHolder"});
                this.schema.register("$marker");
                this.schema.addChildCheck((t, e) => {
                    if (e.name === "$marker") {
                        return true
                    }
                });
                tp(this)
            }

            change(t) {
                try {
                    if (this._pendingChanges.length === 0) {
                        this._pendingChanges.push({batch: new zg, callback: t});
                        return this._runPendingChanges()[0]
                    } else {
                        return t(this._currentWriter)
                    }
                } catch (t) {
                    ss["b"].rethrowUnexpectedError(t, this)
                }
            }

            enqueueChange(t, e) {
                try {
                    if (typeof t === "string") {
                        t = new zg(t)
                    } else if (typeof t == "function") {
                        e = t;
                        t = new zg
                    }
                    this._pendingChanges.push({batch: t, callback: e});
                    if (this._pendingChanges.length == 1) {
                        this._runPendingChanges()
                    }
                } catch (t) {
                    ss["b"].rethrowUnexpectedError(t, this)
                }
            }

            applyOperation(t) {
                t._execute()
            }

            insertContent(t, e, i) {
                return Nm(this, t, e, i)
            }

            deleteContent(t, e) {
                Bm(this, t, e)
            }

            modifySelection(t, e) {
                Um(this, t, e)
            }

            getSelectedContent(t) {
                return Xm(this, t)
            }

            hasContent(t, e) {
                const i = t instanceof jh ? $h._createIn(t) : t;
                if (i.isCollapsed) {
                    return false
                }
                for (const t of this.markers.getMarkersIntersectingRange(i)) {
                    if (t.affectsData) {
                        return true
                    }
                }
                const {ignoreWhitespaces: n = false} = e || {};
                for (const t of i.getItems()) {
                    if (t.is("textProxy")) {
                        if (!n) {
                            return true
                        } else if (t.data.search(/\S/) !== -1) {
                            return true
                        }
                    } else if (this.schema.isObject(t)) {
                        return true
                    }
                }
                return false
            }

            createPositionFromPath(t, e, i) {
                return new Uh(t, e, i)
            }

            createPositionAt(t, e) {
                return Uh._createAt(t, e)
            }

            createPositionAfter(t) {
                return Uh._createAfter(t)
            }

            createPositionBefore(t) {
                return Uh._createBefore(t)
            }

            createRange(t, e) {
                return new $h(t, e)
            }

            createRangeIn(t) {
                return $h._createIn(t)
            }

            createRangeOn(t) {
                return $h._createOn(t)
            }

            createSelection(t, e, i) {
                return new Xh(t, e, i)
            }

            createBatch(t) {
                return new zg(t)
            }

            createOperationFromJSON(t) {
                return Rm.fromJSON(t, this.document)
            }

            destroy() {
                this.document.destroy();
                this.stopListening()
            }

            _runPendingChanges() {
                const t = [];
                this.fire("_beforeChanges");
                while (this._pendingChanges.length) {
                    const e = this._pendingChanges[0].batch;
                    this._currentWriter = new am(this, e);
                    const i = this._pendingChanges[0].callback(this._currentWriter);
                    t.push(i);
                    this.document._handleChangeBlock(this._currentWriter);
                    this._pendingChanges.shift();
                    this._currentWriter = null
                }
                this.fire("_afterChanges");
                return t
            }
        }

        vs(lp, Jc);

        class dp {
            constructor() {
                this._listener = Object.create(qd)
            }

            listenTo(t) {
                this._listener.listenTo(t, "keydown", (t, e) => {
                    this._listener.fire("_keydown:" + Ml(e), e)
                })
            }

            set(t, e, i = {}) {
                const n = Bl(t);
                const o = i.priority;
                this._listener.listenTo(this._listener, "_keydown:" + n, (t, i) => {
                    e(i, () => {
                        i.preventDefault();
                        i.stopPropagation();
                        t.stop()
                    });
                    t.return = true
                }, {priority: o})
            }

            press(t) {
                return !!this._listener.fire("_keydown:" + Ml(t), t)
            }

            destroy() {
                this._listener.stopListening()
            }
        }

        class up extends dp {
            constructor(t) {
                super();
                this.editor = t
            }

            set(t, e, i = {}) {
                if (typeof e == "string") {
                    const t = e;
                    e = (e, i) => {
                        this.editor.execute(t);
                        i()
                    }
                }
                super.set(t, e, i)
            }
        }

        class hp {
            constructor(t = {}) {
                this._context = t.context || new Is({language: t.language});
                this._context._addEditor(this, !t.context);
                const e = Array.from(this.constructor.builtinPlugins || []);
                this.config = new Jr(t, this.constructor.defaultConfig);
                this.config.define("plugins", e);
                this.config.define(this._context._getEditorConfig());
                this.plugins = new xs(this, e, this._context.plugins);
                this.locale = this._context.locale;
                this.t = this.locale.t;
                this.commands = new cg;
                this.set("state", "initializing");
                this.once("ready", () => this.state = "ready", {priority: "high"});
                this.once("destroy", () => this.state = "destroyed", {priority: "high"});
                this.set("isReadOnly", false);
                this.model = new lp;
                const i = new Vc;
                this.data = new Ig(this.model, i);
                this.editing = new ag(this.model, i);
                this.editing.view.document.bind("isReadOnly").to(this);
                this.conversion = new Ng([this.editing.downcastDispatcher, this.data.downcastDispatcher], this.data.upcastDispatcher);
                this.conversion.addAlias("dataDowncast", this.data.downcastDispatcher);
                this.conversion.addAlias("editingDowncast", this.editing.downcastDispatcher);
                this.keystrokes = new up(this);
                this.keystrokes.listenTo(this.editing.view.document)
            }

            initPlugins() {
                const t = this.config;
                const e = t.get("plugins");
                const i = t.get("removePlugins") || [];
                const n = t.get("extraPlugins") || [];
                return this.plugins.init(e.concat(n), i)
            }

            destroy() {
                let t = Promise.resolve();
                if (this.state == "initializing") {
                    t = new Promise(t => this.once("ready", t))
                }
                return t.then(() => {
                    this.fire("destroy");
                    this.stopListening();
                    this.commands.destroy()
                }).then(() => this.plugins.destroy()).then(() => {
                    this.model.destroy();
                    this.data.destroy();
                    this.editing.destroy();
                    this.keystrokes.destroy()
                }).then(() => this._context._removeEditor(this))
            }

            execute(...t) {
                try {
                    this.commands.execute(...t)
                } catch (t) {
                    ss["b"].rethrowUnexpectedError(t, this)
                }
            }
        }

        vs(hp, Jc);

        class fp {
            getHtml(t) {
                const e = document.implementation.createHTMLDocument("");
                const i = e.createElement("div");
                i.appendChild(t);
                return i.innerHTML
            }
        }

        class gp {
            constructor(t) {
                this._domParser = new DOMParser;
                this._domConverter = new zd(t, {blockFillerMode: "nbsp"});
                this._htmlWriter = new fp
            }

            toData(t) {
                const e = this._domConverter.viewToDom(t, document);
                return this._htmlWriter.getHtml(e)
            }

            toView(t) {
                const e = this._toDom(t);
                return this._domConverter.domToView(e)
            }

            _toDom(t) {
                const e = this._domParser.parseFromString(t, "text/html");
                const i = e.createDocumentFragment();
                const n = e.body.childNodes;
                while (n.length > 0) {
                    i.appendChild(n[0])
                }
                return i
            }
        }

        class mp {
            constructor(t) {
                this.editor = t;
                this.set("isEnabled", true);
                this._disableStack = new Set
            }

            forceDisabled(t) {
                this._disableStack.add(t);
                if (this._disableStack.size == 1) {
                    this.on("set:isEnabled", pp, {priority: "highest"});
                    this.isEnabled = false
                }
            }

            clearForceDisabled(t) {
                this._disableStack.delete(t);
                if (this._disableStack.size == 0) {
                    this.off("set:isEnabled", pp);
                    this.isEnabled = true
                }
            }

            destroy() {
                this.stopListening()
            }

            static get isContextPlugin() {
                return false
            }
        }

        vs(mp, Jc);

        function pp(t) {
            t.return = false;
            t.stop()
        }

        class bp extends ys {
            constructor(t) {
                super({idProperty: "viewUid"});
                this.on("add", (t, e, i) => {
                    if (!e.isRendered) {
                        e.render()
                    }
                    if (e.element && this._parentElement) {
                        this._parentElement.insertBefore(e.element, this._parentElement.children[i])
                    }
                });
                this.on("remove", (t, e) => {
                    if (e.element && this._parentElement) {
                        e.element.remove()
                    }
                });
                this.locale = t;
                this._parentElement = null
            }

            destroy() {
                this.map(t => t.destroy())
            }

            setParent(t) {
                this._parentElement = t
            }

            delegate(...t) {
                if (!t.length || !wp(t)) {
                    throw new ss["b"]("ui-viewcollection-delegate-wrong-events: All event names must be strings.", this)
                }
                return {
                    to: e => {
                        for (const i of this) {
                            for (const n of t) {
                                i.delegate(n).to(e)
                            }
                        }
                        this.on("add", (i, n) => {
                            for (const i of t) {
                                n.delegate(i).to(e)
                            }
                        });
                        this.on("remove", (i, n) => {
                            for (const i of t) {
                                n.stopDelegating(i, e)
                            }
                        })
                    }
                }
            }
        }

        function wp(t) {
            return t.every(t => typeof t == "string")
        }

        const kp = "http://www.w3.org/1999/xhtml";

        class _p {
            constructor(t) {
                Object.assign(this, Op(Rp(t)));
                this._isRendered = false;
                this._revertData = null
            }

            render() {
                const t = this._renderNode({intoFragment: true});
                this._isRendered = true;
                return t
            }

            apply(t) {
                this._revertData = qp();
                this._renderNode({node: t, isApplying: true, revertData: this._revertData});
                return t
            }

            revert(t) {
                if (!this._revertData) {
                    throw new ss["b"]("ui-template-revert-not-applied: Attempting to revert a template which has not been applied yet.", [this, t])
                }
                this._revertTemplateFromNode(t, this._revertData)
            }

            * getViews() {
                function* t(e) {
                    if (e.children) {
                        for (const i of e.children) {
                            if (jp(i)) {
                                yield i
                            } else if (Hp(i)) {
                                yield* t(i)
                            }
                        }
                    }
                }

                yield* t(this)
            }

            static bind(t, e) {
                return {
                    to(i, n) {
                        return new yp({eventNameOrFunction: i, attribute: i, observable: t, emitter: e, callback: n})
                    }, if(i, n, o) {
                        return new xp({observable: t, emitter: e, attribute: i, valueIfTrue: n, callback: o})
                    }
                }
            }

            static extend(t, e) {
                if (t._isRendered) {
                    throw new ss["b"]("template-extend-render: Attempting to extend a template which has already been rendered.", [this, t])
                }
                Fp(t, Op(Rp(e)))
            }

            _renderNode(t) {
                let e;
                if (t.node) {
                    e = this.tag && this.text
                } else {
                    e = this.tag ? this.text : !this.text
                }
                if (e) {
                    throw new ss["b"]('ui-template-wrong-syntax: Node definition must have either "tag" or "text" when rendering a new Node.', this)
                }
                if (this.text) {
                    return this._renderText(t)
                } else {
                    return this._renderElement(t)
                }
            }

            _renderElement(t) {
                let e = t.node;
                if (!e) {
                    e = t.node = document.createElementNS(this.ns || kp, this.tag)
                }
                this._renderAttributes(t);
                this._renderElementChildren(t);
                this._setUpListeners(t);
                return e
            }

            _renderText(t) {
                let e = t.node;
                if (e) {
                    t.revertData.text = e.textContent
                } else {
                    e = t.node = document.createTextNode("")
                }
                if (Cp(this.text)) {
                    this._bindToObservable({schema: this.text, updater: Pp(e), data: t})
                } else {
                    e.textContent = this.text.join("")
                }
                return e
            }

            _renderAttributes(t) {
                let e, i, n, o;
                if (!this.attributes) {
                    return
                }
                const r = t.node;
                const s = t.revertData;
                for (e in this.attributes) {
                    n = r.getAttribute(e);
                    i = this.attributes[e];
                    if (s) {
                        s.attributes[e] = n
                    }
                    o = ct(i[0]) && i[0].ns ? i[0].ns : null;
                    if (Cp(i)) {
                        const a = o ? i[0].value : i;
                        if (s && Up(e)) {
                            a.unshift(n)
                        }
                        this._bindToObservable({schema: a, updater: Sp(r, e, o), data: t})
                    } else if (e == "style" && typeof i[0] !== "string") {
                        this._renderStyleAttribute(i[0], t)
                    } else {
                        if (s && n && Up(e)) {
                            i.unshift(n)
                        }
                        i = i.map(t => t ? t.value || t : t).reduce((t, e) => t.concat(e), []).reduce(zp, "");
                        if (!Dp(i)) {
                            r.setAttributeNS(o, e, i)
                        }
                    }
                }
            }

            _renderStyleAttribute(t, e) {
                const i = e.node;
                for (const n in t) {
                    const o = t[n];
                    if (Cp(o)) {
                        this._bindToObservable({schema: [o], updater: Ep(i, n), data: e})
                    } else {
                        i.style[n] = o
                    }
                }
            }

            _renderElementChildren(t) {
                const e = t.node;
                const i = t.intoFragment ? document.createDocumentFragment() : e;
                const n = t.isApplying;
                let o = 0;
                for (const r of this.children) {
                    if (Wp(r)) {
                        if (!n) {
                            r.setParent(e);
                            for (const t of r) {
                                i.appendChild(t.element)
                            }
                        }
                    } else if (jp(r)) {
                        if (!n) {
                            if (!r.isRendered) {
                                r.render()
                            }
                            i.appendChild(r.element)
                        }
                    } else if (xd(r)) {
                        i.appendChild(r)
                    } else {
                        if (n) {
                            const e = t.revertData;
                            const n = qp();
                            e.children.push(n);
                            r._renderNode({node: i.childNodes[o++], isApplying: true, revertData: n})
                        } else {
                            i.appendChild(r.render())
                        }
                    }
                }
                if (t.intoFragment) {
                    e.appendChild(i)
                }
            }

            _setUpListeners(t) {
                if (!this.eventListeners) {
                    return
                }
                for (const e in this.eventListeners) {
                    const i = this.eventListeners[e].map(i => {
                        const [n, o] = e.split("@");
                        return i.activateDomEventListener(n, o, t)
                    });
                    if (t.revertData) {
                        t.revertData.bindings.push(i)
                    }
                }
            }

            _bindToObservable({schema: t, updater: e, data: i}) {
                const n = i.revertData;
                Tp(t, e, i);
                const o = t.filter(t => !Dp(t)).filter(t => t.observable).map(n => n.activateAttributeListener(t, e, i));
                if (n) {
                    n.bindings.push(o)
                }
            }

            _revertTemplateFromNode(t, e) {
                for (const t of e.bindings) {
                    for (const e of t) {
                        e()
                    }
                }
                if (e.text) {
                    t.textContent = e.text;
                    return
                }
                for (const i in e.attributes) {
                    const n = e.attributes[i];
                    if (n === null) {
                        t.removeAttribute(i)
                    } else {
                        t.setAttribute(i, n)
                    }
                }
                for (let i = 0; i < e.children.length; ++i) {
                    this._revertTemplateFromNode(t.childNodes[i], e.children[i])
                }
            }
        }

        vs(_p, ds);

        class vp {
            constructor(t) {
                Object.assign(this, t)
            }

            getValue(t) {
                const e = this.observable[this.attribute];
                return this.callback ? this.callback(e, t) : e
            }

            activateAttributeListener(t, e, i) {
                const n = () => Tp(t, e, i);
                this.emitter.listenTo(this.observable, "change:" + this.attribute, n);
                return () => {
                    this.emitter.stopListening(this.observable, "change:" + this.attribute, n)
                }
            }
        }

        class yp extends vp {
            activateDomEventListener(t, e, i) {
                const n = (t, i) => {
                    if (!e || i.target.matches(e)) {
                        if (typeof this.eventNameOrFunction == "function") {
                            this.eventNameOrFunction(i)
                        } else {
                            this.observable.fire(this.eventNameOrFunction, i)
                        }
                    }
                };
                this.emitter.listenTo(i.node, t, n);
                return () => {
                    this.emitter.stopListening(i.node, t, n)
                }
            }
        }

        class xp extends vp {
            getValue(t) {
                const e = super.getValue(t);
                return Dp(e) ? false : this.valueIfTrue || true
            }
        }

        function Cp(t) {
            if (!t) {
                return false
            }
            if (t.value) {
                t = t.value
            }
            if (Array.isArray(t)) {
                return t.some(Cp)
            } else if (t instanceof vp) {
                return true
            }
            return false
        }

        function Ap(t, e) {
            return t.map(t => {
                if (t instanceof vp) {
                    return t.getValue(e)
                }
                return t
            })
        }

        function Tp(t, e, {node: i}) {
            let n = Ap(t, i);
            if (t.length == 1 && t[0] instanceof xp) {
                n = n[0]
            } else {
                n = n.reduce(zp, "")
            }
            if (Dp(n)) {
                e.remove()
            } else {
                e.set(n)
            }
        }

        function Pp(t) {
            return {
                set(e) {
                    t.textContent = e
                }, remove() {
                    t.textContent = ""
                }
            }
        }

        function Sp(t, e, i) {
            return {
                set(n) {
                    t.setAttributeNS(i, e, n)
                }, remove() {
                    t.removeAttributeNS(i, e)
                }
            }
        }

        function Ep(t, e) {
            return {
                set(i) {
                    t.style[e] = i
                }, remove() {
                    t.style[e] = null
                }
            }
        }

        function Rp(t) {
            const e = $r(t, t => {
                if (t && (t instanceof vp || Hp(t) || jp(t) || Wp(t))) {
                    return t
                }
            });
            return e
        }

        function Op(t) {
            if (typeof t == "string") {
                t = Np(t)
            } else if (t.text) {
                Mp(t)
            }
            if (t.on) {
                t.eventListeners = Vp(t.on);
                delete t.on
            }
            if (!t.text) {
                if (t.attributes) {
                    Ip(t.attributes)
                }
                const e = [];
                if (t.children) {
                    if (Wp(t.children)) {
                        e.push(t.children)
                    } else {
                        for (const i of t.children) {
                            if (Hp(i) || jp(i) || xd(i)) {
                                e.push(i)
                            } else {
                                e.push(new _p(i))
                            }
                        }
                    }
                }
                t.children = e
            }
            return t
        }

        function Ip(t) {
            for (const e in t) {
                if (t[e].value) {
                    t[e].value = [].concat(t[e].value)
                }
                Bp(t, e)
            }
        }

        function Vp(t) {
            for (const e in t) {
                Bp(t, e)
            }
            return t
        }

        function Np(t) {
            return {text: [t]}
        }

        function Mp(t) {
            if (!Array.isArray(t.text)) {
                t.text = [t.text]
            }
        }

        function Bp(t, e) {
            if (!Array.isArray(t[e])) {
                t[e] = [t[e]]
            }
        }

        function zp(t, e) {
            if (Dp(e)) {
                return t
            } else if (Dp(t)) {
                return e
            } else {
                return `${t} ${e}`
            }
        }

        function Lp(t, e) {
            for (const i in e) {
                if (t[i]) {
                    t[i].push(...e[i])
                } else {
                    t[i] = e[i]
                }
            }
        }

        function Fp(t, e) {
            if (e.attributes) {
                if (!t.attributes) {
                    t.attributes = {}
                }
                Lp(t.attributes, e.attributes)
            }
            if (e.eventListeners) {
                if (!t.eventListeners) {
                    t.eventListeners = {}
                }
                Lp(t.eventListeners, e.eventListeners)
            }
            if (e.text) {
                t.text.push(...e.text)
            }
            if (e.children && e.children.length) {
                if (t.children.length != e.children.length) {
                    throw new ss["b"]("ui-template-extend-children-mismatch: The number of children in extended definition does not match.", t)
                }
                let i = 0;
                for (const n of e.children) {
                    Fp(t.children[i++], n)
                }
            }
        }

        function Dp(t) {
            return !t && t !== 0
        }

        function jp(t) {
            return t instanceof Gp
        }

        function Hp(t) {
            return t instanceof _p
        }

        function Wp(t) {
            return t instanceof bp
        }

        function qp() {
            return {children: [], bindings: [], attributes: {}}
        }

        function Up(t) {
            return t == "class" || t == "style"
        }

        var $p = i(15);

        class Gp {
            constructor(t) {
                this.element = null;
                this.isRendered = false;
                this.locale = t;
                this.t = t && t.t;
                this._viewCollections = new ys;
                this._unboundChildren = this.createCollection();
                this._viewCollections.on("add", (e, i) => {
                    i.locale = t
                });
                this.decorate("render")
            }

            get bindTemplate() {
                if (this._bindTemplate) {
                    return this._bindTemplate
                }
                return this._bindTemplate = _p.bind(this, this)
            }

            createCollection() {
                const t = new bp;
                this._viewCollections.add(t);
                return t
            }

            registerChild(t) {
                if (!js(t)) {
                    t = [t]
                }
                for (const e of t) {
                    this._unboundChildren.add(e)
                }
            }

            deregisterChild(t) {
                if (!js(t)) {
                    t = [t]
                }
                for (const e of t) {
                    this._unboundChildren.remove(e)
                }
            }

            setTemplate(t) {
                this.template = new _p(t)
            }

            extendTemplate(t) {
                _p.extend(this.template, t)
            }

            render() {
                if (this.isRendered) {
                    throw new ss["b"]("ui-view-render-already-rendered: This View has already been rendered.", this)
                }
                if (this.template) {
                    this.element = this.template.render();
                    this.registerChild(this.template.getViews())
                }
                this.isRendered = true
            }

            destroy() {
                this.stopListening();
                this._viewCollections.map(t => t.destroy());
                if (this.template && this.template._revertData) {
                    this.template.revert(this.element)
                }
            }
        }

        vs(Gp, qd);
        vs(Gp, Jc);

        function Kp(t) {
            while (t && t.tagName.toLowerCase() != "html") {
                if (Id.window.getComputedStyle(t).position != "static") {
                    return t
                }
                t = t.parentElement
            }
            return null
        }

        function Jp({element: t, target: e, positions: i, limiter: n, fitInViewport: o}) {
            if (gt(e)) {
                e = e()
            }
            if (gt(n)) {
                n = n()
            }
            const r = Kp(t.parentElement);
            const s = new vh(t);
            const a = new vh(e);
            let c;
            let l;
            if (!n && !o) {
                [l, c] = Yp(i[0], a, s)
            } else {
                const t = n && new vh(n).getVisible();
                const e = o && new vh(Id.window);
                [l, c] = Qp(i, a, s, t, e) || Yp(i[0], a, s)
            }
            let {left: d, top: u} = Xp(c);
            if (r) {
                const t = Xp(new vh(r));
                const e = kh(r);
                d -= t.left;
                u -= t.top;
                d += r.scrollLeft;
                u += r.scrollTop;
                d -= e.left;
                u -= e.top
            }
            return {left: d, top: u, name: l}
        }

        function Yp(t, e, i) {
            const {left: n, top: o, name: r} = t(e, i);
            return [r, i.clone().moveTo(n, o)]
        }

        function Qp(t, e, i, n, o) {
            let r = 0;
            let s = 0;
            let a;
            let c;
            const l = i.getArea();
            t.some(t => {
                const [d, u] = Yp(t, e, i);
                let h;
                let f;
                if (n) {
                    if (o) {
                        const t = n.getIntersection(o);
                        if (t) {
                            h = t.getIntersectionArea(u)
                        } else {
                            h = 0
                        }
                    } else {
                        h = n.getIntersectionArea(u)
                    }
                }
                if (o) {
                    f = o.getIntersectionArea(u)
                }
                if (o && !n) {
                    if (f > s) {
                        g()
                    }
                } else if (!o && n) {
                    if (h > r) {
                        g()
                    }
                } else {
                    if (f > s && h >= r) {
                        g()
                    } else if (f >= s && h > r) {
                        g()
                    }
                }

                function g() {
                    s = f;
                    r = h;
                    a = u;
                    c = d
                }

                return h === l
            });
            return a ? [c, a] : null
        }

        function Xp({left: t, top: e}) {
            const {scrollX: i, scrollY: n} = Id.window;
            return {left: t + i, top: e + n}
        }

        function Zp(t) {
            return e => e + t
        }

        var tb = i(17);
        const eb = Zp("px");
        const ib = Id.document.body;

        class nb extends Gp {
            constructor(t) {
                super(t);
                const e = this.bindTemplate;
                this.set("top", 0);
                this.set("left", 0);
                this.set("position", "arrow_nw");
                this.set("isVisible", false);
                this.set("withArrow", true);
                this.set("class");
                this.content = this.createCollection();
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-balloon-panel", e.to("position", t => `ck-balloon-panel_${t}`), e.if("isVisible", "ck-balloon-panel_visible"), e.if("withArrow", "ck-balloon-panel_with-arrow"), e.to("class")],
                        style: {top: e.to("top", eb), left: e.to("left", eb)}
                    },
                    children: this.content
                })
            }

            show() {
                this.isVisible = true
            }

            hide() {
                this.isVisible = false
            }

            attachTo(t) {
                this.show();
                const e = nb.defaultPositions;
                const i = Object.assign({}, {
                    element: this.element,
                    positions: [e.southArrowNorth, e.southArrowNorthMiddleWest, e.southArrowNorthMiddleEast, e.southArrowNorthWest, e.southArrowNorthEast, e.northArrowSouth, e.northArrowSouthMiddleWest, e.northArrowSouthMiddleEast, e.northArrowSouthWest, e.northArrowSouthEast],
                    limiter: ib,
                    fitInViewport: true
                }, t);
                const n = nb._getOptimalPosition(i);
                const o = parseInt(n.left);
                const r = parseInt(n.top);
                const s = n.name;
                Object.assign(this, {top: r, left: o, position: s})
            }

            pin(t) {
                this.unpin();
                this._pinWhenIsVisibleCallback = () => {
                    if (this.isVisible) {
                        this._startPinning(t)
                    } else {
                        this._stopPinning()
                    }
                };
                this._startPinning(t);
                this.listenTo(this, "change:isVisible", this._pinWhenIsVisibleCallback)
            }

            unpin() {
                if (this._pinWhenIsVisibleCallback) {
                    this._stopPinning();
                    this.stopListening(this, "change:isVisible", this._pinWhenIsVisibleCallback);
                    this._pinWhenIsVisibleCallback = null;
                    this.hide()
                }
            }

            _startPinning(t) {
                this.attachTo(t);
                const e = ob(t.target);
                const i = t.limiter ? ob(t.limiter) : ib;
                this.listenTo(Id.document, "scroll", (n, o) => {
                    const r = o.target;
                    const s = e && r.contains(e);
                    const a = i && r.contains(i);
                    if (s || a || !e || !i) {
                        this.attachTo(t)
                    }
                }, {useCapture: true});
                this.listenTo(Id.window, "resize", () => {
                    this.attachTo(t)
                })
            }

            _stopPinning() {
                this.stopListening(Id.document, "scroll");
                this.stopListening(Id.window, "resize")
            }
        }

        function ob(t) {
            if (Kr(t)) {
                return t
            }
            if (wh(t)) {
                return t.commonAncestorContainer
            }
            if (typeof t == "function") {
                return ob(t())
            }
            return null
        }

        nb.arrowHorizontalOffset = 25;
        nb.arrowVerticalOffset = 10;
        nb._getOptimalPosition = Jp;
        nb.defaultPositions = {
            northWestArrowSouthWest: (t, e) => ({
                top: rb(t, e),
                left: t.left - nb.arrowHorizontalOffset,
                name: "arrow_sw"
            }),
            northWestArrowSouthMiddleWest: (t, e) => ({
                top: rb(t, e),
                left: t.left - e.width * .25 - nb.arrowHorizontalOffset,
                name: "arrow_smw"
            }),
            northWestArrowSouth: (t, e) => ({top: rb(t, e), left: t.left - e.width / 2, name: "arrow_s"}),
            northWestArrowSouthMiddleEast: (t, e) => ({
                top: rb(t, e),
                left: t.left - e.width * .75 + nb.arrowHorizontalOffset,
                name: "arrow_sme"
            }),
            northWestArrowSouthEast: (t, e) => ({
                top: rb(t, e),
                left: t.left - e.width + nb.arrowHorizontalOffset,
                name: "arrow_se"
            }),
            northArrowSouthWest: (t, e) => ({
                top: rb(t, e),
                left: t.left + t.width / 2 - nb.arrowHorizontalOffset,
                name: "arrow_sw"
            }),
            northArrowSouthMiddleWest: (t, e) => ({
                top: rb(t, e),
                left: t.left + t.width / 2 - e.width * .25 - nb.arrowHorizontalOffset,
                name: "arrow_smw"
            }),
            northArrowSouth: (t, e) => ({top: rb(t, e), left: t.left + t.width / 2 - e.width / 2, name: "arrow_s"}),
            northArrowSouthMiddleEast: (t, e) => ({
                top: rb(t, e),
                left: t.left + t.width / 2 - e.width * .75 + nb.arrowHorizontalOffset,
                name: "arrow_sme"
            }),
            northArrowSouthEast: (t, e) => ({
                top: rb(t, e),
                left: t.left + t.width / 2 - e.width + nb.arrowHorizontalOffset,
                name: "arrow_se"
            }),
            northEastArrowSouthWest: (t, e) => ({
                top: rb(t, e),
                left: t.right - nb.arrowHorizontalOffset,
                name: "arrow_sw"
            }),
            northEastArrowSouthMiddleWest: (t, e) => ({
                top: rb(t, e),
                left: t.right - e.width * .25 - nb.arrowHorizontalOffset,
                name: "arrow_smw"
            }),
            northEastArrowSouth: (t, e) => ({top: rb(t, e), left: t.right - e.width / 2, name: "arrow_s"}),
            northEastArrowSouthMiddleEast: (t, e) => ({
                top: rb(t, e),
                left: t.right - e.width * .75 + nb.arrowHorizontalOffset,
                name: "arrow_sme"
            }),
            northEastArrowSouthEast: (t, e) => ({
                top: rb(t, e),
                left: t.right - e.width + nb.arrowHorizontalOffset,
                name: "arrow_se"
            }),
            southWestArrowNorthWest: (t, e) => ({
                top: sb(t, e),
                left: t.left - nb.arrowHorizontalOffset,
                name: "arrow_nw"
            }),
            southWestArrowNorthMiddleWest: (t, e) => ({
                top: sb(t, e),
                left: t.left - e.width * .25 - nb.arrowHorizontalOffset,
                name: "arrow_nmw"
            }),
            southWestArrowNorth: (t, e) => ({top: sb(t, e), left: t.left - e.width / 2, name: "arrow_n"}),
            southWestArrowNorthMiddleEast: (t, e) => ({
                top: sb(t, e),
                left: t.left - e.width * .75 + nb.arrowHorizontalOffset,
                name: "arrow_nme"
            }),
            southWestArrowNorthEast: (t, e) => ({
                top: sb(t, e),
                left: t.left - e.width + nb.arrowHorizontalOffset,
                name: "arrow_ne"
            }),
            southArrowNorthWest: (t, e) => ({
                top: sb(t, e),
                left: t.left + t.width / 2 - nb.arrowHorizontalOffset,
                name: "arrow_nw"
            }),
            southArrowNorthMiddleWest: (t, e) => ({
                top: sb(t, e),
                left: t.left + t.width / 2 - e.width * .25 - nb.arrowHorizontalOffset,
                name: "arrow_nmw"
            }),
            southArrowNorth: (t, e) => ({top: sb(t, e), left: t.left + t.width / 2 - e.width / 2, name: "arrow_n"}),
            southArrowNorthMiddleEast: (t, e) => ({
                top: sb(t, e),
                left: t.left + t.width / 2 - e.width * .75 + nb.arrowHorizontalOffset,
                name: "arrow_nme"
            }),
            southArrowNorthEast: (t, e) => ({
                top: sb(t, e),
                left: t.left + t.width / 2 - e.width + nb.arrowHorizontalOffset,
                name: "arrow_ne"
            }),
            southEastArrowNorthWest: (t, e) => ({
                top: sb(t, e),
                left: t.right - nb.arrowHorizontalOffset,
                name: "arrow_nw"
            }),
            southEastArrowNorthMiddleWest: (t, e) => ({
                top: sb(t, e),
                left: t.right - e.width * .25 - nb.arrowHorizontalOffset,
                name: "arrow_nmw"
            }),
            southEastArrowNorth: (t, e) => ({top: sb(t, e), left: t.right - e.width / 2, name: "arrow_n"}),
            southEastArrowNorthMiddleEast: (t, e) => ({
                top: sb(t, e),
                left: t.right - e.width * .75 + nb.arrowHorizontalOffset,
                name: "arrow_nme"
            }),
            southEastArrowNorthEast: (t, e) => ({
                top: sb(t, e),
                left: t.right - e.width + nb.arrowHorizontalOffset,
                name: "arrow_ne"
            })
        };

        function rb(t, e) {
            return t.top - e.height - nb.arrowVerticalOffset
        }

        function sb(t) {
            return t.bottom + nb.arrowVerticalOffset
        }

        var ab = i(19);

        class cb extends Gp {
            constructor() {
                super();
                const t = this.bindTemplate;
                this.set("content", "");
                this.set("viewBox", "0 0 20 20");
                this.set("fillColor", "");
                this.setTemplate({
                    tag: "svg",
                    ns: "http://www.w3.org/2000/svg",
                    attributes: {class: ["ck", "ck-icon"], viewBox: t.to("viewBox")}
                })
            }

            render() {
                super.render();
                this._updateXMLContent();
                this._colorFillPaths();
                this.on("change:content", () => {
                    this._updateXMLContent();
                    this._colorFillPaths()
                });
                this.on("change:fillColor", () => {
                    this._colorFillPaths()
                })
            }

            _updateXMLContent() {
                if (this.content) {
                    const t = (new DOMParser).parseFromString(this.content.trim(), "image/svg+xml");
                    const e = t.querySelector("svg");
                    const i = e.getAttribute("viewBox");
                    if (i) {
                        this.viewBox = i
                    }
                    this.element.innerHTML = "";
                    while (e.childNodes.length > 0) {
                        this.element.appendChild(e.childNodes[0])
                    }
                }
            }

            _colorFillPaths() {
                if (this.fillColor) {
                    this.element.querySelectorAll(".ck-icon__fill").forEach(t => {
                        t.style.fill = this.fillColor
                    })
                }
            }
        }

        var lb = i(21);

        class db extends Gp {
            constructor(t) {
                super(t);
                this.set("text", "");
                this.set("position", "s");
                const e = this.bindTemplate;
                this.setTemplate({
                    tag: "span",
                    attributes: {class: ["ck", "ck-tooltip", e.to("position", t => "ck-tooltip_" + t), e.if("text", "ck-hidden", t => !t.trim())]},
                    children: [{
                        tag: "span",
                        attributes: {class: ["ck", "ck-tooltip__text"]},
                        children: [{text: e.to("text")}]
                    }]
                })
            }
        }

        var ub = i(23);

        class hb extends Gp {
            constructor(t) {
                super(t);
                const e = this.bindTemplate;
                const i = is();
                this.set("class");
                this.set("labelStyle");
                this.set("icon");
                this.set("isEnabled", true);
                this.set("isOn", false);
                this.set("isVisible", true);
                this.set("isToggleable", false);
                this.set("keystroke");
                this.set("label");
                this.set("tabindex", -1);
                this.set("tooltip");
                this.set("tooltipPosition", "s");
                this.set("type", "button");
                this.set("withText", false);
                this.set("withKeystroke", false);
                this.children = this.createCollection();
                this.tooltipView = this._createTooltipView();
                this.labelView = this._createLabelView(i);
                this.iconView = new cb;
                this.iconView.extendTemplate({attributes: {class: "ck-button__icon"}});
                this.keystrokeView = this._createKeystrokeView();
                this.bind("_tooltipString").to(this, "tooltip", this, "label", this, "keystroke", this._getTooltipString.bind(this));
                this.setTemplate({
                    tag: "button",
                    attributes: {
                        class: ["ck", "ck-button", e.to("class"), e.if("isEnabled", "ck-disabled", t => !t), e.if("isVisible", "ck-hidden", t => !t), e.to("isOn", t => t ? "ck-on" : "ck-off"), e.if("withText", "ck-button_with-text"), e.if("withKeystroke", "ck-button_with-keystroke")],
                        type: e.to("type", t => t ? t : "button"),
                        tabindex: e.to("tabindex"),
                        "aria-labelledby": `ck-editor__aria-label_${i}`,
                        "aria-disabled": e.if("isEnabled", true, t => !t),
                        "aria-pressed": e.to("isOn", t => this.isToggleable ? String(t) : false)
                    },
                    children: this.children,
                    on: {
                        mousedown: e.to(t => {
                            t.preventDefault()
                        }), click: e.to(t => {
                            if (this.isEnabled) {
                                this.fire("execute")
                            } else {
                                t.preventDefault()
                            }
                        })
                    }
                })
            }

            render() {
                super.render();
                if (this.icon) {
                    this.iconView.bind("content").to(this, "icon");
                    this.children.add(this.iconView)
                }
                this.children.add(this.tooltipView);
                this.children.add(this.labelView);
                if (this.withKeystroke) {
                    this.children.add(this.keystrokeView)
                }
            }

            focus() {
                this.element.focus()
            }

            _createTooltipView() {
                const t = new db;
                t.bind("text").to(this, "_tooltipString");
                t.bind("position").to(this, "tooltipPosition");
                return t
            }

            _createLabelView(t) {
                const e = new Gp;
                const i = this.bindTemplate;
                e.setTemplate({
                    tag: "span",
                    attributes: {
                        class: ["ck", "ck-button__label"],
                        style: i.to("labelStyle"),
                        id: `ck-editor__aria-label_${t}`
                    },
                    children: [{text: this.bindTemplate.to("label")}]
                });
                return e
            }

            _createKeystrokeView() {
                const t = new Gp;
                t.setTemplate({
                    tag: "span",
                    attributes: {class: ["ck", "ck-button__keystroke"]},
                    children: [{text: this.bindTemplate.to("keystroke", t => zl(t))}]
                });
                return t
            }

            _getTooltipString(t, e, i) {
                if (t) {
                    if (typeof t == "string") {
                        return t
                    } else {
                        if (i) {
                            i = zl(i)
                        }
                        if (t instanceof Function) {
                            return t(e, i)
                        } else {
                            return `${e}${i ? ` (${i})` : ""}`
                        }
                    }
                }
                return ""
            }
        }

        class fb {
            constructor() {
                this.set("isFocused", false);
                this.set("focusedElement", null);
                this._elements = new Set;
                this._nextEventLoopTimeout = null
            }

            add(t) {
                if (this._elements.has(t)) {
                    throw new ss["b"]("focusTracker-add-element-already-exist", this)
                }
                this.listenTo(t, "focus", () => this._focus(t), {useCapture: true});
                this.listenTo(t, "blur", () => this._blur(), {useCapture: true});
                this._elements.add(t)
            }

            remove(t) {
                if (t === this.focusedElement) {
                    this._blur(t)
                }
                if (this._elements.has(t)) {
                    this.stopListening(t);
                    this._elements.delete(t)
                }
            }

            destroy() {
                this.stopListening()
            }

            _focus(t) {
                clearTimeout(this._nextEventLoopTimeout);
                this.focusedElement = t;
                this.isFocused = true
            }

            _blur() {
                clearTimeout(this._nextEventLoopTimeout);
                this._nextEventLoopTimeout = setTimeout(() => {
                    this.focusedElement = null;
                    this.isFocused = false
                }, 0)
            }
        }

        vs(fb, qd);
        vs(fb, Jc);
        var gb = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.463 5.187a.888.888 0 1 1 1.254 1.255L9.16 10l3.557 3.557a.888.888 0 1 1-1.254 1.255L7.26 10.61a.888.888 0 0 1 .16-1.382l4.043-4.042z"/></svg>';
        var mb = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M8.537 14.813a.888.888 0 1 1-1.254-1.255L10.84 10 7.283 6.442a.888.888 0 1 1 1.254-1.255L12.74 9.39a.888.888 0 0 1-.16 1.382l-4.043 4.042z"/></svg>';
        var pb = i(25);
        var bb = i(27);
        const wb = Zp("px");

        class kb extends mp {
            static get pluginName() {
                return "ContextualBalloon"
            }

            constructor(t) {
                super(t);
                this.positionLimiter = () => {
                    const t = this.editor.editing.view;
                    const e = t.document;
                    const i = e.selection.editableElement;
                    if (i) {
                        return t.domConverter.mapViewToDom(i.root)
                    }
                    return null
                };
                this.set("visibleView", null);
                this.view = new nb(t.locale);
                t.ui.view.body.add(this.view);
                t.ui.focusTracker.add(this.view.element);
                this._viewToStack = new Map;
                this._idToStack = new Map;
                this.set("_numberOfStacks", 0);
                this.set("_singleViewMode", false);
                this._rotatorView = this._createRotatorView();
                this._fakePanelsView = this._createFakePanelsView()
            }

            hasView(t) {
                return Array.from(this._viewToStack.keys()).includes(t)
            }

            add(t) {
                if (this.hasView(t.view)) {
                    throw new ss["b"]("contextualballoon-add-view-exist: Cannot add configuration of the same view twice.", [this, t])
                }
                const e = t.stackId || "main";
                if (!this._idToStack.has(e)) {
                    this._idToStack.set(e, new Map([[t.view, t]]));
                    this._viewToStack.set(t.view, this._idToStack.get(e));
                    this._numberOfStacks = this._idToStack.size;
                    if (!this._visibleStack || t.singleViewMode) {
                        this.showStack(e)
                    }
                    return
                }
                const i = this._idToStack.get(e);
                if (t.singleViewMode) {
                    this.showStack(e)
                }
                i.set(t.view, t);
                this._viewToStack.set(t.view, i);
                if (i === this._visibleStack) {
                    this._showView(t)
                }
            }

            remove(t) {
                if (!this.hasView(t)) {
                    throw new ss["b"]("contextualballoon-remove-view-not-exist: Cannot remove the configuration of a non-existent view.", [this, t])
                }
                const e = this._viewToStack.get(t);
                if (this._singleViewMode && this.visibleView === t) {
                    this._singleViewMode = false
                }
                if (this.visibleView === t) {
                    if (e.size === 1) {
                        if (this._idToStack.size > 1) {
                            this._showNextStack()
                        } else {
                            this.view.hide();
                            this.visibleView = null;
                            this._rotatorView.hideView()
                        }
                    } else {
                        this._showView(Array.from(e.values())[e.size - 2])
                    }
                }
                if (e.size === 1) {
                    this._idToStack.delete(this._getStackId(e));
                    this._numberOfStacks = this._idToStack.size
                } else {
                    e.delete(t)
                }
                this._viewToStack.delete(t)
            }

            updatePosition(t) {
                if (t) {
                    this._visibleStack.get(this.visibleView).position = t
                }
                this.view.pin(this._getBalloonPosition());
                this._fakePanelsView.updatePosition()
            }

            showStack(t) {
                this.visibleStack = t;
                const e = this._idToStack.get(t);
                if (!e) {
                    throw new ss["b"]("contextualballoon-showstack-stack-not-exist: Cannot show a stack that does not exist.", this)
                }
                if (this._visibleStack === e) {
                    return
                }
                this._showView(Array.from(e.values()).pop())
            }

            get _visibleStack() {
                return this._viewToStack.get(this.visibleView)
            }

            _getStackId(t) {
                const e = Array.from(this._idToStack.entries()).find(e => e[1] === t);
                return e[0]
            }

            _showNextStack() {
                const t = Array.from(this._idToStack.values());
                let e = t.indexOf(this._visibleStack) + 1;
                if (!t[e]) {
                    e = 0
                }
                this.showStack(this._getStackId(t[e]))
            }

            _showPrevStack() {
                const t = Array.from(this._idToStack.values());
                let e = t.indexOf(this._visibleStack) - 1;
                if (!t[e]) {
                    e = t.length - 1
                }
                this.showStack(this._getStackId(t[e]))
            }

            _createRotatorView() {
                const t = new _b(this.editor.locale);
                const e = this.editor.locale.t;
                this.view.content.add(t);
                t.bind("isNavigationVisible").to(this, "_numberOfStacks", this, "_singleViewMode", (t, e) => !e && t > 1);
                t.on("change:isNavigationVisible", () => this.updatePosition(), {priority: "low"});
                t.bind("counter").to(this, "visibleView", this, "_numberOfStacks", (t, i) => {
                    if (i < 2) {
                        return ""
                    }
                    const n = Array.from(this._idToStack.values()).indexOf(this._visibleStack) + 1;
                    return e("lu", [n, i])
                });
                t.buttonNextView.on("execute", () => {
                    if (t.focusTracker.isFocused) {
                        this.editor.editing.view.focus()
                    }
                    this._showNextStack()
                });
                t.buttonPrevView.on("execute", () => {
                    if (t.focusTracker.isFocused) {
                        this.editor.editing.view.focus()
                    }
                    this._showPrevStack()
                });
                return t
            }

            _createFakePanelsView() {
                const t = new vb(this.editor.locale, this.view);
                t.bind("numberOfPanels").to(this, "_numberOfStacks", this, "_singleViewMode", (t, e) => {
                    const i = !e && t >= 2;
                    return i ? Math.min(t - 1, 2) : 0
                });
                t.listenTo(this.view, "change:top", () => t.updatePosition());
                t.listenTo(this.view, "change:left", () => t.updatePosition());
                this.editor.ui.view.body.add(t);
                return t
            }

            _showView({view: t, balloonClassName: e = "", withArrow: i = true, singleViewMode: n = false}) {
                this.view.class = e;
                this.view.withArrow = i;
                this._rotatorView.showView(t);
                this.visibleView = t;
                this.view.pin(this._getBalloonPosition());
                this._fakePanelsView.updatePosition();
                if (n) {
                    this._singleViewMode = true
                }
            }

            _getBalloonPosition() {
                let t = Array.from(this._visibleStack.values()).pop().position;
                if (t && !t.limiter) {
                    t = Object.assign({}, t, {limiter: this.positionLimiter})
                }
                return t
            }
        }

        class _b extends Gp {
            constructor(t) {
                super(t);
                const e = t.t;
                const i = this.bindTemplate;
                this.set("isNavigationVisible", true);
                this.focusTracker = new fb;
                this.buttonPrevView = this._createButtonView(e("lv"), gb);
                this.buttonNextView = this._createButtonView(e("lw"), mb);
                this.content = this.createCollection();
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-balloon-rotator"], "z-index": "-1"},
                    children: [{
                        tag: "div",
                        attributes: {class: ["ck-balloon-rotator__navigation", i.to("isNavigationVisible", t => t ? "" : "ck-hidden")]},
                        children: [this.buttonPrevView, {
                            tag: "span",
                            attributes: {class: ["ck-balloon-rotator__counter"]},
                            children: [{text: i.to("counter")}]
                        }, this.buttonNextView]
                    }, {tag: "div", attributes: {class: "ck-balloon-rotator__content"}, children: this.content}]
                })
            }

            render() {
                super.render();
                this.focusTracker.add(this.element)
            }

            showView(t) {
                this.hideView();
                this.content.add(t)
            }

            hideView() {
                this.content.clear()
            }

            _createButtonView(t, e) {
                const i = new hb(this.locale);
                i.set({label: t, icon: e, tooltip: true});
                return i
            }
        }

        class vb extends Gp {
            constructor(t, e) {
                super(t);
                const i = this.bindTemplate;
                this.set("top", 0);
                this.set("left", 0);
                this.set("height", 0);
                this.set("width", 0);
                this.set("numberOfPanels", 0);
                this.content = this.createCollection();
                this._balloonPanelView = e;
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck-fake-panel", i.to("numberOfPanels", t => t ? "" : "ck-hidden")],
                        style: {
                            top: i.to("top", wb),
                            left: i.to("left", wb),
                            width: i.to("width", wb),
                            height: i.to("height", wb)
                        }
                    },
                    children: this.content
                });
                this.on("change:numberOfPanels", (t, e, i, n) => {
                    if (i > n) {
                        this._addPanels(i - n)
                    } else {
                        this._removePanels(n - i)
                    }
                    this.updatePosition()
                })
            }

            _addPanels(t) {
                while (t--) {
                    const t = new Gp;
                    t.setTemplate({tag: "div"});
                    this.content.add(t);
                    this.registerChild(t)
                }
            }

            _removePanels(t) {
                while (t--) {
                    const t = this.content.last;
                    this.content.remove(t);
                    this.deregisterChild(t);
                    t.destroy()
                }
            }

            updatePosition() {
                if (this.numberOfPanels) {
                    const {top: t, left: e} = this._balloonPanelView;
                    const {width: i, height: n} = new vh(this._balloonPanelView.element);
                    Object.assign(this, {top: t, left: e, width: i, height: n})
                }
            }
        }

        class yb {
            constructor(t) {
                Object.assign(this, t);
                if (t.actions && t.keystrokeHandler) {
                    for (const e in t.actions) {
                        let i = t.actions[e];
                        if (typeof i == "string") {
                            i = [i]
                        }
                        for (const n of i) {
                            t.keystrokeHandler.set(n, (t, i) => {
                                this[e]();
                                i()
                            })
                        }
                    }
                }
            }

            get first() {
                return this.focusables.find(xb) || null
            }

            get last() {
                return this.focusables.filter(xb).slice(-1)[0] || null
            }

            get next() {
                return this._getFocusableItem(1)
            }

            get previous() {
                return this._getFocusableItem(-1)
            }

            get current() {
                let t = null;
                if (this.focusTracker.focusedElement === null) {
                    return null
                }
                this.focusables.find((e, i) => {
                    const n = e.element === this.focusTracker.focusedElement;
                    if (n) {
                        t = i
                    }
                    return n
                });
                return t
            }

            focusFirst() {
                this._focus(this.first)
            }

            focusLast() {
                this._focus(this.last)
            }

            focusNext() {
                this._focus(this.next)
            }

            focusPrevious() {
                this._focus(this.previous)
            }

            _focus(t) {
                if (t) {
                    t.focus()
                }
            }

            _getFocusableItem(t) {
                const e = this.current;
                const i = this.focusables.length;
                if (!i) {
                    return null
                }
                if (e === null) {
                    return this[t === 1 ? "first" : "last"]
                }
                let n = (e + i + t) % i;
                do {
                    const e = this.focusables.get(n);
                    if (xb(e)) {
                        return e
                    }
                    n = (n + i + t) % i
                } while (n !== e);
                return null
            }
        }

        function xb(t) {
            return !!(t.focus && Id.window.getComputedStyle(t.element).display != "none")
        }

        class Cb extends Gp {
            constructor(t) {
                super(t);
                this.setTemplate({tag: "span", attributes: {class: ["ck", "ck-toolbar__separator"]}})
            }
        }

        const Ab = 100;

        class Tb {
            constructor(t, e) {
                if (!Tb._observerInstance) {
                    Tb._createObserver()
                }
                this._element = t;
                this._callback = e;
                Tb._addElementCallback(t, e);
                Tb._observerInstance.observe(t)
            }

            destroy() {
                Tb._deleteElementCallback(this._element, this._callback)
            }

            static _addElementCallback(t, e) {
                if (!Tb._elementCallbacks) {
                    Tb._elementCallbacks = new Map
                }
                let i = Tb._elementCallbacks.get(t);
                if (!i) {
                    i = new Set;
                    Tb._elementCallbacks.set(t, i)
                }
                i.add(e)
            }

            static _deleteElementCallback(t, e) {
                const i = Tb._getElementCallbacks(t);
                if (i) {
                    i.delete(e);
                    if (!i.size) {
                        Tb._elementCallbacks.delete(t);
                        Tb._observerInstance.unobserve(t)
                    }
                }
                if (Tb._elementCallbacks && !Tb._elementCallbacks.size) {
                    Tb._observerInstance = null;
                    Tb._elementCallbacks = null
                }
            }

            static _getElementCallbacks(t) {
                if (!Tb._elementCallbacks) {
                    return null
                }
                return Tb._elementCallbacks.get(t)
            }

            static _createObserver() {
                let t;
                if (typeof Id.window.ResizeObserver === "function") {
                    t = Id.window.ResizeObserver
                } else {
                    t = Pb
                }
                Tb._observerInstance = new t(t => {
                    for (const e of t) {
                        const t = Tb._getElementCallbacks(e.target);
                        if (t) {
                            for (const i of t) {
                                i(e)
                            }
                        }
                    }
                })
            }
        }

        Tb._observerInstance = null;
        Tb._elementCallbacks = null;

        class Pb {
            constructor(t) {
                this._callback = t;
                this._elements = new Set;
                this._previousRects = new Map;
                this._periodicCheckTimeout = null
            }

            observe(t) {
                this._elements.add(t);
                this._checkElementRectsAndExecuteCallback();
                if (this._elements.size === 1) {
                    this._startPeriodicCheck()
                }
            }

            unobserve(t) {
                this._elements.delete(t);
                this._previousRects.delete(t);
                if (!this._elements.size) {
                    this._stopPeriodicCheck()
                }
            }

            _startPeriodicCheck() {
                const t = () => {
                    this._checkElementRectsAndExecuteCallback();
                    this._periodicCheckTimeout = setTimeout(t, Ab)
                };
                this.listenTo(Id.window, "resize", () => {
                    this._checkElementRectsAndExecuteCallback()
                });
                this._periodicCheckTimeout = setTimeout(t, Ab)
            }

            _stopPeriodicCheck() {
                clearTimeout(this._periodicCheckTimeout);
                this.stopListening();
                this._previousRects.clear()
            }

            _checkElementRectsAndExecuteCallback() {
                const t = [];
                for (const e of this._elements) {
                    if (this._hasRectChanged(e)) {
                        t.push({target: e, contentRect: this._previousRects.get(e)})
                    }
                }
                if (t.length) {
                    this._callback(t)
                }
            }

            _hasRectChanged(t) {
                if (!t.ownerDocument.body.contains(t)) {
                    return false
                }
                const e = new vh(t);
                const i = this._previousRects.get(t);
                const n = !i || !i.isEqual(e);
                this._previousRects.set(t, e);
                return n
            }
        }

        vs(Pb, qd);

        function Sb(t) {
            return t.bindTemplate.to(e => {
                if (e.target === t.element) {
                    e.preventDefault()
                }
            })
        }

        class Eb extends Gp {
            constructor(t) {
                super(t);
                const e = this.bindTemplate;
                this.set("isVisible", false);
                this.set("position", "se");
                this.children = this.createCollection();
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-reset", "ck-dropdown__panel", e.to("position", t => `ck-dropdown__panel_${t}`), e.if("isVisible", "ck-dropdown__panel-visible")]},
                    children: this.children,
                    on: {selectstart: e.to(t => t.preventDefault())}
                })
            }

            focus() {
                if (this.children.length) {
                    this.children.first.focus()
                }
            }

            focusLast() {
                if (this.children.length) {
                    const t = this.children.last;
                    if (typeof t.focusLast === "function") {
                        t.focusLast()
                    } else {
                        t.focus()
                    }
                }
            }
        }

        var Rb = i(29);

        class Ob extends Gp {
            constructor(t, e, i) {
                super(t);
                const n = this.bindTemplate;
                this.buttonView = e;
                this.panelView = i;
                this.set("isOpen", false);
                this.set("isEnabled", true);
                this.set("class");
                this.set("id");
                this.set("panelPosition", "auto");
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-dropdown", n.to("class"), n.if("isEnabled", "ck-disabled", t => !t)],
                        id: n.to("id"),
                        "aria-describedby": n.to("ariaDescribedById")
                    },
                    children: [e, i]
                });
                e.extendTemplate({attributes: {class: ["ck-dropdown__button"]}})
            }

            render() {
                super.render();
                this.listenTo(this.buttonView, "open", () => {
                    this.isOpen = !this.isOpen
                });
                this.panelView.bind("isVisible").to(this, "isOpen");
                this.on("change:isOpen", () => {
                    if (!this.isOpen) {
                        return
                    }
                    if (this.panelPosition === "auto") {
                        this.panelView.position = Ob._getOptimalPosition({
                            element: this.panelView.element,
                            target: this.buttonView.element,
                            fitInViewport: true,
                            positions: this._panelPositions
                        }).name
                    } else {
                        this.panelView.position = this.panelPosition
                    }
                });
                this.keystrokes.listenTo(this.element);
                this.focusTracker.add(this.element);
                const t = (t, e) => {
                    if (this.isOpen) {
                        this.buttonView.focus();
                        this.isOpen = false;
                        e()
                    }
                };
                this.keystrokes.set("arrowdown", (t, e) => {
                    if (this.buttonView.isEnabled && !this.isOpen) {
                        this.isOpen = true;
                        e()
                    }
                });
                this.keystrokes.set("arrowright", (t, e) => {
                    if (this.isOpen) {
                        e()
                    }
                });
                this.keystrokes.set("arrowleft", t);
                this.keystrokes.set("esc", t)
            }

            focus() {
                this.buttonView.focus()
            }

            get _panelPositions() {
                const {southEast: t, southWest: e, northEast: i, northWest: n} = Ob.defaultPanelPositions;
                if (this.locale.uiLanguageDirection === "ltr") {
                    return [t, e, i, n]
                } else {
                    return [e, t, n, i]
                }
            }
        }

        Ob.defaultPanelPositions = {
            southEast: t => ({top: t.bottom, left: t.left, name: "se"}),
            southWest: (t, e) => ({top: t.bottom, left: t.left - e.width + t.width, name: "sw"}),
            northEast: (t, e) => ({top: t.top - e.height, left: t.left, name: "ne"}),
            northWest: (t, e) => ({top: t.bottom - e.height, left: t.left - e.width + t.width, name: "nw"})
        };
        Ob._getOptimalPosition = Jp;
        var Ib = '<svg viewBox="0 0 10 10" xmlns="http://www.w3.org/2000/svg"><path d="M.941 4.523a.75.75 0 1 1 1.06-1.06l3.006 3.005 3.005-3.005a.75.75 0 1 1 1.06 1.06l-3.549 3.55a.75.75 0 0 1-1.168-.136L.941 4.523z"/></svg>';

        class Vb extends hb {
            constructor(t) {
                super(t);
                this.arrowView = this._createArrowView();
                this.extendTemplate({attributes: {"aria-haspopup": true}});
                this.delegate("execute").to(this, "open")
            }

            render() {
                super.render();
                this.children.add(this.arrowView)
            }

            _createArrowView() {
                const t = new cb;
                t.content = Ib;
                t.extendTemplate({attributes: {class: "ck-dropdown__arrow"}});
                return t
            }
        }

        var Nb = i(31);

        class Mb extends Gp {
            constructor() {
                super();
                this.items = this.createCollection();
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this._focusCycler = new yb({
                    focusables: this.items,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "arrowup", focusNext: "arrowdown"}
                });
                this.setTemplate({tag: "ul", attributes: {class: ["ck", "ck-reset", "ck-list"]}, children: this.items})
            }

            render() {
                super.render();
                for (const t of this.items) {
                    this.focusTracker.add(t.element)
                }
                this.items.on("add", (t, e) => {
                    this.focusTracker.add(e.element)
                });
                this.items.on("remove", (t, e) => {
                    this.focusTracker.remove(e.element)
                });
                this.keystrokes.listenTo(this.element)
            }

            focus() {
                this._focusCycler.focusFirst()
            }

            focusLast() {
                this._focusCycler.focusLast()
            }
        }

        class Bb extends Gp {
            constructor(t) {
                super(t);
                this.children = this.createCollection();
                this.setTemplate({tag: "li", attributes: {class: ["ck", "ck-list__item"]}, children: this.children})
            }

            focus() {
                this.children.first.focus()
            }
        }

        class zb extends Gp {
            constructor(t) {
                super(t);
                this.setTemplate({tag: "li", attributes: {class: ["ck", "ck-list__separator"]}})
            }
        }

        var Lb = i(33);

        class Fb extends hb {
            constructor(t) {
                super(t);
                this.isToggleable = true;
                this.toggleSwitchView = this._createToggleView();
                this.extendTemplate({attributes: {class: "ck-switchbutton"}})
            }

            render() {
                super.render();
                this.children.add(this.toggleSwitchView)
            }

            _createToggleView() {
                const t = new Gp;
                t.setTemplate({
                    tag: "span",
                    attributes: {class: ["ck", "ck-button__toggle"]},
                    children: [{tag: "span", attributes: {class: ["ck", "ck-button__toggle__inner"]}}]
                });
                return t
            }
        }

        function Db({emitter: t, activator: e, callback: i, contextElements: n}) {
            t.listenTo(document, "mousedown", (t, {target: o}) => {
                if (!e()) {
                    return
                }
                for (const t of n) {
                    if (t.contains(o)) {
                        return
                    }
                }
                i()
            })
        }

        var jb = i(35);
        var Hb = i(37);

        function Wb(t, e = Vb) {
            const i = new e(t);
            const n = new Eb(t);
            const o = new Ob(t, i, n);
            i.bind("isEnabled").to(o);
            if (i instanceof Vb) {
                i.bind("isOn").to(o, "isOpen")
            } else {
                i.arrowView.bind("isOn").to(o, "isOpen")
            }
            $b(o);
            return o
        }

        function qb(t, e) {
            const i = t.locale;
            const n = i.t;
            const o = t.toolbarView = new Xb(i);
            o.set("ariaLabel", n("lg"));
            t.extendTemplate({attributes: {class: ["ck-toolbar-dropdown"]}});
            e.map(t => o.items.add(t));
            t.panelView.children.add(o);
            o.items.delegate("execute").to(t)
        }

        function Ub(t, e) {
            const i = t.locale;
            const n = t.listView = new Mb(i);
            n.items.bindTo(e).using(({type: t, model: e}) => {
                if (t === "separator") {
                    return new zb(i)
                } else if (t === "button" || t === "switchbutton") {
                    const n = new Bb(i);
                    let o;
                    if (t === "button") {
                        o = new hb(i)
                    } else {
                        o = new Fb(i)
                    }
                    o.bind(...Object.keys(e)).to(e);
                    o.delegate("execute").to(n);
                    n.children.add(o);
                    return n
                }
            });
            t.panelView.children.add(n);
            n.items.delegate("execute").to(t)
        }

        function $b(t) {
            Gb(t);
            Kb(t);
            Jb(t)
        }

        function Gb(t) {
            t.on("render", () => {
                Db({
                    emitter: t, activator: () => t.isOpen, callback: () => {
                        t.isOpen = false
                    }, contextElements: [t.element]
                })
            })
        }

        function Kb(t) {
            t.on("execute", e => {
                if (e.source instanceof Fb) {
                    return
                }
                t.isOpen = false
            })
        }

        function Jb(t) {
            t.keystrokes.set("arrowdown", (e, i) => {
                if (t.isOpen) {
                    t.panelView.focus();
                    i()
                }
            });
            t.keystrokes.set("arrowup", (e, i) => {
                if (t.isOpen) {
                    t.panelView.focusLast();
                    i()
                }
            })
        }

        var Yb = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><circle cx="9.5" cy="4.5" r="1.5"/><circle cx="9.5" cy="10.5" r="1.5"/><circle cx="9.5" cy="16.5" r="1.5"/></svg>';
        var Qb = i(39);

        class Xb extends Gp {
            constructor(t, e) {
                super(t);
                const i = this.bindTemplate;
                const n = this.t;
                this.options = e || {};
                this.set("ariaLabel", n("lr"));
                this.set("maxWidth", "auto");
                this.items = this.createCollection();
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.set("class");
                this.set("isCompact", false);
                this.itemsView = new Zb(t);
                this.children = this.createCollection();
                this.children.add(this.itemsView);
                this.focusables = this.createCollection();
                this._focusCycler = new yb({
                    focusables: this.focusables,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: ["arrowleft", "arrowup"], focusNext: ["arrowright", "arrowdown"]}
                });
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-toolbar", i.to("class"), i.if("isCompact", "ck-toolbar_compact")],
                        role: "toolbar",
                        "aria-label": i.to("ariaLabel"),
                        style: {maxWidth: i.to("maxWidth")}
                    },
                    children: this.children,
                    on: {mousedown: Sb(this)}
                });
                this._behavior = this.options.shouldGroupWhenFull ? new ew(this) : new tw(this)
            }

            render() {
                super.render();
                for (const t of this.items) {
                    this.focusTracker.add(t.element)
                }
                this.items.on("add", (t, e) => {
                    this.focusTracker.add(e.element)
                });
                this.items.on("remove", (t, e) => {
                    this.focusTracker.remove(e.element)
                });
                this.keystrokes.listenTo(this.element);
                this._behavior.render(this)
            }

            destroy() {
                this._behavior.destroy();
                return super.destroy()
            }

            focus() {
                this._focusCycler.focusFirst()
            }

            focusLast() {
                this._focusCycler.focusLast()
            }

            fillFromConfig(t, e) {
                t.map(t => {
                    if (t == "|") {
                        this.items.add(new Cb)
                    } else if (e.has(t)) {
                        this.items.add(e.create(t))
                    } else {
                        console.warn(Object(ss["a"])("toolbarview-item-unavailable: The requested toolbar item is unavailable."), {name: t})
                    }
                })
            }
        }

        class Zb extends Gp {
            constructor(t) {
                super(t);
                this.children = this.createCollection();
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-toolbar__items"]},
                    children: this.children
                })
            }
        }

        class tw {
            constructor(t) {
                const e = t.bindTemplate;
                t.set("isVertical", false);
                t.itemsView.children.bindTo(t.items).using(t => t);
                t.focusables.bindTo(t.items).using(t => t);
                t.extendTemplate({attributes: {class: [e.if("isVertical", "ck-toolbar_vertical")]}})
            }

            render() {
            }

            destroy() {
            }
        }

        class ew {
            constructor(t) {
                this.viewChildren = t.children;
                this.viewFocusables = t.focusables;
                this.viewItemsView = t.itemsView;
                this.viewFocusTracker = t.focusTracker;
                this.viewLocale = t.locale;
                this.ungroupedItems = t.createCollection();
                this.groupedItems = t.createCollection();
                this.groupedItemsDropdown = this._createGroupedItemsDropdown();
                this.resizeObserver = null;
                this.cachedPadding = null;
                t.itemsView.children.bindTo(this.ungroupedItems).using(t => t);
                this.ungroupedItems.on("add", this._updateFocusCycleableItems.bind(this));
                this.ungroupedItems.on("remove", this._updateFocusCycleableItems.bind(this));
                t.children.on("add", this._updateFocusCycleableItems.bind(this));
                t.children.on("remove", this._updateFocusCycleableItems.bind(this));
                t.items.on("add", (t, e, i) => {
                    if (i > this.ungroupedItems.length) {
                        this.groupedItems.add(e, i - this.ungroupedItems.length)
                    } else {
                        this.ungroupedItems.add(e, i)
                    }
                    this._updateGrouping()
                });
                t.items.on("remove", (t, e, i) => {
                    if (i > this.ungroupedItems.length) {
                        this.groupedItems.remove(e)
                    } else {
                        this.ungroupedItems.remove(e)
                    }
                    this._updateGrouping()
                });
                t.extendTemplate({attributes: {class: ["ck-toolbar_grouping"]}})
            }

            render(t) {
                this.viewElement = t.element;
                this._enableGroupingOnResize();
                this._enableGroupingOnMaxWidthChange(t)
            }

            destroy() {
                this.groupedItemsDropdown.destroy();
                this.resizeObserver.destroy()
            }

            _updateGrouping() {
                if (!this.viewElement.ownerDocument.body.contains(this.viewElement)) {
                    return
                }
                let t;
                while (this._areItemsOverflowing) {
                    this._groupLastItem();
                    t = true
                }
                if (!t && this.groupedItems.length) {
                    while (this.groupedItems.length && !this._areItemsOverflowing) {
                        this._ungroupFirstItem()
                    }
                    if (this._areItemsOverflowing) {
                        this._groupLastItem()
                    }
                }
            }

            get _areItemsOverflowing() {
                if (!this.ungroupedItems.length) {
                    return false
                }
                const t = this.viewElement;
                const e = this.viewLocale.uiLanguageDirection;
                const i = new vh(t.lastChild);
                const n = new vh(t);
                if (!this.cachedPadding) {
                    const i = Id.window.getComputedStyle(t);
                    const n = e === "ltr" ? "paddingRight" : "paddingLeft";
                    this.cachedPadding = Number.parseInt(i[n])
                }
                if (e === "ltr") {
                    return i.right > n.right - this.cachedPadding
                } else {
                    return i.left < n.left + this.cachedPadding
                }
            }

            _enableGroupingOnResize() {
                let t;
                this.resizeObserver = new Tb(this.viewElement, e => {
                    if (!t || t !== e.contentRect.width) {
                        this._updateGrouping();
                        t = e.contentRect.width
                    }
                });
                this._updateGrouping()
            }

            _enableGroupingOnMaxWidthChange(t) {
                t.on("change:maxWidth", () => {
                    this._updateGrouping()
                })
            }

            _groupLastItem() {
                if (!this.groupedItems.length) {
                    this.viewChildren.add(new Cb);
                    this.viewChildren.add(this.groupedItemsDropdown);
                    this.viewFocusTracker.add(this.groupedItemsDropdown.element)
                }
                this.groupedItems.add(this.ungroupedItems.remove(this.ungroupedItems.last), 0)
            }

            _ungroupFirstItem() {
                this.ungroupedItems.add(this.groupedItems.remove(this.groupedItems.first));
                if (!this.groupedItems.length) {
                    this.viewChildren.remove(this.groupedItemsDropdown);
                    this.viewChildren.remove(this.viewChildren.last);
                    this.viewFocusTracker.remove(this.groupedItemsDropdown.element)
                }
            }

            _createGroupedItemsDropdown() {
                const t = this.viewLocale;
                const e = t.t;
                const i = Wb(t);
                i.class = "ck-toolbar__grouped-dropdown";
                i.panelPosition = t.uiLanguageDirection === "ltr" ? "sw" : "se";
                qb(i, []);
                i.buttonView.set({label: e("ls"), tooltip: true, icon: Yb});
                i.toolbarView.items.bindTo(this.groupedItems).using(t => t);
                return i
            }

            _updateFocusCycleableItems() {
                this.viewFocusables.clear();
                this.ungroupedItems.map(t => {
                    this.viewFocusables.add(t)
                });
                if (this.groupedItems.length) {
                    this.viewFocusables.add(this.groupedItemsDropdown)
                }
            }
        }

        function iw(t) {
            if (Array.isArray(t)) {
                return {items: t}
            }
            if (!t) {
                return {items: []}
            }
            return Object.assign({items: []}, t)
        }

        const nw = Zp("px");

        class ow extends mp {
            static get pluginName() {
                return "BalloonToolbar"
            }

            static get requires() {
                return [kb]
            }

            constructor(t) {
                super(t);
                this._balloonConfig = iw(t.config.get("balloonToolbar"));
                this.toolbarView = this._createToolbarView();
                this.focusTracker = new fb;
                t.ui.once("ready", () => {
                    this.focusTracker.add(t.ui.getEditableElement());
                    this.focusTracker.add(this.toolbarView.element)
                });
                this._resizeObserver = null;
                this._balloon = t.plugins.get(kb);
                this._fireSelectionChangeDebounced = uh(() => this.fire("_selectionChangeDebounced"), 200);
                this.decorate("show")
            }

            init() {
                const t = this.editor;
                const e = t.model.document.selection;
                this.listenTo(this.focusTracker, "change:isFocused", (t, e, i) => {
                    const n = this._balloon.visibleView === this.toolbarView;
                    if (!i && n) {
                        this.hide()
                    } else if (i) {
                        this.show()
                    }
                });
                this.listenTo(e, "change:range", (t, i) => {
                    if (i.directChange || e.isCollapsed) {
                        this.hide()
                    }
                    this._fireSelectionChangeDebounced()
                });
                this.listenTo(this, "_selectionChangeDebounced", () => {
                    if (this.editor.editing.view.document.isFocused) {
                        this.show()
                    }
                });
                if (!this._balloonConfig.shouldNotGroupWhenFull) {
                    this.listenTo(t, "ready", () => {
                        const e = t.ui.view.editable.element;
                        this._resizeObserver = new Tb(e, () => {
                            this.toolbarView.maxWidth = nw(new vh(e).width * .9)
                        })
                    })
                }
            }

            afterInit() {
                const t = this.editor.ui.componentFactory;
                this.toolbarView.fillFromConfig(this._balloonConfig.items, t)
            }

            _createToolbarView() {
                const t = !this._balloonConfig.shouldNotGroupWhenFull;
                const e = new Xb(this.editor.locale, {shouldGroupWhenFull: t});
                e.extendTemplate({attributes: {class: ["ck-toolbar_floating"]}});
                e.render();
                return e
            }

            show() {
                const t = this.editor;
                if (this._balloon.hasView(this.toolbarView)) {
                    return
                }
                if (t.model.document.selection.isCollapsed) {
                    return
                }
                if (Array.from(this.toolbarView.items).every(t => t.isEnabled !== undefined && !t.isEnabled)) {
                    return
                }
                this.listenTo(this.editor.ui, "update", () => {
                    this._balloon.updatePosition(this._getBalloonPositionData())
                });
                this._balloon.add({
                    view: this.toolbarView,
                    position: this._getBalloonPositionData(),
                    balloonClassName: "ck-toolbar-container"
                })
            }

            hide() {
                if (this._balloon.hasView(this.toolbarView)) {
                    this.stopListening(this.editor.ui, "update");
                    this._balloon.remove(this.toolbarView)
                }
            }

            _getBalloonPositionData() {
                const t = this.editor;
                const e = t.editing.view;
                const i = e.document;
                const n = i.selection;
                const o = i.selection.isBackward;
                return {
                    target: () => {
                        const t = o ? n.getFirstRange() : n.getLastRange();
                        const i = vh.getDomRangeRects(e.domConverter.viewRangeToDom(t));
                        if (o) {
                            return i[0]
                        } else {
                            if (i.length > 1 && i[i.length - 1].width === 0) {
                                i.pop()
                            }
                            return i[i.length - 1]
                        }
                    }, positions: rw(o)
                }
            }

            destroy() {
                super.destroy();
                this.stopListening();
                this._fireSelectionChangeDebounced.cancel();
                this.toolbarView.destroy();
                this.focusTracker.destroy();
                if (this._resizeObserver) {
                    this._resizeObserver.destroy()
                }
            }
        }

        function rw(t) {
            const e = nb.defaultPositions;
            return t ? [e.northWestArrowSouth, e.northWestArrowSouthWest, e.northWestArrowSouthEast, e.northWestArrowSouthMiddleEast, e.northWestArrowSouthMiddleWest, e.southWestArrowNorth, e.southWestArrowNorthWest, e.southWestArrowNorthEast, e.southWestArrowNorthMiddleWest, e.southWestArrowNorthMiddleEast] : [e.southEastArrowNorth, e.southEastArrowNorthEast, e.southEastArrowNorthWest, e.southEastArrowNorthMiddleEast, e.southEastArrowNorthMiddleWest, e.northEastArrowSouth, e.northEastArrowSouthEast, e.northEastArrowSouthWest, e.northEastArrowSouthMiddleEast, e.northEastArrowSouthMiddleWest]
        }

        class sw {
            constructor(t) {
                this.editor = t;
                this._components = new Map
            }

            * names() {
                for (const t of this._components.values()) {
                    yield t.originalName
                }
            }

            add(t, e) {
                if (this.has(t)) {
                    throw new ss["b"]("componentfactory-item-exists: The item already exists in the component factory.", this, {name: t})
                }
                this._components.set(aw(t), {callback: e, originalName: t})
            }

            create(t) {
                if (!this.has(t)) {
                    throw new ss["b"]("componentfactory-item-missing: The required component is not registered in the factory.", this, {name: t})
                }
                return this._components.get(aw(t)).callback(this.editor.locale)
            }

            has(t) {
                return this._components.has(aw(t))
            }
        }

        function aw(t) {
            return String(t).toLowerCase()
        }

        class cw {
            constructor(t) {
                this.editor = t;
                this.componentFactory = new sw(t);
                this.focusTracker = new fb;
                this._editableElementsMap = new Map;
                this.listenTo(t.editing.view.document, "layoutChanged", () => this.update())
            }

            get element() {
                return null
            }

            update() {
                this.fire("update")
            }

            destroy() {
                this.stopListening();
                this.focusTracker.destroy();
                for (const t of this._editableElementsMap.values()) {
                    t.ckeditorInstance = null
                }
                this._editableElementsMap = new Map
            }

            setEditableElement(t, e) {
                this._editableElementsMap.set(t, e);
                if (!e.ckeditorInstance) {
                    e.ckeditorInstance = this.editor
                }
            }

            getEditableElement(t = "main") {
                return this._editableElementsMap.get(t)
            }

            getEditableElementsNames() {
                return this._editableElementsMap.keys()
            }

            get _editableElements() {
                console.warn("editor-ui-deprecated-editable-elements: " + "The EditorUI#_editableElements property has been deprecated and will be removed in the near future.", {editorUI: this});
                return this._editableElementsMap
            }
        }

        vs(cw, ds);

        function lw({origin: t, originKeystrokeHandler: e, originFocusTracker: i, toolbar: n, beforeFocus: o, afterBlur: r}) {
            i.add(n.element);
            e.set("Alt+F10", (t, e) => {
                if (i.isFocused && !n.focusTracker.isFocused) {
                    if (o) {
                        o()
                    }
                    n.focus();
                    e()
                }
            });
            n.keystrokes.set("Esc", (e, i) => {
                if (n.focusTracker.isFocused) {
                    t.focus();
                    if (r) {
                        r()
                    }
                    i()
                }
            })
        }

        var dw = i(41);
        const uw = new WeakMap;

        function hw(t) {
            const {view: e, element: i, text: n, isDirectHost: o = true} = t;
            const r = e.document;
            if (!uw.has(r)) {
                uw.set(r, new Map);
                r.registerPostFixer(t => bw(r, t))
            }
            uw.get(r).set(i, {text: n, isDirectHost: o});
            e.change(t => bw(r, t))
        }

        function fw(t, e) {
            const i = e.document;
            t.change(t => {
                if (!uw.has(i)) {
                    return
                }
                const n = uw.get(i);
                const o = n.get(e);
                t.removeAttribute("data-placeholder", o.hostElement);
                mw(t, o.hostElement);
                n.delete(e)
            })
        }

        function gw(t, e) {
            if (!e.hasClass("ck-placeholder")) {
                t.addClass("ck-placeholder", e);
                return true
            }
            return false
        }

        function mw(t, e) {
            if (e.hasClass("ck-placeholder")) {
                t.removeClass("ck-placeholder", e);
                return true
            }
            return false
        }

        function pw(t) {
            if (!t.isAttached()) {
                return false
            }
            const e = !Array.from(t.getChildren()).some(t => !t.is("uiElement"));
            const i = t.document;
            if (!i.isFocused && e) {
                return true
            }
            const n = i.selection;
            const o = n.anchor;
            if (e && o && o.parent !== t) {
                return true
            }
            return false
        }

        function bw(t, e) {
            const i = uw.get(t);
            let n = false;
            for (const [t, o] of i) {
                if (ww(e, t, o)) {
                    n = true
                }
            }
            return n
        }

        function ww(t, e, i) {
            const {text: n, isDirectHost: o} = i;
            const r = o ? e : kw(e);
            let s = false;
            if (!r) {
                return false
            }
            i.hostElement = r;
            if (r.getAttribute("data-placeholder") !== n) {
                t.setAttribute("data-placeholder", n, r);
                s = true
            }
            if (pw(r)) {
                if (gw(t, r)) {
                    s = true
                }
            } else if (mw(t, r)) {
                s = true
            }
            return s
        }

        function kw(t) {
            if (t.childCount === 1) {
                const e = t.getChild(0);
                if (e.is("element") && !e.is("uiElement")) {
                    return e
                }
            }
            return null
        }

        class _w extends cw {
            constructor(t, e) {
                super(t);
                this.view = e
            }

            get element() {
                return this.view.editable.element
            }

            init() {
                const t = this.editor;
                const e = this.view;
                const i = t.plugins.get("BalloonToolbar");
                const n = t.editing.view;
                const o = e.editable;
                const r = n.document.getRoot();
                o.name = r.rootName;
                e.render();
                const s = o.element;
                this.setEditableElement(o.name, s);
                this.focusTracker.add(s);
                o.bind("isFocused").to(this.focusTracker);
                n.attachDomRoot(s);
                lw({
                    origin: n,
                    originFocusTracker: this.focusTracker,
                    originKeystrokeHandler: t.keystrokes,
                    toolbar: i.toolbarView,
                    beforeFocus() {
                        i.show()
                    },
                    afterBlur() {
                        i.hide()
                    }
                });
                this._initPlaceholder();
                this.fire("ready")
            }

            destroy() {
                const t = this.view;
                const e = this.editor.editing.view;
                e.detachDomRoot(t.editable.name);
                t.destroy();
                super.destroy()
            }

            _initPlaceholder() {
                const t = this.editor;
                const e = t.editing.view;
                const i = e.document.getRoot();
                const n = t.sourceElement;
                const o = t.config.get("placeholder") || n && n.tagName.toLowerCase() === "textarea" && n.getAttribute("placeholder");
                if (o) {
                    hw({view: e, element: i, text: o, isDirectHost: false})
                }
            }
        }

        var vw = "[object String]";

        function yw(t) {
            return typeof t == "string" || !Je(t) && T(t) && _(t) == vw
        }

        var xw = yw;

        function Cw(t, e, i = {}, n = []) {
            const o = i && i.xmlns;
            const r = o ? t.createElementNS(o, e) : t.createElement(e);
            for (const t in i) {
                r.setAttribute(t, i[t])
            }
            if (xw(n) || !js(n)) {
                n = [n]
            }
            for (let e of n) {
                if (xw(e)) {
                    e = t.createTextNode(e)
                }
                r.appendChild(e)
            }
            return r
        }

        class Aw extends bp {
            attachToDom() {
                this._bodyCollectionContainer = new _p({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-reset_all", "ck-body", "ck-rounded-corners"],
                        dir: this.locale.uiLanguageDirection
                    },
                    children: this
                }).render();
                let t = document.querySelector(".ck-body-wrapper");
                if (!t) {
                    t = Cw(document, "div", {class: "ck-body-wrapper"});
                    document.body.appendChild(t)
                }
                t.appendChild(this._bodyCollectionContainer)
            }

            detachFromDom() {
                super.destroy();
                if (this._bodyCollectionContainer) {
                    this._bodyCollectionContainer.remove()
                }
                const t = document.querySelector(".ck-body-wrapper");
                if (t && t.childElementCount == 0) {
                    t.remove()
                }
            }
        }

        var Tw = i(43);

        class Pw extends Gp {
            constructor(t) {
                super(t);
                this.body = new Aw(t)
            }

            render() {
                super.render();
                this.body.attachToDom()
            }

            destroy() {
                this.body.detachFromDom();
                return super.destroy()
            }
        }

        class Sw extends Gp {
            constructor(t, e, i) {
                super(t);
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-content", "ck-editor__editable", "ck-rounded-corners"],
                        lang: t.contentLanguage,
                        dir: t.contentLanguageDirection
                    }
                });
                this.name = null;
                this.set("isFocused", false);
                this._editableElement = i;
                this._hasExternalElement = !!this._editableElement;
                this._editingView = e
            }

            render() {
                super.render();
                if (this._hasExternalElement) {
                    this.template.apply(this.element = this._editableElement)
                } else {
                    this._editableElement = this.element
                }
                this.on("change:isFocused", () => this._updateIsFocusedClasses());
                this._updateIsFocusedClasses()
            }

            destroy() {
                if (this._hasExternalElement) {
                    this.template.revert(this._editableElement)
                }
                super.destroy()
            }

            _updateIsFocusedClasses() {
                const t = this._editingView;
                if (t.isRenderingInProgress) {
                    i(this)
                } else {
                    e(this)
                }

                function e(e) {
                    t.change(i => {
                        const n = t.document.getRoot(e.name);
                        i.addClass(e.isFocused ? "ck-focused" : "ck-blurred", n);
                        i.removeClass(e.isFocused ? "ck-blurred" : "ck-focused", n)
                    })
                }

                function i(n) {
                    t.once("change:isRenderingInProgress", (t, o, r) => {
                        if (!r) {
                            e(n)
                        } else {
                            i(n)
                        }
                    })
                }
            }
        }

        class Ew extends Sw {
            constructor(t, e, i) {
                super(t, e, i);
                this.extendTemplate({attributes: {role: "textbox", class: "ck-editor__editable_inline"}})
            }

            render() {
                super.render();
                const t = this._editingView;
                const e = this.t;
                t.change(i => {
                    const n = t.document.getRoot(this.name);
                    i.setAttribute("aria-label", e("of", [this.name]), n)
                })
            }
        }

        class Rw extends Pw {
            constructor(t, e, i) {
                super(t);
                this.editable = new Ew(t, e, i)
            }

            render() {
                super.render();
                this.registerChild(this.editable)
            }
        }

        function Ow(t, e) {
            if (t instanceof HTMLTextAreaElement) {
                t.value = e
            }
            t.innerHTML = e
        }

        function Iw(t) {
            if (t instanceof HTMLTextAreaElement) {
                return t.value
            }
            return t.innerHTML
        }

        const Vw = {
            setData(t) {
                this.data.set(t)
            }, getData(t) {
                return this.data.get(t)
            }
        };
        var Nw = Vw;
        const Mw = {
            updateSourceElement() {
                if (!this.sourceElement) {
                    throw new ss["b"]("editor-missing-sourceelement: Cannot update the source element of a detached editor.", this)
                }
                Ow(this.sourceElement, this.data.get())
            }
        };
        var Bw = Mw;

        function zw(t) {
            if (!gt(t.updateSourceElement)) {
                throw new ss["b"]("attachtoform-missing-elementapi-interface: Editor passed to attachToForm() must implement ElementApi.", t)
            }
            const e = t.sourceElement;
            if (e && e.tagName.toLowerCase() === "textarea" && e.form) {
                let i;
                const n = e.form;
                const o = () => t.updateSourceElement();
                if (gt(n.submit)) {
                    i = n.submit;
                    n.submit = () => {
                        o();
                        i.apply(n)
                    }
                }
                n.addEventListener("submit", o);
                t.on("destroy", () => {
                    n.removeEventListener("submit", o);
                    if (i) {
                        n.submit = i
                    }
                })
            }
        }

        function Lw(t) {
            const e = t.sourceElement;
            if (!e) {
                return
            }
            if (e.ckeditorInstance) {
                throw new ss["b"]("editor-source-element-already-used: " + "The DOM element cannot be used to create multiple editor instances.", t)
            }
            e.ckeditorInstance = t;
            t.once("destroy", () => {
                delete e.ckeditorInstance
            })
        }

        class Fw extends hp {
            constructor(t, e) {
                super(e);
                if (Kr(t)) {
                    this.sourceElement = t;
                    Lw(this)
                }
                const i = this.config.get("plugins");
                i.push(ow);
                this.config.set("plugins", i);
                this.config.define("balloonToolbar", this.config.get("toolbar"));
                this.data.processor = new gp(this.data.viewDocument);
                this.model.document.createRoot();
                const n = new Rw(this.locale, this.editing.view, this.sourceElement);
                this.ui = new _w(this, n);
                zw(this)
            }

            destroy() {
                const t = this.getData();
                this.ui.destroy();
                return super.destroy().then(() => {
                    if (this.sourceElement) {
                        Ow(this.sourceElement, t)
                    }
                })
            }

            static create(t, e = {}) {
                return new Promise(i => {
                    const n = Kr(t);
                    if (n && t.tagName === "TEXTAREA") {
                        throw new ss["b"]("editor-wrong-element: This type of editor cannot be initialized inside <textarea> element.", null)
                    }
                    const o = new this(t, e);
                    i(o.initPlugins().then(() => {
                        o.ui.init()
                    }).then(() => {
                        if (!n && e.initialData) {
                            throw new ss["b"]("editor-create-initial-data: " + "The config.initialData option cannot be used together with initial data passed in Editor.create().", null)
                        }
                        const i = e.initialData || Dw(t);
                        return o.data.init(i)
                    }).then(() => o.fire("ready")).then(() => o))
                })
            }
        }

        vs(Fw, Nw);
        vs(Fw, Bw);

        function Dw(t) {
            return Kr(t) ? Iw(t) : t
        }

        class jw {
            constructor(t) {
                this.editor = t;
                this.set("value", undefined);
                this.set("isEnabled", false);
                this._disableStack = new Set;
                this.decorate("execute");
                this.listenTo(this.editor.model.document, "change", () => {
                    this.refresh()
                });
                this.on("execute", t => {
                    // kbalashev (image upload button fix)
                    // if (!this.isEnabled) {
                    //     t.stop()
                    // }
                }, {priority: "high"});
                this.listenTo(t, "change:isReadOnly", (t, e, i) => {
                    if (i) {
                        this.forceDisabled("readOnlyMode")
                    } else {
                        this.clearForceDisabled("readOnlyMode")
                    }
                })
            }

            refresh() {
                this.isEnabled = true
            }

            forceDisabled(t) {
                this._disableStack.add(t);
                if (this._disableStack.size == 1) {
                    this.on("set:isEnabled", Hw, {priority: "highest"});
                    this.isEnabled = false
                }
            }

            clearForceDisabled(t) {
                this._disableStack.delete(t);
                if (this._disableStack.size == 0) {
                    this.off("set:isEnabled", Hw);
                    this.refresh()
                }
            }

            execute() {
            }

            destroy() {
                this.stopListening()
            }
        }

        vs(jw, Jc);

        function Hw(t) {
            t.return = false;
            t.stop()
        }

        function Ww(t) {
            const e = t.next();
            if (e.done) {
                return null
            }
            return e.value
        }

        const qw = ["left", "right", "center", "justify"];

        function Uw(t) {
            return qw.includes(t)
        }

        function $w(t, e) {
            if (e.contentLanguageDirection == "rtl") {
                return t === "right"
            } else {
                return t === "left"
            }
        }

        const Gw = "alignment";

        class Kw extends jw {
            refresh() {
                const t = this.editor;
                const e = t.locale;
                const i = Ww(this.editor.model.document.selection.getSelectedBlocks());
                this.isEnabled = !!i && this._canBeAligned(i);
                if (this.isEnabled && i.hasAttribute("alignment")) {
                    this.value = i.getAttribute("alignment")
                } else {
                    this.value = e.contentLanguageDirection === "rtl" ? "right" : "left"
                }
            }

            execute(t = {}) {
                const e = this.editor;
                const i = e.locale;
                const n = e.model;
                const o = n.document;
                const r = t.value;
                n.change(t => {
                    const e = Array.from(o.selection.getSelectedBlocks()).filter(t => this._canBeAligned(t));
                    const n = e[0].getAttribute("alignment");
                    const s = $w(r, i) || n === r || !r;
                    if (s) {
                        Jw(e, t)
                    } else {
                        Yw(e, t, r)
                    }
                })
            }

            _canBeAligned(t) {
                return this.editor.model.schema.checkAttribute(t, Gw)
            }
        }

        function Jw(t, e) {
            for (const i of t) {
                e.removeAttribute(Gw, i)
            }
        }

        function Yw(t, e, i) {
            for (const n of t) {
                e.setAttribute(Gw, i, n)
            }
        }

        class Qw extends mp {
            static get pluginName() {
                return "AlignmentEditing"
            }

            constructor(t) {
                super(t);
                t.config.define("alignment", {options: [...qw]})
            }

            init() {
                const t = this.editor;
                const e = t.locale;
                const i = t.model.schema;
                const n = t.config.get("alignment.options").filter(Uw);
                i.extend("$block", {allowAttributes: "alignment"});
                t.model.schema.setAttributeProperties("alignment", {isFormatting: true});
                const o = Xw(n.filter(t => !$w(t, e)));
                t.conversion.attributeToAttribute(o);
                t.commands.add("alignment", new Kw(t))
            }
        }

        function Xw(t) {
            const e = {model: {key: "alignment", values: t.slice()}, view: {}};
            for (const i of t) {
                e.view[i] = {key: "style", value: {"text-align": i}}
            }
            return e
        }

        var Zw = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z"/></svg>';
        var tk = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M18 3.75a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 8a.75.75 0 0 1-.75.75H2.75a.75.75 0 1 1 0-1.5h14.5a.75.75 0 0 1 .75.75zm0 4a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75zm0-8a.75.75 0 0 1-.75.75H7.321a.75.75 0 1 1 0-1.5h9.929a.75.75 0 0 1 .75.75z"/></svg>';
        var ek = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm2.286 4c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h9.928a.75.75 0 1 0 0-1.5H5.036a.75.75 0 0 0-.75.75z"/></svg>';
        var ik = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0 4c0 .414.336.75.75.75h9.929a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm0-8c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75z"/></svg>';
        const nk = new Map([["left", Zw], ["right", tk], ["center", ek], ["justify", ik]]);

        class ok extends mp {
            get localizedOptionTitles() {
                const t = this.editor.t;
                return {left: t("iw"), right: t("ix"), center: t("iy"), justify: t("iz")}
            }

            static get pluginName() {
                return "AlignmentUI"
            }

            init() {
                const t = this.editor;
                const e = t.ui.componentFactory;
                const i = t.t;
                const n = t.config.get("alignment.options");
                n.filter(Uw).forEach(t => this._addButton(t));
                e.add("alignment", t => {
                    const o = Wb(t);
                    const r = n.map(t => e.create(`alignment:${t}`));
                    qb(o, r);
                    o.buttonView.set({label: i("ja"), tooltip: true});
                    o.toolbarView.isVertical = true;
                    o.toolbarView.ariaLabel = i("jb");
                    o.extendTemplate({attributes: {class: "ck-alignment-dropdown"}});
                    const s = t.contentLanguageDirection === "rtl" ? tk : Zw;
                    o.buttonView.bind("icon").toMany(r, "isOn", (...t) => {
                        const e = t.findIndex(t => t);
                        if (e < 0) {
                            return s
                        }
                        return r[e].icon
                    });
                    o.bind("isEnabled").toMany(r, "isEnabled", (...t) => t.some(t => t));
                    return o
                })
            }

            _addButton(t) {
                const e = this.editor;
                e.ui.componentFactory.add(`alignment:${t}`, i => {
                    const n = e.commands.get("alignment");
                    const o = new hb(i);
                    o.set({label: this.localizedOptionTitles[t], icon: nk.get(t), tooltip: true, isToggleable: true});
                    o.bind("isEnabled").to(n);
                    o.bind("isOn").to(n, "value", e => e === t);
                    this.listenTo(o, "execute", () => {
                        e.execute("alignment", {value: t});
                        e.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class rk extends mp {
            static get requires() {
                return [Qw, ok]
            }

            static get pluginName() {
                return "Alignment"
            }
        }

        class sk {
            constructor(t) {
                this.context = t
            }

            destroy() {
                this.stopListening()
            }

            static get isContextPlugin() {
                return true
            }
        }

        vs(sk, Jc);

        class ak extends sk {
            static get pluginName() {
                return "PendingActions"
            }

            init() {
                this.set("hasAny", false);
                this._actions = new ys({idProperty: "_id"});
                this._actions.delegate("add", "remove").to(this)
            }

            add(t) {
                if (typeof t !== "string") {
                    throw new ss["b"]("pendingactions-add-invalid-message: The message must be a string.", this)
                }
                const e = Object.create(Jc);
                e.set("message", t);
                this._actions.add(e);
                this.hasAny = true;
                return e
            }

            remove(t) {
                this._actions.remove(t);
                this.hasAny = !!this._actions.length
            }

            get first() {
                return this._actions.get(0)
            }

            [Symbol.iterator]() {
                return this._actions[Symbol.iterator]()
            }
        }

        class ck {
            constructor() {
                const t = new window.FileReader;
                this._reader = t;
                this._data = undefined;
                this.set("loaded", 0);
                t.onprogress = t => {
                    this.loaded = t.loaded
                }
            }

            get error() {
                return this._reader.error
            }

            get data() {
                return this._data
            }

            read(t) {
                const e = this._reader;
                this.total = t.size;
                return new Promise((i, n) => {
                    e.onload = () => {
                        const t = e.result;
                        this._data = t;
                        i(t)
                    };
                    e.onerror = () => {
                        n("error")
                    };
                    e.onabort = () => {
                        n("aborted")
                    };
                    this._reader.readAsDataURL(t)
                })
            }

            abort() {
                this._reader.abort()
            }
        }

        vs(ck, Jc);

        class lk extends mp {
            static get pluginName() {
                return "FileRepository"
            }

            static get requires() {
                return [ak]
            }

            init() {
                this.loaders = new ys;
                this.loaders.on("add", () => this._updatePendingAction());
                this.loaders.on("remove", () => this._updatePendingAction());
                this._loadersMap = new Map;
                this._pendingAction = null;
                this.set("uploaded", 0);
                this.set("uploadTotal", null);
                this.bind("uploadedPercent").to(this, "uploaded", this, "uploadTotal", (t, e) => e ? t / e * 100 : 0)
            }

            getLoader(t) {
                return this._loadersMap.get(t) || null
            }

            createLoader(t) {
                if (!this.createUploadAdapter) {
                    console.warn(Object(ss["a"])("filerepository-no-upload-adapter: Upload adapter is not defined."));
                    return null
                }
                const e = new dk(Promise.resolve(t), this.createUploadAdapter);
                this.loaders.add(e);
                this._loadersMap.set(t, e);
                if (t instanceof Promise) {
                    e.file.then(t => {
                        this._loadersMap.set(t, e)
                    }).catch(() => {
                    })
                }
                e.on("change:uploaded", () => {
                    let t = 0;
                    for (const e of this.loaders) {
                        t += e.uploaded
                    }
                    this.uploaded = t
                });
                e.on("change:uploadTotal", () => {
                    let t = 0;
                    for (const e of this.loaders) {
                        if (e.uploadTotal) {
                            t += e.uploadTotal
                        }
                    }
                    this.uploadTotal = t
                });
                return e
            }

            destroyLoader(t) {
                const e = t instanceof dk ? t : this.getLoader(t);
                e._destroy();
                this.loaders.remove(e);
                this._loadersMap.forEach((t, i) => {
                    if (t === e) {
                        this._loadersMap.delete(i)
                    }
                })
            }

            _updatePendingAction() {
                const t = this.editor.plugins.get(ak);
                if (this.loaders.length) {
                    if (!this._pendingAction) {
                        const e = this.editor.t;
                        const i = t => `${e("lb")} ${parseInt(t)}%.`;
                        this._pendingAction = t.add(i(this.uploadedPercent));
                        this._pendingAction.bind("message").to(this, "uploadedPercent", i)
                    }
                } else {
                    t.remove(this._pendingAction);
                    this._pendingAction = null
                }
            }
        }

        vs(lk, Jc);

        class dk {
            constructor(t, e) {
                this.id = is();
                this._filePromiseWrapper = this._createFilePromiseWrapper(t);
                this._adapter = e(this);
                this._reader = new ck;
                this.set("status", "idle");
                this.set("uploaded", 0);
                this.set("uploadTotal", null);
                this.bind("uploadedPercent").to(this, "uploaded", this, "uploadTotal", (t, e) => e ? t / e * 100 : 0);
                this.set("uploadResponse", null)
            }

            get file() {
                if (!this._filePromiseWrapper) {
                    return Promise.resolve(null)
                } else {
                    return this._filePromiseWrapper.promise.then(t => this._filePromiseWrapper ? t : null)
                }
            }

            get data() {
                return this._reader.data
            }

            read() {
                if (this.status != "idle") {
                    throw new ss["b"]("filerepository-read-wrong-status: You cannot call read if the status is different than idle.", this)
                }
                this.status = "reading";
                return this.file.then(t => this._reader.read(t)).then(t => {
                    this.status = "idle";
                    return t
                }).catch(t => {
                    if (t === "aborted") {
                        this.status = "aborted";
                        throw"aborted"
                    }
                    this.status = "error";
                    throw this._reader.error ? this._reader.error : t
                })
            }

            upload() {
                if (this.status != "idle") {
                    throw new ss["b"]("filerepository-upload-wrong-status: You cannot call upload if the status is different than idle.", this)
                }
                this.status = "uploading";
                return this.file.then(() => this._adapter.upload()).then(t => {
                    this.uploadResponse = t;
                    this.status = "idle";
                    return t
                }).catch(t => {
                    if (this.status === "aborted") {
                        throw"aborted"
                    }
                    this.status = "error";
                    throw t
                })
            }

            abort() {
                const t = this.status;
                this.status = "aborted";
                if (!this._filePromiseWrapper.isFulfilled) {
                    this._filePromiseWrapper.promise.catch(() => {
                    });
                    this._filePromiseWrapper.rejecter("aborted")
                } else if (t == "reading") {
                    this._reader.abort()
                } else if (t == "uploading" && this._adapter.abort) {
                    this._adapter.abort()
                }
                this._destroy()
            }

            _destroy() {
                this._filePromiseWrapper = undefined;
                this._reader = undefined;
                this._adapter = undefined;
                this.uploadResponse = undefined
            }

            _createFilePromiseWrapper(t) {
                const e = {};
                e.promise = new Promise((i, n) => {
                    e.rejecter = n;
                    e.isFulfilled = false;
                    t.then(t => {
                        e.isFulfilled = true;
                        i(t)
                    }).catch(t => {
                        e.isFulfilled = true;
                        n(t)
                    })
                });
                return e
            }
        }

        vs(dk, Jc);

        class uk extends mp {
            static get requires() {
                return [lk]
            }

            static get pluginName() {
                return "Base64UploadAdapter"
            }

            init() {
                this.editor.plugins.get(lk).createUploadAdapter = t => new hk(t)
            }
        }

        class hk {
            constructor(t) {
                this.loader = t
            }

            upload() {
                return new Promise((t, e) => {
                    const i = this.reader = new window.FileReader;
                    i.addEventListener("load", () => {
                        t({default: i.result})
                    });
                    i.addEventListener("error", t => {
                        e(t)
                    });
                    i.addEventListener("abort", () => {
                        e()
                    });
                    this.loader.file.then(t => {
                        i.readAsDataURL(t)
                    })
                })
            }

            abort() {
                this.reader.abort()
            }
        }

        class fk extends jw {
            refresh() {
                this.value = this._getValue();
                this.isEnabled = this._checkEnabled()
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.schema;
                const n = e.document.selection;
                const o = Array.from(n.getSelectedBlocks());
                const r = t.forceValue === undefined ? !this.value : t.forceValue;
                e.change(t => {
                    if (!r) {
                        this._removeQuote(t, o.filter(gk))
                    } else {
                        const e = o.filter(t => gk(t) || pk(i, t));
                        this._applyQuote(t, e)
                    }
                })
            }

            _getValue() {
                const t = this.editor.model.document.selection;
                const e = Ww(t.getSelectedBlocks());
                return !!(e && gk(e))
            }

            _checkEnabled() {
                if (this.value) {
                    return true
                }
                const t = this.editor.model.document.selection;
                const e = this.editor.model.schema;
                const i = Ww(t.getSelectedBlocks());
                if (!i) {
                    return false
                }
                return pk(e, i)
            }

            _removeQuote(t, e) {
                mk(t, e).reverse().forEach(e => {
                    if (e.start.isAtStart && e.end.isAtEnd) {
                        t.unwrap(e.start.parent);
                        return
                    }
                    if (e.start.isAtStart) {
                        const i = t.createPositionBefore(e.start.parent);
                        t.move(e, i);
                        return
                    }
                    if (!e.end.isAtEnd) {
                        t.split(e.end)
                    }
                    const i = t.createPositionAfter(e.end.parent);
                    t.move(e, i)
                })
            }

            _applyQuote(t, e) {
                const i = [];
                mk(t, e).reverse().forEach(e => {
                    let n = gk(e.start);
                    if (!n) {
                        n = t.createElement("blockQuote");
                        t.wrap(e, n)
                    }
                    i.push(n)
                });
                i.reverse().reduce((e, i) => {
                    if (e.nextSibling == i) {
                        t.merge(t.createPositionAfter(e));
                        return e
                    }
                    return i
                })
            }
        }

        function gk(t) {
            return t.parent.name == "blockQuote" ? t.parent : null
        }

        function mk(t, e) {
            let i;
            let n = 0;
            const o = [];
            while (n < e.length) {
                const r = e[n];
                const s = e[n + 1];
                if (!i) {
                    i = t.createPositionBefore(r)
                }
                if (!s || r.nextSibling != s) {
                    o.push(t.createRange(i, t.createPositionAfter(r)));
                    i = null
                }
                n++
            }
            return o
        }

        function pk(t, e) {
            const i = t.checkChild(e.parent, "blockQuote");
            const n = t.checkChild(["$root", "blockQuote"], e);
            return i && n
        }

        class bk extends mp {
            static get pluginName() {
                return "BlockQuoteEditing"
            }

            init() {
                const t = this.editor;
                const e = t.model.schema;
                t.commands.add("blockQuote", new fk(t));
                e.register("blockQuote", {allowWhere: "$block", allowContentOf: "$root"});
                e.addChildCheck((t, e) => {
                    if (t.endsWith("blockQuote") && e.name == "blockQuote") {
                        return false
                    }
                });
                t.conversion.elementToElement({model: "blockQuote", view: "blockquote"});
                t.model.document.registerPostFixer(i => {
                    const n = t.model.document.differ.getChanges();
                    for (const t of n) {
                        if (t.type == "insert") {
                            const n = t.position.nodeAfter;
                            if (!n) {
                                continue
                            }
                            if (n.is("blockQuote") && n.isEmpty) {
                                i.remove(n);
                                return true
                            } else if (n.is("blockQuote") && !e.checkChild(t.position, n)) {
                                i.unwrap(n);
                                return true
                            } else if (n.is("element")) {
                                const t = i.createRangeIn(n);
                                for (const n of t.getItems()) {
                                    if (n.is("blockQuote") && !e.checkChild(i.createPositionBefore(n), n)) {
                                        i.unwrap(n);
                                        return true
                                    }
                                }
                            }
                        } else if (t.type == "remove") {
                            const e = t.position.parent;
                            if (e.is("blockQuote") && e.isEmpty) {
                                i.remove(e);
                                return true
                            }
                        }
                    }
                    return false
                })
            }

            afterInit() {
                const t = this.editor;
                const e = t.commands.get("blockQuote");
                this.listenTo(this.editor.editing.view.document, "enter", (t, i) => {
                    const n = this.editor.model.document;
                    const o = n.selection.getLastPosition().parent;
                    if (n.selection.isCollapsed && o.isEmpty && e.value) {
                        this.editor.execute("blockQuote");
                        this.editor.editing.view.scrollToTheSelection();
                        i.preventDefault();
                        t.stop()
                    }
                })
            }
        }

        var wk = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M3 10.423a6.5 6.5 0 0 1 6.056-6.408l.038.67C6.448 5.423 5.354 7.663 5.22 10H9c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574zm8 0a6.5 6.5 0 0 1 6.056-6.408l.038.67c-2.646.739-3.74 2.979-3.873 5.315H17c.552 0 .5.432.5.986v4.511c0 .554-.448.503-1 .503h-5c-.552 0-.5-.449-.5-1.003v-4.574z"/></svg>';
        var kk = i(45);

        class _k extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add("blockQuote", i => {
                    const n = t.commands.get("blockQuote");
                    const o = new hb(i);
                    o.set({label: e("jc"), icon: wk, tooltip: true, isToggleable: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute("blockQuote");
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class vk extends mp {
            static get requires() {
                return [bk, _k]
            }

            static get pluginName() {
                return "BlockQuote"
            }
        }

        class yk extends jw {
            constructor(t, e) {
                super(t);
                this.attributeKey = e
            }

            refresh() {
                const t = this.editor.model;
                const e = t.document;
                this.value = this._getValueFromFirstAllowedNode();
                this.isEnabled = t.schema.checkAttributeInSelection(e.selection, this.attributeKey)
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.document;
                const n = i.selection;
                const o = t.forceValue === undefined ? !this.value : t.forceValue;
                e.change(t => {
                    if (n.isCollapsed) {
                        if (o) {
                            t.setSelectionAttribute(this.attributeKey, true)
                        } else {
                            t.removeSelectionAttribute(this.attributeKey)
                        }
                    } else {
                        const i = e.schema.getValidRanges(n.getRanges(), this.attributeKey);
                        for (const e of i) {
                            if (o) {
                                t.setAttribute(this.attributeKey, o, e)
                            } else {
                                t.removeAttribute(this.attributeKey, e)
                            }
                        }
                    }
                })
            }

            _getValueFromFirstAllowedNode() {
                const t = this.editor.model;
                const e = t.schema;
                const i = t.document.selection;
                if (i.isCollapsed) {
                    return i.hasAttribute(this.attributeKey)
                }
                for (const t of i.getRanges()) {
                    for (const i of t.getItems()) {
                        if (e.checkAttribute(i, this.attributeKey)) {
                            return i.hasAttribute(this.attributeKey)
                        }
                    }
                }
                return false
            }
        }

        const xk = "bold";

        class Ck extends mp {
            static get pluginName() {
                return "BoldEditing"
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: xk});
                t.model.schema.setAttributeProperties(xk, {isFormatting: true, copyOnEnter: true});
                t.conversion.attributeToElement({
                    model: xk, view: "strong", upcastAlso: ["b", t => {
                        const e = t.getStyle("font-weight");
                        if (!e) {
                            return null
                        }
                        if (e == "bold" || Number(e) >= 600) {
                            return {name: true, styles: ["font-weight"]}
                        }
                    }]
                });
                t.commands.add(xk, new yk(t, xk));
                t.keystrokes.set("CTRL+B", xk)
            }
        }

        var Ak = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.187 17H5.773c-.637 0-1.092-.138-1.364-.415-.273-.277-.409-.718-.409-1.323V4.738c0-.617.14-1.062.419-1.332.279-.27.73-.406 1.354-.406h4.68c.69 0 1.288.041 1.793.124.506.083.96.242 1.36.478.341.197.644.447.906.75a3.262 3.262 0 0 1 .808 2.162c0 1.401-.722 2.426-2.167 3.075C15.05 10.175 16 11.315 16 13.01a3.756 3.756 0 0 1-2.296 3.504 6.1 6.1 0 0 1-1.517.377c-.571.073-1.238.11-2 .11zm-.217-6.217H7v4.087h3.069c1.977 0 2.965-.69 2.965-2.072 0-.707-.256-1.22-.768-1.537-.512-.319-1.277-.478-2.296-.478zM7 5.13v3.619h2.606c.729 0 1.292-.067 1.69-.2a1.6 1.6 0 0 0 .91-.765c.165-.267.247-.566.247-.897 0-.707-.26-1.176-.778-1.409-.519-.232-1.31-.348-2.375-.348H7z"/></svg>';
        const Tk = "bold";

        class Pk extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add(Tk, i => {
                    const n = t.commands.get(Tk);
                    const o = new hb(i);
                    o.set({label: e("ji"), icon: Ak, keystroke: "CTRL+B", tooltip: true, isToggleable: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute(Tk);
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class Sk extends mp {
            static get requires() {
                return [Ck, Pk]
            }

            static get pluginName() {
                return "Bold"
            }
        }

        class Ek extends jw {
            constructor(t, e) {
                super(t);
                this.attributeKey = e
            }

            refresh() {
                const t = this.editor.model;
                const e = t.document;
                this.value = e.selection.getAttribute(this.attributeKey);
                this.isEnabled = t.schema.checkAttributeInSelection(e.selection, this.attributeKey)
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.document;
                const n = i.selection;
                const o = t.value;
                e.change(t => {
                    if (n.isCollapsed) {
                        if (o) {
                            t.setSelectionAttribute(this.attributeKey, o)
                        } else {
                            t.removeSelectionAttribute(this.attributeKey)
                        }
                    } else {
                        const i = e.schema.getValidRanges(n.getRanges(), this.attributeKey);
                        for (const e of i) {
                            if (o) {
                                t.setAttribute(this.attributeKey, o, e)
                            } else {
                                t.removeAttribute(this.attributeKey, e)
                            }
                        }
                    }
                })
            }
        }

        var Rk = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path class="ck-icon__fill" d="M16.935 5.328a2 2 0 0 1 0 2.829l-7.778 7.778a2 2 0 0 1-2.829 0L3.5 13.107a1.999 1.999 0 1 1 2.828-2.829l.707.707a1 1 0 0 0 1.414 0l5.658-5.657a2 2 0 0 1 2.828 0z"/><path d="M14.814 6.035L8.448 12.4a1 1 0 0 1-1.414 0l-1.413-1.415A1 1 0 1 0 4.207 12.4l2.829 2.829a1 1 0 0 0 1.414 0l7.778-7.778a1 1 0 1 0-1.414-1.415z"/></svg>';

        class Ok extends hb {
            constructor(t) {
                super(t);
                const e = this.bindTemplate;
                this.set("color");
                this.set("hasBorder");
                this.icon = Rk;
                this.extendTemplate({
                    attributes: {
                        style: {backgroundColor: e.to("color")},
                        class: ["ck", "ck-color-grid__tile", e.if("hasBorder", "ck-color-table__color-tile_bordered")]
                    }
                })
            }

            render() {
                super.render();
                this.iconView.fillColor = "hsl(0, 0%, 100%)"
            }
        }

        var Ik = i(47);

        class Vk extends Gp {
            constructor(t, e) {
                super(t);
                const i = e && e.colorDefinitions || [];
                const n = {};
                if (e && e.columns) {
                    n.gridTemplateColumns = `repeat( ${e.columns}, 1fr)`
                }
                this.set("selectedColor");
                this.items = this.createCollection();
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this._focusCycler = new yb({
                    focusables: this.items,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "arrowleft", focusNext: "arrowright"}
                });
                this.items.on("add", (t, e) => {
                    e.isOn = e.color === this.selectedColor
                });
                i.forEach(t => {
                    const e = new Ok;
                    e.set({color: t.color, label: t.label, tooltip: true, hasBorder: t.options.hasBorder});
                    e.on("execute", () => {
                        this.fire("execute", {value: t.color, hasBorder: t.options.hasBorder, label: t.label})
                    });
                    this.items.add(e)
                });
                this.setTemplate({
                    tag: "div",
                    children: this.items,
                    attributes: {class: ["ck", "ck-color-grid"], style: n}
                });
                this.on("change:selectedColor", (t, e, i) => {
                    for (const t of this.items) {
                        t.isOn = t.color === i
                    }
                })
            }

            focus() {
                if (this.items.length) {
                    this.items.first.focus()
                }
            }

            focusLast() {
                if (this.items.length) {
                    this.items.last.focus()
                }
            }

            render() {
                super.render();
                for (const t of this.items) {
                    this.focusTracker.add(t.element)
                }
                this.items.on("add", (t, e) => {
                    this.focusTracker.add(e.element)
                });
                this.items.on("remove", (t, e) => {
                    this.focusTracker.remove(e.element)
                });
                this.keystrokes.listenTo(this.element)
            }
        }

        var Nk = i(49);

        class Mk extends Gp {
            constructor(t) {
                super(t);
                this.set("text");
                this.set("for");
                this.id = `ck-editor__label_${is()}`;
                const e = this.bindTemplate;
                this.setTemplate({
                    tag: "label",
                    attributes: {class: ["ck", "ck-label"], id: this.id, for: e.to("for")},
                    children: [{text: e.to("text")}]
                })
            }
        }

        class Bk extends ys {
            constructor(t) {
                super(t);
                this.set("isEmpty", true)
            }

            add(t, e) {
                if (this.find(e => e.color === t.color)) {
                    return
                }
                super.add(t, e);
                this.set("isEmpty", false)
            }

            remove(t) {
                const e = super.remove(t);
                if (this.length === 0) {
                    this.set("isEmpty", true)
                }
                return e
            }

            hasColor(t) {
                return !!this.find(e => e.color === t)
            }
        }

        vs(Bk, Jc);
        var zk = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M8.636 9.531l-2.758 3.94a.5.5 0 0 0 .122.696l3.224 2.284h1.314l2.636-3.736L8.636 9.53zm.288 8.451L5.14 15.396a2 2 0 0 1-.491-2.786l6.673-9.53a2 2 0 0 1 2.785-.49l3.742 2.62a2 2 0 0 1 .491 2.785l-7.269 10.053-2.147-.066z"/><path d="M4 18h5.523v-1H4zm-2 0h1v-1H2z"/></svg>';
        var Lk = i(51);

        class Fk extends Gp {
            constructor(t, {colors: e, columns: i, removeButtonLabel: n, documentColorsLabel: o, documentColorsCount: r}) {
                super(t);
                this.items = this.createCollection();
                this.colorDefinitions = e;
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.set("selectedColor");
                this.removeButtonLabel = n;
                this.columns = i;
                this.documentColors = new Bk;
                this.documentColorsCount = r;
                this._focusCycler = new yb({
                    focusables: this.items,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "arrowup", focusNext: "arrowdown"}
                });
                this._documentColorsLabel = o;
                this.setTemplate({tag: "div", attributes: {class: ["ck", "ck-color-table"]}, children: this.items});
                this.items.add(this._removeColorButton())
            }

            updateDocumentColors(t, e) {
                const i = t.document;
                const n = this.documentColorsCount;
                this.documentColors.clear();
                for (const o of i.getRootNames()) {
                    const r = i.getRoot(o);
                    const s = t.createRangeIn(r);
                    for (const t of s.getItems()) {
                        if (t.is("textProxy") && t.hasAttribute(e)) {
                            this._addColorToDocumentColors(t.getAttribute(e));
                            if (this.documentColors.length >= n) {
                                return
                            }
                        }
                    }
                }
            }

            updateSelectedColors() {
                const t = this.documentColorsGrid;
                const e = this.staticColorsGrid;
                const i = this.selectedColor;
                e.selectedColor = i;
                if (t) {
                    t.selectedColor = i
                }
            }

            render() {
                super.render();
                for (const t of this.items) {
                    this.focusTracker.add(t.element)
                }
                this.keystrokes.listenTo(this.element)
            }

            appendGrids() {
                if (this.staticColorsGrid) {
                    return
                }
                this.staticColorsGrid = this._createStaticColorsGrid();
                this.items.add(this.staticColorsGrid);
                if (this.documentColorsCount) {
                    const t = _p.bind(this.documentColors, this.documentColors);
                    const e = new Mk(this.locale);
                    e.text = this._documentColorsLabel;
                    e.extendTemplate({attributes: {class: ["ck", "ck-color-grid__label", t.if("isEmpty", "ck-hidden")]}});
                    this.items.add(e);
                    this.documentColorsGrid = this._createDocumentColorsGrid();
                    this.items.add(this.documentColorsGrid)
                }
            }

            focus() {
                this._focusCycler.focusFirst()
            }

            focusLast() {
                this._focusCycler.focusLast()
            }

            _removeColorButton() {
                const t = new hb;
                t.set({withText: true, icon: zk, tooltip: true, label: this.removeButtonLabel});
                t.class = "ck-color-table__remove-color";
                t.on("execute", () => {
                    this.fire("execute", {value: null})
                });
                return t
            }

            _createStaticColorsGrid() {
                const t = new Vk(this.locale, {colorDefinitions: this.colorDefinitions, columns: this.columns});
                t.delegate("execute").to(this);
                return t
            }

            _createDocumentColorsGrid() {
                const t = _p.bind(this.documentColors, this.documentColors);
                const e = new Vk(this.locale, {columns: this.columns});
                e.delegate("execute").to(this);
                e.extendTemplate({attributes: {class: t.if("isEmpty", "ck-hidden")}});
                e.items.bindTo(this.documentColors).using(t => {
                    const e = new Ok;
                    e.set({color: t.color, hasBorder: t.options && t.options.hasBorder});
                    if (t.label) {
                        e.set({label: t.label, tooltip: true})
                    }
                    e.on("execute", () => {
                        this.fire("execute", {value: t.color})
                    });
                    return e
                });
                this.documentColors.on("change:isEmpty", (t, i, n) => {
                    if (n) {
                        e.selectedColor = null
                    }
                });
                return e
            }

            _addColorToDocumentColors(t) {
                const e = this.colorDefinitions.find(e => e.color === t);
                if (!e) {
                    this.documentColors.add({color: t, label: t, options: {hasBorder: false}})
                } else {
                    this.documentColors.add(Object.assign({}, e))
                }
            }
        }

        const Dk = "fontSize";
        const jk = "fontFamily";
        const Hk = "fontColor";
        const Wk = "fontBackgroundColor";

        function qk(t, e) {
            const i = {model: {key: t, values: []}, view: {}, upcastAlso: {}};
            for (const t of e) {
                i.model.values.push(t.model);
                i.view[t.model] = t.view;
                if (t.upcastAlso) {
                    i.upcastAlso[t.model] = t.upcastAlso
                }
            }
            return i
        }

        function Uk(t) {
            return e => Kk(e.getStyle(t))
        }

        function $k(t) {
            return (e, i) => i.createAttributeElement("span", {style: `${t}:${e}`}, {priority: 7})
        }

        function Gk({dropdownView: t, colors: e, columns: i, removeButtonLabel: n, documentColorsLabel: o, documentColorsCount: r}) {
            const s = t.locale;
            const a = new Fk(s, {
                colors: e,
                columns: i,
                removeButtonLabel: n,
                documentColorsLabel: o,
                documentColorsCount: r
            });
            t.colorTableView = a;
            t.panelView.children.add(a);
            a.delegate("execute").to(t, "execute");
            return a
        }

        function Kk(t) {
            return t.replace(/\s/g, "")
        }

        class Jk extends Ek {
            constructor(t) {
                super(t, jk)
            }
        }

        function Yk(t) {
            return t.map(Qk).filter(t => !!t)
        }

        function Qk(t) {
            if (typeof t === "object") {
                return t
            }
            if (t === "default") {
                return {title: "Default", model: undefined}
            }
            if (typeof t !== "string") {
                return
            }
            return Xk(t)
        }

        function Xk(t) {
            const e = t.replace(/"|'/g, "").split(",");
            const i = e[0];
            const n = e.map(Zk).join(", ");
            return {title: i, model: i, view: {name: "span", styles: {"font-family": n}, priority: 7}}
        }

        function Zk(t) {
            t = t.trim();
            if (t.indexOf(" ") > 0) {
                t = `'${t}'`
            }
            return t
        }

        class t_ extends mp {
            static get pluginName() {
                return "FontFamilyEditing"
            }

            constructor(t) {
                super(t);
                t.config.define(jk, {options: ["default", "Arial, Helvetica, sans-serif", "Courier New, Courier, monospace", "Georgia, serif", "Lucida Sans Unicode, Lucida Grande, sans-serif", "Tahoma, Geneva, sans-serif", "Times New Roman, Times, serif", "Trebuchet MS, Helvetica, sans-serif", "Verdana, Geneva, sans-serif"]})
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: jk});
                t.model.schema.setAttributeProperties(jk, {isFormatting: true, copyOnEnter: true});
                const e = Yk(t.config.get("fontFamily.options")).filter(t => t.model);
                const i = qk(jk, e);
                t.conversion.attributeToElement(i);
                t.commands.add(jk, new Jk(t))
            }
        }

        class e_ {
            constructor(t, e) {
                if (e) {
                    qc(this, e)
                }
                if (t) {
                    this.set(t)
                }
            }
        }

        vs(e_, Jc);
        var i_ = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.03 3h6.149a.75.75 0 1 1 0 1.5h-5.514L11.03 3zm1.27 3h4.879a.75.75 0 1 1 0 1.5h-4.244L12.3 6zm1.27 3h3.609a.75.75 0 1 1 0 1.5h-2.973L13.57 9zm-2.754 2.5L8.038 4.785 5.261 11.5h5.555zm.62 1.5H4.641l-1.666 4.028H1.312l5.789-14h1.875l5.789 14h-1.663L11.436 13z"/></svg>';

        class n_ extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                const i = this._getLocalizedOptions();
                const n = t.commands.get(jk);
                t.ui.componentFactory.add(jk, o => {
                    const r = Wb(o);
                    Ub(r, o_(i, n));
                    r.buttonView.set({label: e("jo"), icon: i_, tooltip: true});
                    r.extendTemplate({attributes: {class: "ck-font-family-dropdown"}});
                    r.bind("isEnabled").to(n);
                    this.listenTo(r, "execute", e => {
                        t.execute(e.source.commandName, {value: e.source.commandParam});
                        t.editing.view.focus()
                    });
                    return r
                })
            }

            _getLocalizedOptions() {
                const t = this.editor;
                const e = t.t;
                const i = Yk(t.config.get(jk).options);
                return i.map(t => {
                    if (t.title === "Default") {
                        t.title = e("jp")
                    }
                    return t
                })
            }
        }

        function o_(t, e) {
            const i = new ys;
            for (const n of t) {
                const t = {
                    type: "button",
                    model: new e_({commandName: jk, commandParam: n.model, label: n.title, withText: true})
                };
                t.model.bind("isOn").to(e, "value", t => t === n.model);
                if (n.view && n.view.styles) {
                    t.model.set("labelStyle", `font-family: ${n.view.styles["font-family"]}`)
                }
                i.add(t)
            }
            return i
        }

        class r_ extends mp {
            static get requires() {
                return [t_, n_]
            }

            static get pluginName() {
                return "FontFamily"
            }
        }

        class s_ extends Ek {
            constructor(t) {
                super(t, Dk)
            }
        }

        function a_(t) {
            return t.map(l_).filter(t => !!t)
        }

        const c_ = {
            tiny: {title: "Tiny", model: "tiny", view: {name: "span", classes: "text-tiny", priority: 7}},
            small: {title: "Small", model: "small", view: {name: "span", classes: "text-small", priority: 7}},
            big: {title: "Big", model: "big", view: {name: "span", classes: "text-big", priority: 7}},
            huge: {title: "Huge", model: "huge", view: {name: "span", classes: "text-huge", priority: 7}}
        };

        function l_(t) {
            if (typeof t === "object") {
                return t
            }
            if (c_[t]) {
                return c_[t]
            }
            if (t === "default") {
                return {model: undefined, title: "Default"}
            }
            const e = parseFloat(t);
            if (isNaN(e)) {
                return
            }
            return d_(e)
        }

        function d_(t) {
            const e = String(t);
            return {title: e, model: t, view: {name: "span", styles: {"font-size": `${t}px`}, priority: 7}}
        }

        class u_ extends mp {
            static get pluginName() {
                return "FontSizeEditing"
            }

            constructor(t) {
                super(t);
                t.config.define(Dk, {options: ["tiny", "small", "default", "big", "huge"]});
                const e = a_(this.editor.config.get("fontSize.options")).filter(t => t.model);
                const i = qk(Dk, e);
                t.conversion.attributeToElement(i);
                t.commands.add(Dk, new s_(t))
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: Dk});
                t.model.schema.setAttributeProperties(Dk, {isFormatting: true, copyOnEnter: true})
            }
        }

        var h_ = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.816 11.5L7.038 4.785 4.261 11.5h5.555zm.62 1.5H3.641l-1.666 4.028H.312l5.789-14h1.875l5.789 14h-1.663L10.436 13zm7.55 2.279l.779-.779.707.707-2.265 2.265-2.193-2.265.707-.707.765.765V4.825c0-.042 0-.083.002-.123l-.77.77-.707-.707L17.207 2.5l2.265 2.265-.707.707-.782-.782c.002.043.003.089.003.135v10.454z"/></svg>';
        var f_ = i(53);

        class g_ extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                const i = this._getLocalizedOptions();
                const n = t.commands.get(Dk);
                t.ui.componentFactory.add(Dk, o => {
                    const r = Wb(o);
                    Ub(r, m_(i, n));
                    r.buttonView.set({label: e("jq"), icon: h_, tooltip: true});
                    r.extendTemplate({attributes: {class: ["ck-font-size-dropdown"]}});
                    r.bind("isEnabled").to(n);
                    this.listenTo(r, "execute", e => {
                        t.execute(e.source.commandName, {value: e.source.commandParam});
                        t.editing.view.focus()
                    });
                    return r
                })
            }

            _getLocalizedOptions() {
                const t = this.editor;
                const e = t.t;
                const i = {Default: e("jp"), Tiny: e("jr"), Small: e("js"), Big: e("jt"), Huge: e("ju")};
                const n = a_(t.config.get(Dk).options);
                return n.map(t => {
                    const e = i[t.title];
                    if (e && e != t.title) {
                        t = Object.assign({}, t, {title: e})
                    }
                    return t
                })
            }
        }

        function m_(t, e) {
            const i = new ys;
            for (const n of t) {
                const t = {
                    type: "button",
                    model: new e_({
                        commandName: Dk,
                        commandParam: n.model,
                        label: n.title,
                        class: "ck-fontsize-option",
                        withText: true
                    })
                };
                if (n.view && n.view.styles) {
                    t.model.set("labelStyle", `font-size:${n.view.styles["font-size"]}`)
                }
                if (n.view && n.view.classes) {
                    t.model.set("class", `${t.model.class} ${n.view.classes}`)
                }
                t.model.bind("isOn").to(e, "value", t => t === n.model);
                i.add(t)
            }
            return i
        }

        class p_ extends mp {
            static get requires() {
                return [u_, g_]
            }

            static get pluginName() {
                return "FontSize"
            }
        }

        class b_ extends Ek {
            constructor(t) {
                super(t, Hk)
            }
        }

        class w_ extends mp {
            static get pluginName() {
                return "FontColorEditing"
            }

            constructor(t) {
                super(t);
                t.config.define(Hk, {
                    colors: [{color: "hsl(0, 0%, 0%)", label: "Black"}, {
                        color: "hsl(0, 0%, 30%)",
                        label: "Dim grey"
                    }, {color: "hsl(0, 0%, 60%)", label: "Grey"}, {
                        color: "hsl(0, 0%, 90%)",
                        label: "Light grey"
                    }, {color: "hsl(0, 0%, 100%)", label: "White", hasBorder: true}, {
                        color: "hsl(0, 75%, 60%)",
                        label: "Red"
                    }, {color: "hsl(30, 75%, 60%)", label: "Orange"}, {
                        color: "hsl(60, 75%, 60%)",
                        label: "Yellow"
                    }, {color: "hsl(90, 75%, 60%)", label: "Light green"}, {
                        color: "hsl(120, 75%, 60%)",
                        label: "Green"
                    }, {color: "hsl(150, 75%, 60%)", label: "Aquamarine"}, {
                        color: "hsl(180, 75%, 60%)",
                        label: "Turquoise"
                    }, {color: "hsl(210, 75%, 60%)", label: "Light blue"}, {
                        color: "hsl(240, 75%, 60%)",
                        label: "Blue"
                    }, {color: "hsl(270, 75%, 60%)", label: "Purple"}], columns: 5
                });
                t.conversion.for("upcast").elementToAttribute({
                    view: {name: "span", styles: {color: /[\s\S]+/}},
                    model: {key: Hk, value: Uk("color")}
                });
                t.conversion.for("downcast").attributeToElement({model: Hk, view: $k("color")});
                t.commands.add(Hk, new b_(t));
                t.model.schema.extend("$text", {allowAttributes: Hk});
                t.model.schema.setAttributeProperties(Hk, {isFormatting: true, copyOnEnter: true})
            }
        }

        function k_(t, e) {
            const i = t.t;
            const n = {
                Black: i("lx"),
                "Dim grey": i("ly"),
                Grey: i("lz"),
                "Light grey": i("ma"),
                White: i("mb"),
                Red: i("mc"),
                Orange: i("md"),
                Yellow: i("me"),
                "Light green": i("mf"),
                Green: i("mg"),
                Aquamarine: i("mh"),
                Turquoise: i("mi"),
                "Light blue": i("mj"),
                Blue: i("mk"),
                Purple: i("ml")
            };
            return e.map(t => {
                const e = n[t.label];
                if (e && e != t.label) {
                    t.label = e
                }
                return t
            })
        }

        function __(t) {
            return t.map(v_).filter(t => !!t)
        }

        function v_(t) {
            if (typeof t === "string") {
                return {
                    model: t.replace(/ /g, ""),
                    label: t,
                    hasBorder: false,
                    view: {name: "span", styles: {color: t}}
                }
            } else {
                return {
                    model: t.color.replace(/ /g, ""),
                    label: t.label || t.color,
                    hasBorder: t.hasBorder === undefined ? false : t.hasBorder,
                    view: {name: "span", styles: {color: `${t.color}`}}
                }
            }
        }

        class y_ extends mp {
            constructor(t, {commandName: e, icon: i, componentName: n, dropdownLabel: o}) {
                super(t);
                this.commandName = e;
                this.componentName = n;
                this.icon = i;
                this.dropdownLabel = o;
                this.columns = t.config.get(`${this.componentName}.columns`);
                this.colorTableView
            }

            init() {
                const t = this.editor;
                const e = t.locale;
                const i = e.t;
                const n = t.commands.get(this.commandName);
                const o = __(t.config.get(this.componentName).colors);
                const r = k_(e, o);
                const s = t.config.get(`${this.componentName}.documentColors`);
                t.ui.componentFactory.add(this.componentName, e => {
                    const o = Wb(e);
                    this.colorTableView = Gk({
                        dropdownView: o,
                        colors: r.map(t => ({label: t.label, color: t.model, options: {hasBorder: t.hasBorder}})),
                        columns: this.columns,
                        removeButtonLabel: i("li"),
                        documentColorsLabel: s !== 0 ? i("lj") : undefined,
                        documentColorsCount: s === undefined ? this.columns : s
                    });
                    this.colorTableView.bind("selectedColor").to(n, "value");
                    o.buttonView.set({label: this.dropdownLabel, icon: this.icon, tooltip: true});
                    o.extendTemplate({attributes: {class: "ck-color-ui-dropdown"}});
                    o.bind("isEnabled").to(n);
                    o.on("execute", (e, i) => {
                        t.execute(this.commandName, i);
                        t.editing.view.focus()
                    });
                    o.on("change:isOpen", (e, i, n) => {
                        o.colorTableView.appendGrids();
                        if (n) {
                            if (s !== 0) {
                                this.colorTableView.updateDocumentColors(t.model, this.componentName)
                            }
                            this.colorTableView.updateSelectedColors()
                        }
                    });
                    return o
                })
            }
        }

        var x_ = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M12.4 10.3L10 4.5l-2.4 5.8h4.8zm.5 1.2H7.1L5.7 15H4.2l5-12h1.6l5 12h-1.5L13 11.5zm3.1 7H4a1 1 0 0 1 0-2h12a1 1 0 0 1 0 2z"/></svg>';

        class C_ extends y_ {
            constructor(t) {
                const e = t.locale.t;
                super(t, {commandName: Hk, componentName: Hk, icon: x_, dropdownLabel: e("jv")})
            }

            static get pluginName() {
                return "FontColorUI"
            }
        }

        class A_ extends mp {
            static get requires() {
                return [w_, C_]
            }

            static get pluginName() {
                return "FontColor"
            }
        }

        class T_ extends Ek {
            constructor(t) {
                super(t, Wk)
            }
        }

        class P_ extends mp {
            static get pluginName() {
                return "FontBackgroundColorEditing"
            }

            constructor(t) {
                super(t);
                t.config.define(Wk, {
                    colors: [{color: "hsl(0, 0%, 0%)", label: "Black"}, {
                        color: "hsl(0, 0%, 30%)",
                        label: "Dim grey"
                    }, {color: "hsl(0, 0%, 60%)", label: "Grey"}, {
                        color: "hsl(0, 0%, 90%)",
                        label: "Light grey"
                    }, {color: "hsl(0, 0%, 100%)", label: "White", hasBorder: true}, {
                        color: "hsl(0, 75%, 60%)",
                        label: "Red"
                    }, {color: "hsl(30, 75%, 60%)", label: "Orange"}, {
                        color: "hsl(60, 75%, 60%)",
                        label: "Yellow"
                    }, {color: "hsl(90, 75%, 60%)", label: "Light green"}, {
                        color: "hsl(120, 75%, 60%)",
                        label: "Green"
                    }, {color: "hsl(150, 75%, 60%)", label: "Aquamarine"}, {
                        color: "hsl(180, 75%, 60%)",
                        label: "Turquoise"
                    }, {color: "hsl(210, 75%, 60%)", label: "Light blue"}, {
                        color: "hsl(240, 75%, 60%)",
                        label: "Blue"
                    }, {color: "hsl(270, 75%, 60%)", label: "Purple"}], columns: 5
                });
                t.conversion.for("upcast").elementToAttribute({
                    view: {
                        name: "span",
                        styles: {"background-color": /[\s\S]+/}
                    }, model: {key: Wk, value: Uk("background-color")}
                });
                t.conversion.for("downcast").attributeToElement({model: Wk, view: $k("background-color")});
                t.commands.add(Wk, new T_(t));
                t.model.schema.extend("$text", {allowAttributes: Wk});
                t.model.schema.setAttributeProperties(Wk, {isFormatting: true, copyOnEnter: true})
            }
        }

        var S_ = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M4 2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2zm8.38 9.262H7.62L10 5.506l2.38 5.756zm.532 1.285L14.34 16h1.426L10.804 4H9.196L4.234 16H5.66l1.428-3.453h5.824z"/></svg>';

        class E_ extends y_ {
            constructor(t) {
                const e = t.locale.t;
                super(t, {commandName: Wk, componentName: Wk, icon: S_, dropdownLabel: e("jw")})
            }

            static get pluginName() {
                return "FontBackgroundColorUI"
            }
        }

        class R_ extends mp {
            static get requires() {
                return [P_, E_]
            }

            static get pluginName() {
                return "FontBackgroundColor"
            }
        }

        class O_ extends jw {
            refresh() {
                const t = this.editor.model;
                const e = t.document;
                const i = Ww(e.selection.getSelectedBlocks());
                this.value = !!i && i.is("paragraph");
                this.isEnabled = !!i && I_(i, t.schema)
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.document;
                e.change(n => {
                    const o = (t.selection || i.selection).getSelectedBlocks();
                    for (const t of o) {
                        if (!t.is("paragraph") && I_(t, e.schema)) {
                            n.rename(t, "paragraph")
                        }
                    }
                })
            }
        }

        function I_(t, e) {
            return e.checkChild(t.parent, "paragraph") && !e.isObject(t)
        }

        class V_ extends mp {
            static get pluginName() {
                return "Paragraph"
            }

            init() {
                const t = this.editor;
                const e = t.model;
                const i = t.data;
                t.commands.add("paragraph", new O_(t));
                e.schema.register("paragraph", {inheritAllFrom: "$block"});
                t.conversion.elementToElement({model: "paragraph", view: "p"});
                t.conversion.for("upcast").elementToElement({
                    model: (t, e) => {
                        if (!V_.paragraphLikeElements.has(t.name)) {
                            return null
                        }
                        if (t.isEmpty) {
                            return null
                        }
                        return e.createElement("paragraph")
                    }, converterPriority: "low"
                });
                i.upcastDispatcher.on("element", (t, e, i) => {
                    if (!i.consumable.test(e.viewItem, {name: e.viewItem.name})) {
                        return
                    }
                    if (M_(e.viewItem, e.modelCursor, i.schema)) {
                        Object.assign(e, N_(e.viewItem, e.modelCursor, i))
                    }
                }, {priority: "low"});
                i.upcastDispatcher.on("text", (t, e, i) => {
                    if (e.modelRange) {
                        return
                    }
                    if (M_(e.viewItem, e.modelCursor, i.schema)) {
                        Object.assign(e, N_(e.viewItem, e.modelCursor, i))
                    }
                }, {priority: "lowest"});
                e.document.registerPostFixer(t => this._autoparagraphEmptyRoots(t));
                t.data.on("ready", () => {
                    e.enqueueChange("transparent", t => this._autoparagraphEmptyRoots(t))
                }, {priority: "lowest"})
            }

            _autoparagraphEmptyRoots(t) {
                const e = this.editor.model;
                for (const i of e.document.getRootNames()) {
                    const n = e.document.getRoot(i);
                    if (n.isEmpty && n.rootName != "$graveyard") {
                        if (e.schema.checkChild(n, "paragraph")) {
                            t.insertElement("paragraph", n);
                            return true
                        }
                    }
                }
            }
        }

        V_.paragraphLikeElements = new Set(["blockquote", "dd", "div", "dt", "h1", "h2", "h3", "h4", "h5", "h6", "li", "p", "td"]);

        function N_(t, e, i) {
            const n = i.writer.createElement("paragraph");
            i.writer.insert(n, e);
            return i.convertItem(t, i.writer.createPositionAt(n, 0))
        }

        function M_(t, e, i) {
            const n = i.createContext(e);
            if (!i.checkChild(n, "paragraph")) {
                return false
            }
            if (!i.checkChild(n.push("paragraph"), t)) {
                return false
            }
            return true
        }

        class B_ extends jw {
            constructor(t, e) {
                super(t);
                this.modelElements = e
            }

            refresh() {
                const t = Ww(this.editor.model.document.selection.getSelectedBlocks());
                this.value = !!t && this.modelElements.includes(t.name) && t.name;
                this.isEnabled = !!t && this.modelElements.some(e => z_(t, e, this.editor.model.schema))
            }

            execute(t) {
                const e = this.editor.model;
                const i = e.document;
                const n = t.value;
                e.change(t => {
                    const o = Array.from(i.selection.getSelectedBlocks()).filter(t => z_(t, n, e.schema));
                    for (const e of o) {
                        if (!e.is(n)) {
                            t.rename(e, n)
                        }
                    }
                })
            }
        }

        function z_(t, e, i) {
            return i.checkChild(t.parent, e) && !i.isObject(t)
        }

        const L_ = "paragraph";

        class F_ extends mp {
            static get pluginName() {
                return "HeadingEditing"
            }

            constructor(t) {
                super(t);
                t.config.define("heading", {
                    options: [{
                        model: "paragraph",
                        title: "Paragraph",
                        class: "ck-heading_paragraph"
                    }, {
                        model: "heading1",
                        view: "h2",
                        title: "Heading 1",
                        class: "ck-heading_heading1"
                    }, {
                        model: "heading2",
                        view: "h3",
                        title: "Heading 2",
                        class: "ck-heading_heading2"
                    }, {model: "heading3", view: "h4", title: "Heading 3", class: "ck-heading_heading3"}]
                })
            }

            static get requires() {
                return [V_]
            }

            init() {
                const t = this.editor;
                const e = t.config.get("heading.options");
                const i = [];
                for (const n of e) {
                    if (n.model !== L_) {
                        t.model.schema.register(n.model, {inheritAllFrom: "$block"});
                        t.conversion.elementToElement(n);
                        i.push(n.model)
                    }
                }
                this._addDefaultH1Conversion(t);
                t.commands.add("heading", new B_(t, i))
            }

            afterInit() {
                const t = this.editor;
                const e = t.commands.get("enter");
                const i = t.config.get("heading.options");
                if (e) {
                    this.listenTo(e, "afterExecute", (e, n) => {
                        const o = t.model.document.selection.getFirstPosition().parent;
                        const r = i.some(t => o.is(t.model));
                        if (r && !o.is(L_) && o.childCount === 0) {
                            n.writer.rename(o, L_)
                        }
                    })
                }
            }

            _addDefaultH1Conversion(t) {
                t.conversion.for("upcast").elementToElement({
                    model: "heading1",
                    view: "h1",
                    converterPriority: os.get("low") + 1
                })
            }
        }

        function D_(t) {
            const e = t.t;
            const i = {
                Paragraph: e("ny"),
                "Heading 1": e("nz"),
                "Heading 2": e("oa"),
                "Heading 3": e("ob"),
                "Heading 4": e("oc"),
                "Heading 5": e("od"),
                "Heading 6": e("oe")
            };
            return t.config.get("heading.options").map(t => {
                const e = i[t.title];
                if (e && e != t.title) {
                    t.title = e
                }
                return t
            })
        }

        var j_ = i(11);

        class H_ extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                const i = D_(t);
                const n = e("jd");
                const o = e("je");
                t.ui.componentFactory.add("heading", e => {
                    const r = {};
                    const s = new ys;
                    const a = t.commands.get("heading");
                    const c = t.commands.get("paragraph");
                    const l = [a];
                    for (const t of i) {
                        const e = {type: "button", model: new e_({label: t.title, class: t.class, withText: true})};
                        if (t.model === "paragraph") {
                            e.model.bind("isOn").to(c, "value");
                            e.model.set("commandName", "paragraph");
                            l.push(c)
                        } else {
                            e.model.bind("isOn").to(a, "value", e => e === t.model);
                            e.model.set({commandName: "heading", commandValue: t.model})
                        }
                        s.add(e);
                        r[t.model] = t.title
                    }
                    const d = Wb(e);
                    Ub(d, s);
                    d.buttonView.set({isOn: false, withText: true, tooltip: o});
                    d.extendTemplate({attributes: {class: ["ck-heading-dropdown"]}});
                    d.bind("isEnabled").toMany(l, "isEnabled", (...t) => t.some(t => t));
                    d.buttonView.bind("label").to(a, "value", c, "value", (t, e) => {
                        const i = t || e && "paragraph";
                        return r[i] ? r[i] : n
                    });
                    this.listenTo(d, "execute", e => {
                        t.execute(e.source.commandName, e.source.commandValue ? {value: e.source.commandValue} : undefined);
                        t.editing.view.focus()
                    });
                    return d
                })
            }
        }

        class W_ extends mp {
            static get requires() {
                return [F_, H_]
            }

            static get pluginName() {
                return "Heading"
            }
        }

        class q_ {
            constructor() {
                this._stack = []
            }

            add(t, e) {
                const i = this._stack;
                const n = i[0];
                this._insertDescriptor(t);
                const o = i[0];
                if (n !== o && !U_(n, o)) {
                    this.fire("change:top", {oldDescriptor: n, newDescriptor: o, writer: e})
                }
            }

            remove(t, e) {
                const i = this._stack;
                const n = i[0];
                this._removeDescriptor(t);
                const o = i[0];
                if (n !== o && !U_(n, o)) {
                    this.fire("change:top", {oldDescriptor: n, newDescriptor: o, writer: e})
                }
            }

            _insertDescriptor(t) {
                const e = this._stack;
                const i = e.findIndex(e => e.id === t.id);
                if (U_(t, e[i])) {
                    return
                }
                if (i > -1) {
                    e.splice(i, 1)
                }
                let n = 0;
                while (e[n] && $_(e[n], t)) {
                    n++
                }
                e.splice(n, 0, t)
            }

            _removeDescriptor(t) {
                const e = this._stack;
                const i = e.findIndex(e => e.id === t);
                if (i > -1) {
                    e.splice(i, 1)
                }
            }
        }

        vs(q_, ds);

        function U_(t, e) {
            return t && e && t.priority == e.priority && G_(t.classes) == G_(e.classes)
        }

        function $_(t, e) {
            if (t.priority > e.priority) {
                return true
            } else if (t.priority < e.priority) {
                return false
            }
            return G_(t.classes) > G_(e.classes)
        }

        function G_(t) {
            return Array.isArray(t) ? t.sort().join(",") : t
        }

        var K_ = '<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M4 0v1H1v3H0V.5A.5.5 0 0 1 .5 0H4zm8 0h3.5a.5.5 0 0 1 .5.5V4h-1V1h-3V0zM4 16H.5a.5.5 0 0 1-.5-.5V12h1v3h3v1zm8 0v-1h3v-3h1v3.5a.5.5 0 0 1-.5.5H12z"/><path fill-opacity=".256" d="M1 1h14v14H1z"/><g class="ck-icon__selected-indicator"><path d="M7 0h2v1H7V0zM0 7h1v2H0V7zm15 0h1v2h-1V7zm-8 8h2v1H7v-1z"/><path fill-opacity=".254" d="M1 1h14v14H1z"/></g></svg>';
        const J_ = "ck-widget";
        const Y_ = "ck-widget_selected";

        function Q_(t) {
            if (!t.is("element")) {
                return false
            }
            return !!t.getCustomProperty("widget")
        }

        function X_(t, e, i = {}) {
            if (!Al.isEdge) {
                e.setAttribute("contenteditable", "false", t)
            }
            e.addClass(J_, t);
            e.setCustomProperty("widget", true, t);
            t.getFillerOffset = rv;
            if (i.label) {
                tv(t, i.label, e)
            }
            if (i.hasSelectionHandle) {
                sv(t, e)
            }
            Z_(t, e, (t, e, i) => i.addClass(n(e.classes), t), (t, e, i) => i.removeClass(n(e.classes), t));
            return t;

            function n(t) {
                return Array.isArray(t) ? t : [t]
            }
        }

        function Z_(t, e, i, n) {
            const o = new q_;
            o.on("change:top", (e, o) => {
                if (o.oldDescriptor) {
                    n(t, o.oldDescriptor, o.writer)
                }
                if (o.newDescriptor) {
                    i(t, o.newDescriptor, o.writer)
                }
            });
            e.setCustomProperty("addHighlight", (t, e, i) => o.add(e, i), t);
            e.setCustomProperty("removeHighlight", (t, e, i) => o.remove(e, i), t)
        }

        function tv(t, e, i) {
            i.setCustomProperty("widgetLabel", e, t)
        }

        function ev(t) {
            const e = t.getCustomProperty("widgetLabel");
            if (!e) {
                return ""
            }
            return typeof e == "function" ? e() : e
        }

        function iv(t, e) {
            e.addClass(["ck-editor__editable", "ck-editor__nested-editable"], t);
            if (!Al.isEdge) {
                e.setAttribute("contenteditable", t.isReadOnly ? "false" : "true", t);
                t.on("change:isReadOnly", (i, n, o) => {
                    e.setAttribute("contenteditable", o ? "false" : "true", t)
                })
            }
            t.on("change:isFocused", (i, n, o) => {
                if (o) {
                    e.addClass("ck-editor__nested-editable_focused", t)
                } else {
                    e.removeClass("ck-editor__nested-editable_focused", t)
                }
            });
            return t
        }

        function nv(t, e) {
            const i = t.getSelectedElement();
            if (i && e.schema.isBlock(i)) {
                return e.createPositionAfter(i)
            }
            const n = t.getSelectedBlocks().next().value;
            if (n) {
                if (n.isEmpty) {
                    return e.createPositionAt(n, 0)
                }
                const i = e.createPositionAfter(n);
                if (t.focus.isTouching(i)) {
                    return i
                }
                return e.createPositionBefore(n)
            }
            return t.focus
        }

        function ov(t, e) {
            return (i, n) => {
                const {mapper: o, viewPosition: r} = n;
                const s = o.findMappedViewAncestor(r);
                if (!e(s)) {
                    return
                }
                const a = o.toModelElement(s);
                n.modelPosition = t.createPositionAt(a, r.isAtStart ? "before" : "after")
            }
        }

        function rv() {
            return null
        }

        function sv(t, e) {
            const i = e.createUIElement("div", {class: "ck ck-widget__selection-handle"}, (function (t) {
                const e = this.toDomElement(t);
                const i = new cb;
                i.set("content", K_);
                i.render();
                e.appendChild(i.element);
                return e
            }));
            e.insert(e.createPositionAt(t, 0), i);
            e.addClass(["ck-widget_with-selection-handle"], t)
        }

        class av extends jw {
            refresh() {
                this.isEnabled = cv(this.editor.model)
            }

            execute() {
                const t = this.editor.model;
                t.change(e => {
                    const i = e.createElement("horizontalLine");
                    t.insertContent(i);
                    let n = i.nextSibling;
                    const o = n && t.schema.checkChild(n, "$text");
                    if (!o && t.schema.checkChild(i.parent, "paragraph")) {
                        n = e.createElement("paragraph");
                        t.insertContent(n, e.createPositionAfter(i))
                    }
                    if (n) {
                        e.setSelection(n, 0)
                    }
                })
            }
        }

        function cv(t) {
            const e = t.schema;
            const i = t.document.selection;
            return lv(i, e, t) && !dv(i, e)
        }

        function lv(t, e, i) {
            const n = uv(t, i);
            return e.checkChild(n, "horizontalLine")
        }

        function dv(t, e) {
            const i = t.getSelectedElement();
            return i && e.isObject(i)
        }

        function uv(t, e) {
            const i = nv(t, e);
            const n = i.parent;
            if (n.isEmpty && !n.is("$root")) {
                return n.parent
            }
            return n
        }

        var hv = i(56);

        class fv extends mp {
            static get pluginName() {
                return "HorizontalLineEditing"
            }

            init() {
                const t = this.editor;
                const e = t.model.schema;
                const i = t.t;
                const n = t.conversion;
                e.register("horizontalLine", {isObject: true, allowWhere: "$block"});
                n.for("dataDowncast").elementToElement({
                    model: "horizontalLine",
                    view: (t, e) => e.createEmptyElement("hr")
                });
                n.for("editingDowncast").elementToElement({
                    model: "horizontalLine", view: (t, e) => {
                        const n = i("jf");
                        const o = e.createContainerElement("div");
                        const r = e.createEmptyElement("hr");
                        e.addClass("ck-horizontal-line", o);
                        e.setCustomProperty("hr", true, o);
                        e.insert(e.createPositionAt(o, 0), r);
                        return gv(o, e, n)
                    }
                });
                n.for("upcast").elementToElement({view: "hr", model: "horizontalLine"});
                t.commands.add("horizontalLine", new av(t))
            }
        }

        function gv(t, e, i) {
            e.setCustomProperty("horizontalLine", true, t);
            return X_(t, e, {label: i})
        }

        var mv = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 9h16v2H2z"/></svg>';

        class pv extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add("horizontalLine", i => {
                    const n = t.commands.get("horizontalLine");
                    const o = new hb(i);
                    o.set({label: e("jf"), icon: mv, tooltip: true});
                    o.bind("isEnabled").to(n, "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute("horizontalLine");
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class bv extends mp {
            static get requires() {
                return [fv, pv]
            }

            static get pluginName() {
                return "HorizontalLine"
            }
        }

        class wv extends Gd {
            observe(t) {
                this.listenTo(t, "load", (t, e) => {
                    const i = e.target;
                    if (i.tagName == "IMG") {
                        this._fireEvents(e)
                    }
                }, {useCapture: true})
            }

            _fireEvents(t) {
                if (this.isEnabled) {
                    this.document.fire("layoutChanged");
                    this.document.fire("imageLoaded", t)
                }
            }
        }

        function kv(t, e, i) {
            e.setCustomProperty("image", true, t);
            return X_(t, e, {label: n});

            function n() {
                const e = Av(t);
                const n = e.getAttribute("alt");
                return n ? `${n} ${i}` : i
            }
        }

        function _v(t) {
            return !!t.getCustomProperty("image") && Q_(t)
        }

        function vv(t) {
            const e = t.getSelectedElement();
            if (e && _v(e)) {
                return e
            }
            return null
        }

        function yv(t) {
            return !!t && t.is("image")
        }

        function xv(t, e, i = {}) {
            const n = t.createElement("image", i);
            const o = nv(e.document.selection, e);
            e.insertContent(n, o);
            if (n.parent) {
                t.setSelection(n, "on")
            }
        }

        function Cv(t) {
            const e = t.schema;
            const i = t.document.selection;
            return Tv(i, e, t) && !Pv(i, e) && Sv(i)
        }

        function Av(t) {
            return Array.from(t.getChildren()).find(t => t.is("img"))
        }

        function Tv(t, e, i) {
            const n = Ev(t, i);
            return e.checkChild(n, "image")
        }

        function Pv(t, e) {
            const i = t.getSelectedElement();
            return i && e.isObject(i)
        }

        function Sv(t) {
            return [...t.focus.getAncestors()].every(t => !t.is("image"))
        }

        function Ev(t, e) {
            const i = nv(t, e);
            const n = i.parent;
            if (n.isEmpty && !n.is("$root")) {
                return n.parent
            }
            return n
        }

        function Rv() {
            return e => {
                e.on("element:figure", t)
            };

            function t(t, e, i) {
                if (!i.consumable.test(e.viewItem, {name: true, classes: "image"})) {
                    return
                }
                const n = Av(e.viewItem);
                if (!n || !n.hasAttribute("src") || !i.consumable.test(n, {name: true})) {
                    return
                }
                const o = i.convertItem(n, e.modelCursor);
                const r = Ww(o.modelRange.getItems());
                if (!r) {
                    return
                }
                i.convertChildren(e.viewItem, i.writer.createPositionAt(r, 0));
                e.modelRange = o.modelRange;
                e.modelCursor = o.modelCursor
            }
        }

        function Ov() {
            return e => {
                e.on("attribute:srcset:image", t)
            };

            function t(t, e, i) {
                if (!i.consumable.consume(e.item, t.name)) {
                    return
                }
                const n = i.writer;
                const o = i.mapper.toViewElement(e.item);
                const r = Av(o);
                if (e.attributeNewValue === null) {
                    const t = e.attributeOldValue;
                    if (t.data) {
                        n.removeAttribute("srcset", r);
                        n.removeAttribute("sizes", r);
                        if (t.width) {
                            n.removeAttribute("width", r)
                        }
                    }
                } else {
                    const t = e.attributeNewValue;
                    if (t.data) {
                        n.setAttribute("srcset", t.data, r);
                        n.setAttribute("sizes", "100vw", r);
                        if (t.width) {
                            n.setAttribute("width", t.width, r)
                        }
                    }
                }
            }
        }

        function Iv(t) {
            return i => {
                i.on(`attribute:${t}:image`, e)
            };

            function e(t, e, i) {
                if (!i.consumable.consume(e.item, t.name)) {
                    return
                }
                const n = i.writer;
                const o = i.mapper.toViewElement(e.item);
                const r = Av(o);
                if (e.attributeNewValue !== null) {
                    n.setAttribute(e.attributeKey, e.attributeNewValue, r)
                } else {
                    n.removeAttribute(e.attributeKey, r)
                }
            }
        }

        class Vv extends jw {
            refresh() {
                this.isEnabled = Cv(this.editor.model)
            }

            execute(t) {
                const e = this.editor.model;
                e.change(i => {
                    const n = Array.isArray(t.source) ? t.source : [t.source];
                    for (const t of n) {
                        xv(i, e, {src: t})
                    }
                })
            }
        }

        class Nv extends mp {
            static get pluginName() {
                return "ImageEditing"
            }

            init() {
                const t = this.editor;
                const e = t.model.schema;
                const i = t.t;
                const n = t.conversion;
                t.editing.view.addObserver(wv);
                e.register("image", {
                    isObject: true,
                    isBlock: true,
                    allowWhere: "$block",
                    allowAttributes: ["alt", "src", "srcset"]
                });
                n.for("dataDowncast").elementToElement({model: "image", view: (t, e) => Mv(e)});
                n.for("editingDowncast").elementToElement({model: "image", view: (t, e) => kv(Mv(e), e, i("jx"))});
                n.for("downcast").add(Iv("src")).add(Iv("alt")).add(Ov());
                n.for("upcast").elementToElement({
                    view: {name: "img", attributes: {src: true}},
                    model: (t, e) => e.createElement("image", {src: t.getAttribute("src")})
                }).attributeToAttribute({
                    view: {name: "img", key: "alt"},
                    model: "alt"
                }).attributeToAttribute({
                    view: {name: "img", key: "srcset"}, model: {
                        key: "srcset", value: t => {
                            const e = {data: t.getAttribute("srcset")};
                            if (t.hasAttribute("width")) {
                                e.width = t.getAttribute("width")
                            }
                            return e
                        }
                    }
                }).add(Rv());
                t.commands.add("imageInsert", new Vv(t))
            }
        }

        function Mv(t) {
            const e = t.createEmptyElement("img");
            const i = t.createContainerElement("figure", {class: "image"});
            t.insert(t.createPositionAt(i, 0), e);
            return i
        }

        class Bv extends Ju {
            constructor(t) {
                super(t);
                this.domEventType = "mousedown"
            }

            onDomEvent(t) {
                this.fire(t.type, t)
            }
        }

        var zv = i(58);
        const Lv = Bl("Ctrl+A");

        class Fv extends mp {
            static get pluginName() {
                return "Widget"
            }

            init() {
                const t = this.editor.editing.view;
                const e = t.document;
                this._previouslySelected = new Set;
                this.editor.editing.downcastDispatcher.on("selection", (t, e, i) => {
                    this._clearPreviouslySelectedWidgets(i.writer);
                    const n = i.writer;
                    const o = n.document.selection;
                    const r = o.getSelectedElement();
                    let s = null;
                    for (const t of o.getRanges()) {
                        for (const e of t) {
                            const t = e.item;
                            if (Q_(t) && !Wv(t, s)) {
                                n.addClass(Y_, t);
                                this._previouslySelected.add(t);
                                s = t;
                                if (t == r) {
                                    n.setSelection(o.getRanges(), {fake: true, label: ev(r)})
                                }
                            }
                        }
                    }
                }, {priority: "low"});
                t.addObserver(Bv);
                this.listenTo(e, "mousedown", (...t) => this._onMousedown(...t));
                this.listenTo(e, "keydown", (...t) => this._onKeydown(...t), {priority: "high"});
                this.listenTo(e, "delete", (t, e) => {
                    if (this._handleDelete(e.direction == "forward")) {
                        e.preventDefault();
                        t.stop()
                    }
                }, {priority: "high"})
            }

            _onMousedown(t, e) {
                const i = this.editor;
                const n = i.editing.view;
                const o = n.document;
                let r = e.target;
                if (Hv(r)) {
                    if (Al.isSafari && e.domEvent.detail >= 3) {
                        const t = i.editing.mapper;
                        const n = t.toModelElement(r);
                        this.editor.model.change(t => {
                            e.preventDefault();
                            t.setSelection(n, "in")
                        })
                    }
                    return
                }
                if (!Q_(r)) {
                    r = r.findAncestor(Q_);
                    if (!r) {
                        return
                    }
                }
                e.preventDefault();
                if (!o.isFocused) {
                    n.focus()
                }
                const s = i.editing.mapper.toModelElement(r);
                this._setSelectionOverElement(s)
            }

            _onKeydown(t, e) {
                const i = e.keyCode;
                const n = this.editor.locale.contentLanguageDirection === "ltr";
                const o = i == Nl.arrowdown || i == Nl[n ? "arrowright" : "arrowleft"];
                let r = false;
                if (Dv(i)) {
                    r = this._handleArrowKeys(o)
                } else if (jv(e)) {
                    r = this._selectAllNestedEditableContent() || this._selectAllContent()
                } else if (i === Nl.enter) {
                    r = this._handleEnterKey(e.shiftKey)
                }
                if (r) {
                    e.preventDefault();
                    t.stop()
                }
            }

            _handleDelete(t) {
                if (this.editor.isReadOnly) {
                    return
                }
                const e = this.editor.model.document;
                const i = e.selection;
                if (!i.isCollapsed) {
                    return
                }
                const n = this._getObjectElementNextToSelection(t);
                if (n) {
                    this.editor.model.change(t => {
                        let e = i.anchor.parent;
                        while (e.isEmpty) {
                            const i = e;
                            e = i.parent;
                            t.remove(i)
                        }
                        this._setSelectionOverElement(n)
                    });
                    return true
                }
            }

            _handleArrowKeys(t) {
                const e = this.editor.model;
                const i = e.schema;
                const n = e.document;
                const o = n.selection;
                const r = o.getSelectedElement();
                if (r && i.isObject(r)) {
                    const n = t ? o.getLastPosition() : o.getFirstPosition();
                    const r = i.getNearestSelectionRange(n, t ? "forward" : "backward");
                    if (r) {
                        e.change(t => {
                            t.setSelection(r)
                        })
                    }
                    return true
                }
                if (!o.isCollapsed) {
                    return
                }
                const s = this._getObjectElementNextToSelection(t);
                if (!!s && i.isObject(s)) {
                    this._setSelectionOverElement(s);
                    return true
                }
            }

            _handleEnterKey(t) {
                const e = this.editor.model;
                const i = e.document.selection;
                const n = i.getSelectedElement();
                if (qv(n, e.schema)) {
                    e.change(i => {
                        let o = i.createPositionAt(n, t ? "before" : "after");
                        const r = i.createElement("paragraph");
                        if (e.schema.isBlock(n.parent)) {
                            const t = e.schema.findAllowedParent(o, r);
                            o = i.split(o, t).position
                        }
                        i.insert(r, o);
                        i.setSelection(r, "in")
                    });
                    return true
                }
            }

            _selectAllNestedEditableContent() {
                const t = this.editor.model;
                const e = t.document.selection;
                const i = t.schema.getLimitElement(e);
                if (e.getFirstRange().root == i) {
                    return false
                }
                t.change(t => {
                    t.setSelection(t.createRangeIn(i))
                });
                return true
            }

            _selectAllContent() {
                const t = this.editor.model;
                const e = this.editor.editing;
                const i = e.view;
                const n = i.document;
                const o = n.selection;
                const r = o.getSelectedElement();
                if (r && Q_(r)) {
                    const i = e.mapper.toModelElement(r.parent);
                    t.change(t => {
                        t.setSelection(t.createRangeIn(i))
                    });
                    return true
                }
                return false
            }

            _setSelectionOverElement(t) {
                this.editor.model.change(e => {
                    e.setSelection(e.createRangeOn(t))
                })
            }

            _getObjectElementNextToSelection(t) {
                const e = this.editor.model;
                const i = e.schema;
                const n = e.document.selection;
                const o = e.createSelection(n);
                e.modifySelection(o, {direction: t ? "forward" : "backward"});
                const r = t ? o.focus.nodeBefore : o.focus.nodeAfter;
                if (!!r && i.isObject(r)) {
                    return r
                }
                return null
            }

            _clearPreviouslySelectedWidgets(t) {
                for (const e of this._previouslySelected) {
                    t.removeClass(Y_, e)
                }
                this._previouslySelected.clear()
            }
        }

        function Dv(t) {
            return t == Nl.arrowright || t == Nl.arrowleft || t == Nl.arrowup || t == Nl.arrowdown
        }

        function jv(t) {
            return Ml(t) == Lv
        }

        function Hv(t) {
            while (t) {
                if (t.is("editableElement") && !t.is("rootElement")) {
                    return true
                }
                if (Q_(t)) {
                    return false
                }
                t = t.parent
            }
            return false
        }

        function Wv(t, e) {
            if (!e) {
                return false
            }
            return Array.from(t.getAncestors()).includes(e)
        }

        function qv(t, e) {
            return t && e.isObject(t) && !e.isInline(t)
        }

        class Uv extends jw {
            refresh() {
                const t = this.editor.model.document.selection.getSelectedElement();
                this.isEnabled = yv(t);
                if (yv(t) && t.hasAttribute("alt")) {
                    this.value = t.getAttribute("alt")
                } else {
                    this.value = false
                }
            }

            execute(t) {
                const e = this.editor.model;
                const i = e.document.selection.getSelectedElement();
                e.change(e => {
                    e.setAttribute("alt", t.newValue, i)
                })
            }
        }

        class $v extends mp {
            static get pluginName() {
                return "ImageTextAlternativeEditing"
            }

            init() {
                this.editor.commands.add("imageTextAlternative", new Uv(this.editor))
            }
        }

        var Gv = i(60);

        class Kv extends Gp {
            constructor(t, e) {
                super(t);
                const i = `ck-input-${is()}`;
                const n = `ck-status-${is()}`;
                this.set("label");
                this.set("value");
                this.set("isReadOnly", false);
                this.set("errorText", null);
                this.set("infoText", null);
                this.labelView = this._createLabelView(i);
                this.inputView = this._createInputView(e, i, n);
                this.statusView = this._createStatusView(n);
                this.bind("_statusText").to(this, "errorText", this, "infoText", (t, e) => t || e);
                const o = this.bindTemplate;
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-labeled-input", o.if("isReadOnly", "ck-disabled")]},
                    children: [this.labelView, this.inputView, this.statusView]
                })
            }

            _createLabelView(t) {
                const e = new Mk(this.locale);
                e.for = t;
                e.bind("text").to(this, "label");
                return e
            }

            _createInputView(t, e, i) {
                const n = new t(this.locale, i);
                n.id = e;
                n.ariaDescribedById = i;
                n.bind("value").to(this);
                n.bind("isReadOnly").to(this);
                n.bind("hasError").to(this, "errorText", t => !!t);
                n.on("input", () => {
                    this.errorText = null
                });
                return n
            }

            _createStatusView(t) {
                const e = new Gp(this.locale);
                const i = this.bindTemplate;
                e.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-labeled-input__status", i.if("errorText", "ck-labeled-input__status_error"), i.if("_statusText", "ck-hidden", t => !t)],
                        id: t,
                        role: i.if("errorText", "alert")
                    },
                    children: [{text: i.to("_statusText")}]
                });
                return e
            }

            select() {
                this.inputView.select()
            }

            focus() {
                this.inputView.focus()
            }
        }

        var Jv = i(62);

        class Yv extends Gp {
            constructor(t) {
                super(t);
                this.set("value");
                this.set("id");
                this.set("placeholder");
                this.set("isReadOnly", false);
                this.set("hasError", false);
                this.set("ariaDescribedById");
                const e = this.bindTemplate;
                this.setTemplate({
                    tag: "input",
                    attributes: {
                        type: "text",
                        class: ["ck", "ck-input", "ck-input-text", e.if("hasError", "ck-error")],
                        id: e.to("id"),
                        placeholder: e.to("placeholder"),
                        readonly: e.to("isReadOnly"),
                        "aria-invalid": e.if("hasError", true),
                        "aria-describedby": e.to("ariaDescribedById")
                    },
                    on: {input: e.to("input")}
                })
            }

            render() {
                super.render();
                const t = t => {
                    this.element.value = !t && t !== 0 ? "" : t
                };
                t(this.value);
                this.on("change:value", (e, i, n) => {
                    t(n)
                })
            }

            select() {
                this.element.select()
            }

            focus() {
                this.element.focus()
            }
        }

        function Qv({view: t}) {
            t.listenTo(t.element, "submit", (e, i) => {
                i.preventDefault();
                t.fire("submit")
            }, {useCapture: true})
        }

        var Xv = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6.972 16.615a.997.997 0 0 1-.744-.292l-4.596-4.596a1 1 0 1 1 1.414-1.414l3.926 3.926 9.937-9.937a1 1 0 0 1 1.414 1.415L7.717 16.323a.997.997 0 0 1-.745.292z"/></svg>';
        var Zv = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.591 10.177l4.243 4.242a1 1 0 0 1-1.415 1.415l-4.242-4.243-4.243 4.243a1 1 0 0 1-1.414-1.415l4.243-4.242L4.52 5.934A1 1 0 0 1 5.934 4.52l4.243 4.243 4.242-4.243a1 1 0 1 1 1.415 1.414l-4.243 4.243z"/></svg>';
        var ty = i(64);

        class ey extends Gp {
            constructor(t) {
                super(t);
                const e = this.locale.t;
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.labeledInput = this._createLabeledInputView();
                this.saveButtonView = this._createButton(e("lo"), Xv, "ck-button-save");
                this.saveButtonView.type = "submit";
                this.cancelButtonView = this._createButton(e("lp"), Zv, "ck-button-cancel", "cancel");
                this._focusables = new bp;
                this._focusCycler = new yb({
                    focusables: this._focusables,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "shift + tab", focusNext: "tab"}
                });
                this.setTemplate({
                    tag: "form",
                    attributes: {class: ["ck", "ck-text-alternative-form"], tabindex: "-1"},
                    children: [this.labeledInput, this.saveButtonView, this.cancelButtonView]
                })
            }

            render() {
                super.render();
                this.keystrokes.listenTo(this.element);
                Qv({view: this});
                [this.labeledInput, this.saveButtonView, this.cancelButtonView].forEach(t => {
                    this._focusables.add(t);
                    this.focusTracker.add(t.element)
                })
            }

            _createButton(t, e, i, n) {
                const o = new hb(this.locale);
                o.set({label: t, icon: e, tooltip: true});
                o.extendTemplate({attributes: {class: i}});
                if (n) {
                    o.delegate("execute").to(this, n)
                }
                return o
            }

            _createLabeledInputView() {
                const t = this.locale.t;
                const e = new Kv(this.locale, Yv);
                e.label = t("lt");
                e.inputView.placeholder = t("lt");
                return e
            }
        }

        var iy = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M5.085 6.22L2.943 4.078a.75.75 0 1 1 1.06-1.06l2.592 2.59A11.094 11.094 0 0 1 10 5.068c4.738 0 8.578 3.101 8.578 5.083 0 1.197-1.401 2.803-3.555 3.887l1.714 1.713a.75.75 0 0 1-.09 1.138.488.488 0 0 1-.15.084.75.75 0 0 1-.821-.16L6.17 7.304c-.258.11-.51.233-.757.365l6.239 6.24-.006.005.78.78c-.388.094-.78.166-1.174.215l-1.11-1.11h.011L4.55 8.197a7.2 7.2 0 0 0-.665.514l-.112.098 4.897 4.897-.005.006 1.276 1.276a10.164 10.164 0 0 1-1.477-.117l-.479-.479-.009.009-4.863-4.863-.022.031a2.563 2.563 0 0 0-.124.2c-.043.077-.08.158-.108.241a.534.534 0 0 0-.028.133.29.29 0 0 0 .008.072.927.927 0 0 0 .082.226c.067.133.145.26.234.379l3.242 3.365.025.01.59.623c-3.265-.918-5.59-3.155-5.59-4.668 0-1.194 1.448-2.838 3.663-3.93zm7.07.531a4.632 4.632 0 0 1 1.108 5.992l.345.344.046-.018a9.313 9.313 0 0 0 2-1.112c.256-.187.5-.392.727-.613.137-.134.27-.277.392-.431.072-.091.141-.185.203-.286.057-.093.107-.19.148-.292a.72.72 0 0 0 .036-.12.29.29 0 0 0 .008-.072.492.492 0 0 0-.028-.133.999.999 0 0 0-.036-.096 2.165 2.165 0 0 0-.071-.145 2.917 2.917 0 0 0-.125-.2 3.592 3.592 0 0 0-.263-.335 5.444 5.444 0 0 0-.53-.523 7.955 7.955 0 0 0-1.054-.768 9.766 9.766 0 0 0-1.879-.891c-.337-.118-.68-.219-1.027-.301zm-2.85.21l-.069.002a.508.508 0 0 0-.254.097.496.496 0 0 0-.104.679.498.498 0 0 0 .326.199l.045.005c.091.003.181.003.272.012a2.45 2.45 0 0 1 2.017 1.513c.024.061.043.125.069.185a.494.494 0 0 0 .45.287h.008a.496.496 0 0 0 .35-.158.482.482 0 0 0 .13-.335.638.638 0 0 0-.048-.219 3.379 3.379 0 0 0-.36-.723 3.438 3.438 0 0 0-2.791-1.543l-.028-.001h-.013z"/></svg>';

        function ny(t) {
            const e = t.plugins.get("ContextualBalloon");
            if (vv(t.editing.view.document.selection)) {
                const i = oy(t);
                e.updatePosition(i)
            }
        }

        function oy(t) {
            const e = t.editing.view;
            const i = nb.defaultPositions;
            return {
                target: e.domConverter.viewToDom(e.document.selection.getSelectedElement()),
                positions: [i.northArrowSouth, i.northArrowSouthWest, i.northArrowSouthEast, i.southArrowNorth, i.southArrowNorthWest, i.southArrowNorthEast]
            }
        }

        class ry extends mp {
            static get requires() {
                return [kb]
            }

            static get pluginName() {
                return "ImageTextAlternativeUI"
            }

            init() {
                this._createButton();
                this._createForm()
            }

            destroy() {
                super.destroy();
                this._form.destroy()
            }

            _createButton() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add("imageTextAlternative", i => {
                    const n = t.commands.get("imageTextAlternative");
                    const o = new hb(i);
                    o.set({label: e("lh"), icon: iy, tooltip: true});
                    o.bind("isEnabled").to(n, "isEnabled");
                    this.listenTo(o, "execute", () => {
                        this._showForm()
                    });
                    return o
                })
            }

            _createForm() {
                const t = this.editor;
                const e = t.editing.view;
                const i = e.document;
                this._balloon = this.editor.plugins.get("ContextualBalloon");
                this._form = new ey(t.locale);
                this._form.render();
                this.listenTo(this._form, "submit", () => {
                    t.execute("imageTextAlternative", {newValue: this._form.labeledInput.inputView.element.value});
                    this._hideForm(true)
                });
                this.listenTo(this._form, "cancel", () => {
                    this._hideForm(true)
                });
                this._form.keystrokes.set("Esc", (t, e) => {
                    this._hideForm(true);
                    e()
                });
                this.listenTo(t.ui, "update", () => {
                    if (!vv(i.selection)) {
                        this._hideForm(true)
                    } else if (this._isVisible) {
                        ny(t)
                    }
                });
                Db({
                    emitter: this._form,
                    activator: () => this._isVisible,
                    contextElements: [this._balloon.view.element],
                    callback: () => this._hideForm()
                })
            }

            _showForm() {
                if (this._isVisible) {
                    return
                }
                const t = this.editor;
                const e = t.commands.get("imageTextAlternative");
                const i = this._form.labeledInput;
                if (!this._isInBalloon) {
                    this._balloon.add({view: this._form, position: oy(t)})
                }
                i.value = i.inputView.element.value = e.value || "";
                this._form.labeledInput.select()
            }

            _hideForm(t) {
                if (!this._isInBalloon) {
                    return
                }
                if (this._form.focusTracker.isFocused) {
                    this._form.saveButtonView.focus()
                }
                this._balloon.remove(this._form);
                if (t) {
                    this.editor.editing.view.focus()
                }
            }

            get _isVisible() {
                return this._balloon.visibleView === this._form
            }

            get _isInBalloon() {
                return this._balloon.hasView(this._form)
            }
        }

        class sy extends mp {
            static get requires() {
                return [$v, ry]
            }

            static get pluginName() {
                return "ImageTextAlternative"
            }
        }

        var ay = i(66);

        class cy extends mp {
            static get requires() {
                return [Nv, Fv, sy]
            }

            static get pluginName() {
                return "Image"
            }
        }

        class ly extends mp {
            static get requires() {
                return [kb]
            }

            static get pluginName() {
                return "WidgetToolbarRepository"
            }

            init() {
                const t = this.editor;
                if (t.plugins.has("BalloonToolbar")) {
                    const e = t.plugins.get("BalloonToolbar");
                    this.listenTo(e, "show", e => {
                        if (hy(t.editing.view.document.selection)) {
                            e.stop()
                        }
                    }, {priority: "high"})
                }
                this._toolbarDefinitions = new Map;
                this._balloon = this.editor.plugins.get("ContextualBalloon");
                this.on("change:isEnabled", () => {
                    this._updateToolbarsVisibility()
                });
                this.listenTo(t.ui, "update", () => {
                    this._updateToolbarsVisibility()
                });
                this.listenTo(t.ui.focusTracker, "change:isFocused", () => {
                    this._updateToolbarsVisibility()
                }, {priority: "low"})
            }

            destroy() {
                super.destroy();
                for (const t of this._toolbarDefinitions.values()) {
                    t.view.destroy()
                }
            }

            register(t, {ariaLabel: e, items: i, getRelatedElement: n, balloonClassName: o = "ck-toolbar-container"}) {
                const r = this.editor;
                const s = r.t;
                const a = new Xb(r.locale);
                a.ariaLabel = e || s("kf");
                if (this._toolbarDefinitions.has(t)) {
                    throw new ss["b"]("widget-toolbar-duplicated: Toolbar with the given id was already added.", this, {toolbarId: t})
                }
                a.fillFromConfig(i, r.ui.componentFactory);
                this._toolbarDefinitions.set(t, {view: a, getRelatedElement: n, balloonClassName: o})
            }

            _updateToolbarsVisibility() {
                let t = 0;
                let e = null;
                let i = null;
                for (const n of this._toolbarDefinitions.values()) {
                    const o = n.getRelatedElement(this.editor.editing.view.document.selection);
                    if (!this.isEnabled || !o) {
                        if (this._isToolbarInBalloon(n)) {
                            this._hideToolbar(n)
                        }
                    } else if (!this.editor.ui.focusTracker.isFocused) {
                        if (this._isToolbarVisible(n)) {
                            this._hideToolbar(n)
                        }
                    } else {
                        const r = o.getAncestors().length;
                        if (r > t) {
                            t = r;
                            e = o;
                            i = n
                        }
                    }
                }
                if (i) {
                    this._showToolbar(i, e)
                }
            }

            _hideToolbar(t) {
                this._balloon.remove(t.view);
                this.stopListening(this._balloon, "change:visibleView")
            }

            _showToolbar(t, e) {
                if (this._isToolbarVisible(t)) {
                    dy(this.editor, e)
                } else if (!this._isToolbarInBalloon(t)) {
                    this._balloon.add({
                        view: t.view,
                        position: uy(this.editor, e),
                        balloonClassName: t.balloonClassName
                    });
                    this.listenTo(this._balloon, "change:visibleView", () => {
                        for (const t of this._toolbarDefinitions.values()) {
                            if (this._isToolbarVisible(t)) {
                                const e = t.getRelatedElement(this.editor.editing.view.document.selection);
                                dy(this.editor, e)
                            }
                        }
                    })
                }
            }

            _isToolbarVisible(t) {
                return this._balloon.visibleView === t.view
            }

            _isToolbarInBalloon(t) {
                return this._balloon.hasView(t.view)
            }
        }

        function dy(t, e) {
            const i = t.plugins.get("ContextualBalloon");
            const n = uy(t, e);
            i.updatePosition(n)
        }

        function uy(t, e) {
            const i = t.editing.view;
            const n = nb.defaultPositions;
            return {
                target: i.domConverter.mapViewToDom(e),
                positions: [n.northArrowSouth, n.northArrowSouthWest, n.northArrowSouthEast, n.southArrowNorth, n.southArrowNorthWest, n.southArrowNorthEast]
            }
        }

        function hy(t) {
            const e = t.getSelectedElement();
            return !!(e && Q_(e))
        }

        class fy extends mp {
            static get requires() {
                return [ly]
            }

            static get pluginName() {
                return "ImageToolbar"
            }

            afterInit() {
                const t = this.editor;
                const e = t.t;
                const i = t.plugins.get(ly);
                i.register("image", {
                    ariaLabel: e("a"),
                    items: t.config.get("image.toolbar") || [],
                    getRelatedElement: vv
                })
            }
        }

        class gy extends jw {
            constructor(t, e) {
                super(t);
                this.defaultStyle = false;
                this.styles = e.reduce((t, e) => {
                    t[e.name] = e;
                    if (e.isDefault) {
                        this.defaultStyle = e.name
                    }
                    return t
                }, {})
            }

            refresh() {
                const t = this.editor.model.document.selection.getSelectedElement();
                this.isEnabled = yv(t);
                if (!t) {
                    this.value = false
                } else if (t.hasAttribute("imageStyle")) {
                    const e = t.getAttribute("imageStyle");
                    this.value = this.styles[e] ? e : false
                } else {
                    this.value = this.defaultStyle
                }
            }

            execute(t) {
                const e = t.value;
                const i = this.editor.model;
                const n = i.document.selection.getSelectedElement();
                i.change(t => {
                    if (this.styles[e].isDefault) {
                        t.removeAttribute("imageStyle", n)
                    } else {
                        t.setAttribute("imageStyle", e, n)
                    }
                })
            }
        }

        function my(t) {
            return (e, i, n) => {
                if (!n.consumable.consume(i.item, e.name)) {
                    return
                }
                const o = by(i.attributeNewValue, t);
                const r = by(i.attributeOldValue, t);
                const s = n.mapper.toViewElement(i.item);
                const a = n.writer;
                if (r) {
                    a.removeClass(r.className, s)
                }
                if (o) {
                    a.addClass(o.className, s)
                }
            }
        }

        function py(t) {
            const e = t.filter(t => !t.isDefault);
            return (t, i, n) => {
                if (!i.modelRange) {
                    return
                }
                const o = i.viewItem;
                const r = Ww(i.modelRange.getItems());
                if (!n.schema.checkAttribute(r, "imageStyle")) {
                    return
                }
                for (const t of e) {
                    if (n.consumable.consume(o, {classes: t.className})) {
                        n.writer.setAttribute("imageStyle", t.name, r)
                    }
                }
            }
        }

        function by(t, e) {
            for (const i of e) {
                if (i.name === t) {
                    return i
                }
            }
        }

        var wy = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 4.5V3h16v1.5zm2.5 3V12h11V7.5h-11zM4.061 6H15.94c.586 0 1.061.407 1.061.91v5.68c0 .503-.475.91-1.061.91H4.06c-.585 0-1.06-.407-1.06-.91V6.91C3 6.406 3.475 6 4.061 6zM2 16.5V15h16v1.5z"/></svg>';
        var ky = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg" clip-rule="evenodd" stroke-linejoin="round" stroke-miterlimit="1.414"><path d="M18 4.5V3H2v1.5h16zm0 3V6h-5.674v1.5H18zm0 3V9h-5.674v1.5H18zm0 3V12h-5.674v1.5H18zm-8.5-6V12h-6V7.5h6zm.818-1.5H2.682C2.305 6 2 6.407 2 6.91v5.68c0 .503.305.91.682.91h7.636c.377 0 .682-.407.682-.91V6.91c0-.503-.305-.91-.682-.91zM18 16.5V15H2v1.5h16z"/></svg>';
        var _y = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 4.5V3h16v1.5zm4.5 3V12h7V7.5h-7zM5.758 6h8.484c.419 0 .758.407.758.91v5.681c0 .502-.34.909-.758.909H5.758c-.419 0-.758-.407-.758-.91V6.91c0-.503.34-.91.758-.91zM2 16.5V15h16v1.5z"/></svg>';
        var vy = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 4.5V3h16v1.5zm0 3V6h5.674v1.5zm0 3V9h5.674v1.5zm0 3V12h5.674v1.5zm8.5-6V12h6V7.5h-6zM9.682 6h7.636c.377 0 .682.407.682.91v5.68c0 .503-.305.91-.682.91H9.682c-.377 0-.682-.407-.682-.91V6.91c0-.503.305-.91.682-.91zM2 16.5V15h16v1.5z"/></svg>';
        const yy = {
            full: {name: "full", title: "Full size image", icon: wy, isDefault: true},
            side: {name: "side", title: "Side image", icon: vy, className: "image-style-side"},
            alignLeft: {name: "alignLeft", title: "Left aligned image", icon: ky, className: "image-style-align-left"},
            alignCenter: {
                name: "alignCenter",
                title: "Centered image",
                icon: _y,
                className: "image-style-align-center"
            },
            alignRight: {
                name: "alignRight",
                title: "Right aligned image",
                icon: vy,
                className: "image-style-align-right"
            }
        };
        const xy = {full: wy, left: ky, right: vy, center: _y};

        function Cy(t = []) {
            return t.map(Ay)
        }

        function Ay(t) {
            if (typeof t == "string") {
                const e = t;
                if (yy[e]) {
                    t = Object.assign({}, yy[e])
                } else {
                    console.warn(Object(ss["a"])("image-style-not-found: There is no such image style of given name."), {name: e});
                    t = {name: e}
                }
            } else if (yy[t.name]) {
                const e = yy[t.name];
                const i = Object.assign({}, t);
                for (const n in e) {
                    if (!t.hasOwnProperty(n)) {
                        i[n] = e[n]
                    }
                }
                t = i
            }
            if (typeof t.icon == "string" && xy[t.icon]) {
                t.icon = xy[t.icon]
            }
            return t
        }

        class Ty extends mp {
            static get pluginName() {
                return "ImageStyleEditing"
            }

            init() {
                const t = this.editor;
                const e = t.model.schema;
                const i = t.data;
                const n = t.editing;
                t.config.define("image.styles", ["full", "side"]);
                const o = Cy(t.config.get("image.styles"));
                e.extend("image", {allowAttributes: "imageStyle"});
                const r = my(o);
                n.downcastDispatcher.on("attribute:imageStyle:image", r);
                i.downcastDispatcher.on("attribute:imageStyle:image", r);
                i.upcastDispatcher.on("element:figure", py(o), {priority: "low"});
                t.commands.add("imageStyle", new gy(t, o))
            }
        }

        var Py = i(68);

        class Sy extends mp {
            static get pluginName() {
                return "ImageStyleUI"
            }

            get localizedDefaultStylesTitles() {
                const t = this.editor.t;
                return {
                    "Full size image": t("jy"),
                    "Side image": t("jz"),
                    "Left aligned image": t("ka"),
                    "Centered image": t("kb"),
                    "Right aligned image": t("kc")
                }
            }

            init() {
                const t = this.editor;
                const e = t.config.get("image.styles");
                const i = Ey(Cy(e), this.localizedDefaultStylesTitles);
                for (const t of i) {
                    this._createButton(t)
                }
            }

            _createButton(t) {
                const e = this.editor;
                const i = `imageStyle:${t.name}`;
                e.ui.componentFactory.add(i, i => {
                    const n = e.commands.get("imageStyle");
                    const o = new hb(i);
                    o.set({label: t.title, icon: t.icon, tooltip: true, isToggleable: true});
                    o.bind("isEnabled").to(n, "isEnabled");
                    o.bind("isOn").to(n, "value", e => e === t.name);
                    this.listenTo(o, "execute", () => {
                        e.execute("imageStyle", {value: t.name});
                        e.editing.view.focus()
                    });
                    return o
                })
            }
        }

        function Ey(t, e) {
            for (const i of t) {
                if (e[i.title]) {
                    i.title = e[i.title]
                }
            }
            return t
        }

        class Ry extends mp {
            static get requires() {
                return [Ty, Sy]
            }

            static get pluginName() {
                return "ImageStyle"
            }
        }

        class Oy {
            constructor(t) {
                this.set("activeHandlePosition", null);
                this.set("proposedWidthPercents", null);
                this.set("proposedWidth", null);
                this.set("proposedHeight", null);
                this.set("proposedHandleHostWidth", null);
                this.set("proposedHandleHostHeight", null);
                this._options = t;
                this._referenceCoordinates = null
            }

            begin(t, e, i) {
                const n = new vh(e);
                this.activeHandlePosition = My(t);
                this._referenceCoordinates = Vy(e, By(this.activeHandlePosition));
                this.originalWidth = n.width;
                this.originalHeight = n.height;
                this.aspectRatio = n.width / n.height;
                const o = i.style.width;
                if (o && o.match(/^\d+\.?\d*%$/)) {
                    this.originalWidthPercents = parseFloat(o)
                } else {
                    this.originalWidthPercents = Iy(i, n)
                }
            }

            update(t) {
                this.proposedWidth = t.width;
                this.proposedHeight = t.height;
                this.proposedWidthPercents = t.widthPercents;
                this.proposedHandleHostWidth = t.handleHostWidth;
                this.proposedHandleHostHeight = t.handleHostHeight
            }
        }

        vs(Oy, Jc);

        function Iy(t, e) {
            const i = t.parentElement;
            const n = parseFloat(i.ownerDocument.defaultView.getComputedStyle(i).width);
            return e.width / n * 100
        }

        function Vy(t, e) {
            const i = new vh(t);
            const n = e.split("-");
            const o = {x: n[1] == "right" ? i.right : i.left, y: n[0] == "bottom" ? i.bottom : i.top};
            o.x += t.ownerDocument.defaultView.scrollX;
            o.y += t.ownerDocument.defaultView.scrollY;
            return o
        }

        function Ny(t) {
            return `ck-widget__resizer__handle-${t}`
        }

        function My(t) {
            const e = ["top-left", "top-right", "bottom-right", "bottom-left"];
            for (const i of e) {
                if (t.classList.contains(Ny(i))) {
                    return i
                }
            }
        }

        function By(t) {
            const e = t.split("-");
            const i = {top: "bottom", bottom: "top", left: "right", right: "left"};
            return `${i[e[0]]}-${i[e[1]]}`
        }

        class zy {
            constructor(t) {
                this._options = t;
                this._domResizerWrapper = null;
                this._viewResizerWrapper = null;
                this.set("isEnabled", true);
                this.decorate("begin");
                this.decorate("cancel");
                this.decorate("commit");
                this.decorate("updateSize");
                this.on("commit", t => {
                    if (!this.state.proposedWidth && !this.state.proposedWidthPercents) {
                        this._cleanup();
                        t.stop()
                    }
                }, {priority: "high"})
            }

            attach() {
                const t = this;
                const e = this._options.viewElement;
                const i = this._options.editor.editing.view;
                i.change(i => {
                    const n = i.createUIElement("div", {class: "ck ck-reset_all ck-widget__resizer"}, (function (e) {
                        const i = this.toDomElement(e);
                        t._appendHandles(i);
                        t._appendSizeUI(i);
                        t._domResizerWrapper = i;
                        t.on("change:isEnabled", (t, e, n) => {
                            i.style.display = n ? "" : "none"
                        });
                        i.style.display = t.isEnabled ? "" : "none";
                        return i
                    }));
                    i.insert(i.createPositionAt(e, "end"), n);
                    i.addClass("ck-widget_with-resizer", e);
                    this._viewResizerWrapper = n
                })
            }

            begin(t) {
                this.state = new Oy(this._options);
                this._sizeUI.bindToState(this._options, this.state);
                this.state.begin(t, this._getHandleHost(), this._getResizeHost())
            }

            updateSize(t) {
                const e = this._proposeNewSize(t);
                const i = this._options.editor.editing.view;
                i.change(t => {
                    const i = this._options.unit || "%";
                    const n = (i === "%" ? e.widthPercents : e.width) + i;
                    t.setStyle("width", n, this._options.viewElement)
                });
                const n = this._getHandleHost();
                const o = new vh(n);
                e.handleHostWidth = Math.round(o.width);
                e.handleHostHeight = Math.round(o.height);
                const r = new vh(n);
                e.width = Math.round(r.width);
                e.height = Math.round(r.height);
                this.redraw(o);
                this.state.update(e)
            }

            commit() {
                const t = this._options.unit || "%";
                const e = (t === "%" ? this.state.proposedWidthPercents : this.state.proposedWidth) + t;
                this._options.onCommit(e);
                this._cleanup()
            }

            cancel() {
                this._cleanup()
            }

            destroy() {
                this.cancel()
            }

            redraw(t) {
                const e = this._domResizerWrapper;
                if (i(e)) {
                    this._options.editor.editing.view.change(i => {
                        const n = e.parentElement;
                        const o = this._getHandleHost();
                        const r = t || new vh(o);
                        i.setStyle("width", r.width + "px", this._viewResizerWrapper);
                        i.setStyle("height", r.height + "px", this._viewResizerWrapper);
                        const s = {left: o.offsetLeft, top: o.offsetTop, height: o.offsetHeight, width: o.offsetWidth};
                        if (!n.isSameNode(o)) {
                            i.setStyle("left", s.left + "px", this._viewResizerWrapper);
                            i.setStyle("top", s.top + "px", this._viewResizerWrapper);
                            i.setStyle("height", s.height + "px", this._viewResizerWrapper);
                            i.setStyle("width", s.width + "px", this._viewResizerWrapper)
                        }
                    })
                }

                function i(t) {
                    return t && t.ownerDocument && t.ownerDocument.contains(t)
                }
            }

            containsHandle(t) {
                return this._domResizerWrapper.contains(t)
            }

            static isResizeHandle(t) {
                return t.classList.contains("ck-widget__resizer__handle")
            }

            _cleanup() {
                this._sizeUI.dismiss();
                this._sizeUI.isVisible = false
            }

            _proposeNewSize(t) {
                const e = this.state;
                const i = Dy(t);
                const n = this._options.isCentered ? this._options.isCentered(this) : true;
                const o = {
                    x: e._referenceCoordinates.x - (i.x + e.originalWidth),
                    y: i.y - e.originalHeight - e._referenceCoordinates.y
                };
                if (n && e.activeHandlePosition.endsWith("-right")) {
                    o.x = i.x - (e._referenceCoordinates.x + e.originalWidth)
                }
                if (n) {
                    o.x *= 2
                }
                const r = {width: Math.abs(e.originalWidth + o.x), height: Math.abs(e.originalHeight + o.y)};
                r.dominant = r.width / e.aspectRatio > r.height ? "width" : "height";
                r.max = r[r.dominant];
                const s = {width: r.width, height: r.height};
                if (r.dominant == "width") {
                    s.height = s.width / e.aspectRatio
                } else {
                    s.width = s.height * e.aspectRatio
                }
                return {
                    width: Math.round(s.width),
                    height: Math.round(s.height),
                    widthPercents: Math.min(Math.round(e.originalWidthPercents / e.originalWidth * s.width * 100) / 100, 100)
                }
            }

            _getResizeHost() {
                const t = this._domResizerWrapper.parentElement;
                return this._options.getResizeHost(t)
            }

            _getHandleHost() {
                const t = this._domResizerWrapper.parentElement;
                return this._options.getHandleHost(t)
            }

            _appendHandles(t) {
                const e = ["top-left", "top-right", "bottom-right", "bottom-left"];
                for (const i of e) {
                    t.appendChild(new _p({
                        tag: "div",
                        attributes: {class: `ck-widget__resizer__handle ${Fy(i)}`}
                    }).render())
                }
            }

            _appendSizeUI(t) {
                const e = new Ly;
                e.render();
                this._sizeUI = e;
                t.appendChild(e.element)
            }
        }

        vs(zy, Jc);

        class Ly extends Gp {
            constructor() {
                super();
                const t = this.bindTemplate;
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-size-view", t.to("activeHandlePosition", t => t ? `ck-orientation-${t}` : "")],
                        style: {display: t.if("isVisible", "none", t => !t)}
                    },
                    children: [{text: t.to("label")}]
                })
            }

            bindToState(t, e) {
                this.bind("isVisible").to(e, "proposedWidth", e, "proposedHeight", (t, e) => t !== null && e !== null);
                this.bind("label").to(e, "proposedHandleHostWidth", e, "proposedHandleHostHeight", e, "proposedWidthPercents", (e, i, n) => {
                    if (t.unit === "px") {
                        return `${e}×${i}`
                    } else {
                        return `${n}%`
                    }
                });
                this.bind("activeHandlePosition").to(e)
            }

            dismiss() {
                this.unbind();
                this.isVisible = false
            }
        }

        function Fy(t) {
            return `ck-widget__resizer__handle-${t}`
        }

        function Dy(t) {
            return {x: t.pageX, y: t.pageY}
        }

        var jy = "Expected a function";

        function Hy(t, e, i) {
            var n = true, o = true;
            if (typeof t != "function") {
                throw new TypeError(jy)
            }
            if (ct(i)) {
                n = "leading" in i ? !!i.leading : n;
                o = "trailing" in i ? !!i.trailing : o
            }
            return uh(t, e, {leading: n, maxWait: e, trailing: o})
        }

        var Wy = Hy;
        var qy = i(70);

        class Uy extends mp {
            static get pluginName() {
                return "WidgetResize"
            }

            init() {
                this.set("_visibleResizer", null);
                this.set("_activeResizer", null);
                this._resizers = new Map;
                const t = Id.window.document;
                this.editor.model.schema.setAttributeProperties("width", {isFormatting: true});
                this._observer = Object.create(qd);
                this._observer.listenTo(t, "mousedown", this._mouseDownListener.bind(this));
                this._observer.listenTo(t, "mousemove", this._mouseMoveListener.bind(this));
                this._observer.listenTo(t, "mouseup", this._mouseUpListener.bind(this));
                const e = () => {
                    if (this._visibleResizer) {
                        this._visibleResizer.redraw()
                    }
                };
                const i = Wy(e, 200);
                this.on("change:_visibleResizer", e);
                this.editor.ui.on("update", i);
                this._observer.listenTo(Id.window, "resize", i);
                const n = this.editor.editing.view.document.selection;
                n.on("change", () => {
                    const t = n.getSelectedElement();
                    this._visibleResizer = this._getResizerByViewElement(t) || null
                })
            }

            destroy() {
                this._observer.stopListening();
                for (const t of this._resizers.values()) {
                    t.destroy()
                }
            }

            attachTo(t) {
                const e = new zy(t);
                const i = this.editor.plugins;
                e.attach();
                if (i.has("WidgetToolbarRepository")) {
                    const t = i.get("WidgetToolbarRepository");
                    e.on("begin", () => {
                        t.forceDisabled("resize")
                    }, {priority: "lowest"});
                    e.on("cancel", () => {
                        t.clearForceDisabled("resize")
                    }, {priority: "highest"});
                    e.on("commit", () => {
                        t.clearForceDisabled("resize")
                    }, {priority: "highest"})
                }
                this._resizers.set(t.viewElement, e);
                return e
            }

            _getResizerByHandle(t) {
                for (const e of this._resizers.values()) {
                    if (e.containsHandle(t)) {
                        return e
                    }
                }
            }

            _getResizerByViewElement(t) {
                return this._resizers.get(t)
            }

            _mouseDownListener(t, e) {
                if (!zy.isResizeHandle(e.target)) {
                    return
                }
                const i = e.target;
                this._activeResizer = this._getResizerByHandle(i);
                if (this._activeResizer) {
                    this._activeResizer.begin(i)
                }
            }

            _mouseMoveListener(t, e) {
                if (this._activeResizer) {
                    this._activeResizer.updateSize(e)
                }
            }

            _mouseUpListener() {
                if (this._activeResizer) {
                    this._activeResizer.commit();
                    this._activeResizer = null
                }
            }
        }

        vs(Uy, Jc);

        class $y extends jw {
            refresh() {
                const t = this.editor.model.document.selection.getSelectedElement();
                this.isEnabled = yv(t);
                if (!t || !t.hasAttribute("width")) {
                    this.value = null
                } else {
                    this.value = {width: t.getAttribute("width"), height: null}
                }
            }

            execute(t) {
                const e = this.editor.model;
                const i = e.document.selection.getSelectedElement();
                e.change(e => {
                    e.setAttribute("width", t.width, i)
                })
            }
        }

        var Gy = i(72);

        class Ky extends mp {
            static get requires() {
                return [Uy]
            }

            static get pluginName() {
                return "ImageResize"
            }

            init() {
                const t = this.editor;
                const e = new $y(t);
                this._registerSchema();
                this._registerConverters();
                t.commands.add("imageResize", e);
                t.editing.downcastDispatcher.on("insert:image", (i, n, o) => {
                    const r = o.mapper.toViewElement(n.item);
                    const s = t.plugins.get(Uy).attachTo({
                        unit: t.config.get("image.resizeUnit") || "%",
                        modelElement: n.item,
                        viewElement: r,
                        editor: t,
                        getHandleHost(t) {
                            return t.querySelector("img")
                        },
                        getResizeHost(t) {
                            return t
                        },
                        isCentered() {
                            const t = n.item.getAttribute("imageStyle");
                            return !t || t == "full" || t == "alignCenter"
                        },
                        onCommit(e) {
                            t.execute("imageResize", {width: e})
                        }
                    });
                    s.on("updateSize", () => {
                        if (!r.hasClass("image_resized")) {
                            t.editing.view.change(t => {
                                t.addClass("image_resized", r)
                            })
                        }
                    });
                    s.bind("isEnabled").to(e)
                }, {priority: "low"})
            }

            _registerSchema() {
                this.editor.model.schema.extend("image", {allowAttributes: "width"})
            }

            _registerConverters() {
                const t = this.editor;
                t.conversion.for("downcast").add(t => t.on("attribute:width:image", (t, e, i) => {
                    if (!i.consumable.consume(e.item, t.name)) {
                        return
                    }
                    const n = i.writer;
                    const o = i.mapper.toViewElement(e.item);
                    if (e.attributeNewValue !== null) {
                        n.setStyle("width", e.attributeNewValue, o);
                        n.addClass("image_resized", o)
                    } else {
                        n.removeStyle("width", o);
                        n.removeClass("image_resized", o)
                    }
                }));
                t.conversion.for("upcast").attributeToAttribute({
                    view: {name: "figure", styles: {width: /.+/}},
                    model: {key: "width", value: t => t.getStyle("width")}
                })
            }
        }

        class Jy extends Gp {
            constructor(t) {
                super(t);
                this.buttonView = new hb(t);
                this._fileInputView = new Yy(t);
                this._fileInputView.bind("acceptedType").to(this);
                this._fileInputView.bind("allowMultipleFiles").to(this);
                this._fileInputView.delegate("done").to(this);
                this.setTemplate({
                    tag: "span",
                    attributes: {class: "ck-file-dialog-button"},
                    children: [this.buttonView, this._fileInputView]
                });
                this.buttonView.on("execute", () => {
                    this._fileInputView.open()
                })
            }

            focus() {
                this.buttonView.focus()
            }
        }

        class Yy extends Gp {
            constructor(t) {
                super(t);
                this.set("acceptedType");
                this.set("allowMultipleFiles", false);
                const e = this.bindTemplate;
                this.setTemplate({
                    tag: "input",
                    attributes: {
                        class: ["ck-hidden"],
                        type: "file",
                        tabindex: "-1",
                        accept: e.to("acceptedType"),
                        multiple: e.to("allowMultipleFiles")
                    },
                    on: {
                        change: e.to(() => {
                            if (this.element && this.element.files && this.element.files.length) {
                                this.fire("done", this.element.files)
                            }
                            this.element.value = ""
                        })
                    }
                })
            }

            open() {
                this.element.click()
            }
        }

        var Qy = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M6.91 10.54c.26-.23.64-.21.88.03l3.36 3.14 2.23-2.06a.64.64 0 0 1 .87 0l2.52 2.97V4.5H3.2v10.12l3.71-4.08zm10.27-7.51c.6 0 1.09.47 1.09 1.05v11.84c0 .59-.49 1.06-1.09 1.06H2.79c-.6 0-1.09-.47-1.09-1.06V4.08c0-.58.49-1.05 1.1-1.05h14.38zm-5.22 5.56a1.96 1.96 0 1 1 3.4-1.96 1.96 1.96 0 0 1-3.4 1.96z"/></svg>';

        function Xy(t) {
            const e = t.map(t => t.replace("+", "\\+"));
            return new RegExp(`^image\\/(${e.join("|")})$`)
        }

        function Zy(t) {
            return new Promise((e, i) => {
                const n = t.getAttribute("src");
                fetch(n).then(t => t.blob()).then(t => {
                    const o = ex(t, n);
                    const r = o.replace("image/", "");
                    const s = `image.${r}`;
                    const a = ix(t, s, o);
                    a ? e(a) : i()
                }).catch(i)
            })
        }

        function tx(t) {
            if (!t.is("element", "img") || !t.getAttribute("src")) {
                return false
            }
            return t.getAttribute("src").match(/^data:image\/\w+;base64,/g) || t.getAttribute("src").match(/^blob:/g)
        }

        function ex(t, e) {
            if (t.type) {
                return t.type
            } else if (e.match(/data:(image\/\w+);base64/)) {
                return e.match(/data:(image\/\w+);base64/)[1].toLowerCase()
            } else {
                return "image/jpeg"
            }
        }

        function ix(t, e, i) {
            try {
                return new File([t], e, {type: i})
            } catch (t) {
                return null
            }
        }

        class nx extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add("imageUpload", i => {
                    const n = new Jy(i);

                    // kbalashev  (image upload button fix)
                    Object.defineProperty(n.buttonView, 'isEnabled', {
                        get: () => true
                    });

                    const o = t.commands.get("imageUpload");
                    const r = t.config.get("image.upload.types");
                    const s = Xy(r);
                    n.set({acceptedType: r.map(t => `image/${t}`).join(","), allowMultipleFiles: true});
                    n.buttonView.set({label: e("kd"), icon: Qy, tooltip: true});
                    n.buttonView.bind("isEnabled").to(o);
                    n.on("done", (e, i) => {
                        const n = Array.from(i).filter(t => s.test(t.type));
                        if (n.length) {
                            t.execute("imageUpload", {file: n})
                        }
                    });
                    return n
                })
            }
        }

        var ox = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 700 250"><rect rx="4"/></svg>';
        var rx = i(74);
        var sx = i(76);
        var ax = i(78);

        class cx extends mp {
            constructor(t) {
                super(t);
                this.placeholder = "data:image/svg+xml;utf8," + encodeURIComponent(ox)
            }

            init() {
                const t = this.editor;
                t.editing.downcastDispatcher.on("attribute:uploadStatus:image", (...t) => this.uploadStatusChange(...t))
            }

            uploadStatusChange(t, e, i) {
                const n = this.editor;
                const o = e.item;
                const r = o.getAttribute("uploadId");
                if (!i.consumable.consume(e.item, t.name)) {
                    return
                }
                const s = n.plugins.get(lk);
                const a = r ? e.attributeNewValue : null;
                const c = this.placeholder;
                const l = n.editing.mapper.toViewElement(o);
                const d = i.writer;
                if (a == "reading") {
                    lx(l, d);
                    ux(c, l, d);
                    return
                }
                if (a == "uploading") {
                    const t = s.loaders.get(r);
                    lx(l, d);
                    if (!t) {
                        ux(c, l, d)
                    } else {
                        hx(l, d);
                        fx(l, d, t, n.editing.view);
                        _x(l, d, t)
                    }
                    return
                }
                if (a == "complete" && s.loaders.get(r) && !Al.isEdge) {
                    mx(l, d, n.editing.view)
                }
                gx(l, d);
                hx(l, d);
                dx(l, d)
            }
        }

        function lx(t, e) {
            if (!t.hasClass("ck-appear")) {
                e.addClass("ck-appear", t)
            }
        }

        function dx(t, e) {
            e.removeClass("ck-appear", t)
        }

        function ux(t, e, i) {
            if (!e.hasClass("ck-image-upload-placeholder")) {
                i.addClass("ck-image-upload-placeholder", e)
            }
            const n = Av(e);
            if (n.getAttribute("src") !== t) {
                i.setAttribute("src", t, n)
            }
            if (!wx(e, "placeholder")) {
                i.insert(i.createPositionAfter(n), bx(i))
            }
        }

        function hx(t, e) {
            if (t.hasClass("ck-image-upload-placeholder")) {
                e.removeClass("ck-image-upload-placeholder", t)
            }
            kx(t, e, "placeholder")
        }

        function fx(t, e, i, n) {
            const o = px(e);
            e.insert(e.createPositionAt(t, "end"), o);
            i.on("change:uploadedPercent", (t, e, i) => {
                n.change(t => {
                    t.setStyle("width", i + "%", o)
                })
            })
        }

        function gx(t, e) {
            kx(t, e, "progressBar")
        }

        function mx(t, e, i) {
            const n = e.createUIElement("div", {class: "ck-image-upload-complete-icon"});
            e.insert(e.createPositionAt(t, "end"), n);
            setTimeout(() => {
                i.change(t => t.remove(t.createRangeOn(n)))
            }, 3e3)
        }

        function px(t) {
            const e = t.createUIElement("div", {class: "ck-progress-bar"});
            t.setCustomProperty("progressBar", true, e);
            return e
        }

        function bx(t) {
            const e = t.createUIElement("div", {class: "ck-upload-placeholder-loader"});
            t.setCustomProperty("placeholder", true, e);
            return e
        }

        function wx(t, e) {
            for (const i of t.getChildren()) {
                if (i.getCustomProperty(e)) {
                    return i
                }
            }
        }

        function kx(t, e, i) {
            const n = wx(t, i);
            if (n) {
                e.remove(e.createRangeOn(n))
            }
        }

        function _x(t, e, i) {
            if (i.data) {
                const n = Av(t);
                e.setAttribute("src", i.data, n)
            }
        }

        class vx extends sk {
            static get pluginName() {
                return "Notification"
            }

            init() {
                this.on("show:warning", (t, e) => {
                    window.alert(e.message)
                }, {priority: "lowest"})
            }

            showSuccess(t, e = {}) {
                this._showNotification({message: t, type: "success", namespace: e.namespace, title: e.title})
            }

            showInfo(t, e = {}) {
                this._showNotification({message: t, type: "info", namespace: e.namespace, title: e.title})
            }

            showWarning(t, e = {}) {
                this._showNotification({message: t, type: "warning", namespace: e.namespace, title: e.title})
            }

            _showNotification(t) {
                const e = `show:${t.type}` + (t.namespace ? `:${t.namespace}` : "");
                this.fire(e, {message: t.message, type: t.type, title: t.title || ""})
            }
        }

        class yx {
            constructor(t) {
                this.files = xx(t);
                this._native = t
            }

            get types() {
                return this._native.types
            }

            getData(t) {
                return this._native.getData(t)
            }

            setData(t, e) {
                this._native.setData(t, e)
            }
        }

        function xx(t) {
            const e = t.files ? Array.from(t.files) : [];
            const i = t.items ? Array.from(t.items) : [];
            if (e.length) {
                return e
            }
            return i.filter(t => t.kind === "file").map(t => t.getAsFile())
        }

        class Cx extends Ju {
            constructor(t) {
                super(t);
                const e = this.document;
                this.domEventType = ["paste", "copy", "cut", "drop", "dragover"];
                this.listenTo(e, "paste", i, {priority: "low"});
                this.listenTo(e, "drop", i, {priority: "low"});

                function i(t, i) {
                    i.preventDefault();
                    const n = i.dropRange ? [i.dropRange] : Array.from(e.selection.getRanges());
                    const o = new ts(e, "clipboardInput");
                    e.fire(o, {dataTransfer: i.dataTransfer, targetRanges: n});
                    if (o.stop.called) {
                        i.stopPropagation()
                    }
                }
            }

            onDomEvent(t) {
                const e = {dataTransfer: new yx(t.clipboardData ? t.clipboardData : t.dataTransfer)};
                if (t.type == "drop") {
                    e.dropRange = Ax(this.view, t)
                }
                this.fire(t.type, t, e)
            }
        }

        function Ax(t, e) {
            const i = e.target.ownerDocument;
            const n = e.clientX;
            const o = e.clientY;
            let r;
            if (i.caretRangeFromPoint && i.caretRangeFromPoint(n, o)) {
                r = i.caretRangeFromPoint(n, o)
            } else if (e.rangeParent) {
                r = i.createRange();
                r.setStart(e.rangeParent, e.rangeOffset);
                r.collapse(true)
            }
            if (r) {
                return t.domConverter.domRangeToView(r)
            } else {
                return t.document.selection.getFirstRange()
            }
        }

        function Tx(t) {
            t = t.replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\n/g, "</p><p>").replace(/^\s/, "&nbsp;").replace(/\s$/, "&nbsp;").replace(/\s\s/g, " &nbsp;");
            if (t.indexOf("</p><p>") > -1) {
                t = `<p>${t}</p>`
            }
            return t
        }

        function Px(t) {
            return t.replace(/<span(?: class="Apple-converted-space"|)>(\s+)<\/span>/g, (t, e) => {
                if (e.length == 1) {
                    return " "
                }
                return e
            })
        }

        const Sx = ["figcaption", "li"];

        function Ex(t) {
            let e = "";
            if (t.is("text") || t.is("textProxy")) {
                e = t.data
            } else if (t.is("img") && t.hasAttribute("alt")) {
                e = t.getAttribute("alt")
            } else {
                let i = null;
                for (const n of t.getChildren()) {
                    const t = Ex(n);
                    if (i && (i.is("containerElement") || n.is("containerElement"))) {
                        if (Sx.includes(i.name) || Sx.includes(n.name)) {
                            e += "\n"
                        } else {
                            e += "\n\n"
                        }
                    }
                    e += t;
                    i = n
                }
            }
            return e
        }

        class Rx extends mp {
            static get pluginName() {
                return "Clipboard"
            }

            init() {
                const t = this.editor;
                const e = t.model.document;
                const i = t.editing.view;
                const n = i.document;
                this._htmlDataProcessor = new gp(n);
                i.addObserver(Cx);
                this.listenTo(n, "clipboardInput", e => {
                    if (t.isReadOnly) {
                        e.stop()
                    }
                }, {priority: "highest"});
                this.listenTo(n, "clipboardInput", (t, e) => {
                    const n = e.dataTransfer;
                    let o = "";
                    if (n.getData("text/html")) {
                        o = Px(n.getData("text/html"))
                    } else if (n.getData("text/plain")) {
                        o = Tx(n.getData("text/plain"))
                    }
                    o = this._htmlDataProcessor.toView(o);
                    this.fire("inputTransformation", {content: o, dataTransfer: n});
                    i.scrollToTheSelection()
                }, {priority: "low"});
                this.listenTo(this, "inputTransformation", (t, e) => {
                    if (!e.content.isEmpty) {
                        const t = this.editor.data;
                        const i = this.editor.model;
                        const n = t.toModel(e.content, "$clipboardHolder");
                        if (n.childCount == 0) {
                            return
                        }
                        i.insertContent(n)
                    }
                }, {priority: "low"});

                function o(i, o) {
                    const r = o.dataTransfer;
                    o.preventDefault();
                    const s = t.data.toView(t.model.getSelectedContent(e.selection));
                    n.fire("clipboardOutput", {dataTransfer: r, content: s, method: i.name})
                }

                this.listenTo(n, "copy", o, {priority: "low"});
                this.listenTo(n, "cut", (e, i) => {
                    if (t.isReadOnly) {
                        i.preventDefault()
                    } else {
                        o(e, i)
                    }
                }, {priority: "low"});
                this.listenTo(n, "clipboardOutput", (i, n) => {
                    if (!n.content.isEmpty) {
                        n.dataTransfer.setData("text/html", this._htmlDataProcessor.toData(n.content));
                        n.dataTransfer.setData("text/plain", Ex(n.content))
                    }
                    if (n.method == "cut") {
                        t.model.deleteContent(e.selection)
                    }
                }, {priority: "low"})
            }
        }

        class Ox {
            constructor(t) {
                this.document = t
            }

            createDocumentFragment(t) {
                return new ql(this.document, t)
            }

            createElement(t, e, i) {
                return new zc(this.document, t, e, i)
            }

            createText(t) {
                return new Ls(this.document, t)
            }

            clone(t, e = false) {
                return t._clone(e)
            }

            appendChild(t, e) {
                return e._appendChild(t)
            }

            insertChild(t, e, i) {
                return i._insertChild(t, e)
            }

            removeChildren(t, e, i) {
                return i._removeChildren(t, e)
            }

            remove(t) {
                const e = t.parent;
                if (e) {
                    return this.removeChildren(e.getChildIndex(t), 1, e)
                }
                return []
            }

            replace(t, e) {
                const i = t.parent;
                if (i) {
                    const n = i.getChildIndex(t);
                    this.removeChildren(n, 1, i);
                    this.insertChild(n, e, i);
                    return true
                }
                return false
            }

            unwrapElement(t) {
                const e = t.parent;
                if (e) {
                    const i = e.getChildIndex(t);
                    this.remove(t);
                    this.insertChild(i, t.getChildren(), e)
                }
            }

            rename(t, e) {
                const i = new zc(this.document, t, e.getAttributes(), e.getChildren());
                return this.replace(e, i) ? i : null
            }

            setAttribute(t, e, i) {
                i._setAttribute(t, e)
            }

            removeAttribute(t, e) {
                e._removeAttribute(t)
            }

            addClass(t, e) {
                e._addClass(t)
            }

            removeClass(t, e) {
                e._removeClass(t)
            }

            setStyle(t, e, i) {
                if (N(t) && i === undefined) {
                    i = e
                }
                i._setStyle(t, e)
            }

            removeStyle(t, e) {
                e._removeStyle(t)
            }

            setCustomProperty(t, e, i) {
                i._setCustomProperty(t, e)
            }

            removeCustomProperty(t, e) {
                return e._removeCustomProperty(t)
            }

            createPositionAt(t, e) {
                return dl._createAt(t, e)
            }

            createPositionAfter(t) {
                return dl._createAfter(t)
            }

            createPositionBefore(t) {
                return dl._createBefore(t)
            }

            createRange(t, e) {
                return new ul(t, e)
            }

            createRangeOn(t) {
                return ul._createOn(t)
            }

            createRangeIn(t) {
                return ul._createIn(t)
            }

            createSelection(t, e, i) {
                return new gl(t, e, i)
            }
        }

        class Ix extends jw {
            refresh() {
                this.isEnabled = Cv(this.editor.model)
            }

            execute(t) {
                const e = this.editor;

                // kbalashev  (image upload button fix)
                e.model.deleteContent(e.model.document.selection   );

                const i = e.model;
                const n = e.plugins.get(lk);
                i.change(e => {
                    const o = Array.isArray(t.file) ? t.file : [t.file];
                    for (const t of o) {
                        Vx(e, i, n, t)
                    }
                })
            }
        }

        function Vx(t, e, i, n) {
            const o = i.createLoader(n);
            if (!o) {
                return
            }
            xv(t, e, {uploadId: o.id})
        }

        class Nx extends mp {
            static get requires() {
                return [lk, vx, Rx]
            }

            static get pluginName() {
                return "ImageUploadEditing"
            }

            constructor(t) {
                super(t);
                t.config.define("image", {upload: {types: ["jpeg", "png", "gif", "bmp", "webp", "tiff"]}})
            }

            init() {
                const t = this.editor;
                const e = t.model.document;
                const i = t.model.schema;
                const n = t.conversion;
                const o = t.plugins.get(lk);
                const r = Xy(t.config.get("image.upload.types"));
                i.extend("image", {allowAttributes: ["uploadId", "uploadStatus"]});
                t.commands.add("imageUpload", new Ix(t));
                n.for("upcast").attributeToAttribute({view: {name: "img", key: "uploadId"}, model: "uploadId"});
                this.listenTo(t.editing.view.document, "clipboardInput", (e, i) => {
                    if (Mx(i.dataTransfer)) {
                        return
                    }
                    const n = Array.from(i.dataTransfer.files).filter(t => {
                        if (!t) {
                            return false
                        }
                        return r.test(t.type)
                    });
                    const o = i.targetRanges.map(e => t.editing.mapper.toModelRange(e));
                    t.model.change(i => {
                        i.setSelection(o);
                        if (n.length) {
                            e.stop();
                            t.model.enqueueChange("default", () => {
                                t.execute("imageUpload", {file: n})
                            })
                        }
                    })
                });
                this.listenTo(t.plugins.get(Rx), "inputTransformation", (e, i) => {
                    const n = Array.from(t.editing.view.createRangeIn(i.content)).filter(t => tx(t.item) && !t.item.getAttribute("uploadProcessed")).map(t => ({
                        promise: Zy(t.item),
                        imageElement: t.item
                    }));
                    if (!n.length) {
                        return
                    }
                    const r = new Ox(t.editing.view.document);
                    for (const t of n) {
                        r.setAttribute("uploadProcessed", true, t.imageElement);
                        const e = o.createLoader(t.promise);
                        if (e) {
                            r.setAttribute("src", "", t.imageElement);
                            r.setAttribute("uploadId", e.id, t.imageElement)
                        }
                    }
                });
                t.editing.view.document.on("dragover", (t, e) => {
                    e.preventDefault()
                });
                e.on("change", () => {
                    const i = e.differ.getChanges({includeChangesInGraveyard: true});
                    for (const e of i) {
                        if (e.type == "insert" && e.name != "$text") {
                            const i = e.position.nodeAfter;
                            const n = e.position.root.rootName == "$graveyard";
                            for (const e of Bx(t, i)) {
                                const t = e.getAttribute("uploadId");
                                if (!t) {
                                    continue
                                }
                                const i = o.loaders.get(t);
                                if (!i) {
                                    continue
                                }
                                if (n) {
                                    i.abort()
                                } else if (i.status == "idle") {
                                    this._readAndUpload(i, e)
                                }
                            }
                        }
                    }
                })
            }

            _readAndUpload(t, e) {
                const i = this.editor;
                const n = i.model;
                const o = i.locale.t;
                const r = i.plugins.get(lk);
                const s = i.plugins.get(vx);
                n.enqueueChange("transparent", t => {
                    t.setAttribute("uploadStatus", "reading", e)
                });
                return t.read().then(() => {
                    const o = t.upload();
                    if (Al.isSafari) {
                        const t = i.editing.mapper.toViewElement(e);
                        const n = Av(t);
                        i.editing.view.once("render", () => {
                            if (!n.parent) {
                                return
                            }
                            const t = i.editing.view.domConverter.mapViewToDom(n.parent);
                            if (!t) {
                                return
                            }
                            const e = t.style.display;
                            t.style.display = "none";
                            t._ckHack = t.offsetHeight;
                            t.style.display = e
                        })
                    }
                    n.enqueueChange("transparent", t => {
                        t.setAttribute("uploadStatus", "uploading", e)
                    });
                    return o
                }).then(t => {
                    n.enqueueChange("transparent", i => {
                        i.setAttributes({uploadStatus: "complete", src: t.default}, e);
                        this._parseAndSetSrcsetAttributeOnImage(t, e, i)
                    });
                    a()
                }).catch(i => {
                    if (t.status !== "error" && t.status !== "aborted") {
                        throw i
                    }
                    if (t.status == "error" && i) {
                        s.showWarning(i, {title: o("ke"), namespace: "upload"})
                    }
                    a();
                    n.enqueueChange("transparent", t => {
                        t.remove(e)
                    })
                });

                function a() {
                    n.enqueueChange("transparent", t => {
                        t.removeAttribute("uploadId", e);
                        t.removeAttribute("uploadStatus", e)
                    });
                    r.destroyLoader(t)
                }
            }

            _parseAndSetSrcsetAttributeOnImage(t, e, i) {
                let n = 0;
                const o = Object.keys(t).filter(t => {
                    const e = parseInt(t, 10);
                    if (!isNaN(e)) {
                        n = Math.max(n, e);
                        return true
                    }
                }).map(e => `${t[e]} ${e}w`).join(", ");
                if (o != "") {
                    i.setAttribute("srcset", {data: o, width: n}, e)
                }
            }
        }

        function Mx(t) {
            return Array.from(t.types).includes("text/html") && t.getData("text/html") !== ""
        }

        function Bx(t, e) {
            return Array.from(t.model.createRangeOn(e)).filter(t => t.item.is("image")).map(t => t.item)
        }

        class zx extends mp {
            static get pluginName() {
                return "ImageUpload"
            }

            static get requires() {
                return [Nx, nx, cx]
            }
        }

        class Lx extends jw {
            constructor(t) {
                super(t);
                this._childCommands = []
            }

            refresh() {
            }

            execute(...t) {
                const e = this._getFirstEnabledCommand();
                e.execute(t)
            }

            registerChildCommand(t) {
                this._childCommands.push(t);
                t.on("change:isEnabled", () => this._checkEnabled());
                this._checkEnabled()
            }

            _checkEnabled() {
                this.isEnabled = !!this._getFirstEnabledCommand()
            }

            _getFirstEnabledCommand() {
                return this._childCommands.find(t => t.isEnabled)
            }
        }

        class Fx extends mp {
            static get pluginName() {
                return "IndentEditing"
            }

            init() {
                const t = this.editor;
                t.commands.add("indent", new Lx(t));
                t.commands.add("outdent", new Lx(t))
            }
        }

        var Dx = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm5 6c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM2.75 16.5h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 1 0 0 1.5zM1.632 6.95L5.02 9.358a.4.4 0 0 1-.013.661l-3.39 2.207A.4.4 0 0 1 1 11.892V7.275a.4.4 0 0 1 .632-.326z"/></svg>';
        var jx = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2 3.75c0 .414.336.75.75.75h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 0 0-.75.75zm5 6c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM2.75 16.5h14.5a.75.75 0 1 0 0-1.5H2.75a.75.75 0 1 0 0 1.5zm1.618-9.55L.98 9.358a.4.4 0 0 0 .013.661l3.39 2.207A.4.4 0 0 0 5 11.892V7.275a.4.4 0 0 0-.632-.326z"/></svg>';

        class Hx extends mp {
            static get pluginName() {
                return "IndentUI"
            }

            init() {
                const t = this.editor;
                const e = t.locale;
                const i = t.t;
                const n = e.uiLanguageDirection == "ltr" ? Dx : jx;
                const o = e.uiLanguageDirection == "ltr" ? jx : Dx;
                this._defineButton("indent", i("jg"), n);
                this._defineButton("outdent", i("jh"), o)
            }

            _defineButton(t, e, i) {
                const n = this.editor;
                n.ui.componentFactory.add(t, o => {
                    const r = n.commands.get(t);
                    const s = new hb(o);
                    s.set({label: e, icon: i, tooltip: true});
                    s.bind("isOn", "isEnabled").to(r, "value", "isEnabled");
                    this.listenTo(s, "execute", () => {
                        n.execute(t);
                        n.editing.view.focus()
                    });
                    return s
                })
            }
        }

        class Wx extends mp {
            static get pluginName() {
                return "Indent"
            }

            static get requires() {
                return [Fx, Hx]
            }
        }

        class qx extends jw {
            constructor(t, e) {
                super(t);
                this._indentBehavior = e
            }

            refresh() {
                const t = this.editor;
                const e = t.model;
                const i = Ww(e.document.selection.getSelectedBlocks());
                if (!i || !e.schema.checkAttribute(i, "blockIndent")) {
                    this.isEnabled = false;
                    return
                }
                this.isEnabled = this._indentBehavior.checkEnabled(i.getAttribute("blockIndent"))
            }

            execute() {
                const t = this.editor.model;
                const e = Ux(t);
                t.change(t => {
                    for (const i of e) {
                        const e = i.getAttribute("blockIndent");
                        const n = this._indentBehavior.getNextIndent(e);
                        if (n) {
                            t.setAttribute("blockIndent", n, i)
                        } else {
                            t.removeAttribute("blockIndent", i)
                        }
                    }
                })
            }
        }

        function Ux(t) {
            const e = t.document.selection;
            const i = t.schema;
            const n = Array.from(e.getSelectedBlocks());
            return n.filter(t => i.checkAttribute(t, "blockIndent"))
        }

        class $x {
            constructor(t) {
                this.isForward = t.direction === "forward";
                this.offset = t.offset;
                this.unit = t.unit
            }

            checkEnabled(t) {
                const e = parseFloat(t || 0);
                return this.isForward || e > 0
            }

            getNextIndent(t) {
                const e = parseFloat(t || 0);
                const i = !t || t.endsWith(this.unit);
                if (!i) {
                    return this.isForward ? this.offset + this.unit : undefined
                }
                const n = this.isForward ? this.offset : -this.offset;
                const o = e + n;
                return o > 0 ? o + this.unit : undefined
            }
        }

        class Gx {
            constructor(t) {
                this.isForward = t.direction === "forward";
                this.classes = t.classes
            }

            checkEnabled(t) {
                const e = this.classes.indexOf(t);
                if (this.isForward) {
                    return e < this.classes.length - 1
                } else {
                    return e >= 0
                }
            }

            getNextIndent(t) {
                const e = this.classes.indexOf(t);
                const i = this.isForward ? 1 : -1;
                return this.classes[e + i]
            }
        }

        const Kx = /^#([0-9a-f]{3,4}|[0-9a-f]{6}|[0-9a-f]{8})$/i;
        const Jx = /^rgb\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}[0-9]{1,3}[ %]?\)$/i;
        const Yx = /^rgba\([ ]?([0-9]{1,3}[ %]?,[ ]?){3}(1|[0-9]+%|[0]?\.?[0-9]+)\)$/i;
        const Qx = /^hsl\([ ]?([0-9]{1,3}[ %]?[,]?[ ]*){3}(1|[0-9]+%|[0]?\.?[0-9]+)?\)$/i;
        const Xx = /^hsla\([ ]?([0-9]{1,3}[ %]?,[ ]?){2,3}(1|[0-9]+%|[0]?\.?[0-9]+)\)$/i;
        const Zx = new Set(["black", "silver", "gray", "white", "maroon", "red", "purple", "fuchsia", "green", "lime", "olive", "yellow", "navy", "blue", "teal", "aqua", "orange", "aliceblue", "antiquewhite", "aquamarine", "azure", "beige", "bisque", "blanchedalmond", "blueviolet", "brown", "burlywood", "cadetblue", "chartreuse", "chocolate", "coral", "cornflowerblue", "cornsilk", "crimson", "cyan", "darkblue", "darkcyan", "darkgoldenrod", "darkgray", "darkgreen", "darkgrey", "darkkhaki", "darkmagenta", "darkolivegreen", "darkorange", "darkorchid", "darkred", "darksalmon", "darkseagreen", "darkslateblue", "darkslategray", "darkslategrey", "darkturquoise", "darkviolet", "deeppink", "deepskyblue", "dimgray", "dimgrey", "dodgerblue", "firebrick", "floralwhite", "forestgreen", "gainsboro", "ghostwhite", "gold", "goldenrod", "greenyellow", "grey", "honeydew", "hotpink", "indianred", "indigo", "ivory", "khaki", "lavender", "lavenderblush", "lawngreen", "lemonchiffon", "lightblue", "lightcoral", "lightcyan", "lightgoldenrodyellow", "lightgray", "lightgreen", "lightgrey", "lightpink", "lightsalmon", "lightseagreen", "lightskyblue", "lightslategray", "lightslategrey", "lightsteelblue", "lightyellow", "limegreen", "linen", "magenta", "mediumaquamarine", "mediumblue", "mediumorchid", "mediumpurple", "mediumseagreen", "mediumslateblue", "mediumspringgreen", "mediumturquoise", "mediumvioletred", "midnightblue", "mintcream", "mistyrose", "moccasin", "navajowhite", "oldlace", "olivedrab", "orangered", "orchid", "palegoldenrod", "palegreen", "paleturquoise", "palevioletred", "papayawhip", "peachpuff", "peru", "pink", "plum", "powderblue", "rosybrown", "royalblue", "saddlebrown", "salmon", "sandybrown", "seagreen", "seashell", "sienna", "skyblue", "slateblue", "slategray", "slategrey", "snow", "springgreen", "steelblue", "tan", "thistle", "tomato", "turquoise", "violet", "wheat", "whitesmoke", "yellowgreen", "rebeccapurple", "currentcolor", "transparent"]);

        function tC(t) {
            if (t.startsWith("#")) {
                return Kx.test(t)
            }
            if (t.startsWith("rgb")) {
                return Jx.test(t) || Yx.test(t)
            }
            if (t.startsWith("hsl")) {
                return Qx.test(t) || Xx.test(t)
            }
            return Zx.has(t.toLowerCase())
        }

        const eC = ["none", "hidden", "dotted", "dashed", "solid", "double", "groove", "ridge", "inset", "outset"];

        function iC(t) {
            return eC.includes(t)
        }

        const nC = /^([+-]?[0-9]*[.]?[0-9]+(px|cm|mm|in|pc|pt|ch|em|ex|rem|vh|vw|vmin|vmax)|0)$/;

        function oC(t) {
            return nC.test(t)
        }

        const rC = /^[+-]?[0-9]*[.]?[0-9]+%$/;

        function sC(t) {
            return rC.test(t)
        }

        const aC = ["repeat-x", "repeat-y", "repeat", "space", "round", "no-repeat"];

        function cC(t) {
            return aC.includes(t)
        }

        const lC = ["center", "top", "bottom", "left", "right"];

        function dC(t) {
            return lC.includes(t)
        }

        const uC = ["fixed", "scroll", "local"];

        function hC(t) {
            return uC.includes(t)
        }

        const fC = /^url\(/;

        function gC(t) {
            return fC.test(t)
        }

        function mC(t = "") {
            if (t === "") {
                return {top: undefined, right: undefined, bottom: undefined, left: undefined}
            }
            const e = kC(t);
            const i = e[0];
            const n = e[2] || i;
            const o = e[1] || i;
            const r = e[3] || o;
            return {top: i, bottom: n, right: o, left: r}
        }

        function pC(t) {
            return e => {
                const {top: i, right: n, bottom: o, left: r} = e;
                const s = [];
                if (![i, n, r, o].every(t => !!t)) {
                    if (i) {
                        s.push([t + "-top", i])
                    }
                    if (n) {
                        s.push([t + "-right", n])
                    }
                    if (o) {
                        s.push([t + "-bottom", o])
                    }
                    if (r) {
                        s.push([t + "-left", r])
                    }
                } else {
                    s.push([t, bC(e)])
                }
                return s
            }
        }

        function bC({top: t, right: e, bottom: i, left: n}) {
            const o = [];
            if (n !== e) {
                o.push(t, e, i, n)
            } else if (i !== t) {
                o.push(t, e, i)
            } else if (e !== t) {
                o.push(t, e)
            } else {
                o.push(t)
            }
            return o.join(" ")
        }

        function wC(t) {
            return e => ({path: t, value: mC(e)})
        }

        function kC(t) {
            return t.replace(/, /g, ",").split(" ").map(t => t.replace(/,/g, ", "))
        }

        function _C(t) {
            t.setNormalizer("margin", wC("margin"));
            t.setNormalizer("margin-top", t => ({path: "margin.top", value: t}));
            t.setNormalizer("margin-right", t => ({path: "margin.right", value: t}));
            t.setNormalizer("margin-bottom", t => ({path: "margin.bottom", value: t}));
            t.setNormalizer("margin-left", t => ({path: "margin.left", value: t}));
            t.setReducer("margin", pC("margin"));
            t.setStyleRelation("margin", ["margin-top", "margin-right", "margin-bottom", "margin-left"])
        }

        class vC extends mp {
            constructor(t) {
                super(t);
                t.config.define("indentBlock", {offset: 40, unit: "px"})
            }

            static get pluginName() {
                return "IndentBlock"
            }

            init() {
                const t = this.editor;
                const e = t.config.get("indentBlock");
                const i = !e.classes || !e.classes.length;
                const n = Object.assign({direction: "forward"}, e);
                const o = Object.assign({direction: "backward"}, e);
                if (i) {
                    t.data.addStyleProcessorRules(_C);
                    this._setupConversionUsingOffset(t.conversion);
                    t.commands.add("indentBlock", new qx(t, new $x(n)));
                    t.commands.add("outdentBlock", new qx(t, new $x(o)))
                } else {
                    this._setupConversionUsingClasses(e.classes);
                    t.commands.add("indentBlock", new qx(t, new Gx(n)));
                    t.commands.add("outdentBlock", new qx(t, new Gx(o)))
                }
            }

            afterInit() {
                const t = this.editor;
                const e = t.model.schema;
                const i = t.commands.get("indent");
                const n = t.commands.get("outdent");
                const o = ["paragraph", "heading1", "heading2", "heading3", "heading4", "heading5", "heading6"];
                o.forEach(t => {
                    if (e.isRegistered(t)) {
                        e.extend(t, {allowAttributes: "blockIndent"})
                    }
                });
                i.registerChildCommand(t.commands.get("indentBlock"));
                n.registerChildCommand(t.commands.get("outdentBlock"))
            }

            _setupConversionUsingOffset() {
                const t = this.editor.conversion;
                const e = this.editor.locale;
                const i = e.contentLanguageDirection === "rtl" ? "margin-right" : "margin-left";
                t.for("upcast").attributeToAttribute({
                    view: {styles: {[i]: /[\s\S]+/}},
                    model: {key: "blockIndent", value: t => t.getStyle(i)}
                });
                t.for("downcast").attributeToAttribute({
                    model: "blockIndent",
                    view: t => ({key: "style", value: {[i]: t}})
                })
            }

            _setupConversionUsingClasses(t) {
                const e = {model: {key: "blockIndent", values: []}, view: {}};
                for (const i of t) {
                    e.model.values.push(i);
                    e.view[i] = {key: "class", value: [i]}
                }
                this.editor.conversion.attributeToAttribute(e)
            }
        }

        const yC = "italic";

        class xC extends mp {
            static get pluginName() {
                return "ItalicEditing"
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: yC});
                t.model.schema.setAttributeProperties(yC, {isFormatting: true, copyOnEnter: true});
                t.conversion.attributeToElement({
                    model: yC,
                    view: "i",
                    upcastAlso: ["em", {styles: {"font-style": "italic"}}]
                });
                t.commands.add(yC, new yk(t, yC));
                t.keystrokes.set("CTRL+I", yC)
            }
        }

        var CC = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.586 14.633l.021.004c-.036.335.095.655.393.962.082.083.173.15.274.201h1.474a.6.6 0 1 1 0 1.2H5.304a.6.6 0 0 1 0-1.2h1.15c.474-.07.809-.182 1.005-.334.157-.122.291-.32.404-.597l2.416-9.55a1.053 1.053 0 0 0-.281-.823 1.12 1.12 0 0 0-.442-.296H8.15a.6.6 0 0 1 0-1.2h6.443a.6.6 0 1 1 0 1.2h-1.195c-.376.056-.65.155-.823.296-.215.175-.423.439-.623.79l-2.366 9.347z"/></svg>';
        const AC = "italic";

        class TC extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add(AC, i => {
                    const n = t.commands.get(AC);
                    const o = new hb(i);
                    o.set({label: e("jj"), icon: CC, keystroke: "CTRL+I", tooltip: true, isToggleable: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute(AC);
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class PC extends mp {
            static get requires() {
                return [xC, TC]
            }

            static get pluginName() {
                return "Italic"
            }
        }

        function SC(t, e, i) {
            return i.createRange(EC(t, e, true, i), EC(t, e, false, i))
        }

        function EC(t, e, i, n) {
            let o = t.textNode || (i ? t.nodeBefore : t.nodeAfter);
            let r = null;
            while (o && o.getAttribute("linkHref") == e) {
                r = o;
                o = i ? o.previousSibling : o.nextSibling
            }
            return r ? n.createPositionAt(r, i ? "before" : "after") : t
        }

        class RC extends jw {
            constructor(t) {
                super(t);
                this.manualDecorators = new ys
            }

            restoreManualDecoratorStates() {
                for (const t of this.manualDecorators) {
                    t.value = this._getDecoratorStateFromModel(t.id)
                }
            }

            refresh() {
                const t = this.editor.model;
                const e = t.document;
                this.value = e.selection.getAttribute("linkHref");
                for (const t of this.manualDecorators) {
                    t.value = this._getDecoratorStateFromModel(t.id)
                }
                this.isEnabled = t.schema.checkAttributeInSelection(e.selection, "linkHref")
            }

            execute(t, e = {}) {
                const i = this.editor.model;
                const n = i.document.selection;
                const o = [];
                const r = [];
                for (const t in e) {
                    if (e[t]) {
                        o.push(t)
                    } else {
                        r.push(t)
                    }
                }
                i.change(e => {
                    if (n.isCollapsed) {
                        const s = n.getFirstPosition();
                        if (n.hasAttribute("linkHref")) {
                            const a = SC(s, n.getAttribute("linkHref"), i);
                            e.setAttribute("linkHref", t, a);
                            o.forEach(t => {
                                e.setAttribute(t, true, a)
                            });
                            r.forEach(t => {
                                e.removeAttribute(t, a)
                            });
                            e.setSelection(a)
                        } else if (t !== "") {
                            const r = Hs(n.getAttributes());
                            r.set("linkHref", t);
                            o.forEach(t => {
                                r.set(t, true)
                            });
                            const a = e.createText(t, r);
                            i.insertContent(a, s);
                            e.setSelection(e.createRangeOn(a))
                        }
                    } else {
                        const s = i.schema.getValidRanges(n.getRanges(), "linkHref");
                        for (const i of s) {
                            e.setAttribute("linkHref", t, i);
                            o.forEach(t => {
                                e.setAttribute(t, true, i)
                            });
                            r.forEach(t => {
                                e.removeAttribute(t, i)
                            })
                        }
                    }
                })
            }

            _getDecoratorStateFromModel(t) {
                const e = this.editor.model.document;
                return e.selection.getAttribute(t) || false
            }
        }

        class OC extends jw {
            refresh() {
                this.isEnabled = this.editor.model.document.selection.hasAttribute("linkHref")
            }

            execute() {
                const t = this.editor;
                const e = this.editor.model;
                const i = e.document.selection;
                const n = t.commands.get("link");
                e.change(t => {
                    const o = i.isCollapsed ? [SC(i.getFirstPosition(), i.getAttribute("linkHref"), e)] : i.getRanges();
                    for (const e of o) {
                        t.removeAttribute("linkHref", e);
                        if (n) {
                            for (const i of n.manualDecorators) {
                                t.removeAttribute(i.id, e)
                            }
                        }
                    }
                })
            }
        }

        function IC(t, e, i) {
            var n = t.length;
            i = i === undefined ? n : i;
            return !e && i >= n ? t : Oa(t, e, i)
        }

        var VC = IC;
        var NC = "\\ud800-\\udfff", MC = "\\u0300-\\u036f", BC = "\\ufe20-\\ufe2f", zC = "\\u20d0-\\u20ff",
            LC = MC + BC + zC, FC = "\\ufe0e\\ufe0f";
        var DC = "\\u200d";
        var jC = RegExp("[" + DC + NC + LC + FC + "]");

        function HC(t) {
            return jC.test(t)
        }

        var WC = HC;

        function qC(t) {
            return t.split("")
        }

        var UC = qC;
        var $C = "\\ud800-\\udfff", GC = "\\u0300-\\u036f", KC = "\\ufe20-\\ufe2f", JC = "\\u20d0-\\u20ff",
            YC = GC + KC + JC, QC = "\\ufe0e\\ufe0f";
        var XC = "[" + $C + "]", ZC = "[" + YC + "]", tA = "\\ud83c[\\udffb-\\udfff]", eA = "(?:" + ZC + "|" + tA + ")",
            iA = "[^" + $C + "]", nA = "(?:\\ud83c[\\udde6-\\uddff]){2}", oA = "[\\ud800-\\udbff][\\udc00-\\udfff]",
            rA = "\\u200d";
        var sA = eA + "?", aA = "[" + QC + "]?",
            cA = "(?:" + rA + "(?:" + [iA, nA, oA].join("|") + ")" + aA + sA + ")*", lA = aA + sA + cA,
            dA = "(?:" + [iA + ZC + "?", ZC, nA, oA, XC].join("|") + ")";
        var uA = RegExp(tA + "(?=" + tA + ")|" + dA + lA, "g");

        function hA(t) {
            return t.match(uA) || []
        }

        var fA = hA;

        function gA(t) {
            return WC(t) ? fA(t) : UC(t)
        }

        var mA = gA;

        function pA(t) {
            return function (e) {
                e = _a(e);
                var i = WC(e) ? mA(e) : undefined;
                var n = i ? i[0] : e.charAt(0);
                var o = i ? VC(i, 1).join("") : e.slice(1);
                return n[t]() + o
            }
        }

        var bA = pA;
        var wA = bA("toUpperCase");
        var kA = wA;
        const _A = /[\u0000-\u0020\u00A0\u1680\u180E\u2000-\u2029\u205f\u3000]/g;
        const vA = /^(?:(?:https?|ftps?|mailto):|[^a-z]|[a-z+.-]+(?:[^a-z+.:-]|$))/i;

        function yA(t) {
            return t.is("attributeElement") && !!t.getCustomProperty("link")
        }

        function xA(t, e) {
            const i = e.createAttributeElement("a", {href: t}, {priority: 5});
            e.setCustomProperty("link", true, i);
            return i
        }

        function CA(t) {
            t = String(t);
            return AA(t) ? t : "#"
        }

        function AA(t) {
            const e = t.replace(_A, "");
            return e.match(vA)
        }

        function TA(t, e) {
            const i = {"Open in a new tab": t("mm"), Downloadable: t("mn")};
            e.forEach(t => {
                if (t.label && i[t.label]) {
                    t.label = i[t.label]
                }
                return t
            });
            return e
        }

        function PA(t) {
            const e = [];
            if (t) {
                for (const [i, n] of Object.entries(t)) {
                    const t = Object.assign({}, n, {id: `link${kA(i)}`});
                    e.push(t)
                }
            }
            return e
        }

        class SA {
            constructor() {
                this._definitions = new Set
            }

            get length() {
                return this._definitions.size
            }

            add(t) {
                if (Array.isArray(t)) {
                    t.forEach(t => this._definitions.add(t))
                } else {
                    this._definitions.add(t)
                }
            }

            getDispatcher() {
                return t => {
                    t.on("attribute:linkHref", (t, e, i) => {
                        if (!i.consumable.test(e.item, "attribute:linkHref")) {
                            return
                        }
                        const n = i.writer;
                        const o = n.document.selection;
                        for (const t of this._definitions) {
                            const r = n.createAttributeElement("a", t.attributes, {priority: 5});
                            n.setCustomProperty("link", true, r);
                            if (t.callback(e.attributeNewValue)) {
                                if (e.item.is("selection")) {
                                    n.wrap(o.getFirstRange(), r)
                                } else {
                                    n.wrap(i.mapper.toViewRange(e.range), r)
                                }
                            } else {
                                n.unwrap(i.mapper.toViewRange(e.range), r)
                            }
                        }
                    }, {priority: "high"})
                }
            }
        }

        class EA {
            constructor({id: t, label: e, attributes: i}) {
                this.id = t;
                this.set("value");
                this.label = e;
                this.attributes = i
            }
        }

        vs(EA, Jc);

        function RA({view: t, model: e, emitter: i, attribute: n, locale: o}) {
            const r = new OA(e, i, n);
            const s = e.document.selection;
            i.listenTo(t.document, "keydown", (t, e) => {
                if (!s.isCollapsed) {
                    return
                }
                if (e.shiftKey || e.altKey || e.ctrlKey) {
                    return
                }
                const i = e.keyCode == Nl.arrowright;
                const n = e.keyCode == Nl.arrowleft;
                if (!i && !n) {
                    return
                }
                const a = s.getFirstPosition();
                const c = o.contentLanguageDirection;
                let l;
                if (c === "ltr" && i || c === "rtl" && n) {
                    l = r.handleForwardMovement(a, e)
                } else {
                    l = r.handleBackwardMovement(a, e)
                }
                if (l) {
                    t.stop()
                }
            }, {priority: os.get("high") + 1})
        }

        class OA {
            constructor(t, e, i) {
                this.model = t;
                this.attribute = i;
                this._modelSelection = t.document.selection;
                this._overrideUid = null;
                this._isNextGravityRestorationSkipped = false;
                e.listenTo(this._modelSelection, "change:range", (t, e) => {
                    if (this._isNextGravityRestorationSkipped) {
                        this._isNextGravityRestorationSkipped = false;
                        return
                    }
                    if (!this._isGravityOverridden) {
                        return
                    }
                    if (!e.directChange && IA(this._modelSelection.getFirstPosition(), i)) {
                        return
                    }
                    this._restoreGravity()
                })
            }

            handleForwardMovement(t, e) {
                const i = this.attribute;
                if (this._isGravityOverridden) {
                    return
                }
                if (t.isAtStart && this._hasSelectionAttribute) {
                    return
                }
                if (MA(t, i) && this._hasSelectionAttribute) {
                    this._preventCaretMovement(e);
                    this._removeSelectionAttribute();
                    return true
                }
                if (VA(t, i)) {
                    this._preventCaretMovement(e);
                    this._overrideGravity();
                    return true
                }
                if (NA(t, i) && this._hasSelectionAttribute) {
                    this._preventCaretMovement(e);
                    this._overrideGravity();
                    return true
                }
            }

            handleBackwardMovement(t, e) {
                const i = this.attribute;
                if (this._isGravityOverridden) {
                    if (MA(t, i) && this._hasSelectionAttribute) {
                        this._preventCaretMovement(e);
                        this._restoreGravity();
                        this._removeSelectionAttribute();
                        return true
                    } else {
                        this._preventCaretMovement(e);
                        this._restoreGravity();
                        if (t.isAtStart) {
                            this._removeSelectionAttribute()
                        }
                        return true
                    }
                } else {
                    if (MA(t, i) && !this._hasSelectionAttribute) {
                        this._preventCaretMovement(e);
                        this._setSelectionAttributeFromTheNodeBefore(t);
                        return true
                    }
                    if (t.isAtEnd && NA(t, i)) {
                        if (this._hasSelectionAttribute) {
                            if (BA(t, i)) {
                                this._skipNextAutomaticGravityRestoration();
                                this._overrideGravity()
                            }
                            return
                        } else {
                            this._preventCaretMovement(e);
                            this._setSelectionAttributeFromTheNodeBefore(t);
                            return true
                        }
                    }
                    if (t.isAtStart) {
                        if (this._hasSelectionAttribute) {
                            this._removeSelectionAttribute();
                            this._preventCaretMovement(e);
                            return true
                        }
                        return
                    }
                    if (BA(t, i)) {
                        this._skipNextAutomaticGravityRestoration();
                        this._overrideGravity()
                    }
                }
            }

            get _isGravityOverridden() {
                return !!this._overrideUid
            }

            get _hasSelectionAttribute() {
                return this._modelSelection.hasAttribute(this.attribute)
            }

            _overrideGravity() {
                this._overrideUid = this.model.change(t => t.overrideSelectionGravity())
            }

            _restoreGravity() {
                this.model.change(t => {
                    t.restoreSelectionGravity(this._overrideUid);
                    this._overrideUid = null
                })
            }

            _preventCaretMovement(t) {
                t.preventDefault()
            }

            _removeSelectionAttribute() {
                this.model.change(t => {
                    t.removeSelectionAttribute(this.attribute)
                })
            }

            _setSelectionAttributeFromTheNodeBefore(t) {
                const e = this.attribute;
                this.model.change(i => {
                    i.setSelectionAttribute(this.attribute, t.nodeBefore.getAttribute(e))
                })
            }

            _skipNextAutomaticGravityRestoration() {
                this._isNextGravityRestorationSkipped = true
            }
        }

        function IA(t, e) {
            return VA(t, e) || NA(t, e)
        }

        function VA(t, e) {
            const {nodeBefore: i, nodeAfter: n} = t;
            const o = i ? i.hasAttribute(e) : false;
            const r = n ? n.hasAttribute(e) : false;
            return r && (!o || i.getAttribute(e) !== n.getAttribute(e))
        }

        function NA(t, e) {
            const {nodeBefore: i, nodeAfter: n} = t;
            const o = i ? i.hasAttribute(e) : false;
            const r = n ? n.hasAttribute(e) : false;
            return o && (!r || i.getAttribute(e) !== n.getAttribute(e))
        }

        function MA(t, e) {
            const {nodeBefore: i, nodeAfter: n} = t;
            const o = i ? i.hasAttribute(e) : false;
            const r = n ? n.hasAttribute(e) : false;
            if (!r || !o) {
                return
            }
            return n.getAttribute(e) !== i.getAttribute(e)
        }

        function BA(t, e) {
            return IA(t.getShiftedBy(-1), e)
        }

        var zA = i(80);
        const LA = "ck-link_selected";
        const FA = "automatic";
        const DA = "manual";
        const jA = /^(https?:)?\/\//;

        class HA extends mp {
            static get pluginName() {
                return "LinkEditing"
            }

            constructor(t) {
                super(t);
                t.config.define("link", {addTargetToExternalLinks: false})
            }

            init() {
                const t = this.editor;
                const e = t.locale;
                t.model.schema.extend("$text", {allowAttributes: "linkHref"});
                t.conversion.for("dataDowncast").attributeToElement({model: "linkHref", view: xA});
                t.conversion.for("editingDowncast").attributeToElement({
                    model: "linkHref",
                    view: (t, e) => xA(CA(t), e)
                });
                t.conversion.for("upcast").elementToAttribute({
                    view: {name: "a", attributes: {href: true}},
                    model: {key: "linkHref", value: t => t.getAttribute("href")}
                });
                t.commands.add("link", new RC(t));
                t.commands.add("unlink", new OC(t));
                const i = TA(t.t, PA(t.config.get("link.decorators")));
                this._enableAutomaticDecorators(i.filter(t => t.mode === FA));
                this._enableManualDecorators(i.filter(t => t.mode === DA));
                RA({view: t.editing.view, model: t.model, emitter: this, attribute: "linkHref", locale: e});
                this._setupLinkHighlight()
            }

            _enableAutomaticDecorators(t) {
                const e = this.editor;
                const i = new SA;
                if (e.config.get("link.addTargetToExternalLinks")) {
                    i.add({
                        id: "linkIsExternal",
                        mode: FA,
                        callback: t => jA.test(t),
                        attributes: {target: "_blank", rel: "noopener noreferrer"}
                    })
                }
                i.add(t);
                if (i.length) {
                    e.conversion.for("downcast").add(i.getDispatcher())
                }
            }

            _enableManualDecorators(t) {
                if (!t.length) {
                    return
                }
                const e = this.editor;
                const i = e.commands.get("link");
                const n = i.manualDecorators;
                t.forEach(t => {
                    e.model.schema.extend("$text", {allowAttributes: t.id});
                    n.add(new EA(t));
                    e.conversion.for("downcast").attributeToElement({
                        model: t.id, view: (e, i) => {
                            if (e) {
                                const e = n.get(t.id).attributes;
                                const o = i.createAttributeElement("a", e, {priority: 5});
                                i.setCustomProperty("link", true, o);
                                return o
                            }
                        }
                    });
                    e.conversion.for("upcast").elementToAttribute({
                        view: {
                            name: "a",
                            attributes: n.get(t.id).attributes
                        }, model: {key: t.id}
                    })
                })
            }

            _setupLinkHighlight() {
                const t = this.editor;
                const e = t.editing.view;
                const i = new Set;
                e.document.registerPostFixer(e => {
                    const n = t.model.document.selection;
                    let o = false;
                    if (n.hasAttribute("linkHref")) {
                        const r = SC(n.getFirstPosition(), n.getAttribute("linkHref"), t.model);
                        const s = t.editing.mapper.toViewRange(r);
                        for (const t of s.getItems()) {
                            if (t.is("a") && !t.hasClass(LA)) {
                                e.addClass(LA, t);
                                i.add(t);
                                o = true
                            }
                        }
                    }
                    return o
                });
                t.conversion.for("editingDowncast").add(t => {
                    t.on("insert", n, {priority: "highest"});
                    t.on("remove", n, {priority: "highest"});
                    t.on("attribute", n, {priority: "highest"});
                    t.on("selection", n, {priority: "highest"});

                    function n() {
                        e.change(t => {
                            for (const e of i.values()) {
                                t.removeClass(LA, e);
                                i.delete(e)
                            }
                        })
                    }
                })
            }
        }

        class WA extends Ju {
            constructor(t) {
                super(t);
                this.domEventType = "click"
            }

            onDomEvent(t) {
                this.fire(t.type, t)
            }
        }

        var qA = i(82);

        class UA extends Gp {
            constructor(t, e = []) {
                super(t);
                const i = t.t;
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.urlInputView = this._createUrlInput();
                this.saveButtonView = this._createButton(i("lo"), Xv, "ck-button-save");
                this.saveButtonView.type = "submit";
                this.cancelButtonView = this._createButton(i("lp"), Zv, "ck-button-cancel", "cancel");
                this._manualDecoratorSwitches = this._createManualDecoratorSwitches(e);
                this.children = this._createFormChildren(e);
                this._focusables = new bp;
                this._focusCycler = new yb({
                    focusables: this._focusables,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "shift + tab", focusNext: "tab"}
                });
                const n = ["ck", "ck-link-form"];
                if (e.length) {
                    n.push("ck-link-form_layout-vertical")
                }
                this.setTemplate({tag: "form", attributes: {class: n, tabindex: "-1"}, children: this.children})
            }

            getDecoratorSwitchesState() {
                return Array.from(this._manualDecoratorSwitches).reduce((t, e) => {
                    t[e.name] = e.isOn;
                    return t
                }, {})
            }

            render() {
                super.render();
                Qv({view: this});
                const t = [this.urlInputView, ...this._manualDecoratorSwitches, this.saveButtonView, this.cancelButtonView];
                t.forEach(t => {
                    this._focusables.add(t);
                    this.focusTracker.add(t.element)
                });
                this.keystrokes.listenTo(this.element)
            }

            focus() {
                this._focusCycler.focusFirst()
            }

            _createUrlInput() {
                const t = this.locale.t;
                const e = new Kv(this.locale, Yv);
                e.label = t("lq");
                e.inputView.placeholder = "https://example.com";
                return e
            }

            _createButton(t, e, i, n) {
                const o = new hb(this.locale);
                o.set({label: t, icon: e, tooltip: true});
                o.extendTemplate({attributes: {class: i}});
                if (n) {
                    o.delegate("execute").to(this, n)
                }
                return o
            }

            _createManualDecoratorSwitches(t) {
                const e = this.createCollection();
                for (const i of t) {
                    const t = new Fb(this.locale);
                    t.set({name: i.id, label: i.label, withText: true});
                    t.bind("isOn").to(i, "value");
                    t.on("execute", () => {
                        i.set("value", !t.isOn)
                    });
                    e.add(t)
                }
                return e
            }

            _createFormChildren(t) {
                const e = this.createCollection();
                e.add(this.urlInputView);
                if (t.length) {
                    const t = new Gp;
                    t.setTemplate({
                        tag: "ul",
                        children: this._manualDecoratorSwitches.map(t => ({
                            tag: "li",
                            children: [t],
                            attributes: {class: ["ck", "ck-list__item"]}
                        })),
                        attributes: {class: ["ck", "ck-reset", "ck-list"]}
                    });
                    e.add(t)
                }
                e.add(this.saveButtonView);
                e.add(this.cancelButtonView);
                return e
            }
        }

        var $A = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184zm4.919 10.562l-1.414 1.414a.75.75 0 1 1-1.06-1.06l1.414-1.415-1.415-1.414a.75.75 0 0 1 1.061-1.06l1.414 1.414 1.414-1.415a.75.75 0 0 1 1.061 1.061l-1.414 1.414 1.414 1.415a.75.75 0 0 1-1.06 1.06l-1.415-1.414z"/></svg>';
        var GA = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7.3 17.37l-.061.088a1.518 1.518 0 0 1-.934.535l-4.178.663-.806-4.153a1.495 1.495 0 0 1 .187-1.058l.056-.086L8.77 2.639c.958-1.351 2.803-1.076 4.296-.03 1.497 1.047 2.387 2.693 1.433 4.055L7.3 17.37zM9.14 4.728l-5.545 8.346 3.277 2.294 5.544-8.346L9.14 4.728zM6.07 16.512l-3.276-2.295.53 2.73 2.746-.435zM9.994 3.506L13.271 5.8c.316-.452-.16-1.333-1.065-1.966-.905-.634-1.895-.78-2.212-.328zM8 18.5L9.375 17H19v1.5H8z"/></svg>';
        var KA = i(84);

        class JA extends Gp {
            constructor(t) {
                super(t);
                const e = t.t;
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.previewButtonView = this._createPreviewButton();
                this.unlinkButtonView = this._createButton(e("lk"), $A, "unlink");
                this.editButtonView = this._createButton(e("ll"), GA, "edit");
                this.set("href");
                this._focusables = new bp;
                this._focusCycler = new yb({
                    focusables: this._focusables,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "shift + tab", focusNext: "tab"}
                });
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-link-actions"], tabindex: "-1"},
                    children: [this.previewButtonView, this.editButtonView, this.unlinkButtonView]
                })
            }

            render() {
                super.render();
                const t = [this.previewButtonView, this.editButtonView, this.unlinkButtonView];
                t.forEach(t => {
                    this._focusables.add(t);
                    this.focusTracker.add(t.element)
                });
                this.keystrokes.listenTo(this.element)
            }

            focus() {
                this._focusCycler.focusFirst()
            }

            _createButton(t, e, i) {
                const n = new hb(this.locale);
                n.set({label: t, icon: e, tooltip: true});
                n.delegate("execute").to(this, i);
                return n
            }

            _createPreviewButton() {
                const t = new hb(this.locale);
                const e = this.bindTemplate;
                const i = this.t;
                t.set({withText: true, tooltip: i("lm")});
                t.extendTemplate({
                    attributes: {
                        class: ["ck", "ck-link-actions__preview"],
                        href: e.to("href", t => t && CA(t)),
                        target: "_blank",
                        rel: "noopener noreferrer"
                    }
                });
                t.bind("label").to(this, "href", t => t || i("ln"));
                t.bind("isEnabled").to(this, "href", t => !!t);
                t.template.tag = "a";
                t.template.eventListeners = {};
                return t
            }
        }

        var YA = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.077 15l.991-1.416a.75.75 0 1 1 1.229.86l-1.148 1.64a.748.748 0 0 1-.217.206 5.251 5.251 0 0 1-8.503-5.955.741.741 0 0 1 .12-.274l1.147-1.639a.75.75 0 1 1 1.228.86L4.933 10.7l.006.003a3.75 3.75 0 0 0 6.132 4.294l.006.004zm5.494-5.335a.748.748 0 0 1-.12.274l-1.147 1.639a.75.75 0 1 1-1.228-.86l.86-1.23a3.75 3.75 0 0 0-6.144-4.301l-.86 1.229a.75.75 0 0 1-1.229-.86l1.148-1.64a.748.748 0 0 1 .217-.206 5.251 5.251 0 0 1 8.503 5.955zm-4.563-2.532a.75.75 0 0 1 .184 1.045l-3.155 4.505a.75.75 0 1 1-1.229-.86l3.155-4.506a.75.75 0 0 1 1.045-.184z"/></svg>';
        const QA = "Ctrl+K";

        class XA extends mp {
            static get requires() {
                return [kb]
            }

            static get pluginName() {
                return "LinkUI"
            }

            init() {
                const t = this.editor;
                t.editing.view.addObserver(WA);
                this.actionsView = this._createActionsView();
                this.formView = this._createFormView();
                this._balloon = t.plugins.get(kb);
                this._createToolbarLinkButton();
                this._enableUserBalloonInteractions()
            }

            destroy() {
                super.destroy();
                this.formView.destroy()
            }

            _createActionsView() {
                const t = this.editor;
                const e = new JA(t.locale);
                const i = t.commands.get("link");
                const n = t.commands.get("unlink");
                e.bind("href").to(i, "value");
                e.editButtonView.bind("isEnabled").to(i);
                e.unlinkButtonView.bind("isEnabled").to(n);
                this.listenTo(e, "edit", () => {
                    this._addFormView()
                });
                this.listenTo(e, "unlink", () => {
                    t.execute("unlink");
                    this._hideUI()
                });
                e.keystrokes.set("Esc", (t, e) => {
                    this._hideUI();
                    e()
                });
                e.keystrokes.set(QA, (t, e) => {
                    this._addFormView();
                    e()
                });
                return e
            }

            _createFormView() {
                const t = this.editor;
                const e = t.commands.get("link");
                const i = new UA(t.locale, e.manualDecorators);
                i.urlInputView.bind("value").to(e, "value");
                i.urlInputView.bind("isReadOnly").to(e, "isEnabled", t => !t);
                i.saveButtonView.bind("isEnabled").to(e);
                this.listenTo(i, "submit", () => {
                    t.execute("link", i.urlInputView.inputView.element.value, i.getDecoratorSwitchesState());
                    this._closeFormView()
                });
                this.listenTo(i, "cancel", () => {
                    this._closeFormView()
                });
                i.keystrokes.set("Esc", (t, e) => {
                    this._closeFormView();
                    e()
                });
                return i
            }

            _createToolbarLinkButton() {
                const t = this.editor;
                const e = t.commands.get("link");
                const i = t.t;
                t.keystrokes.set(QA, (t, e) => {
                    e();
                    this._showUI(true)
                });
                t.ui.componentFactory.add("link", t => {
                    const n = new hb(t);
                    n.isEnabled = true;
                    n.label = i("lf");
                    n.icon = YA;
                    n.keystroke = QA;
                    n.tooltip = true;
                    n.isToggleable = true;
                    n.bind("isEnabled").to(e, "isEnabled");
                    n.bind("isOn").to(e, "value", t => !!t);
                    this.listenTo(n, "execute", () => this._showUI(true));
                    return n
                })
            }

            _enableUserBalloonInteractions() {
                const t = this.editor.editing.view.document;
                this.listenTo(t, "click", () => {
                    const t = this._getSelectedLinkElement();
                    if (t) {
                        this._showUI()
                    }
                });
                this.editor.keystrokes.set("Tab", (t, e) => {
                    if (this._areActionsVisible && !this.actionsView.focusTracker.isFocused) {
                        this.actionsView.focus();
                        e()
                    }
                }, {priority: "high"});
                this.editor.keystrokes.set("Esc", (t, e) => {
                    if (this._isUIVisible) {
                        this._hideUI();
                        e()
                    }
                });
                Db({
                    emitter: this.formView,
                    activator: () => this._isUIInPanel,
                    contextElements: [this._balloon.view.element],
                    callback: () => this._hideUI()
                })
            }

            _addActionsView() {
                if (this._areActionsInPanel) {
                    return
                }
                this._balloon.add({view: this.actionsView, position: this._getBalloonPositionData()})
            }

            _addFormView() {
                if (this._isFormInPanel) {
                    return
                }
                const t = this.editor;
                const e = t.commands.get("link");
                this._balloon.add({view: this.formView, position: this._getBalloonPositionData()});
                if (this._balloon.visibleView === this.formView) {
                    this.formView.urlInputView.select()
                }
                this.formView.urlInputView.inputView.element.value = e.value || ""
            }

            _closeFormView() {
                const t = this.editor.commands.get("link");
                t.restoreManualDecoratorStates();
                if (t.value !== undefined) {
                    this._removeFormView()
                } else {
                    this._hideUI()
                }
            }

            _removeFormView() {
                if (this._isFormInPanel) {
                    this.formView.saveButtonView.focus();
                    this._balloon.remove(this.formView);
                    this.editor.editing.view.focus()
                }
            }

            _showUI(t = false) {
                if (!this._getSelectedLinkElement()) {
                    this._addActionsView();
                    if (t) {
                        this._balloon.showStack("main")
                    }
                    this._addFormView()
                } else {
                    if (this._areActionsVisible) {
                        this._addFormView()
                    } else {
                        this._addActionsView()
                    }
                    if (t) {
                        this._balloon.showStack("main")
                    }
                }
                this._startUpdatingUI()
            }

            _hideUI() {
                if (!this._isUIInPanel) {
                    return
                }
                const t = this.editor;
                this.stopListening(t.ui, "update");
                this.stopListening(this._balloon, "change:visibleView");
                t.editing.view.focus();
                this._removeFormView();
                this._balloon.remove(this.actionsView)
            }

            _startUpdatingUI() {
                const t = this.editor;
                const e = t.editing.view.document;
                let i = this._getSelectedLinkElement();
                let n = r();
                const o = () => {
                    const t = this._getSelectedLinkElement();
                    const e = r();
                    if (i && !t || !i && e !== n) {
                        this._hideUI()
                    } else if (this._isUIVisible) {
                        this._balloon.updatePosition(this._getBalloonPositionData())
                    }
                    i = t;
                    n = e
                };

                function r() {
                    return e.selection.focus.getAncestors().reverse().find(t => t.is("element"))
                }

                this.listenTo(t.ui, "update", o);
                this.listenTo(this._balloon, "change:visibleView", o)
            }

            get _isFormInPanel() {
                return this._balloon.hasView(this.formView)
            }

            get _areActionsInPanel() {
                return this._balloon.hasView(this.actionsView)
            }

            get _areActionsVisible() {
                return this._balloon.visibleView === this.actionsView
            }

            get _isUIInPanel() {
                return this._isFormInPanel || this._areActionsInPanel
            }

            get _isUIVisible() {
                const t = this._balloon.visibleView;
                return t == this.formView || this._areActionsVisible
            }

            _getBalloonPositionData() {
                const t = this.editor.editing.view;
                const e = t.document;
                const i = this._getSelectedLinkElement();
                const n = i ? t.domConverter.mapViewToDom(i) : t.domConverter.viewRangeToDom(e.selection.getFirstRange());
                return {target: n}
            }

            _getSelectedLinkElement() {
                const t = this.editor.editing.view;
                const e = t.document.selection;
                if (e.isCollapsed) {
                    return ZA(e.getFirstPosition())
                } else {
                    const i = e.getFirstRange().getTrimmed();
                    const n = ZA(i.start);
                    const o = ZA(i.end);
                    if (!n || n != o) {
                        return null
                    }
                    if (t.createRangeIn(n).getTrimmed().isEqual(i)) {
                        return n
                    } else {
                        return null
                    }
                }
            }
        }

        function ZA(t) {
            return t.getAncestors().find(t => yA(t))
        }

        class tT extends mp {
            static get requires() {
                return [HA, XA]
            }

            static get pluginName() {
                return "Link"
            }
        }

        class eT extends jw {
            constructor(t, e) {
                super(t);
                this.type = e
            }

            refresh() {
                this.value = this._getValue();
                this.isEnabled = this._checkEnabled()
            }

            execute() {
                const t = this.editor.model;
                const e = t.document;
                const i = Array.from(e.selection.getSelectedBlocks()).filter(e => nT(e, t.schema));
                const n = this.value === true;
                t.change(t => {
                    if (n) {
                        let e = i[i.length - 1].nextSibling;
                        let n = Number.POSITIVE_INFINITY;
                        let o = [];
                        while (e && e.name == "listItem" && e.getAttribute("listIndent") !== 0) {
                            const t = e.getAttribute("listIndent");
                            if (t < n) {
                                n = t
                            }
                            const i = t - n;
                            o.push({element: e, listIndent: i});
                            e = e.nextSibling
                        }
                        o = o.reverse();
                        for (const e of o) {
                            t.setAttribute("listIndent", e.listIndent, e.element)
                        }
                    }
                    if (!n) {
                        let t = Number.POSITIVE_INFINITY;
                        for (const e of i) {
                            if (e.is("listItem") && e.getAttribute("listIndent") < t) {
                                t = e.getAttribute("listIndent")
                            }
                        }
                        t = t === 0 ? 1 : t;
                        iT(i, true, t);
                        iT(i, false, t)
                    }
                    for (const e of i.reverse()) {
                        if (n && e.name == "listItem") {
                            t.rename(e, "paragraph")
                        } else if (!n && e.name != "listItem") {
                            t.setAttributes({listType: this.type, listIndent: 0}, e);
                            t.rename(e, "listItem")
                        } else if (!n && e.name == "listItem" && e.getAttribute("listType") != this.type) {
                            t.setAttribute("listType", this.type, e)
                        }
                    }
                })
            }

            _getValue() {
                const t = Ww(this.editor.model.document.selection.getSelectedBlocks());
                return !!t && t.is("listItem") && t.getAttribute("listType") == this.type
            }

            _checkEnabled() {
                if (this.value) {
                    return true
                }
                const t = this.editor.model.document.selection;
                const e = this.editor.model.schema;
                const i = Ww(t.getSelectedBlocks());
                if (!i) {
                    return false
                }
                return nT(i, e)
            }
        }

        function iT(t, e, i) {
            const n = e ? t[0] : t[t.length - 1];
            if (n.is("listItem")) {
                let o = n[e ? "previousSibling" : "nextSibling"];
                let r = n.getAttribute("listIndent");
                while (o && o.is("listItem") && o.getAttribute("listIndent") >= i) {
                    if (r > o.getAttribute("listIndent")) {
                        r = o.getAttribute("listIndent")
                    }
                    if (o.getAttribute("listIndent") == r) {
                        t[e ? "unshift" : "push"](o)
                    }
                    o = o[e ? "previousSibling" : "nextSibling"]
                }
            }
        }

        function nT(t, e) {
            return e.checkChild(t.parent, "listItem") && !e.isObject(t)
        }

        class oT extends jw {
            constructor(t, e) {
                super(t);
                this._indentBy = e == "forward" ? 1 : -1
            }

            refresh() {
                this.isEnabled = this._checkEnabled()
            }

            execute() {
                const t = this.editor.model;
                const e = t.document;
                let i = Array.from(e.selection.getSelectedBlocks());
                t.change(t => {
                    const e = i[i.length - 1];
                    let n = e.nextSibling;
                    while (n && n.name == "listItem" && n.getAttribute("listIndent") > e.getAttribute("listIndent")) {
                        i.push(n);
                        n = n.nextSibling
                    }
                    if (this._indentBy < 0) {
                        i = i.reverse()
                    }
                    for (const e of i) {
                        const i = e.getAttribute("listIndent") + this._indentBy;
                        if (i < 0) {
                            t.rename(e, "paragraph")
                        } else {
                            t.setAttribute("listIndent", i, e)
                        }
                    }
                })
            }

            _checkEnabled() {
                const t = Ww(this.editor.model.document.selection.getSelectedBlocks());
                if (!t || !t.is("listItem")) {
                    return false
                }
                if (this._indentBy > 0) {
                    const e = t.getAttribute("listIndent");
                    const i = t.getAttribute("listType");
                    let n = t.previousSibling;
                    while (n && n.is("listItem") && n.getAttribute("listIndent") >= e) {
                        if (n.getAttribute("listIndent") == e) {
                            return n.getAttribute("listType") == i
                        }
                        n = n.previousSibling
                    }
                    return false
                }
                return true
            }
        }

        function rT(t) {
            const e = t.createContainerElement("li");
            e.getFillerOffset = hT;
            return e
        }

        function sT(t, e) {
            const i = e.mapper;
            const n = e.writer;
            const o = t.getAttribute("listType") == "numbered" ? "ol" : "ul";
            const r = rT(n);
            const s = n.createContainerElement(o, null);
            n.insert(n.createPositionAt(s, 0), r);
            i.bindElements(t, r);
            return r
        }

        function aT(t, e, i, n) {
            const o = e.parent;
            const r = i.mapper;
            const s = i.writer;
            let a = r.toViewPosition(n.createPositionBefore(t));
            const c = dT(t.previousSibling, {
                sameIndent: true,
                smallerIndent: true,
                listIndent: t.getAttribute("listIndent")
            });
            const l = t.previousSibling;
            if (c && c.getAttribute("listIndent") == t.getAttribute("listIndent")) {
                const t = r.toViewElement(c);
                a = s.breakContainer(s.createPositionAfter(t))
            } else {
                if (l && l.name == "listItem") {
                    a = r.toViewPosition(n.createPositionAt(l, "end"))
                } else {
                    a = r.toViewPosition(n.createPositionBefore(t))
                }
            }
            a = lT(a);
            s.insert(a, o);
            if (l && l.name == "listItem") {
                const t = r.toViewElement(l);
                const i = s.createRange(s.createPositionAt(t, 0), a);
                const n = i.getWalker({ignoreElementEnd: true});
                for (const t of n) {
                    if (t.item.is("li")) {
                        const i = s.breakContainer(s.createPositionBefore(t.item));
                        const o = t.item.parent;
                        const r = s.createPositionAt(e, "end");
                        cT(s, r.nodeBefore, r.nodeAfter);
                        s.move(s.createRangeOn(o), r);
                        n.position = i
                    }
                }
            } else {
                const i = o.nextSibling;
                if (i && (i.is("ul") || i.is("ol"))) {
                    let n = null;
                    for (const e of i.getChildren()) {
                        const i = r.toModelElement(e);
                        if (i && i.getAttribute("listIndent") > t.getAttribute("listIndent")) {
                            n = e
                        } else {
                            break
                        }
                    }
                    if (n) {
                        s.breakContainer(s.createPositionAfter(n));
                        s.move(s.createRangeOn(n.parent), s.createPositionAt(e, "end"))
                    }
                }
            }
            cT(s, o, o.nextSibling);
            cT(s, o.previousSibling, o)
        }

        function cT(t, e, i) {
            if (!e || !i || e.name != "ul" && e.name != "ol") {
                return null
            }
            if (e.name != i.name || e.getAttribute("class") !== i.getAttribute("class")) {
                return null
            }
            return t.mergeContainers(t.createPositionAfter(e))
        }

        function lT(t) {
            return t.getLastMatchingPosition(t => t.item.is("uiElement"))
        }

        function dT(t, e) {
            const i = !!e.sameIndent;
            const n = !!e.smallerIndent;
            const o = e.listIndent;
            let r = t;
            while (r && r.name == "listItem") {
                const t = r.getAttribute("listIndent");
                if (i && o == t || n && o > t) {
                    return r
                }
                r = r.previousSibling
            }
            return null
        }

        function uT(t, e, i, n) {
            t.ui.componentFactory.add(e, o => {
                const r = t.commands.get(e);
                const s = new hb(o);
                s.set({label: i, icon: n, tooltip: true, isToggleable: true});
                s.bind("isOn", "isEnabled").to(r, "value", "isEnabled");
                s.on("execute", () => {
                    t.execute(e);
                    t.editing.view.focus()
                });
                return s
            })
        }

        function hT() {
            const t = !this.isEmpty && (this.getChild(0).name == "ul" || this.getChild(0).name == "ol");
            if (this.isEmpty || t) {
                return 0
            }
            return Hc.call(this)
        }

        function fT(t) {
            return (e, i, n) => {
                const o = n.consumable;
                if (!o.test(i.item, "insert") || !o.test(i.item, "attribute:listType") || !o.test(i.item, "attribute:listIndent")) {
                    return
                }
                o.consume(i.item, "insert");
                o.consume(i.item, "attribute:listType");
                o.consume(i.item, "attribute:listIndent");
                const r = i.item;
                const s = sT(r, n);
                aT(r, s, n, t)
            }
        }

        function gT(t) {
            return (e, i, n) => {
                const o = n.mapper.toViewPosition(i.position).getLastMatchingPosition(t => !t.item.is("li"));
                const r = o.nodeAfter;
                const s = n.writer;
                s.breakContainer(s.createPositionBefore(r));
                s.breakContainer(s.createPositionAfter(r));
                const a = r.parent;
                const c = a.previousSibling;
                const l = s.createRangeOn(a);
                const d = s.remove(l);
                if (c && c.nextSibling) {
                    cT(s, c, c.nextSibling)
                }
                const u = n.mapper.toModelElement(r);
                ET(u.getAttribute("listIndent") + 1, i.position, l.start, r, n, t);
                for (const t of s.createRangeIn(d).getItems()) {
                    n.mapper.unbindViewElement(t)
                }
                e.stop()
            }
        }

        function mT(t, e, i) {
            if (!i.consumable.consume(e.item, "attribute:listType")) {
                return
            }
            const n = i.mapper.toViewElement(e.item);
            const o = i.writer;
            o.breakContainer(o.createPositionBefore(n));
            o.breakContainer(o.createPositionAfter(n));
            const r = n.parent;
            const s = e.attributeNewValue == "numbered" ? "ol" : "ul";
            o.rename(s, r)
        }

        function pT(t, e, i) {
            const n = i.mapper.toViewElement(e.item);
            const o = n.parent;
            const r = i.writer;
            cT(r, o, o.nextSibling);
            cT(r, o.previousSibling, o);
            for (const t of e.item.getChildren()) {
                i.consumable.consume(t, "insert")
            }
        }

        function bT(t) {
            return (e, i, n) => {
                if (!n.consumable.consume(i.item, "attribute:listIndent")) {
                    return
                }
                const o = n.mapper.toViewElement(i.item);
                const r = n.writer;
                r.breakContainer(r.createPositionBefore(o));
                r.breakContainer(r.createPositionAfter(o));
                const s = o.parent;
                const a = s.previousSibling;
                const c = r.createRangeOn(s);
                r.remove(c);
                if (a && a.nextSibling) {
                    cT(r, a, a.nextSibling)
                }
                ET(i.attributeOldValue + 1, i.range.start, c.start, o, n, t);
                aT(i.item, o, n, t);
                for (const t of i.item.getChildren()) {
                    n.consumable.consume(t, "insert")
                }
            }
        }

        function wT(t, e, i) {
            if (e.item.name != "listItem") {
                let t = i.mapper.toViewPosition(e.range.start);
                const n = i.writer;
                const o = [];
                while (t.parent.name == "ul" || t.parent.name == "ol") {
                    t = n.breakContainer(t);
                    if (t.parent.name != "li") {
                        break
                    }
                    const e = t;
                    const i = n.createPositionAt(t.parent, "end");
                    if (!e.isEqual(i)) {
                        const t = n.remove(n.createRange(e, i));
                        o.push(t)
                    }
                    t = n.createPositionAfter(t.parent)
                }
                if (o.length > 0) {
                    for (let e = 0; e < o.length; e++) {
                        const i = t.nodeBefore;
                        const r = n.insert(t, o[e]);
                        t = r.end;
                        if (e > 0) {
                            const e = cT(n, i, i.nextSibling);
                            if (e && e.parent == i) {
                                t.offset--
                            }
                        }
                    }
                    cT(n, t.nodeBefore, t.nodeAfter)
                }
            }
        }

        function kT(t, e, i) {
            const n = i.mapper.toViewPosition(e.position);
            const o = n.nodeBefore;
            const r = n.nodeAfter;
            cT(i.writer, o, r)
        }

        function _T(t, e, i) {
            if (i.consumable.consume(e.viewItem, {name: true})) {
                const t = i.writer;
                const n = t.createElement("listItem");
                const o = OT(e.viewItem);
                t.setAttribute("listIndent", o, n);
                const r = e.viewItem.parent && e.viewItem.parent.name == "ol" ? "numbered" : "bulleted";
                t.setAttribute("listType", r, n);
                const s = i.splitToAllowedParent(n, e.modelCursor);
                if (!s) {
                    return
                }
                t.insert(n, s.position);
                const a = PT(n, e.viewItem.getChildren(), i);
                e.modelRange = t.createRange(e.modelCursor, a);
                if (s.cursorParent) {
                    e.modelCursor = t.createPositionAt(s.cursorParent, 0)
                } else {
                    e.modelCursor = e.modelRange.end
                }
            }
        }

        function vT(t, e, i) {
            if (i.consumable.test(e.viewItem, {name: true})) {
                const t = Array.from(e.viewItem.getChildren());
                for (const e of t) {
                    const t = !(e.is("li") || RT(e));
                    if (t) {
                        e._remove()
                    }
                }
            }
        }

        function yT(t, e, i) {
            if (i.consumable.test(e.viewItem, {name: true})) {
                if (e.viewItem.childCount === 0) {
                    return
                }
                const t = [...e.viewItem.getChildren()];
                let i = false;
                let n = true;
                for (const e of t) {
                    if (i && !RT(e)) {
                        e._remove()
                    }
                    if (e.is("text")) {
                        if (n) {
                            e._data = e.data.replace(/^\s+/, "")
                        }
                        if (!e.nextSibling || RT(e.nextSibling)) {
                            e._data = e.data.replace(/\s+$/, "")
                        }
                    } else if (RT(e)) {
                        i = true
                    }
                    n = false
                }
            }
        }

        function xT(t) {
            return (e, i) => {
                if (i.isPhantom) {
                    return
                }
                const n = i.modelPosition.nodeBefore;
                if (n && n.is("listItem")) {
                    const e = i.mapper.toViewElement(n);
                    const o = e.getAncestors().find(RT);
                    const r = t.createPositionAt(e, 0).getWalker();
                    for (const t of r) {
                        if (t.type == "elementStart" && t.item.is("li")) {
                            i.viewPosition = t.previousPosition;
                            break
                        } else if (t.type == "elementEnd" && t.item == o) {
                            i.viewPosition = t.nextPosition;
                            break
                        }
                    }
                }
            }
        }

        function CT(t) {
            return (e, i) => {
                const n = i.viewPosition;
                const o = n.parent;
                const r = i.mapper;
                if (o.name == "ul" || o.name == "ol") {
                    if (!n.isAtEnd) {
                        const e = r.toModelElement(n.nodeAfter);
                        i.modelPosition = t.createPositionBefore(e)
                    } else {
                        const e = r.toModelElement(n.nodeBefore);
                        const o = r.getModelLength(n.nodeBefore);
                        i.modelPosition = t.createPositionBefore(e).getShiftedBy(o)
                    }
                    e.stop()
                } else if (o.name == "li" && n.nodeBefore && (n.nodeBefore.name == "ul" || n.nodeBefore.name == "ol")) {
                    const s = r.toModelElement(o);
                    let a = 1;
                    let c = n.nodeBefore;
                    while (c && RT(c)) {
                        a += r.getModelLength(c);
                        c = c.previousSibling
                    }
                    i.modelPosition = t.createPositionBefore(s).getShiftedBy(a);
                    e.stop()
                }
            }
        }

        function AT(t, e) {
            const i = t.document.differ.getChanges();
            const n = new Map;
            let o = false;
            for (const n of i) {
                if (n.type == "insert" && n.name == "listItem") {
                    r(n.position)
                } else if (n.type == "insert" && n.name != "listItem") {
                    if (n.name != "$text") {
                        const i = n.position.nodeAfter;
                        if (i.hasAttribute("listIndent")) {
                            e.removeAttribute("listIndent", i);
                            o = true
                        }
                        if (i.hasAttribute("listType")) {
                            e.removeAttribute("listType", i);
                            o = true
                        }
                        for (const e of Array.from(t.createRangeIn(i)).filter(t => t.item.is("listItem"))) {
                            r(e.previousPosition)
                        }
                    }
                    const i = n.position.getShiftedBy(n.length);
                    r(i)
                } else if (n.type == "remove" && n.name == "listItem") {
                    r(n.position)
                } else if (n.type == "attribute" && n.attributeKey == "listIndent") {
                    r(n.range.start)
                } else if (n.type == "attribute" && n.attributeKey == "listType") {
                    r(n.range.start)
                }
            }
            for (const t of n.values()) {
                s(t);
                a(t)
            }
            return o;

            function r(t) {
                const e = t.nodeBefore;
                if (!e || !e.is("listItem")) {
                    const e = t.nodeAfter;
                    if (e && e.is("listItem")) {
                        n.set(e, e)
                    }
                } else {
                    let i = e;
                    if (n.has(i)) {
                        return
                    }
                    while (i.previousSibling && i.previousSibling.is("listItem")) {
                        i = i.previousSibling;
                        if (n.has(i)) {
                            return
                        }
                    }
                    n.set(t.nodeBefore, i)
                }
            }

            function s(t) {
                let i = 0;
                let n = null;
                while (t && t.is("listItem")) {
                    const r = t.getAttribute("listIndent");
                    if (r > i) {
                        let s;
                        if (n === null) {
                            n = r - i;
                            s = i
                        } else {
                            if (n > r) {
                                n = r
                            }
                            s = r - n
                        }
                        e.setAttribute("listIndent", s, t);
                        o = true
                    } else {
                        n = null;
                        i = t.getAttribute("listIndent") + 1
                    }
                    t = t.nextSibling
                }
            }

            function a(t) {
                let i = [];
                let n = null;
                while (t && t.is("listItem")) {
                    const r = t.getAttribute("listIndent");
                    if (n && n.getAttribute("listIndent") > r) {
                        i = i.slice(0, r + 1)
                    }
                    if (r != 0) {
                        if (i[r]) {
                            const n = i[r];
                            if (t.getAttribute("listType") != n) {
                                e.setAttribute("listType", n, t);
                                o = true
                            }
                        } else {
                            i[r] = t.getAttribute("listType")
                        }
                    }
                    n = t;
                    t = t.nextSibling
                }
            }
        }

        function TT(t, [e, i]) {
            let n = e.is("documentFragment") ? e.getChild(0) : e;
            let o;
            if (!i) {
                o = this.document.selection
            } else {
                o = this.createSelection(i)
            }
            if (n && n.is("listItem")) {
                const t = o.getFirstPosition();
                let e = null;
                if (t.parent.is("listItem")) {
                    e = t.parent
                } else if (t.nodeBefore && t.nodeBefore.is("listItem")) {
                    e = t.nodeBefore
                }
                if (e) {
                    const t = e.getAttribute("listIndent");
                    if (t > 0) {
                        while (n && n.is("listItem")) {
                            n._setAttribute("listIndent", n.getAttribute("listIndent") + t);
                            n = n.nextSibling
                        }
                    }
                }
            }
        }

        function PT(t, e, i) {
            const {writer: n, schema: o} = i;
            let r = n.createPositionAfter(t);
            for (const s of e) {
                if (s.name == "ul" || s.name == "ol") {
                    r = i.convertItem(s, r).modelCursor
                } else {
                    const e = i.convertItem(s, n.createPositionAt(t, "end"));
                    const a = e.modelRange.start.nodeAfter;
                    const c = a && a.is("element") && !o.checkChild(t, a.name);
                    if (c) {
                        if (e.modelCursor.parent.is("listItem")) {
                            t = e.modelCursor.parent
                        } else {
                            t = ST(e.modelCursor)
                        }
                        r = n.createPositionAfter(t)
                    }
                }
            }
            return r
        }

        function ST(t) {
            const e = new Wh({startPosition: t});
            let i;
            do {
                i = e.next()
            } while (!i.value.item.is("listItem"));
            return i.value.item
        }

        function ET(t, e, i, n, o, r) {
            const s = dT(e.nodeBefore, {sameIndent: true, smallerIndent: true, listIndent: t, foo: "b"});
            const a = o.mapper;
            const c = o.writer;
            const l = s ? s.getAttribute("listIndent") : null;
            let d;
            if (!s) {
                d = i
            } else if (l == t) {
                const t = a.toViewElement(s).parent;
                d = c.createPositionAfter(t)
            } else {
                const t = r.createPositionAt(s, "end");
                d = a.toViewPosition(t)
            }
            d = lT(d);
            for (const t of [...n.getChildren()]) {
                if (RT(t)) {
                    d = c.move(c.createRangeOn(t), d).end;
                    cT(c, t, t.nextSibling);
                    cT(c, t.previousSibling, t)
                }
            }
        }

        function RT(t) {
            return t.is("ol") || t.is("ul")
        }

        function OT(t) {
            let e = 0;
            let i = t.parent;
            while (i) {
                if (i.is("li")) {
                    e++
                } else {
                    const t = i.previousSibling;
                    if (t && t.is("li")) {
                        e++
                    }
                }
                i = i.parent
            }
            return e
        }

        class IT extends mp {
            static get pluginName() {
                return "ListEditing"
            }

            static get requires() {
                return [V_]
            }

            init() {
                const t = this.editor;
                t.model.schema.register("listItem", {
                    inheritAllFrom: "$block",
                    allowAttributes: ["listType", "listIndent"]
                });
                const e = t.data;
                const i = t.editing;
                t.model.document.registerPostFixer(e => AT(t.model, e));
                i.mapper.registerViewToModelLength("li", VT);
                e.mapper.registerViewToModelLength("li", VT);
                i.mapper.on("modelToViewPosition", xT(i.view));
                i.mapper.on("viewToModelPosition", CT(t.model));
                e.mapper.on("modelToViewPosition", xT(i.view));
                t.conversion.for("editingDowncast").add(e => {
                    e.on("insert", wT, {priority: "high"});
                    e.on("insert:listItem", fT(t.model));
                    e.on("attribute:listType:listItem", mT, {priority: "high"});
                    e.on("attribute:listType:listItem", pT, {priority: "low"});
                    e.on("attribute:listIndent:listItem", bT(t.model));
                    e.on("remove:listItem", gT(t.model));
                    e.on("remove", kT, {priority: "low"})
                });
                t.conversion.for("dataDowncast").add(e => {
                    e.on("insert", wT, {priority: "high"});
                    e.on("insert:listItem", fT(t.model))
                });
                t.conversion.for("upcast").add(t => {
                    t.on("element:ul", vT, {priority: "high"});
                    t.on("element:ol", vT, {priority: "high"});
                    t.on("element:li", yT, {priority: "high"});
                    t.on("element:li", _T)
                });
                t.model.on("insertContent", TT, {priority: "high"});
                t.commands.add("numberedList", new eT(t, "numbered"));
                t.commands.add("bulletedList", new eT(t, "bulleted"));
                t.commands.add("indentList", new oT(t, "forward"));
                t.commands.add("outdentList", new oT(t, "backward"));
                const n = i.view.document;
                this.listenTo(n, "enter", (t, e) => {
                    const i = this.editor.model.document;
                    const n = i.selection.getLastPosition().parent;
                    if (i.selection.isCollapsed && n.name == "listItem" && n.isEmpty) {
                        this.editor.execute("outdentList");
                        e.preventDefault();
                        t.stop()
                    }
                });
                this.listenTo(n, "delete", (t, e) => {
                    if (e.direction !== "backward") {
                        return
                    }
                    const i = this.editor.model.document.selection;
                    if (!i.isCollapsed) {
                        return
                    }
                    const n = i.getFirstPosition();
                    if (!n.isAtStart) {
                        return
                    }
                    const o = n.parent;
                    if (o.name !== "listItem") {
                        return
                    }
                    const r = o.previousSibling && o.previousSibling.name === "listItem";
                    if (r) {
                        return
                    }
                    this.editor.execute("outdentList");
                    e.preventDefault();
                    t.stop()
                }, {priority: "high"});
                const o = t => (e, i) => {
                    const n = this.editor.commands.get(t);
                    if (n.isEnabled) {
                        this.editor.execute(t);
                        i()
                    }
                };
                t.keystrokes.set("Tab", o("indentList"));
                t.keystrokes.set("Shift+Tab", o("outdentList"))
            }

            afterInit() {
                const t = this.editor.commands;
                const e = t.get("indent");
                const i = t.get("outdent");
                if (e) {
                    e.registerChildCommand(t.get("indentList"))
                }
                if (i) {
                    i.registerChildCommand(t.get("outdentList"))
                }
            }
        }

        function VT(t) {
            let e = 1;
            for (const i of t.getChildren()) {
                if (i.name == "ul" || i.name == "ol") {
                    for (const t of i.getChildren()) {
                        e += VT(t)
                    }
                }
            }
            return e
        }

        var NT = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zM3.5 3v5H2V3.7H1v-1h2.5V3zM.343 17.857l2.59-3.257H2.92a.6.6 0 1 0-1.04 0H.302a2 2 0 1 1 3.995 0h-.001c-.048.405-.16.734-.333.988-.175.254-.59.692-1.244 1.312H4.3v1h-4l.043-.043zM7 14.75a.75.75 0 0 1 .75-.75h9.5a.75.75 0 1 1 0 1.5h-9.5a.75.75 0 0 1-.75-.75z"/></svg>';
        var MT = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7 5.75c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0C1 4.784 1.777 4 2.75 4c.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75C1.784 7.5 1 6.723 1 5.75zm6 9c0 .414.336.75.75.75h9.5a.75.75 0 1 0 0-1.5h-9.5a.75.75 0 0 0-.75.75zm-6 0c0-.966.777-1.75 1.75-1.75.966 0 1.75.777 1.75 1.75 0 .966-.777 1.75-1.75 1.75-.966 0-1.75-.777-1.75-1.75z"/></svg>';

        class BT extends mp {
            init() {
                const t = this.editor.t;
                uT(this.editor, "numberedList", t("lc"), NT);
                uT(this.editor, "bulletedList", t("ld"), MT)
            }
        }

        class zT extends mp {
            static get requires() {
                return [IT, BT]
            }

            static get pluginName() {
                return "List"
            }
        }

        var LT = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M8.69 14.915c.053.052.173.083.36.093a.366.366 0 0 1 .345.485l-.003.01a.738.738 0 0 1-.697.497h-2.67a.374.374 0 0 1-.353-.496l.013-.038a.681.681 0 0 1 .644-.458c.197-.012.325-.043.386-.093a.28.28 0 0 0 .072-.11L9.592 4.5H6.269c-.359-.017-.609.013-.75.09-.142.078-.289.265-.442.563-.192.29-.516.464-.864.464H4.17a.43.43 0 0 1-.407-.569L4.46 3h13.08l-.62 2.043a.81.81 0 0 1-.775.574h-.114a.486.486 0 0 1-.486-.486c.001-.284-.054-.464-.167-.54-.112-.076-.367-.106-.766-.091h-3.28l-2.68 10.257c-.006.074.007.127.038.158zM3 17h8a.5.5 0 1 1 0 1H3a.5.5 0 1 1 0-1zm11.299 1.17a.75.75 0 1 1-1.06-1.06l1.414-1.415-1.415-1.414a.75.75 0 0 1 1.06-1.06l1.415 1.414 1.414-1.415a.75.75 0 1 1 1.06 1.06l-1.413 1.415 1.414 1.415a.75.75 0 0 1-1.06 1.06l-1.415-1.414-1.414 1.414z"/></svg>';
        const FT = "removeFormat";

        class DT extends mp {
            static get pluginName() {
                return "RemoveFormatUI"
            }

            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add(FT, i => {
                    const n = t.commands.get(FT);
                    const o = new hb(i);
                    o.set({label: e("la"), icon: LT, tooltip: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute(FT);
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class jT extends jw {
            refresh() {
                const t = this.editor.model;
                this.isEnabled = !!Ww(this._getFormattingItems(t.document.selection, t.schema))
            }

            execute() {
                const t = this.editor.model;
                const e = t.schema;
                t.change(i => {
                    for (const n of this._getFormattingItems(t.document.selection, e)) {
                        if (n.is("selection")) {
                            for (const t of this._getFormattingAttributes(n, e)) {
                                i.removeSelectionAttribute(t)
                            }
                        } else {
                            const t = i.createRangeOn(n);
                            for (const o of this._getFormattingAttributes(n, e)) {
                                i.removeAttribute(o, t)
                            }
                        }
                    }
                })
            }

            * _getFormattingItems(t, e) {
                const i = t => !!Ww(this._getFormattingAttributes(t, e));
                for (const e of t.getRanges()) {
                    for (const t of e.getItems()) {
                        if (i(t)) {
                            yield t
                        }
                    }
                }
                if (i(t)) {
                    yield t
                }
            }

            * _getFormattingAttributes(t, e) {
                for (const [i] of t.getAttributes()) {
                    const t = e.getAttributeProperties(i);
                    if (t && t.isFormatting) {
                        yield i
                    }
                }
            }
        }

        class HT extends mp {
            static get pluginName() {
                return "RemoveFormatEditing"
            }

            init() {
                const t = this.editor;
                t.commands.add("removeFormat", new jT(t))
            }
        }

        class WT extends mp {
            static get requires() {
                return [HT, DT]
            }

            static get pluginName() {
                return "RemoveFormat"
            }
        }

        class qT {
            constructor(t, e = 20) {
                this.model = t;
                this.size = 0;
                this.limit = e;
                this.isLocked = false;
                this._changeCallback = (t, e) => {
                    if (e.type != "transparent" && e !== this._batch) {
                        this._reset(true)
                    }
                };
                this._selectionChangeCallback = () => {
                    this._reset()
                };
                this.model.document.on("change", this._changeCallback);
                this.model.document.selection.on("change:range", this._selectionChangeCallback);
                this.model.document.selection.on("change:attribute", this._selectionChangeCallback)
            }

            get batch() {
                if (!this._batch) {
                    this._batch = this.model.createBatch()
                }
                return this._batch
            }

            input(t) {
                this.size += t;
                if (this.size >= this.limit) {
                    this._reset(true)
                }
            }

            lock() {
                this.isLocked = true
            }

            unlock() {
                this.isLocked = false
            }

            destroy() {
                this.model.document.off("change", this._changeCallback);
                this.model.document.selection.off("change:range", this._selectionChangeCallback);
                this.model.document.selection.off("change:attribute", this._selectionChangeCallback)
            }

            _reset(t) {
                if (!this.isLocked || t) {
                    this._batch = null;
                    this.size = 0
                }
            }
        }

        class UT extends jw {
            constructor(t, e) {
                super(t);
                this._buffer = new qT(t.model, e);
                this._batches = new WeakSet
            }

            get buffer() {
                return this._buffer
            }

            destroy() {
                super.destroy();
                this._buffer.destroy()
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.document;
                const n = t.text || "";
                const o = n.length;
                const r = t.range ? e.createSelection(t.range) : i.selection;
                const s = t.resultRange;
                e.enqueueChange(this._buffer.batch, t => {
                    this._buffer.lock();
                    e.deleteContent(r);
                    if (n) {
                        e.insertContent(t.createText(n, i.selection.getAttributes()), r)
                    }
                    if (s) {
                        t.setSelection(s)
                    } else if (!r.is("documentSelection")) {
                        t.setSelection(r)
                    }
                    this._buffer.unlock();
                    this._buffer.input(o);
                    this._batches.add(this._buffer.batch)
                })
            }
        }

        function $T(t) {
            let e = null;
            const i = t.model;
            const n = t.editing.view;
            const o = t.commands.get("input");
            if (Al.isAndroid) {
                n.document.on("beforeinput", (t, e) => r(e), {priority: "lowest"})
            } else {
                n.document.on("keydown", (t, e) => r(e), {priority: "lowest"})
            }
            n.document.on("compositionstart", s, {priority: "lowest"});
            n.document.on("compositionend", () => {
                e = i.createSelection(i.document.selection)
            }, {priority: "lowest"});

            function r(t) {
                const r = i.document;
                const s = n.document.isComposing;
                const c = e && e.isEqual(r.selection);
                e = null;
                if (!o.isEnabled) {
                    return
                }
                if (KT(t) || r.selection.isCollapsed) {
                    return
                }
                if (s && t.keyCode === 229) {
                    return
                }
                if (!s && t.keyCode === 229 && c) {
                    return
                }
                a()
            }

            function s() {
                const t = i.document;
                const e = t.selection.rangeCount === 1 ? t.selection.getFirstRange().isFlat : true;
                if (t.selection.isCollapsed || e) {
                    return
                }
                a()
            }

            function a() {
                const t = o.buffer;
                t.lock();
                i.enqueueChange(t.batch, () => {
                    i.deleteContent(i.document.selection)
                });
                t.unlock()
            }
        }

        const GT = [Ml("arrowUp"), Ml("arrowRight"), Ml("arrowDown"), Ml("arrowLeft"), 9, 16, 17, 18, 19, 20, 27, 33, 34, 35, 36, 45, 91, 93, 144, 145, 173, 174, 175, 176, 177, 178, 179, 255];
        for (let t = 112; t <= 135; t++) {
            GT.push(t)
        }

        function KT(t) {
            if (t.ctrlKey) {
                return true
            }
            return GT.includes(t.keyCode)
        }

        function JT(t, e) {
            const i = [];
            let n = 0;
            let o;
            t.forEach(t => {
                if (t == "equal") {
                    r();
                    n++
                } else if (t == "insert") {
                    if (s("insert")) {
                        o.values.push(e[n])
                    } else {
                        r();
                        o = {type: "insert", index: n, values: [e[n]]}
                    }
                    n++
                } else {
                    if (s("delete")) {
                        o.howMany++
                    } else {
                        r();
                        o = {type: "delete", index: n, howMany: 1}
                    }
                }
            });
            r();
            return i;

            function r() {
                if (o) {
                    i.push(o);
                    o = null
                }
            }

            function s(t) {
                return o && o.type == t
            }
        }

        function YT(t) {
            if (t.length == 0) {
                return false
            }
            for (const e of t) {
                if (e.type === "children" && !QT(e)) {
                    return true
                }
            }
            return false
        }

        function QT(t) {
            if (t.newChildren.length - t.oldChildren.length != 1) {
                return
            }
            const e = _d(t.oldChildren, t.newChildren, XT);
            const i = JT(e, t.newChildren);
            if (i.length > 1) {
                return
            }
            const n = i[0];
            if (!(!!n.values[0] && n.values[0].is("text"))) {
                return
            }
            return n
        }

        function XT(t, e) {
            if (!!t && t.is("text") && !!e && e.is("text")) {
                return t.data === e.data
            } else {
                return t === e
            }
        }

        function ZT(t) {
            t.editing.view.document.on("mutations", (e, i, n) => {
                new tP(t).handle(i, n)
            })
        }

        class tP {
            constructor(t) {
                this.editor = t;
                this.editing = this.editor.editing
            }

            handle(t, e) {
                if (YT(t)) {
                    this._handleContainerChildrenMutations(t, e)
                } else {
                    for (const i of t) {
                        this._handleTextMutation(i, e);
                        this._handleTextNodeInsertion(i)
                    }
                }
            }

            _handleContainerChildrenMutations(t, e) {
                const i = eP(t);
                if (!i) {
                    return
                }
                const n = this.editor.editing.view.domConverter;
                const o = n.mapViewToDom(i);
                const r = new zd(this.editor.editing.view.document);
                const s = this.editor.data.toModel(r.domToView(o)).getChild(0);
                const a = this.editor.editing.mapper.toModelElement(i);
                if (!a) {
                    return
                }
                const c = Array.from(s.getChildren());
                const l = Array.from(a.getChildren());
                const d = c[c.length - 1];
                const u = l[l.length - 1];
                if (d && d.is("softBreak") && u && !u.is("softBreak")) {
                    c.pop()
                }
                const h = this.editor.model.schema;
                if (!iP(c, h) || !iP(l, h)) {
                    return
                }
                const f = c.map(t => t.is("text") ? t.data : "@").join("").replace(/\u00A0/g, " ");
                const g = l.map(t => t.is("text") ? t.data : "@").join("").replace(/\u00A0/g, " ");
                if (g === f) {
                    return
                }
                const m = _d(g, f);
                const {firstChangeAt: p, insertions: b, deletions: w} = nP(m);
                let k = null;
                if (e) {
                    k = this.editing.mapper.toModelRange(e.getFirstRange())
                }
                const _ = f.substr(p, b);
                const v = this.editor.model.createRange(this.editor.model.createPositionAt(a, p), this.editor.model.createPositionAt(a, p + w));
                this.editor.execute("input", {text: _, range: v, resultRange: k})
            }

            _handleTextMutation(t, e) {
                if (t.type != "text") {
                    return
                }
                const i = t.newText.replace(/\u00A0/g, " ");
                const n = t.oldText.replace(/\u00A0/g, " ");
                if (n === i) {
                    return
                }
                const o = _d(n, i);
                const {firstChangeAt: r, insertions: s, deletions: a} = nP(o);
                let c = null;
                if (e) {
                    c = this.editing.mapper.toModelRange(e.getFirstRange())
                }
                const l = this.editing.view.createPositionAt(t.node, r);
                const d = this.editing.mapper.toModelPosition(l);
                const u = this.editor.model.createRange(d, d.getShiftedBy(a));
                const h = i.substr(r, s);
                this.editor.execute("input", {text: h, range: u, resultRange: c})
            }

            _handleTextNodeInsertion(t) {
                if (t.type != "children") {
                    return
                }
                const e = QT(t);
                const i = this.editing.view.createPositionAt(t.node, e.index);
                const n = this.editing.mapper.toModelPosition(i);
                const o = e.values[0].data;
                this.editor.execute("input", {text: o.replace(/\u00A0/g, " "), range: this.editor.model.createRange(n)})
            }
        }

        function eP(t) {
            const e = t.map(t => t.node).reduce((t, e) => t.getCommonAncestor(e, {includeSelf: true}));
            if (!e) {
                return
            }
            return e.getAncestors({
                includeSelf: true,
                parentFirst: true
            }).find(t => t.is("containerElement") || t.is("rootElement"))
        }

        function iP(t, e) {
            return t.every(t => e.isInline(t))
        }

        function nP(t) {
            let e = null;
            let i = null;
            for (let n = 0; n < t.length; n++) {
                const o = t[n];
                if (o != "equal") {
                    e = e === null ? n : e;
                    i = n
                }
            }
            let n = 0;
            let o = 0;
            for (let r = e; r <= i; r++) {
                if (t[r] != "insert") {
                    n++
                }
                if (t[r] != "delete") {
                    o++
                }
            }
            return {insertions: o, deletions: n, firstChangeAt: e}
        }

        class oP extends mp {
            static get pluginName() {
                return "Input"
            }

            init() {
                const t = this.editor;
                const e = new UT(t, t.config.get("typing.undoStep") || 20);
                t.commands.add("input", e);
                $T(t);
                ZT(t)
            }

            isInput(t) {
                const e = this.editor.commands.get("input");
                return e._batches.has(t)
            }
        }

        class rP extends jw {
            constructor(t, e) {
                super(t);
                this.direction = e;
                this._buffer = new qT(t.model, t.config.get("typing.undoStep"))
            }

            get buffer() {
                return this._buffer
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.document;
                e.enqueueChange(this._buffer.batch, n => {
                    this._buffer.lock();
                    const o = n.createSelection(t.selection || i.selection);
                    const r = o.isCollapsed;
                    if (o.isCollapsed) {
                        e.modifySelection(o, {direction: this.direction, unit: t.unit})
                    }
                    if (this._shouldEntireContentBeReplacedWithParagraph(t.sequence || 1)) {
                        this._replaceEntireContentWithParagraph(n);
                        return
                    }
                    if (o.isCollapsed) {
                        return
                    }
                    let s = 0;
                    o.getFirstRange().getMinimalFlatRanges().forEach(t => {
                        s += fl(t.getWalker({singleCharacters: true, ignoreElementEnd: true, shallow: true}))
                    });
                    e.deleteContent(o, {doNotResetEntireContent: r, direction: this.direction});
                    this._buffer.input(s);
                    n.setSelection(o);
                    this._buffer.unlock()
                })
            }

            _shouldEntireContentBeReplacedWithParagraph(t) {
                if (t > 1) {
                    return false
                }
                const e = this.editor.model;
                const i = e.document;
                const n = i.selection;
                const o = e.schema.getLimitElement(n);
                const r = n.isCollapsed && n.containsEntireContent(o);
                if (!r) {
                    return false
                }
                if (!e.schema.checkChild(o, "paragraph")) {
                    return false
                }
                const s = o.getChild(0);
                if (s && s.name === "paragraph") {
                    return false
                }
                return true
            }

            _replaceEntireContentWithParagraph(t) {
                const e = this.editor.model;
                const i = e.document;
                const n = i.selection;
                const o = e.schema.getLimitElement(n);
                const r = t.createElement("paragraph");
                t.remove(t.createRangeIn(o));
                t.insert(r, o);
                t.setSelection(r, 0)
            }
        }

        class sP extends Gd {
            constructor(t) {
                super(t);
                const e = t.document;
                let i = 0;
                e.on("keyup", (t, e) => {
                    if (e.keyCode == Nl.delete || e.keyCode == Nl.backspace) {
                        i = 0
                    }
                });
                e.on("keydown", (t, e) => {
                    const o = {};
                    if (e.keyCode == Nl.delete) {
                        o.direction = "forward";
                        o.unit = "character"
                    } else if (e.keyCode == Nl.backspace) {
                        o.direction = "backward";
                        o.unit = "codePoint"
                    } else {
                        return
                    }
                    const r = Al.isMac ? e.altKey : e.ctrlKey;
                    o.unit = r ? "word" : o.unit;
                    o.sequence = ++i;
                    n(t, e.domEvent, o)
                });
                if (Al.isAndroid) {
                    e.on("beforeinput", (e, i) => {
                        if (i.domEvent.inputType != "deleteContentBackward") {
                            return
                        }
                        const o = {unit: "codepoint", direction: "backward", sequence: 1};
                        const r = i.domTarget.ownerDocument.defaultView.getSelection();
                        if (r.anchorNode == r.focusNode && r.anchorOffset + 1 != r.focusOffset) {
                            o.selectionToRemove = t.domConverter.domSelectionToView(r)
                        }
                        n(e, i.domEvent, o)
                    })
                }

                function n(t, i, n) {
                    let o;
                    e.once("delete", t => o = t, {priority: Number.POSITIVE_INFINITY});
                    e.fire("delete", new Ku(e, i, n));
                    if (o && o.stop.called) {
                        t.stop()
                    }
                }
            }

            observe() {
            }
        }

        class aP extends mp {
            static get pluginName() {
                return "Delete"
            }

            init() {
                const t = this.editor;
                const e = t.editing.view;
                const i = e.document;
                e.addObserver(sP);
                t.commands.add("forwardDelete", new rP(t, "forward"));
                t.commands.add("delete", new rP(t, "backward"));
                this.listenTo(i, "delete", (i, n) => {
                    const o = {unit: n.unit, sequence: n.sequence};
                    if (n.selectionToRemove) {
                        const e = t.model.createSelection();
                        const i = [];
                        for (const e of n.selectionToRemove.getRanges()) {
                            i.push(t.editing.mapper.toModelRange(e))
                        }
                        e.setTo(i);
                        o.selection = e
                    }
                    t.execute(n.direction == "forward" ? "forwardDelete" : "delete", o);
                    n.preventDefault();
                    e.scrollToTheSelection()
                });
                if (Al.isAndroid) {
                    let t = null;
                    this.listenTo(i, "delete", (e, i) => {
                        const n = i.domTarget.ownerDocument.defaultView.getSelection();
                        t = {
                            anchorNode: n.anchorNode,
                            anchorOffset: n.anchorOffset,
                            focusNode: n.focusNode,
                            focusOffset: n.focusOffset
                        }
                    }, {priority: "lowest"});
                    this.listenTo(i, "keyup", (e, i) => {
                        if (t) {
                            const e = i.domTarget.ownerDocument.defaultView.getSelection();
                            e.collapse(t.anchorNode, t.anchorOffset);
                            e.extend(t.focusNode, t.focusOffset);
                            t = null
                        }
                    })
                }
            }
        }

        class cP extends mp {
            static get requires() {
                return [oP, aP]
            }

            static get pluginName() {
                return "Typing"
            }
        }

        class lP extends Gp {
            constructor(t, e) {
                super(t);
                const i = t.t;
                this.labelView = new Mk(t);
                this.labelView.text = i("b");
                this.groupDropdownView = this._createGroupDropdown(e);
                this.groupDropdownView.panelPosition = t.uiLanguageDirection === "rtl" ? "se" : "sw";
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-special-characters-navigation"]},
                    children: [this.labelView, this.groupDropdownView]
                })
            }

            get currentGroupName() {
                return this.groupDropdownView.value
            }

            _createGroupDropdown(t) {
                const e = this.locale;
                const i = e.t;
                const n = Wb(e);
                const o = this._getCharacterGroupListItemDefinitions(n, t);
                n.set("value", o.first.model.label);
                n.buttonView.bind("label").to(n, "value");
                n.buttonView.set({isOn: false, withText: true, tooltip: i("le")});
                n.on("execute", t => {
                    n.value = t.source.label
                });
                n.delegate("execute").to(this);
                Ub(n, o);
                return n
            }

            _getCharacterGroupListItemDefinitions(t, e) {
                const i = new ys;
                for (const n of e) {
                    const e = {type: "button", model: new e_({label: n, withText: true})};
                    e.model.bind("isOn").to(t, "value", t => t === e.model.label);
                    i.add(e)
                }
                return i
            }
        }

        var dP = i(86);

        class uP extends Gp {
            constructor(t) {
                super(t);
                this.tiles = this.createCollection();
                this.setTemplate({
                    tag: "div",
                    children: [{
                        tag: "div",
                        attributes: {class: ["ck", "ck-character-grid__tiles"]},
                        children: this.tiles
                    }],
                    attributes: {class: ["ck", "ck-character-grid"]}
                })
            }

            createTile(t, e) {
                const i = new hb(this.locale);
                i.set({label: t, withText: true, class: "ck-character-grid__tile"});
                i.extendTemplate({attributes: {title: e}, on: {mouseover: i.bindTemplate.to("mouseover")}});
                i.on("mouseover", () => {
                    this.fire("tileHover", {name: e, character: t})
                });
                i.on("execute", () => {
                    this.fire("execute", {name: e, character: t})
                });
                return i
            }
        }

        var hP = i(88);

        class fP extends Gp {
            constructor(t) {
                super(t);
                const e = this.bindTemplate;
                this.set("character", null);
                this.set("name", null);
                this.bind("code").to(this, "character", gP);
                this.setTemplate({
                    tag: "div",
                    children: [{
                        tag: "span",
                        attributes: {class: ["ck-character-info__name"]},
                        children: [{text: e.to("name", t => t ? t : "​")}]
                    }, {
                        tag: "span",
                        attributes: {class: ["ck-character-info__code"]},
                        children: [{text: e.to("code")}]
                    }],
                    attributes: {class: ["ck", "ck-character-info"]}
                })
            }
        }

        function gP(t) {
            if (t === null) {
                return ""
            }
            const e = t.codePointAt(0).toString(16);
            return "U+" + ("0000" + e).slice(-4)
        }

        var mP = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10 2.5a7.47 7.47 0 0 1 4.231 1.31 7.268 7.268 0 0 1 2.703 3.454 7.128 7.128 0 0 1 .199 4.353c-.39 1.436-1.475 2.72-2.633 3.677h2.013c0-.226.092-.443.254-.603a.876.876 0 0 1 1.229 0c.163.16.254.377.254.603v.853c0 .209-.078.41-.22.567a.873.873 0 0 1-.547.28l-.101.006h-4.695a.517.517 0 0 1-.516-.518v-1.265c0-.21.128-.398.317-.489a5.601 5.601 0 0 0 2.492-2.371 5.459 5.459 0 0 0 .552-3.693 5.53 5.53 0 0 0-1.955-3.2A5.71 5.71 0 0 0 10 4.206 5.708 5.708 0 0 0 6.419 5.46 5.527 5.527 0 0 0 4.46 8.663a5.457 5.457 0 0 0 .554 3.695 5.6 5.6 0 0 0 2.497 2.37.55.55 0 0 1 .317.49v1.264c0 .286-.23.518-.516.518H2.618a.877.877 0 0 1-.614-.25.845.845 0 0 1-.254-.603v-.853c0-.226.091-.443.254-.603a.876.876 0 0 1 1.228 0c.163.16.255.377.255.603h1.925c-1.158-.958-2.155-2.241-2.545-3.678a7.128 7.128 0 0 1 .199-4.352 7.268 7.268 0 0 1 2.703-3.455A7.475 7.475 0 0 1 10 2.5z"/></svg>';
        var pP = i(90);
        const bP = "Все";

        class wP extends mp {
            static get requires() {
                return [cP]
            }

            static get pluginName() {
                return "SpecialCharacters"
            }

            constructor(t) {
                super(t);
                this._characters = new Map;
                this._groups = new Map
            }

            init() {
                const t = this.editor;
                const e = t.t;
                const i = t.commands.get("input");
                t.ui.componentFactory.add("specialCharacters", n => {
                    const o = Wb(n);
                    let r;
                    o.buttonView.set({label: e("b"), icon: mP, tooltip: true});
                    o.bind("isEnabled").to(i);
                    o.on("execute", (e, i) => {
                        t.execute("input", {text: i.character});
                        t.editing.view.focus()
                    });
                    o.on("change:isOpen", () => {
                        if (!r) {
                            r = this._createDropdownPanelContent(n, o);
                            o.panelView.children.add(r.navigationView);
                            o.panelView.children.add(r.gridView);
                            o.panelView.children.add(r.infoView)
                        }
                        r.infoView.set({character: null, name: null})
                    });
                    return o
                })
            }

            addItems(t, e) {
                if (t === bP) {
                    throw new ss["b"](`special-character-invalid-group-name: The name "${bP}" is reserved and cannot be used.`)
                }
                const i = this._getGroup(t);
                for (const t of e) {
                    i.add(t.title);
                    this._characters.set(t.title, t.character)
                }
            }

            getGroups() {
                return this._groups.keys()
            }

            getCharactersForGroup(t) {
                if (t === bP) {
                    return new Set(this._characters.keys())
                }
                return this._groups.get(t)
            }

            getCharacter(t) {
                return this._characters.get(t)
            }

            _getGroup(t) {
                if (!this._groups.has(t)) {
                    this._groups.set(t, new Set)
                }
                return this._groups.get(t)
            }

            _updateGrid(t, e) {
                e.tiles.clear();
                const i = this.getCharactersForGroup(t);
                for (const t of i) {
                    const i = this.getCharacter(t);
                    e.tiles.add(e.createTile(i, t))
                }
            }

            _createDropdownPanelContent(t, e) {
                const i = [...this.getGroups()];
                i.unshift(bP);
                const n = new lP(t, i);
                const o = new uP(t);
                const r = new fP(t);
                o.delegate("execute").to(e);
                o.on("tileHover", (t, e) => {
                    r.set(e)
                });
                n.on("execute", () => {
                    this._updateGrid(n.currentGroupName, o)
                });
                this._updateGrid(n.currentGroupName, o);
                return {navigationView: n, gridView: o, infoView: r}
            }
        }

        class kP extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.plugins.get("SpecialCharacters").addItems("Валюта", [{character: "$", title: e("u")}, {
                    character: "€",
                    title: e("v")
                }, {character: "¥", title: e("w")}, {character: "£", title: e("x")}, {
                    character: "¢",
                    title: e("y")
                }, {character: "₠", title: e("z")}, {character: "₡", title: e("aa")}, {
                    character: "₢",
                    title: e("ab")
                }, {character: "₣", title: e("ac")}, {character: "₤", title: e("ad")}, {
                    character: "¤",
                    title: e("ae")
                }, {character: "₿", title: e("af")}, {character: "₥", title: e("ag")}, {
                    character: "₦",
                    title: e("ah")
                }, {character: "₧", title: e("ai")}, {character: "₨", title: e("aj")}, {
                    character: "₩",
                    title: e("ak")
                }, {character: "₪", title: e("al")}, {character: "₫", title: e("am")}, {
                    character: "₭",
                    title: e("an")
                }, {character: "₮", title: e("ao")}, {character: "₯", title: e("ap")}, {
                    character: "₰",
                    title: e("aq")
                }, {character: "₱", title: e("ar")}, {character: "₲", title: e("as")}, {
                    character: "₳",
                    title: e("at")
                }, {character: "₴", title: e("au")}, {character: "₵", title: e("av")}, {
                    character: "₶",
                    title: e("aw")
                }, {character: "₷", title: e("ax")}, {character: "₸", title: e("ay")}, {
                    character: "₹",
                    title: e("az")
                }, {character: "₺", title: e("ba")}, {character: "₻", title: e("bb")}, {
                    character: "₼",
                    title: e("bc")
                }, {character: "₽", title: e("bd")}])
            }
        }

        class _P extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.plugins.get("SpecialCharacters").addItems("Математические", [{
                    character: "<",
                    title: e("gc")
                }, {character: ">", title: e("gd")}, {character: "≤", title: e("ge")}, {
                    character: "≥",
                    title: e("gf")
                }, {character: "–", title: e("gg")}, {character: "—", title: e("gh")}, {
                    character: "¯",
                    title: e("gi")
                }, {character: "‾", title: e("gj")}, {character: "°", title: e("gk")}, {
                    character: "−",
                    title: e("gl")
                }, {character: "±", title: e("gm")}, {character: "÷", title: e("gn")}, {
                    character: "⁄",
                    title: e("go")
                }, {character: "×", title: e("gp")}, {character: "ƒ", title: e("gq")}, {
                    character: "∫",
                    title: e("gr")
                }, {character: "∑", title: e("gs")}, {character: "∞", title: e("gt")}, {
                    character: "√",
                    title: e("gu")
                }, {character: "∼", title: e("gv")}, {character: "≅", title: e("gw")}, {
                    character: "≈",
                    title: e("gx")
                }, {character: "≠", title: e("gy")}, {character: "≡", title: e("gz")}, {
                    character: "∈",
                    title: e("ha")
                }, {character: "∉", title: e("hb")}, {character: "∋", title: e("hc")}, {
                    character: "∏",
                    title: e("hd")
                }, {character: "∧", title: e("he")}, {character: "∨", title: e("hf")}, {
                    character: "¬",
                    title: e("hg")
                }, {character: "∩", title: e("hh")}, {character: "∪", title: e("hi")}, {
                    character: "∂",
                    title: e("hj")
                }, {character: "∀", title: e("hk")}, {character: "∃", title: e("hl")}, {
                    character: "∅",
                    title: e("hm")
                }, {character: "∇", title: e("hn")}, {character: "∗", title: e("ho")}, {
                    character: "∝",
                    title: e("hp")
                }, {character: "∠", title: e("hq")}, {character: "¼", title: e("hr")}, {
                    character: "½",
                    title: e("hs")
                }, {character: "¾", title: e("ht")}])
            }
        }

        class vP extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.plugins.get("SpecialCharacters").addItems("Стрелки", [{title: e("c"), character: "⇐"}, {
                    title: e("d"),
                    character: "⇒"
                }, {title: e("e"), character: "⇑"}, {title: e("f"), character: "⇓"}, {
                    title: e("g"),
                    character: "⇠"
                }, {title: e("h"), character: "⇢"}, {title: e("i"), character: "⇡"}, {
                    title: e("j"),
                    character: "⇣"
                }, {title: e("k"), character: "⇤"}, {title: e("l"), character: "⇥"}, {
                    title: e("m"),
                    character: "⤒"
                }, {title: e("n"), character: "⤓"}, {title: e("o"), character: "↨"}, {
                    title: e("p"),
                    character: "🔙"
                }, {title: e("q"), character: "🔚"}, {title: e("r"), character: "🔛"}, {
                    title: e("s"),
                    character: "🔜"
                }, {title: e("t"), character: "🔝"}])
            }
        }

        class yP extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.plugins.get("SpecialCharacters").addItems("Латинские символы", [{
                    character: "Ā",
                    title: e("be")
                }, {character: "ā", title: e("bf")}, {character: "Ă", title: e("bg")}, {
                    character: "ă",
                    title: e("bh")
                }, {character: "Ą", title: e("bi")}, {character: "ą", title: e("bj")}, {
                    character: "Ć",
                    title: e("bk")
                }, {character: "ć", title: e("bl")}, {character: "Ĉ", title: e("bm")}, {
                    character: "ĉ",
                    title: e("bn")
                }, {character: "Ċ", title: e("bo")}, {character: "ċ", title: e("bp")}, {
                    character: "Č",
                    title: e("bq")
                }, {character: "č", title: e("br")}, {character: "Ď", title: e("bs")}, {
                    character: "ď",
                    title: e("bt")
                }, {character: "Đ", title: e("bu")}, {character: "đ", title: e("bv")}, {
                    character: "Ē",
                    title: e("bw")
                }, {character: "ē", title: e("bx")}, {character: "Ĕ", title: e("by")}, {
                    character: "ĕ",
                    title: e("bz")
                }, {character: "Ė", title: e("ca")}, {character: "ė", title: e("cb")}, {
                    character: "Ę",
                    title: e("cc")
                }, {character: "ę", title: e("cd")}, {character: "Ě", title: e("ce")}, {
                    character: "ě",
                    title: e("cf")
                }, {character: "Ĝ", title: e("cg")}, {character: "ĝ", title: e("ch")}, {
                    character: "Ğ",
                    title: e("ci")
                }, {character: "ğ", title: e("cj")}, {character: "Ġ", title: e("ck")}, {
                    character: "ġ",
                    title: e("cl")
                }, {character: "Ģ", title: e("cm")}, {character: "ģ", title: e("cn")}, {
                    character: "Ĥ",
                    title: e("co")
                }, {character: "ĥ", title: e("cp")}, {character: "Ħ", title: e("cq")}, {
                    character: "ħ",
                    title: e("cr")
                }, {character: "Ĩ", title: e("cs")}, {character: "ĩ", title: e("ct")}, {
                    character: "Ī",
                    title: e("cu")
                }, {character: "ī", title: e("cv")}, {character: "Ĭ", title: e("cw")}, {
                    character: "ĭ",
                    title: e("cx")
                }, {character: "Į", title: e("cy")}, {character: "į", title: e("cz")}, {
                    character: "İ",
                    title: e("da")
                }, {character: "ı", title: e("db")}, {character: "Ĳ", title: e("dc")}, {
                    character: "ĳ",
                    title: e("dd")
                }, {character: "Ĵ", title: e("de")}, {character: "ĵ", title: e("df")}, {
                    character: "Ķ",
                    title: e("dg")
                }, {character: "ķ", title: e("dh")}, {character: "ĸ", title: e("di")}, {
                    character: "Ĺ",
                    title: e("dj")
                }, {character: "ĺ", title: e("dk")}, {character: "Ļ", title: e("dl")}, {
                    character: "ļ",
                    title: e("dm")
                }, {character: "Ľ", title: e("dn")}, {character: "ľ", title: e("do")}, {
                    character: "Ŀ",
                    title: e("dp")
                }, {character: "ŀ", title: e("dq")}, {character: "Ł", title: e("dr")}, {
                    character: "ł",
                    title: e("ds")
                }, {character: "Ń", title: e("dt")}, {character: "ń", title: e("du")}, {
                    character: "Ņ",
                    title: e("dv")
                }, {character: "ņ", title: e("dw")}, {character: "Ň", title: e("dx")}, {
                    character: "ň",
                    title: e("dy")
                }, {character: "ŉ", title: e("dz")}, {character: "Ŋ", title: e("ea")}, {
                    character: "ŋ",
                    title: e("eb")
                }, {character: "Ō", title: e("ec")}, {character: "ō", title: e("ed")}, {
                    character: "Ŏ",
                    title: e("ee")
                }, {character: "ŏ", title: e("ef")}, {character: "Ő", title: e("eg")}, {
                    character: "ő",
                    title: e("eh")
                }, {character: "Œ", title: e("ei")}, {character: "œ", title: e("ej")}, {
                    character: "Ŕ",
                    title: e("ek")
                }, {character: "ŕ", title: e("el")}, {character: "Ŗ", title: e("em")}, {
                    character: "ŗ",
                    title: e("en")
                }, {character: "Ř", title: e("eo")}, {character: "ř", title: e("ep")}, {
                    character: "Ś",
                    title: e("eq")
                }, {character: "ś", title: e("er")}, {character: "Ŝ", title: e("es")}, {
                    character: "ŝ",
                    title: e("et")
                }, {character: "Ş", title: e("eu")}, {character: "ş", title: e("ev")}, {
                    character: "Š",
                    title: e("ew")
                }, {character: "š", title: e("ex")}, {character: "Ţ", title: e("ey")}, {
                    character: "ţ",
                    title: e("ez")
                }, {character: "Ť", title: e("fa")}, {character: "ť", title: e("fb")}, {
                    character: "Ŧ",
                    title: e("fc")
                }, {character: "ŧ", title: e("fd")}, {character: "Ũ", title: e("fe")}, {
                    character: "ũ",
                    title: e("ff")
                }, {character: "Ū", title: e("fg")}, {character: "ū", title: e("fh")}, {
                    character: "Ŭ",
                    title: e("fi")
                }, {character: "ŭ", title: e("fj")}, {character: "Ů", title: e("fk")}, {
                    character: "ů",
                    title: e("fl")
                }, {character: "Ű", title: e("fm")}, {character: "ű", title: e("fn")}, {
                    character: "Ų",
                    title: e("fo")
                }, {character: "ų", title: e("fp")}, {character: "Ŵ", title: e("fq")}, {
                    character: "ŵ",
                    title: e("fr")
                }, {character: "Ŷ", title: e("fs")}, {character: "ŷ", title: e("ft")}, {
                    character: "Ÿ",
                    title: e("fu")
                }, {character: "Ź", title: e("fv")}, {character: "ź", title: e("fw")}, {
                    character: "Ż",
                    title: e("fx")
                }, {character: "ż", title: e("fy")}, {character: "Ž", title: e("fz")}, {
                    character: "ž",
                    title: e("ga")
                }, {character: "ſ", title: e("gb")}])
            }
        }

        class xP extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.plugins.get("SpecialCharacters").addItems("Текстовые символы", [{
                    character: "‹",
                    title: e("hu")
                }, {character: "›", title: e("hv")}, {character: "«", title: e("hw")}, {
                    character: "»",
                    title: e("hx")
                }, {character: "‘", title: e("hy")}, {character: "’", title: e("hz")}, {
                    character: "“",
                    title: e("ia")
                }, {character: "”", title: e("ib")}, {character: "‚", title: e("ic")}, {
                    character: "„",
                    title: e("id")
                }, {character: "¡", title: e("ie")}, {character: "¿", title: e("if")}, {
                    character: "‥",
                    title: e("ig")
                }, {character: "…", title: e("ih")}, {character: "‡", title: e("ii")}, {
                    character: "‰",
                    title: e("ij")
                }, {character: "‱", title: e("ik")}, {character: "‼", title: e("il")}, {
                    character: "⁈",
                    title: e("im")
                }, {character: "⁉", title: e("in")}, {character: "⁇", title: e("io")}, {
                    character: "©",
                    title: e("ip")
                }, {character: "®", title: e("iq")}, {character: "™", title: e("ir")}, {
                    character: "§",
                    title: e("is")
                }, {character: "¶", title: e("it")}, {character: "⁋", title: e("iu")}])
            }
        }

        class CP extends mp {
            static get requires() {
                return [kP, xP, _P, vP, yP]
            }
        }

        const AP = "strikethrough";

        class TP extends mp {
            static get pluginName() {
                return "StrikethroughEditing"
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: AP});
                t.model.schema.setAttributeProperties(AP, {isFormatting: true, copyOnEnter: true});
                t.conversion.attributeToElement({
                    model: AP,
                    view: "s",
                    upcastAlso: ["del", "strike", {styles: {"text-decoration": "line-through"}}]
                });
                t.commands.add(AP, new yk(t, AP));
                t.keystrokes.set("CTRL+SHIFT+X", "strikethrough")
            }
        }

        var PP = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7 16.4c-.8-.4-1.5-.9-2.2-1.5a.6.6 0 0 1-.2-.5l.3-.6h1c1 1.2 2.1 1.7 3.7 1.7 1 0 1.8-.3 2.3-.6.6-.4.6-1.2.6-1.3.2-1.2-.9-2.1-.9-2.1h2.1c.3.7.4 1.2.4 1.7v.8l-.6 1.2c-.6.8-1.1 1-1.6 1.2a6 6 0 0 1-2.4.6c-1 0-1.8-.3-2.5-.6zM6.8 9L6 8.3c-.4-.5-.5-.8-.5-1.6 0-.7.1-1.3.5-1.8.4-.6 1-1 1.6-1.3a6.3 6.3 0 0 1 4.7 0 4 4 0 0 1 1.7 1l.3.7c0 .1.2.4-.2.7-.4.2-.9.1-1 0a3 3 0 0 0-1.2-1c-.4-.2-1-.3-2-.4-.7 0-1.4.2-2 .6-.8.6-1 .8-1 1.5 0 .8.5 1 1.2 1.5.6.4 1.1.7 1.9 1H6.8z"/><path d="M3 10.5V9h14v1.5z"/></svg>';
        const SP = "strikethrough";

        class EP extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add(SP, i => {
                    const n = t.commands.get(SP);
                    const o = new hb(i);
                    o.set({label: e("jk"), icon: PP, keystroke: "CTRL+SHIFT+X", tooltip: true, isToggleable: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute(SP);
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class RP extends mp {
            static get requires() {
                return [TP, EP]
            }

            static get pluginName() {
                return "Strikethrough"
            }
        }

        const OP = "subscript";

        class IP extends mp {
            static get pluginName() {
                return "SubscriptEditing"
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: OP});
                t.model.schema.setAttributeProperties(OP, {isFormatting: true, copyOnEnter: true});
                t.conversion.attributeToElement({
                    model: OP,
                    view: "sub",
                    upcastAlso: [{styles: {"vertical-align": "sub"}}]
                });
                t.commands.add(OP, new yk(t, OP))
            }
        }

        var VP = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M7.03 10.349l3.818-3.819a.8.8 0 1 1 1.132 1.132L8.16 11.48l3.819 3.818a.8.8 0 1 1-1.132 1.132L7.03 12.61l-3.818 3.82a.8.8 0 1 1-1.132-1.132L5.9 11.48 2.08 7.662A.8.8 0 1 1 3.212 6.53l3.818 3.82zm8.147 7.829h2.549c.254 0 .447.05.58.152a.49.49 0 0 1 .201.413.54.54 0 0 1-.159.393c-.105.108-.266.162-.48.162h-3.594c-.245 0-.435-.066-.572-.197a.621.621 0 0 1-.205-.463c0-.114.044-.265.132-.453a1.62 1.62 0 0 1 .288-.444c.433-.436.824-.81 1.172-1.122.348-.312.597-.517.747-.615.267-.183.49-.368.667-.553.177-.185.312-.375.405-.57.093-.194.139-.384.139-.57a1.008 1.008 0 0 0-.554-.917 1.197 1.197 0 0 0-.56-.133c-.426 0-.761.182-1.005.546a2.332 2.332 0 0 0-.164.39 1.609 1.609 0 0 1-.258.488c-.096.114-.237.17-.423.17a.558.558 0 0 1-.405-.156.568.568 0 0 1-.161-.427c0-.218.05-.446.151-.683.101-.238.252-.453.452-.646s.454-.349.762-.467a2.998 2.998 0 0 1 1.081-.178c.498 0 .923.076 1.274.228a1.916 1.916 0 0 1 1.004 1.032 1.984 1.984 0 0 1-.156 1.794c-.2.32-.405.572-.613.754-.208.182-.558.468-1.048.857-.49.39-.826.691-1.008.906a2.703 2.703 0 0 0-.24.309z"/></svg>';
        const NP = "subscript";

        class MP extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add(NP, i => {
                    const n = t.commands.get(NP);
                    const o = new hb(i);
                    o.set({label: e("jl"), icon: VP, tooltip: true, isToggleable: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute(NP);
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class BP extends mp {
            static get requires() {
                return [IP, MP]
            }

            static get pluginName() {
                return "Subscript"
            }
        }

        const zP = "superscript";

        class LP extends mp {
            static get pluginName() {
                return "SuperscriptEditing"
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: zP});
                t.model.schema.setAttributeProperties(zP, {isFormatting: true, copyOnEnter: true});
                t.conversion.attributeToElement({
                    model: zP,
                    view: "sup",
                    upcastAlso: [{styles: {"vertical-align": "super"}}]
                });
                t.commands.add(zP, new yk(t, zP))
            }
        }

        var FP = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M15.677 8.678h2.549c.254 0 .447.05.58.152a.49.49 0 0 1 .201.413.54.54 0 0 1-.159.393c-.105.108-.266.162-.48.162h-3.594c-.245 0-.435-.066-.572-.197a.621.621 0 0 1-.205-.463c0-.114.044-.265.132-.453a1.62 1.62 0 0 1 .288-.444c.433-.436.824-.81 1.172-1.122.348-.312.597-.517.747-.615.267-.183.49-.368.667-.553.177-.185.312-.375.405-.57.093-.194.139-.384.139-.57a1.008 1.008 0 0 0-.554-.917 1.197 1.197 0 0 0-.56-.133c-.426 0-.761.182-1.005.546a2.332 2.332 0 0 0-.164.39 1.609 1.609 0 0 1-.258.488c-.096.114-.237.17-.423.17a.558.558 0 0 1-.405-.156.568.568 0 0 1-.161-.427c0-.218.05-.446.151-.683.101-.238.252-.453.452-.646s.454-.349.762-.467a2.998 2.998 0 0 1 1.081-.178c.498 0 .923.076 1.274.228a1.916 1.916 0 0 1 1.004 1.032 1.984 1.984 0 0 1-.156 1.794c-.2.32-.405.572-.613.754-.208.182-.558.468-1.048.857-.49.39-.826.691-1.008.906a2.703 2.703 0 0 0-.24.309zM7.03 10.349l3.818-3.819a.8.8 0 1 1 1.132 1.132L8.16 11.48l3.819 3.818a.8.8 0 1 1-1.132 1.132L7.03 12.61l-3.818 3.82a.8.8 0 1 1-1.132-1.132L5.9 11.48 2.08 7.662A.8.8 0 1 1 3.212 6.53l3.818 3.82z"/></svg>';
        const DP = "superscript";

        class jP extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add(DP, i => {
                    const n = t.commands.get(DP);
                    const o = new hb(i);
                    o.set({label: e("jm"), icon: FP, tooltip: true, isToggleable: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute(DP);
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class HP extends mp {
            static get requires() {
                return [LP, jP]
            }

            static get pluginName() {
                return "Superscript"
            }
        }

        function WP(t, e) {
            let i = e.parent;
            while (i) {
                if (i.name === t) {
                    return i
                }
                i = i.parent
            }
        }

        function qP(t, e, i, n, o = 1) {
            if (e > o) {
                n.setAttribute(t, e, i)
            } else {
                n.removeAttribute(t, i)
            }
        }

        function UP(t, e, i = {}) {
            const n = t.createElement("tableCell", i);
            t.insertElement("paragraph", n);
            t.insert(n, e)
        }

        function $P(t) {
            if (!t || !ct(t)) {
                return t
            }
            const {top: e, right: i, bottom: n, left: o} = t;
            if (e == i && i == n && n == o) {
                return e
            }
        }

        function GP(t, e) {
            const i = parseFloat(t);
            if (Number.isNaN(i)) {
                return t
            }
            if (String(i) !== String(t)) {
                return t
            }
            return `${i}${e}`
        }

        function KP(t, e) {
            const i = e.parent.parent;
            const n = parseInt(i.getAttribute("headingColumns") || 0);
            const {column: o} = t.getCellLocation(e);
            return !!n && o < n
        }

        function JP() {
            return t => {
                t.on("element:table", (t, e, i) => {
                    const n = e.viewItem;
                    if (!i.consumable.test(n, {name: true})) {
                        return
                    }
                    const {rows: o, headingRows: r, headingColumns: s} = QP(n);
                    const a = {};
                    if (s) {
                        a.headingColumns = s
                    }
                    if (r) {
                        a.headingRows = r
                    }
                    const c = i.writer.createElement("table", a);
                    const l = i.splitToAllowedParent(c, e.modelCursor);
                    if (!l) {
                        return
                    }
                    i.writer.insert(c, l.position);
                    i.consumable.consume(n, {name: true});
                    if (o.length) {
                        o.forEach(t => i.convertItem(t, i.writer.createPositionAt(c, "end")))
                    } else {
                        const t = i.writer.createElement("tableRow");
                        i.writer.insert(t, i.writer.createPositionAt(c, "end"));
                        UP(i.writer, i.writer.createPositionAt(t, "end"))
                    }
                    e.modelRange = i.writer.createRange(i.writer.createPositionBefore(c), i.writer.createPositionAfter(c));
                    if (l.cursorParent) {
                        e.modelCursor = i.writer.createPositionAt(l.cursorParent, 0)
                    } else {
                        e.modelCursor = e.modelRange.end
                    }
                })
            }
        }

        function YP(t) {
            return e => {
                e.on(`element:${t}`, (t, e, i) => {
                    const n = e.viewItem;
                    if (!i.consumable.test(n, {name: true})) {
                        return
                    }
                    const o = i.writer.createElement("tableCell");
                    const r = i.splitToAllowedParent(o, e.modelCursor);
                    if (!r) {
                        return
                    }
                    i.writer.insert(o, r.position);
                    i.consumable.consume(n, {name: true});
                    const s = i.writer.createPositionAt(o, 0);
                    i.convertChildren(n, s);
                    if (!o.childCount) {
                        i.writer.insertElement("paragraph", s)
                    }
                    e.modelRange = i.writer.createRange(i.writer.createPositionBefore(o), i.writer.createPositionAfter(o));
                    e.modelCursor = e.modelRange.end
                })
            }
        }

        function QP(t) {
            const e = {headingRows: 0, headingColumns: 0};
            const i = [];
            const n = [];
            let o;
            for (const r of Array.from(t.getChildren())) {
                if (r.name === "tbody" || r.name === "thead" || r.name === "tfoot") {
                    if (r.name === "thead" && !o) {
                        o = r
                    }
                    const t = Array.from(r.getChildren()).filter(t => t.is("element", "tr"));
                    for (const r of t) {
                        if (r.parent.name === "thead" && r.parent === o) {
                            e.headingRows++;
                            i.push(r)
                        } else {
                            n.push(r);
                            const t = XP(r, e, o);
                            if (t > e.headingColumns) {
                                e.headingColumns = t
                            }
                        }
                    }
                }
            }
            e.rows = [...i, ...n];
            return e
        }

        function XP(t) {
            let e = 0;
            let i = 0;
            const n = Array.from(t.getChildren()).filter(t => t.name === "th" || t.name === "td");
            while (i < n.length && n[i].name === "th") {
                const t = n[i];
                const o = parseInt(t.getAttribute("colspan") || 1);
                e = e + o;
                i++
            }
            return e
        }

        class ZP {
            constructor(t, e = {}) {
                this.table = t;
                this.startRow = e.startRow || 0;
                this.endRow = typeof e.endRow == "number" ? e.endRow : undefined;
                this.includeSpanned = !!e.includeSpanned;
                this.column = typeof e.column == "number" ? e.column : undefined;
                this._skipRows = new Set;
                this._row = 0;
                this._column = 0;
                this._cellIndex = 0;
                this._spannedCells = new Map;
                this._nextCellAtColumn = -1
            }

            [Symbol.iterator]() {
                return this
            }

            next() {
                const t = this.table.getChild(this._row);
                if (!t || this._isOverEndRow()) {
                    return {done: true}
                }
                let e, i, n;
                if (this._isSpanned(this._row, this._column)) {
                    e = this._getSpanned(this._row, this._column);
                    i = !this.includeSpanned || this._shouldSkipRow() || this._shouldSkipColumn();
                    n = this._formatOutValue(e, this._column, true)
                } else {
                    e = t.getChild(this._cellIndex);
                    if (!e) {
                        this._row++;
                        this._column = 0;
                        this._cellIndex = 0;
                        this._nextCellAtColumn = -1;
                        return this.next()
                    }
                    const o = parseInt(e.getAttribute("colspan") || 1);
                    const r = parseInt(e.getAttribute("rowspan") || 1);
                    if (o > 1 || r > 1) {
                        this._recordSpans(this._row, this._column, r, o, e)
                    }
                    this._nextCellAtColumn = this._column + o;
                    i = this._shouldSkipRow() || this._shouldSkipColumn();
                    n = this._formatOutValue(e, this._column, false, r, o)
                }
                this._column++;
                if (this._column == this._nextCellAtColumn) {
                    this._cellIndex++
                }
                return i ? this.next() : n
            }

            skipRow(t) {
                this._skipRows.add(t)
            }

            _isOverEndRow() {
                return this.endRow !== undefined && this._row > this.endRow
            }

            _formatOutValue(t, e, i, n = 1, o = 1) {
                return {
                    done: false,
                    value: {
                        cell: t,
                        row: this._row,
                        column: e,
                        isSpanned: i,
                        rowspan: n,
                        colspan: o,
                        cellIndex: this._cellIndex
                    }
                }
            }

            _shouldSkipRow() {
                const t = this._row < this.startRow;
                const e = this._skipRows.has(this._row);
                return t || e
            }

            _shouldSkipColumn() {
                if (this.column === undefined) {
                    return false
                }
                return this.column != this._column
            }

            _isSpanned(t, e) {
                if (!this._spannedCells.has(t)) {
                    return false
                }
                const i = this._spannedCells.get(t);
                return i.has(e)
            }

            _getSpanned(t, e) {
                return this._spannedCells.get(t).get(e)
            }

            _recordSpans(t, e, i, n, o) {
                for (let i = e + 1; i <= e + n - 1; i++) {
                    this._markSpannedCell(t, i, o)
                }
                for (let r = t + 1; r < t + i; r++) {
                    for (let t = e; t <= e + n - 1; t++) {
                        this._markSpannedCell(r, t, o)
                    }
                }
            }

            _markSpannedCell(t, e, i) {
                if (!this._spannedCells.has(t)) {
                    this._spannedCells.set(t, new Map)
                }
                const n = this._spannedCells.get(t);
                n.set(e, i)
            }
        }

        function tS(t, e) {
            e.setCustomProperty("table", true, t);
            return X_(t, e, {hasSelectionHandle: true})
        }

        function eS(t) {
            return !!t.getCustomProperty("table") && Q_(t)
        }

        function iS(t) {
            const e = t.getSelectedElement();
            if (e && eS(e)) {
                return e
            }
            return null
        }

        function nS(t) {
            const e = WP("table", t.getFirstPosition());
            if (e && eS(e.parent)) {
                return e.parent
            }
            return null
        }

        function oS(t) {
            const e = [];
            for (const i of aS(t.getRanges())) {
                const t = i.getContainedElement();
                if (t && t.is("tableCell")) {
                    e.push(t)
                }
            }
            return e
        }

        function rS(t) {
            const e = [];
            for (const i of t.getRanges()) {
                const t = WP("tableCell", i.start);
                if (t) {
                    e.push(t)
                }
            }
            return e
        }

        function sS(t) {
            const e = oS(t);
            if (e.length) {
                return e
            }
            return rS(t)
        }

        function aS(t) {
            return Array.from(t).sort(cS)
        }

        function cS(t, e) {
            const i = t.start;
            const n = e.start;
            if (i.isEqual(n)) {
                return 0
            }
            return i.isBefore(n) ? -1 : 1
        }

        function lS(t = {}) {
            return e => e.on("insert:table", (e, i, n) => {
                const o = i.item;
                if (!n.consumable.consume(o, "insert")) {
                    return
                }
                n.consumable.consume(o, "attribute:headingRows:table");
                n.consumable.consume(o, "attribute:headingColumns:table");
                const r = t && t.asWidget;
                const s = n.writer.createContainerElement("figure", {class: "table"});
                const a = n.writer.createContainerElement("table");
                n.writer.insert(n.writer.createPositionAt(s, 0), a);
                let c;
                if (r) {
                    c = tS(s, n.writer)
                }
                const l = new ZP(o);
                const d = {
                    headingRows: o.getAttribute("headingRows") || 0,
                    headingColumns: o.getAttribute("headingColumns") || 0
                };
                const u = new Map;
                for (const e of l) {
                    const {row: i, cell: r} = e;
                    const s = vS(_S(i, d), a, n);
                    const c = o.getChild(i);
                    const l = u.get(i) || wS(c, i, s, n);
                    u.set(i, l);
                    n.consumable.consume(r, "insert");
                    const h = n.writer.createPositionAt(l, "end");
                    bS(e, d, h, n, t)
                }
                const h = n.mapper.toViewPosition(i.range.start);
                n.mapper.bindElements(o, r ? c : s);
                n.writer.insert(h, r ? c : s)
            })
        }

        function dS(t = {}) {
            return e => e.on("insert:tableRow", (e, i, n) => {
                const o = i.item;
                if (!n.consumable.consume(o, "insert")) {
                    return
                }
                const r = o.parent;
                const s = n.mapper.toViewElement(r);
                const a = TS(s);
                const c = r.getChildIndex(o);
                const l = new ZP(r, {startRow: c, endRow: c});
                const d = {
                    headingRows: r.getAttribute("headingRows") || 0,
                    headingColumns: r.getAttribute("headingColumns") || 0
                };
                const u = new Map;
                for (const e of l) {
                    const i = vS(_S(c, d), a, n);
                    const r = u.get(c) || wS(o, c, i, n);
                    u.set(c, r);
                    n.consumable.consume(e.cell, "insert");
                    const s = n.writer.createPositionAt(r, "end");
                    bS(e, d, s, n, t)
                }
            })
        }

        function uS(t = {}) {
            return e => e.on("insert:tableCell", (e, i, n) => {
                const o = i.item;
                if (!n.consumable.consume(o, "insert")) {
                    return
                }
                const r = o.parent;
                const s = r.parent;
                const a = s.getChildIndex(r);
                const c = new ZP(s, {startRow: a, endRow: a});
                const l = {
                    headingRows: s.getAttribute("headingRows") || 0,
                    headingColumns: s.getAttribute("headingColumns") || 0
                };
                for (const e of c) {
                    if (e.cell === o) {
                        const i = n.mapper.toViewElement(r);
                        const s = n.writer.createPositionAt(i, r.getChildIndex(o));
                        bS(e, l, s, n, t);
                        return
                    }
                }
            })
        }

        function hS(t = {}) {
            const e = !!t.asWidget;
            return t => t.on("attribute:headingRows:table", (t, i, n) => {
                const o = i.item;
                if (!n.consumable.consume(i.item, t.name)) {
                    return
                }
                const r = n.mapper.toViewElement(o);
                const s = TS(r);
                const a = i.attributeOldValue;
                const c = i.attributeNewValue;
                if (c > a) {
                    const t = Array.from(o.getChildren()).filter(({index: t}) => l(t, a - 1, c));
                    const i = vS("thead", s, n);
                    AS(t, i, n, "end");
                    for (const i of t) {
                        for (const t of i.getChildren()) {
                            mS(t, "th", n, e)
                        }
                    }
                    CS("tbody", s, n)
                } else {
                    const t = Array.from(o.getChildren()).filter(({index: t}) => l(t, c - 1, a)).reverse();
                    const i = vS("tbody", s, n);
                    AS(t, i, n, 0);
                    const r = new ZP(o, {startRow: c ? c - 1 : c, endRow: a - 1});
                    const d = {
                        headingRows: o.getAttribute("headingRows") || 0,
                        headingColumns: o.getAttribute("headingColumns") || 0
                    };
                    for (const t of r) {
                        pS(t, d, n, e)
                    }
                    CS("thead", s, n)
                }

                function l(t, e, i) {
                    return t > e && t < i
                }
            })
        }

        function fS(t = {}) {
            const e = !!t.asWidget;
            return t => t.on("attribute:headingColumns:table", (t, i, n) => {
                const o = i.item;
                if (!n.consumable.consume(i.item, t.name)) {
                    return
                }
                const r = {
                    headingRows: o.getAttribute("headingRows") || 0,
                    headingColumns: o.getAttribute("headingColumns") || 0
                };
                const s = i.attributeOldValue;
                const a = i.attributeNewValue;
                const c = (s > a ? s : a) - 1;
                for (const t of new ZP(o)) {
                    if (t.column > c) {
                        continue
                    }
                    pS(t, r, n, e)
                }
            })
        }

        function gS() {
            return t => t.on("remove:tableRow", (t, e, i) => {
                t.stop();
                const n = i.writer;
                const o = i.mapper;
                const r = o.toViewPosition(e.position).getLastMatchingPosition(t => !t.item.is("tr"));
                const s = r.nodeAfter;
                const a = s.parent;
                const c = n.createRangeOn(s);
                const l = n.remove(c);
                for (const t of n.createRangeIn(l).getItems()) {
                    o.unbindViewElement(t)
                }
                if (!a.childCount) {
                    n.remove(n.createRangeOn(a))
                }
            }, {priority: "higher"})
        }

        function mS(t, e, i, n) {
            const o = i.writer;
            const r = i.mapper.toViewElement(t);
            if (!r) {
                return
            }
            let s;
            if (n) {
                const t = o.createEditableElement(e, r.getAttributes());
                s = iv(t, o);
                o.insert(o.createPositionAfter(r), s);
                o.move(o.createRangeIn(r), o.createPositionAt(s, 0));
                o.remove(o.createRangeOn(r))
            } else {
                s = o.rename(e, r)
            }
            i.mapper.unbindViewElement(r);
            i.mapper.bindElements(t, s)
        }

        function pS(t, e, i, n) {
            const {cell: o} = t;
            const r = kS(t, e);
            const s = i.mapper.toViewElement(o);
            if (s && s.name !== r) {
                mS(o, r, i, n)
            }
        }

        function bS(t, e, i, n, o) {
            const r = o && o.asWidget;
            const s = kS(t, e);
            const a = r ? iv(n.writer.createEditableElement(s), n.writer) : n.writer.createContainerElement(s);
            const c = t.cell;
            const l = c.getChild(0);
            const d = c.childCount === 1 && l.name === "paragraph";
            n.writer.insert(i, a);
            if (d && !PS(l)) {
                const t = c.getChild(0);
                const e = n.writer.createPositionAt(a, "end");
                n.consumable.consume(t, "insert");
                if (o.asWidget) {
                    const i = n.writer.createContainerElement("span", {style: "display:inline-block"});
                    n.mapper.bindElements(t, i);
                    n.writer.insert(e, i);
                    n.mapper.bindElements(c, a)
                } else {
                    n.mapper.bindElements(c, a);
                    n.mapper.bindElements(t, a)
                }
            } else {
                n.mapper.bindElements(c, a)
            }
        }

        function wS(t, e, i, n) {
            n.consumable.consume(t, "insert");
            const o = n.writer.createContainerElement("tr");
            n.mapper.bindElements(t, o);
            const r = t.parent.getAttribute("headingRows") || 0;
            const s = r > 0 && e >= r ? e - r : e;
            const a = n.writer.createPositionAt(i, s);
            n.writer.insert(a, o);
            return o
        }

        function kS(t, e) {
            const {row: i, column: n} = t;
            const {headingColumns: o, headingRows: r} = e;
            const s = r && r > i;
            if (s) {
                return "th"
            }
            const a = o && o > n;
            return a ? "th" : "td"
        }

        function _S(t, e) {
            return t < e.headingRows ? "thead" : "tbody"
        }

        function vS(t, e, i) {
            const n = yS(t, e);
            return n ? n : xS(t, e, i)
        }

        function yS(t, e) {
            for (const i of e.getChildren()) {
                if (i.name == t) {
                    return i
                }
            }
        }

        function xS(t, e, i) {
            const n = i.writer.createContainerElement(t);
            const o = i.writer.createPositionAt(e, t == "tbody" ? "end" : 0);
            i.writer.insert(o, n);
            return n
        }

        function CS(t, e, i) {
            const n = yS(t, e);
            if (n && n.childCount === 0) {
                i.writer.remove(i.writer.createRangeOn(n))
            }
        }

        function AS(t, e, i, n) {
            for (const o of t) {
                const t = i.mapper.toViewElement(o);
                if (t) {
                    i.writer.move(i.writer.createRangeOn(t), i.writer.createPositionAt(e, n))
                }
            }
        }

        function TS(t) {
            for (const e of t.getChildren()) {
                if (e.name === "table") {
                    return e
                }
            }
        }

        function PS(t) {
            return !![...t.getAttributeKeys()].length
        }

        class SS extends jw {
            refresh() {
                const t = this.editor.model;
                const e = t.document.selection;
                const i = t.schema;
                const n = ES(e.getFirstPosition());
                this.isEnabled = i.checkChild(n, "table")
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.document.selection;
                const n = this.editor.plugins.get("TableUtils");
                const o = parseInt(t.rows) || 2;
                const r = parseInt(t.columns) || 2;
                const s = nv(i, e);
                e.change(t => {
                    const i = n.createTable(t, o, r);
                    e.insertContent(i, s);
                    t.setSelection(t.createPositionAt(i.getNodeByPath([0, 0, 0]), 0))
                })
            }
        }

        function ES(t) {
            const e = t.parent;
            return e === e.root ? e : e.parent
        }

        class RS extends jw {
            constructor(t, e = {}) {
                super(t);
                this.order = e.order || "below"
            }

            refresh() {
                const t = this.editor.model.document.selection;
                const e = WP("table", t.getFirstPosition());
                this.isEnabled = !!e
            }

            execute() {
                const t = this.editor;
                const e = t.model.document.selection;
                const i = t.plugins.get("TableUtils");
                const n = this.order === "above";
                const o = n ? e.getFirstPosition() : e.getLastPosition();
                const r = n ? e.getFirstRange() : e.getLastRange();
                const s = r.getContainedElement() || WP("tableCell", o);
                const a = s.parent;
                const c = a.parent;
                const l = c.getChildIndex(a);
                i.insertRows(c, {rows: 1, at: this.order === "below" ? l + 1 : l})
            }
        }

        class OS extends jw {
            constructor(t, e = {}) {
                super(t);
                this.order = e.order || "right"
            }

            refresh() {
                const t = this.editor.model.document.selection;
                const e = WP("table", t.getFirstPosition());
                this.isEnabled = !!e
            }

            execute() {
                const t = this.editor;
                const e = t.model.document.selection;
                const i = t.plugins.get("TableUtils");
                const n = this.order === "left";
                const o = n ? e.getFirstPosition() : e.getLastPosition();
                const r = n ? e.getFirstRange() : e.getLastRange();
                const s = r.getContainedElement() || WP("tableCell", o);
                const a = s.parent.parent;
                const {column: c} = i.getCellLocation(s);
                i.insertColumns(a, {columns: 1, at: n ? c : c + 1})
            }
        }

        class IS extends jw {
            constructor(t, e = {}) {
                super(t);
                this.direction = e.direction || "horizontally"
            }

            refresh() {
                const t = sS(this.editor.model.document.selection);
                this.isEnabled = t.length === 1
            }

            execute() {
                const t = sS(this.editor.model.document.selection)[0];
                const e = this.direction === "horizontally";
                const i = this.editor.plugins.get("TableUtils");
                if (e) {
                    i.splitCellHorizontally(t, 2)
                } else {
                    i.splitCellVertically(t, 2)
                }
            }
        }

        class VS extends jw {
            constructor(t, e) {
                super(t);
                this.direction = e.direction;
                this.isHorizontal = this.direction == "right" || this.direction == "left"
            }

            refresh() {
                const t = this._getMergeableCell();
                this.value = t;
                this.isEnabled = !!t
            }

            execute() {
                const t = this.editor.model;
                const e = t.document;
                const i = rS(e.selection)[0];
                const n = this.value;
                const o = this.direction;
                t.change(t => {
                    const e = o == "right" || o == "down";
                    const r = e ? i : n;
                    const s = e ? n : i;
                    const a = s.parent;
                    zS(s, r, t);
                    const c = this.isHorizontal ? "colspan" : "rowspan";
                    const l = parseInt(i.getAttribute(c) || 1);
                    const d = parseInt(n.getAttribute(c) || 1);
                    t.setAttribute(c, l + d, r);
                    t.setSelection(t.createRangeIn(r));
                    if (!a.childCount) {
                        BS(a, t)
                    }
                })
            }

            _getMergeableCell() {
                const t = this.editor.model;
                const e = t.document;
                const i = rS(e.selection)[0];
                if (!i) {
                    return
                }
                const n = this.editor.plugins.get("TableUtils");
                const o = this.isHorizontal ? NS(i, this.direction, n) : MS(i, this.direction);
                if (!o) {
                    return
                }
                const r = this.isHorizontal ? "rowspan" : "colspan";
                const s = parseInt(i.getAttribute(r) || 1);
                const a = parseInt(o.getAttribute(r) || 1);
                if (a === s) {
                    return o
                }
            }
        }

        function NS(t, e, i) {
            const n = t.parent;
            const o = n.parent;
            const r = e == "right" ? t.nextSibling : t.previousSibling;
            const s = (o.getAttribute("headingColumns") || 0) > 0;
            if (!r) {
                return
            }
            const a = e == "right" ? t : r;
            const c = e == "right" ? r : t;
            const {column: l} = i.getCellLocation(a);
            const {column: d} = i.getCellLocation(c);
            const u = parseInt(a.getAttribute("colspan") || 1);
            const h = KP(i, a, o);
            const f = KP(i, c, o);
            if (s && h != f) {
                return
            }
            const g = l + u === d;
            return g ? r : undefined
        }

        function MS(t, e) {
            const i = t.parent;
            const n = i.parent;
            const o = n.getChildIndex(i);
            if (e == "down" && o === n.childCount - 1 || e == "up" && o === 0) {
                return
            }
            const r = parseInt(t.getAttribute("rowspan") || 1);
            const s = n.getAttribute("headingRows") || 0;
            const a = e == "down" && o + r === s;
            const c = e == "up" && o === s;
            if (s && (a || c)) {
                return
            }
            const l = parseInt(t.getAttribute("rowspan") || 1);
            const d = e == "down" ? o + l : o;
            const u = [...new ZP(n, {endRow: d})];
            const h = u.find(e => e.cell === t);
            const f = h.column;
            const g = u.find(({row: t, rowspan: i, column: n}) => {
                if (n !== f) {
                    return false
                }
                if (e == "down") {
                    return t === d
                } else {
                    return d === t + i
                }
            });
            return g && g.cell
        }

        function BS(t, e) {
            const i = t.parent;
            const n = i.getChildIndex(t);
            for (const {cell: t, row: o, rowspan: r} of new ZP(i, {endRow: n})) {
                const i = o + r - 1 >= n;
                if (i) {
                    qP("rowspan", r - 1, t, e)
                }
            }
            e.remove(t)
        }

        function zS(t, e, i) {
            if (!LS(t)) {
                if (LS(e)) {
                    i.remove(i.createRangeIn(e))
                }
                i.move(i.createRangeIn(t), i.createPositionAt(e, "end"))
            }
            i.remove(t)
        }

        function LS(t) {
            return t.childCount == 1 && t.getChild(0).is("paragraph") && t.getChild(0).isEmpty
        }

        class FS extends jw {
            refresh() {
                const t = sS(this.editor.model.document.selection);
                const e = t[0];
                if (e) {
                    const i = e.parent.parent;
                    const n = this.editor.plugins.get("TableUtils").getRows(i);
                    const o = [...new ZP(i)];
                    const r = o.filter(e => t.includes(e.cell)).map(t => t.row);
                    const s = r[0];
                    const a = r[r.length - 1];
                    this.isEnabled = a - s < n - 1
                } else {
                    this.isEnabled = false
                }
            }

            execute() {
                const t = sS(this.editor.model.document.selection);
                const e = DS(t);
                const i = t[0];
                const n = i.parent.parent;
                const o = [...new ZP(n, {endRow: e.last})];
                const r = this.editor.model.createBatch();
                const s = HS(o, i);
                this.editor.model.enqueueChange(r, t => {
                    t.setSelection(t.createSelection(n, "on"))
                });
                let a;
                for (let t = e.last; t >= e.first; t--) {
                    this.editor.model.enqueueChange(r, e => {
                        const i = t;
                        this._removeRow(i, n, e, o);
                        a = jS(n, i, s)
                    })
                }
                this.editor.model.enqueueChange(r, t => {
                    t.setSelection(t.createPositionAt(a, 0))
                })
            }

            _removeRow(t, e, i, n) {
                const o = new Map;
                const r = e.getChild(t);
                const s = e.getAttribute("headingRows") || 0;
                if (s && t < s) {
                    qP("headingRows", s - 1, e, i, 0)
                }
                n.filter(({row: e, rowspan: i}) => e === t && i > 1).forEach(({column: t, cell: e, rowspan: i}) => o.set(t, {
                    cell: e,
                    rowspanToSet: i - 1
                }));
                n.filter(({row: e, rowspan: i}) => e <= t - 1 && e + i > t).forEach(({cell: t, rowspan: e}) => qP("rowspan", e - 1, t, i));
                const a = t + 1;
                const c = new ZP(e, {includeSpanned: true, startRow: a, endRow: a});
                let l;
                for (const {row: t, column: n, cell: r} of [...c]) {
                    if (o.has(n)) {
                        const {cell: r, rowspanToSet: s} = o.get(n);
                        const a = l ? i.createPositionAfter(l) : i.createPositionAt(e.getChild(t), 0);
                        i.move(i.createRangeOn(r), a);
                        qP("rowspan", s, r, i);
                        l = r
                    } else {
                        l = r
                    }
                }
                i.remove(r)
            }
        }

        function DS(t) {
            const e = t.map(t => t.parent.index).sort();
            return {first: e[0], last: e[e.length - 1]}
        }

        function jS(t, e, i) {
            const n = t.getChild(e) || t.getChild(t.childCount - 1);
            let o = n.getChild(0);
            let r = 0;
            for (const t of n.getChildren()) {
                if (r > i) {
                    return o
                }
                o = t;
                r += parseInt(t.getAttribute("colspan") || 1)
            }
            return o
        }

        function HS(t, e) {
            const i = t.find(t => t.cell === e);
            return i.column
        }

        class WS extends jw {
            refresh() {
                const t = sS(this.editor.model.document.selection);
                const e = t[0];
                if (e) {
                    const i = e.parent.parent;
                    const n = this.editor.plugins.get("TableUtils").getColumns(i);
                    const o = [...new ZP(i)];
                    const r = o.filter(e => t.includes(e.cell)).map(t => t.column).sort();
                    const s = r[0];
                    const a = r[r.length - 1];
                    this.isEnabled = a - s < n - 1
                } else {
                    this.isEnabled = false
                }
            }

            execute() {
                const [t, e] = $S(this.editor.model.document.selection);
                const i = t.parent.parent;
                const n = [...new ZP(i)];
                const o = {first: n.find(e => e.cell === t).column, last: n.find(t => t.cell === e).column};
                const r = US(n, t, e, o);
                this.editor.model.change(t => {
                    t.setSelection(t.createRangeOn(i));
                    qS(i, o, t);
                    for (let e = o.last; e >= o.first; e--) {
                        for (const {cell: i, column: o, colspan: r} of n) {
                            if (o <= e && r > 1 && o + r > e) {
                                qP("colspan", r - 1, i, t)
                            } else if (o === e) {
                                const e = i.parent;
                                t.remove(i);
                                if (!e.childCount) {
                                    t.remove(e)
                                }
                            }
                        }
                    }
                    t.setSelection(t.createPositionAt(r, 0))
                })
            }
        }

        function qS(t, e, i) {
            const n = t.getAttribute("headingColumns") || 0;
            if (n && e.first <= n) {
                const o = Math.min(n - 1, e.last) - e.first + 1;
                i.setAttribute("headingColumns", n - o, t)
            }
        }

        function US(t, e, i, n) {
            const o = parseInt(i.getAttribute("colspan") || 1);
            if (o > 1) {
                return i
            } else if (e.previousSibling || i.nextSibling) {
                return i.nextSibling || e.previousSibling
            } else {
                if (n.first) {
                    return t.reverse().find(({column: t}) => t < n.first).cell
                } else {
                    return t.reverse().find(({column: t}) => t > n.last).cell
                }
            }
        }

        function $S(t) {
            const e = sS(t);
            const i = e[0];
            const n = e.pop();
            const o = [i, n];
            return i.isBefore(n) ? o : o.reverse()
        }

        class GS extends jw {
            refresh() {
                const t = this.editor.model;
                const e = sS(t.document.selection);
                const i = e.length > 0;
                this.isEnabled = i;
                this.value = i && e.every(t => this._isInHeading(t, t.parent.parent))
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = sS(e.document.selection);
                const n = i[0];
                const o = i[i.length - 1];
                const r = n.parent.parent;
                const s = r.getAttribute("headingRows") || 0;
                const [a, c] = [n.parent.index, o.parent.index].sort();
                if (t.forceValue === this.value) {
                    return
                }
                const l = this.value ? a : c + 1;
                e.change(t => {
                    if (l) {
                        const e = KS(r, l, s);
                        for (const i of e) {
                            JS(i, l, t)
                        }
                    }
                    qP("headingRows", l, r, t, 0)
                })
            }

            _isInHeading(t, e) {
                const i = parseInt(e.getAttribute("headingRows") || 0);
                return !!i && t.parent.index < i
            }
        }

        function KS(t, e, i) {
            const n = [];
            const o = e > i ? i : 0;
            const r = e - 1;
            const s = new ZP(t, {startRow: o, endRow: r});
            for (const {row: t, rowspan: i, cell: o} of s) {
                if (i > 1 && t + i > e) {
                    n.push(o)
                }
            }
            return n
        }

        function JS(t, e, i) {
            const n = t.parent;
            const o = n.parent;
            const r = n.index;
            const s = parseInt(t.getAttribute("rowspan"));
            const a = e - r;
            const c = {};
            const l = s - a;
            if (l > 1) {
                c.rowspan = l
            }
            const d = parseInt(t.getAttribute("colspan") || 1);
            if (d > 1) {
                c.colspan = d
            }
            const u = o.getChildIndex(n);
            const h = u + a;
            const f = [...new ZP(o, {startRow: u, endRow: h, includeSpanned: true})];
            let g;
            for (const {row: e, column: n, cell: r, cellIndex: s} of f) {
                if (r === t && g === undefined) {
                    g = n
                }
                if (g !== undefined && g === n && e === h) {
                    const t = o.getChild(e);
                    const n = i.createPositionAt(t, s);
                    UP(i, n, c)
                }
            }
            qP("rowspan", a, t, i)
        }

        class YS extends jw {
            refresh() {
                const t = this.editor.model;
                const e = sS(t.document.selection);
                const i = this.editor.plugins.get("TableUtils");
                const n = e.length > 0;
                this.isEnabled = n;
                this.value = n && e.every(t => KP(i, t))
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = this.editor.plugins.get("TableUtils");
                const n = sS(e.document.selection);
                const o = n[0];
                const r = n[n.length - 1];
                const s = o.parent;
                const a = s.parent;
                const [c, l] = [i.getCellLocation(o).column, i.getCellLocation(r).column].sort();
                if (t.forceValue === this.value) {
                    return
                }
                const d = this.value ? c : l + 1;
                e.change(t => {
                    qP("headingColumns", d, a, t, 0)
                })
            }
        }

        class QS extends mp {
            static get pluginName() {
                return "TableUtils"
            }

            getCellLocation(t) {
                const e = t.parent;
                const i = e.parent;
                const n = i.getChildIndex(e);
                const o = new ZP(i, {startRow: n, endRow: n});
                for (const {cell: e, row: i, column: n} of o) {
                    if (e === t) {
                        return {row: i, column: n}
                    }
                }
            }

            createTable(t, e, i) {
                const n = t.createElement("table");
                XS(t, n, 0, e, i);
                return n
            }

            insertRows(t, e = {}) {
                const i = this.editor.model;
                const n = e.at || 0;
                const o = e.rows || 1;
                i.change(e => {
                    const i = t.getAttribute("headingRows") || 0;
                    if (i > n) {
                        e.setAttribute("headingRows", i + o, t)
                    }
                    if (n === 0 || n === t.childCount) {
                        XS(e, t, n, o, this.getColumns(t));
                        return
                    }
                    const r = new ZP(t, {endRow: n});
                    let s = 0;
                    for (const {row: t, rowspan: i, colspan: a, cell: c} of r) {
                        const r = t < n;
                        const l = t + i > n;
                        if (r && l) {
                            e.setAttribute("rowspan", i + o, c)
                        }
                        if (t === n) {
                            s += a
                        }
                    }
                    XS(e, t, n, o, s)
                })
            }

            insertColumns(t, e = {}) {
                const i = this.editor.model;
                const n = e.at || 0;
                const o = e.columns || 1;
                i.change(e => {
                    const i = t.getAttribute("headingColumns");
                    if (n < i) {
                        e.setAttribute("headingColumns", i + o, t)
                    }
                    const r = this.getColumns(t);
                    if (n === 0 || r === n) {
                        for (const i of t.getChildren()) {
                            ZS(o, e, e.createPositionAt(i, n ? "end" : 0))
                        }
                        return
                    }
                    const s = new ZP(t, {column: n, includeSpanned: true});
                    for (const {row: i, cell: r, cellIndex: a} of s) {
                        const c = parseInt(r.getAttribute("rowspan") || 1);
                        const l = parseInt(r.getAttribute("colspan") || 1);
                        if (r.index !== n && l > 1) {
                            e.setAttribute("colspan", l + o, r);
                            s.skipRow(i);
                            if (c > 1) {
                                for (let t = i + 1; t < i + c; t++) {
                                    s.skipRow(t)
                                }
                            }
                        } else {
                            const n = e.createPositionAt(t.getChild(i), a);
                            ZS(o, e, n)
                        }
                    }
                })
            }

            splitCellVertically(t, e = 2) {
                const i = this.editor.model;
                const n = t.parent;
                const o = n.parent;
                const r = parseInt(t.getAttribute("rowspan") || 1);
                const s = parseInt(t.getAttribute("colspan") || 1);
                i.change(i => {
                    if (s > 1) {
                        const {newCellsSpan: n, updatedSpan: o} = tE(s, e);
                        qP("colspan", o, t, i);
                        const a = {};
                        if (n > 1) {
                            a.colspan = n
                        }
                        if (r > 1) {
                            a.rowspan = r
                        }
                        const c = s > e ? e - 1 : s - 1;
                        ZS(c, i, i.createPositionAfter(t), a)
                    }
                    if (s < e) {
                        const n = e - s;
                        const a = [...new ZP(o)];
                        const {column: c} = a.find(({cell: e}) => e === t);
                        const l = a.filter(({cell: e, colspan: i, column: n}) => {
                            const o = e !== t && n === c;
                            const r = n < c && n + i > c;
                            return o || r
                        });
                        for (const {cell: t, colspan: e} of l) {
                            i.setAttribute("colspan", e + n, t)
                        }
                        const d = {};
                        if (r > 1) {
                            d.rowspan = r
                        }
                        ZS(n, i, i.createPositionAfter(t), d);
                        const u = o.getAttribute("headingColumns") || 0;
                        if (u > c) {
                            qP("headingColumns", u + n, o, i)
                        }
                    }
                })
            }

            splitCellHorizontally(t, e = 2) {
                const i = this.editor.model;
                const n = t.parent;
                const o = n.parent;
                const r = o.getChildIndex(n);
                const s = parseInt(t.getAttribute("rowspan") || 1);
                const a = parseInt(t.getAttribute("colspan") || 1);
                i.change(i => {
                    if (s > 1) {
                        const n = [...new ZP(o, {startRow: r, endRow: r + s - 1, includeSpanned: true})];
                        const {newCellsSpan: c, updatedSpan: l} = tE(s, e);
                        qP("rowspan", l, t, i);
                        const {column: d} = n.find(({cell: e}) => e === t);
                        const u = {};
                        if (c > 1) {
                            u.rowspan = c
                        }
                        if (a > 1) {
                            u.colspan = a
                        }
                        for (const {column: t, row: e, cellIndex: s} of n) {
                            const n = e >= r + l;
                            const a = t === d;
                            const h = (e + r + l) % c === 0;
                            if (n && a && h) {
                                const t = i.createPositionAt(o.getChild(e), s);
                                ZS(1, i, t, u)
                            }
                        }
                    }
                    if (s < e) {
                        const n = e - s;
                        const c = [...new ZP(o, {startRow: 0, endRow: r})];
                        for (const {cell: e, rowspan: o, row: s} of c) {
                            if (e !== t && s + o > r) {
                                const t = o + n;
                                i.setAttribute("rowspan", t, e)
                            }
                        }
                        const l = {};
                        if (a > 1) {
                            l.colspan = a
                        }
                        XS(i, o, r + 1, n, 1, l);
                        const d = o.getAttribute("headingRows") || 0;
                        if (d > r) {
                            qP("headingRows", d + n, o, i)
                        }
                    }
                })
            }

            getColumns(t) {
                const e = t.getChild(0);
                return [...e.getChildren()].reduce((t, e) => {
                    const i = parseInt(e.getAttribute("colspan") || 1);
                    return t + i
                }, 0)
            }

            getRows(t) {
                return t.childCount
            }
        }

        function XS(t, e, i, n, o, r = {}) {
            for (let s = 0; s < n; s++) {
                const n = t.createElement("tableRow");
                t.insert(n, e, i);
                ZS(o, t, t.createPositionAt(n, "end"), r)
            }
        }

        function ZS(t, e, i, n = {}) {
            for (let o = 0; o < t; o++) {
                UP(e, i, n)
            }
        }

        function tE(t, e) {
            if (t < e) {
                return {newCellsSpan: 1, updatedSpan: 1}
            }
            const i = Math.floor(t / e);
            const n = t - i * e + i;
            return {newCellsSpan: i, updatedSpan: n}
        }

        function eE(t) {
            t.document.registerPostFixer(e => iE(e, t))
        }

        function iE(t, e) {
            const i = e.document.differ.getChanges();
            let n = false;
            const o = new Set;
            for (const e of i) {
                let i;
                if (e.name == "table" && e.type == "insert") {
                    i = e.position.nodeAfter
                }
                if (e.name == "tableRow" || e.name == "tableCell") {
                    i = WP("table", e.position)
                }
                if (aE(e)) {
                    i = WP("table", e.range.start)
                }
                if (i && !o.has(i)) {
                    n = nE(i, t) || n;
                    n = oE(i, t) || n;
                    o.add(i)
                }
            }
            return n
        }

        function nE(t, e) {
            let i = false;
            const n = rE(t);
            if (n.length) {
                i = true;
                for (const t of n) {
                    qP("rowspan", t.rowspan, t.cell, e, 1)
                }
            }
            return i
        }

        function oE(t, e) {
            let i = false;
            const n = sE(t);
            const o = n[0];
            const r = Object.values(n).every(t => t === o);
            if (!r) {
                const o = Object.values(n).reduce((t, e) => e > t ? e : t, 0);
                for (const [r, s] of Object.entries(n)) {
                    const n = o - s;
                    if (n) {
                        for (let i = 0; i < n; i++) {
                            UP(e, e.createPositionAt(t.getChild(r), "end"))
                        }
                        i = true
                    }
                }
            }
            return i
        }

        function rE(t) {
            const e = parseInt(t.getAttribute("headingRows") || 0);
            const i = t.childCount;
            const n = [];
            for (const {row: o, rowspan: r, cell: s} of new ZP(t)) {
                if (r < 2) {
                    continue
                }
                const t = o < e;
                const a = t ? e : i;
                if (o + r > a) {
                    const t = a - o;
                    n.push({cell: s, rowspan: t})
                }
            }
            return n
        }

        function sE(t) {
            const e = {};
            for (const {row: i} of new ZP(t, {includeSpanned: true})) {
                if (!e[i]) {
                    e[i] = 0
                }
                e[i] += 1
            }
            return e
        }

        function aE(t) {
            const e = t.type === "attribute";
            const i = t.attributeKey;
            return e && (i === "headingRows" || i === "colspan" || i === "rowspan")
        }

        function cE(t) {
            t.document.registerPostFixer(e => lE(e, t))
        }

        function lE(t, e) {
            const i = e.document.differ.getChanges();
            let n = false;
            for (const e of i) {
                if (e.type == "insert" && e.name == "table") {
                    n = dE(e.position.nodeAfter, t) || n
                }
                if (e.type == "insert" && e.name == "tableRow") {
                    n = uE(e.position.nodeAfter, t) || n
                }
                if (e.type == "insert" && e.name == "tableCell") {
                    n = hE(e.position.nodeAfter, t) || n
                }
                if (fE(e)) {
                    n = hE(e.position.parent, t) || n
                }
            }
            return n
        }

        function dE(t, e) {
            let i = false;
            for (const n of t.getChildren()) {
                i = uE(n, e) || i
            }
            return i
        }

        function uE(t, e) {
            let i = false;
            for (const n of t.getChildren()) {
                i = hE(n, e) || i
            }
            return i
        }

        function hE(t, e) {
            if (t.childCount == 0) {
                e.insertElement("paragraph", t);
                return true
            }
            const i = Array.from(t.getChildren()).filter(t => t.is("text"));
            for (const t of i) {
                e.wrap(e.createRangeOn(t), "paragraph")
            }
            return !!i.length
        }

        function fE(t) {
            if (!t.position || !t.position.parent.is("tableCell")) {
                return false
            }
            return t.type == "insert" && t.name == "$text" || t.type == "remove"
        }

        function gE(t) {
            t.document.registerPostFixer(() => mE(t))
        }

        function mE(t) {
            const e = t.document.differ;
            const i = new Set;
            for (const t of e.getChanges()) {
                const e = t.type == "insert" || t.type == "remove" ? t.position.parent : t.range.start.parent;
                if (e.is("tableCell") && pE(e, t.type)) {
                    i.add(e)
                }
            }
            if (i.size) {
                for (const t of i.values()) {
                    e.refreshItem(t)
                }
                return true
            }
            return false
        }

        function pE(t, e) {
            const i = Array.from(t.getChildren()).some(t => t.is("paragraph"));
            if (!i) {
                return false
            }
            if (e == "attribute") {
                const e = Array.from(t.getChild(0).getAttributeKeys()).length;
                return t.childCount === 1 && e < 2
            }
            return t.childCount <= (e == "insert" ? 2 : 1)
        }

        var bE = i(92);

        class wE extends mp {
            static get pluginName() {
                return "TableEditing"
            }

            init() {
                const t = this.editor;
                const e = t.model;
                const i = e.schema;
                const n = t.conversion;
                i.register("table", {
                    allowWhere: "$block",
                    allowAttributes: ["headingRows", "headingColumns"],
                    isLimit: true,
                    isObject: true,
                    isBlock: true
                });
                i.register("tableRow", {allowIn: "table", isLimit: true});
                i.register("tableCell", {allowIn: "tableRow", allowAttributes: ["colspan", "rowspan"], isObject: true});
                i.extend("$block", {allowIn: "tableCell"});
                i.addChildCheck((t, e) => {
                    if (e.name == "table" && Array.from(t.getNames()).includes("table")) {
                        return false
                    }
                });
                n.for("upcast").add(JP());
                n.for("editingDowncast").add(lS({asWidget: true}));
                n.for("dataDowncast").add(lS());
                n.for("upcast").elementToElement({model: "tableRow", view: "tr"});
                n.for("editingDowncast").add(dS({asWidget: true}));
                n.for("dataDowncast").add(dS());
                n.for("downcast").add(gS());
                n.for("upcast").add(YP("td"));
                n.for("upcast").add(YP("th"));
                n.for("editingDowncast").add(uS({asWidget: true}));
                n.for("dataDowncast").add(uS());
                n.attributeToAttribute({model: "colspan", view: "colspan"});
                n.attributeToAttribute({model: "rowspan", view: "rowspan"});
                n.for("editingDowncast").add(fS({asWidget: true}));
                n.for("dataDowncast").add(fS());
                n.for("editingDowncast").add(hS({asWidget: true}));
                n.for("dataDowncast").add(hS());
                t.commands.add("insertTable", new SS(t));
                t.commands.add("insertTableRowAbove", new RS(t, {order: "above"}));
                t.commands.add("insertTableRowBelow", new RS(t, {order: "below"}));
                t.commands.add("insertTableColumnLeft", new OS(t, {order: "left"}));
                t.commands.add("insertTableColumnRight", new OS(t, {order: "right"}));
                t.commands.add("removeTableRow", new FS(t));
                t.commands.add("removeTableColumn", new WS(t));
                t.commands.add("splitTableCellVertically", new IS(t, {direction: "vertically"}));
                t.commands.add("splitTableCellHorizontally", new IS(t, {direction: "horizontally"}));
                t.commands.add("mergeTableCellRight", new VS(t, {direction: "right"}));
                t.commands.add("mergeTableCellLeft", new VS(t, {direction: "left"}));
                t.commands.add("mergeTableCellDown", new VS(t, {direction: "down"}));
                t.commands.add("mergeTableCellUp", new VS(t, {direction: "up"}));
                t.commands.add("setTableColumnHeader", new YS(t));
                t.commands.add("setTableRowHeader", new GS(t));
                eE(e);
                gE(e);
                cE(e);
                this.editor.keystrokes.set("Tab", (...t) => this._handleTabOnSelectedTable(...t), {priority: "low"});
                this.editor.keystrokes.set("Tab", this._getTabHandler(true), {priority: "low"});
                this.editor.keystrokes.set("Shift+Tab", this._getTabHandler(false), {priority: "low"})
            }

            static get requires() {
                return [QS]
            }

            _handleTabOnSelectedTable(t, e) {
                const i = this.editor;
                const n = i.model.document.selection;
                if (!n.isCollapsed && n.rangeCount === 1 && n.getFirstRange().isFlat) {
                    const t = n.getSelectedElement();
                    if (!t || !t.is("table")) {
                        return
                    }
                    e();
                    i.model.change(e => {
                        e.setSelection(e.createRangeIn(t.getChild(0).getChild(0)))
                    })
                }
            }

            _getTabHandler(t) {
                const e = this.editor;
                return (i, n) => {
                    const o = e.model.document.selection;
                    const r = rS(o)[0];
                    if (!r) {
                        return
                    }
                    n();
                    const s = r.parent;
                    const a = s.parent;
                    const c = a.getChildIndex(s);
                    const l = s.getChildIndex(r);
                    const d = l === 0;
                    if (!t && d && c === 0) {
                        return
                    }
                    const u = l === s.childCount - 1;
                    const h = c === a.childCount - 1;
                    if (t && h && u) {
                        e.execute("insertTableRowBelow");
                        if (c === a.childCount - 1) {
                            return
                        }
                    }
                    let f;
                    if (t && u) {
                        const t = a.getChild(c + 1);
                        f = t.getChild(0)
                    } else if (!t && d) {
                        const t = a.getChild(c - 1);
                        f = t.getChild(t.childCount - 1)
                    } else {
                        f = s.getChild(l + (t ? 1 : -1))
                    }
                    e.model.change(t => {
                        t.setSelection(t.createRangeIn(f))
                    })
                }
            }
        }

        var kE = i(94);

        class _E extends Gp {
            constructor(t) {
                super(t);
                const e = this.bindTemplate;
                this.items = this.createCollection();
                this.set("rows", 0);
                this.set("columns", 0);
                this.bind("label").to(this, "columns", this, "rows", (t, e) => `${e} × ${t}`);
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck"]},
                    children: [{
                        tag: "div",
                        attributes: {class: ["ck-insert-table-dropdown__grid"]},
                        children: this.items
                    }, {
                        tag: "div",
                        attributes: {class: ["ck-insert-table-dropdown__label"]},
                        children: [{text: e.to("label")}]
                    }],
                    on: {
                        mousedown: e.to(t => {
                            t.preventDefault()
                        }), click: e.to(() => {
                            this.fire("execute")
                        })
                    }
                });
                for (let t = 0; t < 100; t++) {
                    const e = new vE;
                    e.on("over", () => {
                        const e = Math.floor(t / 10);
                        const i = t % 10;
                        this.set("rows", e + 1);
                        this.set("columns", i + 1)
                    });
                    this.items.add(e)
                }
                this.on("change:columns", () => {
                    this._highlightGridBoxes()
                });
                this.on("change:rows", () => {
                    this._highlightGridBoxes()
                })
            }

            focus() {
            }

            focusLast() {
            }

            _highlightGridBoxes() {
                const t = this.rows;
                const e = this.columns;
                this.items.map((i, n) => {
                    const o = Math.floor(n / 10);
                    const r = n % 10;
                    const s = o < t && r < e;
                    i.set("isOn", s)
                })
            }
        }

        class vE extends Gp {
            constructor(t) {
                super(t);
                const e = this.bindTemplate;
                this.set("isOn", false);
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck-insert-table-dropdown-grid-box", e.if("isOn", "ck-on")]},
                    on: {mouseover: e.to("over")}
                })
            }
        }

        var yE = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M3 6v3h4V6H3zm0 4v3h4v-3H3zm0 4v3h4v-3H3zm5 3h4v-3H8v3zm5 0h4v-3h-4v3zm4-4v-3h-4v3h4zm0-4V6h-4v3h4zm1.5 8a1.5 1.5 0 0 1-1.5 1.5H3A1.5 1.5 0 0 1 1.5 17V4c.222-.863 1.068-1.5 2-1.5h13c.932 0 1.778.637 2 1.5v13zM12 13v-3H8v3h4zm0-4V6H8v3h4z"/></svg>';
        var xE = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z" opacity=".6"/><path d="M18 7v1H2V7h16zm0 5v1H2v-1h16z" opacity=".6"/><path d="M14 1v18a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V1a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1zm-2 1H8v4h4V2zm0 6H8v4h4V8zm0 6H8v4h4v-4z"/></svg>';
        var CE = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z" opacity=".6"/><path d="M7 2h1v16H7V2zm5 0h1v16h-1V2z" opacity=".6"/><path d="M1 6h18a1 1 0 0 1 1 1v6a1 1 0 0 1-1 1H1a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1zm1 2v4h4V8H2zm6 0v4h4V8H8zm6 0v4h4V8h-4z"/></svg>';
        var AE = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M2.5 1h15A1.5 1.5 0 0 1 19 2.5v15a1.5 1.5 0 0 1-1.5 1.5h-15A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1zM2 2v16h16V2H2z" opacity=".6"/><path d="M7 2h1v16H7V2zm5 0h1v7h-1V2zm6 5v1H2V7h16zM8 12v1H2v-1h6z" opacity=".6"/><path d="M7 7h12a1 1 0 0 1 1 1v11a1 1 0 0 1-1 1H7a1 1 0 0 1-1-1V8a1 1 0 0 1 1-1zm1 2v9h10V9H8z"/></svg>';

        class TE extends mp {
            init() {
                const t = this.editor;
                const e = this.editor.t;
                const i = t.locale.contentLanguageDirection;
                const n = i === "ltr";
                t.ui.componentFactory.add("insertTable", i => {
                    const n = t.commands.get("insertTable");
                    const o = Wb(i);
                    o.bind("isEnabled").to(n);
                    o.buttonView.set({icon: yE, label: e("ki"), tooltip: true});
                    let r;
                    o.on("change:isOpen", () => {
                        if (r) {
                            return
                        }
                        r = new _E(i);
                        o.panelView.children.add(r);
                        r.delegate("execute").to(o);
                        o.buttonView.on("open", () => {
                            r.rows = 0;
                            r.columns = 0
                        });
                        o.on("execute", () => {
                            t.execute("insertTable", {rows: r.rows, columns: r.columns});
                            t.editing.view.focus()
                        })
                    });
                    return o
                });
                t.ui.componentFactory.add("tableColumn", t => {
                    const i = [{
                        type: "switchbutton",
                        model: {commandName: "setTableColumnHeader", label: e("kj"), bindIsOn: true}
                    }, {type: "separator"}, {
                        type: "button",
                        model: {commandName: n ? "insertTableColumnLeft" : "insertTableColumnRight", label: e("kk")}
                    }, {
                        type: "button",
                        model: {commandName: n ? "insertTableColumnRight" : "insertTableColumnLeft", label: e("kl")}
                    }, {type: "button", model: {commandName: "removeTableColumn", label: e("km")}}];
                    return this._prepareDropdown(e("kn"), xE, i, t)
                });
                t.ui.componentFactory.add("tableRow", t => {
                    const i = [{
                        type: "switchbutton",
                        model: {commandName: "setTableRowHeader", label: e("ko"), bindIsOn: true}
                    }, {type: "separator"}, {
                        type: "button",
                        model: {commandName: "insertTableRowBelow", label: e("kp")}
                    }, {type: "button", model: {commandName: "insertTableRowAbove", label: e("kq")}}, {
                        type: "button",
                        model: {commandName: "removeTableRow", label: e("kr")}
                    }];
                    return this._prepareDropdown(e("ks"), CE, i, t)
                });
                t.ui.componentFactory.add("mergeTableCells", t => {
                    const i = [{
                        type: "button",
                        model: {commandName: "mergeTableCellUp", label: e("kt")}
                    }, {
                        type: "button",
                        model: {commandName: n ? "mergeTableCellRight" : "mergeTableCellLeft", label: e("ku")}
                    }, {type: "button", model: {commandName: "mergeTableCellDown", label: e("kv")}}, {
                        type: "button",
                        model: {commandName: n ? "mergeTableCellLeft" : "mergeTableCellRight", label: e("kw")}
                    }, {type: "separator"}, {
                        type: "button",
                        model: {commandName: "splitTableCellVertically", label: e("kx")}
                    }, {type: "button", model: {commandName: "splitTableCellHorizontally", label: e("ky")}}];
                    return this._prepareDropdown(e("kz"), AE, i, t)
                })
            }

            _prepareDropdown(t, e, i, n) {
                const o = this.editor;
                const r = Wb(n);
                const s = [];
                const a = new ys;
                for (const t of i) {
                    PE(t, o, s, a)
                }
                Ub(r, a, o.ui.componentFactory);
                r.buttonView.set({label: t, icon: e, tooltip: true});
                r.bind("isEnabled").toMany(s, "isEnabled", (...t) => t.some(t => t));
                this.listenTo(r, "execute", t => {
                    o.execute(t.source.commandName);
                    o.editing.view.focus()
                });
                return r
            }
        }

        function PE(t, e, i, n) {
            const o = t.model = new e_(t.model);
            const {commandName: r, bindIsOn: s} = t.model;
            if (t.type === "button" || t.type === "switchbutton") {
                const t = e.commands.get(r);
                i.push(t);
                o.set({commandName: r});
                o.bind("isEnabled").to(t);
                if (s) {
                    o.bind("isOn").to(t, "value")
                }
            }
            o.set({withText: true});
            n.add(t)
        }

        class SE extends Ju {
            constructor(t) {
                super(t);
                this.domEventType = ["mousemove", "mouseup", "mouseleave"]
            }

            onDomEvent(t) {
                this.fire(t.type, t)
            }
        }

        function EE(t, e, i) {
            const n = Array.from(t);
            const o = n[0];
            const r = n[n.length - 1];
            const {row: s, column: a} = e.getCellLocation(o);
            const c = RE(n, a, i, e);
            const {row: l, column: d} = e.getCellLocation(r);
            const u = d - a + 1;
            const h = l - s + 1;
            IE(c, u, h, i, e);
            const f = WP("table", o);
            VE(c, f, s, a, i);
            return c
        }

        function RE(t, e, i, n) {
            const o = i.createElement("table");
            const r = new Map;
            const s = new Map;
            for (const e of t) {
                const t = WP("tableRow", e);
                if (!r.has(t)) {
                    const e = t._clone();
                    i.append(e, o);
                    r.set(t, e)
                }
                const a = e._clone(true);
                const {column: c} = n.getCellLocation(e);
                s.set(a, c);
                i.append(a, r.get(t))
            }
            OE(o, e, s, i, n);
            return o
        }

        function OE(t, e, i, n, o) {
            for (const r of t.getChildren()) {
                for (const t of Array.from(r.getChildren())) {
                    const {column: r} = o.getCellLocation(t);
                    const s = i.get(t);
                    const a = s - e;
                    if (r !== a) {
                        for (let e = 0; e < a - r; e++) {
                            const e = n.createElement("tableCell");
                            n.insert(e, n.createPositionBefore(t));
                            const i = n.createElement("paragraph");
                            n.insert(i, e, 0);
                            n.insertText("", i, 0)
                        }
                    }
                }
            }
        }

        function IE(t, e, i, n, o) {
            for (const r of t.getChildren()) {
                for (const t of r.getChildren()) {
                    const r = parseInt(t.getAttribute("colspan") || 1);
                    const s = parseInt(t.getAttribute("rowspan") || 1);
                    const {row: a, column: c} = o.getCellLocation(t);
                    if (c + r > e) {
                        const i = e - c;
                        if (i > 1) {
                            n.setAttribute("colspan", i, t)
                        } else {
                            n.removeAttribute("colspan", t)
                        }
                    }
                    if (a + s > i) {
                        const e = i - a;
                        if (e > 1) {
                            n.setAttribute("rowspan", e, t)
                        } else {
                            n.removeAttribute("rowspan", t)
                        }
                    }
                }
            }
        }

        function VE(t, e, i, n, o) {
            const r = parseInt(e.getAttribute("headingRows") || 0);
            if (r > 0) {
                const e = r - i;
                o.setAttribute("headingRows", e, t)
            }
            const s = parseInt(e.getAttribute("headingColumns") || 0);
            if (s > 0) {
                const e = s - n;
                o.setAttribute("headingColumns", e, t)
            }
        }

        var NE = i(96);

        class ME extends mp {
            static get pluginName() {
                return "TableSelection"
            }

            static get requires() {
                return [QS]
            }

            init() {
                const t = this.editor;
                const e = t.model;
                this.listenTo(e, "deleteContent", (t, e) => this._handleDeleteContent(t, e), {priority: "high"});
                t.editing.view.addObserver(SE);
                this._defineSelectionConverter();
                this._enableShiftClickSelection();
                this._enableMouseDragSelection()
            }

            getSelectedTableCells() {
                const t = this.editor.model.document.selection;
                const e = oS(t);
                if (e.length == 0) {
                    return null
                }
                return e
            }

            getSelectionAsFragment() {
                const t = this.getSelectedTableCells();
                if (!t) {
                    return null
                }
                return this.editor.model.change(e => {
                    const i = e.createDocumentFragment();
                    const n = EE(t, this.editor.plugins.get("TableUtils"), e);
                    e.insert(n, i, 0);
                    return i
                })
            }

            _defineSelectionConverter() {
                const t = this.editor;
                const e = new Set;
                t.conversion.for("editingDowncast").add(t => t.on("selection", (t, n, o) => {
                    const r = o.writer;
                    i(r);
                    const s = this.getSelectedTableCells();
                    if (!s) {
                        return
                    }
                    for (const t of s) {
                        const i = o.mapper.toViewElement(t);
                        r.addClass("ck-editor__editable_selected", i);
                        e.add(i)
                    }
                    const a = o.mapper.toViewElement(s[s.length - 1]);
                    r.setSelection(a, 0)
                }, {priority: "lowest"}));

                function i(t) {
                    for (const i of e) {
                        t.removeClass("ck-editor__editable_selected", i)
                    }
                    e.clear()
                }
            }

            _enableShiftClickSelection() {
                const t = this.editor;
                let e = false;
                this.listenTo(t.editing.view.document, "mousedown", (i, n) => {
                    if (!this.isEnabled) {
                        return
                    }
                    if (!n.domEvent.shiftKey) {
                        return
                    }
                    const o = rS(t.model.document.selection)[0];
                    if (!o) {
                        return
                    }
                    const r = this._getModelTableCellFromDomEvent(n);
                    if (r && zE(o, r)) {
                        e = true;
                        this._setCellSelection(o, r);
                        n.preventDefault()
                    }
                });
                this.listenTo(t.editing.view.document, "mouseup", () => {
                    e = false
                });
                this.listenTo(t.editing.view.document, "selectionChange", t => {
                    if (e) {
                        t.stop()
                    }
                }, {priority: "highest"})
            }

            _enableMouseDragSelection() {
                const t = this.editor;
                let e, i;
                let n = false;
                let o = false;
                this.listenTo(t.editing.view.document, "mousedown", (t, i) => {
                    if (!this.isEnabled) {
                        return
                    }
                    if (i.domEvent.shiftKey || i.domEvent.ctrlKey || i.domEvent.altKey) {
                        return
                    }
                    e = this._getModelTableCellFromDomEvent(i)
                });
                this.listenTo(t.editing.view.document, "mousemove", (t, r) => {
                    if (!r.domEvent.buttons) {
                        return
                    }
                    if (!e) {
                        return
                    }
                    const s = this._getModelTableCellFromDomEvent(r);
                    if (s && zE(e, s)) {
                        i = s;
                        if (!n && i != e) {
                            n = true
                        }
                    }
                    if (!n) {
                        return
                    }
                    o = true;
                    this._setCellSelection(e, i);
                    r.preventDefault()
                });
                this.listenTo(t.editing.view.document, "mouseup", () => {
                    n = false;
                    o = false;
                    e = null;
                    i = null
                });
                this.listenTo(t.editing.view.document, "selectionChange", t => {
                    if (o) {
                        t.stop()
                    }
                }, {priority: "highest"})
            }

            _handleDeleteContent(t, e) {
                const [i, n] = e;
                const o = this.editor.model;
                const r = !n || n.direction == "backward";
                const s = oS(i);
                if (!s.length) {
                    return
                }
                t.stop();
                o.change(t => {
                    const e = s[r ? s.length - 1 : 0];
                    o.change(t => {
                        for (const e of s) {
                            o.deleteContent(t.createSelection(e, "in"))
                        }
                    });
                    const n = o.schema.getNearestSelectionRange(t.createPositionAt(e, 0));
                    if (n) {
                        if (i.is("documentSelection")) {
                            t.setSelection(n)
                        } else {
                            i.setTo(n)
                        }
                    }
                })
            }

            _setCellSelection(t, e) {
                const i = this._getCellsToSelect(t, e);
                this.editor.model.change(t => {
                    t.setSelection(i.cells.map(e => t.createRangeOn(e)), {backward: i.backward})
                })
            }

            _getModelTableCellFromDomEvent(t) {
                const e = t.target;
                const i = this.editor.editing.view.createPositionAt(e, 0);
                const n = this.editor.editing.mapper.toModelPosition(i);
                const o = n.parent;
                if (!o) {
                    return
                }
                if (o.is("tableCell")) {
                    return o
                }
                return WP("tableCell", o)
            }

            _getCellsToSelect(t, e) {
                const i = this.editor.plugins.get("TableUtils");
                const n = i.getCellLocation(t);
                const o = i.getCellLocation(e);
                const r = Math.min(n.row, o.row);
                const s = Math.max(n.row, o.row);
                const a = Math.min(n.column, o.column);
                const c = Math.max(n.column, o.column);
                const l = [];
                for (const e of new ZP(WP("table", t), {startRow: r, endRow: s})) {
                    if (e.column >= a && e.column <= c) {
                        l.push(e.cell)
                    }
                }
                if (BE(n, o)) {
                    return {cells: l.reverse(), backward: true}
                }
                return {cells: l, backward: false}
            }
        }

        function BE(t, e) {
            if (t.row > e.row) {
                return true
            }
            if (t.row == e.row && t.column > e.column) {
                return true
            }
            return false
        }

        function zE(t, e) {
            return t.parent.parent == e.parent.parent
        }

        class LE extends mp {
            static get pluginName() {
                return "TableClipboard"
            }

            static get requires() {
                return [ME]
            }

            init() {
                const t = this.editor;
                const e = t.editing.view.document;
                this.listenTo(e, "copy", (t, e) => this._onCopyCut(t, e));
                this.listenTo(e, "cut", (t, e) => this._onCopyCut(t, e))
            }

            _onCopyCut(t, e) {
                const i = this.editor.plugins.get("TableSelection");
                if (!i.getSelectedTableCells()) {
                    return
                }
                if (t.name == "cut" && this.editor.isReadOnly) {
                    return
                }
                e.preventDefault();
                t.stop();
                const n = this.editor.data;
                const o = this.editor.editing.view.document;
                const r = n.toView(i.getSelectionAsFragment());
                o.fire("clipboardOutput", {dataTransfer: e.dataTransfer, content: r, method: t.name})
            }
        }

        var FE = i(98);

        class DE extends mp {
            static get requires() {
                return [wE, TE, ME, LE, Fv]
            }

            static get pluginName() {
                return "Table"
            }
        }

        var jE = i(100);

        class HE extends Gp {
            constructor(t, e) {
                super(t);
                const i = `ck-labeled-view-${is()}`;
                const n = `ck-labeled-view-status-${is()}`;
                this.view = e(this, i, n);
                this.set("label");
                this.set("isEnabled", true);
                this.set("errorText", null);
                this.set("infoText", null);
                this.set("class");
                this.labelView = this._createLabelView(i);
                this.statusView = this._createStatusView(n);
                this.bind("_statusText").to(this, "errorText", this, "infoText", (t, e) => t || e);
                const o = this.bindTemplate;
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-labeled-view", o.to("class"), o.if("isEnabled", "ck-disabled", t => !t)]},
                    children: [this.labelView, this.view, this.statusView]
                })
            }

            _createLabelView(t) {
                const e = new Mk(this.locale);
                e.for = t;
                e.bind("text").to(this, "label");
                return e
            }

            _createStatusView(t) {
                const e = new Gp(this.locale);
                const i = this.bindTemplate;
                e.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-labeled-view__status", i.if("errorText", "ck-labeled-view__status_error"), i.if("_statusText", "ck-hidden", t => !t)],
                        id: t,
                        role: i.if("errorText", "alert")
                    },
                    children: [{text: i.to("_statusText")}]
                });
                return e
            }

            focus() {
                this.view.focus()
            }
        }

        function WE(t, e, i) {
            const n = new Yv(t.locale);
            n.set({id: e, ariaDescribedById: i});
            n.bind("isReadOnly").to(t, "isEnabled", t => !t);
            n.bind("hasError").to(t, "errorText", t => !!t);
            n.on("input", () => {
                t.errorText = null
            });
            return n
        }

        function qE(t, e, i) {
            const n = Wb(t.locale);
            n.set({id: e, ariaDescribedById: i});
            n.bind("isEnabled").to(t);
            return n
        }

        var UE = i(102);

        class $E extends Gp {
            constructor(t, e) {
                super(t);
                const i = this.bindTemplate;
                this.set("value", "");
                this.set("id");
                this.set("isReadOnly", false);
                this.set("hasError", false);
                this.set("ariaDescribedById");
                this.options = e;
                this._dropdownView = this._createDropdownView(t);
                this._inputView = this._createInputTextView(t);
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-input-color", i.if("hasError", "ck-error")],
                        id: i.to("id"),
                        "aria-invalid": i.if("hasError", true),
                        "aria-describedby": i.to("ariaDescribedById")
                    },
                    children: [this._inputView, this._dropdownView]
                })
            }

            focus() {
                this._inputView.focus()
            }

            _createDropdownView() {
                const t = this.locale;
                const e = this.bindTemplate;
                const i = this._createColorGrid(t);
                const n = Wb(t);
                const o = new Gp;
                const r = this._createRemoveColorButton(t);
                o.setTemplate({
                    tag: "span",
                    attributes: {
                        class: ["ck", "ck-input-color__button__preview"],
                        style: {backgroundColor: e.to("value")}
                    },
                    children: [{
                        tag: "span",
                        attributes: {class: ["ck", "ck-input-color__button__preview__no-color-indicator", e.if("value", "ck-hidden", t => t != "")]}
                    }]
                });
                n.buttonView.extendTemplate({attributes: {class: "ck-input-color__button"}});
                n.buttonView.children.add(o);
                n.panelPosition = t.uiLanguageDirection === "rtl" ? "se" : "sw";
                n.panelView.children.add(r);
                n.panelView.children.add(i);
                n.bind("isEnabled").to(this, "isReadOnly", t => !t);
                return n
            }

            _createInputTextView() {
                const t = this.locale;
                const e = new Yv(t);
                e.bind("value").to(this);
                e.bind("isReadOnly").to(this);
                e.bind("hasError").to(this);
                e.on("input", () => {
                    this.value = e.element.value
                });
                e.delegate("input").to(this);
                return e
            }

            _createRemoveColorButton() {
                const t = this.locale;
                const e = t.t;
                const i = new hb(t);
                i.class = "ck-input-color__remove-color";
                i.withText = true;
                i.icon = zk;
                i.label = e("li");
                i.on("execute", () => {
                    this.value = "";
                    this._dropdownView.isOpen = false;
                    this.fire("input")
                });
                return i
            }

            _createColorGrid(t) {
                const e = new Vk(t, {colorDefinitions: this.options.colorDefinitions, columns: this.options.columns});
                e.on("execute", (t, e) => {
                    this.value = e.value;
                    this._dropdownView.isOpen = false;
                    this.fire("input")
                });
                e.bind("selectedColor").to(this, "value");
                return e
            }
        }

        const GE = nb.defaultPositions;
        const KE = [GE.northArrowSouth, GE.northArrowSouthWest, GE.northArrowSouthEast, GE.southArrowNorth, GE.southArrowNorthWest, GE.southArrowNorthEast];
        const JE = t => t === "";

        function YE(t, e) {
            const i = t.plugins.get("ContextualBalloon");
            if (nS(t.editing.view.document.selection)) {
                let n;
                if (e === "cell") {
                    n = XE(t)
                } else {
                    n = QE(t)
                }
                i.updatePosition(n)
            }
        }

        function QE(t) {
            const e = t.model.document.selection.getFirstPosition();
            const i = WP("table", e);
            const n = t.editing.mapper.toViewElement(i);
            return {target: t.editing.view.domConverter.viewToDom(n), positions: KE}
        }

        function XE(t) {
            const e = uR(t.model.document.selection.getFirstPosition());
            const i = t.editing.mapper.toViewElement(e);
            return {target: t.editing.view.domConverter.viewToDom(i), positions: KE}
        }

        function ZE(t) {
            return {
                none: t("mq"),
                solid: t("mr"),
                dotted: t("ms"),
                dashed: t("mt"),
                double: t("mu"),
                groove: t("mv"),
                ridge: t("mw"),
                inset: t("mx"),
                outset: t("my")
            }
        }

        function tR(t) {
            return t("mz")
        }

        function eR(t) {
            return t("na")
        }

        function iR(t) {
            t = t.trim();
            return JE(t) || tC(t)
        }

        function nR(t) {
            t = t.trim();
            return JE(t) || lR(t) || oC(t) || sC(t)
        }

        function oR(t) {
            t = t.trim();
            return JE(t) || lR(t) || oC(t)
        }

        function rR(t) {
            const e = new ys;
            const i = ZE(t.t);
            for (const n in i) {
                const o = {
                    type: "button",
                    model: new e_({_borderStyleValue: n === "none" ? "" : n, label: i[n], withText: true})
                };
                if (n === "none") {
                    o.model.bind("isOn").to(t, "borderStyle", t => !t)
                } else {
                    o.model.bind("isOn").to(t, "borderStyle", t => t === n)
                }
                e.add(o)
            }
            return e
        }

        function sR({view: t, icons: e, toolbar: i, labels: n, propertyName: o, nameToValue: r}) {
            for (const s in n) {
                const a = new hb(t.locale);
                a.set({label: n[s], icon: e[s]});
                a.bind("isOn").to(t, o, t => t === r(s));
                a.on("execute", () => {
                    t[o] = r(s)
                });
                i.items.add(a)
            }
        }

        const aR = [{color: "hsl(0, 0%, 0%)", label: "Black"}, {
            color: "hsl(0, 0%, 30%)",
            label: "Dim grey"
        }, {color: "hsl(0, 0%, 60%)", label: "Grey"}, {
            color: "hsl(0, 0%, 90%)",
            label: "Light grey"
        }, {color: "hsl(0, 0%, 100%)", label: "White", hasBorder: true}, {
            color: "hsl(0, 75%, 60%)",
            label: "Red"
        }, {color: "hsl(30, 75%, 60%)", label: "Orange"}, {
            color: "hsl(60, 75%, 60%)",
            label: "Yellow"
        }, {color: "hsl(90, 75%, 60%)", label: "Light green"}, {
            color: "hsl(120, 75%, 60%)",
            label: "Green"
        }, {color: "hsl(150, 75%, 60%)", label: "Aquamarine"}, {
            color: "hsl(180, 75%, 60%)",
            label: "Turquoise"
        }, {color: "hsl(210, 75%, 60%)", label: "Light blue"}, {
            color: "hsl(240, 75%, 60%)",
            label: "Blue"
        }, {color: "hsl(270, 75%, 60%)", label: "Purple"}];

        function cR(t) {
            return (e, i, n) => {
                const o = new $E(e.locale, {colorDefinitions: dR(t.colorConfig), columns: t.columns});
                o.set({id: i, ariaDescribedById: n});
                o.bind("isReadOnly").to(e, "isEnabled", t => !t);
                o.bind("errorText").to(e);
                o.on("input", () => {
                    e.errorText = null
                });
                return o
            }
        }

        function lR(t) {
            const e = parseFloat(t);
            return !Number.isNaN(e) && t === String(e)
        }

        function dR(t) {
            return t.map(t => ({color: t.model, label: t.label, options: {hasBorder: t.hasBorder}}))
        }

        function uR(t) {
            const e = t.nodeAfter && t.nodeAfter.is("tableCell");
            return e ? t.nodeAfter : WP("tableCell", t)
        }

        var hR = i(104);

        class fR extends Gp {
            constructor(t, e = {}) {
                super(t);
                const i = this.bindTemplate;
                this.set("class", e.class || null);
                this.children = this.createCollection();
                if (e.children) {
                    e.children.forEach(t => this.children.add(t))
                }
                this.set("_role", null);
                this.set("_ariaLabelledBy", null);
                if (e.labelView) {
                    this.set({_role: "group", _ariaLabelledBy: e.labelView.id})
                }
                this.setTemplate({
                    tag: "div",
                    attributes: {
                        class: ["ck", "ck-form__row", i.to("class")],
                        role: i.to("_role"),
                        "aria-labelledby": i.to("_ariaLabelledBy")
                    },
                    children: this.children
                })
            }
        }

        var gR = i(106);

        class mR extends Gp {
            constructor(t, e = {}) {
                super(t);
                const i = this.bindTemplate;
                this.children = this.createCollection();
                this.set("class", e.class || null);
                this.set("label", e.label || "");
                const n = new Gp(t);
                n.setTemplate({
                    tag: "span",
                    attributes: {class: ["ck", "ck-form__header__label"]},
                    children: [{text: i.to("label")}]
                });
                this.children.add(n);
                this.setTemplate({
                    tag: "div",
                    attributes: {class: ["ck", "ck-form__header", i.to("class")]},
                    children: this.children
                })
            }
        }

        var pR = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M10.261 7.062l2.88 1.663a.75.75 0 0 1-.75 1.3L10.5 8.933v7.317a.75.75 0 1 1-1.5 0V8.932l-1.89 1.093a.75.75 0 0 1-.75-1.3l2.879-1.663a.752.752 0 0 1 .511-.187.752.752 0 0 1 .511.187zM15.25 4a.75.75 0 1 1 0 1.5H4.75a.75.75 0 0 1 0-1.5h10.5z"/></svg>';
        var bR = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.75 11.875a.752.752 0 0 1 .508.184l2.883 1.666a.75.75 0 0 1-.659 1.344l-.091-.044-1.892-1.093.001 4.318a.75.75 0 1 1-1.5 0v-4.317l-1.89 1.092a.75.75 0 0 1-.75-1.3l2.879-1.663a.752.752 0 0 1 .51-.187zM15.25 9a.75.75 0 1 1 0 1.5H4.75a.75.75 0 1 1 0-1.5h10.5zM9.75.375a.75.75 0 0 1 .75.75v4.318l1.89-1.093.092-.045a.75.75 0 0 1 .659 1.344l-2.883 1.667a.752.752 0 0 1-.508.184.752.752 0 0 1-.511-.187L6.359 5.65a.75.75 0 0 1 .75-1.299L9 5.442V1.125a.75.75 0 0 1 .75-.75z"/></svg>';
        var wR = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M9.239 13.938l-2.88-1.663a.75.75 0 0 1 .75-1.3L9 12.067V4.75a.75.75 0 1 1 1.5 0v7.318l1.89-1.093a.75.75 0 0 1 .75 1.3l-2.879 1.663a.752.752 0 0 1-.511.187.752.752 0 0 1-.511-.187zM4.25 17a.75.75 0 1 1 0-1.5h10.5a.75.75 0 0 1 0 1.5H4.25z"/></svg>';
        var kR = i(12);
        var _R = i(13);
        var vR = i(110);
        const yR = {left: Zw, center: ek, right: tk, justify: ik, top: pR, middle: bR, bottom: wR};

        class xR extends Gp {
            constructor(t, e) {
                super(t);
                this.set({
                    borderStyle: "",
                    borderWidth: "",
                    borderColor: "",
                    padding: "",
                    backgroundColor: "",
                    width: "",
                    height: "",
                    horizontalAlignment: "",
                    verticalAlignment: ""
                });
                this.options = e;
                const {borderStyleDropdown: i, borderWidthInput: n, borderColorInput: o, borderRowLabel: r} = this._createBorderFields();
                const {widthInput: s, operatorLabel: a, heightInput: c, dimensionsLabel: l} = this._createDimensionFields();
                const {horizontalAlignmentToolbar: d, verticalAlignmentToolbar: u, alignmentLabel: h} = this._createAlignmentFields();
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.children = this.createCollection();
                this.borderStyleDropdown = i;
                this.borderWidthInput = n;
                this.borderColorInput = o;
                this.backgroundInput = this._createBackgroundField();
                this.paddingInput = this._createPaddingField();
                this.widthInput = s;
                this.heightInput = c;
                this.horizontalAlignmentToolbar = d;
                this.verticalAlignmentToolbar = u;
                const {saveButtonView: f, cancelButtonView: g} = this._createActionButtons();
                this.saveButtonView = f;
                this.cancelButtonView = g;
                this._focusables = new bp;
                this._focusCycler = new yb({
                    focusables: this._focusables,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "shift + tab", focusNext: "tab"}
                });
                this.children.add(new mR(t, {label: this.t("Свойства ячейки")}));
                this.children.add(new fR(t, {
                    labelView: r,
                    children: [r, i, o, n],
                    class: "ck-table-form__border-row"
                }));
                this.children.add(new fR(t, {children: [this.backgroundInput]}));
                this.children.add(new fR(t, {
                    children: [new fR(t, {
                        labelView: l,
                        children: [l, s, a, c],
                        class: "ck-table-form__dimensions-row"
                    }), new fR(t, {children: [this.paddingInput], class: "ck-table-cell-properties-form__padding-row"})]
                }));
                this.children.add(new fR(t, {
                    labelView: h,
                    children: [h, d, u],
                    class: "ck-table-cell-properties-form__alignment-row"
                }));
                this.children.add(new fR(t, {
                    children: [this.saveButtonView, this.cancelButtonView],
                    class: "ck-table-form__action-row"
                }));
                this.setTemplate({
                    tag: "form",
                    attributes: {
                        class: ["ck", "ck-form", "ck-table-form", "ck-table-cell-properties-form"],
                        tabindex: "-1"
                    },
                    children: this.children
                })
            }

            render() {
                super.render();
                Qv({view: this});
                [this.borderStyleDropdown, this.borderColorInput, this.borderWidthInput, this.backgroundInput, this.widthInput, this.heightInput, this.paddingInput, this.horizontalAlignmentToolbar, this.verticalAlignmentToolbar, this.saveButtonView, this.cancelButtonView].forEach(t => {
                    this._focusables.add(t);
                    this.focusTracker.add(t.element)
                });
                this.keystrokes.listenTo(this.element)
            }

            focus() {
                this._focusCycler.focusFirst()
            }

            _createBorderFields() {
                const t = cR({colorConfig: this.options.borderColors, columns: 5});
                const e = this.locale;
                const i = this.t;
                const n = new Mk(e);
                n.text = i("nb");
                const o = ZE(i);
                const r = new HE(e, qE);
                r.set({label: i("nc"), class: "ck-table-form__border-style"});
                r.view.buttonView.set({isOn: false, withText: true, tooltip: i("nc")});
                r.view.buttonView.bind("label").to(this, "borderStyle", t => o[t ? t : "none"]);
                r.view.on("execute", t => {
                    this.borderStyle = t.source._borderStyleValue
                });
                Ub(r.view, rR(this));
                const s = new HE(e, WE);
                s.set({label: i("nd"), class: "ck-table-form__border-width"});
                s.view.bind("value").to(this, "borderWidth");
                s.bind("isEnabled").to(this, "borderStyle", CR);
                s.view.on("input", () => {
                    this.borderWidth = s.view.element.value
                });
                const a = new HE(e, t);
                a.set({label: i("ne"), class: "ck-table-form__border-color"});
                a.view.bind("value").to(this, "borderColor");
                a.bind("isEnabled").to(this, "borderStyle", CR);
                a.view.on("input", () => {
                    this.borderColor = a.view.value
                });
                this.on("change:borderStyle", (t, e, i) => {
                    if (!CR(i)) {
                        this.borderColor = "";
                        this.borderWidth = ""
                    }
                });
                return {borderRowLabel: n, borderStyleDropdown: r, borderColorInput: a, borderWidthInput: s}
            }

            _createBackgroundField() {
                const t = this.locale;
                const e = this.t;
                const i = cR({colorConfig: this.options.backgroundColors, columns: 5});
                const n = new HE(t, i);
                n.set({label: e("nf"), class: "ck-table-cell-properties-form__background"});
                n.view.bind("value").to(this, "backgroundColor");
                n.view.on("input", () => {
                    this.backgroundColor = n.view.value
                });
                return n
            }

            _createDimensionFields() {
                const t = this.locale;
                const e = this.t;
                const i = new Mk(t);
                i.text = e("ng");
                const n = new HE(t, WE);
                n.set({label: e("nd"), class: "ck-table-form__dimensions-row__width"});
                n.view.bind("value").to(this, "width");
                n.view.on("input", () => {
                    this.width = n.view.element.value
                });
                const o = new Gp(t);
                o.setTemplate({
                    tag: "span",
                    attributes: {class: ["ck-table-form__dimension-operator"]},
                    children: [{text: "×"}]
                });
                const r = new HE(t, WE);
                r.set({label: e("nh"), class: "ck-table-form__dimensions-row__height"});
                r.view.bind("value").to(this, "height");
                r.view.on("input", () => {
                    this.height = r.view.element.value
                });
                return {dimensionsLabel: i, widthInput: n, operatorLabel: o, heightInput: r}
            }

            _createPaddingField() {
                const t = this.locale;
                const e = this.t;
                const i = new HE(t, WE);
                i.set({label: e("ni"), class: "ck-table-cell-properties-form__padding"});
                i.view.bind("value").to(this, "padding");
                i.view.on("input", () => {
                    this.padding = i.view.element.value
                });
                return i
            }

            _createAlignmentFields() {
                const t = this.locale;
                const e = this.t;
                const i = new Mk(t);
                i.text = e("nj");
                const n = new Xb(t);
                const o = this.locale.contentLanguageDirection === "rtl";
                n.set({isCompact: true, ariaLabel: e("nk")});
                sR({
                    view: this,
                    icons: yR,
                    toolbar: n,
                    labels: this._horizontalAlignmentLabels,
                    propertyName: "horizontalAlignment",
                    nameToValue: t => t === (o ? "right" : "left") ? "" : t
                });
                const r = new Xb(t);
                r.set({isCompact: true, ariaLabel: e("nl")});
                sR({
                    view: this,
                    icons: yR,
                    toolbar: r,
                    labels: this._verticalAlignmentLabels,
                    propertyName: "verticalAlignment",
                    nameToValue: t => t === "middle" ? "" : t
                });
                return {horizontalAlignmentToolbar: n, verticalAlignmentToolbar: r, alignmentLabel: i}
            }

            _createActionButtons() {
                const t = this.locale;
                const e = this.t;
                const i = new hb(t);
                const n = new hb(t);
                const o = [this.borderWidthInput, this.borderColorInput, this.backgroundInput, this.paddingInput];
                i.set({label: e("lo"), icon: Xv, class: "ck-button-save", type: "submit", withText: true});
                i.bind("isEnabled").toMany(o, "errorText", (...t) => t.every(t => !t));
                n.set({label: e("lp"), icon: Zv, class: "ck-button-cancel", type: "cancel", withText: true});
                n.delegate("execute").to(this, "cancel");
                return {saveButtonView: i, cancelButtonView: n}
            }

            get _horizontalAlignmentLabels() {
                const t = this.locale;
                const e = this.t;
                const i = e("nm");
                const n = e("nn");
                const o = e("no");
                const r = e("np");
                if (t.uiLanguageDirection === "rtl") {
                    return {right: o, center: n, left: i, justify: r}
                } else {
                    return {left: i, center: n, right: o, justify: r}
                }
            }

            get _verticalAlignmentLabels() {
                const t = this.t;
                return {top: t("nq"), middle: t("nr"), bottom: t("ns")}
            }
        }

        function CR(t) {
            return !!t
        }

        var AR = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M11.105 18l-.17 1H2.5A1.5 1.5 0 0 1 1 17.5v-15A1.5 1.5 0 0 1 2.5 1h15A1.5 1.5 0 0 1 19 2.5v9.975l-.85-.124-.15-.302V8h-5v4h.021l-.172.351-1.916.28-.151.027c-.287.063-.54.182-.755.341L8 13v5h3.105zM2 12h5V8H2v4zm10-4H8v4h4V8zM2 2v5h5V2H2zm0 16h5v-5H2v5zM13 7h5V2h-5v5zM8 2v5h4V2H8z" opacity=".6"/><path d="M15.5 11.5l1.323 2.68 2.957.43-2.14 2.085.505 2.946L15.5 18.25l-2.645 1.39.505-2.945-2.14-2.086 2.957-.43L15.5 11.5zM13 6a1 1 0 0 1 1 1v3.172a2.047 2.047 0 0 0-.293.443l-.858 1.736-1.916.28-.151.027A1.976 1.976 0 0 0 9.315 14H7a1 1 0 0 1-1-1V7a1 1 0 0 1 1-1h6zm-1 2H8v4h4V8z"/></svg>';
        const TR = 500;

        class PR extends mp {
            static get requires() {
                return [kb]
            }

            static get pluginName() {
                return "TableCellPropertiesUI"
            }

            constructor(t) {
                super(t);
                t.config.define("table.tableCellProperties", {borderColors: aR, backgroundColors: aR})
            }

            init() {
                const t = this.editor;
                const e = t.t;
                this._balloon = t.plugins.get(kb);
                this.view = this._createPropertiesView();
                this._undoStepBatch = null;
                t.ui.componentFactory.add("tableCellProperties", t => {
                    const i = new hb(t);
                    i.set({label: e("kh"), icon: AR, tooltip: true});
                    this.listenTo(i, "execute", () => this._showView());
                    return i
                })
            }

            destroy() {
                super.destroy();
                this.view.destroy()
            }

            _createPropertiesView() {
                const t = this.editor;
                const e = t.editing.view.document;
                const i = t.config.get("table.tableCellProperties");
                const n = __(i.borderColors);
                const o = k_(t.locale, n);
                const r = __(i.backgroundColors);
                const s = k_(t.locale, r);
                const a = new xR(t.locale, {borderColors: o, backgroundColors: s});
                const c = t.t;
                a.render();
                this.listenTo(a, "submit", () => {
                    this._hideView()
                });
                this.listenTo(a, "cancel", () => {
                    if (this._undoStepBatch.operations.length) {
                        t.execute("undo", this._undoStepBatch)
                    }
                    this._hideView()
                });
                a.keystrokes.set("Esc", (t, e) => {
                    this._hideView();
                    e()
                });
                this.listenTo(t.ui, "update", () => {
                    if (!nS(e.selection)) {
                        this._hideView()
                    } else if (this._isViewVisible) {
                        YE(t, "cell")
                    }
                });
                Db({
                    emitter: a,
                    activator: () => this._isViewInBalloon,
                    contextElements: [this._balloon.view.element],
                    callback: () => this._hideView()
                });
                const l = tR(c);
                const d = eR(c);
                a.on("change:borderStyle", this._getPropertyChangeCallback("tableCellBorderStyle"));
                a.on("change:borderColor", this._getValidatedPropertyChangeCallback({
                    viewField: a.borderColorInput,
                    commandName: "tableCellBorderColor",
                    errorText: l,
                    validator: iR
                }));
                a.on("change:borderWidth", this._getValidatedPropertyChangeCallback({
                    viewField: a.borderWidthInput,
                    commandName: "tableCellBorderWidth",
                    errorText: d,
                    validator: oR
                }));
                a.on("change:padding", this._getValidatedPropertyChangeCallback({
                    viewField: a.paddingInput,
                    commandName: "tableCellPadding",
                    errorText: d,
                    validator: nR
                }));
                a.on("change:width", this._getValidatedPropertyChangeCallback({
                    viewField: a.widthInput,
                    commandName: "tableCellWidth",
                    errorText: d,
                    validator: nR
                }));
                a.on("change:height", this._getValidatedPropertyChangeCallback({
                    viewField: a.heightInput,
                    commandName: "tableCellHeight",
                    errorText: d,
                    validator: nR
                }));
                a.on("change:backgroundColor", this._getValidatedPropertyChangeCallback({
                    viewField: a.backgroundInput,
                    commandName: "tableCellBackgroundColor",
                    errorText: l,
                    validator: iR
                }));
                a.on("change:horizontalAlignment", this._getPropertyChangeCallback("tableCellHorizontalAlignment"));
                a.on("change:verticalAlignment", this._getPropertyChangeCallback("tableCellVerticalAlignment"));
                return a
            }

            _fillViewFormFromCommandValues() {
                const t = this.editor.commands;
                this.view.set({
                    borderStyle: t.get("tableCellBorderStyle").value || "",
                    borderColor: t.get("tableCellBorderColor").value || "",
                    borderWidth: t.get("tableCellBorderWidth").value || "",
                    width: t.get("tableCellWidth").value || "",
                    height: t.get("tableCellHeight").value || "",
                    padding: t.get("tableCellPadding").value || "",
                    backgroundColor: t.get("tableCellBackgroundColor").value || "",
                    horizontalAlignment: t.get("tableCellHorizontalAlignment").value || "",
                    verticalAlignment: t.get("tableCellVerticalAlignment").value || ""
                })
            }

            _showView() {
                const t = this.editor;
                this._balloon.add({view: this.view, position: XE(t)});
                this._undoStepBatch = t.model.createBatch();
                this._fillViewFormFromCommandValues();
                this.view.focus()
            }

            _hideView() {
                if (!this._isViewInBalloon) {
                    return
                }
                const t = this.editor;
                this.stopListening(t.ui, "update");
                this.view.saveButtonView.focus();
                this._balloon.remove(this.view);
                this.editor.editing.view.focus()
            }

            get _isViewVisible() {
                return this._balloon.visibleView === this.view
            }

            get _isViewInBalloon() {
                return this._balloon.hasView(this.view)
            }

            _getPropertyChangeCallback(t) {
                return (e, i, n) => {
                    this.editor.execute(t, {value: n, batch: this._undoStepBatch})
                }
            }

            _getValidatedPropertyChangeCallback({commandName: t, viewField: e, validator: i, errorText: n}) {
                const o = uh(() => {
                    e.errorText = n
                }, TR);
                return (n, r, s) => {
                    o.cancel();
                    if (i(s)) {
                        this.editor.execute(t, {value: s, batch: this._undoStepBatch});
                        e.errorText = null
                    } else {
                        o()
                    }
                }
            }
        }

        function SR(t) {
            t.setNormalizer("border", ER);
            t.setNormalizer("border-top", RR("top"));
            t.setNormalizer("border-right", RR("right"));
            t.setNormalizer("border-bottom", RR("bottom"));
            t.setNormalizer("border-left", RR("left"));
            t.setNormalizer("border-color", OR("color"));
            t.setNormalizer("border-width", OR("width"));
            t.setNormalizer("border-style", OR("style"));
            t.setNormalizer("border-top-color", VR("color", "top"));
            t.setNormalizer("border-top-style", VR("style", "top"));
            t.setNormalizer("border-top-width", VR("width", "top"));
            t.setNormalizer("border-right-color", VR("color", "right"));
            t.setNormalizer("border-right-style", VR("style", "right"));
            t.setNormalizer("border-right-width", VR("width", "right"));
            t.setNormalizer("border-bottom-color", VR("color", "bottom"));
            t.setNormalizer("border-bottom-style", VR("style", "bottom"));
            t.setNormalizer("border-bottom-width", VR("width", "bottom"));
            t.setNormalizer("border-left-color", VR("color", "left"));
            t.setNormalizer("border-left-style", VR("style", "left"));
            t.setNormalizer("border-left-width", VR("width", "left"));
            t.setExtractor("border-top", NR("top"));
            t.setExtractor("border-right", NR("right"));
            t.setExtractor("border-bottom", NR("bottom"));
            t.setExtractor("border-left", NR("left"));
            t.setExtractor("border-top-color", "border.color.top");
            t.setExtractor("border-right-color", "border.color.right");
            t.setExtractor("border-bottom-color", "border.color.bottom");
            t.setExtractor("border-left-color", "border.color.left");
            t.setExtractor("border-top-width", "border.width.top");
            t.setExtractor("border-right-width", "border.width.right");
            t.setExtractor("border-bottom-width", "border.width.bottom");
            t.setExtractor("border-left-width", "border.width.left");
            t.setExtractor("border-top-style", "border.style.top");
            t.setExtractor("border-right-style", "border.style.right");
            t.setExtractor("border-bottom-style", "border.style.bottom");
            t.setExtractor("border-left-style", "border.style.left");
            t.setReducer("border-color", pC("border-color"));
            t.setReducer("border-style", pC("border-style"));
            t.setReducer("border-width", pC("border-width"));
            t.setReducer("border-top", LR("top"));
            t.setReducer("border-right", LR("right"));
            t.setReducer("border-bottom", LR("bottom"));
            t.setReducer("border-left", LR("left"));
            t.setReducer("border", zR);
            t.setStyleRelation("border", ["border-color", "border-style", "border-width", "border-top", "border-right", "border-bottom", "border-left", "border-top-color", "border-right-color", "border-bottom-color", "border-left-color", "border-top-style", "border-right-style", "border-bottom-style", "border-left-style", "border-top-width", "border-right-width", "border-bottom-width", "border-left-width"]);
            t.setStyleRelation("border-color", ["border-top-color", "border-right-color", "border-bottom-color", "border-left-color"]);
            t.setStyleRelation("border-style", ["border-top-style", "border-right-style", "border-bottom-style", "border-left-style"]);
            t.setStyleRelation("border-width", ["border-top-width", "border-right-width", "border-bottom-width", "border-left-width"]);
            t.setStyleRelation("border-top", ["border-top-color", "border-top-style", "border-top-width"]);
            t.setStyleRelation("border-right", ["border-right-color", "border-right-style", "border-right-width"]);
            t.setStyleRelation("border-bottom", ["border-bottom-color", "border-bottom-style", "border-bottom-width"]);
            t.setStyleRelation("border-left", ["border-left-color", "border-left-style", "border-left-width"])
        }

        function ER(t) {
            const {color: e, style: i, width: n} = BR(t);
            return {path: "border", value: {color: mC(e), style: mC(i), width: mC(n)}}
        }

        function RR(t) {
            return e => {
                const {color: i, style: n, width: o} = BR(e);
                const r = {};
                if (i !== undefined) {
                    r.color = {[t]: i}
                }
                if (n !== undefined) {
                    r.style = {[t]: n}
                }
                if (o !== undefined) {
                    r.width = {[t]: o}
                }
                return {path: "border", value: r}
            }
        }

        function OR(t) {
            return e => ({path: "border", value: IR(e, t)})
        }

        function IR(t, e) {
            return {[e]: mC(t)}
        }

        function VR(t, e) {
            return i => ({path: "border", value: {[t]: {[e]: i}}})
        }

        function NR(t) {
            return (e, i) => {
                if (i.border) {
                    return MR(i.border, t)
                }
            }
        }

        function MR(t, e) {
            const i = {};
            if (t.width && t.width[e]) {
                i.width = t.width[e]
            }
            if (t.style && t.style[e]) {
                i.style = t.style[e]
            }
            if (t.color && t.color[e]) {
                i.color = t.color[e]
            }
            return i
        }

        function BR(t) {
            const e = {};
            const i = kC(t);
            for (const t of i) {
                if (oC(t) || /thin|medium|thick/.test(t)) {
                    e.width = t
                } else if (iC(t)) {
                    e.style = t
                } else {
                    e.color = t
                }
            }
            return e
        }

        function zR(t) {
            const e = [];
            e.push(...FR(MR(t, "top"), "top"));
            e.push(...FR(MR(t, "right"), "right"));
            e.push(...FR(MR(t, "bottom"), "bottom"));
            e.push(...FR(MR(t, "left"), "left"));
            return e
        }

        function LR(t) {
            return e => FR(e, t)
        }

        function FR(t, e) {
            const i = [];
            if (t && t.width !== undefined) {
                i.push(t.width)
            }
            if (t && t.style !== undefined) {
                i.push(t.style)
            }
            if (t && t.color !== undefined) {
                i.push(t.color)
            }
            if (i.length) {
                return [[`border-${e}`, i.join(" ")]]
            }
            return []
        }

        function DR(t) {
            t.setNormalizer("padding", wC("padding"));
            t.setNormalizer("padding-top", t => ({path: "padding.top", value: t}));
            t.setNormalizer("padding-right", t => ({path: "padding.right", value: t}));
            t.setNormalizer("padding-bottom", t => ({path: "padding.bottom", value: t}));
            t.setNormalizer("padding-left", t => ({path: "padding.left", value: t}));
            t.setReducer("padding", pC("padding"));
            t.setStyleRelation("padding", ["padding-top", "padding-right", "padding-bottom", "padding-left"])
        }

        function jR(t) {
            t.setNormalizer("background", HR);
            t.setNormalizer("background-color", t => ({path: "background.color", value: t}));
            t.setReducer("background", t => {
                const e = [];
                e.push(["background-color", t.color]);
                return e
            })
        }

        function HR(t) {
            const e = {};
            const i = kC(t);
            for (const t of i) {
                if (cC(t)) {
                    e.repeat = e.repeat || [];
                    e.repeat.push(t)
                } else if (dC(t)) {
                    e.position = e.position || [];
                    e.position.push(t)
                } else if (hC(t)) {
                    e.attachment = t
                } else if (tC(t)) {
                    e.color = t
                } else if (gC(t)) {
                    e.image = t
                }
            }
            return {path: "background", value: e}
        }

        function WR(t, e, i, n) {
            t.for("upcast").attributeToAttribute({
                view: {styles: {[n]: /[\s\S]+/}},
                model: {name: e, key: i, value: t => t.getNormalizedStyle(n)}
            })
        }

        function qR(t, e) {
            t.for("upcast").add(t => t.on("element:" + e, (t, e, i) => {
                const n = ["border-top", "border-right", "border-bottom", "border-left"].filter(t => e.viewItem.hasStyle(t));
                if (!n.length) {
                    return
                }
                const o = {styles: n};
                if (!i.consumable.test(e.viewItem, o)) {
                    return
                }
                if (!e.modelRange) {
                    e = Object.assign(e, i.convertChildren(e.viewItem, e.modelCursor))
                }
                const r = [...e.modelRange.getItems({shallow: true})].pop();
                i.consumable.consume(e.viewItem, o);
                i.writer.setAttribute("borderStyle", e.viewItem.getNormalizedStyle("border-style"), r);
                i.writer.setAttribute("borderColor", e.viewItem.getNormalizedStyle("border-color"), r);
                i.writer.setAttribute("borderWidth", e.viewItem.getNormalizedStyle("border-width"), r)
            }))
        }

        function UR(t, e, i, n) {
            t.for("downcast").attributeToAttribute({
                model: {name: e, key: i},
                view: t => ({key: "style", value: {[n]: t}})
            })
        }

        function $R(t, e, i) {
            t.for("downcast").add(t => t.on(`attribute:${e}:table`, (t, e, n) => {
                const {item: o, attributeNewValue: r} = e;
                const {mapper: s, writer: a} = n;
                if (!n.consumable.consume(e.item, t.name)) {
                    return
                }
                const c = [...s.toViewElement(o).getChildren()].find(t => t.is("table"));
                if (r) {
                    a.setStyle(i, r, c)
                } else {
                    a.removeStyle(i, c)
                }
            }))
        }

        class GR extends jw {
            constructor(t, e) {
                super(t);
                this.attributeName = e
            }

            refresh() {
                const t = this.editor;
                const e = sS(t.model.document.selection);
                this.isEnabled = !!e.length;
                this.value = this._getSingleValue(e)
            }

            execute(t = {}) {
                const {value: e, batch: i} = t;
                const n = this.editor.model;
                const o = sS(n.document.selection);
                const r = this._getValueToSet(e);
                n.enqueueChange(i || "default", t => {
                    if (r) {
                        o.forEach(e => t.setAttribute(this.attributeName, r, e))
                    } else {
                        o.forEach(e => t.removeAttribute(this.attributeName, e))
                    }
                })
            }

            _getAttribute(t) {
                if (!t) {
                    return
                }
                return t.getAttribute(this.attributeName)
            }

            _getValueToSet(t) {
                return t
            }

            _getSingleValue(t) {
                const e = this._getAttribute(t[0]);
                const i = t.every(t => this._getAttribute(t) === e);
                return i ? e : undefined
            }
        }

        class KR extends GR {
            constructor(t) {
                super(t, "padding")
            }

            _getAttribute(t) {
                if (!t) {
                    return
                }
                return $P(t.getAttribute(this.attributeName))
            }

            _getValueToSet(t) {
                return GP(t, "px")
            }
        }

        class JR extends GR {
            constructor(t) {
                super(t, "width")
            }

            _getValueToSet(t) {
                return GP(t, "px")
            }
        }

        class YR extends GR {
            constructor(t) {
                super(t, "height")
            }

            _getValueToSet(t) {
                return GP(t, "px")
            }
        }

        class QR extends GR {
            constructor(t) {
                super(t, "backgroundColor")
            }
        }

        class XR extends GR {
            constructor(t) {
                super(t, "verticalAlignment")
            }
        }

        class ZR extends GR {
            constructor(t) {
                super(t, "horizontalAlignment")
            }
        }

        class tO extends GR {
            constructor(t) {
                super(t, "borderStyle")
            }

            _getAttribute(t) {
                if (!t) {
                    return
                }
                return $P(t.getAttribute(this.attributeName))
            }
        }

        class eO extends GR {
            constructor(t) {
                super(t, "borderColor")
            }

            _getAttribute(t) {
                if (!t) {
                    return
                }
                return $P(t.getAttribute(this.attributeName))
            }
        }

        class iO extends GR {
            constructor(t) {
                super(t, "borderWidth")
            }

            _getAttribute(t) {
                if (!t) {
                    return
                }
                return $P(t.getAttribute(this.attributeName))
            }

            _getValueToSet(t) {
                return GP(t, "px")
            }
        }

        const nO = /^(top|bottom)$/;

        class oO extends mp {
            static get pluginName() {
                return "TableCellPropertiesEditing"
            }

            static get requires() {
                return [wE]
            }

            init() {
                const t = this.editor;
                const e = t.model.schema;
                const i = t.conversion;
                t.data.addStyleProcessorRules(SR);
                rO(e, i);
                t.commands.add("tableCellBorderStyle", new tO(t));
                t.commands.add("tableCellBorderColor", new eO(t));
                t.commands.add("tableCellBorderWidth", new iO(t));
                sO(e, i);
                t.commands.add("tableCellHorizontalAlignment", new ZR(t));
                cO(e, i, "width", "width");
                t.commands.add("tableCellWidth", new JR(t));
                cO(e, i, "height", "height");
                t.commands.add("tableCellHeight", new YR(t));
                t.data.addStyleProcessorRules(DR);
                cO(e, i, "padding", "padding");
                t.commands.add("tableCellPadding", new KR(t));
                t.data.addStyleProcessorRules(jR);
                cO(e, i, "backgroundColor", "background-color");
                t.commands.add("tableCellBackgroundColor", new QR(t));
                aO(e, i);
                t.commands.add("tableCellVerticalAlignment", new XR(t))
            }
        }

        function rO(t, e) {
            t.extend("tableCell", {allowAttributes: ["borderWidth", "borderColor", "borderStyle"]});
            qR(e, "td");
            qR(e, "th");
            UR(e, "tableCell", "borderStyle", "border-style");
            UR(e, "tableCell", "borderColor", "border-color");
            UR(e, "tableCell", "borderWidth", "border-width")
        }

        function sO(t, e) {
            t.extend("tableCell", {allowAttributes: ["horizontalAlignment"]});
            e.attributeToAttribute({
                model: {
                    name: "tableCell",
                    key: "horizontalAlignment",
                    values: ["right", "center", "justify"]
                },
                view: {
                    right: {key: "style", value: {"text-align": "right"}},
                    center: {key: "style", value: {"text-align": "center"}},
                    justify: {key: "style", value: {"text-align": "justify"}}
                }
            })
        }

        function aO(t, e) {
            t.extend("tableCell", {allowAttributes: ["verticalAlignment"]});
            e.attributeToAttribute({
                model: {name: "tableCell", key: "verticalAlignment", values: ["top", "bottom"]},
                view: {
                    top: {key: "style", value: {"vertical-align": "top"}},
                    bottom: {key: "style", value: {"vertical-align": "bottom"}}
                }
            });
            e.for("upcast").attributeToAttribute({
                view: {attributes: {valign: nO}},
                model: {name: "tableCell", key: "verticalAlignment", value: t => t.getAttribute("valign")}
            })
        }

        function cO(t, e, i, n) {
            t.extend("tableCell", {allowAttributes: [i]});
            WR(e, "tableCell", i, n);
            UR(e, "tableCell", i, n)
        }

        class lO extends mp {
            static get pluginName() {
                return "TableCellProperties"
            }

            static get requires() {
                return [oO, PR]
            }
        }

        class dO extends mp {
            static get requires() {
                return [ly]
            }

            static get pluginName() {
                return "TableToolbar"
            }

            afterInit() {
                const t = this.editor;
                const e = t.t;
                const i = t.plugins.get(ly);
                const n = t.config.get("table.contentToolbar");
                const o = t.config.get("table.tableToolbar");
                if (n) {
                    i.register("tableContent", {ariaLabel: e("iv"), items: n, getRelatedElement: nS})
                }
                if (o) {
                    i.register("table", {ariaLabel: e("iv"), items: o, getRelatedElement: iS})
                }
            }
        }

        class uO extends jw {
            constructor(t, e) {
                super(t);
                this.attributeName = e
            }

            refresh() {
                const t = this.editor;
                const e = t.model.document.selection;
                const i = WP("table", e.getFirstPosition());
                this.isEnabled = !!i;
                this.value = this._getValue(i)
            }

            execute(t = {}) {
                const e = this.editor.model;
                const i = e.document.selection;
                const {value: n, batch: o} = t;
                const r = WP("table", i.getFirstPosition());
                const s = this._getValueToSet(n);
                e.enqueueChange(o || "default", t => {
                    if (s) {
                        t.setAttribute(this.attributeName, s, r)
                    } else {
                        t.removeAttribute(this.attributeName, r)
                    }
                })
            }

            _getValue(t) {
                if (!t) {
                    return
                }
                return t.getAttribute(this.attributeName)
            }

            _getValueToSet(t) {
                return t
            }
        }

        class hO extends uO {
            constructor(t) {
                super(t, "backgroundColor")
            }
        }

        class fO extends uO {
            constructor(t) {
                super(t, "borderColor")
            }

            _getValue(t) {
                if (!t) {
                    return
                }
                return $P(t.getAttribute(this.attributeName))
            }
        }

        class gO extends uO {
            constructor(t) {
                super(t, "borderStyle")
            }

            _getValue(t) {
                if (!t) {
                    return
                }
                return $P(t.getAttribute(this.attributeName))
            }
        }

        class mO extends uO {
            constructor(t) {
                super(t, "borderWidth")
            }

            _getValue(t) {
                if (!t) {
                    return
                }
                return $P(t.getAttribute(this.attributeName))
            }

            _getValueToSet(t) {
                return GP(t, "px")
            }
        }

        class pO extends uO {
            constructor(t) {
                super(t, "width")
            }

            _getValueToSet(t) {
                return GP(t, "px")
            }
        }

        class bO extends uO {
            constructor(t) {
                super(t, "height")
            }

            _getValueToSet(t) {
                return GP(t, "px")
            }
        }

        class wO extends uO {
            constructor(t) {
                super(t, "alignment")
            }
        }

        const kO = /^(left|right)$/;

        class _O extends mp {
            static get pluginName() {
                return "TablePropertiesEditing"
            }

            static get requires() {
                return [wE]
            }

            init() {
                const t = this.editor;
                const e = t.model.schema;
                const i = t.conversion;
                t.data.addStyleProcessorRules(SR);
                vO(e, i);
                t.commands.add("tableBorderColor", new fO(t));
                t.commands.add("tableBorderStyle", new gO(t));
                t.commands.add("tableBorderWidth", new mO(t));
                yO(e, i);
                t.commands.add("tableAlignment", new wO(t));
                CO(e, i, "width", "width");
                t.commands.add("tableWidth", new pO(t));
                CO(e, i, "height", "height");
                t.commands.add("tableHeight", new bO(t));
                t.data.addStyleProcessorRules(jR);
                xO(e, i, "backgroundColor", "background-color");
                t.commands.add("tableBackgroundColor", new hO(t))
            }
        }

        function vO(t, e) {
            t.extend("table", {allowAttributes: ["borderWidth", "borderColor", "borderStyle"]});
            qR(e, "table");
            $R(e, "borderColor", "border-color");
            $R(e, "borderStyle", "border-style");
            $R(e, "borderWidth", "border-width")
        }

        function yO(t, e) {
            t.extend("table", {allowAttributes: ["alignment"]});
            e.attributeToAttribute({
                model: {name: "table", key: "alignment", values: ["left", "right"]},
                view: {left: {key: "style", value: {float: "left"}}, right: {key: "style", value: {float: "right"}}},
                converterPriority: "high"
            });
            e.for("upcast").attributeToAttribute({
                view: {attributes: {align: kO}},
                model: {name: "table", key: "alignment", value: t => t.getAttribute("align")}
            })
        }

        function xO(t, e, i, n) {
            t.extend("table", {allowAttributes: [i]});
            WR(e, "table", i, n);
            $R(e, i, n)
        }

        function CO(t, e, i, n) {
            t.extend("table", {allowAttributes: [i]});
            WR(e, "table", i, n);
            UR(e, "table", i, n)
        }

        var AO = i(112);
        const TO = {left: ky, center: _y, right: vy};

        class PO extends Gp {
            constructor(t, e) {
                super(t);
                this.set({
                    borderStyle: "",
                    borderWidth: "",
                    borderColor: "",
                    backgroundColor: "",
                    width: "",
                    height: "",
                    alignment: ""
                });
                this.options = e;
                const {borderStyleDropdown: i, borderWidthInput: n, borderColorInput: o, borderRowLabel: r} = this._createBorderFields();
                const {widthInput: s, operatorLabel: a, heightInput: c, dimensionsLabel: l} = this._createDimensionFields();
                const {alignmentToolbar: d, alignmentLabel: u} = this._createAlignmentFields();
                this.focusTracker = new fb;
                this.keystrokes = new dp;
                this.children = this.createCollection();
                this.borderStyleDropdown = i;
                this.borderWidthInput = n;
                this.borderColorInput = o;
                this.backgroundInput = this._createBackgroundField();
                this.widthInput = s;
                this.heightInput = c;
                this.alignmentToolbar = d;
                const {saveButtonView: h, cancelButtonView: f} = this._createActionButtons();
                this.saveButtonView = h;
                this.cancelButtonView = f;
                this._focusables = new bp;
                this._focusCycler = new yb({
                    focusables: this._focusables,
                    focusTracker: this.focusTracker,
                    keystrokeHandler: this.keystrokes,
                    actions: {focusPrevious: "shift + tab", focusNext: "tab"}
                });
                this.children.add(new mR(t, {label: this.t("Свойства таблицы")}));
                this.children.add(new fR(t, {
                    labelView: r,
                    children: [r, i, o, n],
                    class: "ck-table-form__border-row"
                }));
                this.children.add(new fR(t, {children: [this.backgroundInput]}));
                this.children.add(new fR(t, {
                    children: [new fR(t, {
                        labelView: l,
                        children: [l, s, a, c],
                        class: "ck-table-form__dimensions-row"
                    }), new fR(t, {labelView: u, children: [u, d], class: "ck-table-properties-form__alignment-row"})]
                }));
                this.children.add(new fR(t, {
                    children: [this.saveButtonView, this.cancelButtonView],
                    class: "ck-table-form__action-row"
                }));
                this.setTemplate({
                    tag: "form",
                    attributes: {class: ["ck", "ck-form", "ck-table-form", "ck-table-properties-form"], tabindex: "-1"},
                    children: this.children
                })
            }

            render() {
                super.render();
                Qv({view: this});
                [this.borderStyleDropdown, this.borderColorInput, this.borderWidthInput, this.backgroundInput, this.widthInput, this.heightInput, this.alignmentToolbar, this.saveButtonView, this.cancelButtonView].forEach(t => {
                    this._focusables.add(t);
                    this.focusTracker.add(t.element)
                });
                this.keystrokes.listenTo(this.element)
            }

            focus() {
                this._focusCycler.focusFirst()
            }

            _createBorderFields() {
                const t = cR({colorConfig: this.options.borderColors, columns: 5});
                const e = this.locale;
                const i = this.t;
                const n = new Mk(e);
                n.text = i("nb");
                const o = ZE(this.t);
                const r = new HE(e, qE);
                r.set({label: i("nc"), class: "ck-table-form__border-style"});
                r.view.buttonView.set({isOn: false, withText: true, tooltip: i("nc")});
                r.view.buttonView.bind("label").to(this, "borderStyle", t => o[t ? t : "none"]);
                r.view.on("execute", t => {
                    this.borderStyle = t.source._borderStyleValue
                });
                Ub(r.view, rR(this));
                const s = new HE(e, WE);
                s.set({label: i("nd"), class: "ck-table-form__border-width"});
                s.view.bind("value").to(this, "borderWidth");
                s.bind("isEnabled").to(this, "borderStyle", SO);
                s.view.on("input", () => {
                    this.borderWidth = s.view.element.value
                });
                const a = new HE(e, t);
                a.set({label: i("ne"), class: "ck-table-form__border-color"});
                a.view.bind("value").to(this, "borderColor");
                a.bind("isEnabled").to(this, "borderStyle", SO);
                a.view.on("input", () => {
                    this.borderColor = a.view.value
                });
                this.on("change:borderStyle", (t, e, i) => {
                    if (!SO(i)) {
                        this.borderColor = "";
                        this.borderWidth = ""
                    }
                });
                return {borderRowLabel: n, borderStyleDropdown: r, borderColorInput: a, borderWidthInput: s}
            }

            _createBackgroundField() {
                const t = cR({colorConfig: this.options.backgroundColors, columns: 5});
                const e = this.locale;
                const i = this.t;
                const n = new HE(e, t);
                n.set({label: i("nf"), class: "ck-table-properties-form__background"});
                n.view.bind("value").to(this, "backgroundColor");
                n.view.on("input", () => {
                    this.backgroundColor = n.view.value
                });
                return n
            }

            _createDimensionFields() {
                const t = this.locale;
                const e = this.t;
                const i = new Mk(t);
                i.text = e("ng");
                const n = new HE(t, WE);
                n.set({label: e("nd"), class: "ck-table-form__dimensions-row__width"});
                n.view.bind("value").to(this, "width");
                n.view.on("input", () => {
                    this.width = n.view.element.value
                });
                const o = new Gp(t);
                o.setTemplate({
                    tag: "span",
                    attributes: {class: ["ck-table-form__dimension-operator"]},
                    children: [{text: "×"}]
                });
                const r = new HE(t, WE);
                r.set({label: e("nh"), class: "ck-table-form__dimensions-row__height"});
                r.view.bind("value").to(this, "height");
                r.view.on("input", () => {
                    this.height = r.view.element.value
                });
                return {dimensionsLabel: i, widthInput: n, operatorLabel: o, heightInput: r}
            }

            _createAlignmentFields() {
                const t = this.locale;
                const e = this.t;
                const i = new Mk(t);
                i.text = e("nt");
                const n = new Xb(t);
                n.set({isCompact: true, ariaLabel: e("nu")});
                sR({
                    view: this,
                    icons: TO,
                    toolbar: n,
                    labels: this._alignmentLabels,
                    propertyName: "alignment",
                    nameToValue: t => t === "center" ? "" : t
                });
                return {alignmentLabel: i, alignmentToolbar: n}
            }

            _createActionButtons() {
                const t = this.locale;
                const e = this.t;
                const i = new hb(t);
                const n = new hb(t);
                const o = [this.borderWidthInput, this.borderColorInput, this.backgroundInput, this.widthInput, this.heightInput];
                i.set({label: e("lo"), icon: Xv, class: "ck-button-save", type: "submit", withText: true});
                i.bind("isEnabled").toMany(o, "errorText", (...t) => t.every(t => !t));
                n.set({label: e("lp"), icon: Zv, class: "ck-button-cancel", type: "cancel", withText: true});
                n.delegate("execute").to(this, "cancel");
                return {saveButtonView: i, cancelButtonView: n}
            }

            get _alignmentLabels() {
                const t = this.locale;
                const e = this.t;
                const i = e("nv");
                const n = e("nw");
                const o = e("nx");
                if (t.uiLanguageDirection === "rtl") {
                    return {right: o, center: n, left: i}
                } else {
                    return {left: i, center: n, right: o}
                }
            }
        }

        function SO(t) {
            return !!t
        }

        var EO = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M8 2v5h4V2h1v5h5v1h-5v4h.021l-.172.351-1.916.28-.151.027c-.287.063-.54.182-.755.341L8 13v5H7v-5H2v-1h5V8H2V7h5V2h1zm4 6H8v4h4V8z" opacity=".6"/><path d="M15.5 11.5l1.323 2.68 2.957.43-2.14 2.085.505 2.946L15.5 18.25l-2.645 1.39.505-2.945-2.14-2.086 2.957-.43L15.5 11.5zM17 1a2 2 0 0 1 2 2v9.475l-.85-.124-.857-1.736a2.048 2.048 0 0 0-.292-.44L17 3H3v14h7.808l.402.392L10.935 19H3a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h14z"/></svg>';
        const RO = 500;

        class OO extends mp {
            static get requires() {
                return [kb]
            }

            static get pluginName() {
                return "TablePropertiesUI"
            }

            constructor(t) {
                super(t);
                t.config.define("table.tableProperties", {borderColors: aR, backgroundColors: aR})
            }

            init() {
                const t = this.editor;
                const e = t.t;
                this._balloon = t.plugins.get(kb);
                this.view = this._createPropertiesView();
                this._undoStepBatch = null;
                t.ui.componentFactory.add("tableProperties", t => {
                    const i = new hb(t);
                    i.set({label: e("kg"), icon: EO, tooltip: true});
                    this.listenTo(i, "execute", () => this._showView());
                    return i
                })
            }

            destroy() {
                super.destroy();
                this.view.destroy()
            }

            _createPropertiesView() {
                const t = this.editor;
                const e = t.editing.view.document;
                const i = t.config.get("table.tableProperties");
                const n = __(i.borderColors);
                const o = k_(t.locale, n);
                const r = __(i.backgroundColors);
                const s = k_(t.locale, r);
                const a = new PO(t.locale, {borderColors: o, backgroundColors: s});
                const c = t.t;
                a.render();
                this.listenTo(a, "submit", () => {
                    this._hideView()
                });
                this.listenTo(a, "cancel", () => {
                    if (this._undoStepBatch.operations.length) {
                        t.execute("undo", this._undoStepBatch)
                    }
                    this._hideView()
                });
                a.keystrokes.set("Esc", (t, e) => {
                    this._hideView();
                    e()
                });
                this.listenTo(t.ui, "update", () => {
                    if (!nS(e.selection)) {
                        this._hideView()
                    } else if (this._isViewVisible) {
                        YE(t, "table")
                    }
                });
                Db({
                    emitter: a,
                    activator: () => this._isViewInBalloon,
                    contextElements: [this._balloon.view.element],
                    callback: () => this._hideView()
                });
                const l = tR(c);
                const d = eR(c);
                a.on("change:borderStyle", this._getPropertyChangeCallback("tableBorderStyle"));
                a.on("change:borderColor", this._getValidatedPropertyChangeCallback({
                    viewField: a.borderColorInput,
                    commandName: "tableBorderColor",
                    errorText: l,
                    validator: iR
                }));
                a.on("change:borderWidth", this._getValidatedPropertyChangeCallback({
                    viewField: a.borderWidthInput,
                    commandName: "tableBorderWidth",
                    errorText: d,
                    validator: oR
                }));
                a.on("change:backgroundColor", this._getValidatedPropertyChangeCallback({
                    viewField: a.backgroundInput,
                    commandName: "tableBackgroundColor",
                    errorText: l,
                    validator: iR
                }));
                a.on("change:width", this._getValidatedPropertyChangeCallback({
                    viewField: a.widthInput,
                    commandName: "tableWidth",
                    errorText: d,
                    validator: nR
                }));
                a.on("change:height", this._getValidatedPropertyChangeCallback({
                    viewField: a.heightInput,
                    commandName: "tableHeight",
                    errorText: d,
                    validator: nR
                }));
                a.on("change:alignment", this._getPropertyChangeCallback("tableAlignment"));
                return a
            }

            _fillViewFormFromCommandValues() {
                const t = this.editor.commands;
                this.view.set({
                    borderStyle: t.get("tableBorderStyle").value || "",
                    borderColor: t.get("tableBorderColor").value || "",
                    borderWidth: t.get("tableBorderWidth").value || "",
                    backgroundColor: t.get("tableBackgroundColor").value || "",
                    width: t.get("tableWidth").value || "",
                    height: t.get("tableHeight").value || "",
                    alignment: t.get("tableAlignment").value || ""
                })
            }

            _showView() {
                const t = this.editor;
                this._balloon.add({view: this.view, position: QE(t)});
                this._undoStepBatch = t.model.createBatch();
                this._fillViewFormFromCommandValues();
                this.view.focus()
            }

            _hideView() {
                if (!this._isViewInBalloon) {
                    return
                }
                const t = this.editor;
                this.stopListening(t.ui, "update");
                this.view.saveButtonView.focus();
                this._balloon.remove(this.view);
                this.editor.editing.view.focus()
            }

            get _isViewVisible() {
                return this._balloon.visibleView === this.view
            }

            get _isViewInBalloon() {
                return this._balloon.hasView(this.view)
            }

            _getPropertyChangeCallback(t) {
                return (e, i, n) => {
                    this.editor.execute(t, {value: n, batch: this._undoStepBatch})
                }
            }

            _getValidatedPropertyChangeCallback({commandName: t, viewField: e, validator: i, errorText: n}) {
                const o = uh(() => {
                    e.errorText = n
                }, RO);
                return (n, r, s) => {
                    o.cancel();
                    if (i(s)) {
                        this.editor.execute(t, {value: s, batch: this._undoStepBatch});
                        e.errorText = null
                    } else {
                        o()
                    }
                }
            }
        }

        class IO extends mp {
            static get pluginName() {
                return "TableProperties"
            }

            static get requires() {
                return [_O, OO]
            }
        }

        const VO = "underline";

        class NO extends mp {
            static get pluginName() {
                return "UnderlineEditing"
            }

            init() {
                const t = this.editor;
                t.model.schema.extend("$text", {allowAttributes: VO});
                t.model.schema.setAttributeProperties(VO, {isFormatting: true, copyOnEnter: true});
                t.conversion.attributeToElement({
                    model: VO,
                    view: "u",
                    upcastAlso: {styles: {"text-decoration": "underline"}}
                });
                t.commands.add(VO, new yk(t, VO));
                t.keystrokes.set("CTRL+U", "underline")
            }
        }

        var MO = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M3 18v-1.5h14V18zm2.2-8V3.6c0-.4.4-.6.8-.6.3 0 .7.2.7.6v6.2c0 2 1.3 2.8 3.2 2.8 1.9 0 3.4-.9 3.4-2.9V3.6c0-.3.4-.5.8-.5.3 0 .7.2.7.5V10c0 2.7-2.2 4-4.9 4-2.6 0-4.7-1.2-4.7-4z"/></svg>';
        const BO = "underline";

        class zO extends mp {
            init() {
                const t = this.editor;
                const e = t.t;
                t.ui.componentFactory.add(BO, i => {
                    const n = t.commands.get(BO);
                    const o = new hb(i);
                    o.set({label: e("jn"), icon: MO, keystroke: "CTRL+U", tooltip: true, isToggleable: true});
                    o.bind("isOn", "isEnabled").to(n, "value", "isEnabled");
                    this.listenTo(o, "execute", () => {
                        t.execute(BO);
                        t.editing.view.focus()
                    });
                    return o
                })
            }
        }

        class LO extends mp {
            static get requires() {
                return [NO, zO]
            }

            static get pluginName() {
                return "Underline"
            }
        }

        function* FO(t, e) {
            for (const i of e) {
                if (i && t.getAttributeProperties(i[0]).copyOnEnter) {
                    yield i
                }
            }
        }

        class DO extends jw {
            execute() {
                const t = this.editor.model;
                const e = t.document;
                t.change(i => {
                    jO(this.editor.model, i, e.selection, t.schema);
                    this.fire("afterExecute", {writer: i})
                })
            }
        }

        function jO(t, e, i, n) {
            const o = i.isCollapsed;
            const r = i.getFirstRange();
            const s = r.start.parent;
            const a = r.end.parent;
            if (n.isLimit(s) || n.isLimit(a)) {
                if (!o && s == a) {
                    t.deleteContent(i)
                }
                return
            }
            if (o) {
                const t = FO(e.model.schema, i.getAttributes());
                HO(e, r.start);
                e.setSelectionAttribute(t)
            } else {
                const n = !(r.start.isAtStart && r.end.isAtEnd);
                const o = s == a;
                t.deleteContent(i, {leaveUnmerged: n});
                if (n) {
                    if (o) {
                        HO(e, i.focus)
                    } else {
                        e.setSelection(a, 0)
                    }
                }
            }
        }

        function HO(t, e) {
            t.split(e);
            t.setSelection(e.parent.nextSibling, 0)
        }

        class WO extends Gd {
            constructor(t) {
                super(t);
                const e = this.document;
                e.on("keydown", (t, i) => {
                    if (this.isEnabled && i.keyCode == Nl.enter) {
                        let n;
                        e.once("enter", t => n = t, {priority: "highest"});
                        e.fire("enter", new Ku(e, i.domEvent, {isSoft: i.shiftKey}));
                        if (n && n.stop.called) {
                            t.stop()
                        }
                    }
                })
            }

            observe() {
            }
        }

        class qO extends mp {
            static get pluginName() {
                return "Enter"
            }

            init() {
                const t = this.editor;
                const e = t.editing.view;
                const i = e.document;
                e.addObserver(WO);
                t.commands.add("enter", new DO(t));
                this.listenTo(i, "enter", (i, n) => {
                    n.preventDefault();
                    if (n.isSoft) {
                        return
                    }
                    t.execute("enter");
                    e.scrollToTheSelection()
                }, {priority: "low"})
            }
        }

        class UO extends jw {
            execute() {
                const t = this.editor.model;
                const e = t.document;
                t.change(i => {
                    GO(t, i, e.selection);
                    this.fire("afterExecute", {writer: i})
                })
            }

            refresh() {
                const t = this.editor.model;
                const e = t.document;
                this.isEnabled = $O(t.schema, e.selection)
            }
        }

        function $O(t, e) {
            if (e.rangeCount > 1) {
                return false
            }
            const i = e.anchor;
            if (!i || !t.checkChild(i, "softBreak")) {
                return false
            }
            const n = e.getFirstRange();
            const o = n.start.parent;
            const r = n.end.parent;
            if ((JO(o, t) || JO(r, t)) && o !== r) {
                return false
            }
            return true
        }

        function GO(t, e, i) {
            const n = i.isCollapsed;
            const o = i.getFirstRange();
            const r = o.start.parent;
            const s = o.end.parent;
            const a = r == s;
            if (n) {
                const n = FO(t.schema, i.getAttributes());
                KO(t, e, o.end);
                e.removeSelectionAttribute(i.getAttributeKeys());
                e.setSelectionAttribute(n)
            } else {
                const n = !(o.start.isAtStart && o.end.isAtEnd);
                t.deleteContent(i, {leaveUnmerged: n});
                if (a) {
                    KO(t, e, i.focus)
                } else {
                    if (n) {
                        e.setSelection(s, 0)
                    }
                }
            }
        }

        function KO(t, e, i) {
            const n = e.createElement("softBreak");
            t.insertContent(n, i);
            e.setSelection(n, "after")
        }

        function JO(t, e) {
            if (t.is("rootElement")) {
                return false
            }
            return e.isLimit(t) || JO(t.parent, e)
        }

        class YO extends mp {
            static get pluginName() {
                return "ShiftEnter"
            }

            init() {
                const t = this.editor;
                const e = t.model.schema;
                const i = t.conversion;
                const n = t.editing.view;
                const o = n.document;
                e.register("softBreak", {allowWhere: "$text", isInline: true});
                i.for("upcast").elementToElement({model: "softBreak", view: "br"});
                i.for("downcast").elementToElement({model: "softBreak", view: (t, e) => e.createEmptyElement("br")});
                n.addObserver(WO);
                t.commands.add("shiftEnter", new UO(t));
                this.listenTo(o, "enter", (e, i) => {
                    i.preventDefault();
                    if (!i.isSoft) {
                        return
                    }
                    t.execute("shiftEnter");
                    n.scrollToTheSelection()
                }, {priority: "low"})
            }
        }

        const QO = new Map;

        function XO(t, e, i) {
            let n = QO.get(t);
            if (!n) {
                n = new Map;
                QO.set(t, n)
            }
            n.set(e, i)
        }

        function ZO(t, e) {
            const i = QO.get(t);
            if (i && i.has(e)) {
                return i.get(e)
            }
            return tI
        }

        function tI(t) {
            return [t]
        }

        function eI(t, e, i = {}) {
            const n = ZO(t.constructor, e.constructor);
            try {
                t = t.clone();
                return n(t, e, i)
            } catch (t) {
                throw t
            }
        }

        function iI(t, e, i) {
            t = t.slice();
            e = e.slice();
            const n = new nI(i.document, i.useRelations, i.forceWeakRemove);
            n.setOriginalOperations(t);
            n.setOriginalOperations(e);
            const o = n.originalOperations;
            if (t.length == 0 || e.length == 0) {
                return {operationsA: t, operationsB: e, originalOperations: o}
            }
            const r = new WeakMap;
            for (const e of t) {
                r.set(e, 0)
            }
            const s = {
                nextBaseVersionA: t[t.length - 1].baseVersion + 1,
                nextBaseVersionB: e[e.length - 1].baseVersion + 1,
                originalOperationsACount: t.length,
                originalOperationsBCount: e.length
            };
            let a = 0;
            while (a < t.length) {
                const i = t[a];
                const o = r.get(i);
                if (o == e.length) {
                    a++;
                    continue
                }
                const s = e[o];
                const c = eI(i, s, n.getContext(i, s, true));
                const l = eI(s, i, n.getContext(s, i, false));
                n.updateRelation(i, s);
                n.setOriginalOperations(c, i);
                n.setOriginalOperations(l, s);
                for (const t of c) {
                    r.set(t, o + l.length)
                }
                t.splice(a, 1, ...c);
                e.splice(o, 1, ...l)
            }
            if (i.padWithNoOps) {
                const i = t.length - s.originalOperationsACount;
                const n = e.length - s.originalOperationsBCount;
                rI(t, n - i);
                rI(e, i - n)
            }
            oI(t, s.nextBaseVersionB);
            oI(e, s.nextBaseVersionA);
            return {operationsA: t, operationsB: e, originalOperations: o}
        }

        class nI {
            constructor(t, e, i = false) {
                this.originalOperations = new Map;
                this._history = t.history;
                this._useRelations = e;
                this._forceWeakRemove = !!i;
                this._relations = new Map
            }

            setOriginalOperations(t, e = null) {
                const i = e ? this.originalOperations.get(e) : null;
                for (const e of t) {
                    this.originalOperations.set(e, i || e)
                }
            }

            updateRelation(t, e) {
                switch (t.constructor) {
                    case Zg: {
                        switch (e.constructor) {
                            case om: {
                                if (t.targetPosition.isEqual(e.sourcePosition) || e.movedRange.containsPosition(t.targetPosition)) {
                                    this._setRelation(t, e, "insertAtSource")
                                } else if (t.targetPosition.isEqual(e.deletionPosition)) {
                                    this._setRelation(t, e, "insertBetween")
                                } else if (t.targetPosition.isAfter(e.sourcePosition)) {
                                    this._setRelation(t, e, "moveTargetAfter")
                                }
                                break
                            }
                            case Zg: {
                                if (t.targetPosition.isEqual(e.sourcePosition) || t.targetPosition.isBefore(e.sourcePosition)) {
                                    this._setRelation(t, e, "insertBefore")
                                } else {
                                    this._setRelation(t, e, "insertAfter")
                                }
                                break
                            }
                        }
                        break
                    }
                    case rm: {
                        switch (e.constructor) {
                            case om: {
                                if (t.splitPosition.isBefore(e.sourcePosition)) {
                                    this._setRelation(t, e, "splitBefore")
                                }
                                break
                            }
                            case Zg: {
                                if (t.splitPosition.isEqual(e.sourcePosition) || t.splitPosition.isBefore(e.sourcePosition)) {
                                    this._setRelation(t, e, "splitBefore")
                                }
                                break
                            }
                        }
                        break
                    }
                    case om: {
                        switch (e.constructor) {
                            case om: {
                                if (!t.targetPosition.isEqual(e.sourcePosition)) {
                                    this._setRelation(t, e, "mergeTargetNotMoved")
                                }
                                if (t.sourcePosition.isEqual(e.targetPosition)) {
                                    this._setRelation(t, e, "mergeSourceNotMoved")
                                }
                                if (t.sourcePosition.isEqual(e.sourcePosition)) {
                                    this._setRelation(t, e, "mergeSameElement")
                                }
                                break
                            }
                            case rm: {
                                if (t.sourcePosition.isEqual(e.splitPosition)) {
                                    this._setRelation(t, e, "splitAtSource")
                                }
                            }
                        }
                        break
                    }
                    case em: {
                        const i = t.newRange;
                        if (!i) {
                            return
                        }
                        switch (e.constructor) {
                            case Zg: {
                                const n = $h._createFromPositionAndShift(e.sourcePosition, e.howMany);
                                const o = n.containsPosition(i.start) || n.start.isEqual(i.start);
                                const r = n.containsPosition(i.end) || n.end.isEqual(i.end);
                                if ((o || r) && !n.containsRange(i)) {
                                    this._setRelation(t, e, {
                                        side: o ? "left" : "right",
                                        path: o ? i.start.path.slice() : i.end.path.slice()
                                    })
                                }
                                break
                            }
                            case om: {
                                const n = i.start.isEqual(e.targetPosition);
                                const o = i.start.isEqual(e.deletionPosition);
                                const r = i.end.isEqual(e.deletionPosition);
                                const s = i.end.isEqual(e.sourcePosition);
                                if (n || o || r || s) {
                                    this._setRelation(t, e, {
                                        wasInLeftElement: n,
                                        wasStartBeforeMergedElement: o,
                                        wasEndBeforeMergedElement: r,
                                        wasInRightElement: s
                                    })
                                }
                                break
                            }
                        }
                        break
                    }
                }
            }

            getContext(t, e, i) {
                return {
                    aIsStrong: i,
                    aWasUndone: this._wasUndone(t),
                    bWasUndone: this._wasUndone(e),
                    abRelation: this._useRelations ? this._getRelation(t, e) : null,
                    baRelation: this._useRelations ? this._getRelation(e, t) : null,
                    forceWeakRemove: this._forceWeakRemove
                }
            }

            _wasUndone(t) {
                const e = this.originalOperations.get(t);
                return e.wasUndone || this._history.isUndoneOperation(e)
            }

            _getRelation(t, e) {
                const i = this.originalOperations.get(e);
                const n = this._history.getUndoneOperation(i);
                if (!n) {
                    return null
                }
                const o = this.originalOperations.get(t);
                const r = this._relations.get(o);
                if (r) {
                    return r.get(n) || null
                }
                return null
            }

            _setRelation(t, e, i) {
                const n = this.originalOperations.get(t);
                const o = this.originalOperations.get(e);
                let r = this._relations.get(n);
                if (!r) {
                    r = new Map;
                    this._relations.set(n, r)
                }
                r.set(o, i)
            }
        }

        function oI(t, e) {
            for (const i of t) {
                i.baseVersion = e++
            }
        }

        function rI(t, e) {
            for (let i = 0; i < e; i++) {
                t.push(new Sm(0))
            }
        }

        XO(Qg, Qg, (t, e, i) => {
            if (t.key === e.key) {
                const n = t.range.getDifference(e.range).map(e => new Qg(e, t.key, t.oldValue, t.newValue, 0));
                const o = t.range.getIntersection(e.range);
                if (o) {
                    if (i.aIsStrong) {
                        n.push(new Qg(o, e.key, e.newValue, t.newValue, 0))
                    }
                }
                if (n.length == 0) {
                    return [new Sm(0)]
                }
                return n
            } else {
                return [t]
            }
        });
        XO(Qg, tm, (t, e) => {
            if (t.range.start.hasSameParentAs(e.position) && t.range.containsPosition(e.position)) {
                const i = t.range._getTransformedByInsertion(e.position, e.howMany, !e.shouldReceiveAttributes);
                const n = i.map(e => new Qg(e, t.key, t.oldValue, t.newValue, t.baseVersion));
                if (e.shouldReceiveAttributes) {
                    const i = sI(e, t.key, t.oldValue);
                    if (i) {
                        n.unshift(i)
                    }
                }
                return n
            }
            t.range = t.range._getTransformedByInsertion(e.position, e.howMany, false)[0];
            return [t]
        });

        function sI(t, e, i) {
            const n = t.nodes;
            const o = n.getNode(0).getAttribute(e);
            if (o == i) {
                return null
            }
            const r = new $h(t.position, t.position.getShiftedBy(t.howMany));
            return new Qg(r, e, o, i, 0)
        }

        XO(Qg, om, (t, e) => {
            const i = [];
            if (t.range.start.hasSameParentAs(e.deletionPosition)) {
                if (t.range.containsPosition(e.deletionPosition) || t.range.start.isEqual(e.deletionPosition)) {
                    i.push($h._createFromPositionAndShift(e.graveyardPosition, 1))
                }
            }
            const n = t.range._getTransformedByMergeOperation(e);
            if (!n.isCollapsed) {
                i.push(n)
            }
            return i.map(e => new Qg(e, t.key, t.oldValue, t.newValue, t.baseVersion))
        });
        XO(Qg, Zg, (t, e) => {
            const i = aI(t.range, e);
            return i.map(e => new Qg(e, t.key, t.oldValue, t.newValue, t.baseVersion))
        });

        function aI(t, e) {
            const i = $h._createFromPositionAndShift(e.sourcePosition, e.howMany);
            let n = null;
            let o = [];
            if (i.containsRange(t, true)) {
                n = t
            } else if (t.start.hasSameParentAs(i.start)) {
                o = t.getDifference(i);
                n = t.getIntersection(i)
            } else {
                o = [t]
            }
            const r = [];
            for (let t of o) {
                t = t._getTransformedByDeletion(e.sourcePosition, e.howMany);
                const i = e.getMovedRangeStart();
                const n = t.start.hasSameParentAs(i);
                t = t._getTransformedByInsertion(i, e.howMany, n);
                r.push(...t)
            }
            if (n) {
                r.push(n._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany, false)[0])
            }
            return r
        }

        XO(Qg, rm, (t, e) => {
            if (t.range.end.isEqual(e.insertionPosition)) {
                if (!e.graveyardPosition) {
                    t.range.end.offset++
                }
                return [t]
            }
            if (t.range.start.hasSameParentAs(e.splitPosition) && t.range.containsPosition(e.splitPosition)) {
                const i = t.clone();
                i.range = new $h(e.moveTargetPosition.clone(), t.range.end._getCombined(e.splitPosition, e.moveTargetPosition));
                t.range.end = e.splitPosition.clone();
                t.range.end.stickiness = "toPrevious";
                return [t, i]
            }
            t.range = t.range._getTransformedBySplitOperation(e);
            return [t]
        });
        XO(tm, Qg, (t, e) => {
            const i = [t];
            if (t.shouldReceiveAttributes && t.position.hasSameParentAs(e.range.start) && e.range.containsPosition(t.position)) {
                const n = sI(t, e.key, e.newValue);
                if (n) {
                    i.push(n)
                }
            }
            return i
        });
        XO(tm, tm, (t, e, i) => {
            if (t.position.isEqual(e.position) && i.aIsStrong) {
                return [t]
            }
            t.position = t.position._getTransformedByInsertOperation(e);
            return [t]
        });
        XO(tm, Zg, (t, e) => {
            t.position = t.position._getTransformedByMoveOperation(e);
            return [t]
        });
        XO(tm, rm, (t, e) => {
            t.position = t.position._getTransformedBySplitOperation(e);
            return [t]
        });
        XO(tm, om, (t, e) => {
            t.position = t.position._getTransformedByMergeOperation(e);
            return [t]
        });
        XO(em, tm, (t, e) => {
            if (t.oldRange) {
                t.oldRange = t.oldRange._getTransformedByInsertOperation(e)[0]
            }
            if (t.newRange) {
                t.newRange = t.newRange._getTransformedByInsertOperation(e)[0]
            }
            return [t]
        });
        XO(em, em, (t, e, i) => {
            if (t.name == e.name) {
                if (i.aIsStrong) {
                    t.oldRange = e.newRange ? e.newRange.clone() : null
                } else {
                    return [new Sm(0)]
                }
            }
            return [t]
        });
        XO(em, om, (t, e) => {
            if (t.oldRange) {
                t.oldRange = t.oldRange._getTransformedByMergeOperation(e)
            }
            if (t.newRange) {
                t.newRange = t.newRange._getTransformedByMergeOperation(e)
            }
            return [t]
        });
        XO(em, Zg, (t, e, i) => {
            if (t.oldRange) {
                t.oldRange = $h._createFromRanges(t.oldRange._getTransformedByMoveOperation(e))
            }
            if (t.newRange) {
                if (i.abRelation) {
                    const n = $h._createFromRanges(t.newRange._getTransformedByMoveOperation(e));
                    if (i.abRelation.side == "left" && e.targetPosition.isEqual(t.newRange.start)) {
                        t.newRange.start.path = i.abRelation.path;
                        t.newRange.end = n.end;
                        return [t]
                    } else if (i.abRelation.side == "right" && e.targetPosition.isEqual(t.newRange.end)) {
                        t.newRange.start = n.start;
                        t.newRange.end.path = i.abRelation.path;
                        return [t]
                    }
                }
                t.newRange = $h._createFromRanges(t.newRange._getTransformedByMoveOperation(e))
            }
            return [t]
        });
        XO(em, rm, (t, e, i) => {
            if (t.oldRange) {
                t.oldRange = t.oldRange._getTransformedBySplitOperation(e)
            }
            if (t.newRange) {
                if (i.abRelation) {
                    const n = t.newRange._getTransformedBySplitOperation(e);
                    if (t.newRange.start.isEqual(e.splitPosition) && i.abRelation.wasStartBeforeMergedElement) {
                        t.newRange.start = Uh._createAt(e.insertionPosition)
                    } else if (t.newRange.start.isEqual(e.splitPosition) && !i.abRelation.wasInLeftElement) {
                        t.newRange.start = Uh._createAt(e.moveTargetPosition)
                    }
                    if (t.newRange.end.isEqual(e.splitPosition) && i.abRelation.wasInRightElement) {
                        t.newRange.end = Uh._createAt(e.moveTargetPosition)
                    } else if (t.newRange.end.isEqual(e.splitPosition) && i.abRelation.wasEndBeforeMergedElement) {
                        t.newRange.end = Uh._createAt(e.insertionPosition)
                    } else {
                        t.newRange.end = n.end
                    }
                    return [t]
                }
                t.newRange = t.newRange._getTransformedBySplitOperation(e)
            }
            return [t]
        });
        XO(om, tm, (t, e) => {
            if (t.sourcePosition.hasSameParentAs(e.position)) {
                t.howMany += e.howMany
            }
            t.sourcePosition = t.sourcePosition._getTransformedByInsertOperation(e);
            t.targetPosition = t.targetPosition._getTransformedByInsertOperation(e);
            return [t]
        });
        XO(om, om, (t, e, i) => {
            if (t.sourcePosition.isEqual(e.sourcePosition) && t.targetPosition.isEqual(e.targetPosition)) {
                if (!i.bWasUndone) {
                    return [new Sm(0)]
                } else {
                    const i = e.graveyardPosition.path.slice();
                    i.push(0);
                    t.sourcePosition = new Uh(e.graveyardPosition.root, i);
                    t.howMany = 0;
                    return [t]
                }
            }
            if (t.sourcePosition.isEqual(e.sourcePosition) && !t.targetPosition.isEqual(e.targetPosition) && !i.bWasUndone && i.abRelation != "splitAtSource") {
                const n = t.targetPosition.root.rootName == "$graveyard";
                const o = e.targetPosition.root.rootName == "$graveyard";
                const r = n && !o;
                const s = o && !n;
                const a = s || !r && i.aIsStrong;
                if (a) {
                    const i = e.targetPosition._getTransformedByMergeOperation(e);
                    const n = t.targetPosition._getTransformedByMergeOperation(e);
                    return [new Zg(i, t.howMany, n, 0)]
                } else {
                    return [new Sm(0)]
                }
            }
            if (t.sourcePosition.hasSameParentAs(e.targetPosition)) {
                t.howMany += e.howMany
            }
            t.sourcePosition = t.sourcePosition._getTransformedByMergeOperation(e);
            t.targetPosition = t.targetPosition._getTransformedByMergeOperation(e);
            if (!t.graveyardPosition.isEqual(e.graveyardPosition) || !i.aIsStrong) {
                t.graveyardPosition = t.graveyardPosition._getTransformedByMergeOperation(e)
            }
            return [t]
        });
        XO(om, Zg, (t, e, i) => {
            const n = $h._createFromPositionAndShift(e.sourcePosition, e.howMany);
            if (e.type == "remove" && !i.bWasUndone && !i.forceWeakRemove) {
                if (t.deletionPosition.hasSameParentAs(e.sourcePosition) && n.containsPosition(t.sourcePosition)) {
                    return [new Sm(0)]
                }
            }
            if (t.sourcePosition.hasSameParentAs(e.targetPosition)) {
                t.howMany += e.howMany
            }
            if (t.sourcePosition.hasSameParentAs(e.sourcePosition)) {
                t.howMany -= e.howMany
            }
            t.sourcePosition = t.sourcePosition._getTransformedByMoveOperation(e);
            t.targetPosition = t.targetPosition._getTransformedByMoveOperation(e);
            if (!t.graveyardPosition.isEqual(e.targetPosition)) {
                t.graveyardPosition = t.graveyardPosition._getTransformedByMoveOperation(e)
            }
            return [t]
        });
        XO(om, rm, (t, e, i) => {
            if (e.graveyardPosition) {
                t.graveyardPosition = t.graveyardPosition._getTransformedByDeletion(e.graveyardPosition, 1);
                if (t.deletionPosition.isEqual(e.graveyardPosition)) {
                    t.howMany = e.howMany
                }
            }
            if (t.targetPosition.isEqual(e.splitPosition)) {
                const n = e.howMany != 0;
                const o = e.graveyardPosition && t.deletionPosition.isEqual(e.graveyardPosition);
                if (n || o || i.abRelation == "mergeTargetNotMoved") {
                    t.sourcePosition = t.sourcePosition._getTransformedBySplitOperation(e);
                    return [t]
                }
            }
            if (t.sourcePosition.isEqual(e.splitPosition)) {
                if (i.abRelation == "mergeSourceNotMoved") {
                    t.howMany = 0;
                    t.targetPosition = t.targetPosition._getTransformedBySplitOperation(e);
                    return [t]
                }
                if (i.abRelation == "mergeSameElement" || t.sourcePosition.offset > 0) {
                    t.sourcePosition = e.moveTargetPosition.clone();
                    t.targetPosition = t.targetPosition._getTransformedBySplitOperation(e);
                    return [t]
                }
            }
            if (t.sourcePosition.hasSameParentAs(e.splitPosition)) {
                t.howMany = e.splitPosition.offset
            }
            t.sourcePosition = t.sourcePosition._getTransformedBySplitOperation(e);
            t.targetPosition = t.targetPosition._getTransformedBySplitOperation(e);
            return [t]
        });
        XO(Zg, tm, (t, e) => {
            const i = $h._createFromPositionAndShift(t.sourcePosition, t.howMany);
            const n = i._getTransformedByInsertOperation(e, false)[0];
            t.sourcePosition = n.start;
            t.howMany = n.end.offset - n.start.offset;
            if (!t.targetPosition.isEqual(e.position)) {
                t.targetPosition = t.targetPosition._getTransformedByInsertOperation(e)
            }
            return [t]
        });
        XO(Zg, Zg, (t, e, i) => {
            const n = $h._createFromPositionAndShift(t.sourcePosition, t.howMany);
            const o = $h._createFromPositionAndShift(e.sourcePosition, e.howMany);
            let r = i.aIsStrong;
            let s = !i.aIsStrong;
            if (i.abRelation == "insertBefore" || i.baRelation == "insertAfter") {
                s = true
            } else if (i.abRelation == "insertAfter" || i.baRelation == "insertBefore") {
                s = false
            }
            let a;
            if (t.targetPosition.isEqual(e.targetPosition) && s) {
                a = t.targetPosition._getTransformedByDeletion(e.sourcePosition, e.howMany)
            } else {
                a = t.targetPosition._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany)
            }
            if (cI(t, e) && cI(e, t)) {
                return [e.getReversed()]
            }
            const c = n.containsPosition(e.targetPosition);
            if (c && n.containsRange(o, true)) {
                n.start = n.start._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany);
                n.end = n.end._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany);
                return lI([n], a)
            }
            const l = o.containsPosition(t.targetPosition);
            if (l && o.containsRange(n, true)) {
                n.start = n.start._getCombined(e.sourcePosition, e.getMovedRangeStart());
                n.end = n.end._getCombined(e.sourcePosition, e.getMovedRangeStart());
                return lI([n], a)
            }
            const d = Vs(t.sourcePosition.getParentPath(), e.sourcePosition.getParentPath());
            if (d == "prefix" || d == "extension") {
                n.start = n.start._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany);
                n.end = n.end._getTransformedByMove(e.sourcePosition, e.targetPosition, e.howMany);
                return lI([n], a)
            }
            if (t.type == "remove" && e.type != "remove" && !i.aWasUndone && !i.forceWeakRemove) {
                r = true
            } else if (t.type != "remove" && e.type == "remove" && !i.bWasUndone && !i.forceWeakRemove) {
                r = false
            }
            const u = [];
            const h = n.getDifference(o);
            for (const t of h) {
                t.start = t.start._getTransformedByDeletion(e.sourcePosition, e.howMany);
                t.end = t.end._getTransformedByDeletion(e.sourcePosition, e.howMany);
                const i = Vs(t.start.getParentPath(), e.getMovedRangeStart().getParentPath()) == "same";
                const n = t._getTransformedByInsertion(e.getMovedRangeStart(), e.howMany, i);
                u.push(...n)
            }
            const f = n.getIntersection(o);
            if (f !== null && r) {
                f.start = f.start._getCombined(e.sourcePosition, e.getMovedRangeStart());
                f.end = f.end._getCombined(e.sourcePosition, e.getMovedRangeStart());
                if (u.length === 0) {
                    u.push(f)
                } else if (u.length == 1) {
                    if (o.start.isBefore(n.start) || o.start.isEqual(n.start)) {
                        u.unshift(f)
                    } else {
                        u.push(f)
                    }
                } else {
                    u.splice(1, 0, f)
                }
            }
            if (u.length === 0) {
                return [new Sm(t.baseVersion)]
            }
            return lI(u, a)
        });
        XO(Zg, rm, (t, e, i) => {
            let n = t.targetPosition.clone();
            if (!t.targetPosition.isEqual(e.insertionPosition) || !e.graveyardPosition || i.abRelation == "moveTargetAfter") {
                n = t.targetPosition._getTransformedBySplitOperation(e)
            }
            const o = $h._createFromPositionAndShift(t.sourcePosition, t.howMany);
            if (o.end.isEqual(e.insertionPosition)) {
                if (!e.graveyardPosition) {
                    t.howMany++
                }
                t.targetPosition = n;
                return [t]
            }
            if (o.start.hasSameParentAs(e.splitPosition) && o.containsPosition(e.splitPosition)) {
                let t = new $h(e.splitPosition, o.end);
                t = t._getTransformedBySplitOperation(e);
                const i = [new $h(o.start, e.splitPosition), t];
                return lI(i, n)
            }
            if (t.targetPosition.isEqual(e.splitPosition) && i.abRelation == "insertAtSource") {
                n = e.moveTargetPosition
            }
            if (t.targetPosition.isEqual(e.insertionPosition) && i.abRelation == "insertBetween") {
                n = t.targetPosition
            }
            const r = o._getTransformedBySplitOperation(e);
            const s = [r];
            if (e.graveyardPosition) {
                const n = o.start.isEqual(e.graveyardPosition) || o.containsPosition(e.graveyardPosition);
                if (t.howMany > 1 && n && !i.aWasUndone) {
                    s.push($h._createFromPositionAndShift(e.insertionPosition, 1))
                }
            }
            return lI(s, n)
        });
        XO(Zg, om, (t, e, i) => {
            const n = $h._createFromPositionAndShift(t.sourcePosition, t.howMany);
            if (e.deletionPosition.hasSameParentAs(t.sourcePosition) && n.containsPosition(e.sourcePosition)) {
                if (t.type == "remove" && !i.forceWeakRemove) {
                    if (!i.aWasUndone) {
                        const i = [];
                        let n = e.graveyardPosition.clone();
                        let o = e.targetPosition._getTransformedByMergeOperation(e);
                        if (t.howMany > 1) {
                            i.push(new Zg(t.sourcePosition, t.howMany - 1, t.targetPosition, 0));
                            n = n._getTransformedByMove(t.sourcePosition, t.targetPosition, t.howMany - 1);
                            o = o._getTransformedByMove(t.sourcePosition, t.targetPosition, t.howMany - 1)
                        }
                        const r = e.deletionPosition._getCombined(t.sourcePosition, t.targetPosition);
                        const s = new Zg(n, 1, r, 0);
                        const a = s.getMovedRangeStart().path.slice();
                        a.push(0);
                        const c = new Uh(s.targetPosition.root, a);
                        o = o._getTransformedByMove(n, r, 1);
                        const l = new Zg(o, e.howMany, c, 0);
                        i.push(s);
                        i.push(l);
                        return i
                    }
                } else {
                    if (t.howMany == 1) {
                        if (!i.bWasUndone) {
                            return [new Sm(0)]
                        } else {
                            t.sourcePosition = e.graveyardPosition.clone();
                            t.targetPosition = t.targetPosition._getTransformedByMergeOperation(e);
                            return [t]
                        }
                    }
                }
            }
            const o = $h._createFromPositionAndShift(t.sourcePosition, t.howMany);
            const r = o._getTransformedByMergeOperation(e);
            t.sourcePosition = r.start;
            t.howMany = r.end.offset - r.start.offset;
            t.targetPosition = t.targetPosition._getTransformedByMergeOperation(e);
            return [t]
        });
        XO(im, tm, (t, e) => {
            t.position = t.position._getTransformedByInsertOperation(e);
            return [t]
        });
        XO(im, om, (t, e) => {
            if (t.position.isEqual(e.deletionPosition)) {
                t.position = e.graveyardPosition.clone();
                t.position.stickiness = "toNext";
                return [t]
            }
            t.position = t.position._getTransformedByMergeOperation(e);
            return [t]
        });
        XO(im, Zg, (t, e) => {
            t.position = t.position._getTransformedByMoveOperation(e);
            return [t]
        });
        XO(im, im, (t, e, i) => {
            if (t.position.isEqual(e.position)) {
                if (i.aIsStrong) {
                    t.oldName = e.newName
                } else {
                    return [new Sm(0)]
                }
            }
            return [t]
        });
        XO(im, rm, (t, e) => {
            const i = t.position.path;
            const n = e.splitPosition.getParentPath();
            if (Vs(i, n) == "same" && !e.graveyardPosition) {
                const e = new im(t.position.getShiftedBy(1), t.oldName, t.newName, 0);
                return [t, e]
            }
            t.position = t.position._getTransformedBySplitOperation(e);
            return [t]
        });
        XO(nm, nm, (t, e, i) => {
            if (t.root === e.root && t.key === e.key) {
                if (!i.aIsStrong || t.newValue === e.newValue) {
                    return [new Sm(0)]
                } else {
                    t.oldValue = e.newValue
                }
            }
            return [t]
        });
        XO(rm, tm, (t, e) => {
            if (t.splitPosition.hasSameParentAs(e.position) && t.splitPosition.offset < e.position.offset) {
                t.howMany += e.howMany
            }
            t.splitPosition = t.splitPosition._getTransformedByInsertOperation(e);
            t.insertionPosition = rm.getInsertionPosition(t.splitPosition);
            return [t]
        });
        XO(rm, om, (t, e, i) => {
            if (!t.graveyardPosition && !i.bWasUndone && t.splitPosition.hasSameParentAs(e.sourcePosition)) {
                const i = e.graveyardPosition.path.slice();
                i.push(0);
                const n = new Uh(e.graveyardPosition.root, i);
                const o = rm.getInsertionPosition(new Uh(e.graveyardPosition.root, i));
                const r = new rm(n, 0, null, 0);
                r.insertionPosition = o;
                t.splitPosition = t.splitPosition._getTransformedByMergeOperation(e);
                t.insertionPosition = rm.getInsertionPosition(t.splitPosition);
                t.graveyardPosition = r.insertionPosition.clone();
                t.graveyardPosition.stickiness = "toNext";
                return [r, t]
            }
            if (t.splitPosition.hasSameParentAs(e.deletionPosition) && !t.splitPosition.isAfter(e.deletionPosition)) {
                t.howMany--
            }
            if (t.splitPosition.hasSameParentAs(e.targetPosition)) {
                t.howMany += e.howMany
            }
            t.splitPosition = t.splitPosition._getTransformedByMergeOperation(e);
            t.insertionPosition = rm.getInsertionPosition(t.splitPosition);
            if (t.graveyardPosition) {
                t.graveyardPosition = t.graveyardPosition._getTransformedByMergeOperation(e)
            }
            return [t]
        });
        XO(rm, Zg, (t, e, i) => {
            const n = $h._createFromPositionAndShift(e.sourcePosition, e.howMany);
            if (t.graveyardPosition) {
                const o = n.start.isEqual(t.graveyardPosition) || n.containsPosition(t.graveyardPosition);
                if (!i.bWasUndone && o) {
                    const i = t.splitPosition._getTransformedByMoveOperation(e);
                    const n = t.graveyardPosition._getTransformedByMoveOperation(e);
                    const o = n.path.slice();
                    o.push(0);
                    const r = new Uh(n.root, o);
                    const s = new Zg(i, t.howMany, r, 0);
                    return [s]
                }
                t.graveyardPosition = t.graveyardPosition._getTransformedByMoveOperation(e)
            }
            if (t.splitPosition.hasSameParentAs(e.sourcePosition) && n.containsPosition(t.splitPosition)) {
                const i = e.howMany - (t.splitPosition.offset - e.sourcePosition.offset);
                t.howMany -= i;
                if (t.splitPosition.hasSameParentAs(e.targetPosition) && t.splitPosition.offset < e.targetPosition.offset) {
                    t.howMany += e.howMany
                }
                t.splitPosition = e.sourcePosition.clone();
                t.insertionPosition = rm.getInsertionPosition(t.splitPosition);
                return [t]
            }
            const o = t.splitPosition.isEqual(e.targetPosition);
            if (o && (i.baRelation == "insertAtSource" || i.abRelation == "splitBefore")) {
                t.howMany += e.howMany;
                t.splitPosition = t.splitPosition._getTransformedByDeletion(e.sourcePosition, e.howMany);
                t.insertionPosition = rm.getInsertionPosition(t.splitPosition);
                return [t]
            }
            if (!e.sourcePosition.isEqual(e.targetPosition)) {
                if (t.splitPosition.hasSameParentAs(e.sourcePosition) && t.splitPosition.offset <= e.sourcePosition.offset) {
                    t.howMany -= e.howMany
                }
                if (t.splitPosition.hasSameParentAs(e.targetPosition) && t.splitPosition.offset < e.targetPosition.offset) {
                    t.howMany += e.howMany
                }
            }
            t.splitPosition.stickiness = "toNone";
            t.splitPosition = t.splitPosition._getTransformedByMoveOperation(e);
            t.splitPosition.stickiness = "toNext";
            if (t.graveyardPosition) {
                t.insertionPosition = t.insertionPosition._getTransformedByMoveOperation(e)
            } else {
                t.insertionPosition = rm.getInsertionPosition(t.splitPosition)
            }
            return [t]
        });
        XO(rm, rm, (t, e, i) => {
            if (t.splitPosition.isEqual(e.splitPosition)) {
                if (!t.graveyardPosition && !e.graveyardPosition) {
                    return [new Sm(0)]
                }
                if (t.graveyardPosition && e.graveyardPosition && t.graveyardPosition.isEqual(e.graveyardPosition)) {
                    return [new Sm(0)]
                }
                if (i.abRelation == "splitBefore") {
                    t.howMany = 0;
                    t.graveyardPosition = t.graveyardPosition._getTransformedBySplitOperation(e);
                    return [t]
                }
            }
            if (t.graveyardPosition && e.graveyardPosition && t.graveyardPosition.isEqual(e.graveyardPosition)) {
                const n = t.splitPosition.root.rootName == "$graveyard";
                const o = e.splitPosition.root.rootName == "$graveyard";
                const r = n && !o;
                const s = o && !n;
                const a = s || !r && i.aIsStrong;
                if (a) {
                    const i = [];
                    if (e.howMany) {
                        i.push(new Zg(e.moveTargetPosition, e.howMany, e.splitPosition, 0))
                    }
                    if (t.howMany) {
                        i.push(new Zg(t.splitPosition, t.howMany, t.moveTargetPosition, 0))
                    }
                    return i
                } else {
                    return [new Sm(0)]
                }
            }
            if (t.graveyardPosition) {
                t.graveyardPosition = t.graveyardPosition._getTransformedBySplitOperation(e)
            }
            if (t.splitPosition.isEqual(e.insertionPosition) && i.abRelation == "splitBefore") {
                t.howMany++;
                return [t]
            }
            if (e.splitPosition.isEqual(t.insertionPosition) && i.baRelation == "splitBefore") {
                const i = e.insertionPosition.path.slice();
                i.push(0);
                const n = new Uh(e.insertionPosition.root, i);
                const o = new Zg(t.insertionPosition, 1, n, 0);
                return [t, o]
            }
            if (t.splitPosition.hasSameParentAs(e.splitPosition) && t.splitPosition.offset < e.splitPosition.offset) {
                t.howMany -= e.howMany
            }
            t.splitPosition = t.splitPosition._getTransformedBySplitOperation(e);
            t.insertionPosition = rm.getInsertionPosition(t.splitPosition);
            return [t]
        });

        function cI(t, e) {
            return t.targetPosition._getTransformedByDeletion(e.sourcePosition, e.howMany) === null
        }

        function lI(t, e) {
            const i = [];
            for (let n = 0; n < t.length; n++) {
                const o = t[n];
                const r = new Zg(o.start, o.end.offset - o.start.offset, e, 0);
                i.push(r);
                for (let e = n + 1; e < t.length; e++) {
                    t[e] = t[e]._getTransformedByMove(r.sourcePosition, r.targetPosition, r.howMany)[0]
                }
                e = e._getTransformedByMove(r.sourcePosition, r.targetPosition, r.howMany)
            }
            return i
        }

        class dI extends jw {
            constructor(t) {
                super(t);
                this._stack = [];
                this._createdBatches = new WeakSet;
                this.refresh()
            }

            refresh() {
                this.isEnabled = this._stack.length > 0
            }

            addBatch(t) {
                const e = this.editor.model.document.selection;
                const i = {ranges: e.hasOwnRange ? Array.from(e.getRanges()) : [], isBackward: e.isBackward};
                this._stack.push({batch: t, selection: i});
                this.refresh()
            }

            clearStack() {
                this._stack = [];
                this.refresh()
            }

            _restoreSelection(t, e, i) {
                const n = this.editor.model;
                const o = n.document;
                const r = [];
                for (const e of t) {
                    const t = uI(e, i);
                    const n = t.find(t => t.start.root != o.graveyard);
                    if (n) {
                        r.push(n)
                    }
                }
                if (r.length) {
                    n.change(t => {
                        t.setSelection(r, {backward: e})
                    })
                }
            }

            _undo(t, e) {
                const i = this.editor.model;
                const n = i.document;
                this._createdBatches.add(e);
                const o = t.operations.slice().filter(t => t.isDocumentOperation);
                o.reverse();
                for (const t of o) {
                    const o = t.baseVersion + 1;
                    const r = Array.from(n.history.getOperations(o));
                    const s = iI([t.getReversed()], r, {
                        useRelations: true,
                        document: this.editor.model.document,
                        padWithNoOps: false,
                        forceWeakRemove: true
                    });
                    const a = s.operationsA;
                    for (const o of a) {
                        e.addOperation(o);
                        i.applyOperation(o);
                        n.history.setOperationAsUndone(t, o)
                    }
                }
            }
        }

        function uI(t, e) {
            const i = t.getTransformedByOperations(e);
            i.sort((t, e) => t.start.isBefore(e.start) ? -1 : 1);
            for (let t = 1; t < i.length; t++) {
                const e = i[t - 1];
                const n = i[t];
                if (e.end.isTouching(n.start)) {
                    e.end = n.end;
                    i.splice(t, 1);
                    t--
                }
            }
            return i
        }

        class hI extends dI {
            execute(t = null) {
                const e = t ? this._stack.findIndex(e => e.batch == t) : this._stack.length - 1;
                const i = this._stack.splice(e, 1)[0];
                const n = this.editor.model.createBatch("transparent");
                this.editor.model.enqueueChange(n, () => {
                    this._undo(i.batch, n);
                    const t = this.editor.model.document.history.getOperations(i.batch.baseVersion);
                    this._restoreSelection(i.selection.ranges, i.selection.isBackward, t);
                    this.fire("revert", i.batch, n)
                });
                this.refresh()
            }
        }

        class fI extends dI {
            execute() {
                const t = this._stack.pop();
                const e = this.editor.model.createBatch("transparent");
                this.editor.model.enqueueChange(e, () => {
                    const i = t.batch.operations[t.batch.operations.length - 1];
                    const n = i.baseVersion + 1;
                    const o = this.editor.model.document.history.getOperations(n);
                    this._restoreSelection(t.selection.ranges, t.selection.isBackward, o);
                    this._undo(t.batch, e)
                });
                this.refresh()
            }
        }

        class gI extends mp {
            static get pluginName() {
                return "UndoEditing"
            }

            constructor(t) {
                super(t);
                this._batchRegistry = new WeakSet
            }

            init() {
                const t = this.editor;
                this._undoCommand = new hI(t);
                this._redoCommand = new fI(t);
                t.commands.add("undo", this._undoCommand);
                t.commands.add("redo", this._redoCommand);
                this.listenTo(t.model, "applyOperation", (t, e) => {
                    const i = e[0];
                    if (!i.isDocumentOperation) {
                        return
                    }
                    const n = i.batch;
                    const o = this._redoCommand._createdBatches.has(n);
                    const r = this._undoCommand._createdBatches.has(n);
                    const s = this._batchRegistry.has(n);
                    if (s || n.type == "transparent" && !o && !r) {
                        return
                    } else {
                        if (o) {
                            this._undoCommand.addBatch(n)
                        } else if (!r) {
                            this._undoCommand.addBatch(n);
                            this._redoCommand.clearStack()
                        }
                    }
                    this._batchRegistry.add(n)
                }, {priority: "highest"});
                this.listenTo(this._undoCommand, "revert", (t, e, i) => {
                    this._redoCommand.addBatch(i)
                });
                t.keystrokes.set("CTRL+Z", "undo");
                t.keystrokes.set("CTRL+Y", "redo");
                t.keystrokes.set("CTRL+SHIFT+Z", "redo")
            }
        }

        var mI = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M5.042 9.367l2.189 1.837a.75.75 0 0 1-.965 1.149l-3.788-3.18a.747.747 0 0 1-.21-.284.75.75 0 0 1 .17-.945L6.23 4.762a.75.75 0 1 1 .964 1.15L4.863 7.866h8.917A.75.75 0 0 1 14 7.9a4 4 0 1 1-1.477 7.718l.344-1.489a2.5 2.5 0 1 0 1.094-4.73l.008-.032H5.042z"/></svg>';
        var pI = '<svg viewBox="0 0 20 20" xmlns="http://www.w3.org/2000/svg"><path d="M14.958 9.367l-2.189 1.837a.75.75 0 0 0 .965 1.149l3.788-3.18a.747.747 0 0 0 .21-.284.75.75 0 0 0-.17-.945L13.77 4.762a.75.75 0 1 0-.964 1.15l2.331 1.955H6.22A.75.75 0 0 0 6 7.9a4 4 0 1 0 1.477 7.718l-.344-1.489A2.5 2.5 0 1 1 6.039 9.4l-.008-.032h8.927z"/></svg>';

        class bI extends mp {
            init() {
                const t = this.editor;
                const e = t.locale;
                const i = t.t;
                const n = e.uiLanguageDirection == "ltr" ? mI : pI;
                const o = e.uiLanguageDirection == "ltr" ? pI : mI;
                this._addButton("undo", i("mo"), "CTRL+Z", n);
                this._addButton("redo", i("mp"), "CTRL+Y", o)
            }

            _addButton(t, e, i, n) {
                const o = this.editor;
                o.ui.componentFactory.add(t, r => {
                    const s = o.commands.get(t);
                    const a = new hb(r);
                    a.set({label: e, icon: n, keystroke: i, tooltip: true});
                    a.bind("isEnabled").to(s, "isEnabled");
                    this.listenTo(a, "execute", () => {
                        o.execute(t);
                        o.editing.view.focus()
                    });
                    return a
                })
            }
        }

        class wI extends mp {
            static get requires() {
                return [gI, bI]
            }

            static get pluginName() {
                return "Undo"
            }
        }

        class kI extends mp {
            static get requires() {
                return [Rx, qO, YO, cP, wI]
            }

            static get pluginName() {
                return "Essentials"
            }
        }

        class _I extends Fw {
        }

        _I.builtinPlugins = [rk, uk, vk, Sk, r_, p_, A_, R_, W_, bv, cy, fy, Ry, Ky, zx, Wx, vC, PC, tT, zT, WT, wP, CP, vP, kP, yP, _P, xP, RP, BP, HP, DE, lO, dO, IO, LO, kI, V_]
    }])["default"]
}));

},{"../../ru":2}],2:[function(require,module,exports){
module.exports =  {
    a: "Image toolbar",
    b: "Спецсимволы",
    c: "leftwards double arrow",
    d: "rightwards double arrow",
    e: "upwards double arrow",
    f: "downwards double arrow",
    g: "leftwards dashed arrow",
    h: "rightwards dashed arrow",
    i: "upwards dashed arrow",
    j: "downwards dashed arrow",
    k: "leftwards arrow to bar",
    l: "rightwards arrow to bar",
    m: "upwards arrow to bar",
    n: "downwards arrow to bar",
    o: "up down arrow with base",
    p: "back with leftwards arrow above",
    q: "end with leftwards arrow above",
    r: "on with exclamation mark with left right arrow above",
    s: "soon with rightwards arrow above",
    t: "top with upwards arrow above",
    u: "Dollar sign",
    v: "Euro sign",
    w: "Yen sign",
    x: "Pound sign",
    y: "Cent sign",
    z: "Euro-currency sign",
    aa: "Colon sign",
    ab: "Cruzeiro sign",
    ac: "French franc sign",
    ad: "Lira sign",
    ae: "Currency sign",
    af: "Bitcoin sign",
    ag: "Mill sign",
    ah: "Naira sign",
    ai: "Peseta sign",
    aj: "Rupee sign",
    ak: "Won sign",
    al: "New sheqel sign",
    am: "Dong sign",
    an: "Kip sign",
    ao: "Tugrik sign",
    ap: "Drachma sign",
    aq: "German penny sign",
    ar: "Peso sign",
    as: "Guarani sign",
    at: "Austral sign",
    au: "Hryvnia sign",
    av: "Cedi sign",
    aw: "Livre tournois sign",
    ax: "Spesmilo sign",
    ay: "Tenge sign",
    az: "Indian rupee sign",
    ba: "Turkish lira sign",
    bb: "Nordic mark sign",
    bc: "Manat sign",
    bd: "Ruble sign",
    be: "Latin capital letter a with macron",
    bf: "Latin small letter a with macron",
    bg: "Latin capital letter a with breve",
    bh: "Latin small letter a with breve",
    bi: "Latin capital letter a with ogonek",
    bj: "Latin small letter a with ogonek",
    bk: "Latin capital letter c with acute",
    bl: "Latin small letter c with acute",
    bm: "Latin capital letter c with circumflex",
    bn: "Latin small letter c with circumflex",
    bo: "Latin capital letter c with dot above",
    bp: "Latin small letter c with dot above",
    bq: "Latin capital letter c with caron",
    br: "Latin small letter c with caron",
    bs: "Latin capital letter d with caron",
    bt: "Latin small letter d with caron",
    bu: "Latin capital letter d with stroke",
    bv: "Latin small letter d with stroke",
    bw: "Latin capital letter e with macron",
    bx: "Latin small letter e with macron",
    by: "Latin capital letter e with breve",
    bz: "Latin small letter e with breve",
    ca: "Latin capital letter e with dot above",
    cb: "Latin small letter e with dot above",
    cc: "Latin capital letter e with ogonek",
    cd: "Latin small letter e with ogonek",
    ce: "Latin capital letter e with caron",
    cf: "Latin small letter e with caron",
    cg: "Latin capital letter g with circumflex",
    ch: "Latin small letter g with circumflex",
    ci: "Latin capital letter g with breve",
    cj: "Latin small letter g with breve",
    ck: "Latin capital letter g with dot above",
    cl: "Latin small letter g with dot above",
    cm: "Latin capital letter g with cedilla",
    cn: "Latin small letter g with cedilla",
    co: "Latin capital letter h with circumflex",
    cp: "Latin small letter h with circumflex",
    cq: "Latin capital letter h with stroke",
    cr: "Latin small letter h with stroke",
    cs: "Latin capital letter i with tilde",
    ct: "Latin small letter i with tilde",
    cu: "Latin capital letter i with macron",
    cv: "Latin small letter i with macron",
    cw: "Latin capital letter i with breve",
    cx: "Latin small letter i with breve",
    cy: "Latin capital letter i with ogonek",
    cz: "Latin small letter i with ogonek",
    da: "Latin capital letter i with dot above",
    db: "Latin small letter dotless i",
    dc: "Latin capital ligature ij",
    dd: "Latin small ligature ij",
    de: "Latin capital letter j with circumflex",
    df: "Latin small letter j with circumflex",
    dg: "Latin capital letter k with cedilla",
    dh: "Latin small letter k with cedilla",
    di: "Latin small letter kra",
    dj: "Latin capital letter l with acute",
    dk: "Latin small letter l with acute",
    dl: "Latin capital letter l with cedilla",
    dm: "Latin small letter l with cedilla",
    dn: "Latin capital letter l with caron",
    do: "Latin small letter l with caron",
    dp: "Latin capital letter l with middle dot",
    dq: "Latin small letter l with middle dot",
    dr: "Latin capital letter l with stroke",
    ds: "Latin small letter l with stroke",
    dt: "Latin capital letter n with acute",
    du: "Latin small letter n with acute",
    dv: "Latin capital letter n with cedilla",
    dw: "Latin small letter n with cedilla",
    dx: "Latin capital letter n with caron",
    dy: "Latin small letter n with caron",
    dz: "Latin small letter n preceded by apostrophe",
    ea: "Latin capital letter eng",
    eb: "Latin small letter eng",
    ec: "Latin capital letter o with macron",
    ed: "Latin small letter o with macron",
    ee: "Latin capital letter o with breve",
    ef: "Latin small letter o with breve",
    eg: "Latin capital letter o with double acute",
    eh: "Latin small letter o with double acute",
    ei: "Latin capital ligature oe",
    ej: "Latin small ligature oe",
    ek: "Latin capital letter r with acute",
    el: "Latin small letter r with acute",
    em: "Latin capital letter r with cedilla",
    en: "Latin small letter r with cedilla",
    eo: "Latin capital letter r with caron",
    ep: "Latin small letter r with caron",
    eq: "Latin capital letter s with acute",
    er: "Latin small letter s with acute",
    es: "Latin capital letter s with circumflex",
    et: "Latin small letter s with circumflex",
    eu: "Latin capital letter s with cedilla",
    ev: "Latin small letter s with cedilla",
    ew: "Latin capital letter s with caron",
    ex: "Latin small letter s with caron",
    ey: "Latin capital letter t with cedilla",
    ez: "Latin small letter t with cedilla",
    fa: "Latin capital letter t with caron",
    fb: "Latin small letter t with caron",
    fc: "Latin capital letter t with stroke",
    fd: "Latin small letter t with stroke",
    fe: "Latin capital letter u with tilde",
    ff: "Latin small letter u with tilde",
    fg: "Latin capital letter u with macron",
    fh: "Latin small letter u with macron",
    fi: "Latin capital letter u with breve",
    fj: "Latin small letter u with breve",
    fk: "Latin capital letter u with ring above",
    fl: "Latin small letter u with ring above",
    fm: "Latin capital letter u with double acute",
    fn: "Latin small letter u with double acute",
    fo: "Latin capital letter u with ogonek",
    fp: "Latin small letter u with ogonek",
    fq: "Latin capital letter w with circumflex",
    fr: "Latin small letter w with circumflex",
    fs: "Latin capital letter y with circumflex",
    ft: "Latin small letter y with circumflex",
    fu: "Latin capital letter y with diaeresis",
    fv: "Latin capital letter z with acute",
    fw: "Latin small letter z with acute",
    fx: "Latin capital letter z with dot above",
    fy: "Latin small letter z with dot above",
    fz: "Latin capital letter z with caron",
    ga: "Latin small letter z with caron",
    gb: "Latin small letter long s",
    gc: "Less-than sign",
    gd: "Greater-than sign",
    ge: "Less-than or equal to",
    gf: "Greater-than or equal to",
    gg: "En dash",
    gh: "Em dash",
    gi: "Macron",
    gj: "Overline",
    gk: "Degree sign",
    gl: "Minus sign",
    gm: "Plus-minus sign",
    gn: "Division sign",
    go: "Fraction slash",
    gp: "Multiplication sign",
    gq: "Latin small letter f with hook",
    gr: "Integral",
    gs: "N-ary summation",
    gt: "Infinity",
    gu: "Square root",
    gv: "Tilde operator",
    gw: "Approximately equal to",
    gx: "Almost equal to",
    gy: "Not equal to",
    gz: "Identical to",
    ha: "Element of",
    hb: "Not an element of",
    hc: "Contains as member",
    hd: "N-ary product",
    he: "Logical and",
    hf: "Logical or",
    hg: "Not sign",
    hh: "Intersection",
    hi: "Union",
    hj: "Partial differential",
    hk: "For all",
    hl: "There exists",
    hm: "Empty set",
    hn: "Nabla",
    ho: "Asterisk operator",
    hp: "Proportional to",
    hq: "Angle",
    hr: "Vulgar fraction one quarter",
    hs: "Vulgar fraction one half",
    ht: "Vulgar fraction three quarters",
    hu: "Single left-pointing angle quotation mark",
    hv: "Single right-pointing angle quotation mark",
    hw: "Left-pointing double angle quotation mark",
    hx: "Right-pointing double angle quotation mark",
    hy: "Left single quotation mark",
    hz: "Right single quotation mark",
    ia: "Left double quotation mark",
    ib: "Right double quotation mark",
    ic: "Single low-9 quotation mark",
    id: "Double low-9 quotation mark",
    ie: "Inverted exclamation mark",
    if: "Inverted question mark",
    ig: "Two dot leader",
    ih: "Horizontal ellipsis",
    ii: "Double dagger",
    ij: "Per mille sign",
    ik: "Per ten thousand sign",
    il: "Double exclamation mark",
    im: "Question exclamation mark",
    in: "Exclamation question mark",
    io: "Double question mark",
    ip: "Copyright sign",
    iq: "Registered sign",
    ir: "Trade mark sign",
    is: "Section sign",
    it: "Paragraph sign",
    iu: "Reversed paragraph sign",
    iv: "Table toolbar",
    iw: "Выравнивание по левому краю",
    ix: "Выравнивание по правому краю",
    iy: "Выравнивание по центру",
    iz: "Выравнивание по ширине",
    ja: "Выравнивание текста",
    jb: "Выравнивание",
    jc: "Цитата",
    jd: "Выбрать заголовок",
    je: "Заголовок",
    jf: "Горизонтальная линия",
    jg: "Увеличить отступ",
    jh: "Уменьшить отступ",
    ji: "Жирный",
    jj: "Курсив",
    jk: "Зачеркнутый",
    jl: "Подстрочный",
    jm: "Надстрочный",
    jn: "Подчеркнутый",
    jo: "Семейство шрифтов",
    jp: "По умолчанию",
    jq: "Размер шрифта",
    jr: "Очень мелкий",
    js: "Мелкий",
    jt: "Крупный",
    ju: "Очень крупный",
    jv: "Цвет шрифта",
    jw: "Цвет фона",
    jx: "Виджет изображений",
    jy: "Оригинальный размер изображения",
    jz: "Боковое изображение",
    ka: "Выравнивание по левому краю",
    kb: "Выравнивание по центру",
    kc: "Выравнивание по правому краю",
    kd: "Вставить изображение",
    ke: "Загрузка не выполнена",
    kf: "Widget toolbar",
    kg: "Свойства таблицы",
    kh: "Свойства ячейки",
    ki: "Вставить таблицу",
    kj: "Столбец заголовков",
    kk: "Вставить столбец слева",
    kl: "Вставить столбец справа",
    km: "Удалить столбец",
    kn: "Столбец",
    ko: "Строка заголовков",
    kp: "Вставить строку ниже",
    kq: "Вставить строку выше",
    kr: "Удалить строку",
    ks: "Строка",
    kt: "Объединить с ячейкой сверху",
    ku: "Объединить с ячейкой справа",
    kv: "Объединить с ячейкой снизу",
    kw: "Объединить с ячейкой слева",
    kx: "Разделить ячейку вертикально",
    ky: "Разделить ячейку горизонтально",
    kz: "Объединить ячейки",
    la: "Убрать форматирование",
    lb: "Идёт загрузка",
    lc: "Нумерованный список",
    ld: "Маркированный список",
    le: "Character categories",
    lf: "Ссылка",
    lg: "Dropdown toolbar",
    lh: "Редактировать альтернативный текст",
    li: "Убрать цвет",
    lj: "Цвет страницы",
    lk: "Убрать ссылку",
    ll: "Редактировать ссылку",
    lm: "Открыть ссылку в новой вкладке",
    ln: "Для этой ссылки не установлен адрес URL",
    lo: "Сохранить",
    lp: "Отмена",
    lq: "Ссылка URL",
    lr: "Editor toolbar",
    ls: "Другие инструменты",
    lt: "Альтернативный текст",
    lu: "%0 of %1",
    lv: "Previous",
    lw: "Next",
    lx: "Чёрный",
    ly: "Тёмно-серый",
    lz: "Серый",
    ma: "Светло-серый",
    mb: "Белый",
    mc: "Красный",
    md: "Оранжевый",
    me: "Жёлтый",
    mf: "Салатовый",
    mg: "Зелёный",
    mh: "Аквамариновый",
    mi: "Бирюзовый",
    mj: "Голубой",
    mk: "Синий",
    ml: "Фиолетовый",
    mm: "Open in a new tab",
    mn: "Downloadable",
    mo: "Отменить",
    mp: "Повторить",
    mq: "Нет",
    mr: "Сплошная",
    ms: "Точки",
    mt: "Пунктир",
    mu: "Двойная",
    mv: "Groove",
    mw: "Ridge",
    mx: "Inset",
    my: "Outset",
    mz: 'The color is invalid. Try "#FF0000" or "rgb(255,0,0)" or "red".',
    na: 'The value is invalid. Try "10px" or "2em" or simply "2".',
    nb: "Граница",
    nc: "Стиль",
    nd: "Ширина",
    ne: "Цвет",
    nf: "Цвет фона",
    ng: "Габариты",
    nh: "Высота",
    ni: "Отступы",
    nj: "Выравнивание в ячейке",
    nk: "Horizontal text alignment toolbar",
    nl: "Vertical text alignment toolbar",
    nm: "Align cell text to the left",
    nn: "Align cell text to the center",
    no: "Align cell text to the right",
    np: "Justify cell text",
    nq: "Align cell text to the top",
    nr: "Align cell text to the middle",
    ns: "Align cell text to the bottom",
    nt: "Выравнивание",
    nu: "Выравнивание",
    nv: "По левому краю",
    nw: "По центру",
    nx: "По правому краю",
    ny: "Параграф",
    nz: "Заголовок 1",
    oa: "Заголовок 2",
    ob: "Заголовок 3",
    oc: "Заголовок 4",
    od: "Заголовок 5",
    oe: "Заголовок 6",
    of: "Редактор, %0"
};
},{}],3:[function(require,module,exports){
var css = ".container,\n.container-fluid {\n  margin-right: auto;\n  margin-left: auto;\n}\n.container-fluid {\n  padding-right: 2rem;\n  padding-left: 2rem;\n}\n.row {\n  box-sizing: border-box;\n  display: -webkit-box;\n  display: -ms-flexbox;\n  display: flex;\n  -webkit-box-flex: 0;\n  -ms-flex: 0 1 auto;\n  flex: 0 1 auto;\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: normal;\n  -ms-flex-direction: row;\n  flex-direction: row;\n  -ms-flex-wrap: wrap;\n  flex-wrap: wrap;\n  margin-right: -.5rem;\n  margin-left: -.5rem;\n}\n.row.reverse {\n  -webkit-box-orient: horizontal;\n  -webkit-box-direction: reverse;\n  -ms-flex-direction: row-reverse;\n  flex-direction: row-reverse;\n}\n.col.reverse {\n  -webkit-box-orient: vertical;\n  -webkit-box-direction: reverse;\n  -ms-flex-direction: column-reverse;\n  flex-direction: column-reverse;\n}\n.col-xs,\n.col-xs-1,\n.col-xs-10,\n.col-xs-11,\n.col-xs-12,\n.col-xs-2,\n.col-xs-3,\n.col-xs-4,\n.col-xs-5,\n.col-xs-6,\n.col-xs-7,\n.col-xs-8,\n.col-xs-9,\n.col-xs-offset-0,\n.col-xs-offset-1,\n.col-xs-offset-10,\n.col-xs-offset-11,\n.col-xs-offset-12,\n.col-xs-offset-2,\n.col-xs-offset-3,\n.col-xs-offset-4,\n.col-xs-offset-5,\n.col-xs-offset-6,\n.col-xs-offset-7,\n.col-xs-offset-8,\n.col-xs-offset-9 {\n  box-sizing: border-box;\n  -webkit-box-flex: 0;\n  -ms-flex: 0 0 auto;\n  flex: 0 0 auto;\n  padding-right: .5rem;\n  padding-left: .5rem;\n}\n.col-xs {\n  -webkit-box-flex: 1;\n  -ms-flex-positive: 1;\n  flex-grow: 1;\n  -ms-flex-preferred-size: 0;\n  flex-basis: 0;\n  max-width: 100%;\n}\n.col-xs-1 {\n  -ms-flex-preferred-size: 8.33333333%;\n  flex-basis: 8.33333333%;\n  max-width: 8.33333333%;\n}\n.col-xs-2 {\n  -ms-flex-preferred-size: 16.66666667%;\n  flex-basis: 16.66666667%;\n  max-width: 16.66666667%;\n}\n.col-xs-3 {\n  -ms-flex-preferred-size: 25%;\n  flex-basis: 25%;\n  max-width: 25%;\n}\n.col-xs-4 {\n  -ms-flex-preferred-size: 33.33333333%;\n  flex-basis: 33.33333333%;\n  max-width: 33.33333333%;\n}\n.col-xs-5 {\n  -ms-flex-preferred-size: 41.66666667%;\n  flex-basis: 41.66666667%;\n  max-width: 41.66666667%;\n}\n.col-xs-6 {\n  -ms-flex-preferred-size: 50%;\n  flex-basis: 50%;\n  max-width: 50%;\n}\n.col-xs-7 {\n  -ms-flex-preferred-size: 58.33333333%;\n  flex-basis: 58.33333333%;\n  max-width: 58.33333333%;\n}\n.col-xs-8 {\n  -ms-flex-preferred-size: 66.66666667%;\n  flex-basis: 66.66666667%;\n  max-width: 66.66666667%;\n}\n.col-xs-9 {\n  -ms-flex-preferred-size: 75%;\n  flex-basis: 75%;\n  max-width: 75%;\n}\n.col-xs-10 {\n  -ms-flex-preferred-size: 83.33333333%;\n  flex-basis: 83.33333333%;\n  max-width: 83.33333333%;\n}\n.col-xs-11 {\n  -ms-flex-preferred-size: 91.66666667%;\n  flex-basis: 91.66666667%;\n  max-width: 91.66666667%;\n}\n.col-xs-12 {\n  -ms-flex-preferred-size: 100%;\n  flex-basis: 100%;\n  max-width: 100%;\n}\n.col-xs-offset-0 {\n  margin-left: 0;\n}\n.col-xs-offset-1 {\n  margin-left: 8.33333333%;\n}\n.col-xs-offset-2 {\n  margin-left: 16.66666667%;\n}\n.col-xs-offset-3 {\n  margin-left: 25%;\n}\n.col-xs-offset-4 {\n  margin-left: 33.33333333%;\n}\n.col-xs-offset-5 {\n  margin-left: 41.66666667%;\n}\n.col-xs-offset-6 {\n  margin-left: 50%;\n}\n.col-xs-offset-7 {\n  margin-left: 58.33333333%;\n}\n.col-xs-offset-8 {\n  margin-left: 66.66666667%;\n}\n.col-xs-offset-9 {\n  margin-left: 75%;\n}\n.col-xs-offset-10 {\n  margin-left: 83.33333333%;\n}\n.col-xs-offset-11 {\n  margin-left: 91.66666667%;\n}\n.start-xs {\n  -webkit-box-pack: start;\n  -ms-flex-pack: start;\n  justify-content: flex-start;\n  text-align: start;\n}\n.center-xs {\n  -webkit-box-pack: center;\n  -ms-flex-pack: center;\n  justify-content: center;\n  text-align: center;\n}\n.end-xs {\n  -webkit-box-pack: end;\n  -ms-flex-pack: end;\n  justify-content: flex-end;\n  text-align: end;\n}\n.top-xs {\n  -webkit-box-align: start;\n  -ms-flex-align: start;\n  align-items: flex-start;\n}\n.middle-xs {\n  -webkit-box-align: center;\n  -ms-flex-align: center;\n  align-items: center;\n}\n.bottom-xs {\n  -webkit-box-align: end;\n  -ms-flex-align: end;\n  align-items: flex-end;\n}\n.around-xs {\n  -ms-flex-pack: distribute;\n  justify-content: space-around;\n}\n.between-xs {\n  -webkit-box-pack: justify;\n  -ms-flex-pack: justify;\n  justify-content: space-between;\n}\n.first-xs {\n  -webkit-box-ordinal-group: 0;\n  -ms-flex-order: -1;\n  order: -1;\n}\n.last-xs {\n  -webkit-box-ordinal-group: 2;\n  -ms-flex-order: 1;\n  order: 1;\n}\n@media only screen and (min-width:48em) {\n  .container {\n    width: 49rem;\n  }\n\n  .col-sm,\n  .col-sm-1,\n  .col-sm-10,\n  .col-sm-11,\n  .col-sm-12,\n  .col-sm-2,\n  .col-sm-3,\n  .col-sm-4,\n  .col-sm-5,\n  .col-sm-6,\n  .col-sm-7,\n  .col-sm-8,\n  .col-sm-9,\n  .col-sm-offset-0,\n  .col-sm-offset-1,\n  .col-sm-offset-10,\n  .col-sm-offset-11,\n  .col-sm-offset-12,\n  .col-sm-offset-2,\n  .col-sm-offset-3,\n  .col-sm-offset-4,\n  .col-sm-offset-5,\n  .col-sm-offset-6,\n  .col-sm-offset-7,\n  .col-sm-offset-8,\n  .col-sm-offset-9 {\n    box-sizing: border-box;\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    padding-right: .5rem;\n    padding-left: .5rem;\n  }\n\n  .col-sm {\n    -webkit-box-flex: 1;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    max-width: 100%;\n  }\n\n  .col-sm-1 {\n    -ms-flex-preferred-size: 8.33333333%;\n    flex-basis: 8.33333333%;\n    max-width: 8.33333333%;\n  }\n\n  .col-sm-2 {\n    -ms-flex-preferred-size: 16.66666667%;\n    flex-basis: 16.66666667%;\n    max-width: 16.66666667%;\n  }\n\n  .col-sm-3 {\n    -ms-flex-preferred-size: 25%;\n    flex-basis: 25%;\n    max-width: 25%;\n  }\n\n  .col-sm-4 {\n    -ms-flex-preferred-size: 33.33333333%;\n    flex-basis: 33.33333333%;\n    max-width: 33.33333333%;\n  }\n\n  .col-sm-5 {\n    -ms-flex-preferred-size: 41.66666667%;\n    flex-basis: 41.66666667%;\n    max-width: 41.66666667%;\n  }\n\n  .col-sm-6 {\n    -ms-flex-preferred-size: 50%;\n    flex-basis: 50%;\n    max-width: 50%;\n  }\n\n  .col-sm-7 {\n    -ms-flex-preferred-size: 58.33333333%;\n    flex-basis: 58.33333333%;\n    max-width: 58.33333333%;\n  }\n\n  .col-sm-8 {\n    -ms-flex-preferred-size: 66.66666667%;\n    flex-basis: 66.66666667%;\n    max-width: 66.66666667%;\n  }\n\n  .col-sm-9 {\n    -ms-flex-preferred-size: 75%;\n    flex-basis: 75%;\n    max-width: 75%;\n  }\n\n  .col-sm-10 {\n    -ms-flex-preferred-size: 83.33333333%;\n    flex-basis: 83.33333333%;\n    max-width: 83.33333333%;\n  }\n\n  .col-sm-11 {\n    -ms-flex-preferred-size: 91.66666667%;\n    flex-basis: 91.66666667%;\n    max-width: 91.66666667%;\n  }\n\n  .col-sm-12 {\n    -ms-flex-preferred-size: 100%;\n    flex-basis: 100%;\n    max-width: 100%;\n  }\n\n  .col-sm-offset-0 {\n    margin-left: 0;\n  }\n\n  .col-sm-offset-1 {\n    margin-left: 8.33333333%;\n  }\n\n  .col-sm-offset-2 {\n    margin-left: 16.66666667%;\n  }\n\n  .col-sm-offset-3 {\n    margin-left: 25%;\n  }\n\n  .col-sm-offset-4 {\n    margin-left: 33.33333333%;\n  }\n\n  .col-sm-offset-5 {\n    margin-left: 41.66666667%;\n  }\n\n  .col-sm-offset-6 {\n    margin-left: 50%;\n  }\n\n  .col-sm-offset-7 {\n    margin-left: 58.33333333%;\n  }\n\n  .col-sm-offset-8 {\n    margin-left: 66.66666667%;\n  }\n\n  .col-sm-offset-9 {\n    margin-left: 75%;\n  }\n\n  .col-sm-offset-10 {\n    margin-left: 83.33333333%;\n  }\n\n  .col-sm-offset-11 {\n    margin-left: 91.66666667%;\n  }\n\n  .start-sm {\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n    text-align: start;\n  }\n\n  .center-sm {\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    text-align: center;\n  }\n\n  .end-sm {\n    -webkit-box-pack: end;\n    -ms-flex-pack: end;\n    justify-content: flex-end;\n    text-align: end;\n  }\n\n  .top-sm {\n    -webkit-box-align: start;\n    -ms-flex-align: start;\n    align-items: flex-start;\n  }\n\n  .middle-sm {\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n  }\n\n  .bottom-sm {\n    -webkit-box-align: end;\n    -ms-flex-align: end;\n    align-items: flex-end;\n  }\n\n  .around-sm {\n    -ms-flex-pack: distribute;\n    justify-content: space-around;\n  }\n\n  .between-sm {\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n  }\n\n  .first-sm {\n    -webkit-box-ordinal-group: 0;\n    -ms-flex-order: -1;\n    order: -1;\n  }\n\n  .last-sm {\n    -webkit-box-ordinal-group: 2;\n    -ms-flex-order: 1;\n    order: 1;\n  }\n}\n@media only screen and (min-width:64em) {\n  .container {\n    width: 65rem;\n  }\n\n  .col-md,\n  .col-md-1,\n  .col-md-10,\n  .col-md-11,\n  .col-md-12,\n  .col-md-2,\n  .col-md-3,\n  .col-md-4,\n  .col-md-5,\n  .col-md-6,\n  .col-md-7,\n  .col-md-8,\n  .col-md-9,\n  .col-md-offset-0,\n  .col-md-offset-1,\n  .col-md-offset-10,\n  .col-md-offset-11,\n  .col-md-offset-12,\n  .col-md-offset-2,\n  .col-md-offset-3,\n  .col-md-offset-4,\n  .col-md-offset-5,\n  .col-md-offset-6,\n  .col-md-offset-7,\n  .col-md-offset-8,\n  .col-md-offset-9 {\n    box-sizing: border-box;\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    padding-right: .5rem;\n    padding-left: .5rem;\n  }\n\n  .col-md {\n    -webkit-box-flex: 1;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    max-width: 100%;\n  }\n\n  .col-md-1 {\n    -ms-flex-preferred-size: 8.33333333%;\n    flex-basis: 8.33333333%;\n    max-width: 8.33333333%;\n  }\n\n  .col-md-2 {\n    -ms-flex-preferred-size: 16.66666667%;\n    flex-basis: 16.66666667%;\n    max-width: 16.66666667%;\n  }\n\n  .col-md-3 {\n    -ms-flex-preferred-size: 25%;\n    flex-basis: 25%;\n    max-width: 25%;\n  }\n\n  .col-md-4 {\n    -ms-flex-preferred-size: 33.33333333%;\n    flex-basis: 33.33333333%;\n    max-width: 33.33333333%;\n  }\n\n  .col-md-5 {\n    -ms-flex-preferred-size: 41.66666667%;\n    flex-basis: 41.66666667%;\n    max-width: 41.66666667%;\n  }\n\n  .col-md-6 {\n    -ms-flex-preferred-size: 50%;\n    flex-basis: 50%;\n    max-width: 50%;\n  }\n\n  .col-md-7 {\n    -ms-flex-preferred-size: 58.33333333%;\n    flex-basis: 58.33333333%;\n    max-width: 58.33333333%;\n  }\n\n  .col-md-8 {\n    -ms-flex-preferred-size: 66.66666667%;\n    flex-basis: 66.66666667%;\n    max-width: 66.66666667%;\n  }\n\n  .col-md-9 {\n    -ms-flex-preferred-size: 75%;\n    flex-basis: 75%;\n    max-width: 75%;\n  }\n\n  .col-md-10 {\n    -ms-flex-preferred-size: 83.33333333%;\n    flex-basis: 83.33333333%;\n    max-width: 83.33333333%;\n  }\n\n  .col-md-11 {\n    -ms-flex-preferred-size: 91.66666667%;\n    flex-basis: 91.66666667%;\n    max-width: 91.66666667%;\n  }\n\n  .col-md-12 {\n    -ms-flex-preferred-size: 100%;\n    flex-basis: 100%;\n    max-width: 100%;\n  }\n\n  .col-md-offset-0 {\n    margin-left: 0;\n  }\n\n  .col-md-offset-1 {\n    margin-left: 8.33333333%;\n  }\n\n  .col-md-offset-2 {\n    margin-left: 16.66666667%;\n  }\n\n  .col-md-offset-3 {\n    margin-left: 25%;\n  }\n\n  .col-md-offset-4 {\n    margin-left: 33.33333333%;\n  }\n\n  .col-md-offset-5 {\n    margin-left: 41.66666667%;\n  }\n\n  .col-md-offset-6 {\n    margin-left: 50%;\n  }\n\n  .col-md-offset-7 {\n    margin-left: 58.33333333%;\n  }\n\n  .col-md-offset-8 {\n    margin-left: 66.66666667%;\n  }\n\n  .col-md-offset-9 {\n    margin-left: 75%;\n  }\n\n  .col-md-offset-10 {\n    margin-left: 83.33333333%;\n  }\n\n  .col-md-offset-11 {\n    margin-left: 91.66666667%;\n  }\n\n  .start-md {\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n    text-align: start;\n  }\n\n  .center-md {\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    text-align: center;\n  }\n\n  .end-md {\n    -webkit-box-pack: end;\n    -ms-flex-pack: end;\n    justify-content: flex-end;\n    text-align: end;\n  }\n\n  .top-md {\n    -webkit-box-align: start;\n    -ms-flex-align: start;\n    align-items: flex-start;\n  }\n\n  .middle-md {\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n  }\n\n  .bottom-md {\n    -webkit-box-align: end;\n    -ms-flex-align: end;\n    align-items: flex-end;\n  }\n\n  .around-md {\n    -ms-flex-pack: distribute;\n    justify-content: space-around;\n  }\n\n  .between-md {\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n  }\n\n  .first-md {\n    -webkit-box-ordinal-group: 0;\n    -ms-flex-order: -1;\n    order: -1;\n  }\n\n  .last-md {\n    -webkit-box-ordinal-group: 2;\n    -ms-flex-order: 1;\n    order: 1;\n  }\n}\n@media only screen and (min-width:75em) {\n  .container {\n    width: 76rem;\n  }\n\n  .col-lg,\n  .col-lg-1,\n  .col-lg-10,\n  .col-lg-11,\n  .col-lg-12,\n  .col-lg-2,\n  .col-lg-3,\n  .col-lg-4,\n  .col-lg-5,\n  .col-lg-6,\n  .col-lg-7,\n  .col-lg-8,\n  .col-lg-9,\n  .col-lg-offset-0,\n  .col-lg-offset-1,\n  .col-lg-offset-10,\n  .col-lg-offset-11,\n  .col-lg-offset-12,\n  .col-lg-offset-2,\n  .col-lg-offset-3,\n  .col-lg-offset-4,\n  .col-lg-offset-5,\n  .col-lg-offset-6,\n  .col-lg-offset-7,\n  .col-lg-offset-8,\n  .col-lg-offset-9 {\n    box-sizing: border-box;\n    -webkit-box-flex: 0;\n    -ms-flex: 0 0 auto;\n    flex: 0 0 auto;\n    padding-right: .5rem;\n    padding-left: .5rem;\n  }\n\n  .col-lg {\n    -webkit-box-flex: 1;\n    -ms-flex-positive: 1;\n    flex-grow: 1;\n    -ms-flex-preferred-size: 0;\n    flex-basis: 0;\n    max-width: 100%;\n  }\n\n  .col-lg-1 {\n    -ms-flex-preferred-size: 8.33333333%;\n    flex-basis: 8.33333333%;\n    max-width: 8.33333333%;\n  }\n\n  .col-lg-2 {\n    -ms-flex-preferred-size: 16.66666667%;\n    flex-basis: 16.66666667%;\n    max-width: 16.66666667%;\n  }\n\n  .col-lg-3 {\n    -ms-flex-preferred-size: 25%;\n    flex-basis: 25%;\n    max-width: 25%;\n  }\n\n  .col-lg-4 {\n    -ms-flex-preferred-size: 33.33333333%;\n    flex-basis: 33.33333333%;\n    max-width: 33.33333333%;\n  }\n\n  .col-lg-5 {\n    -ms-flex-preferred-size: 41.66666667%;\n    flex-basis: 41.66666667%;\n    max-width: 41.66666667%;\n  }\n\n  .col-lg-6 {\n    -ms-flex-preferred-size: 50%;\n    flex-basis: 50%;\n    max-width: 50%;\n  }\n\n  .col-lg-7 {\n    -ms-flex-preferred-size: 58.33333333%;\n    flex-basis: 58.33333333%;\n    max-width: 58.33333333%;\n  }\n\n  .col-lg-8 {\n    -ms-flex-preferred-size: 66.66666667%;\n    flex-basis: 66.66666667%;\n    max-width: 66.66666667%;\n  }\n\n  .col-lg-9 {\n    -ms-flex-preferred-size: 75%;\n    flex-basis: 75%;\n    max-width: 75%;\n  }\n\n  .col-lg-10 {\n    -ms-flex-preferred-size: 83.33333333%;\n    flex-basis: 83.33333333%;\n    max-width: 83.33333333%;\n  }\n\n  .col-lg-11 {\n    -ms-flex-preferred-size: 91.66666667%;\n    flex-basis: 91.66666667%;\n    max-width: 91.66666667%;\n  }\n\n  .col-lg-12 {\n    -ms-flex-preferred-size: 100%;\n    flex-basis: 100%;\n    max-width: 100%;\n  }\n\n  .col-lg-offset-0 {\n    margin-left: 0;\n  }\n\n  .col-lg-offset-1 {\n    margin-left: 8.33333333%;\n  }\n\n  .col-lg-offset-2 {\n    margin-left: 16.66666667%;\n  }\n\n  .col-lg-offset-3 {\n    margin-left: 25%;\n  }\n\n  .col-lg-offset-4 {\n    margin-left: 33.33333333%;\n  }\n\n  .col-lg-offset-5 {\n    margin-left: 41.66666667%;\n  }\n\n  .col-lg-offset-6 {\n    margin-left: 50%;\n  }\n\n  .col-lg-offset-7 {\n    margin-left: 58.33333333%;\n  }\n\n  .col-lg-offset-8 {\n    margin-left: 66.66666667%;\n  }\n\n  .col-lg-offset-9 {\n    margin-left: 75%;\n  }\n\n  .col-lg-offset-10 {\n    margin-left: 83.33333333%;\n  }\n\n  .col-lg-offset-11 {\n    margin-left: 91.66666667%;\n  }\n\n  .start-lg {\n    -webkit-box-pack: start;\n    -ms-flex-pack: start;\n    justify-content: flex-start;\n    text-align: start;\n  }\n\n  .center-lg {\n    -webkit-box-pack: center;\n    -ms-flex-pack: center;\n    justify-content: center;\n    text-align: center;\n  }\n\n  .end-lg {\n    -webkit-box-pack: end;\n    -ms-flex-pack: end;\n    justify-content: flex-end;\n    text-align: end;\n  }\n\n  .top-lg {\n    -webkit-box-align: start;\n    -ms-flex-align: start;\n    align-items: flex-start;\n  }\n\n  .middle-lg {\n    -webkit-box-align: center;\n    -ms-flex-align: center;\n    align-items: center;\n  }\n\n  .bottom-lg {\n    -webkit-box-align: end;\n    -ms-flex-align: end;\n    align-items: flex-end;\n  }\n\n  .around-lg {\n    -ms-flex-pack: distribute;\n    justify-content: space-around;\n  }\n\n  .between-lg {\n    -webkit-box-pack: justify;\n    -ms-flex-pack: justify;\n    justify-content: space-between;\n  }\n\n  .first-lg {\n    -webkit-box-ordinal-group: 0;\n    -ms-flex-order: -1;\n    order: -1;\n  }\n\n  .last-lg {\n    -webkit-box-ordinal-group: 2;\n    -ms-flex-order: 1;\n    order: 1;\n  }\n}\n"; (require("browserify-css").createStyle(css, { "href": "dependencies\\flexboxgrid\\flexboxgrid.min.css" }, { "insertAt": "bottom" })); module.exports = css;
},{"browserify-css":5}],4:[function(require,module,exports){
module.exports = function atoa (a, n) { return Array.prototype.slice.call(a, n); }

},{}],5:[function(require,module,exports){
'use strict';
// For more information about browser field, check out the browser field at https://github.com/substack/browserify-handbook#browser-field.

var styleElementsInsertedAtTop = [];

var insertStyleElement = function(styleElement, options) {
    var head = document.head || document.getElementsByTagName('head')[0];
    var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];

    options = options || {};
    options.insertAt = options.insertAt || 'bottom';

    if (options.insertAt === 'top') {
        if (!lastStyleElementInsertedAtTop) {
            head.insertBefore(styleElement, head.firstChild);
        } else if (lastStyleElementInsertedAtTop.nextSibling) {
            head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);
        } else {
            head.appendChild(styleElement);
        }
        styleElementsInsertedAtTop.push(styleElement);
    } else if (options.insertAt === 'bottom') {
        head.appendChild(styleElement);
    } else {
        throw new Error('Invalid value for parameter \'insertAt\'. Must be \'top\' or \'bottom\'.');
    }
};

module.exports = {
    // Create a <link> tag with optional data attributes
    createLink: function(href, attributes) {
        var head = document.head || document.getElementsByTagName('head')[0];
        var link = document.createElement('link');

        link.href = href;
        link.rel = 'stylesheet';

        for (var key in attributes) {
            if ( ! attributes.hasOwnProperty(key)) {
                continue;
            }
            var value = attributes[key];
            link.setAttribute('data-' + key, value);
        }

        head.appendChild(link);
    },
    // Create a <style> tag with optional data attributes
    createStyle: function(cssText, attributes, extraOptions) {
        extraOptions = extraOptions || {};

        var style = document.createElement('style');
        style.type = 'text/css';

        for (var key in attributes) {
            if ( ! attributes.hasOwnProperty(key)) {
                continue;
            }
            var value = attributes[key];
            style.setAttribute('data-' + key, value);
        }

        if (style.sheet) { // for jsdom and IE9+
            style.innerHTML = cssText;
            style.sheet.cssText = cssText;
            insertStyleElement(style, { insertAt: extraOptions.insertAt });
        } else if (style.styleSheet) { // for IE8 and below
            insertStyleElement(style, { insertAt: extraOptions.insertAt });
            style.styleSheet.cssText = cssText;
        } else { // for Chrome, Firefox, and Safari
            style.appendChild(document.createTextNode(cssText));
            insertStyleElement(style, { insertAt: extraOptions.insertAt });
        }
    }
};

},{}],6:[function(require,module,exports){
'use strict';

var ticky = require('ticky');

module.exports = function debounce (fn, args, ctx) {
  if (!fn) { return; }
  ticky(function run () {
    fn.apply(ctx || null, args || []);
  });
};

},{"ticky":15}],7:[function(require,module,exports){
'use strict';

var atoa = require('atoa');
var debounce = require('./debounce');

module.exports = function emitter (thing, options) {
  var opts = options || {};
  var evt = {};
  if (thing === undefined) { thing = {}; }
  thing.on = function (type, fn) {
    if (!evt[type]) {
      evt[type] = [fn];
    } else {
      evt[type].push(fn);
    }
    return thing;
  };
  thing.once = function (type, fn) {
    fn._once = true; // thing.off(fn) still works!
    thing.on(type, fn);
    return thing;
  };
  thing.off = function (type, fn) {
    var c = arguments.length;
    if (c === 1) {
      delete evt[type];
    } else if (c === 0) {
      evt = {};
    } else {
      var et = evt[type];
      if (!et) { return thing; }
      et.splice(et.indexOf(fn), 1);
    }
    return thing;
  };
  thing.emit = function () {
    var args = atoa(arguments);
    return thing.emitterSnapshot(args.shift()).apply(this, args);
  };
  thing.emitterSnapshot = function (type) {
    var et = (evt[type] || []).slice(0);
    return function () {
      var args = atoa(arguments);
      var ctx = this || thing;
      if (type === 'error' && opts.throws !== false && !et.length) { throw args.length === 1 ? args[0] : args; }
      et.forEach(function emitter (listen) {
        if (opts.async) { debounce(listen, args, ctx); } else { listen.apply(ctx, args); }
        if (listen._once) { thing.off(type, listen); }
      });
      return thing;
    };
  };
  return thing;
};

},{"./debounce":6,"atoa":4}],8:[function(require,module,exports){
(function (global){
'use strict';

var customEvent = require('custom-event');
var eventmap = require('./eventmap');
var doc = global.document;
var addEvent = addEventEasy;
var removeEvent = removeEventEasy;
var hardCache = [];

if (!global.addEventListener) {
  addEvent = addEventHard;
  removeEvent = removeEventHard;
}

module.exports = {
  add: addEvent,
  remove: removeEvent,
  fabricate: fabricateEvent
};

function addEventEasy (el, type, fn, capturing) {
  return el.addEventListener(type, fn, capturing);
}

function addEventHard (el, type, fn) {
  return el.attachEvent('on' + type, wrap(el, type, fn));
}

function removeEventEasy (el, type, fn, capturing) {
  return el.removeEventListener(type, fn, capturing);
}

function removeEventHard (el, type, fn) {
  var listener = unwrap(el, type, fn);
  if (listener) {
    return el.detachEvent('on' + type, listener);
  }
}

function fabricateEvent (el, type, model) {
  var e = eventmap.indexOf(type) === -1 ? makeCustomEvent() : makeClassicEvent();
  if (el.dispatchEvent) {
    el.dispatchEvent(e);
  } else {
    el.fireEvent('on' + type, e);
  }
  function makeClassicEvent () {
    var e;
    if (doc.createEvent) {
      e = doc.createEvent('Event');
      e.initEvent(type, true, true);
    } else if (doc.createEventObject) {
      e = doc.createEventObject();
    }
    return e;
  }
  function makeCustomEvent () {
    return new customEvent(type, { detail: model });
  }
}

function wrapperFactory (el, type, fn) {
  return function wrapper (originalEvent) {
    var e = originalEvent || global.event;
    e.target = e.target || e.srcElement;
    e.preventDefault = e.preventDefault || function preventDefault () { e.returnValue = false; };
    e.stopPropagation = e.stopPropagation || function stopPropagation () { e.cancelBubble = true; };
    e.which = e.which || e.keyCode;
    fn.call(el, e);
  };
}

function wrap (el, type, fn) {
  var wrapper = unwrap(el, type, fn) || wrapperFactory(el, type, fn);
  hardCache.push({
    wrapper: wrapper,
    element: el,
    type: type,
    fn: fn
  });
  return wrapper;
}

function unwrap (el, type, fn) {
  var i = find(el, type, fn);
  if (i) {
    var wrapper = hardCache[i].wrapper;
    hardCache.splice(i, 1); // free up a tad of memory
    return wrapper;
  }
}

function find (el, type, fn) {
  var i, item;
  for (i = 0; i < hardCache.length; i++) {
    item = hardCache[i];
    if (item.element === el && item.type === type && item.fn === fn) {
      return i;
    }
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./eventmap":9,"custom-event":10}],9:[function(require,module,exports){
(function (global){
'use strict';

var eventmap = [];
var eventname = '';
var ron = /^on/;

for (eventname in global) {
  if (ron.test(eventname)) {
    eventmap.push(eventname.slice(2));
  }
}

module.exports = eventmap;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],10:[function(require,module,exports){
(function (global){

var NativeCustomEvent = global.CustomEvent;

function useNative () {
  try {
    var p = new NativeCustomEvent('cat', { detail: { foo: 'bar' } });
    return  'cat' === p.type && 'bar' === p.detail.foo;
  } catch (e) {
  }
  return false;
}

/**
 * Cross-browser `CustomEvent` constructor.
 *
 * https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent.CustomEvent
 *
 * @public
 */

module.exports = useNative() ? NativeCustomEvent :

// IE >= 9
'function' === typeof document.createEvent ? function CustomEvent (type, params) {
  var e = document.createEvent('CustomEvent');
  if (params) {
    e.initCustomEvent(type, params.bubbles, params.cancelable, params.detail);
  } else {
    e.initCustomEvent(type, false, false, void 0);
  }
  return e;
} :

// IE <= 8
function CustomEvent (type, params) {
  var e = document.createEventObject();
  e.type = type;
  if (params) {
    e.bubbles = Boolean(params.bubbles);
    e.cancelable = Boolean(params.cancelable);
    e.detail = params.detail;
  } else {
    e.bubbles = false;
    e.cancelable = false;
    e.detail = void 0;
  }
  return e;
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],11:[function(require,module,exports){
'use strict';

var cache = {};
var start = '(?:^|\\s)';
var end = '(?:\\s|$)';

function lookupClass (className) {
  var cached = cache[className];
  if (cached) {
    cached.lastIndex = 0;
  } else {
    cache[className] = cached = new RegExp(start + className + end, 'g');
  }
  return cached;
}

function addClass (el, className) {
  var current = el.className;
  if (!current.length) {
    el.className = className;
  } else if (!lookupClass(className).test(current)) {
    el.className += ' ' + className;
  }
}

function rmClass (el, className) {
  el.className = el.className.replace(lookupClass(className), ' ').trim();
}

module.exports = {
  add: addClass,
  rm: rmClass
};

},{}],12:[function(require,module,exports){
var css = ".gu-mirror {\n  position: fixed!important;\n  margin: 0!important;\n  z-index: 9999!important;\n  opacity: .8;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=80)\";\n  filter: alpha(opacity=80);\n}\n.gu-hide {\n  display: none!important;\n}\n.gu-unselectable {\n  -webkit-user-select: none!important;\n  -moz-user-select: none!important;\n  -ms-user-select: none!important;\n  user-select: none!important;\n}\n.gu-transit {\n  opacity: .2;\n  -ms-filter: \"progid:DXImageTransform.Microsoft.Alpha(Opacity=20)\";\n  filter: alpha(opacity=20);\n}\n"; (require("browserify-css").createStyle(css, { "href": "node_modules\\dragula\\dist\\dragula.min.css" }, { "insertAt": "bottom" })); module.exports = css;
},{"browserify-css":5}],13:[function(require,module,exports){
(function (global){
'use strict';

var emitter = require('contra/emitter');
var crossvent = require('crossvent');
var classes = require('./classes');
var doc = document;
var documentElement = doc.documentElement;

function dragula (initialContainers, options) {
  var len = arguments.length;
  if (len === 1 && Array.isArray(initialContainers) === false) {
    options = initialContainers;
    initialContainers = [];
  }
  var _mirror; // mirror image
  var _source; // source container
  var _item; // item being dragged
  var _offsetX; // reference x
  var _offsetY; // reference y
  var _moveX; // reference move x
  var _moveY; // reference move y
  var _initialSibling; // reference sibling when grabbed
  var _currentSibling; // reference sibling now
  var _copy; // item used for copying
  var _renderTimer; // timer for setTimeout renderMirrorImage
  var _lastDropTarget = null; // last container item was over
  var _grabbed; // holds mousedown context until first mousemove

  var o = options || {};
  if (o.moves === void 0) { o.moves = always; }
  if (o.accepts === void 0) { o.accepts = always; }
  if (o.invalid === void 0) { o.invalid = invalidTarget; }
  if (o.containers === void 0) { o.containers = initialContainers || []; }
  if (o.isContainer === void 0) { o.isContainer = never; }
  if (o.copy === void 0) { o.copy = false; }
  if (o.copySortSource === void 0) { o.copySortSource = false; }
  if (o.revertOnSpill === void 0) { o.revertOnSpill = false; }
  if (o.removeOnSpill === void 0) { o.removeOnSpill = false; }
  if (o.direction === void 0) { o.direction = 'vertical'; }
  if (o.ignoreInputTextSelection === void 0) { o.ignoreInputTextSelection = true; }
  if (o.mirrorContainer === void 0) { o.mirrorContainer = doc.body; }

  var drake = emitter({
    containers: o.containers,
    start: manualStart,
    end: end,
    cancel: cancel,
    remove: remove,
    destroy: destroy,
    canMove: canMove,
    dragging: false
  });

  if (o.removeOnSpill === true) {
    drake.on('over', spillOver).on('out', spillOut);
  }

  events();

  return drake;

  function isContainer (el) {
    return drake.containers.indexOf(el) !== -1 || o.isContainer(el);
  }

  function events (remove) {
    var op = remove ? 'remove' : 'add';
    touchy(documentElement, op, 'mousedown', grab);
    touchy(documentElement, op, 'mouseup', release);
  }

  function eventualMovements (remove) {
    var op = remove ? 'remove' : 'add';
    touchy(documentElement, op, 'mousemove', startBecauseMouseMoved);
  }

  function movements (remove) {
    var op = remove ? 'remove' : 'add';
    crossvent[op](documentElement, 'selectstart', preventGrabbed); // IE8
    crossvent[op](documentElement, 'click', preventGrabbed);
  }

  function destroy () {
    events(true);
    release({});
  }

  function preventGrabbed (e) {
    if (_grabbed) {
      e.preventDefault();
    }
  }

  function grab (e) {
    _moveX = e.clientX;
    _moveY = e.clientY;

    var ignore = whichMouseButton(e) !== 1 || e.metaKey || e.ctrlKey;
    if (ignore) {
      return; // we only care about honest-to-god left clicks and touch events
    }
    var item = e.target;
    var context = canStart(item);
    if (!context) {
      return;
    }
    _grabbed = context;
    eventualMovements();
    if (e.type === 'mousedown') {
      if (isInput(item)) { // see also: https://github.com/bevacqua/dragula/issues/208
        item.focus(); // fixes https://github.com/bevacqua/dragula/issues/176
      } else {
        e.preventDefault(); // fixes https://github.com/bevacqua/dragula/issues/155
      }
    }
  }

  function startBecauseMouseMoved (e) {
    if (!_grabbed) {
      return;
    }
    if (whichMouseButton(e) === 0) {
      release({});
      return; // when text is selected on an input and then dragged, mouseup doesn't fire. this is our only hope
    }
    // truthy check fixes #239, equality fixes #207
    if (e.clientX !== void 0 && e.clientX === _moveX && e.clientY !== void 0 && e.clientY === _moveY) {
      return;
    }
    if (o.ignoreInputTextSelection) {
      var clientX = getCoord('clientX', e);
      var clientY = getCoord('clientY', e);
      var elementBehindCursor = doc.elementFromPoint(clientX, clientY);
      if (isInput(elementBehindCursor)) {
        return;
      }
    }

    var grabbed = _grabbed; // call to end() unsets _grabbed
    eventualMovements(true);
    movements();
    end();
    start(grabbed);

    var offset = getOffset(_item);
    _offsetX = getCoord('pageX', e) - offset.left;
    _offsetY = getCoord('pageY', e) - offset.top;

    classes.add(_copy || _item, 'gu-transit');
    renderMirrorImage();
    drag(e);
  }

  function canStart (item) {
    if (drake.dragging && _mirror) {
      return;
    }
    if (isContainer(item)) {
      return; // don't drag container itself
    }
    var handle = item;
    while (getParent(item) && isContainer(getParent(item)) === false) {
      if (o.invalid(item, handle)) {
        return;
      }
      item = getParent(item); // drag target should be a top element
      if (!item) {
        return;
      }
    }
    var source = getParent(item);
    if (!source) {
      return;
    }
    if (o.invalid(item, handle)) {
      return;
    }

    var movable = o.moves(item, source, handle, nextEl(item));
    if (!movable) {
      return;
    }

    return {
      item: item,
      source: source
    };
  }

  function canMove (item) {
    return !!canStart(item);
  }

  function manualStart (item) {
    var context = canStart(item);
    if (context) {
      start(context);
    }
  }

  function start (context) {
    if (isCopy(context.item, context.source)) {
      _copy = context.item.cloneNode(true);
      drake.emit('cloned', _copy, context.item, 'copy');
    }

    _source = context.source;
    _item = context.item;
    _initialSibling = _currentSibling = nextEl(context.item);

    drake.dragging = true;
    drake.emit('drag', _item, _source);
  }

  function invalidTarget () {
    return false;
  }

  function end () {
    if (!drake.dragging) {
      return;
    }
    var item = _copy || _item;
    drop(item, getParent(item));
  }

  function ungrab () {
    _grabbed = false;
    eventualMovements(true);
    movements(true);
  }

  function release (e) {
    ungrab();

    if (!drake.dragging) {
      return;
    }
    var item = _copy || _item;
    var clientX = getCoord('clientX', e);
    var clientY = getCoord('clientY', e);
    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
    if (dropTarget && ((_copy && o.copySortSource) || (!_copy || dropTarget !== _source))) {
      drop(item, dropTarget);
    } else if (o.removeOnSpill) {
      remove();
    } else {
      cancel();
    }
  }

  function drop (item, target) {
    var parent = getParent(item);
    if (_copy && o.copySortSource && target === _source) {
      parent.removeChild(_item);
    }
    if (isInitialPlacement(target)) {
      drake.emit('cancel', item, _source, _source);
    } else {
      drake.emit('drop', item, target, _source, _currentSibling);
    }
    cleanup();
  }

  function remove () {
    if (!drake.dragging) {
      return;
    }
    var item = _copy || _item;
    var parent = getParent(item);
    if (parent) {
      parent.removeChild(item);
    }
    drake.emit(_copy ? 'cancel' : 'remove', item, parent, _source);
    cleanup();
  }

  function cancel (revert) {
    if (!drake.dragging) {
      return;
    }
    var reverts = arguments.length > 0 ? revert : o.revertOnSpill;
    var item = _copy || _item;
    var parent = getParent(item);
    var initial = isInitialPlacement(parent);
    if (initial === false && reverts) {
      if (_copy) {
        if (parent) {
          parent.removeChild(_copy);
        }
      } else {
        _source.insertBefore(item, _initialSibling);
      }
    }
    if (initial || reverts) {
      drake.emit('cancel', item, _source, _source);
    } else {
      drake.emit('drop', item, parent, _source, _currentSibling);
    }
    cleanup();
  }

  function cleanup () {
    var item = _copy || _item;
    ungrab();
    removeMirrorImage();
    if (item) {
      classes.rm(item, 'gu-transit');
    }
    if (_renderTimer) {
      clearTimeout(_renderTimer);
    }
    drake.dragging = false;
    if (_lastDropTarget) {
      drake.emit('out', item, _lastDropTarget, _source);
    }
    drake.emit('dragend', item);
    _source = _item = _copy = _initialSibling = _currentSibling = _renderTimer = _lastDropTarget = null;
  }

  function isInitialPlacement (target, s) {
    var sibling;
    if (s !== void 0) {
      sibling = s;
    } else if (_mirror) {
      sibling = _currentSibling;
    } else {
      sibling = nextEl(_copy || _item);
    }
    return target === _source && sibling === _initialSibling;
  }

  function findDropTarget (elementBehindCursor, clientX, clientY) {
    var target = elementBehindCursor;
    while (target && !accepted()) {
      target = getParent(target);
    }
    return target;

    function accepted () {
      var droppable = isContainer(target);
      if (droppable === false) {
        return false;
      }

      var immediate = getImmediateChild(target, elementBehindCursor);
      var reference = getReference(target, immediate, clientX, clientY);
      var initial = isInitialPlacement(target, reference);
      if (initial) {
        return true; // should always be able to drop it right back where it was
      }
      return o.accepts(_item, target, _source, reference);
    }
  }

  function drag (e) {
    if (!_mirror) {
      return;
    }
    e.preventDefault();

    var clientX = getCoord('clientX', e);
    var clientY = getCoord('clientY', e);
    var x = clientX - _offsetX;
    var y = clientY - _offsetY;

    _mirror.style.left = x + 'px';
    _mirror.style.top = y + 'px';

    var item = _copy || _item;
    var elementBehindCursor = getElementBehindPoint(_mirror, clientX, clientY);
    var dropTarget = findDropTarget(elementBehindCursor, clientX, clientY);
    var changed = dropTarget !== null && dropTarget !== _lastDropTarget;
    if (changed || dropTarget === null) {
      out();
      _lastDropTarget = dropTarget;
      over();
    }
    var parent = getParent(item);
    if (dropTarget === _source && _copy && !o.copySortSource) {
      if (parent) {
        parent.removeChild(item);
      }
      return;
    }
    var reference;
    var immediate = getImmediateChild(dropTarget, elementBehindCursor);
    if (immediate !== null) {
      reference = getReference(dropTarget, immediate, clientX, clientY);
    } else if (o.revertOnSpill === true && !_copy) {
      reference = _initialSibling;
      dropTarget = _source;
    } else {
      if (_copy && parent) {
        parent.removeChild(item);
      }
      return;
    }
    if (
      (reference === null && changed) ||
      reference !== item &&
      reference !== nextEl(item)
    ) {
      _currentSibling = reference;
      dropTarget.insertBefore(item, reference);
      drake.emit('shadow', item, dropTarget, _source);
    }
    function moved (type) { drake.emit(type, item, _lastDropTarget, _source); }
    function over () { if (changed) { moved('over'); } }
    function out () { if (_lastDropTarget) { moved('out'); } }
  }

  function spillOver (el) {
    classes.rm(el, 'gu-hide');
  }

  function spillOut (el) {
    if (drake.dragging) { classes.add(el, 'gu-hide'); }
  }

  function renderMirrorImage () {
    if (_mirror) {
      return;
    }
    var rect = _item.getBoundingClientRect();
    _mirror = _item.cloneNode(true);
    _mirror.style.width = getRectWidth(rect) + 'px';
    _mirror.style.height = getRectHeight(rect) + 'px';
    classes.rm(_mirror, 'gu-transit');
    classes.add(_mirror, 'gu-mirror');
    o.mirrorContainer.appendChild(_mirror);
    touchy(documentElement, 'add', 'mousemove', drag);
    classes.add(o.mirrorContainer, 'gu-unselectable');
    drake.emit('cloned', _mirror, _item, 'mirror');
  }

  function removeMirrorImage () {
    if (_mirror) {
      classes.rm(o.mirrorContainer, 'gu-unselectable');
      touchy(documentElement, 'remove', 'mousemove', drag);
      getParent(_mirror).removeChild(_mirror);
      _mirror = null;
    }
  }

  function getImmediateChild (dropTarget, target) {
    var immediate = target;
    while (immediate !== dropTarget && getParent(immediate) !== dropTarget) {
      immediate = getParent(immediate);
    }
    if (immediate === documentElement) {
      return null;
    }
    return immediate;
  }

  function getReference (dropTarget, target, x, y) {
    var horizontal = o.direction === 'horizontal';
    var reference = target !== dropTarget ? inside() : outside();
    return reference;

    function outside () { // slower, but able to figure out any position
      var len = dropTarget.children.length;
      var i;
      var el;
      var rect;
      for (i = 0; i < len; i++) {
        el = dropTarget.children[i];
        rect = el.getBoundingClientRect();
        if (horizontal && (rect.left + rect.width / 2) > x) { return el; }
        if (!horizontal && (rect.top + rect.height / 2) > y) { return el; }
      }
      return null;
    }

    function inside () { // faster, but only available if dropped inside a child element
      var rect = target.getBoundingClientRect();
      if (horizontal) {
        return resolve(x > rect.left + getRectWidth(rect) / 2);
      }
      return resolve(y > rect.top + getRectHeight(rect) / 2);
    }

    function resolve (after) {
      return after ? nextEl(target) : target;
    }
  }

  function isCopy (item, container) {
    return typeof o.copy === 'boolean' ? o.copy : o.copy(item, container);
  }
}

function touchy (el, op, type, fn) {
  var touch = {
    mouseup: 'touchend',
    mousedown: 'touchstart',
    mousemove: 'touchmove'
  };
  var pointers = {
    mouseup: 'pointerup',
    mousedown: 'pointerdown',
    mousemove: 'pointermove'
  };
  var microsoft = {
    mouseup: 'MSPointerUp',
    mousedown: 'MSPointerDown',
    mousemove: 'MSPointerMove'
  };
  if (global.navigator.pointerEnabled) {
    crossvent[op](el, pointers[type], fn);
  } else if (global.navigator.msPointerEnabled) {
    crossvent[op](el, microsoft[type], fn);
  } else {
    crossvent[op](el, touch[type], fn);
    crossvent[op](el, type, fn);
  }
}

function whichMouseButton (e) {
  if (e.touches !== void 0) { return e.touches.length; }
  if (e.which !== void 0 && e.which !== 0) { return e.which; } // see https://github.com/bevacqua/dragula/issues/261
  if (e.buttons !== void 0) { return e.buttons; }
  var button = e.button;
  if (button !== void 0) { // see https://github.com/jquery/jquery/blob/99e8ff1baa7ae341e94bb89c3e84570c7c3ad9ea/src/event.js#L573-L575
    return button & 1 ? 1 : button & 2 ? 3 : (button & 4 ? 2 : 0);
  }
}

function getOffset (el) {
  var rect = el.getBoundingClientRect();
  return {
    left: rect.left + getScroll('scrollLeft', 'pageXOffset'),
    top: rect.top + getScroll('scrollTop', 'pageYOffset')
  };
}

function getScroll (scrollProp, offsetProp) {
  if (typeof global[offsetProp] !== 'undefined') {
    return global[offsetProp];
  }
  if (documentElement.clientHeight) {
    return documentElement[scrollProp];
  }
  return doc.body[scrollProp];
}

function getElementBehindPoint (point, x, y) {
  var p = point || {};
  var state = p.className;
  var el;
  p.className += ' gu-hide';
  el = doc.elementFromPoint(x, y);
  p.className = state;
  return el;
}

function never () { return false; }
function always () { return true; }
function getRectWidth (rect) { return rect.width || (rect.right - rect.left); }
function getRectHeight (rect) { return rect.height || (rect.bottom - rect.top); }
function getParent (el) { return el.parentNode === doc ? null : el.parentNode; }
function isInput (el) { return el.tagName === 'INPUT' || el.tagName === 'TEXTAREA' || el.tagName === 'SELECT' || isEditable(el); }
function isEditable (el) {
  if (!el) { return false; } // no parents were editable
  if (el.contentEditable === 'false') { return false; } // stop the lookup
  if (el.contentEditable === 'true') { return true; } // found a contentEditable element in the chain
  return isEditable(getParent(el)); // contentEditable is set to 'inherit'
}

function nextEl (el) {
  return el.nextElementSibling || manually();
  function manually () {
    var sibling = el;
    do {
      sibling = sibling.nextSibling;
    } while (sibling && sibling.nodeType !== 1);
    return sibling;
  }
}

function getEventHost (e) {
  // on touchend event, we have to use `e.changedTouches`
  // see http://stackoverflow.com/questions/7192563/touchend-event-properties
  // see https://github.com/bevacqua/dragula/issues/34
  if (e.targetTouches && e.targetTouches.length) {
    return e.targetTouches[0];
  }
  if (e.changedTouches && e.changedTouches.length) {
    return e.changedTouches[0];
  }
  return e;
}

function getCoord (coord, e) {
  var host = getEventHost(e);
  var missMap = {
    pageX: 'clientX', // IE8
    pageY: 'clientY' // IE8
  };
  if (coord in missMap && !(coord in host) && missMap[coord] in host) {
    coord = missMap[coord];
  }
  return host[coord];
}

module.exports = dragula;

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./classes":11,"contra/emitter":7,"crossvent":8}],14:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],15:[function(require,module,exports){
(function (setImmediate){
var si = typeof setImmediate === 'function', tick;
if (si) {
  tick = function (fn) { setImmediate(fn); };
} else {
  tick = function (fn) { setTimeout(fn, 0); };
}

module.exports = tick;
}).call(this,require("timers").setImmediate)

},{"timers":16}],16:[function(require,module,exports){
(function (setImmediate,clearImmediate){
var nextTick = require('process/browser.js').nextTick;
var apply = Function.prototype.apply;
var slice = Array.prototype.slice;
var immediateIds = {};
var nextImmediateId = 0;

// DOM APIs, for completeness

exports.setTimeout = function() {
  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);
};
exports.setInterval = function() {
  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);
};
exports.clearTimeout =
exports.clearInterval = function(timeout) { timeout.close(); };

function Timeout(id, clearFn) {
  this._id = id;
  this._clearFn = clearFn;
}
Timeout.prototype.unref = Timeout.prototype.ref = function() {};
Timeout.prototype.close = function() {
  this._clearFn.call(window, this._id);
};

// Does not start the time, just sets up the members needed.
exports.enroll = function(item, msecs) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = msecs;
};

exports.unenroll = function(item) {
  clearTimeout(item._idleTimeoutId);
  item._idleTimeout = -1;
};

exports._unrefActive = exports.active = function(item) {
  clearTimeout(item._idleTimeoutId);

  var msecs = item._idleTimeout;
  if (msecs >= 0) {
    item._idleTimeoutId = setTimeout(function onTimeout() {
      if (item._onTimeout)
        item._onTimeout();
    }, msecs);
  }
};

// That's not how node.js implements it but the exposed api is the same.
exports.setImmediate = typeof setImmediate === "function" ? setImmediate : function(fn) {
  var id = nextImmediateId++;
  var args = arguments.length < 2 ? false : slice.call(arguments, 1);

  immediateIds[id] = true;

  nextTick(function onNextTick() {
    if (immediateIds[id]) {
      // fn.call() is faster so we optimize for the common use-case
      // @see http://jsperf.com/call-apply-segu
      if (args) {
        fn.apply(null, args);
      } else {
        fn.call(null);
      }
      // Prevent ids from leaking
      exports.clearImmediate(id);
    }
  });

  return id;
};

exports.clearImmediate = typeof clearImmediate === "function" ? clearImmediate : function(id) {
  delete immediateIds[id];
};
}).call(this,require("timers").setImmediate,require("timers").clearImmediate)

},{"process/browser.js":14,"timers":16}],17:[function(require,module,exports){
module.exports={
  "name": "pdf-builder-2020",
  "version": "0.0.17",
  "description": "",
  "main": "index.js",
  "scripts": {
    "build-all": "npm run build-pdf-editor && npm run build-manager & npm run deploy",
    "build-pdf-editor": "browserify -d src/pdf-editor/PdfEditor.js > public/pdf-editor/pdf-editor.js",
    "build-manager": "browserify -d src/manage-application/ManageApplication.js > public/manage-application/manager.js",
    "deploy": "xcopy /S /Y  \"./public\" \"C:/Users/Stranger_in_the_Q/IdeaProjects/itext-server/static\""
  },
  "devDependencies": {
    "babel-preset-es2015": "^6.24.1",
    "browserify": "^16.2.3",
    "browserify-css": "^0.14.0",
    "exports-loader": "^0.7.0",
    "graceful-fs": "^4.1.13",
    "imports-loader": "^0.8.0",
    "stripify": "^6.0.0"
  },
  "browserify": {
    "transform": [
      "browserify-css"
    ]
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "d3-selection": "^1.4.0",
    "dragula": "^3.7.2"
  }
}

},{}],18:[function(require,module,exports){
// var InlineEditor = require('../../dependencies/ckeditor/ckeditor5-inline-full/build/ckeditor')
var BalloonEditor = require('../../dependencies/ckeditor/ckeditor-baloon/build/ckeditor')
// require('../../dependencies/ckeditor/ckeditor5-inline-full/build/translations/ru')
module.exports = {

    removeTextEditor: function remove(el) {

    },

    initTextEditor: function (el) {
        ckEditor(el)
    }
};


function ckEditor(el) {

    if(!el || el.classList.contains('initialized'))
        return
    el.classList.add('initialized');
    // InlineEditor
    BalloonEditor
        .create(el, {

            toolbar: {
                items: [
                    'undo',
                    'redo',
                    '|',
                    'bold',
                    'italic',
                    'underline',
                    'strikethrough',
                    'subscript',
                    'superscript',
                    // 'blockQuote',
                    // 'bulletedList',
                    // 'numberedList',
                    '|',
                    'alignment',
                    'indent',
                    'outdent',
                    'fontFamily',
                    'fontSize',
                    'fontBackgroundColor',
                    'fontColor',
                    '|',
                    // 'imageUpload',
                    // 'insertTable',
                    'specialCharacters',
                    'horizontalLine',
                    'link'
                ]
            },
            language: 'ru',
            image: {
                // You need to configure the image toolbar, too, so it uses the new style buttons.
                toolbar: [
                    'imageUpload',
                    // 'imageTextAlternative',
                    // '|',
                    'imageStyle:alignLeft',
                    'imageStyle:full',
                    'imageStyle:alignRight'
                ],
                styles: [
                    'full',
                    'alignLeft',
                    'alignRight'
                ]
            },
            table: {
                contentToolbar: [
                    'tableColumn',
                    'tableRow',
                    'mergeTableCells',
                    'tableCellProperties',
                    'tableProperties'
                ]
            },
            licenseKey: '',

        }).then(editor => {
            el.editor = editor;
        })
}

},{"../../dependencies/ckeditor/ckeditor-baloon/build/ckeditor":1}],19:[function(require,module,exports){
let pageStyles = require('./page-styles');

function fixPageBreaks_by_AStanislavsky(tmp) {
    let s = tmp.querySelector('.page.container').style;
    s.height = '200px';
    s.display = 'table-cell'
}

module.exports = function (html) {
    let tmp = tmpElement(html);
    fixPageBreaks_by_AStanislavsky(tmp);
    fixFlex(tmp);
    fixImagesAlign(tmp);
    fixTablesAlign(tmp);
    pageBreaks(tmp);
    return page(tmp);
}

function page(el) {
    return `
        <html>
            <head>${style()}</head>
            <body>${el.innerHTML}</body>
        </html>
    `;
}

function style() {
    return `
        ${pageStyles}
        <style>
           
            figure > img {
                display: block;
                margin: 0 auto;
                max-width: 100%;
                min-width: 50px;
            }
            figure.image.image_resized img {
                width: 100%;
            }
           .image-style-align-left {
                float: left;
            }
           .image-style-align-right {
                float: right;
            }
            
        </style>
    `;
}

function pageBreaks(tmp) {
    tmp.querySelectorAll('.page-break').forEach(el => {
        el.innerHTML = '';
        el.classList.remove('page-break')
    })
}

function fixFlex(el) {
    el.querySelectorAll('.row').forEach(row => {
        let columns = row.querySelectorAll('.col-xs')
        columns.forEach(col => {
            let s = col.style;
            s.display = 'inline-block';
            s.float = "left";
            s.minWidth = s.width = 100 / columns.length + '%';
            s.verticalAlign = 'top';
            // s.padding = "0 3px";
            // s.backgroundColor = `hsl(${Math.random()*360},55%,85%)`
        })
    })
}

function fixImagesAlign(el) {
    el.querySelectorAll('figure.image').forEach(imgBlock => {
        let centerAlign = !imgBlock.classList.contains('image-style-align-left')
                        && !imgBlock.classList.contains('image-style-align-right');
        if (centerAlign)
            imgBlock.parentNode.style.textAlign = "center"
    })
}

function fixTablesAlign(el) {
    el.querySelectorAll('figure.table').forEach(tableBlock => {
        let centerAlign = !tableBlock.style.float;
        if (!centerAlign) return
        tableBlock.parentNode.style.textAlign = "center"
        tableBlock.style.display = "inline-block"
    })
}

function tmpElement(html) {
    let tmp = document.createElement('div');
    tmp.innerHTML = html;
    return tmp;
}
},{"./page-styles":29}],20:[function(require,module,exports){
let fill = '#432c12'

let move = `
    <path d="M352.201 425.775l-79.196 79.196c-9.373 9.373-24.568 9.373-33.941 
        0l-79.196-79.196c-15.119-15.119-4.411-40.971 16.971-40.97h51.162L228 284H127.196v51.162c0 
        21.382-25.851 32.09-40.971 16.971L7.029 272.937c-9.373-9.373-9.373-24.569 0-33.941L86.225 
        159.8c15.119-15.119 40.971-4.411 40.971 16.971V228H228V127.196h-51.23c-21.382 
        0-32.09-25.851-16.971-40.971l79.196-79.196c9.373-9.373 24.568-9.373 33.941 0l79.196 79.196c15.119 
        15.119 4.411 40.971-16.971 40.971h-51.162V228h100.804v-51.162c0-21.382 25.851-32.09 
        40.97-16.971l79.196 79.196c9.373 9.373 9.373 24.569 0 33.941L425.773 352.2c-15.119 15.119-40.971 
        4.411-40.97-16.971V284H284v100.804h51.23c21.382 0 32.09 25.851 16.971 40.971z"/>
`;

let copy = `
    <path fill="${fill}" d="M320 448v40c0 13.255-10.745 24-24 24H24c-13.255 
        0-24-10.745-24-24V120c0-13.255 10.745-24 24-24h72v296c0 
        30.879 25.121 56 56 56h168zm0-344V0H152c-13.255 0-24 10.745-24 24v368c0 
        13.255 10.745 24 24 24h272c13.255 0 24-10.745 24-24V128H344c-13.2 
        0-24-10.8-24-24zm120.971-31.029L375.029 7.029A24 24 0 0 0 358.059 
        0H352v96h96v-6.059a24 24 0 0 0-7.029-16.97z"/>
`;

let del = `
    <path fill="${fill}" d="M81  81 l350  350 l-40 40 l-350 -350z"/>
    <path fill="${fill}" d="M411 81 l-350 350 l40  40 l350  -350z"/>
`;

let down = `
    <path fill="${fill}" d="M50 150 l200 200 l200 -200z"/>
`;

let up = `
    <path fill="${fill}" d="M50 350 l200 -200 l200 200z"/>
`;

module.exports = {
    move: (w, h) => svg(w, h, move, [-50, -50, 612, 612]),
    copy: (w, h) => svg(w, h, copy),
    del: (w, h) => svg(w, h, del),
    up: (w, h) => svg(w, h, up),
    down: (w, h) => svg(w, h,down)
};

function svg(w, h, html, vb) {
    vb = vb || [-50, -50, 548, 612];
    return `<svg xmlns="http://www.w3.org/2000/svg" 
                viewBox="${vb}" 
                width="${w}px"  
                height="${h}px">
            ${html}
        </svg>`
}
},{}],21:[function(require,module,exports){
require('./pdf-editor.css');
require('../../dependencies/flexboxgrid/flexboxgrid.min.css');
let ver = require('../../package.json').version

let dnd = require('./dnd')
let htmlTemplate = require('./html-template');
let TextEditor = require('./CkEditor5');
let blocks = require('./blocks');
let svgOverlay = require('./svgOverlay/svgOverlay');
let documentCleaner = require('./documentCleaner');
let forItextFormatter = require('./ForItextFormatter');
let mouseoverButtons = require('./mouseoverButtons');
let pageStyles = require('./page-styles');
let TemplatesFactory = require('./TemplatesFactory');
let pageProperties = require('./pageProperties')
let templatesFactory = new TemplatesFactory();

class PdfEditor {

    constructor(properties) {
        this.properties = properties || {};
        this.properties.blockProperties = this.properties.blockProperties || {}
        this.properties.buttonsSize = this.properties.buttonsSize || 25;
        this.initPdfEditor();
        this.writeVersion();
        dnd.initDnD(this)

        this.initCollapsePanels()
        this.initClearBlockSelectionOnClickInMilkListener();

        blocks.initBlocks(this);
        svgOverlay.initSvgOverlay(this);


        addEventListener('mouseup', () => {
            this.manageHoverState()
            this.removeEmptyRows()
        });
        pageProperties.initPageProperties(this);
        console.log('pdf-editor: ' + ver)
    }

    removeEmptyRows() {
        setTimeout(() => {
            let allBlocks = this.targetElement.querySelectorAll('.pdf-editor .page > .template');
            allBlocks.forEach(b => {
                if (!b.firstChild)
                    return
                this.clearNotNeededRows(b.firstChild);
                if (b.childElementCount === 1)
                    b.firstChild.classList.remove('empty-drop-zone')

                this.manageExtraRows(b.firstChild);
                this.markEmptyRows(b.firstChild);
            })
        })
    }

    initPdfEditor() {
        let targetElement = this.properties.target;
        if (typeof targetElement === "string")
            targetElement = document.querySelector(targetElement);
        targetElement.innerHTML = htmlTemplate(this.properties);
        targetElement.querySelector('.sidePanel #blocks')
            .innerHTML = templatesFactory.createBlocks();
        targetElement.querySelector('.sidePanel #elements')
            .innerHTML = templatesFactory.createElements();
        targetElement.addEventListener('mousemove',
            e => mouseoverButtons.manage(e, this));

        this.targetElement = targetElement;
    }

    writeVersion(){
        let page = this.targetElement.querySelector('.page');
        if (!page.getAttribute('created-ver'))
            page.setAttribute('created-ver', ver);
        page.setAttribute('last-edited-ver', ver);
    }

    initClearBlockSelectionOnClickInMilkListener() {
        this.targetElement.querySelector('.content').addEventListener('click', e => {
            let clear = ['content', 'page'].find(c => e.target.classList.contains(c))
            clear |= e.target.querySelector('.page-break');
            if (clear)
                this.clickOnBlock(null)
        });
    }

    initCollapsePanels() {
        this.targetElement.querySelectorAll('.groupName').forEach(groupName => {
            groupName.addEventListener('click', () => {
                groupName.classList.toggle('collapsed')
            });
        });
    }

    manageHoverState(target) {
        if (target === this.lastHover)
            return;
        this.lastHover = target;
        this.targetElement.querySelectorAll('.page.container > .template')
            .forEach(tpl => tpl.classList.remove('hover-state'))
        if (!target)
            return
        target.classList.add('hover-state')

    }

    markEmptyRows(target) {
        if (!target)
            return
        target.parentNode.querySelectorAll('.dropzone').forEach(dz => {
            let single = dz.parentNode. querySelectorAll('.dropzone').length === 1;
            let empty = dz.innerHTML.trim() === '';
            dz.classList.toggle('empty-drop-zone', empty && !single)
        });
    }

    manageExtraRows(target) {
        if (!target)
            return
        try { // console.log('manageExtraRows')

            let first = [...target.parentNode.querySelectorAll('.dropzone')].shift()
            if (first && first.innerHTML.trim() !== '') {
                target.parentNode.insertBefore(this.newDropZone(), first);
            }
            let last = [...target.parentNode.querySelectorAll('.dropzone')].pop()
            if (last && last.innerHTML.trim() !== '') {
                target.parentNode.append(this.newDropZone());
            }
        } catch (e) {
            console.error(e)
        }
    }

    clearNotNeededRows(target) {
        if (!target)
            return
        try { // console.log('clearNotNeededRows')
            if (target.parentNode.childNodes.length === 1 && target.innerHTML === '')
                return
            let dropZones = target.parentNode.querySelectorAll('.dropzone');
            for (let i = 0; i < dropZones.length; i++) {
                if (dropZones.length > 1 && dropZones[i].innerHTML.trim() === '') {
                    dropZones[i].remove();
                    dnd.removeElement(dropZones[i])
                }
            }
        } catch (e) {
            console.error(e)
        }
    }

    isModified(){
        return this.initial !== this.getDocument();
    }

    newDropZone() {
        let dz = document.createElement('div');
        dz.className = 'dropzone row';
        this.initDz(dz);
        return dz
    }

    initEditor(el) {
        this.removeBySel('.dz-buttons, .template-buttons');
        TextEditor.initTextEditor(el)
    }

    initDz(dropZone) {
        dnd.pushElement(dropZone);
        dropZone.classList.remove('origin');
    }

    removeBySel(sel) {
        this.targetElement.querySelectorAll(sel)
            .forEach(e => e.remove());
    }

    clickOnBlock(el) {
        this.selectedBlock = el;
        blocks.handleClick(el);
    }

    // public api

    getDocument() {
        let pageContent = this.targetElement.querySelector('.page').outerHTML;
        return documentCleaner.clean(pageContent).innerHTML;
    }

    forItext(html){
        return forItextFormatter(html || this.getDocument())
    }

    loadDocument(data) {
        if (!data)
            return;
        this.initial = data;
        let content = this.targetElement.querySelector('.content');
        content.innerHTML = pageStyles + data;
        content.querySelectorAll('.headerBlock, .textBlock, .imgBlock, .tableBlock').forEach(el => {
            el.classList.add('add_editor_here')
            el.classList.add('ck-editor__editable_inline')
        })
        let templates = content.querySelectorAll('.template');
        templates.forEach(tpl => blocks.initTemplate(tpl, '.dropzone'));

        content.querySelectorAll('.page > .template').forEach(block => {
            if(!block.firstChild)return
            this.manageExtraRows(block.firstChild);
            this.markEmptyRows(block.firstChild);
        })

        dnd.pushElement(content.querySelector('.page'));
        pageProperties.initPageProperties(this);
    }

    getPageStyles(){
        return pageStyles;
    }
}

window.PdfEditor = PdfEditor;
},{"../../dependencies/flexboxgrid/flexboxgrid.min.css":3,"../../package.json":17,"./CkEditor5":18,"./ForItextFormatter":19,"./TemplatesFactory":22,"./blocks":24,"./dnd":25,"./documentCleaner":26,"./html-template":27,"./mouseoverButtons":28,"./page-styles":29,"./pageProperties":30,"./pdf-editor.css":31,"./svgOverlay/svgOverlay":34}],22:[function(require,module,exports){
class TemplatesFactory {

    createBlocks() {
        let row = `<div class='dropzone origin row'></div>`;
        return this.createTemplate(row) + this.createTemplate(this.pageBreakBlock());
    }
    
     createTemplate(content, col) {
        return `<div class='template ${col?'col-xs':''}'>${content}</div>`;
    }

     imgBlock() {
        let svg = `<svg preserveAspectRatio='xMidYMid meet' xmlns='http://www.w3.org/2000/svg' 
                            width='100px' height='100px' viewbox='0 0 100 100'>
                          <path stroke='black' fill='none' 
                                d='M10,90v-20l30,-30l15,15l35,-35v70z M5,5h90v90h-90z M30,10a10,10,0,1,0,0.001,0z'></path>
                        </svg>`;
        return `<img draggable="false" class="img" width="100px" height="100px"  src="data:image/svg+xml;base64,${btoa(svg)}" >`;
    }

     textBlock() {
        return `<span>
                    Если у меня много КЦ есть, я имею право носить малиновые штаны, 
                    и передо мной и пацак должен 2 раза приседать, и чатланин ку делать, 
                    и эцилоп меня не имеет права бить по ночам, никогда!
                </span>`
    }

     tableBlock() {
        let t = this.td();
        t += t + t + t;
        t = `<tr>${t}</tr>`;
        t += t + t;
        return `<table style="border: 1.5px solid"><tbody>${t}</tbody></table>`
    }

    td() {
        return `<td style="border: 1.5px solid"></td>`
    }

     headerBlock() {
        return `<p style="text-align:center;"><span class="text-huge"><strong>Заголовок</strong></span></p>`;
    }

     pageBreakBlock() {
        return `<div class="page-break" style="page-break-after: always">разрыв страницы</div>`;
    }

     createElements() {
        return  [
            this.headerBlock,
            this.textBlock,
            this.imgBlock,
            this.tableBlock
        ].map(fn => {
            let content = `<div class="${fn.name} add_editor_here">${fn.call(this)}</div>`;
            return this.createTemplate(content, true)
        }).join('')
    }
}

module.exports = TemplatesFactory;
},{}],23:[function(require,module,exports){
let templates = {

    block_name : `
        <div class="sub-label">Название блока</div>
        <input type="text" id="block_name">
    `,

    block_descr : `
        <div class="sub-label">Описание блока</div>
        <textarea id="block_descr"></textarea>
    `,

    block_no_edit: `
        <br>
        <input id="block_no_edit" type="checkbox">
        <label for="block_no_edit" class="sub-label">Разрешить редактирование</label>
    `,
    block_no_move: `
        <br>
        <input id="block_no_move" type="checkbox">
        <label for="block_no_move" class="sub-label">Разрешить перемещение</label>     
    `,

    block_no_copy: `
        <br>
        <input id="block_no_copy" type="checkbox">
        <label for="block_no_copy"  class="sub-label">Разрешить копирование</label>
    `,
    block_attach_button:`
        <br>
        <br>
        <button>Прикрепить из базы</button>
    `
}

module.exports = {

    htmlTemplate: properties => `
         <div style="padding:  0 10px; color:white; width:100%">
            ${Object.entries(properties.blockProperties).map(propertyBlock).join('')}
        </div>
    `,

};

function propertyBlock(entry) {
    return entry[1] !== false ? templates[entry[0]] : '';
}
},{}],24:[function(require,module,exports){

let  documentCleaner = require("./documentCleaner")
module.exports = {

    pdfEditor: null,

    newBlockNameText: 'Новый блок ',

    propertyKeys: {
        block_name: 'block_name',
        block_descr: 'block_descr',
        block_no_edit: 'block_no_edit',
        block_no_move: 'block_no_move',
        block_no_copy: 'block_no_copy',
    },

    initBlocks(pdfEditor){
        this.pdfEditor = pdfEditor;
        this.initBlockEditors()
    },

    handleClick(el) {
        let pdfEditor = this.pdfEditor;

        if (!pdfEditor.properties.propertiesPage)
            return

        if (!el) return;

        let keys = this.propertyKeys;

        [keys. block_name, keys. block_descr].forEach(key => {
            if (pdfEditor.properties.blockProperties[key])
                pdfEditor.targetElement.querySelector('#'+key).value = el.getAttribute(key)
        });

        [keys. block_no_edit, keys. block_no_move, keys.block_no_copy].forEach(key => {
            if (pdfEditor.properties.blockProperties[key])
                pdfEditor.targetElement.querySelector('#'+key).checked = "true" !== el.getAttribute(key);
        });
    },

    copyBlock(e) {
        e.stopPropagation();
        let tpl = e.target.closest('.template');
        let cloned = tpl.cloneNode(true);

        tpl.parentElement.insertBefore(cloned, tpl);
        tpl.parentElement.insertBefore(tpl, cloned); // stupid hack
        cloned.id = "";
        let name = this.propertyKeys.block_name;
        cloned.setAttribute(name, cloned.getAttribute(name) + ' копия')
        this.initTemplate(cloned, '.dropzone');

        cloned.querySelectorAll('div.add_editor_here').forEach(el =>{
            el.classList.remove('initialized');
            this.pdfEditor.initEditor(el);
        })

        documentCleaner.removeImageWidgetText(cloned);
    },

    initTemplate(el, dropZoneSelector) {
        if (el.querySelector('.dropzone')) {

            if (!el.id)
                el.id = 'block_' + this.rnd() + this.rnd();

            let name = this.propertyKeys.block_name;
            if (!el.getAttribute(name))
                el.setAttribute(name, this.findNextNumber());

            el.addEventListener('click', () => this.pdfEditor.clickOnBlock(el));
            el.querySelectorAll(dropZoneSelector).forEach(dz => this.pdfEditor.initDz(dz));
        } else {
            this.pdfEditor.initEditor(el.querySelector('div.add_editor_here'));
        }
    },

    rnd() {
        return Math.random().toString(36).substring(2);
    },

    findNextNumber() {
        let numbers = [...this.pdfEditor.targetElement .querySelectorAll('.page > .template')].map(el => {
            let name = el.getAttribute(this.propertyKeys.block_name);
            return name && parseInt(name.split(this.newBlockNameText).pop());
        }).filter(n => n);
        let i = 1;
        for (; i < 1e5; i++)
            if (numbers.indexOf(i) === -1)
                break;
        return this.newBlockNameText + i;
    },

    initBlockEditors() {
        let  pdfEditor = this.pdfEditor;
        if (!pdfEditor.properties.propertiesPage)
            return

        Object.values(this.propertyKeys).forEach(function (id) {
            if (pdfEditor.properties.blockProperties[id])
                pdfEditor.targetElement.querySelector('#'+id).oninput = onInput;
        });

        function onInput() {
            if (!pdfEditor.selectedBlock || !pdfEditor.properties.blockProperties[this.id])
                return
            // console.log(self.selectedDropzone)
            pdfEditor.selectedBlock.setAttribute(this.id,
                this.type === 'checkbox' ? !this.checked : this.value
            );
            if (this.id !== 'block_no_edit')
                return;
            pdfEditor.selectedBlock
                .querySelectorAll('.add_editor_here')
                .forEach(el => {
                    if (this.checked)
                        el.setAttribute('contenteditable', true)
                    else
                        el.removeAttribute('contenteditable')
                })
        }
    }
};

},{"./documentCleaner":26}],25:[function(require,module,exports){
require('../../node_modules/dragula/dist/dragula.min.css');
let dragula = require('dragula');
let blocks = require('./blocks');

let drake;
let pdfEditor;
module.exports = {
    initDnD(pdfEditorInstance) {
        pdfEditor = pdfEditorInstance;
        drake = dragula([
            pdfEditor.targetElement.querySelector('#blocks'),
            pdfEditor.targetElement.querySelector('#elements'),
            pdfEditor.targetElement.querySelector('.page')
        ], {
            removeOnSpill: true,
            copy: function (el, source) {
                return source.classList.contains('templates');
            },
            accepts: (el, target) => dropAccepts(el, target),
            moves: function (el, container, handle) {
                return handle.classList.contains('handle') ||
                    container.classList.contains('templates');
            }
        });

        drake.on('drag', e => dragStart(e));
        drake.on('drop', (el, target) => handleDrop(el, target));
    },
    pushElement(element) {
        drake.containers.push(element)
    },
    removeElement(element) {
        drake.containers.splice( drake.containers.indexOf(element), 1 );
    }
};

function dragStart(e){

}

function dropAccepts(el, target) {
    let t = target.classList;
    if (t.contains('templates'))
        return false;
    if (el.querySelector('.dropzone') || el.querySelector('.page-break')) {
        return t.contains('page');
    } else {
        let canEdit = t.contains('dropzone') &&
            target.parentNode.getAttribute('block_no_edit') !== 'true';
        canEdit && pdfEditor.manageHoverState(target.parentNode, true);
        return canEdit;
    }
}


function handleDrop(el, target) {
    if (!target.classList.contains('page')){
        setTimeout(() => {
            pdfEditor.clearNotNeededRows(target);
            pdfEditor.manageExtraRows(target);
            pdfEditor.markEmptyRows(target);
        }, 10);
    }
    pdfEditor.clickOnBlock(pdfEditor.selectedBlock)
    blocks.initTemplate(el, '.origin');
}


},{"../../node_modules/dragula/dist/dragula.min.css":12,"./blocks":24,"dragula":13}],26:[function(require,module,exports){
module.exports = {
    clean: function (pageContent) {
        let tmp = document.createElement('div');
        tmp.innerHTML = pageContent;
        removeElements(tmp);
        cleanClasses(tmp);
        cleanAttributes(tmp);
        removeEmptyClassAttr(tmp);
        removeImageWidgetText(tmp);
        // pullUpFigureTagChildren(tmp)
        // console.log(tmp.innerHTML)
        return tmp;
    },
    removeImageWidgetText
}

function removeEmptyClassAttr(tmp) {
    tmp.querySelectorAll(`[class=""]`)
        .forEach(el => el.removeAttribute('class'));
}

function removeElements(tmp) {
    tmp.querySelectorAll([
        'style',
        '.ck-widget__selection-handle',
        '.ck-widget__resizer',
        '.dz-buttons',
        '.template-buttons',
        '.empty-drop-zone:first-child',
        '.empty-drop-zone:last-child'
    ].join(', ')).forEach(el => el.remove());
}

function cleanClasses(tmp) {
    [
        'initialized',
        'ck-blurred',
        'ck',
        'ck-content',
        'ck-editor__editable',
        'ck-rounded-corners',
        'ck-editor__editable_inline',
        'ck-editor__nested-editable',
        'ck-widget',
        'ck-widget_with-resizer',
        'ck-widget_selected',
        'ck-widget_with-selection-handle',
        'add_editor_here'
    ].forEach(c => tmp.querySelectorAll('.' + c)
        .forEach(el => el.classList.remove(c)));
}

function cleanAttributes(tmp) {
    [
        'aria-label',
        'contenteditable',
        'role',
        'lang',
        'dir',
        'data-cke-filler'
    ].forEach(attr => tmp.querySelectorAll(`[${attr}]`)
        .forEach(el => el.removeAttribute(attr)))
}

function removeImageWidgetText(tmp) {
    tmp.querySelectorAll('p, div')
        .forEach(el => el.innerHTML === 'Виджет изображений' && el.remove());
}

function pullUpFigureTagChildren(tmp) {
    tmp.querySelectorAll('figure')
        .forEach(f => {
            f.parentNode.insertBefore(f.firstChild, f);
            f.remove()
        })

}
},{}],27:[function(require,module,exports){
let tabs = require('./tabs')

module.exports = properties => `

    ${require('./mouseoverButtons').styles(properties)}
    
    ${tabs.styles(properties)}
    
    <div class="pdf-editor wrapper">
    
        <div class="sidePanel bg1">
        
          <div>
                ${tabs.createTeb('structure', 'Структура', true)}
                ${tabs.createTeb('properties', 'Свойства')}
                
                <div class="pdf-editor-tab-content structure">
                    <div class="groupName">Блоки</div>
                    <div id="blocks" class="templates"></div>
                    <div class="groupName">Элементы</div>
                    <div id="elements" class="templates"></div>
                </div>
                
                <div class="pdf-editor-tab-content properties">
                    <div class="groupName">Свойства страницы</div>
                    ${require('./pageProperties').htmlTemplate(properties)}
                    ${properties.propertiesPage ? `
                        <div class="groupName">Свойства блока</div>
                        ${require('./blockProperties').htmlTemplate(properties)}
                    ` : ''}
                </div>
            
            </div> 
        </div>
        
        <div class="content">
            <div class="page container">${require('./page-styles')}</div>
        </div>

        ${require('./svgOverlay/svgOverlay').htmlTemplate(properties)}

    </div>
`;

},{"./blockProperties":23,"./mouseoverButtons":28,"./page-styles":29,"./pageProperties":30,"./svgOverlay/svgOverlay":34,"./tabs":35}],28:[function(require,module,exports){
let Icons = require('./Icons');
let blocks = require('./blocks');

module.exports = {
    manage: function(e, pdfEditor) {
        if (e.target.classList.contains('handle'))
            return;
        elementButtons(e, pdfEditor, blockButtons(e, pdfEditor));
    },
    styles: props => `
        <style>
            .pdf-editor .page .template:hover  .dz-buttons,
            .pdf-editor .page .template:hover  .template-buttons {
                opacity: 1;
            }
           .dz-buttons, .template-buttons {
                z-index: 111;
            } 
            .dz-buttons > div {
                transform: translate(${60+props.buttonsSize}px,0);
                width: 50px;
                user-select: none;
                text-align: right;
                height: 100px;
            }
            .dz-buttons svg, .template-buttons svg{
                pointer-events: none;
            }
            div.dz-buttons {
                margin-left: 700px;
            }
            .dz-buttons, .template-buttons {
                opacity: 0;
                position: relative;
                overflow: visible;
                width: 0px;
                height: 0px;
                line-height:0;
            }
            .template-buttons {
                transform: translate(${-10-props.buttonsSize}px, 0);
            }
            .template-buttons > div {
                width: 40px;
                height: 60px;
            }
        </style>
    `
}

function blockButtons(e, pdfEditor) {
    let size = pdfEditor.properties.buttonsSize
    let closestDz = e.target.closest('.page .template:not(.col-xs)');
    closestDz = closestDz || e.target.cl
    if (closestDz !== pdfEditor.mouseOverDz) {
        pdfEditor.removeBySel('.dz-buttons');
        pdfEditor.mouseOverDz = closestDz;
        if (closestDz) {
            let tb = document.createElement('div');
            tb.classList.add('dz-buttons');

            let canMove = closestDz.getAttribute('block_no_move') !== 'true';
            let canCopy = closestDz.getAttribute('block_no_copy') !== 'true';
            if (e.target.querySelector('.page-break'))
                canCopy = 0;
            tb.innerHTML = `
                    <div>
                        ${canMove ? `<span class='handle'>${Icons.move(size, size)}</span>` : ''}
                        ${canCopy ? `<span class='copy'>${Icons.copy(size, size)}</span>` : ''}
                        ${canMove ? `<span class='del'>${Icons.del(size, size)}</span>` : ''}
                        ${canMove ? `<span class='up'>${Icons.up(size, size)}</span>` : ''}
                        ${canMove ? `<span class='down'>${Icons.down(size, size)}</span>` : ''}
                    </div>
                `;
            closestDz.insertBefore(tb, closestDz.firstChild);

            let copy = tb.querySelector('.copy')
            copy && (copy.onclick = e => blocks.copyBlock(e))

            let del = tb.querySelector('.del')
            del && (del.onclick = e => {
                e.stopPropagation();
                let tpl = e.target.closest('.template');
                tpl.remove();
            });

            let up = tb.querySelector('.up')
            up && (up.onclick = e => {
                e.stopPropagation();
                let tpl = e.target.closest('.template');
                if (tpl.previousSibling && tpl.previousSibling.nodeName.toLowerCase() === "div")
                   tpl.parentNode.insertBefore(tpl, tpl.previousSibling)
            });

            let down = tb.querySelector('.down')
            down && (down.onclick = e => {
                e.stopPropagation();
                let tpl = e.target.closest('.template');
                tpl.parentNode.insertBefore(tpl, tpl.nextSibling.nextSibling)
            });
        }
    }
    return closestDz;
}

function elementButtons(e, pdfEditor, closestDz) {
    let size = pdfEditor.properties.buttonsSize
    let closestTpl = e.target.closest('.page .template.col-xs');
    if (closestTpl !== pdfEditor.mouseOverTpl) {
        pdfEditor.removeBySel('.template-buttons');
        pdfEditor.mouseOverTpl = closestTpl;
        let canEdit = closestDz && closestDz.getAttribute('block_no_edit') !== 'true';
        if (closestTpl && canEdit) {
            let closestTpl1 = e.target.closest('.page .template.col-xs:not(.mce-edit-focus)');
            let tb = document.createElement('div');
            tb.classList.add('template-buttons');
            tb.innerHTML = `
                    <div>
                        <div class='handle'>${Icons.move(size, size)}</div>
                    </div>
                `;
            closestTpl1.insertBefore(tb, closestTpl1.firstChild)
        }
    }
}



},{"./Icons":20,"./blocks":24}],29:[function(require,module,exports){
module.exports = `
<style>
p {
    margin-block-start: 0!important;
    margin-block-end: 0 !important;
}
.page {
    display: inline-block;
    min-height: 1110px;
    width: 100%;
    background: white;
    text-align: left;
    padding: 5px;
}
.template {
    color: black;
    width: 100%;
    padding: 0px;
}
.page > .template:not(:last-child) {
    margin-bottom: 5px;
}
div.dropzone.row {
    min-height: 35px;
    margin: 0;
    transition: 300ms;
}
div.dropzone.row.empty-drop-zone {
     min-height: 0px;
     opacity: 0;
}
div.template.hover-state div.dropzone.row.empty-drop-zone {
     min-height: 25px;
     opacity: 1;
     background-color: #0002;
}
.page .page-break {
    margin-left: -20px;
    margin-right: -20px;
    background: var(--bg-col);
    color: orange;
}
.page-break {
    background: #eee;
    height: 35px;
    pointer-events:none;
    text-align: center;
    line-height: 35px;
}
 .ck-widget__selection-handle {
    display: none;
 }
 .ck-widget_with-selection-handle{
    margin-top: 15px !important;
 }
 .ck-widget__selection-handle .ck.ck-icon {
    opacity: 0;
    pointer-events: none;
 }
 /*.template.col-xs {*/
 /*   padding: 2px!important;*/
 /*}*/
 /*.dropzone > .template {*/
 /*   height: 100%;*/
 /*}*/
 .page table {
    border-collapse: collapse;
 }
 .page table td {
    min-width: 40px;
 }
 
@page {
    margin: 0px;
}

.content .page.container div.add_editor_here{
    overflow: hidden;
    height: 100%;
}
</style>
`.split('\n').join('').split('    ').join('');
},{}],30:[function(require,module,exports){
module.exports = {

    htmlTemplate : function () {
        return `
            <div style="padding: 10px; font-size: 16px; color: #999;font-family: Arial, sans-serif;">
                <span style="color: lightgray">Поля</span>&nbsp;<br>
                ${pad("pdf-editor-page-pad-left", "Слева")}
                ${pad("pdf-editor-page-pad-top", "Сверху")}
                ${pad("pdf-editor-page-pad-right", "Справа")}
                ${pad("pdf-editor-page-pad-bottom", "Снизу")}
            </div>
        `;
    },

    initPageProperties(pdfEditor) {
        this.pdfEditor = pdfEditor;
        let targetElement = this.pdfEditor.targetElement;
        targetElement
            .querySelectorAll('.pdf-editor-page-padding')
            .forEach(input => {
                let page = targetElement.querySelector('.page');
                input.value = page.hasAttribute(input.id) ? page.getAttribute(input.id) : 5;
                input.oninput = () => page.setAttribute(input.id, input.value);
            });
    },
}

function pad(name, title) {
    return `
        <label for="${name}" style="display:inline-block; width:70px">${title}</label>
        <input class="pdf-editor-page-padding" id="${name}" type="number" style="width: 50px"><br>
    `;
}
},{}],31:[function(require,module,exports){
var css = ".pdf-editor.wrapper {\n  display: flex;\n  flex-direction: row;\n  --bg-col: #444;\n}\n.pdf-editor .content {\n  flex-grow: 1;\n  background: var(--bg-col);\n  overflow-y: scroll;\n  padding: 50px 20px;\n  text-align: center;\n}\n.pdf-editor .page {\n  box-shadow: 1px 1px 4px 1px #2226;\n}\n.pdf-editor .sidePanel,\n.pdf-editor .propsPanel {\n  display: flex;\n  width: 360px;\n  /*background: #444;*/\n  flex-direction: column;\n  border-left: 1px solid gray;\n  border-right: 1px solid gray;\n  box-sizing: border-box;\n}\n.pdf-editor .templates {\n  /*flex-grow: 1;*/\n  /*overflow-y: auto;*/\n  /*overflow-x: hidden;*/\n  padding: 10px 25px;\n}\n.pdf-editor .templates .template {\n  margin-bottom: 5px;\n  /*padding:  5px 0;*/\n}\n.pdf-editor .buttons {\n  padding: 5px 5px 0 5px;\n}\n.pdf-editor .buttons button {\n  line-height: 30px;\n  border-radius: 11px;\n}\n.pdf-editor .template {\n  transition: 0.2s;\n}\n.pdf-editor #elements .template {\n  transition: 0.2s;\n  background: #eee;\n}\n.pdf-editor .sidePanel .dropzone {\n  background-color: #eee;\n  min-height: 35px;\n}\n.pdf-editor .sidePanel .template:hover {\n  transform: scale(1.1);\n  cursor: move;\n}\n.dropzone {\n  background-color: #0001;\n  /*border: 1px solid #0003;*/\n}\n/*div.dropzone.row:first-child,*/\n/*div.dropzone.row:last-child {*/\n/*    min-height: 0;*/\n/*}*/\n.handle {\n  cursor: move;\n}\n.copy {\n  cursor: pointer;\n}\n.handle,\n.copy,\n.del,\n.up,\n.down {\n  background-color: rgba(254, 177, 62, 0.4);\n  display: inline-block;\n  border-radius: 15%;\n  transition: 0.2s;\n  margin: 2px;\n}\n.handle:hover,\n.copy:hover,\n.del:hover,\n.up:hover,\n.down:hover {\n  background-color: rgba(254, 177, 62, 0.8);\n  /*background-color: rgb(187, 135, 64);*/\n}\n.dz-buttons,\n.template-buttons {\n  opacity: 0;\n  position: relative;\n  overflow: visible;\n  width: 0px;\n  height: 0px;\n  line-height: 0;\n}\n.template-buttons {\n  transform: translate(-40px, 0);\n}\n.template-buttons > div {\n  width: 40px;\n  height: 60px;\n  /*background: rebeccapurple;*/\n}\ndiv.dz-buttons {\n  margin-left: 700px;\n}\n.svg-overlay {\n  position: fixed;\n  top: 0;\n  left: 0;\n  pointer-events: none;\n}\ntable td {\n  min-width: 50px;\n  height: 20px;\n  border: 1px solid black;\n}\n.tableBlock {\n  padding-top: 3px;\n  padding-bottom: 3px;\n}\n.sub-label {\n  font-size: 16px;\n  color: #999;\n  font-family: Arial, sans-serif;\n}\n.sub-label:first-child {\n  padding-top: 5px;\n}\n.sidePanel #elements > div.template {\n  box-shadow: 0 0 0 1px gray;\n  text-align: center;\n}\n.sidePanel #elements  > div.template {\n  text-align: center;\n}\n.sidePanel #elements  table {\n  margin-top: 5px;\n  margin-bottom: 5px;\n}\n.sidePanel #elements  img {\n  margin-bottom: -4px;\n}\ndiv.template  table {\n  border-collapse: collapse;\n}\n.sidePanel textarea {\n  width: 333px;\n  height: 84px;\n}\n.sidePanel button,\n.sidePanel input[type=\"text\"] {\n  height: 28px;\n  width: 337px;\n}\n/*.sidePanel button {*/\n/*    outline: none;*/\n/*    padding-top: 5px;*/\n/*    border-radius: 5px;*/\n/*    border: 1px solid orange;*/\n/*    background: #444;*/\n/*    color: white;*/\n/*}*/\n.sidePanel textarea,\n.sidePanel input[type=\"text\"] {\n  border-radius: 4px;\n  background: #444;\n  color: white;\n  border: 1px solid #999;\n  margin-bottom: 5px;\n}\n.groupName {\n  width: 360px;\n  padding-left: 15px;\n  border-top: 1px solid gray;\n  border-bottom: 1px solid gray;\n  /*text-align: center;*/\n  font-size: 20px;\n  line-height: 30px;\n  font-family: Arial, sans-serif;\n  color: #999;\n  box-sizing: border-box;\n  cursor: pointer;\n}\n.groupName + div {\n  transition: 300ms;\n  max-height: 100vh;\n  overflow: hidden;\n}\n.groupName.collapsed + div {\n  max-height: 0;\n  min-height: 0 !important;\n  padding-top: 0;\n  padding-bottom: 0;\n  overflow: hidden;\n}\n.groupName:after {\n  content: url(\"data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='30' height='30'><circle fill='%23777' cx='15' cy='15' r='10' /><polyline stroke-width='3' points='10 13 15 18 20 13' fill='none' stroke='%23444'/></svg>\");\n  transition: 300ms;\n  float: right;\n  margin-right: 10px;\n  display: inline-block;\n  line-height: 0px;\n}\n.groupName.collapsed:after {\n  transform: rotate(90deg) scale(-1,-1);\n}\n.sidePanel table {\n  /*padding: 5px;*/\n  margin-left: 40px;\n}\n.sidePanel tr:nth-child(2) td:nth-child(3) {\n  background: lightgray;\n}\n.pdf-editor .page {\n  width: 800px;\n}\n"; (require("browserify-css").createStyle(css, { "href": "src\\pdf-editor\\pdf-editor.css" }, { "insertAt": "bottom" })); module.exports = css;
},{"browserify-css":5}],32:[function(require,module,exports){
module.exports = {

    htmlTemplate: properties => `
         <path fill="none" stroke="#ff6e1b"></path>
    `,

    initComponent(parentComponent) {
        this.blockSelectionFrame = parentComponent.querySelector('path');
    },

    updateComponent(pdfEditor) {
        if (!pdfEditor.selectedBlock)
            return this.blockSelectionFrame.removeAttribute('d');
        let r = pdfEditor.selectedBlock.getBoundingClientRect();
        this.blockSelectionFrame.setAttribute('d',`M${r.x},${r.y}h${r.width}v${r.height+2}h-${r.width}z`)
    }
}
},{}],33:[function(require,module,exports){
let blocks = require('../blocks');

module.exports = {

    htmlTemplate(properties) {
        return (this.enabled = properties.floatingBlockName) ? `
            <g>
                <rect y="-30" rx="5" height="25" fill="rgb(187, 135, 64)"></rect>
                <text y="-10" x="10"></text>
            </g>
        ` : '';
    },

    initComponent(parentComponent) {
        if (!this.enabled)
            return
        this.blockNameGroup = parentComponent.querySelector('.svg-overlay g g');
        this.blockNameBg = parentComponent.querySelector('.svg-overlay g g rect');
        this.blockNameText = parentComponent.querySelector('.svg-overlay g g text');
    },

    updateComponent(pdfEditor) {
        if (!this.enabled)
            return
        let selectedBlock = pdfEditor.selectedBlock;
        if (!selectedBlock)
            return this.blockNameGroup.setAttribute(`transform`, `translate(0,-1000)`);
        let r = selectedBlock.getBoundingClientRect();
        this.blockNameGroup.setAttribute(`transform`, `translate(${r.x},${r.y})`);
        this.blockNameText.textContent = selectedBlock.getAttribute(blocks.propertyKeys.block_name);
        r = this.blockNameText.getBoundingClientRect();
        this.blockNameBg.setAttribute('width', r.width + 20);
    }
}
},{"../blocks":24}],34:[function(require,module,exports){
let floatingBlockName = require('./floatingBlockName');
let blockSelection = require('./blockSelection');

module.exports = {

    htmlTemplate: properties => `
        <svg class="svg-overlay">
            <defs>
                <clipPath id="editor_clip_rect">
                    <polygon></polygon>
                </clipPath>
            </defs>
            <g clip-path="url(#editor_clip_rect)">
                ${blockSelection.htmlTemplate(properties)}
                ${floatingBlockName.htmlTemplate(properties)}
            </g>
        </svg>
    `,

    initSvgOverlay: function (pdfEditor) {
        this.pdfEditor = pdfEditor;
        this.overlay = pdfEditor.targetElement.querySelector('.svg-overlay');
        this.overlayClipPolygon = this.overlay.querySelector('#editor_clip_rect polygon');
        blockSelection.initComponent(this.overlay);
        floatingBlockName.initComponent(this.overlay);
        this.updateComponent(this.pdfEditor);
    },

    updateComponent(pdfEditor) {

        requestAnimationFrame(() => this.updateComponent(pdfEditor));

        if (!this.pdfEditor .targetElement.querySelector('.pdf-editor .content'))
            return;

        this.overlay.setAttribute('viewBox',`0 0 ${innerWidth} ${innerHeight}`);
        this.overlay.setAttribute('width', innerWidth);
        this.overlay.setAttribute('height', innerHeight);

        let r = this.pdfEditor.targetElement .querySelector('.pdf-editor .content').getBoundingClientRect();
        let scrollWidth = 17;
        let pts = [
            r.x, r.y,
            r.x + r.width - scrollWidth, r.y,
            r.x + r.width - scrollWidth, r.y + r.height,
            r.x, r.y + r.height
        ];
        this.overlayClipPolygon.setAttribute('points', pts.join(' '));

        blockSelection.updateComponent(this.pdfEditor)
        floatingBlockName.updateComponent(this.pdfEditor)
    }

}
},{"./blockSelection":32,"./floatingBlockName":33}],35:[function(require,module,exports){
module.exports = {
    styles: function () {
        return `
            <style>
                .pdf-editor-tab {
                    color: lightgray;
                    display: table-cell;
                    max-width: 100px;
                    padding: 5px;

                    cursor: pointer;
                    
                }
                .pdf-editor-tab-content {
                    display: none;
                }
                 #structure:checked + .pdf-editor-tab, 
                 #properties:checked + .pdf-editor-tab{
                    color: white;
                    cursor: default;
                    background: #fff5;
                 }
                 #structure:checked ~ .structure,
                 #properties:checked ~ .properties {
                    display: inline-block !important;
                 }
            </style>
        `
    },

    createTeb: function (name, title, checked) {
        return `
            <input id="${name}" 
                    type="radio" 
                    name="pdf-editor-tabs" 
                    style="display: none" ${checked?'checked="true"':''} >
            <label class="pdf-editor-tab" for="${name}">${title}</label>
        `
    }
}
},{}]},{},[21])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJkZXBlbmRlbmNpZXMvY2tlZGl0b3IvY2tlZGl0b3ItYmFsb29uL2J1aWxkL2NrZWRpdG9yLmpzIiwiZGVwZW5kZW5jaWVzL2NrZWRpdG9yL3J1LmpzIiwiZGVwZW5kZW5jaWVzL2ZsZXhib3hncmlkL2ZsZXhib3hncmlkLm1pbi5jc3MiLCJub2RlX21vZHVsZXMvYXRvYS9hdG9hLmpzIiwibm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnktY3NzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvY29udHJhL2RlYm91bmNlLmpzIiwibm9kZV9tb2R1bGVzL2NvbnRyYS9lbWl0dGVyLmpzIiwibm9kZV9tb2R1bGVzL2Nyb3NzdmVudC9zcmMvY3Jvc3N2ZW50LmpzIiwibm9kZV9tb2R1bGVzL2Nyb3NzdmVudC9zcmMvZXZlbnRtYXAuanMiLCJub2RlX21vZHVsZXMvY3VzdG9tLWV2ZW50L2luZGV4LmpzIiwibm9kZV9tb2R1bGVzL2RyYWd1bGEvY2xhc3Nlcy5qcyIsIm5vZGVfbW9kdWxlcy9kcmFndWxhL2Rpc3QvZHJhZ3VsYS5taW4uY3NzIiwibm9kZV9tb2R1bGVzL2RyYWd1bGEvZHJhZ3VsYS5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvdGlja3kvdGlja3ktYnJvd3Nlci5qcyIsIm5vZGVfbW9kdWxlcy90aW1lcnMtYnJvd3NlcmlmeS9tYWluLmpzIiwicGFja2FnZS5qc29uIiwic3JjL3BkZi1lZGl0b3IvQ2tFZGl0b3I1LmpzIiwic3JjL3BkZi1lZGl0b3IvRm9ySXRleHRGb3JtYXR0ZXIuanMiLCJzcmMvcGRmLWVkaXRvci9JY29ucy5qcyIsInNyYy9wZGYtZWRpdG9yL1BkZkVkaXRvci5qcyIsInNyYy9wZGYtZWRpdG9yL1RlbXBsYXRlc0ZhY3RvcnkuanMiLCJzcmMvcGRmLWVkaXRvci9ibG9ja1Byb3BlcnRpZXMuanMiLCJzcmMvcGRmLWVkaXRvci9ibG9ja3MuanMiLCJzcmMvcGRmLWVkaXRvci9kbmQuanMiLCJzcmMvcGRmLWVkaXRvci9kb2N1bWVudENsZWFuZXIuanMiLCJzcmMvcGRmLWVkaXRvci9odG1sLXRlbXBsYXRlLmpzIiwic3JjL3BkZi1lZGl0b3IvbW91c2VvdmVyQnV0dG9ucy5qcyIsInNyYy9wZGYtZWRpdG9yL3BhZ2Utc3R5bGVzLmpzIiwic3JjL3BkZi1lZGl0b3IvcGFnZVByb3BlcnRpZXMuanMiLCJzcmMvcGRmLWVkaXRvci9wZGYtZWRpdG9yLmNzcyIsInNyYy9wZGYtZWRpdG9yL3N2Z092ZXJsYXkvYmxvY2tTZWxlY3Rpb24uanMiLCJzcmMvcGRmLWVkaXRvci9zdmdPdmVybGF5L2Zsb2F0aW5nQmxvY2tOYW1lLmpzIiwic3JjL3BkZi1lZGl0b3Ivc3ZnT3ZlcmxheS9zdmdPdmVybGF5LmpzIiwic3JjL3BkZi1lZGl0b3IvdGFicy5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQ0FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3p4a0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDN1lBOztBQ0FBO0FBQ0E7O0FDREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDVkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3REQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDckdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDYkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNoREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBOzs7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7QUNobUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3hMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQ1BBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7O0FDM0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ3RGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDbkRBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzdEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDL0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM3SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNuRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUM1RUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMzQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUMvSEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQ0E7O0FDQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNoQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FDakNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNyREE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbigpe2Z1bmN0aW9uIHIoZSxuLHQpe2Z1bmN0aW9uIG8oaSxmKXtpZighbltpXSl7aWYoIWVbaV0pe3ZhciBjPVwiZnVuY3Rpb25cIj09dHlwZW9mIHJlcXVpcmUmJnJlcXVpcmU7aWYoIWYmJmMpcmV0dXJuIGMoaSwhMCk7aWYodSlyZXR1cm4gdShpLCEwKTt2YXIgYT1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK2krXCInXCIpO3Rocm93IGEuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixhfXZhciBwPW5baV09e2V4cG9ydHM6e319O2VbaV1bMF0uY2FsbChwLmV4cG9ydHMsZnVuY3Rpb24ocil7dmFyIG49ZVtpXVsxXVtyXTtyZXR1cm4gbyhufHxyKX0scCxwLmV4cG9ydHMscixlLG4sdCl9cmV0dXJuIG5baV0uZXhwb3J0c31mb3IodmFyIHU9XCJmdW5jdGlvblwiPT10eXBlb2YgcmVxdWlyZSYmcmVxdWlyZSxpPTA7aTx0Lmxlbmd0aDtpKyspbyh0W2ldKTtyZXR1cm4gb31yZXR1cm4gcn0pKCkiLCIvKiFcclxuICogQGxpY2Vuc2UgQ29weXJpZ2h0IChjKSAyMDAzLTIwMjAsIENLU291cmNlIC0gRnJlZGVyaWNvIEtuYWJiZW4uIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqIEZvciBsaWNlbnNpbmcsIHNlZSBMSUNFTlNFLm1kLlxyXG4gKi9cclxuXHJcblxyXG4oZnVuY3Rpb24gKHQpIHtcclxuICAgIHRbXCJydVwiXSA9IE9iamVjdC5hc3NpZ24odFtcInJ1XCJdIHx8IHt9LCByZXF1aXJlKCcuLi8uLi9ydScpKVxyXG59KSh3aW5kb3cuQ0tFRElUT1JfVFJBTlNMQVRJT05TIHx8ICh3aW5kb3cuQ0tFRElUT1JfVFJBTlNMQVRJT05TID0ge30pKTtcclxuKGZ1bmN0aW9uIHQoZSwgaSkge1xyXG4gICAgaWYgKHR5cGVvZiBleHBvcnRzID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIpIG1vZHVsZS5leHBvcnRzID0gaSgpOyBlbHNlIGlmICh0eXBlb2YgZGVmaW5lID09PSBcImZ1bmN0aW9uXCIgJiYgZGVmaW5lLmFtZCkgZGVmaW5lKFtdLCBpKTsgZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09IFwib2JqZWN0XCIpIGV4cG9ydHNbXCJCYWxsb29uRWRpdG9yXCJdID0gaSgpOyBlbHNlIGVbXCJCYWxsb29uRWRpdG9yXCJdID0gaSgpXHJcbn0pKHdpbmRvdywgKGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgIHZhciBlID0ge307XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGkobikge1xyXG4gICAgICAgICAgICBpZiAoZVtuXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVbbl0uZXhwb3J0c1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBvID0gZVtuXSA9IHtpOiBuLCBsOiBmYWxzZSwgZXhwb3J0czoge319O1xyXG4gICAgICAgICAgICB0W25dLmNhbGwoby5leHBvcnRzLCBvLCBvLmV4cG9ydHMsIGkpO1xyXG4gICAgICAgICAgICBvLmwgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gby5leHBvcnRzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpLm0gPSB0O1xyXG4gICAgICAgIGkuYyA9IGU7XHJcbiAgICAgICAgaS5kID0gZnVuY3Rpb24gKHQsIGUsIG4pIHtcclxuICAgICAgICAgICAgaWYgKCFpLm8odCwgZSkpIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBlLCB7ZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBufSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaS5yID0gZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgU3ltYm9sLnRvU3RyaW5nVGFnLCB7dmFsdWU6IFwiTW9kdWxlXCJ9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBcIl9fZXNNb2R1bGVcIiwge3ZhbHVlOiB0cnVlfSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIGkudCA9IGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgICAgIGlmIChlICYgMSkgdCA9IGkodCk7XHJcbiAgICAgICAgICAgIGlmIChlICYgOCkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIGlmIChlICYgNCAmJiB0eXBlb2YgdCA9PT0gXCJvYmplY3RcIiAmJiB0ICYmIHQuX19lc01vZHVsZSkgcmV0dXJuIHQ7XHJcbiAgICAgICAgICAgIHZhciBuID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgICAgICAgICAgaS5yKG4pO1xyXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobiwgXCJkZWZhdWx0XCIsIHtlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdH0pO1xyXG4gICAgICAgICAgICBpZiAoZSAmIDIgJiYgdHlwZW9mIHQgIT0gXCJzdHJpbmdcIikgZm9yICh2YXIgbyBpbiB0KSBpLmQobiwgbywgZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0W2VdXHJcbiAgICAgICAgICAgIH0uYmluZChudWxsLCBvKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpLm4gPSBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IHQgJiYgdC5fX2VzTW9kdWxlID8gZnVuY3Rpb24gZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0W1wiZGVmYXVsdFwiXVxyXG4gICAgICAgICAgICB9IDogZnVuY3Rpb24gZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGkuZChlLCBcImFcIiwgZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpLm8gPSBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHQsIGUpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpLnAgPSBcIlwiO1xyXG4gICAgICAgIHJldHVybiBpKGkucyA9IDExNClcclxuICAgIH0oW2Z1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgaS5kKGUsIFwiYlwiLCAoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgIH0pKTtcclxuICAgICAgICBpLmQoZSwgXCJhXCIsIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIGNvbnN0IG4gPSBcImh0dHBzOi8vY2tlZGl0b3IuY29tL2RvY3MvY2tlZGl0b3I1L2xhdGVzdC9mcmFtZXdvcmsvZ3VpZGVzL3N1cHBvcnQvZXJyb3ItY29kZXMuaHRtbFwiO1xyXG5cclxuICAgICAgICBjbGFzcyBvIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICB0ID0gcih0KTtcclxuICAgICAgICAgICAgICAgIGlmIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdCArPSBcIiBcIiArIEpTT04uc3RyaW5naWZ5KGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IFwiQ0tFZGl0b3JFcnJvclwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0ID0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IGlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXModCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPT09IFwiQ0tFZGl0b3JFcnJvclwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyByZXRocm93VW5leHBlY3RlZEVycm9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0LmlzICYmIHQuaXMoXCJDS0VkaXRvckVycm9yXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBvKHQubWVzc2FnZSwgZSk7XHJcbiAgICAgICAgICAgICAgICBpLnN0YWNrID0gdC5zdGFjaztcclxuICAgICAgICAgICAgICAgIHRocm93IGlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcih0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm1hdGNoKC9eKFteOl0rKTovKTtcclxuICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0ICsgYCBSZWFkIG1vcmU6ICR7bn0jZXJyb3ItJHtlWzFdfVxcbmBcclxuICAgICAgICB9XHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIHZhciBuID0gZnVuY3Rpb24gdCgpIHtcclxuICAgICAgICAgICAgdmFyIGU7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiB0KCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSgpO1xyXG4gICAgICAgIHZhciBvID0gZnVuY3Rpb24gdCgpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSB7fTtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHQoaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBlW2ldID09PSBcInVuZGVmaW5lZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG4gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgbiBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IG4uY29udGVudERvY3VtZW50LmhlYWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlW2ldID0gblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVbaV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0oKTtcclxuICAgICAgICB2YXIgciA9IFtdO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzKHQpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSAtMTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocltpXS5pZGVudGlmaWVyID09PSB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYSh0LCBlKSB7XHJcbiAgICAgICAgICAgIHZhciBpID0ge307XHJcbiAgICAgICAgICAgIHZhciBuID0gW107XHJcbiAgICAgICAgICAgIGZvciAodmFyIG8gPSAwOyBvIDwgdC5sZW5ndGg7IG8rKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0W29dO1xyXG4gICAgICAgICAgICAgICAgdmFyIGMgPSBlLmJhc2UgPyBhWzBdICsgZS5iYXNlIDogYVswXTtcclxuICAgICAgICAgICAgICAgIHZhciBsID0gaVtjXSB8fCAwO1xyXG4gICAgICAgICAgICAgICAgdmFyIGQgPSBcIlwiLmNvbmNhdChjLCBcIiBcIikuY29uY2F0KGwpO1xyXG4gICAgICAgICAgICAgICAgaVtjXSA9IGwgKyAxO1xyXG4gICAgICAgICAgICAgICAgdmFyIHUgPSBzKGQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGggPSB7Y3NzOiBhWzFdLCBtZWRpYTogYVsyXSwgc291cmNlTWFwOiBhWzNdfTtcclxuICAgICAgICAgICAgICAgIGlmICh1ICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJbdV0ucmVmZXJlbmNlcysrO1xyXG4gICAgICAgICAgICAgICAgICAgIHJbdV0udXBkYXRlcihoKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByLnB1c2goe2lkZW50aWZpZXI6IGQsIHVwZGF0ZXI6IG0oaCwgZSksIHJlZmVyZW5jZXM6IDF9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbi5wdXNoKGQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGModCkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcclxuICAgICAgICAgICAgdmFyIG4gPSB0LmF0dHJpYnV0ZXMgfHwge307XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygbi5ub25jZSA9PT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHIgPSB0cnVlID8gaS5uYyA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIGlmIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5ub25jZSA9IHJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBPYmplY3Qua2V5cyhuKS5mb3JFYWNoKChmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgZS5zZXRBdHRyaWJ1dGUodCwgblt0XSlcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQuaW5zZXJ0ID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHQuaW5zZXJ0KGUpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcyA9IG8odC5pbnNlcnQgfHwgXCJoZWFkXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcy5hcHBlbmRDaGlsZChlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBsKHQpIHtcclxuICAgICAgICAgICAgaWYgKHQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZCA9IGZ1bmN0aW9uIHQoKSB7XHJcbiAgICAgICAgICAgIHZhciBlID0gW107XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiB0KGksIG4pIHtcclxuICAgICAgICAgICAgICAgIGVbaV0gPSBuO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCJcXG5cIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0oKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdSh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIHZhciBvID0gaSA/IFwiXCIgOiBuLm1lZGlhID8gXCJAbWVkaWEgXCIuY29uY2F0KG4ubWVkaWEsIFwiIHtcIikuY29uY2F0KG4uY3NzLCBcIn1cIikgOiBuLmNzcztcclxuICAgICAgICAgICAgaWYgKHQuc3R5bGVTaGVldCkge1xyXG4gICAgICAgICAgICAgICAgdC5zdHlsZVNoZWV0LmNzc1RleHQgPSBkKGUsIG8pXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgciA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG8pO1xyXG4gICAgICAgICAgICAgICAgdmFyIHMgPSB0LmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBpZiAoc1tlXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQucmVtb3ZlQ2hpbGQoc1tlXSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuaW5zZXJ0QmVmb3JlKHIsIHNbZV0pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuYXBwZW5kQ2hpbGQocilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIHZhciBuID0gaS5jc3M7XHJcbiAgICAgICAgICAgIHZhciBvID0gaS5tZWRpYTtcclxuICAgICAgICAgICAgdmFyIHIgPSBpLnNvdXJjZU1hcDtcclxuICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbylcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHQucmVtb3ZlQXR0cmlidXRlKFwibWVkaWFcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAociAmJiBidG9hKSB7XHJcbiAgICAgICAgICAgICAgICBuICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkocikpKSksIFwiICovXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQuc3R5bGVTaGVldCkge1xyXG4gICAgICAgICAgICAgICAgdC5zdHlsZVNoZWV0LmNzc1RleHQgPSBuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodC5maXJzdENoaWxkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmVDaGlsZCh0LmZpcnN0Q2hpbGQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKG4pKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZiA9IG51bGw7XHJcbiAgICAgICAgdmFyIGcgPSAwO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBtKHQsIGUpIHtcclxuICAgICAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgICAgIHZhciBuO1xyXG4gICAgICAgICAgICB2YXIgbztcclxuICAgICAgICAgICAgaWYgKGUuc2luZ2xldG9uKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgciA9IGcrKztcclxuICAgICAgICAgICAgICAgIGkgPSBmIHx8IChmID0gYyhlKSk7XHJcbiAgICAgICAgICAgICAgICBuID0gdS5iaW5kKG51bGwsIGksIHIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIG8gPSB1LmJpbmQobnVsbCwgaSwgciwgdHJ1ZSlcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGkgPSBjKGUpO1xyXG4gICAgICAgICAgICAgICAgbiA9IGguYmluZChudWxsLCBpLCBlKTtcclxuICAgICAgICAgICAgICAgIG8gPSBmdW5jdGlvbiB0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGwoaSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBuKHQpO1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gZShpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpLmNzcyA9PT0gdC5jc3MgJiYgaS5tZWRpYSA9PT0gdC5tZWRpYSAmJiBpLnNvdXJjZU1hcCA9PT0gdC5zb3VyY2VNYXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG4odCA9IGkpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG8oKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0LmV4cG9ydHMgPSBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgICAgICBlID0gZSB8fCB7fTtcclxuICAgICAgICAgICAgaWYgKCFlLnNpbmdsZXRvbiAmJiB0eXBlb2YgZS5zaW5nbGV0b24gIT09IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgICAgICBlLnNpbmdsZXRvbiA9IG4oKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQgPSB0IHx8IFtdO1xyXG4gICAgICAgICAgICB2YXIgaSA9IGEodCwgZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiB0KG4pIHtcclxuICAgICAgICAgICAgICAgIG4gPSBuIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChuKSAhPT0gXCJbb2JqZWN0IEFycmF5XVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBvID0gMDsgbyA8IGkubGVuZ3RoOyBvKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IGlbb107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSBzKGMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJbbF0ucmVmZXJlbmNlcy0tXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZCA9IGEobiwgZSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB1ID0gMDsgdSA8IGkubGVuZ3RoOyB1KyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaCA9IGlbdV07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGYgPSBzKGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyW2ZdLnJlZmVyZW5jZXMgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcltmXS51cGRhdGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuc3BsaWNlKGYsIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaSA9IGRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sICwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICBcInVzZSBzdHJpY3RcIjtcclxuICAgICAgICB2YXIgbiA9IGkoNyk7XHJcbiAgICAgICAgdmFyIG8gPSB0eXBlb2Ygc2VsZiA9PSBcIm9iamVjdFwiICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xyXG4gICAgICAgIHZhciByID0gbltcImFcIl0gfHwgbyB8fCBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XHJcbiAgICAgICAgZVtcImFcIl0gPSByXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIChmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICB2YXIgbiA9IGkoMyk7XHJcbiAgICAgICAgICAgIHZhciBvID0gaSgxNCk7XHJcbiAgICAgICAgICAgIHZhciByID0gdHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIiAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XHJcbiAgICAgICAgICAgIHZhciBzID0gciAmJiB0eXBlb2YgdCA9PSBcIm9iamVjdFwiICYmIHQgJiYgIXQubm9kZVR5cGUgJiYgdDtcclxuICAgICAgICAgICAgdmFyIGEgPSBzICYmIHMuZXhwb3J0cyA9PT0gcjtcclxuICAgICAgICAgICAgdmFyIGMgPSBhID8gbltcImFcIl0uQnVmZmVyIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB2YXIgbCA9IGMgPyBjLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB2YXIgZCA9IGwgfHwgb1tcImFcIl07XHJcbiAgICAgICAgICAgIGVbXCJhXCJdID0gZFxyXG4gICAgICAgIH0pLmNhbGwodGhpcywgaSg5KSh0KSlcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgKGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgIHZhciBuID0gaSg3KTtcclxuICAgICAgICAgICAgdmFyIG8gPSB0eXBlb2YgZXhwb3J0cyA9PSBcIm9iamVjdFwiICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcclxuICAgICAgICAgICAgdmFyIHIgPSBvICYmIHR5cGVvZiB0ID09IFwib2JqZWN0XCIgJiYgdCAmJiAhdC5ub2RlVHlwZSAmJiB0O1xyXG4gICAgICAgICAgICB2YXIgcyA9IHIgJiYgci5leHBvcnRzID09PSBvO1xyXG4gICAgICAgICAgICB2YXIgYSA9IHMgJiYgbltcImFcIl0ucHJvY2VzcztcclxuICAgICAgICAgICAgdmFyIGMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gciAmJiByLnJlcXVpcmUgJiYgci5yZXF1aXJlKFwidXRpbFwiKS50eXBlcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYSAmJiBhLmJpbmRpbmcgJiYgYS5iaW5kaW5nKFwidXRpbFwiKVxyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAodCkge1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KCk7XHJcbiAgICAgICAgICAgIGVbXCJhXCJdID0gY1xyXG4gICAgICAgIH0pLmNhbGwodGhpcywgaSg5KSh0KSlcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgKGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgIHZhciBlID0gaSgwKTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IFwiMTguMC4wXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSB0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiID8gd2luZG93IDogdDtcclxuICAgICAgICAgICAgaWYgKG8uQ0tFRElUT1JfVkVSU0lPTikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IGVbXCJiXCJdKFwiY2tlZGl0b3ItZHVwbGljYXRlZC1tb2R1bGVzOiBTb21lIENLRWRpdG9yIDUgbW9kdWxlcyBhcmUgZHVwbGljYXRlZC5cIiwgbnVsbClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG8uQ0tFRElUT1JfVkVSU0lPTiA9IG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pLmNhbGwodGhpcywgaSgxMCkpXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIChmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICB2YXIgaSA9IHR5cGVvZiB0ID09IFwib2JqZWN0XCIgJiYgdCAmJiB0Lk9iamVjdCA9PT0gT2JqZWN0ICYmIHQ7XHJcbiAgICAgICAgICAgIGVbXCJhXCJdID0gaVxyXG4gICAgICAgIH0pLmNhbGwodGhpcywgaSgxMCkpXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG4gICAgICAgIChmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICB2YXIgbiA9IGkoMyk7XHJcbiAgICAgICAgICAgIHZhciBvID0gdHlwZW9mIGV4cG9ydHMgPT0gXCJvYmplY3RcIiAmJiBleHBvcnRzICYmICFleHBvcnRzLm5vZGVUeXBlICYmIGV4cG9ydHM7XHJcbiAgICAgICAgICAgIHZhciByID0gbyAmJiB0eXBlb2YgdCA9PSBcIm9iamVjdFwiICYmIHQgJiYgIXQubm9kZVR5cGUgJiYgdDtcclxuICAgICAgICAgICAgdmFyIHMgPSByICYmIHIuZXhwb3J0cyA9PT0gbztcclxuICAgICAgICAgICAgdmFyIGEgPSBzID8gbltcImFcIl0uQnVmZmVyIDogdW5kZWZpbmVkLCBjID0gYSA/IGEuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBsKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuc2xpY2UoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGkgPSB0Lmxlbmd0aCwgbiA9IGMgPyBjKGkpIDogbmV3IHQuY29uc3RydWN0b3IoaSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvcHkobik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlW1wiYVwiXSA9IGxcclxuICAgICAgICB9KS5jYWxsKHRoaXMsIGkoOSkodCkpXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgIGlmICghdC53ZWJwYWNrUG9seWZpbGwpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlID0gT2JqZWN0LmNyZWF0ZSh0KTtcclxuICAgICAgICAgICAgICAgIGlmICghZS5jaGlsZHJlbikgZS5jaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwibG9hZGVkXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUubFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIFwiaWRcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgXCJleHBvcnRzXCIsIHtlbnVtZXJhYmxlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICBlLndlYnBhY2tQb2x5ZmlsbCA9IDFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgIH1cclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdmFyIGk7XHJcbiAgICAgICAgaSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICB9KCk7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaSA9IGkgfHwgbmV3IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKVxyXG4gICAgICAgIH0gY2F0Y2ggKHQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cgPT09IFwib2JqZWN0XCIpIGkgPSB3aW5kb3dcclxuICAgICAgICB9XHJcbiAgICAgICAgdC5leHBvcnRzID0gaVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDU1KTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDEwOCk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSgxMDkpO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBuKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGVbXCJhXCJdID0gblxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDE2KTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay1oaWRkZW57ZGlzcGxheTpub25lIWltcG9ydGFudH0uY2suY2stcmVzZXQsLmNrLmNrLXJlc2V0X2FsbCwuY2suY2stcmVzZXRfYWxsICp7Ym94LXNpemluZzpib3JkZXItYm94O3dpZHRoOmF1dG87aGVpZ2h0OmF1dG87cG9zaXRpb246c3RhdGljfTpyb290ey0tY2stei1kZWZhdWx0OjE7LS1jay16LW1vZGFsOmNhbGModmFyKC0tY2stei1kZWZhdWx0KSArIDk5OSk7LS1jay1jb2xvci1iYXNlLWZvcmVncm91bmQ6I2ZhZmFmYTstLWNrLWNvbG9yLWJhc2UtYmFja2dyb3VuZDojZmZmOy0tY2stY29sb3ItYmFzZS1ib3JkZXI6I2M0YzRjNDstLWNrLWNvbG9yLWJhc2UtYWN0aW9uOiM2MWIwNDU7LS1jay1jb2xvci1iYXNlLWZvY3VzOiM2Y2I1Zjk7LS1jay1jb2xvci1iYXNlLXRleHQ6IzMzMzstLWNrLWNvbG9yLWJhc2UtYWN0aXZlOiMxOThjZjA7LS1jay1jb2xvci1iYXNlLWFjdGl2ZS1mb2N1czojMGU3ZmUxOy0tY2stY29sb3ItYmFzZS1lcnJvcjojZGIzNzAwOy0tY2stY29sb3ItZm9jdXMtYm9yZGVyOiMxZjg5ZTU7LS1jay1jb2xvci1mb2N1cy1vdXRlci1zaGFkb3c6I2JjZGVmYjstLWNrLWNvbG9yLWZvY3VzLWRpc2FibGVkLXNoYWRvdzpyZ2JhKDExOSwxODYsMjQ4LDAuMyk7LS1jay1jb2xvci1mb2N1cy1lcnJvci1zaGFkb3c6cmdiYSgyNTUsNjQsMzEsMC4zKTstLWNrLWNvbG9yLXRleHQ6dmFyKC0tY2stY29sb3ItYmFzZS10ZXh0KTstLWNrLWNvbG9yLXNoYWRvdy1kcm9wOnJnYmEoMCwwLDAsMC4xNSk7LS1jay1jb2xvci1zaGFkb3ctZHJvcC1hY3RpdmU6cmdiYSgwLDAsMCwwLjIpOy0tY2stY29sb3Itc2hhZG93LWlubmVyOnJnYmEoMCwwLDAsMC4xKTstLWNrLWNvbG9yLWJ1dHRvbi1kZWZhdWx0LWJhY2tncm91bmQ6dHJhbnNwYXJlbnQ7LS1jay1jb2xvci1idXR0b24tZGVmYXVsdC1ob3Zlci1iYWNrZ3JvdW5kOiNlNmU2ZTY7LS1jay1jb2xvci1idXR0b24tZGVmYXVsdC1hY3RpdmUtYmFja2dyb3VuZDojZDlkOWQ5Oy0tY2stY29sb3ItYnV0dG9uLWRlZmF1bHQtYWN0aXZlLXNoYWRvdzojYmZiZmJmOy0tY2stY29sb3ItYnV0dG9uLWRlZmF1bHQtZGlzYWJsZWQtYmFja2dyb3VuZDp0cmFuc3BhcmVudDstLWNrLWNvbG9yLWJ1dHRvbi1vbi1iYWNrZ3JvdW5kOiNkZWRlZGU7LS1jay1jb2xvci1idXR0b24tb24taG92ZXItYmFja2dyb3VuZDojYzRjNGM0Oy0tY2stY29sb3ItYnV0dG9uLW9uLWFjdGl2ZS1iYWNrZ3JvdW5kOiNiYWJhYmE7LS1jay1jb2xvci1idXR0b24tb24tYWN0aXZlLXNoYWRvdzojYTFhMWExOy0tY2stY29sb3ItYnV0dG9uLW9uLWRpc2FibGVkLWJhY2tncm91bmQ6I2RlZGVkZTstLWNrLWNvbG9yLWJ1dHRvbi1hY3Rpb24tYmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1iYXNlLWFjdGlvbik7LS1jay1jb2xvci1idXR0b24tYWN0aW9uLWhvdmVyLWJhY2tncm91bmQ6IzU3OWUzZDstLWNrLWNvbG9yLWJ1dHRvbi1hY3Rpb24tYWN0aXZlLWJhY2tncm91bmQ6IzUzOTczYjstLWNrLWNvbG9yLWJ1dHRvbi1hY3Rpb24tYWN0aXZlLXNoYWRvdzojNDk4NDMzOy0tY2stY29sb3ItYnV0dG9uLWFjdGlvbi1kaXNhYmxlZC1iYWNrZ3JvdW5kOiM3ZWMzNjU7LS1jay1jb2xvci1idXR0b24tYWN0aW9uLXRleHQ6dmFyKC0tY2stY29sb3ItYmFzZS1iYWNrZ3JvdW5kKTstLWNrLWNvbG9yLWJ1dHRvbi1zYXZlOiMwMDhhMDA7LS1jay1jb2xvci1idXR0b24tY2FuY2VsOiNkYjM3MDA7LS1jay1jb2xvci1zd2l0Y2gtYnV0dG9uLW9mZi1iYWNrZ3JvdW5kOiNiMGIwYjA7LS1jay1jb2xvci1zd2l0Y2gtYnV0dG9uLW9mZi1ob3Zlci1iYWNrZ3JvdW5kOiNhM2EzYTM7LS1jay1jb2xvci1zd2l0Y2gtYnV0dG9uLW9uLWJhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItYnV0dG9uLWFjdGlvbi1iYWNrZ3JvdW5kKTstLWNrLWNvbG9yLXN3aXRjaC1idXR0b24tb24taG92ZXItYmFja2dyb3VuZDojNTc5ZTNkOy0tY2stY29sb3Itc3dpdGNoLWJ1dHRvbi1pbm5lci1iYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLWJhc2UtYmFja2dyb3VuZCk7LS1jay1jb2xvci1zd2l0Y2gtYnV0dG9uLWlubmVyLXNoYWRvdzpyZ2JhKDAsMCwwLDAuMSk7LS1jay1jb2xvci1kcm9wZG93bi1wYW5lbC1iYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLWJhc2UtYmFja2dyb3VuZCk7LS1jay1jb2xvci1kcm9wZG93bi1wYW5lbC1ib3JkZXI6dmFyKC0tY2stY29sb3ItYmFzZS1ib3JkZXIpOy0tY2stY29sb3ItaW5wdXQtYmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1iYXNlLWJhY2tncm91bmQpOy0tY2stY29sb3ItaW5wdXQtYm9yZGVyOiNjN2M3Yzc7LS1jay1jb2xvci1pbnB1dC1lcnJvci1ib3JkZXI6dmFyKC0tY2stY29sb3ItYmFzZS1lcnJvcik7LS1jay1jb2xvci1pbnB1dC10ZXh0OnZhcigtLWNrLWNvbG9yLWJhc2UtdGV4dCk7LS1jay1jb2xvci1pbnB1dC1kaXNhYmxlZC1iYWNrZ3JvdW5kOiNmMmYyZjI7LS1jay1jb2xvci1pbnB1dC1kaXNhYmxlZC1ib3JkZXI6I2M3YzdjNzstLWNrLWNvbG9yLWlucHV0LWRpc2FibGVkLXRleHQ6IzVjNWM1YzstLWNrLWNvbG9yLWxpc3QtYmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1iYXNlLWJhY2tncm91bmQpOy0tY2stY29sb3ItbGlzdC1idXR0b24taG92ZXItYmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1idXR0b24tZGVmYXVsdC1ob3Zlci1iYWNrZ3JvdW5kKTstLWNrLWNvbG9yLWxpc3QtYnV0dG9uLW9uLWJhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItYmFzZS1hY3RpdmUpOy0tY2stY29sb3ItbGlzdC1idXR0b24tb24tYmFja2dyb3VuZC1mb2N1czp2YXIoLS1jay1jb2xvci1iYXNlLWFjdGl2ZS1mb2N1cyk7LS1jay1jb2xvci1saXN0LWJ1dHRvbi1vbi10ZXh0OnZhcigtLWNrLWNvbG9yLWJhc2UtYmFja2dyb3VuZCk7LS1jay1jb2xvci1wYW5lbC1iYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLWJhc2UtYmFja2dyb3VuZCk7LS1jay1jb2xvci1wYW5lbC1ib3JkZXI6dmFyKC0tY2stY29sb3ItYmFzZS1ib3JkZXIpOy0tY2stY29sb3ItdG9vbGJhci1iYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLWJhc2UtZm9yZWdyb3VuZCk7LS1jay1jb2xvci10b29sYmFyLWJvcmRlcjp2YXIoLS1jay1jb2xvci1iYXNlLWJvcmRlcik7LS1jay1jb2xvci10b29sdGlwLWJhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItYmFzZS10ZXh0KTstLWNrLWNvbG9yLXRvb2x0aXAtdGV4dDp2YXIoLS1jay1jb2xvci1iYXNlLWJhY2tncm91bmQpOy0tY2stY29sb3ItZW5naW5lLXBsYWNlaG9sZGVyLXRleHQ6IzcwNzA3MDstLWNrLWNvbG9yLXVwbG9hZC1iYXItYmFja2dyb3VuZDojNmNiNWY5Oy0tY2stY29sb3ItbGluay1kZWZhdWx0OiMwMDAwZjA7LS1jay1jb2xvci1saW5rLXNlbGVjdGVkLWJhY2tncm91bmQ6cmdiYSgzMSwxNzcsMjU1LDAuMSk7LS1jay1kaXNhYmxlZC1vcGFjaXR5Oi41Oy0tY2stZm9jdXMtb3V0ZXItc2hhZG93LWdlb21ldHJ5OjAgMCAwIDNweDstLWNrLWZvY3VzLW91dGVyLXNoYWRvdzp2YXIoLS1jay1mb2N1cy1vdXRlci1zaGFkb3ctZ2VvbWV0cnkpIHZhcigtLWNrLWNvbG9yLWZvY3VzLW91dGVyLXNoYWRvdyk7LS1jay1mb2N1cy1kaXNhYmxlZC1vdXRlci1zaGFkb3c6dmFyKC0tY2stZm9jdXMtb3V0ZXItc2hhZG93LWdlb21ldHJ5KSB2YXIoLS1jay1jb2xvci1mb2N1cy1kaXNhYmxlZC1zaGFkb3cpOy0tY2stZm9jdXMtZXJyb3Itb3V0ZXItc2hhZG93OnZhcigtLWNrLWZvY3VzLW91dGVyLXNoYWRvdy1nZW9tZXRyeSkgdmFyKC0tY2stY29sb3ItZm9jdXMtZXJyb3Itc2hhZG93KTstLWNrLWZvY3VzLXJpbmc6MXB4IHNvbGlkIHZhcigtLWNrLWNvbG9yLWZvY3VzLWJvcmRlcik7LS1jay1mb250LXNpemUtYmFzZToxM3B4Oy0tY2stbGluZS1oZWlnaHQtYmFzZToxLjg0NjE1Oy0tY2stZm9udC1mYWNlOkhlbHZldGljYSxBcmlhbCxUYWhvbWEsVmVyZGFuYSxTYW5zLVNlcmlmOy0tY2stZm9udC1zaXplLXRpbnk6MC43ZW07LS1jay1mb250LXNpemUtc21hbGw6MC43NWVtOy0tY2stZm9udC1zaXplLW5vcm1hbDoxZW07LS1jay1mb250LXNpemUtYmlnOjEuNGVtOy0tY2stZm9udC1zaXplLWxhcmdlOjEuOGVtOy0tY2stdWktY29tcG9uZW50LW1pbi1oZWlnaHQ6Mi4zZW19LmNrLmNrLXJlc2V0LC5jay5jay1yZXNldF9hbGwsLmNrLmNrLXJlc2V0X2FsbCAqe21hcmdpbjowO3BhZGRpbmc6MDtib3JkZXI6MDtiYWNrZ3JvdW5kOnRyYW5zcGFyZW50O3RleHQtZGVjb3JhdGlvbjpub25lO3ZlcnRpY2FsLWFsaWduOm1pZGRsZTt0cmFuc2l0aW9uOm5vbmU7d29yZC13cmFwOmJyZWFrLXdvcmR9LmNrLmNrLXJlc2V0X2FsbCwuY2suY2stcmVzZXRfYWxsICp7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2ZvbnQ6bm9ybWFsIG5vcm1hbCBub3JtYWwgdmFyKC0tY2stZm9udC1zaXplLWJhc2UpL3ZhcigtLWNrLWxpbmUtaGVpZ2h0LWJhc2UpIHZhcigtLWNrLWZvbnQtZmFjZSk7Y29sb3I6dmFyKC0tY2stY29sb3ItdGV4dCk7dGV4dC1hbGlnbjpsZWZ0O3doaXRlLXNwYWNlOm5vd3JhcDtjdXJzb3I6YXV0bztmbG9hdDpub25lfS5jay5jay1yZXNldF9hbGwgLmNrLXJ0bCAqe3RleHQtYWxpZ246cmlnaHR9LmNrLmNrLXJlc2V0X2FsbCBpZnJhbWV7dmVydGljYWwtYWxpZ246aW5oZXJpdH0uY2suY2stcmVzZXRfYWxsIHRleHRhcmVhe3doaXRlLXNwYWNlOnByZS13cmFwfS5jay5jay1yZXNldF9hbGwgaW5wdXRbdHlwZT1wYXNzd29yZF0sLmNrLmNrLXJlc2V0X2FsbCBpbnB1dFt0eXBlPXRleHRdLC5jay5jay1yZXNldF9hbGwgdGV4dGFyZWF7Y3Vyc29yOnRleHR9LmNrLmNrLXJlc2V0X2FsbCBpbnB1dFt0eXBlPXBhc3N3b3JkXVtkaXNhYmxlZF0sLmNrLmNrLXJlc2V0X2FsbCBpbnB1dFt0eXBlPXRleHRdW2Rpc2FibGVkXSwuY2suY2stcmVzZXRfYWxsIHRleHRhcmVhW2Rpc2FibGVkXXtjdXJzb3I6ZGVmYXVsdH0uY2suY2stcmVzZXRfYWxsIGZpZWxkc2V0e3BhZGRpbmc6MTBweDtib3JkZXI6MnB4IGdyb292ZSAjZGZkZWUzfS5jay5jay1yZXNldF9hbGwgYnV0dG9uOjotbW96LWZvY3VzLWlubmVye3BhZGRpbmc6MDtib3JkZXI6MH0uY2tbZGlyPXJ0bF0sLmNrW2Rpcj1ydGxdIC5ja3t0ZXh0LWFsaWduOnJpZ2h0fTpyb290ey0tY2stYm9yZGVyLXJhZGl1czoycHg7LS1jay1pbm5lci1zaGFkb3c6MnB4IDJweCAzcHggdmFyKC0tY2stY29sb3Itc2hhZG93LWlubmVyKSBpbnNldDstLWNrLWRyb3Atc2hhZG93OjAgMXB4IDJweCAxcHggdmFyKC0tY2stY29sb3Itc2hhZG93LWRyb3ApOy0tY2stZHJvcC1zaGFkb3ctYWN0aXZlOjAgM3B4IDZweCAxcHggdmFyKC0tY2stY29sb3Itc2hhZG93LWRyb3AtYWN0aXZlKTstLWNrLXNwYWNpbmctdW5pdDowLjZlbTstLWNrLXNwYWNpbmctbGFyZ2U6Y2FsYyh2YXIoLS1jay1zcGFjaW5nLXVuaXQpKjEuNSk7LS1jay1zcGFjaW5nLXN0YW5kYXJkOnZhcigtLWNrLXNwYWNpbmctdW5pdCk7LS1jay1zcGFjaW5nLW1lZGl1bTpjYWxjKHZhcigtLWNrLXNwYWNpbmctdW5pdCkqMC44KTstLWNrLXNwYWNpbmctc21hbGw6Y2FsYyh2YXIoLS1jay1zcGFjaW5nLXVuaXQpKjAuNSk7LS1jay1zcGFjaW5nLXRpbnk6Y2FsYyh2YXIoLS1jay1zcGFjaW5nLXVuaXQpKjAuMyk7LS1jay1zcGFjaW5nLWV4dHJhLXRpbnk6Y2FsYyh2YXIoLS1jay1zcGFjaW5nLXVuaXQpKjAuMTYpfVwiXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIHZhciBuID0gaSgxKTtcclxuICAgICAgICB2YXIgbyA9IGkoMTgpO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9ICc6cm9vdHstLWNrLWJhbGxvb24tcGFuZWwtYXJyb3ctei1pbmRleDpjYWxjKHZhcigtLWNrLXotZGVmYXVsdCkgLSAzKX0uY2suY2stYmFsbG9vbi1wYW5lbHtkaXNwbGF5Om5vbmU7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDp2YXIoLS1jay16LW1vZGFsKX0uY2suY2stYmFsbG9vbi1wYW5lbC5jay1iYWxsb29uLXBhbmVsX3dpdGgtYXJyb3c6YWZ0ZXIsLmNrLmNrLWJhbGxvb24tcGFuZWwuY2stYmFsbG9vbi1wYW5lbF93aXRoLWFycm93OmJlZm9yZXtjb250ZW50OlwiXCI7cG9zaXRpb246YWJzb2x1dGV9LmNrLmNrLWJhbGxvb24tcGFuZWwuY2stYmFsbG9vbi1wYW5lbF93aXRoLWFycm93OmJlZm9yZXt6LWluZGV4OnZhcigtLWNrLWJhbGxvb24tcGFuZWwtYXJyb3ctei1pbmRleCl9LmNrLmNrLWJhbGxvb24tcGFuZWwuY2stYmFsbG9vbi1wYW5lbF93aXRoLWFycm93OmFmdGVye3otaW5kZXg6Y2FsYyh2YXIoLS1jay1iYWxsb29uLXBhbmVsLWFycm93LXotaW5kZXgpICsgMSl9LmNrLmNrLWJhbGxvb24tcGFuZWxbY2xhc3MqPWFycm93X25dOmJlZm9yZXt6LWluZGV4OnZhcigtLWNrLWJhbGxvb24tcGFuZWwtYXJyb3ctei1pbmRleCl9LmNrLmNrLWJhbGxvb24tcGFuZWxbY2xhc3MqPWFycm93X25dOmFmdGVye3otaW5kZXg6Y2FsYyh2YXIoLS1jay1iYWxsb29uLXBhbmVsLWFycm93LXotaW5kZXgpICsgMSl9LmNrLmNrLWJhbGxvb24tcGFuZWxbY2xhc3MqPWFycm93X3NdOmJlZm9yZXt6LWluZGV4OnZhcigtLWNrLWJhbGxvb24tcGFuZWwtYXJyb3ctei1pbmRleCl9LmNrLmNrLWJhbGxvb24tcGFuZWxbY2xhc3MqPWFycm93X3NdOmFmdGVye3otaW5kZXg6Y2FsYyh2YXIoLS1jay1iYWxsb29uLXBhbmVsLWFycm93LXotaW5kZXgpICsgMSl9LmNrLmNrLWJhbGxvb24tcGFuZWwuY2stYmFsbG9vbi1wYW5lbF92aXNpYmxle2Rpc3BsYXk6YmxvY2t9OnJvb3R7LS1jay1iYWxsb29uLWFycm93LW9mZnNldDoycHg7LS1jay1iYWxsb29uLWFycm93LWhlaWdodDoxMHB4Oy0tY2stYmFsbG9vbi1hcnJvdy1oYWxmLXdpZHRoOjhweH0uY2suY2stYmFsbG9vbi1wYW5lbHtib3JkZXItcmFkaXVzOjB9LmNrLXJvdW5kZWQtY29ybmVycyAuY2suY2stYmFsbG9vbi1wYW5lbCwuY2suY2stYmFsbG9vbi1wYW5lbC5jay1yb3VuZGVkLWNvcm5lcnN7Ym9yZGVyLXJhZGl1czp2YXIoLS1jay1ib3JkZXItcmFkaXVzKX0uY2suY2stYmFsbG9vbi1wYW5lbHtib3gtc2hhZG93OnZhcigtLWNrLWRyb3Atc2hhZG93KSwwIDA7bWluLWhlaWdodDoxNXB4O2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItcGFuZWwtYmFja2dyb3VuZCk7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1jay1jb2xvci1wYW5lbC1ib3JkZXIpfS5jay5jay1iYWxsb29uLXBhbmVsLmNrLWJhbGxvb24tcGFuZWxfd2l0aC1hcnJvdzphZnRlciwuY2suY2stYmFsbG9vbi1wYW5lbC5jay1iYWxsb29uLXBhbmVsX3dpdGgtYXJyb3c6YmVmb3Jle3dpZHRoOjA7aGVpZ2h0OjA7Ym9yZGVyLXN0eWxlOnNvbGlkfS5jay5jay1iYWxsb29uLXBhbmVsW2NsYXNzKj1hcnJvd19uXTphZnRlciwuY2suY2stYmFsbG9vbi1wYW5lbFtjbGFzcyo9YXJyb3dfbl06YmVmb3Jle2JvcmRlci1sZWZ0LXdpZHRoOnZhcigtLWNrLWJhbGxvb24tYXJyb3ctaGFsZi13aWR0aCk7Ym9yZGVyLWJvdHRvbS13aWR0aDp2YXIoLS1jay1iYWxsb29uLWFycm93LWhlaWdodCk7Ym9yZGVyLXJpZ2h0LXdpZHRoOnZhcigtLWNrLWJhbGxvb24tYXJyb3ctaGFsZi13aWR0aCk7Ym9yZGVyLXRvcC13aWR0aDowfS5jay5jay1iYWxsb29uLXBhbmVsW2NsYXNzKj1hcnJvd19uXTpiZWZvcmV7Ym9yZGVyLWJvdHRvbS1jb2xvcjp2YXIoLS1jay1jb2xvci1wYW5lbC1ib3JkZXIpfS5jay5jay1iYWxsb29uLXBhbmVsW2NsYXNzKj1hcnJvd19uXTphZnRlciwuY2suY2stYmFsbG9vbi1wYW5lbFtjbGFzcyo9YXJyb3dfbl06YmVmb3Jle2JvcmRlci1sZWZ0LWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1yaWdodC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXItdG9wLWNvbG9yOnRyYW5zcGFyZW50fS5jay5jay1iYWxsb29uLXBhbmVsW2NsYXNzKj1hcnJvd19uXTphZnRlcntib3JkZXItYm90dG9tLWNvbG9yOnZhcigtLWNrLWNvbG9yLXBhbmVsLWJhY2tncm91bmQpO21hcmdpbi10b3A6dmFyKC0tY2stYmFsbG9vbi1hcnJvdy1vZmZzZXQpfS5jay5jay1iYWxsb29uLXBhbmVsW2NsYXNzKj1hcnJvd19zXTphZnRlciwuY2suY2stYmFsbG9vbi1wYW5lbFtjbGFzcyo9YXJyb3dfc106YmVmb3Jle2JvcmRlci1sZWZ0LXdpZHRoOnZhcigtLWNrLWJhbGxvb24tYXJyb3ctaGFsZi13aWR0aCk7Ym9yZGVyLWJvdHRvbS13aWR0aDowO2JvcmRlci1yaWdodC13aWR0aDp2YXIoLS1jay1iYWxsb29uLWFycm93LWhhbGYtd2lkdGgpO2JvcmRlci10b3Atd2lkdGg6dmFyKC0tY2stYmFsbG9vbi1hcnJvdy1oZWlnaHQpfS5jay5jay1iYWxsb29uLXBhbmVsW2NsYXNzKj1hcnJvd19zXTpiZWZvcmV7Ym9yZGVyLXRvcC1jb2xvcjp2YXIoLS1jay1jb2xvci1wYW5lbC1ib3JkZXIpfS5jay5jay1iYWxsb29uLXBhbmVsW2NsYXNzKj1hcnJvd19zXTphZnRlciwuY2suY2stYmFsbG9vbi1wYW5lbFtjbGFzcyo9YXJyb3dfc106YmVmb3Jle2JvcmRlci1sZWZ0LWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1ib3R0b20tY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyLXJpZ2h0LWNvbG9yOnRyYW5zcGFyZW50fS5jay5jay1iYWxsb29uLXBhbmVsW2NsYXNzKj1hcnJvd19zXTphZnRlcntib3JkZXItdG9wLWNvbG9yOnZhcigtLWNrLWNvbG9yLXBhbmVsLWJhY2tncm91bmQpO21hcmdpbi1ib3R0b206dmFyKC0tY2stYmFsbG9vbi1hcnJvdy1vZmZzZXQpfS5jay5jay1iYWxsb29uLXBhbmVsLmNrLWJhbGxvb24tcGFuZWxfYXJyb3dfbjphZnRlciwuY2suY2stYmFsbG9vbi1wYW5lbC5jay1iYWxsb29uLXBhbmVsX2Fycm93X246YmVmb3Jle2xlZnQ6NTAlO21hcmdpbi1sZWZ0OmNhbGMoLTEqdmFyKC0tY2stYmFsbG9vbi1hcnJvdy1oYWxmLXdpZHRoKSk7dG9wOmNhbGMoLTEqdmFyKC0tY2stYmFsbG9vbi1hcnJvdy1oZWlnaHQpKX0uY2suY2stYmFsbG9vbi1wYW5lbC5jay1iYWxsb29uLXBhbmVsX2Fycm93X253OmFmdGVyLC5jay5jay1iYWxsb29uLXBhbmVsLmNrLWJhbGxvb24tcGFuZWxfYXJyb3dfbnc6YmVmb3Jle2xlZnQ6Y2FsYygyKnZhcigtLWNrLWJhbGxvb24tYXJyb3ctaGFsZi13aWR0aCkpO3RvcDpjYWxjKC0xKnZhcigtLWNrLWJhbGxvb24tYXJyb3ctaGVpZ2h0KSl9LmNrLmNrLWJhbGxvb24tcGFuZWwuY2stYmFsbG9vbi1wYW5lbF9hcnJvd19uZTphZnRlciwuY2suY2stYmFsbG9vbi1wYW5lbC5jay1iYWxsb29uLXBhbmVsX2Fycm93X25lOmJlZm9yZXtyaWdodDpjYWxjKDIqdmFyKC0tY2stYmFsbG9vbi1hcnJvdy1oYWxmLXdpZHRoKSk7dG9wOmNhbGMoLTEqdmFyKC0tY2stYmFsbG9vbi1hcnJvdy1oZWlnaHQpKX0uY2suY2stYmFsbG9vbi1wYW5lbC5jay1iYWxsb29uLXBhbmVsX2Fycm93X3M6YWZ0ZXIsLmNrLmNrLWJhbGxvb24tcGFuZWwuY2stYmFsbG9vbi1wYW5lbF9hcnJvd19zOmJlZm9yZXtsZWZ0OjUwJTttYXJnaW4tbGVmdDpjYWxjKC0xKnZhcigtLWNrLWJhbGxvb24tYXJyb3ctaGFsZi13aWR0aCkpO2JvdHRvbTpjYWxjKC0xKnZhcigtLWNrLWJhbGxvb24tYXJyb3ctaGVpZ2h0KSl9LmNrLmNrLWJhbGxvb24tcGFuZWwuY2stYmFsbG9vbi1wYW5lbF9hcnJvd19zdzphZnRlciwuY2suY2stYmFsbG9vbi1wYW5lbC5jay1iYWxsb29uLXBhbmVsX2Fycm93X3N3OmJlZm9yZXtsZWZ0OmNhbGMoMip2YXIoLS1jay1iYWxsb29uLWFycm93LWhhbGYtd2lkdGgpKTtib3R0b206Y2FsYygtMSp2YXIoLS1jay1iYWxsb29uLWFycm93LWhlaWdodCkpfS5jay5jay1iYWxsb29uLXBhbmVsLmNrLWJhbGxvb24tcGFuZWxfYXJyb3dfc2U6YWZ0ZXIsLmNrLmNrLWJhbGxvb24tcGFuZWwuY2stYmFsbG9vbi1wYW5lbF9hcnJvd19zZTpiZWZvcmV7cmlnaHQ6Y2FsYygyKnZhcigtLWNrLWJhbGxvb24tYXJyb3ctaGFsZi13aWR0aCkpO2JvdHRvbTpjYWxjKC0xKnZhcigtLWNrLWJhbGxvb24tYXJyb3ctaGVpZ2h0KSl9LmNrLmNrLWJhbGxvb24tcGFuZWwuY2stYmFsbG9vbi1wYW5lbF9hcnJvd19zbWU6YWZ0ZXIsLmNrLmNrLWJhbGxvb24tcGFuZWwuY2stYmFsbG9vbi1wYW5lbF9hcnJvd19zbWU6YmVmb3Jle3JpZ2h0OjI1JTttYXJnaW4tcmlnaHQ6Y2FsYygyKnZhcigtLWNrLWJhbGxvb24tYXJyb3ctaGFsZi13aWR0aCkpO2JvdHRvbTpjYWxjKC0xKnZhcigtLWNrLWJhbGxvb24tYXJyb3ctaGVpZ2h0KSl9LmNrLmNrLWJhbGxvb24tcGFuZWwuY2stYmFsbG9vbi1wYW5lbF9hcnJvd19zbXc6YWZ0ZXIsLmNrLmNrLWJhbGxvb24tcGFuZWwuY2stYmFsbG9vbi1wYW5lbF9hcnJvd19zbXc6YmVmb3Jle2xlZnQ6MjUlO21hcmdpbi1sZWZ0OmNhbGMoMip2YXIoLS1jay1iYWxsb29uLWFycm93LWhhbGYtd2lkdGgpKTtib3R0b206Y2FsYygtMSp2YXIoLS1jay1iYWxsb29uLWFycm93LWhlaWdodCkpfS5jay5jay1iYWxsb29uLXBhbmVsLmNrLWJhbGxvb24tcGFuZWxfYXJyb3dfbm1lOmFmdGVyLC5jay5jay1iYWxsb29uLXBhbmVsLmNrLWJhbGxvb24tcGFuZWxfYXJyb3dfbm1lOmJlZm9yZXtyaWdodDoyNSU7bWFyZ2luLXJpZ2h0OmNhbGMoMip2YXIoLS1jay1iYWxsb29uLWFycm93LWhhbGYtd2lkdGgpKTt0b3A6Y2FsYygtMSp2YXIoLS1jay1iYWxsb29uLWFycm93LWhlaWdodCkpfS5jay5jay1iYWxsb29uLXBhbmVsLmNrLWJhbGxvb24tcGFuZWxfYXJyb3dfbm13OmFmdGVyLC5jay5jay1iYWxsb29uLXBhbmVsLmNrLWJhbGxvb24tcGFuZWxfYXJyb3dfbm13OmJlZm9yZXtsZWZ0OjI1JTttYXJnaW4tbGVmdDpjYWxjKDIqdmFyKC0tY2stYmFsbG9vbi1hcnJvdy1oYWxmLXdpZHRoKSk7dG9wOmNhbGMoLTEqdmFyKC0tY2stYmFsbG9vbi1hcnJvdy1oZWlnaHQpKX0nXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIHZhciBuID0gaSgxKTtcclxuICAgICAgICB2YXIgbyA9IGkoMjApO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IFwiLmNrLmNrLWljb257dmVydGljYWwtYWxpZ246bWlkZGxlfTpyb290ey0tY2staWNvbi1zaXplOmNhbGModmFyKC0tY2stbGluZS1oZWlnaHQtYmFzZSkqdmFyKC0tY2stZm9udC1zaXplLW5vcm1hbCkpfS5jay5jay1pY29ue3dpZHRoOnZhcigtLWNrLWljb24tc2l6ZSk7aGVpZ2h0OnZhcigtLWNrLWljb24tc2l6ZSk7Zm9udC1zaXplOi44MzMzMzUwNjk0ZW07d2lsbC1jaGFuZ2U6dHJhbnNmb3JtfS5jay5jay1pY29uLC5jay5jay1pY29uICp7Y29sb3I6aW5oZXJpdDtjdXJzb3I6aW5oZXJpdH0uY2suY2staWNvbiA6bm90KFtmaWxsXSl7ZmlsbDpjdXJyZW50Q29sb3J9XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSgyMik7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gJy5jay5jay10b29sdGlwLC5jay5jay10b29sdGlwIC5jay10b29sdGlwX190ZXh0OmFmdGVye3Bvc2l0aW9uOmFic29sdXRlO3BvaW50ZXItZXZlbnRzOm5vbmU7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbn0uY2suY2stdG9vbHRpcHt2aXNpYmlsaXR5OmhpZGRlbjtvcGFjaXR5OjA7ZGlzcGxheTpub25lO3otaW5kZXg6dmFyKC0tY2stei1tb2RhbCl9LmNrLmNrLXRvb2x0aXAgLmNrLXRvb2x0aXBfX3RleHR7ZGlzcGxheTppbmxpbmUtYmxvY2t9LmNrLmNrLXRvb2x0aXAgLmNrLXRvb2x0aXBfX3RleHQ6YWZ0ZXJ7Y29udGVudDpcIlwiO3dpZHRoOjA7aGVpZ2h0OjB9OnJvb3R7LS1jay10b29sdGlwLWFycm93LXNpemU6NXB4fS5jay5jay10b29sdGlwe2xlZnQ6NTAlO3RvcDowO3RyYW5zaXRpb246b3BhY2l0eSAuMnMgZWFzZS1pbi1vdXQgLjJzfS5jay5jay10b29sdGlwIC5jay10b29sdGlwX190ZXh0e2JvcmRlci1yYWRpdXM6MH0uY2stcm91bmRlZC1jb3JuZXJzIC5jay5jay10b29sdGlwIC5jay10b29sdGlwX190ZXh0LC5jay5jay10b29sdGlwIC5jay10b29sdGlwX190ZXh0LmNrLXJvdW5kZWQtY29ybmVyc3tib3JkZXItcmFkaXVzOnZhcigtLWNrLWJvcmRlci1yYWRpdXMpfS5jay5jay10b29sdGlwIC5jay10b29sdGlwX190ZXh0e2ZvbnQtc2l6ZTouOWVtO2xpbmUtaGVpZ2h0OjEuNTtjb2xvcjp2YXIoLS1jay1jb2xvci10b29sdGlwLXRleHQpO3BhZGRpbmc6dmFyKC0tY2stc3BhY2luZy1zbWFsbCkgdmFyKC0tY2stc3BhY2luZy1tZWRpdW0pO2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItdG9vbHRpcC1iYWNrZ3JvdW5kKTtwb3NpdGlvbjpyZWxhdGl2ZTtsZWZ0Oi01MCV9LmNrLmNrLXRvb2x0aXAgLmNrLXRvb2x0aXBfX3RleHQ6YWZ0ZXJ7dHJhbnNpdGlvbjpvcGFjaXR5IC4ycyBlYXNlLWluLW91dCAuMnM7Ym9yZGVyLXN0eWxlOnNvbGlkO2xlZnQ6NTAlfS5jay5jay10b29sdGlwLmNrLXRvb2x0aXBfc3tib3R0b206Y2FsYygtMSp2YXIoLS1jay10b29sdGlwLWFycm93LXNpemUpKTt0cmFuc2Zvcm06dHJhbnNsYXRlWSgxMDAlKX0uY2suY2stdG9vbHRpcC5jay10b29sdGlwX3MgLmNrLXRvb2x0aXBfX3RleHQ6YWZ0ZXJ7dG9wOmNhbGMoLTEqdmFyKC0tY2stdG9vbHRpcC1hcnJvdy1zaXplKSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSk7Ym9yZGVyLWxlZnQtY29sb3I6dHJhbnNwYXJlbnQ7Ym9yZGVyLWJvdHRvbS1jb2xvcjp2YXIoLS1jay1jb2xvci10b29sdGlwLWJhY2tncm91bmQpO2JvcmRlci1yaWdodC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXItdG9wLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1sZWZ0LXdpZHRoOnZhcigtLWNrLXRvb2x0aXAtYXJyb3ctc2l6ZSk7Ym9yZGVyLWJvdHRvbS13aWR0aDp2YXIoLS1jay10b29sdGlwLWFycm93LXNpemUpO2JvcmRlci1yaWdodC13aWR0aDp2YXIoLS1jay10b29sdGlwLWFycm93LXNpemUpO2JvcmRlci10b3Atd2lkdGg6MH0uY2suY2stdG9vbHRpcC5jay10b29sdGlwX257dG9wOmNhbGMoLTEqdmFyKC0tY2stdG9vbHRpcC1hcnJvdy1zaXplKSk7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTEwMCUpfS5jay5jay10b29sdGlwLmNrLXRvb2x0aXBfbiAuY2stdG9vbHRpcF9fdGV4dDphZnRlcntib3R0b206Y2FsYygtMSp2YXIoLS1jay10b29sdGlwLWFycm93LXNpemUpKTt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtNTAlKTtib3JkZXItbGVmdC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXItYm90dG9tLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1yaWdodC1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXItdG9wLWNvbG9yOnZhcigtLWNrLWNvbG9yLXRvb2x0aXAtYmFja2dyb3VuZCk7Ym9yZGVyLWxlZnQtd2lkdGg6dmFyKC0tY2stdG9vbHRpcC1hcnJvdy1zaXplKTtib3JkZXItYm90dG9tLXdpZHRoOjA7Ym9yZGVyLXJpZ2h0LXdpZHRoOnZhcigtLWNrLXRvb2x0aXAtYXJyb3ctc2l6ZSk7Ym9yZGVyLXRvcC13aWR0aDp2YXIoLS1jay10b29sdGlwLWFycm93LXNpemUpfSdcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSgyNCk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCIuY2suY2stYnV0dG9uLGEuY2suY2stYnV0dG9uey1tb3otdXNlci1zZWxlY3Q6bm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZX0uY2suY2stYnV0dG9uIC5jay10b29sdGlwLGEuY2suY2stYnV0dG9uIC5jay10b29sdGlwe2Rpc3BsYXk6YmxvY2t9QG1lZGlhIChob3Zlcjpub25lKXsuY2suY2stYnV0dG9uIC5jay10b29sdGlwLGEuY2suY2stYnV0dG9uIC5jay10b29sdGlwe2Rpc3BsYXk6bm9uZX19LmNrLmNrLWJ1dHRvbixhLmNrLmNrLWJ1dHRvbntwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmlubGluZS1mbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6bGVmdH0uY2suY2stYnV0dG9uIC5jay1idXR0b25fX2xhYmVsLGEuY2suY2stYnV0dG9uIC5jay1idXR0b25fX2xhYmVse2Rpc3BsYXk6bm9uZX0uY2suY2stYnV0dG9uLmNrLWJ1dHRvbl93aXRoLXRleHQgLmNrLWJ1dHRvbl9fbGFiZWwsYS5jay5jay1idXR0b24uY2stYnV0dG9uX3dpdGgtdGV4dCAuY2stYnV0dG9uX19sYWJlbHtkaXNwbGF5OmlubGluZS1ibG9ja30uY2suY2stYnV0dG9uOm5vdCguY2stYnV0dG9uX3dpdGgtdGV4dCksYS5jay5jay1idXR0b246bm90KC5jay1idXR0b25fd2l0aC10ZXh0KXtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyfS5jay5jay1idXR0b246aG92ZXIgLmNrLXRvb2x0aXAsYS5jay5jay1idXR0b246aG92ZXIgLmNrLXRvb2x0aXB7dmlzaWJpbGl0eTp2aXNpYmxlO29wYWNpdHk6MX0uY2suY2stYnV0dG9uOmZvY3VzOm5vdCg6aG92ZXIpIC5jay10b29sdGlwLGEuY2suY2stYnV0dG9uOmZvY3VzOm5vdCg6aG92ZXIpIC5jay10b29sdGlwe2Rpc3BsYXk6bm9uZX0uY2suY2stYnV0dG9uLGEuY2suY2stYnV0dG9ue2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItYnV0dG9uLWRlZmF1bHQtYmFja2dyb3VuZCl9LmNrLmNrLWJ1dHRvbjpub3QoLmNrLWRpc2FibGVkKTpob3ZlcixhLmNrLmNrLWJ1dHRvbjpub3QoLmNrLWRpc2FibGVkKTpob3ZlcntiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLWJ1dHRvbi1kZWZhdWx0LWhvdmVyLWJhY2tncm91bmQpfS5jay5jay1idXR0b246bm90KC5jay1kaXNhYmxlZCk6YWN0aXZlLGEuY2suY2stYnV0dG9uOm5vdCguY2stZGlzYWJsZWQpOmFjdGl2ZXtiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLWJ1dHRvbi1kZWZhdWx0LWFjdGl2ZS1iYWNrZ3JvdW5kKTtib3gtc2hhZG93Omluc2V0IDAgMnB4IDJweCB2YXIoLS1jay1jb2xvci1idXR0b24tZGVmYXVsdC1hY3RpdmUtc2hhZG93KX0uY2suY2stYnV0dG9uLmNrLWRpc2FibGVkLGEuY2suY2stYnV0dG9uLmNrLWRpc2FibGVke2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItYnV0dG9uLWRlZmF1bHQtZGlzYWJsZWQtYmFja2dyb3VuZCl9LmNrLmNrLWJ1dHRvbixhLmNrLmNrLWJ1dHRvbntib3JkZXItcmFkaXVzOjB9LmNrLXJvdW5kZWQtY29ybmVycyAuY2suY2stYnV0dG9uLC5jay1yb3VuZGVkLWNvcm5lcnMgYS5jay5jay1idXR0b24sLmNrLmNrLWJ1dHRvbi5jay1yb3VuZGVkLWNvcm5lcnMsYS5jay5jay1idXR0b24uY2stcm91bmRlZC1jb3JuZXJze2JvcmRlci1yYWRpdXM6dmFyKC0tY2stYm9yZGVyLXJhZGl1cyl9LmNrLmNrLWJ1dHRvbixhLmNrLmNrLWJ1dHRvbnt3aGl0ZS1zcGFjZTpub3dyYXA7Y3Vyc29yOmRlZmF1bHQ7dmVydGljYWwtYWxpZ246bWlkZGxlO3BhZGRpbmc6dmFyKC0tY2stc3BhY2luZy10aW55KTt0ZXh0LWFsaWduOmNlbnRlcjttaW4td2lkdGg6dmFyKC0tY2stdWktY29tcG9uZW50LW1pbi1oZWlnaHQpO21pbi1oZWlnaHQ6dmFyKC0tY2stdWktY29tcG9uZW50LW1pbi1oZWlnaHQpO2xpbmUtaGVpZ2h0OjE7Zm9udC1zaXplOmluaGVyaXQ7Ym9yZGVyOjFweCBzb2xpZCB0cmFuc3BhcmVudDt0cmFuc2l0aW9uOmJveC1zaGFkb3cgLjJzIGVhc2UtaW4tb3V0LGJvcmRlciAuMnMgZWFzZS1pbi1vdXQ7LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmV9LmNrLmNrLWJ1dHRvbjphY3RpdmUsLmNrLmNrLWJ1dHRvbjpmb2N1cyxhLmNrLmNrLWJ1dHRvbjphY3RpdmUsYS5jay5jay1idXR0b246Zm9jdXN7b3V0bGluZTpub25lO2JvcmRlcjp2YXIoLS1jay1mb2N1cy1yaW5nKTtib3gtc2hhZG93OnZhcigtLWNrLWZvY3VzLW91dGVyLXNoYWRvdyksMCAwfS5jay5jay1idXR0b24gLmNrLWJ1dHRvbl9faWNvbiB1c2UsLmNrLmNrLWJ1dHRvbiAuY2stYnV0dG9uX19pY29uIHVzZSAqLGEuY2suY2stYnV0dG9uIC5jay1idXR0b25fX2ljb24gdXNlLGEuY2suY2stYnV0dG9uIC5jay1idXR0b25fX2ljb24gdXNlICp7Y29sb3I6aW5oZXJpdH0uY2suY2stYnV0dG9uIC5jay1idXR0b25fX2xhYmVsLGEuY2suY2stYnV0dG9uIC5jay1idXR0b25fX2xhYmVse2ZvbnQtc2l6ZTppbmhlcml0O2ZvbnQtd2VpZ2h0OmluaGVyaXQ7Y29sb3I6aW5oZXJpdDtjdXJzb3I6aW5oZXJpdDt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9W2Rpcj1sdHJdIC5jay5jay1idXR0b24gLmNrLWJ1dHRvbl9fbGFiZWwsW2Rpcj1sdHJdIGEuY2suY2stYnV0dG9uIC5jay1idXR0b25fX2xhYmVse3RleHQtYWxpZ246bGVmdH1bZGlyPXJ0bF0gLmNrLmNrLWJ1dHRvbiAuY2stYnV0dG9uX19sYWJlbCxbZGlyPXJ0bF0gYS5jay5jay1idXR0b24gLmNrLWJ1dHRvbl9fbGFiZWx7dGV4dC1hbGlnbjpyaWdodH0uY2suY2stYnV0dG9uIC5jay1idXR0b25fX2tleXN0cm9rZSxhLmNrLmNrLWJ1dHRvbiAuY2stYnV0dG9uX19rZXlzdHJva2V7Y29sb3I6aW5oZXJpdH1bZGlyPWx0cl0gLmNrLmNrLWJ1dHRvbiAuY2stYnV0dG9uX19rZXlzdHJva2UsW2Rpcj1sdHJdIGEuY2suY2stYnV0dG9uIC5jay1idXR0b25fX2tleXN0cm9rZXttYXJnaW4tbGVmdDp2YXIoLS1jay1zcGFjaW5nLWxhcmdlKX1bZGlyPXJ0bF0gLmNrLmNrLWJ1dHRvbiAuY2stYnV0dG9uX19rZXlzdHJva2UsW2Rpcj1ydGxdIGEuY2suY2stYnV0dG9uIC5jay1idXR0b25fX2tleXN0cm9rZXttYXJnaW4tcmlnaHQ6dmFyKC0tY2stc3BhY2luZy1sYXJnZSl9LmNrLmNrLWJ1dHRvbiAuY2stYnV0dG9uX19rZXlzdHJva2UsYS5jay5jay1idXR0b24gLmNrLWJ1dHRvbl9fa2V5c3Ryb2tle2ZvbnQtd2VpZ2h0OjcwMDtvcGFjaXR5Oi43fS5jay5jay1idXR0b24uY2stZGlzYWJsZWQ6YWN0aXZlLC5jay5jay1idXR0b24uY2stZGlzYWJsZWQ6Zm9jdXMsYS5jay5jay1idXR0b24uY2stZGlzYWJsZWQ6YWN0aXZlLGEuY2suY2stYnV0dG9uLmNrLWRpc2FibGVkOmZvY3Vze2JveC1zaGFkb3c6dmFyKC0tY2stZm9jdXMtZGlzYWJsZWQtb3V0ZXItc2hhZG93KSwwIDB9LmNrLmNrLWJ1dHRvbi5jay1kaXNhYmxlZCAuY2stYnV0dG9uX19pY29uLGEuY2suY2stYnV0dG9uLmNrLWRpc2FibGVkIC5jay1idXR0b25fX2ljb257b3BhY2l0eTp2YXIoLS1jay1kaXNhYmxlZC1vcGFjaXR5KX0uY2suY2stYnV0dG9uLmNrLWRpc2FibGVkIC5jay1idXR0b25fX2xhYmVsLGEuY2suY2stYnV0dG9uLmNrLWRpc2FibGVkIC5jay1idXR0b25fX2xhYmVse29wYWNpdHk6dmFyKC0tY2stZGlzYWJsZWQtb3BhY2l0eSl9LmNrLmNrLWJ1dHRvbi5jay1kaXNhYmxlZCAuY2stYnV0dG9uX19rZXlzdHJva2UsYS5jay5jay1idXR0b24uY2stZGlzYWJsZWQgLmNrLWJ1dHRvbl9fa2V5c3Ryb2tle29wYWNpdHk6LjN9LmNrLmNrLWJ1dHRvbi5jay1idXR0b25fd2l0aC10ZXh0LGEuY2suY2stYnV0dG9uLmNrLWJ1dHRvbl93aXRoLXRleHR7cGFkZGluZzp2YXIoLS1jay1zcGFjaW5nLXRpbnkpIHZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpfVtkaXI9bHRyXSAuY2suY2stYnV0dG9uLmNrLWJ1dHRvbl93aXRoLXRleHQgLmNrLWJ1dHRvbl9faWNvbixbZGlyPWx0cl0gYS5jay5jay1idXR0b24uY2stYnV0dG9uX3dpdGgtdGV4dCAuY2stYnV0dG9uX19pY29ue21hcmdpbi1sZWZ0OmNhbGMoLTEqdmFyKC0tY2stc3BhY2luZy1zbWFsbCkpO21hcmdpbi1yaWdodDp2YXIoLS1jay1zcGFjaW5nLXNtYWxsKX1bZGlyPXJ0bF0gLmNrLmNrLWJ1dHRvbi5jay1idXR0b25fd2l0aC10ZXh0IC5jay1idXR0b25fX2ljb24sW2Rpcj1ydGxdIGEuY2suY2stYnV0dG9uLmNrLWJ1dHRvbl93aXRoLXRleHQgLmNrLWJ1dHRvbl9faWNvbnttYXJnaW4tcmlnaHQ6Y2FsYygtMSp2YXIoLS1jay1zcGFjaW5nLXNtYWxsKSk7bWFyZ2luLWxlZnQ6dmFyKC0tY2stc3BhY2luZy1zbWFsbCl9LmNrLmNrLWJ1dHRvbi5jay1idXR0b25fd2l0aC1rZXlzdHJva2UgLmNrLWJ1dHRvbl9fbGFiZWwsYS5jay5jay1idXR0b24uY2stYnV0dG9uX3dpdGgta2V5c3Ryb2tlIC5jay1idXR0b25fX2xhYmVse2ZsZXgtZ3JvdzoxfS5jay5jay1idXR0b24uY2stb24sYS5jay5jay1idXR0b24uY2stb257YmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1idXR0b24tb24tYmFja2dyb3VuZCl9LmNrLmNrLWJ1dHRvbi5jay1vbjpub3QoLmNrLWRpc2FibGVkKTpob3ZlcixhLmNrLmNrLWJ1dHRvbi5jay1vbjpub3QoLmNrLWRpc2FibGVkKTpob3ZlcntiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLWJ1dHRvbi1vbi1ob3Zlci1iYWNrZ3JvdW5kKX0uY2suY2stYnV0dG9uLmNrLW9uOm5vdCguY2stZGlzYWJsZWQpOmFjdGl2ZSxhLmNrLmNrLWJ1dHRvbi5jay1vbjpub3QoLmNrLWRpc2FibGVkKTphY3RpdmV7YmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1idXR0b24tb24tYWN0aXZlLWJhY2tncm91bmQpO2JveC1zaGFkb3c6aW5zZXQgMCAycHggMnB4IHZhcigtLWNrLWNvbG9yLWJ1dHRvbi1vbi1hY3RpdmUtc2hhZG93KX0uY2suY2stYnV0dG9uLmNrLW9uLmNrLWRpc2FibGVkLGEuY2suY2stYnV0dG9uLmNrLW9uLmNrLWRpc2FibGVke2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItYnV0dG9uLW9uLWRpc2FibGVkLWJhY2tncm91bmQpfS5jay5jay1idXR0b24uY2stYnV0dG9uLXNhdmUsYS5jay5jay1idXR0b24uY2stYnV0dG9uLXNhdmV7Y29sb3I6dmFyKC0tY2stY29sb3ItYnV0dG9uLXNhdmUpfS5jay5jay1idXR0b24uY2stYnV0dG9uLWNhbmNlbCxhLmNrLmNrLWJ1dHRvbi5jay1idXR0b24tY2FuY2Vse2NvbG9yOnZhcigtLWNrLWNvbG9yLWJ1dHRvbi1jYW5jZWwpfS5jay5jay1idXR0b24tYWN0aW9uLGEuY2suY2stYnV0dG9uLWFjdGlvbntiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLWJ1dHRvbi1hY3Rpb24tYmFja2dyb3VuZCl9LmNrLmNrLWJ1dHRvbi1hY3Rpb246bm90KC5jay1kaXNhYmxlZCk6aG92ZXIsYS5jay5jay1idXR0b24tYWN0aW9uOm5vdCguY2stZGlzYWJsZWQpOmhvdmVye2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItYnV0dG9uLWFjdGlvbi1ob3Zlci1iYWNrZ3JvdW5kKX0uY2suY2stYnV0dG9uLWFjdGlvbjpub3QoLmNrLWRpc2FibGVkKTphY3RpdmUsYS5jay5jay1idXR0b24tYWN0aW9uOm5vdCguY2stZGlzYWJsZWQpOmFjdGl2ZXtiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLWJ1dHRvbi1hY3Rpb24tYWN0aXZlLWJhY2tncm91bmQpO2JveC1zaGFkb3c6aW5zZXQgMCAycHggMnB4IHZhcigtLWNrLWNvbG9yLWJ1dHRvbi1hY3Rpb24tYWN0aXZlLXNoYWRvdyl9LmNrLmNrLWJ1dHRvbi1hY3Rpb24uY2stZGlzYWJsZWQsYS5jay5jay1idXR0b24tYWN0aW9uLmNrLWRpc2FibGVke2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItYnV0dG9uLWFjdGlvbi1kaXNhYmxlZC1iYWNrZ3JvdW5kKX0uY2suY2stYnV0dG9uLWFjdGlvbixhLmNrLmNrLWJ1dHRvbi1hY3Rpb257Y29sb3I6dmFyKC0tY2stY29sb3ItYnV0dG9uLWFjdGlvbi10ZXh0KX0uY2suY2stYnV0dG9uLWJvbGQsYS5jay5jay1idXR0b24tYm9sZHtmb250LXdlaWdodDo3MDB9XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSgyNik7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCIuY2sgLmNrLWJhbGxvb24tcm90YXRvcl9fbmF2aWdhdGlvbntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmNrIC5jay1iYWxsb29uLXJvdGF0b3JfX2NvbnRlbnQgLmNrLXRvb2xiYXJ7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uY2sgLmNrLWJhbGxvb24tcm90YXRvcl9fbmF2aWdhdGlvbntiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLXRvb2xiYXItYmFja2dyb3VuZCk7Ym9yZGVyLWJvdHRvbToxcHggc29saWQgdmFyKC0tY2stY29sb3ItdG9vbGJhci1ib3JkZXIpO3BhZGRpbmc6MCB2YXIoLS1jay1zcGFjaW5nLXNtYWxsKX0uY2sgLmNrLWJhbGxvb24tcm90YXRvcl9fbmF2aWdhdGlvbj4qe21hcmdpbi1yaWdodDp2YXIoLS1jay1zcGFjaW5nLXNtYWxsKTttYXJnaW4tdG9wOnZhcigtLWNrLXNwYWNpbmctc21hbGwpO21hcmdpbi1ib3R0b206dmFyKC0tY2stc3BhY2luZy1zbWFsbCl9LmNrIC5jay1iYWxsb29uLXJvdGF0b3JfX25hdmlnYXRpb24gLmNrLWJhbGxvb24tcm90YXRvcl9fY291bnRlcnttYXJnaW4tcmlnaHQ6dmFyKC0tY2stc3BhY2luZy1zdGFuZGFyZCk7bWFyZ2luLWxlZnQ6dmFyKC0tY2stc3BhY2luZy1zbWFsbCl9LmNrIC5jay1iYWxsb29uLXJvdGF0b3JfX2NvbnRlbnQgLmNrLmNrLWFubm90YXRpb24td3JhcHBlcntib3gtc2hhZG93Om5vbmV9XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSgyOCk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCIuY2sgLmNrLWZha2UtcGFuZWx7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDpjYWxjKHZhcigtLWNrLXotbW9kYWwpIC0gMSl9LmNrIC5jay1mYWtlLXBhbmVsIGRpdntwb3NpdGlvbjphYnNvbHV0ZX0uY2sgLmNrLWZha2UtcGFuZWwgZGl2OmZpcnN0LWNoaWxke3otaW5kZXg6Mn0uY2sgLmNrLWZha2UtcGFuZWwgZGl2Om50aC1jaGlsZCgyKXt6LWluZGV4OjF9OnJvb3R7LS1jay1iYWxsb29uLWZha2UtcGFuZWwtb2Zmc2V0LWhvcml6b250YWw6NnB4Oy0tY2stYmFsbG9vbi1mYWtlLXBhbmVsLW9mZnNldC12ZXJ0aWNhbDo2cHh9LmNrIC5jay1mYWtlLXBhbmVsIGRpdntib3gtc2hhZG93OnZhcigtLWNrLWRyb3Atc2hhZG93KSwwIDA7bWluLWhlaWdodDoxNXB4O2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItcGFuZWwtYmFja2dyb3VuZCk7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1jay1jb2xvci1wYW5lbC1ib3JkZXIpO2JvcmRlci1yYWRpdXM6dmFyKC0tY2stYm9yZGVyLXJhZGl1cyk7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0uY2sgLmNrLWZha2UtcGFuZWwgZGl2OmZpcnN0LWNoaWxke21hcmdpbi1sZWZ0OnZhcigtLWNrLWJhbGxvb24tZmFrZS1wYW5lbC1vZmZzZXQtaG9yaXpvbnRhbCk7bWFyZ2luLXRvcDp2YXIoLS1jay1iYWxsb29uLWZha2UtcGFuZWwtb2Zmc2V0LXZlcnRpY2FsKX0uY2sgLmNrLWZha2UtcGFuZWwgZGl2Om50aC1jaGlsZCgyKXttYXJnaW4tbGVmdDpjYWxjKHZhcigtLWNrLWJhbGxvb24tZmFrZS1wYW5lbC1vZmZzZXQtaG9yaXpvbnRhbCkqMik7bWFyZ2luLXRvcDpjYWxjKHZhcigtLWNrLWJhbGxvb24tZmFrZS1wYW5lbC1vZmZzZXQtdmVydGljYWwpKjIpfS5jayAuY2stZmFrZS1wYW5lbCBkaXY6bnRoLWNoaWxkKDMpe21hcmdpbi1sZWZ0OmNhbGModmFyKC0tY2stYmFsbG9vbi1mYWtlLXBhbmVsLW9mZnNldC1ob3Jpem9udGFsKSozKTttYXJnaW4tdG9wOmNhbGModmFyKC0tY2stYmFsbG9vbi1mYWtlLXBhbmVsLW9mZnNldC12ZXJ0aWNhbCkqMyl9LmNrIC5jay1iYWxsb29uLXBhbmVsX2Fycm93X3MrLmNrLWZha2UtcGFuZWwsLmNrIC5jay1iYWxsb29uLXBhbmVsX2Fycm93X3NlKy5jay1mYWtlLXBhbmVsLC5jayAuY2stYmFsbG9vbi1wYW5lbF9hcnJvd19zdysuY2stZmFrZS1wYW5lbHstLWNrLWJhbGxvb24tZmFrZS1wYW5lbC1vZmZzZXQtdmVydGljYWw6LTZweH1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDMwKTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay5jay1kcm9wZG93bntkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpyZWxhdGl2ZX0uY2suY2stZHJvcGRvd24gLmNrLWRyb3Bkb3duX19hcnJvd3twb2ludGVyLWV2ZW50czpub25lO3otaW5kZXg6dmFyKC0tY2stei1kZWZhdWx0KX0uY2suY2stZHJvcGRvd24gLmNrLWJ1dHRvbi5jay1kcm9wZG93bl9fYnV0dG9ue3dpZHRoOjEwMCV9LmNrLmNrLWRyb3Bkb3duIC5jay1idXR0b24uY2stZHJvcGRvd25fX2J1dHRvbi5jay1vbiAuY2stdG9vbHRpcHtkaXNwbGF5Om5vbmV9LmNrLmNrLWRyb3Bkb3duIC5jay1kcm9wZG93bl9fcGFuZWx7LXdlYmtpdC1iYWNrZmFjZS12aXNpYmlsaXR5OmhpZGRlbjtkaXNwbGF5Om5vbmU7ei1pbmRleDp2YXIoLS1jay16LW1vZGFsKTtwb3NpdGlvbjphYnNvbHV0ZX0uY2suY2stZHJvcGRvd24gLmNrLWRyb3Bkb3duX19wYW5lbC5jay1kcm9wZG93bl9fcGFuZWwtdmlzaWJsZXtkaXNwbGF5OmlubGluZS1ibG9ja30uY2suY2stZHJvcGRvd24gLmNrLWRyb3Bkb3duX19wYW5lbC5jay1kcm9wZG93bl9fcGFuZWxfbmUsLmNrLmNrLWRyb3Bkb3duIC5jay1kcm9wZG93bl9fcGFuZWwuY2stZHJvcGRvd25fX3BhbmVsX253e2JvdHRvbToxMDAlfS5jay5jay1kcm9wZG93biAuY2stZHJvcGRvd25fX3BhbmVsLmNrLWRyb3Bkb3duX19wYW5lbF9zZSwuY2suY2stZHJvcGRvd24gLmNrLWRyb3Bkb3duX19wYW5lbC5jay1kcm9wZG93bl9fcGFuZWxfc3d7dG9wOjEwMCU7Ym90dG9tOmF1dG99LmNrLmNrLWRyb3Bkb3duIC5jay1kcm9wZG93bl9fcGFuZWwuY2stZHJvcGRvd25fX3BhbmVsX25lLC5jay5jay1kcm9wZG93biAuY2stZHJvcGRvd25fX3BhbmVsLmNrLWRyb3Bkb3duX19wYW5lbF9zZXtsZWZ0OjB9LmNrLmNrLWRyb3Bkb3duIC5jay1kcm9wZG93bl9fcGFuZWwuY2stZHJvcGRvd25fX3BhbmVsX253LC5jay5jay1kcm9wZG93biAuY2stZHJvcGRvd25fX3BhbmVsLmNrLWRyb3Bkb3duX19wYW5lbF9zd3tyaWdodDowfTpyb290ey0tY2stZHJvcGRvd24tYXJyb3ctc2l6ZTpjYWxjKDAuNSp2YXIoLS1jay1pY29uLXNpemUpKX0uY2suY2stZHJvcGRvd257Zm9udC1zaXplOmluaGVyaXR9LmNrLmNrLWRyb3Bkb3duIC5jay1kcm9wZG93bl9fYXJyb3d7d2lkdGg6dmFyKC0tY2stZHJvcGRvd24tYXJyb3ctc2l6ZSl9W2Rpcj1sdHJdIC5jay5jay1kcm9wZG93biAuY2stZHJvcGRvd25fX2Fycm93e3JpZ2h0OnZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpO21hcmdpbi1sZWZ0OnZhcigtLWNrLXNwYWNpbmctc21hbGwpfVtkaXI9cnRsXSAuY2suY2stZHJvcGRvd24gLmNrLWRyb3Bkb3duX19hcnJvd3tsZWZ0OnZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpO21hcmdpbi1yaWdodDp2YXIoLS1jay1zcGFjaW5nLXNtYWxsKX0uY2suY2stZHJvcGRvd24uY2stZGlzYWJsZWQgLmNrLWRyb3Bkb3duX19hcnJvd3tvcGFjaXR5OnZhcigtLWNrLWRpc2FibGVkLW9wYWNpdHkpfVtkaXI9bHRyXSAuY2suY2stZHJvcGRvd24gLmNrLWJ1dHRvbi5jay1kcm9wZG93bl9fYnV0dG9uOm5vdCguY2stYnV0dG9uX3dpdGgtdGV4dCl7cGFkZGluZy1sZWZ0OnZhcigtLWNrLXNwYWNpbmctc21hbGwpfVtkaXI9cnRsXSAuY2suY2stZHJvcGRvd24gLmNrLWJ1dHRvbi5jay1kcm9wZG93bl9fYnV0dG9uOm5vdCguY2stYnV0dG9uX3dpdGgtdGV4dCl7cGFkZGluZy1yaWdodDp2YXIoLS1jay1zcGFjaW5nLXNtYWxsKX0uY2suY2stZHJvcGRvd24gLmNrLWJ1dHRvbi5jay1kcm9wZG93bl9fYnV0dG9uIC5jay1idXR0b25fX2xhYmVse3dpZHRoOjdlbTtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpc30uY2suY2stZHJvcGRvd24gLmNrLWJ1dHRvbi5jay1kcm9wZG93bl9fYnV0dG9uLmNrLWRpc2FibGVkIC5jay1idXR0b25fX2xhYmVse29wYWNpdHk6dmFyKC0tY2stZGlzYWJsZWQtb3BhY2l0eSl9LmNrLmNrLWRyb3Bkb3duIC5jay1idXR0b24uY2stZHJvcGRvd25fX2J1dHRvbi5jay1vbntib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjA7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MH0uY2suY2stZHJvcGRvd25fX3BhbmVse2JvcmRlci1yYWRpdXM6MH0uY2stcm91bmRlZC1jb3JuZXJzIC5jay5jay1kcm9wZG93bl9fcGFuZWwsLmNrLmNrLWRyb3Bkb3duX19wYW5lbC5jay1yb3VuZGVkLWNvcm5lcnN7Ym9yZGVyLXJhZGl1czp2YXIoLS1jay1ib3JkZXItcmFkaXVzKX0uY2suY2stZHJvcGRvd25fX3BhbmVse2JveC1zaGFkb3c6dmFyKC0tY2stZHJvcC1zaGFkb3cpLDAgMDtiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLWRyb3Bkb3duLXBhbmVsLWJhY2tncm91bmQpO2JvcmRlcjoxcHggc29saWQgdmFyKC0tY2stY29sb3ItZHJvcGRvd24tcGFuZWwtYm9yZGVyKTtib3R0b206MDttaW4td2lkdGg6MTAwJX0uY2suY2stZHJvcGRvd25fX3BhbmVsLmNrLWRyb3Bkb3duX19wYW5lbF9zZXtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjB9LmNrLmNrLWRyb3Bkb3duX19wYW5lbC5jay1kcm9wZG93bl9fcGFuZWxfc3d7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6MH0uY2suY2stZHJvcGRvd25fX3BhbmVsLmNrLWRyb3Bkb3duX19wYW5lbF9uZXtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjB9LmNrLmNrLWRyb3Bkb3duX19wYW5lbC5jay1kcm9wZG93bl9fcGFuZWxfbnd7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MH1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDMyKTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay5jay1saXN0ey1tb3otdXNlci1zZWxlY3Q6bm9uZTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1zLXVzZXItc2VsZWN0Om5vbmU7dXNlci1zZWxlY3Q6bm9uZTtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5jay5jay1saXN0IC5jay1saXN0X19pdGVtLC5jay5jay1saXN0IC5jay1saXN0X19zZXBhcmF0b3J7ZGlzcGxheTpibG9ja30uY2suY2stbGlzdCAuY2stbGlzdF9faXRlbT46Zm9jdXN7cG9zaXRpb246cmVsYXRpdmU7ei1pbmRleDp2YXIoLS1jay16LWRlZmF1bHQpfS5jay5jay1saXN0e2JvcmRlci1yYWRpdXM6MH0uY2stcm91bmRlZC1jb3JuZXJzIC5jay5jay1saXN0LC5jay5jay1saXN0LmNrLXJvdW5kZWQtY29ybmVyc3tib3JkZXItcmFkaXVzOnZhcigtLWNrLWJvcmRlci1yYWRpdXMpfS5jay5jay1saXN0e2xpc3Qtc3R5bGUtdHlwZTpub25lO2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItbGlzdC1iYWNrZ3JvdW5kKX0uY2suY2stbGlzdF9faXRlbXtjdXJzb3I6ZGVmYXVsdDttaW4td2lkdGg6MTJlbX0uY2suY2stbGlzdF9faXRlbSAuY2stYnV0dG9ue21pbi1oZWlnaHQ6dW5zZXQ7d2lkdGg6MTAwJTt0ZXh0LWFsaWduOmxlZnQ7Ym9yZGVyLXJhZGl1czowO3BhZGRpbmc6Y2FsYygwLjIqdmFyKC0tY2stbGluZS1oZWlnaHQtYmFzZSkqdmFyKC0tY2stZm9udC1zaXplLWJhc2UpKSBjYWxjKDAuNCp2YXIoLS1jay1saW5lLWhlaWdodC1iYXNlKSp2YXIoLS1jay1mb250LXNpemUtYmFzZSkpfS5jay5jay1saXN0X19pdGVtIC5jay1idXR0b24gLmNrLWJ1dHRvbl9fbGFiZWx7bGluZS1oZWlnaHQ6Y2FsYygxLjIqdmFyKC0tY2stbGluZS1oZWlnaHQtYmFzZSkqdmFyKC0tY2stZm9udC1zaXplLWJhc2UpKX0uY2suY2stbGlzdF9faXRlbSAuY2stYnV0dG9uOmFjdGl2ZXtib3gtc2hhZG93Om5vbmV9LmNrLmNrLWxpc3RfX2l0ZW0gLmNrLWJ1dHRvbi5jay1vbntiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLWxpc3QtYnV0dG9uLW9uLWJhY2tncm91bmQpO2NvbG9yOnZhcigtLWNrLWNvbG9yLWxpc3QtYnV0dG9uLW9uLXRleHQpfS5jay5jay1saXN0X19pdGVtIC5jay1idXR0b24uY2stb246YWN0aXZle2JveC1zaGFkb3c6bm9uZX0uY2suY2stbGlzdF9faXRlbSAuY2stYnV0dG9uLmNrLW9uOmhvdmVyOm5vdCguY2stZGlzYWJsZWQpe2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItbGlzdC1idXR0b24tb24tYmFja2dyb3VuZC1mb2N1cyl9LmNrLmNrLWxpc3RfX2l0ZW0gLmNrLWJ1dHRvbi5jay1vbjpmb2N1czpub3QoLmNrLWRpc2FibGVkKXtib3JkZXItY29sb3I6dmFyKC0tY2stY29sb3ItYmFzZS1iYWNrZ3JvdW5kKX0uY2suY2stbGlzdF9faXRlbSAuY2stYnV0dG9uOmhvdmVyOm5vdCguY2stZGlzYWJsZWQpe2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItbGlzdC1idXR0b24taG92ZXItYmFja2dyb3VuZCl9LmNrLmNrLWxpc3RfX2l0ZW0gLmNrLXN3aXRjaGJ1dHRvbi5jay1vbntiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLWxpc3QtYmFja2dyb3VuZCk7Y29sb3I6aW5oZXJpdH0uY2suY2stbGlzdF9faXRlbSAuY2stc3dpdGNoYnV0dG9uLmNrLW9uOmhvdmVyOm5vdCguY2stZGlzYWJsZWQpe2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItbGlzdC1idXR0b24taG92ZXItYmFja2dyb3VuZCk7Y29sb3I6aW5oZXJpdH0uY2suY2stbGlzdF9fc2VwYXJhdG9ye2hlaWdodDoxcHg7d2lkdGg6MTAwJTtiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLWJhc2UtYm9yZGVyKX1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDM0KTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay5jay1idXR0b24uY2stc3dpdGNoYnV0dG9uIC5jay1idXR0b25fX3RvZ2dsZSwuY2suY2stYnV0dG9uLmNrLXN3aXRjaGJ1dHRvbiAuY2stYnV0dG9uX190b2dnbGUgLmNrLWJ1dHRvbl9fdG9nZ2xlX19pbm5lcntkaXNwbGF5OmJsb2NrfTpyb290ey0tY2stc3dpdGNoLWJ1dHRvbi10b2dnbGUtd2lkdGg6Mi42MTUzODQ2MTU0ZW07LS1jay1zd2l0Y2gtYnV0dG9uLXRvZ2dsZS1pbm5lci1zaXplOjEuMDc2OTIzMDc2OWVtOy0tY2stc3dpdGNoLWJ1dHRvbi10b2dnbGUtc3BhY2luZzoxcHg7LS1jay1zd2l0Y2gtYnV0dG9uLXRyYW5zbGF0aW9uOjEuMzg0NjE1Mzg0N2VtfVtkaXI9bHRyXSAuY2suY2stYnV0dG9uLmNrLXN3aXRjaGJ1dHRvbiAuY2stYnV0dG9uX19sYWJlbHttYXJnaW4tcmlnaHQ6Y2FsYygyKnZhcigtLWNrLXNwYWNpbmctbGFyZ2UpKX1bZGlyPXJ0bF0gLmNrLmNrLWJ1dHRvbi5jay1zd2l0Y2hidXR0b24gLmNrLWJ1dHRvbl9fbGFiZWx7bWFyZ2luLWxlZnQ6Y2FsYygyKnZhcigtLWNrLXNwYWNpbmctbGFyZ2UpKX0uY2suY2stYnV0dG9uLmNrLXN3aXRjaGJ1dHRvbiAuY2stYnV0dG9uX190b2dnbGV7Ym9yZGVyLXJhZGl1czowfS5jay1yb3VuZGVkLWNvcm5lcnMgLmNrLmNrLWJ1dHRvbi5jay1zd2l0Y2hidXR0b24gLmNrLWJ1dHRvbl9fdG9nZ2xlLC5jay5jay1idXR0b24uY2stc3dpdGNoYnV0dG9uIC5jay1idXR0b25fX3RvZ2dsZS5jay1yb3VuZGVkLWNvcm5lcnN7Ym9yZGVyLXJhZGl1czp2YXIoLS1jay1ib3JkZXItcmFkaXVzKX1bZGlyPWx0cl0gLmNrLmNrLWJ1dHRvbi5jay1zd2l0Y2hidXR0b24gLmNrLWJ1dHRvbl9fdG9nZ2xle21hcmdpbi1sZWZ0OmF1dG99W2Rpcj1ydGxdIC5jay5jay1idXR0b24uY2stc3dpdGNoYnV0dG9uIC5jay1idXR0b25fX3RvZ2dsZXttYXJnaW4tcmlnaHQ6YXV0b30uY2suY2stYnV0dG9uLmNrLXN3aXRjaGJ1dHRvbiAuY2stYnV0dG9uX190b2dnbGV7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kIC40cyBlYXNlO3dpZHRoOnZhcigtLWNrLXN3aXRjaC1idXR0b24tdG9nZ2xlLXdpZHRoKTtiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLXN3aXRjaC1idXR0b24tb2ZmLWJhY2tncm91bmQpfS5jay5jay1idXR0b24uY2stc3dpdGNoYnV0dG9uIC5jay1idXR0b25fX3RvZ2dsZSAuY2stYnV0dG9uX190b2dnbGVfX2lubmVye2JvcmRlci1yYWRpdXM6MH0uY2stcm91bmRlZC1jb3JuZXJzIC5jay5jay1idXR0b24uY2stc3dpdGNoYnV0dG9uIC5jay1idXR0b25fX3RvZ2dsZSAuY2stYnV0dG9uX190b2dnbGVfX2lubmVyLC5jay5jay1idXR0b24uY2stc3dpdGNoYnV0dG9uIC5jay1idXR0b25fX3RvZ2dsZSAuY2stYnV0dG9uX190b2dnbGVfX2lubmVyLmNrLXJvdW5kZWQtY29ybmVyc3tib3JkZXItcmFkaXVzOnZhcigtLWNrLWJvcmRlci1yYWRpdXMpO2JvcmRlci1yYWRpdXM6Y2FsYygwLjUqdmFyKC0tY2stYm9yZGVyLXJhZGl1cykpfS5jay5jay1idXR0b24uY2stc3dpdGNoYnV0dG9uIC5jay1idXR0b25fX3RvZ2dsZSAuY2stYnV0dG9uX190b2dnbGVfX2lubmVye21hcmdpbjp2YXIoLS1jay1zd2l0Y2gtYnV0dG9uLXRvZ2dsZS1zcGFjaW5nKTt3aWR0aDp2YXIoLS1jay1zd2l0Y2gtYnV0dG9uLXRvZ2dsZS1pbm5lci1zaXplKTtoZWlnaHQ6dmFyKC0tY2stc3dpdGNoLWJ1dHRvbi10b2dnbGUtaW5uZXItc2l6ZSk7YmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1zd2l0Y2gtYnV0dG9uLWlubmVyLWJhY2tncm91bmQpO3RyYW5zaXRpb246YWxsIC4zcyBlYXNlfS5jay5jay1idXR0b24uY2stc3dpdGNoYnV0dG9uIC5jay1idXR0b25fX3RvZ2dsZTpob3ZlcntiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLXN3aXRjaC1idXR0b24tb2ZmLWhvdmVyLWJhY2tncm91bmQpfS5jay5jay1idXR0b24uY2stc3dpdGNoYnV0dG9uIC5jay1idXR0b25fX3RvZ2dsZTpob3ZlciAuY2stYnV0dG9uX190b2dnbGVfX2lubmVye2JveC1zaGFkb3c6MCAwIDAgNXB4IHZhcigtLWNrLWNvbG9yLXN3aXRjaC1idXR0b24taW5uZXItc2hhZG93KX0uY2suY2stYnV0dG9uLmNrLXN3aXRjaGJ1dHRvbi5jay1kaXNhYmxlZCAuY2stYnV0dG9uX190b2dnbGV7b3BhY2l0eTp2YXIoLS1jay1kaXNhYmxlZC1vcGFjaXR5KX0uY2suY2stYnV0dG9uLmNrLXN3aXRjaGJ1dHRvbi5jay1vbiAuY2stYnV0dG9uX190b2dnbGV7YmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1zd2l0Y2gtYnV0dG9uLW9uLWJhY2tncm91bmQpfS5jay5jay1idXR0b24uY2stc3dpdGNoYnV0dG9uLmNrLW9uIC5jay1idXR0b25fX3RvZ2dsZTpob3ZlcntiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLXN3aXRjaC1idXR0b24tb24taG92ZXItYmFja2dyb3VuZCl9W2Rpcj1sdHJdIC5jay5jay1idXR0b24uY2stc3dpdGNoYnV0dG9uLmNrLW9uIC5jay1idXR0b25fX3RvZ2dsZSAuY2stYnV0dG9uX190b2dnbGVfX2lubmVye3RyYW5zZm9ybTp0cmFuc2xhdGVYKHZhcigtLWNrLXN3aXRjaC1idXR0b24tdHJhbnNsYXRpb24pKX1bZGlyPXJ0bF0gLmNrLmNrLWJ1dHRvbi5jay1zd2l0Y2hidXR0b24uY2stb24gLmNrLWJ1dHRvbl9fdG9nZ2xlIC5jay1idXR0b25fX3RvZ2dsZV9faW5uZXJ7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoY2FsYygtMSp2YXIoLS1jay1zd2l0Y2gtYnV0dG9uLXRyYW5zbGF0aW9uKSkpfVwiXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIHZhciBuID0gaSgxKTtcclxuICAgICAgICB2YXIgbyA9IGkoMzYpO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IFwiLmNrLmNrLXRvb2xiYXItZHJvcGRvd24gLmNrLmNrLXRvb2xiYXIgLmNrLmNrLXRvb2xiYXJfX2l0ZW1ze2ZsZXgtd3JhcDpub3dyYXB9LmNrLmNrLXRvb2xiYXItZHJvcGRvd24gLmNrLWRyb3Bkb3duX19wYW5lbCAuY2stYnV0dG9uOmZvY3Vze3otaW5kZXg6Y2FsYyh2YXIoLS1jay16LWRlZmF1bHQpICsgMSl9LmNrLmNrLXRvb2xiYXItZHJvcGRvd24gLmNrLXRvb2xiYXJ7Ym9yZGVyOjB9XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSgzOCk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCIuY2suY2stZHJvcGRvd24gLmNrLWRyb3Bkb3duX19wYW5lbCAuY2stbGlzdHtib3JkZXItcmFkaXVzOjB9LmNrLXJvdW5kZWQtY29ybmVycyAuY2suY2stZHJvcGRvd24gLmNrLWRyb3Bkb3duX19wYW5lbCAuY2stbGlzdCwuY2suY2stZHJvcGRvd24gLmNrLWRyb3Bkb3duX19wYW5lbCAuY2stbGlzdC5jay1yb3VuZGVkLWNvcm5lcnN7Ym9yZGVyLXJhZGl1czp2YXIoLS1jay1ib3JkZXItcmFkaXVzKTtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjB9LmNrLmNrLWRyb3Bkb3duIC5jay1kcm9wZG93bl9fcGFuZWwgLmNrLWxpc3QgLmNrLWxpc3RfX2l0ZW06Zmlyc3QtY2hpbGQgLmNrLWJ1dHRvbntib3JkZXItcmFkaXVzOjB9LmNrLXJvdW5kZWQtY29ybmVycyAuY2suY2stZHJvcGRvd24gLmNrLWRyb3Bkb3duX19wYW5lbCAuY2stbGlzdCAuY2stbGlzdF9faXRlbTpmaXJzdC1jaGlsZCAuY2stYnV0dG9uLC5jay5jay1kcm9wZG93biAuY2stZHJvcGRvd25fX3BhbmVsIC5jay1saXN0IC5jay1saXN0X19pdGVtOmZpcnN0LWNoaWxkIC5jay1idXR0b24uY2stcm91bmRlZC1jb3JuZXJze2JvcmRlci1yYWRpdXM6dmFyKC0tY2stYm9yZGVyLXJhZGl1cyk7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czowO2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czowfS5jay5jay1kcm9wZG93biAuY2stZHJvcGRvd25fX3BhbmVsIC5jay1saXN0IC5jay1saXN0X19pdGVtOmxhc3QtY2hpbGQgLmNrLWJ1dHRvbntib3JkZXItcmFkaXVzOjB9LmNrLXJvdW5kZWQtY29ybmVycyAuY2suY2stZHJvcGRvd24gLmNrLWRyb3Bkb3duX19wYW5lbCAuY2stbGlzdCAuY2stbGlzdF9faXRlbTpsYXN0LWNoaWxkIC5jay1idXR0b24sLmNrLmNrLWRyb3Bkb3duIC5jay1kcm9wZG93bl9fcGFuZWwgLmNrLWxpc3QgLmNrLWxpc3RfX2l0ZW06bGFzdC1jaGlsZCAuY2stYnV0dG9uLmNrLXJvdW5kZWQtY29ybmVyc3tib3JkZXItcmFkaXVzOnZhcigtLWNrLWJvcmRlci1yYWRpdXMpO2JvcmRlci10b3AtbGVmdC1yYWRpdXM6MDtib3JkZXItdG9wLXJpZ2h0LXJhZGl1czowfVwiXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIHZhciBuID0gaSgxKTtcclxuICAgICAgICB2YXIgbyA9IGkoNDApO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IFwiLmNrLmNrLXRvb2xiYXJ7LW1vei11c2VyLXNlbGVjdDpub25lOy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTstbXMtdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO2Rpc3BsYXk6ZmxleDtmbGV4LWZsb3c6cm93IG5vd3JhcDthbGlnbi1pdGVtczpjZW50ZXJ9LmNrLmNrLXRvb2xiYXI+LmNrLXRvb2xiYXJfX2l0ZW1ze2Rpc3BsYXk6ZmxleDtmbGV4LWZsb3c6cm93IHdyYXA7YWxpZ24taXRlbXM6Y2VudGVyO2ZsZXgtZ3JvdzoxfS5jay5jay10b29sYmFyIC5jay5jay10b29sYmFyX19zZXBhcmF0b3J7ZGlzcGxheTppbmxpbmUtYmxvY2t9LmNrLmNrLXRvb2xiYXIgLmNrLmNrLXRvb2xiYXJfX3NlcGFyYXRvcjpmaXJzdC1jaGlsZCwuY2suY2stdG9vbGJhciAuY2suY2stdG9vbGJhcl9fc2VwYXJhdG9yOmxhc3QtY2hpbGR7ZGlzcGxheTpub25lfS5jay5jay10b29sYmFyLmNrLXRvb2xiYXJfZ3JvdXBpbmc+LmNrLXRvb2xiYXJfX2l0ZW1ze2ZsZXgtd3JhcDpub3dyYXB9LmNrLmNrLXRvb2xiYXIuY2stdG9vbGJhcl92ZXJ0aWNhbD4uY2stdG9vbGJhcl9faXRlbXN7ZmxleC1kaXJlY3Rpb246Y29sdW1ufS5jay5jay10b29sYmFyLmNrLXRvb2xiYXJfZmxvYXRpbmc+LmNrLXRvb2xiYXJfX2l0ZW1ze2ZsZXgtd3JhcDpub3dyYXB9LmNrLmNrLXRvb2xiYXI+LmNrLmNrLXRvb2xiYXJfX2dyb3VwZWQtZHJvcGRvd24+LmNrLWRyb3Bkb3duX19idXR0b24gLmNrLWRyb3Bkb3duX19hcnJvd3tkaXNwbGF5Om5vbmV9LmNrLmNrLXRvb2xiYXJ7Ym9yZGVyLXJhZGl1czowfS5jay1yb3VuZGVkLWNvcm5lcnMgLmNrLmNrLXRvb2xiYXIsLmNrLmNrLXRvb2xiYXIuY2stcm91bmRlZC1jb3JuZXJze2JvcmRlci1yYWRpdXM6dmFyKC0tY2stYm9yZGVyLXJhZGl1cyl9LmNrLmNrLXRvb2xiYXJ7YmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci10b29sYmFyLWJhY2tncm91bmQpO3BhZGRpbmc6MCB2YXIoLS1jay1zcGFjaW5nLXNtYWxsKTtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWNrLWNvbG9yLXRvb2xiYXItYm9yZGVyKX0uY2suY2stdG9vbGJhciAuY2suY2stdG9vbGJhcl9fc2VwYXJhdG9ye2FsaWduLXNlbGY6c3RyZXRjaDt3aWR0aDoxcHg7bWluLXdpZHRoOjFweDttYXJnaW4tdG9wOjA7bWFyZ2luLWJvdHRvbTowO2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItdG9vbGJhci1ib3JkZXIpfS5jay5jay10b29sYmFyPi5jay10b29sYmFyX19pdGVtcz4qe21hcmdpbi10b3A6dmFyKC0tY2stc3BhY2luZy1zbWFsbCk7bWFyZ2luLWJvdHRvbTp2YXIoLS1jay1zcGFjaW5nLXNtYWxsKTttYXJnaW4tcmlnaHQ6dmFyKC0tY2stc3BhY2luZy1zbWFsbCl9LmNrLmNrLXRvb2xiYXI+LmNrLXRvb2xiYXJfX2l0ZW1zOmVtcHR5Ky5jay5jay10b29sYmFyX19zZXBhcmF0b3J7ZGlzcGxheTpub25lfS5jay5jay10b29sYmFyPi5jay10b29sYmFyX19pdGVtcz4qLC5jay5jay10b29sYmFyPi5jay5jay10b29sYmFyX19ncm91cGVkLWRyb3Bkb3due21hcmdpbi10b3A6dmFyKC0tY2stc3BhY2luZy1zbWFsbCk7bWFyZ2luLWJvdHRvbTp2YXIoLS1jay1zcGFjaW5nLXNtYWxsKX0uY2suY2stdG9vbGJhci5jay10b29sYmFyX3ZlcnRpY2Fse3BhZGRpbmc6MH0uY2suY2stdG9vbGJhci5jay10b29sYmFyX3ZlcnRpY2FsPi5jay10b29sYmFyX19pdGVtcz4uY2t7d2lkdGg6MTAwJTttYXJnaW46MDtib3JkZXItcmFkaXVzOjA7Ym9yZGVyOjB9LmNrLmNrLXRvb2xiYXIuY2stdG9vbGJhcl9jb21wYWN0e3BhZGRpbmc6MH0uY2suY2stdG9vbGJhci5jay10b29sYmFyX2NvbXBhY3Q+LmNrLXRvb2xiYXJfX2l0ZW1zPip7bWFyZ2luOjB9LmNrLmNrLXRvb2xiYXIuY2stdG9vbGJhcl9jb21wYWN0Pi5jay10b29sYmFyX19pdGVtcz46bm90KDpmaXJzdC1jaGlsZCk6bm90KDpsYXN0LWNoaWxkKXtib3JkZXItcmFkaXVzOjB9LmNrLmNrLXRvb2xiYXI+LmNrLmNrLXRvb2xiYXJfX2dyb3VwZWQtZHJvcGRvd24+LmNrLmNrLWJ1dHRvbi5jay1kcm9wZG93bl9fYnV0dG9ue3BhZGRpbmctbGVmdDp2YXIoLS1jay1zcGFjaW5nLXRpbnkpfS5jay10b29sYmFyLWNvbnRhaW5lciAuY2suY2stdG9vbGJhcntib3JkZXI6MH0uY2suY2stdG9vbGJhcltkaXI9cnRsXT4uY2stdG9vbGJhcl9faXRlbXM+LmNrLFtkaXI9cnRsXSAuY2suY2stdG9vbGJhcj4uY2stdG9vbGJhcl9faXRlbXM+LmNre21hcmdpbi1yaWdodDowfS5jay5jay10b29sYmFyW2Rpcj1ydGxdOm5vdCguY2stdG9vbGJhcl9jb21wYWN0KT4uY2stdG9vbGJhcl9faXRlbXM+LmNrLFtkaXI9cnRsXSAuY2suY2stdG9vbGJhcjpub3QoLmNrLXRvb2xiYXJfY29tcGFjdCk+LmNrLXRvb2xiYXJfX2l0ZW1zPi5ja3ttYXJnaW4tbGVmdDp2YXIoLS1jay1zcGFjaW5nLXNtYWxsKX0uY2suY2stdG9vbGJhcltkaXI9cnRsXT4uY2stdG9vbGJhcl9faXRlbXM+LmNrOmxhc3QtY2hpbGQsW2Rpcj1ydGxdIC5jay5jay10b29sYmFyPi5jay10b29sYmFyX19pdGVtcz4uY2s6bGFzdC1jaGlsZHttYXJnaW4tbGVmdDowfS5jay5jay10b29sYmFyW2Rpcj1ydGxdLmNrLXRvb2xiYXJfY29tcGFjdD4uY2stdG9vbGJhcl9faXRlbXM+LmNrOmZpcnN0LWNoaWxkLFtkaXI9cnRsXSAuY2suY2stdG9vbGJhci5jay10b29sYmFyX2NvbXBhY3Q+LmNrLXRvb2xiYXJfX2l0ZW1zPi5jazpmaXJzdC1jaGlsZHtib3JkZXItdG9wLWxlZnQtcmFkaXVzOjA7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czowfS5jay5jay10b29sYmFyW2Rpcj1ydGxdLmNrLXRvb2xiYXJfY29tcGFjdD4uY2stdG9vbGJhcl9faXRlbXM+LmNrOmxhc3QtY2hpbGQsW2Rpcj1ydGxdIC5jay5jay10b29sYmFyLmNrLXRvb2xiYXJfY29tcGFjdD4uY2stdG9vbGJhcl9faXRlbXM+LmNrOmxhc3QtY2hpbGR7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6MDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czowfS5jay5jay10b29sYmFyW2Rpcj1ydGxdPi5jay5jay10b29sYmFyX19zZXBhcmF0b3IsW2Rpcj1ydGxdIC5jay5jay10b29sYmFyPi5jay5jay10b29sYmFyX19zZXBhcmF0b3J7bWFyZ2luLWxlZnQ6dmFyKC0tY2stc3BhY2luZy1zbWFsbCl9LmNrLmNrLXRvb2xiYXJbZGlyPXJ0bF0uY2stdG9vbGJhcl9ncm91cGluZz4uY2stdG9vbGJhcl9faXRlbXM6bm90KDplbXB0eSk6bm90KDpvbmx5LWNoaWxkKSxbZGlyPXJ0bF0gLmNrLmNrLXRvb2xiYXIuY2stdG9vbGJhcl9ncm91cGluZz4uY2stdG9vbGJhcl9faXRlbXM6bm90KDplbXB0eSk6bm90KDpvbmx5LWNoaWxkKXttYXJnaW4tbGVmdDp2YXIoLS1jay1zcGFjaW5nLXNtYWxsKX0uY2suY2stdG9vbGJhcltkaXI9bHRyXT4uY2stdG9vbGJhcl9faXRlbXM+LmNrOmxhc3QtY2hpbGQsW2Rpcj1sdHJdIC5jay5jay10b29sYmFyPi5jay10b29sYmFyX19pdGVtcz4uY2s6bGFzdC1jaGlsZHttYXJnaW4tcmlnaHQ6MH0uY2suY2stdG9vbGJhcltkaXI9bHRyXS5jay10b29sYmFyX2NvbXBhY3Q+LmNrLXRvb2xiYXJfX2l0ZW1zPi5jazpmaXJzdC1jaGlsZCxbZGlyPWx0cl0gLmNrLmNrLXRvb2xiYXIuY2stdG9vbGJhcl9jb21wYWN0Pi5jay10b29sYmFyX19pdGVtcz4uY2s6Zmlyc3QtY2hpbGR7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6MDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czowfS5jay5jay10b29sYmFyW2Rpcj1sdHJdLmNrLXRvb2xiYXJfY29tcGFjdD4uY2stdG9vbGJhcl9faXRlbXM+LmNrOmxhc3QtY2hpbGQsW2Rpcj1sdHJdIC5jay5jay10b29sYmFyLmNrLXRvb2xiYXJfY29tcGFjdD4uY2stdG9vbGJhcl9faXRlbXM+LmNrOmxhc3QtY2hpbGR7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czowO2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MH0uY2suY2stdG9vbGJhcltkaXI9bHRyXT4uY2suY2stdG9vbGJhcl9fc2VwYXJhdG9yLFtkaXI9bHRyXSAuY2suY2stdG9vbGJhcj4uY2suY2stdG9vbGJhcl9fc2VwYXJhdG9ye21hcmdpbi1yaWdodDp2YXIoLS1jay1zcGFjaW5nLXNtYWxsKX0uY2suY2stdG9vbGJhcltkaXI9bHRyXS5jay10b29sYmFyX2dyb3VwaW5nPi5jay10b29sYmFyX19pdGVtczpub3QoOmVtcHR5KTpub3QoOm9ubHktY2hpbGQpLFtkaXI9bHRyXSAuY2suY2stdG9vbGJhci5jay10b29sYmFyX2dyb3VwaW5nPi5jay10b29sYmFyX19pdGVtczpub3QoOmVtcHR5KTpub3QoOm9ubHktY2hpbGQpe21hcmdpbi1yaWdodDp2YXIoLS1jay1zcGFjaW5nLXNtYWxsKX1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDQyKTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay5jay1wbGFjZWhvbGRlcjpiZWZvcmUsLmNrIC5jay1wbGFjZWhvbGRlcjpiZWZvcmV7Y29udGVudDphdHRyKGRhdGEtcGxhY2Vob2xkZXIpO3BvaW50ZXItZXZlbnRzOm5vbmV9LmNrLmNrLXJlYWQtb25seSAuY2stcGxhY2Vob2xkZXI6YmVmb3Jle2Rpc3BsYXk6bm9uZX0uY2suY2stcGxhY2Vob2xkZXI6YmVmb3JlLC5jayAuY2stcGxhY2Vob2xkZXI6YmVmb3Jle2N1cnNvcjp0ZXh0O2NvbG9yOnZhcigtLWNrLWNvbG9yLWVuZ2luZS1wbGFjZWhvbGRlci10ZXh0KX1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDQ0KTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay5jay1lZGl0b3JfX2VkaXRhYmxlOm5vdCguY2stZWRpdG9yX19uZXN0ZWQtZWRpdGFibGUpe2JvcmRlci1yYWRpdXM6MH0uY2stcm91bmRlZC1jb3JuZXJzIC5jay5jay1lZGl0b3JfX2VkaXRhYmxlOm5vdCguY2stZWRpdG9yX19uZXN0ZWQtZWRpdGFibGUpLC5jay5jay1lZGl0b3JfX2VkaXRhYmxlOm5vdCguY2stZWRpdG9yX19uZXN0ZWQtZWRpdGFibGUpLmNrLXJvdW5kZWQtY29ybmVyc3tib3JkZXItcmFkaXVzOnZhcigtLWNrLWJvcmRlci1yYWRpdXMpfS5jay5jay1lZGl0b3JfX2VkaXRhYmxlOm5vdCguY2stZWRpdG9yX19uZXN0ZWQtZWRpdGFibGUpLmNrLWZvY3VzZWR7b3V0bGluZTpub25lO2JvcmRlcjp2YXIoLS1jay1mb2N1cy1yaW5nKTtib3gtc2hhZG93OnZhcigtLWNrLWlubmVyLXNoYWRvdyksMCAwfS5jay5jay1lZGl0b3JfX2VkaXRhYmxlX2lubGluZXtvdmVyZmxvdzphdXRvO3BhZGRpbmc6MCB2YXIoLS1jay1zcGFjaW5nLXN0YW5kYXJkKTtib3JkZXI6MXB4IHNvbGlkIHRyYW5zcGFyZW50fS5jay5jay1lZGl0b3JfX2VkaXRhYmxlX2lubGluZVtkaXI9bHRyXXt0ZXh0LWFsaWduOmxlZnR9LmNrLmNrLWVkaXRvcl9fZWRpdGFibGVfaW5saW5lW2Rpcj1ydGxde3RleHQtYWxpZ246cmlnaHR9LmNrLmNrLWVkaXRvcl9fZWRpdGFibGVfaW5saW5lPjpmaXJzdC1jaGlsZHttYXJnaW4tdG9wOnZhcigtLWNrLXNwYWNpbmctbGFyZ2UpfS5jay5jay1lZGl0b3JfX2VkaXRhYmxlX2lubGluZT46bGFzdC1jaGlsZHttYXJnaW4tYm90dG9tOnZhcigtLWNrLXNwYWNpbmctbGFyZ2UpfS5jay5jay1iYWxsb29uLXBhbmVsLmNrLXRvb2xiYXItY29udGFpbmVyW2NsYXNzKj1hcnJvd19uXTphZnRlcntib3JkZXItYm90dG9tLWNvbG9yOnZhcigtLWNrLWNvbG9yLWJhc2UtZm9yZWdyb3VuZCl9LmNrLmNrLWJhbGxvb24tcGFuZWwuY2stdG9vbGJhci1jb250YWluZXJbY2xhc3MqPWFycm93X3NdOmFmdGVye2JvcmRlci10b3AtY29sb3I6dmFyKC0tY2stY29sb3ItYmFzZS1mb3JlZ3JvdW5kKX1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDQ2KTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay1jb250ZW50IGJsb2NrcXVvdGV7b3ZlcmZsb3c6aGlkZGVuO3BhZGRpbmctcmlnaHQ6MS41ZW07cGFkZGluZy1sZWZ0OjEuNWVtO21hcmdpbi1sZWZ0OjA7bWFyZ2luLXJpZ2h0OjA7Zm9udC1zdHlsZTppdGFsaWM7Ym9yZGVyLWxlZnQ6NXB4IHNvbGlkICNjY2N9LmNrLWNvbnRlbnRbZGlyPXJ0bF0gYmxvY2txdW90ZXtib3JkZXItbGVmdDowO2JvcmRlci1yaWdodDo1cHggc29saWQgI2NjY31cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDQ4KTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay5jay1jb2xvci1ncmlke2Rpc3BsYXk6Z3JpZH06cm9vdHstLWNrLWNvbG9yLWdyaWQtdGlsZS1zaXplOjI0cHg7LS1jay1jb2xvci1jb2xvci1ncmlkLWNoZWNrLWljb246IzAwMH0uY2suY2stY29sb3ItZ3JpZHtncmlkLWdhcDo1cHg7cGFkZGluZzo4cHh9LmNrLmNrLWNvbG9yLWdyaWRfX3RpbGV7d2lkdGg6dmFyKC0tY2stY29sb3ItZ3JpZC10aWxlLXNpemUpO2hlaWdodDp2YXIoLS1jay1jb2xvci1ncmlkLXRpbGUtc2l6ZSk7bWluLXdpZHRoOnZhcigtLWNrLWNvbG9yLWdyaWQtdGlsZS1zaXplKTttaW4taGVpZ2h0OnZhcigtLWNrLWNvbG9yLWdyaWQtdGlsZS1zaXplKTtwYWRkaW5nOjA7dHJhbnNpdGlvbjpib3gtc2hhZG93IC4ycyBlYXNlO2JvcmRlcjowfS5jay5jay1jb2xvci1ncmlkX190aWxlLmNrLWRpc2FibGVke2N1cnNvcjp1bnNldDt0cmFuc2l0aW9uOnVuc2V0fS5jay5jay1jb2xvci1ncmlkX190aWxlLmNrLWNvbG9yLXRhYmxlX19jb2xvci10aWxlX2JvcmRlcmVke2JveC1zaGFkb3c6MCAwIDAgMXB4IHZhcigtLWNrLWNvbG9yLWJhc2UtYm9yZGVyKX0uY2suY2stY29sb3ItZ3JpZF9fdGlsZSAuY2suY2staWNvbntkaXNwbGF5Om5vbmU7Y29sb3I6dmFyKC0tY2stY29sb3ItY29sb3ItZ3JpZC1jaGVjay1pY29uKX0uY2suY2stY29sb3ItZ3JpZF9fdGlsZS5jay1vbntib3gtc2hhZG93Omluc2V0IDAgMCAwIDFweCB2YXIoLS1jay1jb2xvci1iYXNlLWJhY2tncm91bmQpLDAgMCAwIDJweCB2YXIoLS1jay1jb2xvci1iYXNlLXRleHQpfS5jay5jay1jb2xvci1ncmlkX190aWxlLmNrLW9uIC5jay5jay1pY29ue2Rpc3BsYXk6YmxvY2t9LmNrLmNrLWNvbG9yLWdyaWRfX3RpbGUuY2stb24sLmNrLmNrLWNvbG9yLWdyaWRfX3RpbGU6Zm9jdXM6bm90KC5jay1kaXNhYmxlZCksLmNrLmNrLWNvbG9yLWdyaWRfX3RpbGU6aG92ZXI6bm90KC5jay1kaXNhYmxlZCl7Ym9yZGVyOjB9LmNrLmNrLWNvbG9yLWdyaWRfX3RpbGU6Zm9jdXM6bm90KC5jay1kaXNhYmxlZCksLmNrLmNrLWNvbG9yLWdyaWRfX3RpbGU6aG92ZXI6bm90KC5jay1kaXNhYmxlZCl7Ym94LXNoYWRvdzppbnNldCAwIDAgMCAxcHggdmFyKC0tY2stY29sb3ItYmFzZS1iYWNrZ3JvdW5kKSwwIDAgMCAycHggdmFyKC0tY2stY29sb3ItZm9jdXMtYm9yZGVyKX0uY2suY2stY29sb3ItZ3JpZF9fbGFiZWx7cGFkZGluZzowIHZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpfVwiXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIHZhciBuID0gaSgxKTtcclxuICAgICAgICB2YXIgbyA9IGkoNTApO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IFwiLmNrLmNrLWxhYmVse2Rpc3BsYXk6YmxvY2t9LmNrLmNrLXZvaWNlLWxhYmVse2Rpc3BsYXk6bm9uZX0uY2suY2stbGFiZWx7Zm9udC13ZWlnaHQ6NzAwfVwiXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIHZhciBuID0gaSgxKTtcclxuICAgICAgICB2YXIgbyA9IGkoNTIpO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IFwiLmNrIC5jay1idXR0b24uY2stY29sb3ItdGFibGVfX3JlbW92ZS1jb2xvcntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6Y2VudGVyO3dpZHRoOjEwMCV9bGFiZWwuY2suY2stY29sb3ItZ3JpZF9fbGFiZWx7Zm9udC13ZWlnaHQ6dW5zZXR9LmNrIC5jay1idXR0b24uY2stY29sb3ItdGFibGVfX3JlbW92ZS1jb2xvcntwYWRkaW5nOmNhbGModmFyKC0tY2stc3BhY2luZy1zdGFuZGFyZCkvMikgdmFyKC0tY2stc3BhY2luZy1zdGFuZGFyZCk7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czowO2JvcmRlci1ib3R0b20tcmlnaHQtcmFkaXVzOjB9LmNrIC5jay1idXR0b24uY2stY29sb3ItdGFibGVfX3JlbW92ZS1jb2xvcjpub3QoOmZvY3VzKXtib3JkZXItYm90dG9tOjFweCBzb2xpZCB2YXIoLS1jay1jb2xvci1iYXNlLWJvcmRlcil9W2Rpcj1sdHJdIC5jayAuY2stYnV0dG9uLmNrLWNvbG9yLXRhYmxlX19yZW1vdmUtY29sb3IgLmNrLmNrLWljb257bWFyZ2luLXJpZ2h0OnZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpfVtkaXI9cnRsXSAuY2sgLmNrLWJ1dHRvbi5jay1jb2xvci10YWJsZV9fcmVtb3ZlLWNvbG9yIC5jay5jay1pY29ue21hcmdpbi1sZWZ0OnZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpfVwiXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIHZhciBuID0gaSgxKTtcclxuICAgICAgICB2YXIgbyA9IGkoNTQpO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IFwiLnRleHQtdGlueXtmb250LXNpemU6LjdlbX0udGV4dC1zbWFsbHtmb250LXNpemU6Ljg1ZW19LnRleHQtYmlne2ZvbnQtc2l6ZToxLjRlbX0udGV4dC1odWdle2ZvbnQtc2l6ZToxLjhlbX1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay5jay1oZWFkaW5nX2hlYWRpbmcxe2ZvbnQtc2l6ZToyMHB4fS5jay5jay1oZWFkaW5nX2hlYWRpbmcye2ZvbnQtc2l6ZToxN3B4fS5jay5jay1oZWFkaW5nX2hlYWRpbmcze2ZvbnQtc2l6ZToxNHB4fS5ja1tjbGFzcyo9Y2staGVhZGluZ19oZWFkaW5nXXtmb250LXdlaWdodDo3MDB9LmNrLmNrLWRyb3Bkb3duLmNrLWhlYWRpbmctZHJvcGRvd24gLmNrLWRyb3Bkb3duX19idXR0b24gLmNrLWJ1dHRvbl9fbGFiZWx7d2lkdGg6OGVtfS5jay5jay1kcm9wZG93bi5jay1oZWFkaW5nLWRyb3Bkb3duIC5jay1kcm9wZG93bl9fcGFuZWwgLmNrLWxpc3RfX2l0ZW17bWluLXdpZHRoOjE4ZW19XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSg1Nyk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCIuY2stZWRpdG9yX19lZGl0YWJsZSAuY2staG9yaXpvbnRhbC1saW5le292ZXJmbG93OmhpZGRlbn0uY2stY29udGVudCBocntib3JkZXI6c29saWQgIzVlNWU1ZTtib3JkZXItd2lkdGg6MXB4IDAgMDttYXJnaW46MH0uY2stZWRpdG9yX19lZGl0YWJsZSAuY2staG9yaXpvbnRhbC1saW5le3BhZGRpbmc6NXB4IDB9XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSg1OSk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCI6cm9vdHstLWNrLWNvbG9yLXJlc2l6ZXI6dmFyKC0tY2stY29sb3ItZm9jdXMtYm9yZGVyKTstLWNrLXJlc2l6ZXItc2l6ZToxMHB4Oy0tY2stcmVzaXplci1ib3JkZXItd2lkdGg6MXB4Oy0tY2stcmVzaXplci1ib3JkZXItcmFkaXVzOjJweDstLWNrLXJlc2l6ZXItb2Zmc2V0OmNhbGModmFyKC0tY2stcmVzaXplci1zaXplKS8tMiAtIDJweCk7LS1jay1yZXNpemVyLXRvb2x0aXAtb2Zmc2V0OjEwcHg7LS1jay1jb2xvci1yZXNpemVyLXRvb2x0aXAtYmFja2dyb3VuZDojMjYyNjI2Oy0tY2stY29sb3ItcmVzaXplci10b29sdGlwLXRleHQ6I2YyZjJmMn0uY2sgLmNrLXdpZGdldC5jay13aWRnZXRfd2l0aC1zZWxlY3Rpb24taGFuZGxle3Bvc2l0aW9uOnJlbGF0aXZlfS5jayAuY2std2lkZ2V0LmNrLXdpZGdldF93aXRoLXNlbGVjdGlvbi1oYW5kbGUgLmNrLXdpZGdldF9fc2VsZWN0aW9uLWhhbmRsZXtwb3NpdGlvbjphYnNvbHV0ZX0uY2sgLmNrLXdpZGdldC5jay13aWRnZXRfd2l0aC1zZWxlY3Rpb24taGFuZGxlIC5jay13aWRnZXRfX3NlbGVjdGlvbi1oYW5kbGUgLmNrLWljb257ZGlzcGxheTpibG9ja30uY2sgLmNrLXdpZGdldC5jay13aWRnZXRfd2l0aC1zZWxlY3Rpb24taGFuZGxlLmNrLXdpZGdldF9zZWxlY3RlZCAuY2std2lkZ2V0X19zZWxlY3Rpb24taGFuZGxlLC5jayAuY2std2lkZ2V0LmNrLXdpZGdldF93aXRoLXNlbGVjdGlvbi1oYW5kbGU6aG92ZXIgLmNrLXdpZGdldF9fc2VsZWN0aW9uLWhhbmRsZXt2aXNpYmlsaXR5OnZpc2libGV9LmNrIC5jay1zaXplLXZpZXd7YmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1yZXNpemVyLXRvb2x0aXAtYmFja2dyb3VuZCk7Y29sb3I6dmFyKC0tY2stY29sb3ItcmVzaXplci10b29sdGlwLXRleHQpO2JvcmRlcjoxcHggc29saWQgdmFyKC0tY2stY29sb3ItcmVzaXplci10b29sdGlwLXRleHQpO2JvcmRlci1yYWRpdXM6dmFyKC0tY2stcmVzaXplci1ib3JkZXItcmFkaXVzKTtmb250LXNpemU6dmFyKC0tY2stZm9udC1zaXplLXRpbnkpO2Rpc3BsYXk6YmxvY2s7cGFkZGluZzp2YXIoLS1jay1zcGFjaW5nLXNtYWxsKX0uY2sgLmNrLXNpemUtdmlldy5jay1vcmllbnRhdGlvbi1ib3R0b20tbGVmdCwuY2sgLmNrLXNpemUtdmlldy5jay1vcmllbnRhdGlvbi1ib3R0b20tcmlnaHQsLmNrIC5jay1zaXplLXZpZXcuY2stb3JpZW50YXRpb24tdG9wLWxlZnQsLmNrIC5jay1zaXplLXZpZXcuY2stb3JpZW50YXRpb24tdG9wLXJpZ2h0e3Bvc2l0aW9uOmFic29sdXRlfS5jayAuY2stc2l6ZS12aWV3LmNrLW9yaWVudGF0aW9uLXRvcC1sZWZ0e3RvcDp2YXIoLS1jay1yZXNpemVyLXRvb2x0aXAtb2Zmc2V0KTtsZWZ0OnZhcigtLWNrLXJlc2l6ZXItdG9vbHRpcC1vZmZzZXQpfS5jayAuY2stc2l6ZS12aWV3LmNrLW9yaWVudGF0aW9uLXRvcC1yaWdodHt0b3A6dmFyKC0tY2stcmVzaXplci10b29sdGlwLW9mZnNldCk7cmlnaHQ6dmFyKC0tY2stcmVzaXplci10b29sdGlwLW9mZnNldCl9LmNrIC5jay1zaXplLXZpZXcuY2stb3JpZW50YXRpb24tYm90dG9tLXJpZ2h0e2JvdHRvbTp2YXIoLS1jay1yZXNpemVyLXRvb2x0aXAtb2Zmc2V0KTtyaWdodDp2YXIoLS1jay1yZXNpemVyLXRvb2x0aXAtb2Zmc2V0KX0uY2sgLmNrLXNpemUtdmlldy5jay1vcmllbnRhdGlvbi1ib3R0b20tbGVmdHtib3R0b206dmFyKC0tY2stcmVzaXplci10b29sdGlwLW9mZnNldCk7bGVmdDp2YXIoLS1jay1yZXNpemVyLXRvb2x0aXAtb2Zmc2V0KX06cm9vdHstLWNrLXdpZGdldC1vdXRsaW5lLXRoaWNrbmVzczozcHg7LS1jay13aWRnZXQtaGFuZGxlci1pY29uLXNpemU6MTZweDstLWNrLXdpZGdldC1oYW5kbGVyLWFuaW1hdGlvbi1kdXJhdGlvbjoyMDBtczstLWNrLXdpZGdldC1oYW5kbGVyLWFuaW1hdGlvbi1jdXJ2ZTplYXNlOy0tY2stY29sb3Itd2lkZ2V0LWJsdXJyZWQtYm9yZGVyOiNkZWRlZGU7LS1jay1jb2xvci13aWRnZXQtaG92ZXItYm9yZGVyOiNmZmM4M2Q7LS1jay1jb2xvci13aWRnZXQtZWRpdGFibGUtZm9jdXMtYmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1iYXNlLWJhY2tncm91bmQpOy0tY2stY29sb3Itd2lkZ2V0LWRyYWctaGFuZGxlci1pY29uLWNvbG9yOnZhcigtLWNrLWNvbG9yLWJhc2UtYmFja2dyb3VuZCl9LmNrIC5jay13aWRnZXR7b3V0bGluZS13aWR0aDp2YXIoLS1jay13aWRnZXQtb3V0bGluZS10aGlja25lc3MpO291dGxpbmUtc3R5bGU6c29saWQ7b3V0bGluZS1jb2xvcjp0cmFuc3BhcmVudDt0cmFuc2l0aW9uOm91dGxpbmUtY29sb3IgdmFyKC0tY2std2lkZ2V0LWhhbmRsZXItYW5pbWF0aW9uLWR1cmF0aW9uKSB2YXIoLS1jay13aWRnZXQtaGFuZGxlci1hbmltYXRpb24tY3VydmUpfS5jayAuY2std2lkZ2V0LmNrLXdpZGdldF9zZWxlY3RlZCwuY2sgLmNrLXdpZGdldC5jay13aWRnZXRfc2VsZWN0ZWQ6aG92ZXJ7b3V0bGluZTp2YXIoLS1jay13aWRnZXQtb3V0bGluZS10aGlja25lc3MpIHNvbGlkIHZhcigtLWNrLWNvbG9yLWZvY3VzLWJvcmRlcil9LmNrIC5jay13aWRnZXQ6aG92ZXJ7b3V0bGluZS1jb2xvcjp2YXIoLS1jay1jb2xvci13aWRnZXQtaG92ZXItYm9yZGVyKX0uY2sgLmNrLWVkaXRvcl9fbmVzdGVkLWVkaXRhYmxle2JvcmRlcjoxcHggc29saWQgdHJhbnNwYXJlbnR9LmNrIC5jay1lZGl0b3JfX25lc3RlZC1lZGl0YWJsZS5jay1lZGl0b3JfX25lc3RlZC1lZGl0YWJsZV9mb2N1c2VkLC5jayAuY2stZWRpdG9yX19uZXN0ZWQtZWRpdGFibGU6Zm9jdXN7b3V0bGluZTpub25lO2JvcmRlcjp2YXIoLS1jay1mb2N1cy1yaW5nKTtib3gtc2hhZG93OnZhcigtLWNrLWlubmVyLXNoYWRvdyksMCAwO2JhY2tncm91bmQtY29sb3I6dmFyKC0tY2stY29sb3Itd2lkZ2V0LWVkaXRhYmxlLWZvY3VzLWJhY2tncm91bmQpfS5jayAuY2std2lkZ2V0LmNrLXdpZGdldF93aXRoLXNlbGVjdGlvbi1oYW5kbGUgLmNrLXdpZGdldF9fc2VsZWN0aW9uLWhhbmRsZXtwYWRkaW5nOjRweDtib3gtc2l6aW5nOmJvcmRlci1ib3g7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDtvcGFjaXR5OjA7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIHZhcigtLWNrLXdpZGdldC1oYW5kbGVyLWFuaW1hdGlvbi1kdXJhdGlvbikgdmFyKC0tY2std2lkZ2V0LWhhbmRsZXItYW5pbWF0aW9uLWN1cnZlKSx2aXNpYmlsaXR5IHZhcigtLWNrLXdpZGdldC1oYW5kbGVyLWFuaW1hdGlvbi1kdXJhdGlvbikgdmFyKC0tY2std2lkZ2V0LWhhbmRsZXItYW5pbWF0aW9uLWN1cnZlKSxvcGFjaXR5IHZhcigtLWNrLXdpZGdldC1oYW5kbGVyLWFuaW1hdGlvbi1kdXJhdGlvbikgdmFyKC0tY2std2lkZ2V0LWhhbmRsZXItYW5pbWF0aW9uLWN1cnZlKTtib3JkZXItcmFkaXVzOnZhcigtLWNrLWJvcmRlci1yYWRpdXMpIHZhcigtLWNrLWJvcmRlci1yYWRpdXMpIDAgMDt0cmFuc2Zvcm06dHJhbnNsYXRlWSgtMTAwJSk7bGVmdDpjYWxjKDBweCAtIHZhcigtLWNrLXdpZGdldC1vdXRsaW5lLXRoaWNrbmVzcykpfS5jayAuY2std2lkZ2V0LmNrLXdpZGdldF93aXRoLXNlbGVjdGlvbi1oYW5kbGUgLmNrLXdpZGdldF9fc2VsZWN0aW9uLWhhbmRsZSAuY2staWNvbnt3aWR0aDp2YXIoLS1jay13aWRnZXQtaGFuZGxlci1pY29uLXNpemUpO2hlaWdodDp2YXIoLS1jay13aWRnZXQtaGFuZGxlci1pY29uLXNpemUpO2NvbG9yOnZhcigtLWNrLWNvbG9yLXdpZGdldC1kcmFnLWhhbmRsZXItaWNvbi1jb2xvcil9LmNrIC5jay13aWRnZXQuY2std2lkZ2V0X3dpdGgtc2VsZWN0aW9uLWhhbmRsZSAuY2std2lkZ2V0X19zZWxlY3Rpb24taGFuZGxlIC5jay1pY29uIC5jay1pY29uX19zZWxlY3RlZC1pbmRpY2F0b3J7b3BhY2l0eTowO3RyYW5zaXRpb246b3BhY2l0eSAuM3MgdmFyKC0tY2std2lkZ2V0LWhhbmRsZXItYW5pbWF0aW9uLWN1cnZlKX0uY2sgLmNrLXdpZGdldC5jay13aWRnZXRfd2l0aC1zZWxlY3Rpb24taGFuZGxlIC5jay13aWRnZXRfX3NlbGVjdGlvbi1oYW5kbGU6aG92ZXIgLmNrLWljb24gLmNrLWljb25fX3NlbGVjdGVkLWluZGljYXRvcntvcGFjaXR5OjF9LmNrIC5jay13aWRnZXQuY2std2lkZ2V0X3dpdGgtc2VsZWN0aW9uLWhhbmRsZTpob3ZlciAuY2std2lkZ2V0X19zZWxlY3Rpb24taGFuZGxle29wYWNpdHk6MTtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLWNrLWNvbG9yLXdpZGdldC1ob3Zlci1ib3JkZXIpfS5jayAuY2std2lkZ2V0LmNrLXdpZGdldF93aXRoLXNlbGVjdGlvbi1oYW5kbGUuY2std2lkZ2V0X3NlbGVjdGVkIC5jay13aWRnZXRfX3NlbGVjdGlvbi1oYW5kbGUsLmNrIC5jay13aWRnZXQuY2std2lkZ2V0X3dpdGgtc2VsZWN0aW9uLWhhbmRsZS5jay13aWRnZXRfc2VsZWN0ZWQ6aG92ZXIgLmNrLXdpZGdldF9fc2VsZWN0aW9uLWhhbmRsZXtvcGFjaXR5OjE7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jay1jb2xvci1mb2N1cy1ib3JkZXIpfS5jayAuY2std2lkZ2V0LmNrLXdpZGdldF93aXRoLXNlbGVjdGlvbi1oYW5kbGUuY2std2lkZ2V0X3NlbGVjdGVkIC5jay13aWRnZXRfX3NlbGVjdGlvbi1oYW5kbGUgLmNrLWljb24gLmNrLWljb25fX3NlbGVjdGVkLWluZGljYXRvciwuY2sgLmNrLXdpZGdldC5jay13aWRnZXRfd2l0aC1zZWxlY3Rpb24taGFuZGxlLmNrLXdpZGdldF9zZWxlY3RlZDpob3ZlciAuY2std2lkZ2V0X19zZWxlY3Rpb24taGFuZGxlIC5jay1pY29uIC5jay1pY29uX19zZWxlY3RlZC1pbmRpY2F0b3J7b3BhY2l0eToxfS5jay1lZGl0b3JfX2VkaXRhYmxlPi5jay13aWRnZXQuY2std2lkZ2V0X3dpdGgtc2VsZWN0aW9uLWhhbmRsZTpmaXJzdC1jaGlsZCwuY2stZWRpdG9yX19lZGl0YWJsZSBibG9ja3F1b3RlPi5jay13aWRnZXQuY2std2lkZ2V0X3dpdGgtc2VsZWN0aW9uLWhhbmRsZTpmaXJzdC1jaGlsZHttYXJnaW4tdG9wOmNhbGMoMWVtICsgdmFyKC0tY2std2lkZ2V0LWhhbmRsZXItaWNvbi1zaXplKSl9LmNrW2Rpcj1ydGxdIC5jay13aWRnZXQuY2std2lkZ2V0X3dpdGgtc2VsZWN0aW9uLWhhbmRsZSAuY2std2lkZ2V0X19zZWxlY3Rpb24taGFuZGxle2xlZnQ6YXV0bztyaWdodDpjYWxjKDBweCAtIHZhcigtLWNrLXdpZGdldC1vdXRsaW5lLXRoaWNrbmVzcykpfS5jay1lZGl0b3JfX2VkaXRhYmxlLmNrLWJsdXJyZWQgLmNrLXdpZGdldC5jay13aWRnZXRfc2VsZWN0ZWQsLmNrLWVkaXRvcl9fZWRpdGFibGUuY2stYmx1cnJlZCAuY2std2lkZ2V0LmNrLXdpZGdldF9zZWxlY3RlZDpob3ZlcntvdXRsaW5lLWNvbG9yOnZhcigtLWNrLWNvbG9yLXdpZGdldC1ibHVycmVkLWJvcmRlcil9LmNrLWVkaXRvcl9fZWRpdGFibGUuY2stYmx1cnJlZCAuY2std2lkZ2V0LmNrLXdpZGdldF9zZWxlY3RlZC5jay13aWRnZXRfd2l0aC1zZWxlY3Rpb24taGFuZGxlIC5jay13aWRnZXRfX3NlbGVjdGlvbi1oYW5kbGUsLmNrLWVkaXRvcl9fZWRpdGFibGUuY2stYmx1cnJlZCAuY2std2lkZ2V0LmNrLXdpZGdldF9zZWxlY3RlZC5jay13aWRnZXRfd2l0aC1zZWxlY3Rpb24taGFuZGxlIC5jay13aWRnZXRfX3NlbGVjdGlvbi1oYW5kbGU6aG92ZXIsLmNrLWVkaXRvcl9fZWRpdGFibGUuY2stYmx1cnJlZCAuY2std2lkZ2V0LmNrLXdpZGdldF9zZWxlY3RlZDpob3Zlci5jay13aWRnZXRfd2l0aC1zZWxlY3Rpb24taGFuZGxlIC5jay13aWRnZXRfX3NlbGVjdGlvbi1oYW5kbGUsLmNrLWVkaXRvcl9fZWRpdGFibGUuY2stYmx1cnJlZCAuY2std2lkZ2V0LmNrLXdpZGdldF9zZWxlY3RlZDpob3Zlci5jay13aWRnZXRfd2l0aC1zZWxlY3Rpb24taGFuZGxlIC5jay13aWRnZXRfX3NlbGVjdGlvbi1oYW5kbGU6aG92ZXJ7YmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci13aWRnZXQtYmx1cnJlZC1ib3JkZXIpfS5jay1lZGl0b3JfX2VkaXRhYmxlLmNrLXJlYWQtb25seSAuY2std2lkZ2V0ey0tY2std2lkZ2V0LW91dGxpbmUtdGhpY2tuZXNzOjB9XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSg2MSk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCIuY2suY2stbGFiZWxlZC1pbnB1dCAuY2stbGFiZWxlZC1pbnB1dF9fc3RhdHVze2ZvbnQtc2l6ZTp2YXIoLS1jay1mb250LXNpemUtc21hbGwpO21hcmdpbi10b3A6dmFyKC0tY2stc3BhY2luZy1zbWFsbCk7d2hpdGUtc3BhY2U6bm9ybWFsfS5jay5jay1sYWJlbGVkLWlucHV0IC5jay1sYWJlbGVkLWlucHV0X19zdGF0dXNfZXJyb3J7Y29sb3I6dmFyKC0tY2stY29sb3ItYmFzZS1lcnJvcil9XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSg2Myk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCI6cm9vdHstLWNrLWlucHV0LXRleHQtd2lkdGg6MThlbX0uY2suY2staW5wdXQtdGV4dHtib3JkZXItcmFkaXVzOjB9LmNrLXJvdW5kZWQtY29ybmVycyAuY2suY2staW5wdXQtdGV4dCwuY2suY2staW5wdXQtdGV4dC5jay1yb3VuZGVkLWNvcm5lcnN7Ym9yZGVyLXJhZGl1czp2YXIoLS1jay1ib3JkZXItcmFkaXVzKX0uY2suY2staW5wdXQtdGV4dHtib3gtc2hhZG93OnZhcigtLWNrLWlubmVyLXNoYWRvdyksMCAwO2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItaW5wdXQtYmFja2dyb3VuZCk7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1jay1jb2xvci1pbnB1dC1ib3JkZXIpO3BhZGRpbmc6dmFyKC0tY2stc3BhY2luZy1leHRyYS10aW55KSB2YXIoLS1jay1zcGFjaW5nLW1lZGl1bSk7bWluLXdpZHRoOnZhcigtLWNrLWlucHV0LXRleHQtd2lkdGgpO21pbi1oZWlnaHQ6dmFyKC0tY2stdWktY29tcG9uZW50LW1pbi1oZWlnaHQpO3RyYW5zaXRpb246Ym94LXNoYWRvdyAuMnMgZWFzZS1pbi1vdXQsYm9yZGVyIC4ycyBlYXNlLWluLW91dH0uY2suY2staW5wdXQtdGV4dDpmb2N1c3tvdXRsaW5lOm5vbmU7Ym9yZGVyOnZhcigtLWNrLWZvY3VzLXJpbmcpO2JveC1zaGFkb3c6dmFyKC0tY2stZm9jdXMtb3V0ZXItc2hhZG93KSx2YXIoLS1jay1pbm5lci1zaGFkb3cpfS5jay5jay1pbnB1dC10ZXh0W3JlYWRvbmx5XXtib3JkZXI6MXB4IHNvbGlkIHZhcigtLWNrLWNvbG9yLWlucHV0LWRpc2FibGVkLWJvcmRlcik7YmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1pbnB1dC1kaXNhYmxlZC1iYWNrZ3JvdW5kKTtjb2xvcjp2YXIoLS1jay1jb2xvci1pbnB1dC1kaXNhYmxlZC10ZXh0KX0uY2suY2staW5wdXQtdGV4dFtyZWFkb25seV06Zm9jdXN7Ym94LXNoYWRvdzp2YXIoLS1jay1mb2N1cy1kaXNhYmxlZC1vdXRlci1zaGFkb3cpLHZhcigtLWNrLWlubmVyLXNoYWRvdyl9LmNrLmNrLWlucHV0LXRleHQuY2stZXJyb3J7Ym9yZGVyLWNvbG9yOnZhcigtLWNrLWNvbG9yLWlucHV0LWVycm9yLWJvcmRlcik7YW5pbWF0aW9uOmNrLXRleHQtaW5wdXQtc2hha2UgLjNzIGVhc2UgYm90aH0uY2suY2staW5wdXQtdGV4dC5jay1lcnJvcjpmb2N1c3tib3gtc2hhZG93OnZhcigtLWNrLWZvY3VzLWVycm9yLW91dGVyLXNoYWRvdyksdmFyKC0tY2staW5uZXItc2hhZG93KX1Aa2V5ZnJhbWVzIGNrLXRleHQtaW5wdXQtc2hha2V7MjAle3RyYW5zZm9ybTp0cmFuc2xhdGVYKC0ycHgpfTQwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgycHgpfTYwJXt0cmFuc2Zvcm06dHJhbnNsYXRlWCgtMXB4KX04MCV7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoMXB4KX19XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSg2NSk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCIuY2suY2stdGV4dC1hbHRlcm5hdGl2ZS1mb3Jte2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC13cmFwOm5vd3JhcH0uY2suY2stdGV4dC1hbHRlcm5hdGl2ZS1mb3JtIC5jay1sYWJlbGVkLWlucHV0e2Rpc3BsYXk6aW5saW5lLWJsb2NrfS5jay5jay10ZXh0LWFsdGVybmF0aXZlLWZvcm0gLmNrLWxhYmVse2Rpc3BsYXk6bm9uZX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjYwMHB4KXsuY2suY2stdGV4dC1hbHRlcm5hdGl2ZS1mb3Jte2ZsZXgtd3JhcDp3cmFwfS5jay5jay10ZXh0LWFsdGVybmF0aXZlLWZvcm0gLmNrLWxhYmVsZWQtaW5wdXR7ZmxleC1iYXNpczoxMDAlfS5jay5jay10ZXh0LWFsdGVybmF0aXZlLWZvcm0gLmNrLWJ1dHRvbntmbGV4LWJhc2lzOjUwJX19LmNrLmNrLXRleHQtYWx0ZXJuYXRpdmUtZm9ybXtwYWRkaW5nOnZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpfS5jay5jay10ZXh0LWFsdGVybmF0aXZlLWZvcm06Zm9jdXN7b3V0bGluZTpub25lfVtkaXI9bHRyXSAuY2suY2stdGV4dC1hbHRlcm5hdGl2ZS1mb3JtPjpub3QoOmZpcnN0LWNoaWxkKSxbZGlyPXJ0bF0gLmNrLmNrLXRleHQtYWx0ZXJuYXRpdmUtZm9ybT46bm90KDpsYXN0LWNoaWxkKXttYXJnaW4tbGVmdDp2YXIoLS1jay1zcGFjaW5nLXN0YW5kYXJkKX1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjYwMHB4KXsuY2suY2stdGV4dC1hbHRlcm5hdGl2ZS1mb3Jte3BhZGRpbmc6MDt3aWR0aDpjYWxjKDAuOCp2YXIoLS1jay1pbnB1dC10ZXh0LXdpZHRoKSl9LmNrLmNrLXRleHQtYWx0ZXJuYXRpdmUtZm9ybSAuY2stbGFiZWxlZC1pbnB1dHttYXJnaW46dmFyKC0tY2stc3BhY2luZy1zdGFuZGFyZCkgdmFyKC0tY2stc3BhY2luZy1zdGFuZGFyZCkgMH0uY2suY2stdGV4dC1hbHRlcm5hdGl2ZS1mb3JtIC5jay1sYWJlbGVkLWlucHV0IC5jay1pbnB1dC10ZXh0e21pbi13aWR0aDowO3dpZHRoOjEwMCV9LmNrLmNrLXRleHQtYWx0ZXJuYXRpdmUtZm9ybSAuY2stYnV0dG9ue3BhZGRpbmc6dmFyKC0tY2stc3BhY2luZy1zdGFuZGFyZCk7bWFyZ2luLXRvcDp2YXIoLS1jay1zcGFjaW5nLXN0YW5kYXJkKTtib3JkZXItcmFkaXVzOjA7Ym9yZGVyOjA7Ym9yZGVyLXRvcDoxcHggc29saWQgdmFyKC0tY2stY29sb3ItYmFzZS1ib3JkZXIpfVtkaXI9bHRyXSAuY2suY2stdGV4dC1hbHRlcm5hdGl2ZS1mb3JtIC5jay1idXR0b257bWFyZ2luLWxlZnQ6MH1bZGlyPWx0cl0gLmNrLmNrLXRleHQtYWx0ZXJuYXRpdmUtZm9ybSAuY2stYnV0dG9uOmZpcnN0LW9mLXR5cGV7Ym9yZGVyLXJpZ2h0OjFweCBzb2xpZCB2YXIoLS1jay1jb2xvci1iYXNlLWJvcmRlcil9W2Rpcj1ydGxdIC5jay5jay10ZXh0LWFsdGVybmF0aXZlLWZvcm0gLmNrLWJ1dHRvbnttYXJnaW4tbGVmdDowfVtkaXI9cnRsXSAuY2suY2stdGV4dC1hbHRlcm5hdGl2ZS1mb3JtIC5jay1idXR0b246bGFzdC1vZi10eXBle2JvcmRlci1yaWdodDoxcHggc29saWQgdmFyKC0tY2stY29sb3ItYmFzZS1ib3JkZXIpfX1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDY3KTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay1jb250ZW50IC5pbWFnZXtkaXNwbGF5OnRhYmxlO2NsZWFyOmJvdGg7dGV4dC1hbGlnbjpjZW50ZXI7bWFyZ2luOjFlbSBhdXRvfS5jay1jb250ZW50IC5pbWFnZT5pbWd7ZGlzcGxheTpibG9jazttYXJnaW46MCBhdXRvO21heC13aWR0aDoxMDAlO21pbi13aWR0aDo1MHB4fVwiXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIHZhciBuID0gaSgxKTtcclxuICAgICAgICB2YXIgbyA9IGkoNjkpO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IFwiOnJvb3R7LS1jay1pbWFnZS1zdHlsZS1zcGFjaW5nOjEuNWVtfS5jay1jb250ZW50IC5pbWFnZS1zdHlsZS1hbGlnbi1jZW50ZXIsLmNrLWNvbnRlbnQgLmltYWdlLXN0eWxlLWFsaWduLWxlZnQsLmNrLWNvbnRlbnQgLmltYWdlLXN0eWxlLWFsaWduLXJpZ2h0LC5jay1jb250ZW50IC5pbWFnZS1zdHlsZS1zaWRle21heC13aWR0aDo1MCV9LmNrLWNvbnRlbnQgLmltYWdlLXN0eWxlLXNpZGV7ZmxvYXQ6cmlnaHQ7bWFyZ2luLWxlZnQ6dmFyKC0tY2staW1hZ2Utc3R5bGUtc3BhY2luZyl9LmNrLWNvbnRlbnQgLmltYWdlLXN0eWxlLWFsaWduLWxlZnR7ZmxvYXQ6bGVmdDttYXJnaW4tcmlnaHQ6dmFyKC0tY2staW1hZ2Utc3R5bGUtc3BhY2luZyl9LmNrLWNvbnRlbnQgLmltYWdlLXN0eWxlLWFsaWduLWNlbnRlcnttYXJnaW4tbGVmdDphdXRvO21hcmdpbi1yaWdodDphdXRvfS5jay1jb250ZW50IC5pbWFnZS1zdHlsZS1hbGlnbi1yaWdodHtmbG9hdDpyaWdodDttYXJnaW4tbGVmdDp2YXIoLS1jay1pbWFnZS1zdHlsZS1zcGFjaW5nKX1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDcxKTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jayAuY2std2lkZ2V0X3dpdGgtcmVzaXplcntwb3NpdGlvbjpyZWxhdGl2ZX0uY2sgLmNrLXdpZGdldF9fcmVzaXplcntkaXNwbGF5Om5vbmU7cG9zaXRpb246YWJzb2x1dGU7cG9pbnRlci1ldmVudHM6bm9uZTtsZWZ0OjA7dG9wOjA7b3V0bGluZToxcHggc29saWQgdmFyKC0tY2stY29sb3ItcmVzaXplcil9LmNrLWZvY3VzZWQgLmNrLXdpZGdldF93aXRoLXJlc2l6ZXIuY2std2lkZ2V0X3NlbGVjdGVkPi5jay13aWRnZXRfX3Jlc2l6ZXJ7ZGlzcGxheTpibG9ja30uY2sgLmNrLXdpZGdldF9fcmVzaXplcl9faGFuZGxle3Bvc2l0aW9uOmFic29sdXRlO3BvaW50ZXItZXZlbnRzOmFsbDt3aWR0aDp2YXIoLS1jay1yZXNpemVyLXNpemUpO2hlaWdodDp2YXIoLS1jay1yZXNpemVyLXNpemUpO2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItZm9jdXMtYm9yZGVyKTtib3JkZXI6dmFyKC0tY2stcmVzaXplci1ib3JkZXItd2lkdGgpIHNvbGlkICNmZmY7Ym9yZGVyLXJhZGl1czp2YXIoLS1jay1yZXNpemVyLWJvcmRlci1yYWRpdXMpfS5jayAuY2std2lkZ2V0X19yZXNpemVyX19oYW5kbGUuY2std2lkZ2V0X19yZXNpemVyX19oYW5kbGUtdG9wLWxlZnR7dG9wOnZhcigtLWNrLXJlc2l6ZXItb2Zmc2V0KTtsZWZ0OnZhcigtLWNrLXJlc2l6ZXItb2Zmc2V0KTtjdXJzb3I6bndzZS1yZXNpemV9LmNrIC5jay13aWRnZXRfX3Jlc2l6ZXJfX2hhbmRsZS5jay13aWRnZXRfX3Jlc2l6ZXJfX2hhbmRsZS10b3AtcmlnaHR7dG9wOnZhcigtLWNrLXJlc2l6ZXItb2Zmc2V0KTtyaWdodDp2YXIoLS1jay1yZXNpemVyLW9mZnNldCk7Y3Vyc29yOm5lc3ctcmVzaXplfS5jayAuY2std2lkZ2V0X19yZXNpemVyX19oYW5kbGUuY2std2lkZ2V0X19yZXNpemVyX19oYW5kbGUtYm90dG9tLXJpZ2h0e2JvdHRvbTp2YXIoLS1jay1yZXNpemVyLW9mZnNldCk7cmlnaHQ6dmFyKC0tY2stcmVzaXplci1vZmZzZXQpO2N1cnNvcjpud3NlLXJlc2l6ZX0uY2sgLmNrLXdpZGdldF9fcmVzaXplcl9faGFuZGxlLmNrLXdpZGdldF9fcmVzaXplcl9faGFuZGxlLWJvdHRvbS1sZWZ0e2JvdHRvbTp2YXIoLS1jay1yZXNpemVyLW9mZnNldCk7bGVmdDp2YXIoLS1jay1yZXNpemVyLW9mZnNldCk7Y3Vyc29yOm5lc3ctcmVzaXplfVwiXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIHZhciBuID0gaSgxKTtcclxuICAgICAgICB2YXIgbyA9IGkoNzMpO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IFwiLmNrLWNvbnRlbnQgLmltYWdlLmltYWdlX3Jlc2l6ZWR7bWF4LXdpZHRoOjEwMCU7ZGlzcGxheTpibG9jaztib3gtc2l6aW5nOmJvcmRlci1ib3h9LmNrLWNvbnRlbnQgLmltYWdlLmltYWdlX3Jlc2l6ZWQgaW1ne3dpZHRoOjEwMCV9LmNrLWNvbnRlbnQgLmltYWdlLmltYWdlX3Jlc2l6ZWQ+ZmlnY2FwdGlvbntkaXNwbGF5OmJsb2NrfVwiXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIHZhciBuID0gaSgxKTtcclxuICAgICAgICB2YXIgbyA9IGkoNzUpO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IFwiLmNrLmNrLWVkaXRvcl9fZWRpdGFibGUgLmltYWdle3Bvc2l0aW9uOnJlbGF0aXZlfS5jay5jay1lZGl0b3JfX2VkaXRhYmxlIC5pbWFnZSAuY2stcHJvZ3Jlc3MtYmFye3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MH0uY2suY2stZWRpdG9yX19lZGl0YWJsZSAuaW1hZ2UuY2stYXBwZWFye2FuaW1hdGlvbjpmYWRlSW4gLjdzfS5jay5jay1lZGl0b3JfX2VkaXRhYmxlIC5pbWFnZSAuY2stcHJvZ3Jlc3MtYmFye2hlaWdodDoycHg7d2lkdGg6MDtiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLXVwbG9hZC1iYXItYmFja2dyb3VuZCk7dHJhbnNpdGlvbjp3aWR0aCAuMXN9QGtleWZyYW1lcyBmYWRlSW57MCV7b3BhY2l0eTowfXRve29wYWNpdHk6MX19XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSg3Nyk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gJy5jay1pbWFnZS11cGxvYWQtY29tcGxldGUtaWNvbntkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO3RvcDoxMHB4O3JpZ2h0OjEwcHg7Ym9yZGVyLXJhZGl1czo1MCV9LmNrLWltYWdlLXVwbG9hZC1jb21wbGV0ZS1pY29uOmFmdGVye2NvbnRlbnQ6XCJcIjtwb3NpdGlvbjphYnNvbHV0ZX06cm9vdHstLWNrLWNvbG9yLWltYWdlLXVwbG9hZC1pY29uOiNmZmY7LS1jay1jb2xvci1pbWFnZS11cGxvYWQtaWNvbi1iYWNrZ3JvdW5kOiMwMDhhMDA7LS1jay1pbWFnZS11cGxvYWQtaWNvbi1zaXplOjIwcHg7LS1jay1pbWFnZS11cGxvYWQtaWNvbi13aWR0aDoycHh9LmNrLWltYWdlLXVwbG9hZC1jb21wbGV0ZS1pY29ue3dpZHRoOnZhcigtLWNrLWltYWdlLXVwbG9hZC1pY29uLXNpemUpO2hlaWdodDp2YXIoLS1jay1pbWFnZS11cGxvYWQtaWNvbi1zaXplKTtvcGFjaXR5OjA7YmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1pbWFnZS11cGxvYWQtaWNvbi1iYWNrZ3JvdW5kKTthbmltYXRpb24tbmFtZTpjay11cGxvYWQtY29tcGxldGUtaWNvbi1zaG93LGNrLXVwbG9hZC1jb21wbGV0ZS1pY29uLWhpZGU7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkcyxmb3J3YXJkczthbmltYXRpb24tZHVyYXRpb246LjVzLC41cztmb250LXNpemU6dmFyKC0tY2staW1hZ2UtdXBsb2FkLWljb24tc2l6ZSk7YW5pbWF0aW9uLWRlbGF5OjBtcywzc30uY2staW1hZ2UtdXBsb2FkLWNvbXBsZXRlLWljb246YWZ0ZXJ7bGVmdDoyNSU7dG9wOjUwJTtvcGFjaXR5OjA7aGVpZ2h0OjA7d2lkdGg6MDt0cmFuc2Zvcm06c2NhbGVYKC0xKSByb3RhdGUoMTM1ZGVnKTt0cmFuc2Zvcm0tb3JpZ2luOmxlZnQgdG9wO2JvcmRlci10b3A6dmFyKC0tY2staW1hZ2UtdXBsb2FkLWljb24td2lkdGgpIHNvbGlkIHZhcigtLWNrLWNvbG9yLWltYWdlLXVwbG9hZC1pY29uKTtib3JkZXItcmlnaHQ6dmFyKC0tY2staW1hZ2UtdXBsb2FkLWljb24td2lkdGgpIHNvbGlkIHZhcigtLWNrLWNvbG9yLWltYWdlLXVwbG9hZC1pY29uKTthbmltYXRpb24tbmFtZTpjay11cGxvYWQtY29tcGxldGUtaWNvbi1jaGVjazthbmltYXRpb24tZHVyYXRpb246LjVzO2FuaW1hdGlvbi1kZWxheTouNXM7YW5pbWF0aW9uLWZpbGwtbW9kZTpmb3J3YXJkcztib3gtc2l6aW5nOmJvcmRlci1ib3h9QGtleWZyYW1lcyBjay11cGxvYWQtY29tcGxldGUtaWNvbi1zaG93ezAle29wYWNpdHk6MH10b3tvcGFjaXR5OjF9fUBrZXlmcmFtZXMgY2stdXBsb2FkLWNvbXBsZXRlLWljb24taGlkZXswJXtvcGFjaXR5OjF9dG97b3BhY2l0eTowfX1Aa2V5ZnJhbWVzIGNrLXVwbG9hZC1jb21wbGV0ZS1pY29uLWNoZWNrezAle29wYWNpdHk6MTt3aWR0aDowO2hlaWdodDowfTMzJXt3aWR0aDouM2VtO2hlaWdodDowfXRve29wYWNpdHk6MTt3aWR0aDouM2VtO2hlaWdodDouNDVlbX19J1xyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDc5KTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSAnLmNrIC5jay11cGxvYWQtcGxhY2Vob2xkZXItbG9hZGVye3Bvc2l0aW9uOmFic29sdXRlO2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjt0b3A6MDtsZWZ0OjB9LmNrIC5jay11cGxvYWQtcGxhY2Vob2xkZXItbG9hZGVyOmJlZm9yZXtjb250ZW50OlwiXCI7cG9zaXRpb246cmVsYXRpdmV9OnJvb3R7LS1jay1jb2xvci11cGxvYWQtcGxhY2Vob2xkZXItbG9hZGVyOiNiM2IzYjM7LS1jay11cGxvYWQtcGxhY2Vob2xkZXItbG9hZGVyLXNpemU6MzJweH0uY2sgLmNrLWltYWdlLXVwbG9hZC1wbGFjZWhvbGRlcnt3aWR0aDoxMDAlO21hcmdpbjowfS5jayAuY2stdXBsb2FkLXBsYWNlaG9sZGVyLWxvYWRlcnt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfS5jayAuY2stdXBsb2FkLXBsYWNlaG9sZGVyLWxvYWRlcjpiZWZvcmV7d2lkdGg6dmFyKC0tY2stdXBsb2FkLXBsYWNlaG9sZGVyLWxvYWRlci1zaXplKTtoZWlnaHQ6dmFyKC0tY2stdXBsb2FkLXBsYWNlaG9sZGVyLWxvYWRlci1zaXplKTtib3JkZXItcmFkaXVzOjUwJTtib3JkZXItdG9wOjNweCBzb2xpZCB2YXIoLS1jay1jb2xvci11cGxvYWQtcGxhY2Vob2xkZXItbG9hZGVyKTtib3JkZXItcmlnaHQ6MnB4IHNvbGlkIHRyYW5zcGFyZW50O2FuaW1hdGlvbjpjay11cGxvYWQtcGxhY2Vob2xkZXItbG9hZGVyIDFzIGxpbmVhciBpbmZpbml0ZX1Aa2V5ZnJhbWVzIGNrLXVwbG9hZC1wbGFjZWhvbGRlci1sb2FkZXJ7dG97dHJhbnNmb3JtOnJvdGF0ZSgxdHVybil9fSdcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSg4MSk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCIuY2sgLmNrLWxpbmtfc2VsZWN0ZWR7YmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1saW5rLXNlbGVjdGVkLWJhY2tncm91bmQpfVwiXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIHZhciBuID0gaSgxKTtcclxuICAgICAgICB2YXIgbyA9IGkoODMpO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IFwiLmNrLmNrLWxpbmstZm9ybXtkaXNwbGF5OmZsZXh9LmNrLmNrLWxpbmstZm9ybSAuY2stbGFiZWx7ZGlzcGxheTpub25lfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6NjAwcHgpey5jay5jay1saW5rLWZvcm17ZmxleC13cmFwOndyYXB9LmNrLmNrLWxpbmstZm9ybSAuY2stbGFiZWxlZC1pbnB1dHtmbGV4LWJhc2lzOjEwMCV9LmNrLmNrLWxpbmstZm9ybSAuY2stYnV0dG9ue2ZsZXgtYmFzaXM6NTAlfX0uY2suY2stbGluay1mb3JtX2xheW91dC12ZXJ0aWNhbHtkaXNwbGF5OmJsb2NrfS5jay5jay1saW5rLWZvcm17cGFkZGluZzp2YXIoLS1jay1zcGFjaW5nLXN0YW5kYXJkKX0uY2suY2stbGluay1mb3JtOmZvY3Vze291dGxpbmU6bm9uZX1bZGlyPWx0cl0gLmNrLmNrLWxpbmstZm9ybT46bm90KDpmaXJzdC1jaGlsZCksW2Rpcj1ydGxdIC5jay5jay1saW5rLWZvcm0+Om5vdCg6bGFzdC1jaGlsZCl7bWFyZ2luLWxlZnQ6dmFyKC0tY2stc3BhY2luZy1zdGFuZGFyZCl9QG1lZGlhIHNjcmVlbiBhbmQgKG1heC13aWR0aDo2MDBweCl7LmNrLmNrLWxpbmstZm9ybXtwYWRkaW5nOjA7d2lkdGg6Y2FsYygwLjgqdmFyKC0tY2staW5wdXQtdGV4dC13aWR0aCkpfS5jay5jay1saW5rLWZvcm0gLmNrLWxhYmVsZWQtaW5wdXR7bWFyZ2luOnZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpIHZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpIDB9LmNrLmNrLWxpbmstZm9ybSAuY2stbGFiZWxlZC1pbnB1dCAuY2staW5wdXQtdGV4dHttaW4td2lkdGg6MDt3aWR0aDoxMDAlfS5jay5jay1saW5rLWZvcm0gLmNrLWJ1dHRvbntwYWRkaW5nOnZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpO21hcmdpbi10b3A6dmFyKC0tY2stc3BhY2luZy1zdGFuZGFyZCk7Ym9yZGVyLXJhZGl1czowO2JvcmRlcjowO2JvcmRlci10b3A6MXB4IHNvbGlkIHZhcigtLWNrLWNvbG9yLWJhc2UtYm9yZGVyKX1bZGlyPWx0cl0gLmNrLmNrLWxpbmstZm9ybSAuY2stYnV0dG9ue21hcmdpbi1sZWZ0OjB9W2Rpcj1sdHJdIC5jay5jay1saW5rLWZvcm0gLmNrLWJ1dHRvbjpmaXJzdC1vZi10eXBle2JvcmRlci1yaWdodDoxcHggc29saWQgdmFyKC0tY2stY29sb3ItYmFzZS1ib3JkZXIpfVtkaXI9cnRsXSAuY2suY2stbGluay1mb3JtIC5jay1idXR0b257bWFyZ2luLWxlZnQ6MH1bZGlyPXJ0bF0gLmNrLmNrLWxpbmstZm9ybSAuY2stYnV0dG9uOmxhc3Qtb2YtdHlwZXtib3JkZXItcmlnaHQ6MXB4IHNvbGlkIHZhcigtLWNrLWNvbG9yLWJhc2UtYm9yZGVyKX19LmNrLmNrLWxpbmstZm9ybV9sYXlvdXQtdmVydGljYWx7cGFkZGluZzowO21pbi13aWR0aDp2YXIoLS1jay1pbnB1dC10ZXh0LXdpZHRoKX0uY2suY2stbGluay1mb3JtX2xheW91dC12ZXJ0aWNhbCAuY2stbGFiZWxlZC1pbnB1dHttYXJnaW46dmFyKC0tY2stc3BhY2luZy1zdGFuZGFyZCkgdmFyKC0tY2stc3BhY2luZy1zdGFuZGFyZCkgdmFyKC0tY2stc3BhY2luZy1zbWFsbCl9LmNrLmNrLWxpbmstZm9ybV9sYXlvdXQtdmVydGljYWwgLmNrLWxhYmVsZWQtaW5wdXQgLmNrLWlucHV0LXRleHR7bWluLXdpZHRoOjA7d2lkdGg6MTAwJX0uY2suY2stbGluay1mb3JtX2xheW91dC12ZXJ0aWNhbCAuY2stYnV0dG9ue3BhZGRpbmc6dmFyKC0tY2stc3BhY2luZy1zdGFuZGFyZCk7bWFyZ2luOjA7Ym9yZGVyLXJhZGl1czowO2JvcmRlcjowO2JvcmRlci10b3A6MXB4IHNvbGlkIHZhcigtLWNrLWNvbG9yLWJhc2UtYm9yZGVyKTt3aWR0aDo1MCV9W2Rpcj1sdHJdIC5jay5jay1saW5rLWZvcm1fbGF5b3V0LXZlcnRpY2FsIC5jay1idXR0b257bWFyZ2luLWxlZnQ6MH1bZGlyPWx0cl0gLmNrLmNrLWxpbmstZm9ybV9sYXlvdXQtdmVydGljYWwgLmNrLWJ1dHRvbjpmaXJzdC1vZi10eXBle2JvcmRlci1yaWdodDoxcHggc29saWQgdmFyKC0tY2stY29sb3ItYmFzZS1ib3JkZXIpfVtkaXI9cnRsXSAuY2suY2stbGluay1mb3JtX2xheW91dC12ZXJ0aWNhbCAuY2stYnV0dG9ue21hcmdpbi1sZWZ0OjB9W2Rpcj1ydGxdIC5jay5jay1saW5rLWZvcm1fbGF5b3V0LXZlcnRpY2FsIC5jay1idXR0b246bGFzdC1vZi10eXBle2JvcmRlci1yaWdodDoxcHggc29saWQgdmFyKC0tY2stY29sb3ItYmFzZS1ib3JkZXIpfS5jay5jay1saW5rLWZvcm1fbGF5b3V0LXZlcnRpY2FsIC5jay5jay1saXN0e21hcmdpbi1sZWZ0OjB9LmNrLmNrLWxpbmstZm9ybV9sYXlvdXQtdmVydGljYWwgLmNrLmNrLWxpc3QgLmNrLWJ1dHRvbi5jay1zd2l0Y2hidXR0b257Ym9yZGVyOjA7d2lkdGg6MTAwJX0uY2suY2stbGluay1mb3JtX2xheW91dC12ZXJ0aWNhbCAuY2suY2stbGlzdCAuY2stYnV0dG9uLmNrLXN3aXRjaGJ1dHRvbjpob3ZlcntiYWNrZ3JvdW5kOm5vbmV9XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSg4NSk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCIuY2suY2stbGluay1hY3Rpb25ze2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7ZmxleC13cmFwOm5vd3JhcH0uY2suY2stbGluay1hY3Rpb25zIC5jay1saW5rLWFjdGlvbnNfX3ByZXZpZXd7ZGlzcGxheTppbmxpbmUtYmxvY2t9LmNrLmNrLWxpbmstYWN0aW9ucyAuY2stbGluay1hY3Rpb25zX19wcmV2aWV3IC5jay1idXR0b25fX2xhYmVse292ZXJmbG93OmhpZGRlbn1AbWVkaWEgc2NyZWVuIGFuZCAobWF4LXdpZHRoOjYwMHB4KXsuY2suY2stbGluay1hY3Rpb25ze2ZsZXgtd3JhcDp3cmFwfS5jay5jay1saW5rLWFjdGlvbnMgLmNrLWxpbmstYWN0aW9uc19fcHJldmlld3tmbGV4LWJhc2lzOjEwMCV9LmNrLmNrLWxpbmstYWN0aW9ucyAuY2stYnV0dG9uOm5vdCguY2stbGluay1hY3Rpb25zX19wcmV2aWV3KXtmbGV4LWJhc2lzOjUwJX19LmNrLmNrLWxpbmstYWN0aW9uc3twYWRkaW5nOnZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpfS5jay5jay1saW5rLWFjdGlvbnMgLmNrLWJ1dHRvbi5jay1saW5rLWFjdGlvbnNfX3ByZXZpZXd7cGFkZGluZy1sZWZ0OjA7cGFkZGluZy1yaWdodDowfS5jay5jay1saW5rLWFjdGlvbnMgLmNrLWJ1dHRvbi5jay1saW5rLWFjdGlvbnNfX3ByZXZpZXcgLmNrLWJ1dHRvbl9fbGFiZWx7cGFkZGluZzowIHZhcigtLWNrLXNwYWNpbmctbWVkaXVtKTtjb2xvcjp2YXIoLS1jay1jb2xvci1saW5rLWRlZmF1bHQpO3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7Y3Vyc29yOnBvaW50ZXI7bWF4LXdpZHRoOnZhcigtLWNrLWlucHV0LXRleHQtd2lkdGgpO21pbi13aWR0aDozZW07dGV4dC1hbGlnbjpjZW50ZXJ9LmNrLmNrLWxpbmstYWN0aW9ucyAuY2stYnV0dG9uLmNrLWxpbmstYWN0aW9uc19fcHJldmlldyAuY2stYnV0dG9uX19sYWJlbDpob3Zlcnt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lfS5jay5jay1saW5rLWFjdGlvbnMgLmNrLWJ1dHRvbi5jay1saW5rLWFjdGlvbnNfX3ByZXZpZXcsLmNrLmNrLWxpbmstYWN0aW9ucyAuY2stYnV0dG9uLmNrLWxpbmstYWN0aW9uc19fcHJldmlldzphY3RpdmUsLmNrLmNrLWxpbmstYWN0aW9ucyAuY2stYnV0dG9uLmNrLWxpbmstYWN0aW9uc19fcHJldmlldzpmb2N1cywuY2suY2stbGluay1hY3Rpb25zIC5jay1idXR0b24uY2stbGluay1hY3Rpb25zX19wcmV2aWV3OmhvdmVye2JhY2tncm91bmQ6bm9uZX0uY2suY2stbGluay1hY3Rpb25zIC5jay1idXR0b24uY2stbGluay1hY3Rpb25zX19wcmV2aWV3OmFjdGl2ZXtib3gtc2hhZG93Om5vbmV9LmNrLmNrLWxpbmstYWN0aW9ucyAuY2stYnV0dG9uLmNrLWxpbmstYWN0aW9uc19fcHJldmlldzpmb2N1cyAuY2stYnV0dG9uX19sYWJlbHt0ZXh0LWRlY29yYXRpb246dW5kZXJsaW5lfS5jay5jay1saW5rLWFjdGlvbnM6Zm9jdXN7b3V0bGluZTpub25lfVtkaXI9bHRyXSAuY2suY2stbGluay1hY3Rpb25zIC5jay1idXR0b246bm90KDpmaXJzdC1jaGlsZCksW2Rpcj1ydGxdIC5jay5jay1saW5rLWFjdGlvbnMgLmNrLWJ1dHRvbjpub3QoOmxhc3QtY2hpbGQpe21hcmdpbi1sZWZ0OnZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpfUBtZWRpYSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6NjAwcHgpey5jay5jay1saW5rLWFjdGlvbnN7cGFkZGluZzowO3dpZHRoOmNhbGMoMC44KnZhcigtLWNrLWlucHV0LXRleHQtd2lkdGgpKX0uY2suY2stbGluay1hY3Rpb25zIC5jay1idXR0b24uY2stbGluay1hY3Rpb25zX19wcmV2aWV3e21hcmdpbjp2YXIoLS1jay1zcGFjaW5nLXN0YW5kYXJkKSB2YXIoLS1jay1zcGFjaW5nLXN0YW5kYXJkKSAwfS5jay5jay1saW5rLWFjdGlvbnMgLmNrLWJ1dHRvbi5jay1saW5rLWFjdGlvbnNfX3ByZXZpZXcgLmNrLWJ1dHRvbl9fbGFiZWx7bWluLXdpZHRoOjA7bWF4LXdpZHRoOjEwMCV9LmNrLmNrLWxpbmstYWN0aW9ucyAuY2stYnV0dG9uOm5vdCguY2stbGluay1hY3Rpb25zX19wcmV2aWV3KXtwYWRkaW5nOnZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpO21hcmdpbi10b3A6dmFyKC0tY2stc3BhY2luZy1zdGFuZGFyZCk7Ym9yZGVyLXJhZGl1czowO2JvcmRlcjowO2JvcmRlci10b3A6MXB4IHNvbGlkIHZhcigtLWNrLWNvbG9yLWJhc2UtYm9yZGVyKX1bZGlyPWx0cl0gLmNrLmNrLWxpbmstYWN0aW9ucyAuY2stYnV0dG9uOm5vdCguY2stbGluay1hY3Rpb25zX19wcmV2aWV3KXttYXJnaW4tbGVmdDowfVtkaXI9bHRyXSAuY2suY2stbGluay1hY3Rpb25zIC5jay1idXR0b246bm90KC5jay1saW5rLWFjdGlvbnNfX3ByZXZpZXcpOmZpcnN0LW9mLXR5cGV7Ym9yZGVyLXJpZ2h0OjFweCBzb2xpZCB2YXIoLS1jay1jb2xvci1iYXNlLWJvcmRlcil9W2Rpcj1ydGxdIC5jay5jay1saW5rLWFjdGlvbnMgLmNrLWJ1dHRvbjpub3QoLmNrLWxpbmstYWN0aW9uc19fcHJldmlldyl7bWFyZ2luLWxlZnQ6MH1bZGlyPXJ0bF0gLmNrLmNrLWxpbmstYWN0aW9ucyAuY2stYnV0dG9uOm5vdCguY2stbGluay1hY3Rpb25zX19wcmV2aWV3KTpsYXN0LW9mLXR5cGV7Ym9yZGVyLXJpZ2h0OjFweCBzb2xpZCB2YXIoLS1jay1jb2xvci1iYXNlLWJvcmRlcil9fVwiXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIHZhciBuID0gaSgxKTtcclxuICAgICAgICB2YXIgbyA9IGkoODcpO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IFwiLmNrLmNrLWNoYXJhY3Rlci1ncmlkIC5jay1jaGFyYWN0ZXItZ3JpZF9fdGlsZXN7ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczpyZXBlYXQoMTAsMWZyKX06cm9vdHstLWNrLWNoYXJhY3Rlci1ncmlkLXRpbGUtc2l6ZToyNHB4fS5jay5jay1jaGFyYWN0ZXItZ3JpZHtvdmVyZmxvdy15OmF1dG87b3ZlcmZsb3cteDpoaWRkZW47d2lkdGg6MzUwcHg7bWF4LWhlaWdodDoyMDBweH0uY2suY2stY2hhcmFjdGVyLWdyaWQgLmNrLWNoYXJhY3Rlci1ncmlkX190aWxlc3ttYXJnaW46dmFyKC0tY2stc3BhY2luZy1zdGFuZGFyZCk7Z3JpZC1nYXA6dmFyKC0tY2stc3BhY2luZy1zdGFuZGFyZCl9LmNrLmNrLWNoYXJhY3Rlci1ncmlkIC5jay1jaGFyYWN0ZXItZ3JpZF9fdGlsZXt3aWR0aDp2YXIoLS1jay1jaGFyYWN0ZXItZ3JpZC10aWxlLXNpemUpO2hlaWdodDp2YXIoLS1jay1jaGFyYWN0ZXItZ3JpZC10aWxlLXNpemUpO21pbi13aWR0aDp2YXIoLS1jay1jaGFyYWN0ZXItZ3JpZC10aWxlLXNpemUpO21pbi1oZWlnaHQ6dmFyKC0tY2stY2hhcmFjdGVyLWdyaWQtdGlsZS1zaXplKTtmb250LXNpemU6MS4yZW07cGFkZGluZzowO3RyYW5zaXRpb246Ym94LXNoYWRvdyAuMnMgZWFzZTtib3JkZXI6MH0uY2suY2stY2hhcmFjdGVyLWdyaWQgLmNrLWNoYXJhY3Rlci1ncmlkX190aWxlOmZvY3VzOm5vdCguY2stZGlzYWJsZWQpLC5jay5jay1jaGFyYWN0ZXItZ3JpZCAuY2stY2hhcmFjdGVyLWdyaWRfX3RpbGU6aG92ZXI6bm90KC5jay1kaXNhYmxlZCl7Ym9yZGVyOjA7Ym94LXNoYWRvdzppbnNldCAwIDAgMCAxcHggdmFyKC0tY2stY29sb3ItYmFzZS1iYWNrZ3JvdW5kKSwwIDAgMCAycHggdmFyKC0tY2stY29sb3ItZm9jdXMtYm9yZGVyKX0uY2suY2stY2hhcmFjdGVyLWdyaWQgLmNrLWNoYXJhY3Rlci1ncmlkX190aWxlIC5jay1idXR0b25fX2xhYmVse2xpbmUtaGVpZ2h0OnZhcigtLWNrLWNoYXJhY3Rlci1ncmlkLXRpbGUtc2l6ZSk7d2lkdGg6MTAwJTt0ZXh0LWFsaWduOmNlbnRlcn1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDg5KTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay5jay1jaGFyYWN0ZXItaW5mb3tkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47cGFkZGluZzp2YXIoLS1jay1zcGFjaW5nLXNtYWxsKSB2YXIoLS1jay1zcGFjaW5nLXN0YW5kYXJkKTtib3JkZXItdG9wOjFweCBzb2xpZCB2YXIoLS1jay1jb2xvci1iYXNlLWJvcmRlcil9LmNrLmNrLWNoYXJhY3Rlci1pbmZvPip7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2ZvbnQtc2l6ZTp2YXIoLS1jay1mb250LXNpemUtc21hbGwpfS5jay5jay1jaGFyYWN0ZXItaW5mbyAuY2stY2hhcmFjdGVyLWluZm9fX25hbWV7bWF4LXdpZHRoOjI4MHB4O3RleHQtb3ZlcmZsb3c6ZWxsaXBzaXM7b3ZlcmZsb3c6aGlkZGVufS5jay5jay1jaGFyYWN0ZXItaW5mbyAuY2stY2hhcmFjdGVyLWluZm9fX2NvZGV7b3BhY2l0eTouNn1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDkxKTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay5jay1zcGVjaWFsLWNoYXJhY3RlcnMtbmF2aWdhdGlvbntkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtd3JhcDpub3dyYXA7YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO2JvcmRlci1ib3R0b206MXB4IHNvbGlkIHZhcigtLWNrLWNvbG9yLWJhc2UtYm9yZGVyKTtwYWRkaW5nOnZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpfVtkaXI9bHRyXSAuY2suY2stc3BlY2lhbC1jaGFyYWN0ZXJzLW5hdmlnYXRpb257cGFkZGluZy1sZWZ0OnZhcigtLWNrLXNwYWNpbmctbGFyZ2UpfVtkaXI9cnRsXSAuY2suY2stc3BlY2lhbC1jaGFyYWN0ZXJzLW5hdmlnYXRpb257cGFkZGluZy1yaWdodDp2YXIoLS1jay1zcGFjaW5nLWxhcmdlKX0uY2suY2stc3BlY2lhbC1jaGFyYWN0ZXJzLW5hdmlnYXRpb24+LmNrLWxhYmVse21heC13aWR0aDoxNjBweDt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO292ZXJmbG93OmhpZGRlbn0uY2suY2stc3BlY2lhbC1jaGFyYWN0ZXJzLW5hdmlnYXRpb24+LmNrLWRyb3Bkb3duIC5jay1kcm9wZG93bl9fcGFuZWx7bWF4LWhlaWdodDoyNTBweDtvdmVyZmxvdy15OmF1dG87b3ZlcmZsb3cteDpoaWRkZW59XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSg5Myk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCI6cm9vdHstLWNrLWNvbG9yLXRhYmxlLWZvY3VzZWQtY2VsbC1iYWNrZ3JvdW5kOnJnYmEoMTU4LDIwNywyNTAsMC4zKX0uY2std2lkZ2V0LnRhYmxlIHRkLmNrLWVkaXRvcl9fbmVzdGVkLWVkaXRhYmxlLmNrLWVkaXRvcl9fbmVzdGVkLWVkaXRhYmxlX2ZvY3VzZWQsLmNrLXdpZGdldC50YWJsZSB0ZC5jay1lZGl0b3JfX25lc3RlZC1lZGl0YWJsZTpmb2N1cywuY2std2lkZ2V0LnRhYmxlIHRoLmNrLWVkaXRvcl9fbmVzdGVkLWVkaXRhYmxlLmNrLWVkaXRvcl9fbmVzdGVkLWVkaXRhYmxlX2ZvY3VzZWQsLmNrLXdpZGdldC50YWJsZSB0aC5jay1lZGl0b3JfX25lc3RlZC1lZGl0YWJsZTpmb2N1c3tiYWNrZ3JvdW5kOnZhcigtLWNrLWNvbG9yLXRhYmxlLWZvY3VzZWQtY2VsbC1iYWNrZ3JvdW5kKTtib3JkZXItc3R5bGU6bm9uZTtvdXRsaW5lOjFweCBzb2xpZCB2YXIoLS1jay1jb2xvci1mb2N1cy1ib3JkZXIpO291dGxpbmUtb2Zmc2V0Oi0xcHh9XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSg5NSk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCIuY2sgLmNrLWluc2VydC10YWJsZS1kcm9wZG93bl9fZ3JpZHtkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtd3JhcDp3cmFwfTpyb290ey0tY2staW5zZXJ0LXRhYmxlLWRyb3Bkb3duLXBhZGRpbmc6MTBweDstLWNrLWluc2VydC10YWJsZS1kcm9wZG93bi1ib3gtaGVpZ2h0OjExcHg7LS1jay1pbnNlcnQtdGFibGUtZHJvcGRvd24tYm94LXdpZHRoOjEycHg7LS1jay1pbnNlcnQtdGFibGUtZHJvcGRvd24tYm94LW1hcmdpbjoxcHh9LmNrIC5jay1pbnNlcnQtdGFibGUtZHJvcGRvd25fX2dyaWR7d2lkdGg6Y2FsYyh2YXIoLS1jay1pbnNlcnQtdGFibGUtZHJvcGRvd24tYm94LXdpZHRoKSoxMCArIHZhcigtLWNrLWluc2VydC10YWJsZS1kcm9wZG93bi1ib3gtbWFyZ2luKSoyMCArIHZhcigtLWNrLWluc2VydC10YWJsZS1kcm9wZG93bi1wYWRkaW5nKSoyKTtwYWRkaW5nOnZhcigtLWNrLWluc2VydC10YWJsZS1kcm9wZG93bi1wYWRkaW5nKSB2YXIoLS1jay1pbnNlcnQtdGFibGUtZHJvcGRvd24tcGFkZGluZykgMH0uY2sgLmNrLWluc2VydC10YWJsZS1kcm9wZG93bl9fbGFiZWx7dGV4dC1hbGlnbjpjZW50ZXJ9LmNrIC5jay1pbnNlcnQtdGFibGUtZHJvcGRvd24tZ3JpZC1ib3h7d2lkdGg6dmFyKC0tY2staW5zZXJ0LXRhYmxlLWRyb3Bkb3duLWJveC13aWR0aCk7aGVpZ2h0OnZhcigtLWNrLWluc2VydC10YWJsZS1kcm9wZG93bi1ib3gtaGVpZ2h0KTttYXJnaW46dmFyKC0tY2staW5zZXJ0LXRhYmxlLWRyb3Bkb3duLWJveC1tYXJnaW4pO2JvcmRlcjoxcHggc29saWQgdmFyKC0tY2stY29sb3ItYmFzZS1ib3JkZXIpO2JvcmRlci1yYWRpdXM6MXB4fS5jayAuY2staW5zZXJ0LXRhYmxlLWRyb3Bkb3duLWdyaWQtYm94LmNrLW9ue2JvcmRlci1jb2xvcjp2YXIoLS1jay1jb2xvci1mb2N1cy1ib3JkZXIpO2JhY2tncm91bmQ6dmFyKC0tY2stY29sb3ItZm9jdXMtb3V0ZXItc2hhZG93KX1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDk3KTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIjpyb290ey0tY2stdGFibGUtc2VsZWN0ZWQtY2VsbC1iYWNrZ3JvdW5kOiNjZWU1ZmR9LmNrLmNrLWVkaXRvcl9fZWRpdGFibGUgLnRhYmxlIHRhYmxlIHRkLmNrLWVkaXRvcl9fZWRpdGFibGVfc2VsZWN0ZWQsLmNrLmNrLWVkaXRvcl9fZWRpdGFibGUgLnRhYmxlIHRhYmxlIHRoLmNrLWVkaXRvcl9fZWRpdGFibGVfc2VsZWN0ZWR7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1jay10YWJsZS1zZWxlY3RlZC1jZWxsLWJhY2tncm91bmQpIWltcG9ydGFudDtjYXJldC1jb2xvcjp0cmFuc3BhcmVudDtvdXRsaW5lOnVuc2V0O2JveC1zaGFkb3c6dW5zZXR9LmNrLmNrLWVkaXRvcl9fZWRpdGFibGUgLnRhYmxlIHRhYmxlIHRkLmNrLWVkaXRvcl9fZWRpdGFibGVfc2VsZWN0ZWQgOjpzZWxlY3Rpb24sLmNrLmNrLWVkaXRvcl9fZWRpdGFibGUgLnRhYmxlIHRhYmxlIHRoLmNrLWVkaXRvcl9fZWRpdGFibGVfc2VsZWN0ZWQgOjpzZWxlY3Rpb257YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH0uY2suY2stZWRpdG9yX19lZGl0YWJsZSAudGFibGUgdGFibGUgdGQuY2stZWRpdG9yX19lZGl0YWJsZV9zZWxlY3RlZCAuY2std2lkZ2V0X3NlbGVjdGVkLC5jay5jay1lZGl0b3JfX2VkaXRhYmxlIC50YWJsZSB0YWJsZSB0aC5jay1lZGl0b3JfX2VkaXRhYmxlX3NlbGVjdGVkIC5jay13aWRnZXRfc2VsZWN0ZWR7b3V0bGluZTp1bnNldH1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDk5KTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay1jb250ZW50IC50YWJsZXttYXJnaW46MWVtIGF1dG87ZGlzcGxheTp0YWJsZX0uY2stY29udGVudCAudGFibGUgdGFibGV7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO2JvcmRlci1zcGFjaW5nOjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtib3JkZXI6MXB4IGRvdWJsZSAjYjNiM2IzfS5jay1jb250ZW50IC50YWJsZSB0YWJsZSB0ZCwuY2stY29udGVudCAudGFibGUgdGFibGUgdGh7bWluLXdpZHRoOjJlbTtwYWRkaW5nOi40ZW07Ym9yZGVyLWNvbG9yOiNiZmJmYmZ9LmNrLWNvbnRlbnQgLnRhYmxlIHRhYmxlIHRoe2ZvbnQtd2VpZ2h0OjcwMDtiYWNrZ3JvdW5kOmhzbGEoMCwwJSwwJSw1JSl9XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSgxMDEpO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IFwiLmNrLmNrLWxhYmVsZWQtdmlldyAuY2stbGFiZWxlZC12aWV3X19zdGF0dXN7Zm9udC1zaXplOnZhcigtLWNrLWZvbnQtc2l6ZS1zbWFsbCk7bWFyZ2luLXRvcDp2YXIoLS1jay1zcGFjaW5nLXNtYWxsKTt3aGl0ZS1zcGFjZTpub3JtYWx9LmNrLmNrLWxhYmVsZWQtdmlldyAuY2stbGFiZWxlZC12aWV3X19zdGF0dXNfZXJyb3J7Y29sb3I6dmFyKC0tY2stY29sb3ItYmFzZS1lcnJvcil9LmNrLmNrLWxhYmVsZWQtdmlldz4uY2suY2stbGFiZWx7d2lkdGg6MTAwJTt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzO292ZXJmbG93OmhpZGRlbn1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDEwMyk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCIuY2suY2staW5wdXQtY29sb3J7d2lkdGg6MTAwJTtkaXNwbGF5OmZsZXh9LmNrLmNrLWlucHV0LWNvbG9yPmlucHV0LmNrLmNrLWlucHV0LXRleHR7bWluLXdpZHRoOmF1dG87ZmxleC1ncm93OjF9LmNrLmNrLWlucHV0LWNvbG9yPmlucHV0LmNrLmNrLWlucHV0LXRleHQ6YWN0aXZlLC5jay5jay1pbnB1dC1jb2xvcj5pbnB1dC5jay5jay1pbnB1dC10ZXh0OmZvY3Vze3otaW5kZXg6dmFyKC0tY2stei1kZWZhdWx0KX0uY2suY2staW5wdXQtY29sb3I+ZGl2LmNrLmNrLWRyb3Bkb3due21pbi13aWR0aDphdXRvfS5jay5jay1pbnB1dC1jb2xvcj5kaXYuY2suY2stZHJvcGRvd24+LmNrLWlucHV0LWNvbG9yX19idXR0b24gLmNrLWRyb3Bkb3duX19hcnJvd3tkaXNwbGF5Om5vbmV9LmNrLmNrLWlucHV0LWNvbG9yIC5jay5jay1pbnB1dC1jb2xvcl9fYnV0dG9uIC5jay5jay1pbnB1dC1jb2xvcl9fYnV0dG9uX19wcmV2aWV3e3Bvc2l0aW9uOnJlbGF0aXZlO292ZXJmbG93OmhpZGRlbn0uY2suY2staW5wdXQtY29sb3IgLmNrLmNrLWlucHV0LWNvbG9yX19idXR0b24gLmNrLmNrLWlucHV0LWNvbG9yX19idXR0b25fX3ByZXZpZXc+LmNrLmNrLWlucHV0LWNvbG9yX19idXR0b25fX3ByZXZpZXdfX25vLWNvbG9yLWluZGljYXRvcntwb3NpdGlvbjphYnNvbHV0ZTtkaXNwbGF5OmJsb2NrfVtkaXI9bHRyXSAuY2suY2staW5wdXQtY29sb3I+LmNrLmNrLWlucHV0LXRleHR7Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6MDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czowfVtkaXI9cnRsXSAuY2suY2staW5wdXQtY29sb3I+LmNrLmNrLWlucHV0LXRleHR7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czowO2JvcmRlci1ib3R0b20tbGVmdC1yYWRpdXM6MH0uY2suY2staW5wdXQtY29sb3I+LmNrLmNrLWRyb3Bkb3duPi5jay5jay1pbnB1dC1jb2xvcl9fYnV0dG9ue3BhZGRpbmc6MH1bZGlyPWx0cl0gLmNrLmNrLWlucHV0LWNvbG9yPi5jay5jay1kcm9wZG93bj4uY2suY2staW5wdXQtY29sb3JfX2J1dHRvbntib3JkZXItdG9wLWxlZnQtcmFkaXVzOjA7Ym9yZGVyLWJvdHRvbS1sZWZ0LXJhZGl1czowO21hcmdpbi1sZWZ0Oi0xcHh9W2Rpcj1ydGxdIC5jay5jay1pbnB1dC1jb2xvcj4uY2suY2stZHJvcGRvd24+LmNrLmNrLWlucHV0LWNvbG9yX19idXR0b257Ym9yZGVyLXRvcC1yaWdodC1yYWRpdXM6MDtib3JkZXItYm90dG9tLXJpZ2h0LXJhZGl1czowO21hcmdpbi1yaWdodDotMXB4fS5jay5jay1pbnB1dC1jb2xvcj4uY2suY2stZHJvcGRvd24+LmNrLmNrLWlucHV0LWNvbG9yX19idXR0b24uY2stZGlzYWJsZWR7YmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1pbnB1dC1kaXNhYmxlZC1iYWNrZ3JvdW5kKX0uY2suY2staW5wdXQtY29sb3I+LmNrLmNrLWRyb3Bkb3duPi5jay5jay1pbnB1dC1jb2xvcl9fYnV0dG9uPi5jay5jay1pbnB1dC1jb2xvcl9fYnV0dG9uX19wcmV2aWV3e2JvcmRlci1yYWRpdXM6MH0uY2stcm91bmRlZC1jb3JuZXJzIC5jay5jay1pbnB1dC1jb2xvcj4uY2suY2stZHJvcGRvd24+LmNrLmNrLWlucHV0LWNvbG9yX19idXR0b24+LmNrLmNrLWlucHV0LWNvbG9yX19idXR0b25fX3ByZXZpZXcsLmNrLmNrLWlucHV0LWNvbG9yPi5jay5jay1kcm9wZG93bj4uY2suY2staW5wdXQtY29sb3JfX2J1dHRvbj4uY2suY2staW5wdXQtY29sb3JfX2J1dHRvbl9fcHJldmlldy5jay1yb3VuZGVkLWNvcm5lcnN7Ym9yZGVyLXJhZGl1czp2YXIoLS1jay1ib3JkZXItcmFkaXVzKX0uY2suY2staW5wdXQtY29sb3I+LmNrLmNrLWRyb3Bkb3duPi5jay5jay1pbnB1dC1jb2xvcl9fYnV0dG9uPi5jay5jay1pbnB1dC1jb2xvcl9fYnV0dG9uX19wcmV2aWV3e3dpZHRoOjIwcHg7aGVpZ2h0OjIwcHg7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1jay1jb2xvci1pbnB1dC1ib3JkZXIpfS5jay5jay1pbnB1dC1jb2xvcj4uY2suY2stZHJvcGRvd24+LmNrLmNrLWlucHV0LWNvbG9yX19idXR0b24+LmNrLmNrLWlucHV0LWNvbG9yX19idXR0b25fX3ByZXZpZXc+LmNrLmNrLWlucHV0LWNvbG9yX19idXR0b25fX3ByZXZpZXdfX25vLWNvbG9yLWluZGljYXRvcnt0b3A6LTMwJTtsZWZ0OjUwJTtoZWlnaHQ6MTUwJTt3aWR0aDo4JTtiYWNrZ3JvdW5kOnJlZDtib3JkZXItcmFkaXVzOjJweDt0cmFuc2Zvcm06cm90YXRlKDQ1ZGVnKTt0cmFuc2Zvcm0tb3JpZ2luOjUwJX0uY2suY2staW5wdXQtY29sb3IgLmNrLmNrLWlucHV0LWNvbG9yX19yZW1vdmUtY29sb3J7d2lkdGg6MTAwJTtib3JkZXItYm90dG9tOjFweCBzb2xpZCB2YXIoLS1jay1jb2xvci1pbnB1dC1ib3JkZXIpO3BhZGRpbmc6Y2FsYyh2YXIoLS1jay1zcGFjaW5nLXN0YW5kYXJkKS8yKSB2YXIoLS1jay1zcGFjaW5nLXN0YW5kYXJkKTtib3JkZXItYm90dG9tLWxlZnQtcmFkaXVzOjA7Ym9yZGVyLWJvdHRvbS1yaWdodC1yYWRpdXM6MH1bZGlyPWx0cl0gLmNrLmNrLWlucHV0LWNvbG9yIC5jay5jay1pbnB1dC1jb2xvcl9fcmVtb3ZlLWNvbG9ye2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjB9W2Rpcj1ydGxdIC5jay5jay1pbnB1dC1jb2xvciAuY2suY2staW5wdXQtY29sb3JfX3JlbW92ZS1jb2xvcntib3JkZXItdG9wLWxlZnQtcmFkaXVzOjB9LmNrLmNrLWlucHV0LWNvbG9yIC5jay5jay1pbnB1dC1jb2xvcl9fcmVtb3ZlLWNvbG9yIC5jay5jay1pY29ue21hcmdpbi1yaWdodDp2YXIoLS1jay1zcGFjaW5nLXN0YW5kYXJkKX1bZGlyPXJ0bF0gLmNrLmNrLWlucHV0LWNvbG9yIC5jay5jay1pbnB1dC1jb2xvcl9fcmVtb3ZlLWNvbG9yIC5jay5jay1pY29ue21hcmdpbi1yaWdodDowO21hcmdpbi1sZWZ0OnZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpfVwiXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSwgaSkge1xyXG4gICAgICAgIHZhciBuID0gaSgxKTtcclxuICAgICAgICB2YXIgbyA9IGkoMTA1KTtcclxuICAgICAgICBvID0gby5fX2VzTW9kdWxlID8gby5kZWZhdWx0IDogbztcclxuICAgICAgICBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgbyA9IFtbdC5pLCBvLCBcIlwiXV1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHIgPSB7aW5qZWN0VHlwZTogXCJzaW5nbGV0b25TdHlsZVRhZ1wifTtcclxuICAgICAgICByLmluc2VydCA9IFwiaGVhZFwiO1xyXG4gICAgICAgIHIuc2luZ2xldG9uID0gdHJ1ZTtcclxuICAgICAgICB2YXIgcyA9IG4obywgcik7XHJcbiAgICAgICAgdmFyIGEgPSBvLmxvY2FscyA/IG8ubG9jYWxzIDoge307XHJcbiAgICAgICAgdC5leHBvcnRzID0gYVxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay5jay1mb3JtX19yb3d7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztmbGV4LXdyYXA6bm93cmFwO2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVufS5jay5jay1mb3JtX19yb3c+Om5vdCguY2stbGFiZWwpe2ZsZXgtZ3JvdzoxfS5jay5jay1mb3JtX19yb3cuY2stdGFibGUtZm9ybV9fYWN0aW9uLXJvdyAuY2stYnV0dG9uLWNhbmNlbCwuY2suY2stZm9ybV9fcm93LmNrLXRhYmxlLWZvcm1fX2FjdGlvbi1yb3cgLmNrLWJ1dHRvbi1zYXZle2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmNrLmNrLWZvcm1fX3Jvd3twYWRkaW5nOnZhcigtLWNrLXNwYWNpbmctc3RhbmRhcmQpIHZhcigtLWNrLXNwYWNpbmctbGFyZ2UpIDB9W2Rpcj1sdHJdIC5jay5jay1mb3JtX19yb3c+Om5vdCguY2stbGFiZWwpKyp7bWFyZ2luLWxlZnQ6dmFyKC0tY2stc3BhY2luZy1sYXJnZSl9W2Rpcj1ydGxdIC5jay5jay1mb3JtX19yb3c+Om5vdCguY2stbGFiZWwpKyp7bWFyZ2luLXJpZ2h0OnZhcigtLWNrLXNwYWNpbmctbGFyZ2UpfS5jay5jay1mb3JtX19yb3c+LmNrLWxhYmVse3dpZHRoOjEwMCU7bWluLXdpZHRoOjEwMCV9LmNrLmNrLWZvcm1fX3Jvdy5jay10YWJsZS1mb3JtX19hY3Rpb24tcm93e21hcmdpbi10b3A6dmFyKC0tY2stc3BhY2luZy1sYXJnZSl9LmNrLmNrLWZvcm1fX3Jvdy5jay10YWJsZS1mb3JtX19hY3Rpb24tcm93IC5jay1idXR0b24gLmNrLWJ1dHRvbl9fbGFiZWx7Y29sb3I6dmFyKC0tY2stY29sb3ItdGV4dCl9XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSgxMDcpO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IFwiOnJvb3R7LS1jay10YWJsZS1mb3JtLWhlYWRlci1oZWlnaHQ6MzhweH0uY2suY2stZm9ybV9faGVhZGVye3BhZGRpbmc6MCB2YXIoLS1jay1zcGFjaW5nLWxhcmdlKTtoZWlnaHQ6dmFyKC0tY2stdGFibGUtZm9ybS1oZWFkZXItaGVpZ2h0KTtsaW5lLWhlaWdodDp2YXIoLS1jay10YWJsZS1mb3JtLWhlYWRlci1oZWlnaHQpO2JvcmRlci1ib3R0b206MXB4IHNvbGlkIHZhcigtLWNrLWNvbG9yLWJhc2UtYm9yZGVyKX0uY2suY2stZm9ybV9faGVhZGVyIC5jay1mb3JtX19oZWFkZXJfX2xhYmVse2ZvbnQtd2VpZ2h0OjcwMH1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICB0LmV4cG9ydHMgPSBcIi5jay5jay1mb3Jte3BhZGRpbmc6MCAwIHZhcigtLWNrLXNwYWNpbmctbGFyZ2UpfS5jay5jay1mb3JtOmZvY3Vze291dGxpbmU6bm9uZX0uY2suY2stZm9ybSAuY2suY2staW5wdXQtdGV4dHttaW4td2lkdGg6MTAwJTt3aWR0aDowfS5jay5jay1mb3JtIC5jay5jay1kcm9wZG93bnttaW4td2lkdGg6MTAwJX0uY2suY2stZm9ybSAuY2suY2stZHJvcGRvd24gLmNrLWRyb3Bkb3duX19idXR0b246bm90KDpmb2N1cyl7Ym9yZGVyOjFweCBzb2xpZCB2YXIoLS1jay1jb2xvci1iYXNlLWJvcmRlcil9LmNrLmNrLWZvcm0gLmNrLmNrLWRyb3Bkb3duIC5jay1kcm9wZG93bl9fYnV0dG9uIC5jay1idXR0b25fX2xhYmVse3dpZHRoOjEwMCV9XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gJy5jay5jay10YWJsZS1mb3JtIC5jay1mb3JtX19yb3cuY2stdGFibGUtZm9ybV9fYm9yZGVyLXJvd3tmbGV4LXdyYXA6d3JhcH0uY2suY2stdGFibGUtZm9ybSAuY2stZm9ybV9fcm93LmNrLXRhYmxlLWZvcm1fX2JvcmRlci1yb3cgLmNrLWxhYmVsZWQtdmlld3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uLXJldmVyc2V9LmNrLmNrLXRhYmxlLWZvcm0gLmNrLWZvcm1fX3Jvdy5jay10YWJsZS1mb3JtX19ib3JkZXItcm93IC5jay1sYWJlbGVkLXZpZXcgLmNrLmNrLWRyb3Bkb3duLC5jay5jay10YWJsZS1mb3JtIC5jay1mb3JtX19yb3cuY2stdGFibGUtZm9ybV9fYm9yZGVyLXJvdyAuY2stdGFibGUtZm9ybV9fYm9yZGVyLXN0eWxlLC5jay5jay10YWJsZS1mb3JtIC5jay1mb3JtX19yb3cuY2stdGFibGUtZm9ybV9fYm9yZGVyLXJvdyAuY2stdGFibGUtZm9ybV9fYm9yZGVyLXdpZHRoe2ZsZXgtZ3JvdzowfS5jay5jay10YWJsZS1mb3JtIC5jay1mb3JtX19yb3cuY2stdGFibGUtZm9ybV9fZGltZW5zaW9ucy1yb3d7ZmxleC13cmFwOndyYXA7YWxpZ24taXRlbXM6Y2VudGVyfS5jay5jay10YWJsZS1mb3JtIC5jay1mb3JtX19yb3cuY2stdGFibGUtZm9ybV9fZGltZW5zaW9ucy1yb3cgLmNrLWxhYmVsZWQtdmlld3tkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uLXJldmVyc2U7YWxpZ24taXRlbXM6Y2VudGVyfS5jay5jay10YWJsZS1mb3JtIC5jay1mb3JtX19yb3cuY2stdGFibGUtZm9ybV9fZGltZW5zaW9ucy1yb3cgLmNrLWxhYmVsZWQtdmlldyAuY2suY2stZHJvcGRvd24sLmNrLmNrLXRhYmxlLWZvcm0gLmNrLWZvcm1fX3Jvdy5jay10YWJsZS1mb3JtX19kaW1lbnNpb25zLXJvdyAuY2stdGFibGUtZm9ybV9fZGltZW5zaW9uLW9wZXJhdG9ye2ZsZXgtZ3JvdzowfS5jay5jay10YWJsZS1mb3JtIC5jay5jay1sYWJlbGVkLXZpZXd7cG9zaXRpb246cmVsYXRpdmV9LmNrLmNrLXRhYmxlLWZvcm0gLmNrLmNrLWxhYmVsZWQtdmlldyAuY2suY2stbGFiZWxlZC12aWV3X19zdGF0dXN7cG9zaXRpb246YWJzb2x1dGU7bGVmdDo1MCU7Ym90dG9tOmNhbGMoLTEqdmFyKC0tY2stdGFibGUtcHJvcGVydGllcy1lcnJvci1hcnJvdy1zaXplKSk7dHJhbnNmb3JtOnRyYW5zbGF0ZSgtNTAlLDEwMCUpO3otaW5kZXg6MX0uY2suY2stdGFibGUtZm9ybSAuY2suY2stbGFiZWxlZC12aWV3IC5jay5jay1sYWJlbGVkLXZpZXdfX3N0YXR1czphZnRlcntjb250ZW50OlwiXCI7cG9zaXRpb246YWJzb2x1dGU7dG9wOmNhbGMoLTEqdmFyKC0tY2stdGFibGUtcHJvcGVydGllcy1lcnJvci1hcnJvdy1zaXplKSk7bGVmdDo1MCU7dHJhbnNmb3JtOnRyYW5zbGF0ZVgoLTUwJSl9OnJvb3R7LS1jay10YWJsZS1wcm9wZXJ0aWVzLWVycm9yLWFycm93LXNpemU6NnB4Oy0tY2stdGFibGUtcHJvcGVydGllcy1taW4tZXJyb3Itd2lkdGg6MTUwcHh9LmNrLmNrLXRhYmxlLWZvcm0gLmNrLWZvcm1fX3Jvdy5jay10YWJsZS1mb3JtX19ib3JkZXItcm93IC5jay1sYWJlbGVkLXZpZXc+LmNrLWxhYmVse2ZvbnQtc2l6ZTp2YXIoLS1jay1mb250LXNpemUtdGlueSk7dGV4dC1hbGlnbjpjZW50ZXJ9LmNrLmNrLXRhYmxlLWZvcm0gLmNrLWZvcm1fX3Jvdy5jay10YWJsZS1mb3JtX19ib3JkZXItcm93IC5jay10YWJsZS1mb3JtX19ib3JkZXItc3R5bGV7d2lkdGg6ODBweDttaW4td2lkdGg6ODBweH0uY2suY2stdGFibGUtZm9ybSAuY2stZm9ybV9fcm93LmNrLXRhYmxlLWZvcm1fX2JvcmRlci1yb3cgLmNrLXRhYmxlLWZvcm1fX2JvcmRlci13aWR0aHt3aWR0aDo1MHB4O21pbi13aWR0aDo1MHB4fS5jay5jay10YWJsZS1mb3JtIC5jay1mb3JtX19yb3cuY2stdGFibGUtZm9ybV9fZGltZW5zaW9ucy1yb3d7cGFkZGluZzowfS5jay5jay10YWJsZS1mb3JtIC5jay1mb3JtX19yb3cuY2stdGFibGUtZm9ybV9fZGltZW5zaW9ucy1yb3cgLmNrLWxhYmVsZWQtdmlldz4uY2stbGFiZWx7Zm9udC1zaXplOjEwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9LmNrLmNrLXRhYmxlLWZvcm0gLmNrLWZvcm1fX3Jvdy5jay10YWJsZS1mb3JtX19kaW1lbnNpb25zLXJvdyAuY2stdGFibGUtZm9ybV9fZGltZW5zaW9ucy1yb3dfX2hlaWdodCwuY2suY2stdGFibGUtZm9ybSAuY2stZm9ybV9fcm93LmNrLXRhYmxlLWZvcm1fX2RpbWVuc2lvbnMtcm93IC5jay10YWJsZS1mb3JtX19kaW1lbnNpb25zLXJvd19fd2lkdGh7bWFyZ2luOjB9LmNrLmNrLXRhYmxlLWZvcm0gLmNrLWZvcm1fX3Jvdy5jay10YWJsZS1mb3JtX19kaW1lbnNpb25zLXJvdyAuY2stdGFibGUtZm9ybV9fZGltZW5zaW9uLW9wZXJhdG9ye2FsaWduLXNlbGY6c3RhcnQ7ZGlzcGxheTppbmxpbmUtYmxvY2s7aGVpZ2h0OnZhcigtLWNrLXVpLWNvbXBvbmVudC1taW4taGVpZ2h0KTtsaW5lLWhlaWdodDp2YXIoLS1jay11aS1jb21wb25lbnQtbWluLWhlaWdodCk7bWFyZ2luOjAgdmFyKC0tY2stc3BhY2luZy1zbWFsbCl9LmNrLmNrLXRhYmxlLWZvcm0gLmNrLmNrLWxhYmVsZWQtdmlldyAuY2suY2stbGFiZWxlZC12aWV3X19zdGF0dXN7Ym9yZGVyLXJhZGl1czowfS5jay1yb3VuZGVkLWNvcm5lcnMgLmNrLmNrLXRhYmxlLWZvcm0gLmNrLmNrLWxhYmVsZWQtdmlldyAuY2suY2stbGFiZWxlZC12aWV3X19zdGF0dXMsLmNrLmNrLXRhYmxlLWZvcm0gLmNrLmNrLWxhYmVsZWQtdmlldyAuY2suY2stbGFiZWxlZC12aWV3X19zdGF0dXMuY2stcm91bmRlZC1jb3JuZXJze2JvcmRlci1yYWRpdXM6dmFyKC0tY2stYm9yZGVyLXJhZGl1cyl9LmNrLmNrLXRhYmxlLWZvcm0gLmNrLmNrLWxhYmVsZWQtdmlldyAuY2suY2stbGFiZWxlZC12aWV3X19zdGF0dXN7YmFja2dyb3VuZDp2YXIoLS1jay1jb2xvci1iYXNlLWVycm9yKTtjb2xvcjp2YXIoLS1jay1jb2xvci1iYXNlLWJhY2tncm91bmQpO3BhZGRpbmc6dmFyKC0tY2stc3BhY2luZy1zbWFsbCkgdmFyKC0tY2stc3BhY2luZy1tZWRpdW0pO21pbi13aWR0aDp2YXIoLS1jay10YWJsZS1wcm9wZXJ0aWVzLW1pbi1lcnJvci13aWR0aCk7dGV4dC1hbGlnbjpjZW50ZXJ9LmNrLmNrLXRhYmxlLWZvcm0gLmNrLmNrLWxhYmVsZWQtdmlldyAuY2suY2stbGFiZWxlZC12aWV3X19zdGF0dXM6YWZ0ZXJ7Ym9yZGVyLWxlZnQ6dmFyKC0tY2stdGFibGUtcHJvcGVydGllcy1lcnJvci1hcnJvdy1zaXplKSBzb2xpZCB0cmFuc3BhcmVudDtib3JkZXItYm90dG9tOnZhcigtLWNrLXRhYmxlLXByb3BlcnRpZXMtZXJyb3ItYXJyb3ctc2l6ZSkgc29saWQgdmFyKC0tY2stY29sb3ItYmFzZS1lcnJvcik7Ym9yZGVyLXJpZ2h0OnZhcigtLWNrLXRhYmxlLXByb3BlcnRpZXMtZXJyb3ItYXJyb3ctc2l6ZSkgc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLXRvcDowIHNvbGlkIHRyYW5zcGFyZW50fS5jay5jay10YWJsZS1mb3JtIC5jay5jay1sYWJlbGVkLXZpZXcgLmNrLmNrLWxhYmVsZWQtdmlld19fc3RhdHVze2FuaW1hdGlvbjpjay10YWJsZS1mb3JtLWxhYmVsZWQtdmlldy1zdGF0dXMtYXBwZWFyIC4xNXMgZWFzZSBib3RofS5jay5jay10YWJsZS1mb3JtIC5jay5jay1sYWJlbGVkLXZpZXcgLmNrLWlucHV0LmNrLWVycm9yOm5vdCg6Zm9jdXMpKy5jay5jay1sYWJlbGVkLXZpZXdfX3N0YXR1c3tkaXNwbGF5Om5vbmV9QGtleWZyYW1lcyBjay10YWJsZS1mb3JtLWxhYmVsZWQtdmlldy1zdGF0dXMtYXBwZWFyezAle29wYWNpdHk6MH10b3tvcGFjaXR5OjF9fSdcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgdmFyIG4gPSBpKDEpO1xyXG4gICAgICAgIHZhciBvID0gaSgxMTEpO1xyXG4gICAgICAgIG8gPSBvLl9fZXNNb2R1bGUgPyBvLmRlZmF1bHQgOiBvO1xyXG4gICAgICAgIGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICBvID0gW1t0LmksIG8sIFwiXCJdXVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgciA9IHtpbmplY3RUeXBlOiBcInNpbmdsZXRvblN0eWxlVGFnXCJ9O1xyXG4gICAgICAgIHIuaW5zZXJ0ID0gXCJoZWFkXCI7XHJcbiAgICAgICAgci5zaW5nbGV0b24gPSB0cnVlO1xyXG4gICAgICAgIHZhciBzID0gbihvLCByKTtcclxuICAgICAgICB2YXIgYSA9IG8ubG9jYWxzID8gby5sb2NhbHMgOiB7fTtcclxuICAgICAgICB0LmV4cG9ydHMgPSBhXHJcbiAgICB9LCBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IFwiLmNrLmNrLXRhYmxlLWNlbGwtcHJvcGVydGllcy1mb3JtIC5jay1mb3JtX19yb3cuY2stdGFibGUtY2VsbC1wcm9wZXJ0aWVzLWZvcm1fX2FsaWdubWVudC1yb3d7ZmxleC13cmFwOndyYXB9LmNrLmNrLXRhYmxlLWNlbGwtcHJvcGVydGllcy1mb3JtIC5jay1mb3JtX19yb3cuY2stdGFibGUtY2VsbC1wcm9wZXJ0aWVzLWZvcm1fX2FsaWdubWVudC1yb3cgLmNrLmNrLXRvb2xiYXJ7ZmxleC1ncm93OjB9LmNrLmNrLXRhYmxlLWNlbGwtcHJvcGVydGllcy1mb3Jte3dpZHRoOjMyMHB4fS5jay5jay10YWJsZS1jZWxsLXByb3BlcnRpZXMtZm9ybSAuY2stZm9ybV9fcm93LmNrLXRhYmxlLWNlbGwtcHJvcGVydGllcy1mb3JtX19wYWRkaW5nLXJvd3twYWRkaW5nOjA7d2lkdGg6MzUlfS5jay5jay10YWJsZS1jZWxsLXByb3BlcnRpZXMtZm9ybSAuY2stZm9ybV9fcm93LmNrLXRhYmxlLWNlbGwtcHJvcGVydGllcy1mb3JtX19hbGlnbm1lbnQtcm93IC5jay5jay10b29sYmFye2JhY2tncm91bmQ6bm9uZX1cIlxyXG4gICAgfSwgZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICB2YXIgbiA9IGkoMSk7XHJcbiAgICAgICAgdmFyIG8gPSBpKDExMyk7XHJcbiAgICAgICAgbyA9IG8uX19lc01vZHVsZSA/IG8uZGVmYXVsdCA6IG87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBvID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgIG8gPSBbW3QuaSwgbywgXCJcIl1dXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByID0ge2luamVjdFR5cGU6IFwic2luZ2xldG9uU3R5bGVUYWdcIn07XHJcbiAgICAgICAgci5pbnNlcnQgPSBcImhlYWRcIjtcclxuICAgICAgICByLnNpbmdsZXRvbiA9IHRydWU7XHJcbiAgICAgICAgdmFyIHMgPSBuKG8sIHIpO1xyXG4gICAgICAgIHZhciBhID0gby5sb2NhbHMgPyBvLmxvY2FscyA6IHt9O1xyXG4gICAgICAgIHQuZXhwb3J0cyA9IGFcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgdC5leHBvcnRzID0gXCIuY2suY2stdGFibGUtcHJvcGVydGllcy1mb3JtIC5jay1mb3JtX19yb3cuY2stdGFibGUtcHJvcGVydGllcy1mb3JtX19hbGlnbm1lbnQtcm93e2ZsZXgtd3JhcDp3cmFwO2ZsZXgtYmFzaXM6MDthbGlnbi1jb250ZW50OmJhc2VsaW5lfS5jay5jay10YWJsZS1wcm9wZXJ0aWVzLWZvcm0gLmNrLWZvcm1fX3Jvdy5jay10YWJsZS1wcm9wZXJ0aWVzLWZvcm1fX2FsaWdubWVudC1yb3cgLmNrLmNrLXRvb2xiYXIgLmNrLXRvb2xiYXJfX2l0ZW1ze2ZsZXgtd3JhcDpub3dyYXB9LmNrLmNrLXRhYmxlLXByb3BlcnRpZXMtZm9ybXt3aWR0aDozMjBweH0uY2suY2stdGFibGUtcHJvcGVydGllcy1mb3JtIC5jay1mb3JtX19yb3cuY2stdGFibGUtcHJvcGVydGllcy1mb3JtX19hbGlnbm1lbnQtcm93e3BhZGRpbmc6MH0uY2suY2stdGFibGUtcHJvcGVydGllcy1mb3JtIC5jay1mb3JtX19yb3cuY2stdGFibGUtcHJvcGVydGllcy1mb3JtX19hbGlnbm1lbnQtcm93IC5jay5jay10b29sYmFye2JhY2tncm91bmQ6bm9uZX0uY2suY2stdGFibGUtcHJvcGVydGllcy1mb3JtIC5jay1mb3JtX19yb3cuY2stdGFibGUtcHJvcGVydGllcy1mb3JtX19hbGlnbm1lbnQtcm93IC5jay5jay10b29sYmFyIC5jay10b29sYmFyX19pdGVtcz4qe3dpZHRoOjQwcHh9XCJcclxuICAgIH0sIGZ1bmN0aW9uICh0LCBlLCBpKSB7XHJcbiAgICAgICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICAgICAgaS5yKGUpO1xyXG4gICAgICAgIGkuZChlLCBcImRlZmF1bHRcIiwgKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF9JXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHZhciBuID0gaSgzKTtcclxuICAgICAgICB2YXIgbyA9IG5bXCJhXCJdLlN5bWJvbDtcclxuICAgICAgICB2YXIgciA9IG87XHJcbiAgICAgICAgdmFyIHMgPSBPYmplY3QucHJvdG90eXBlO1xyXG4gICAgICAgIHZhciBhID0gcy5oYXNPd25Qcm9wZXJ0eTtcclxuICAgICAgICB2YXIgYyA9IHMudG9TdHJpbmc7XHJcbiAgICAgICAgdmFyIGwgPSByID8gci50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZCh0KSB7XHJcbiAgICAgICAgICAgIHZhciBlID0gYS5jYWxsKHQsIGwpLCBpID0gdFtsXTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHRbbF0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgbiA9IHRydWVcclxuICAgICAgICAgICAgfSBjYXRjaCAodCkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBvID0gYy5jYWxsKHQpO1xyXG4gICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0W2xdID0gaVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdFtsXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgdSA9IGQ7XHJcbiAgICAgICAgdmFyIGggPSBPYmplY3QucHJvdG90eXBlO1xyXG4gICAgICAgIHZhciBmID0gaC50b1N0cmluZztcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZyh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmLmNhbGwodClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBtID0gZztcclxuICAgICAgICB2YXIgcCA9IFwiW29iamVjdCBOdWxsXVwiLCBiID0gXCJbb2JqZWN0IFVuZGVmaW5lZF1cIjtcclxuICAgICAgICB2YXIgdyA9IHIgPyByLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBrKHQpIHtcclxuICAgICAgICAgICAgaWYgKHQgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPT09IHVuZGVmaW5lZCA/IGIgOiBwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHcgJiYgdyBpbiBPYmplY3QodCkgPyB1KHQpIDogbSh0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIF8gPSBrO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB2KHQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdChlKGkpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgeSA9IHY7XHJcbiAgICAgICAgdmFyIHggPSB5KE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcclxuICAgICAgICB2YXIgQyA9IHg7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEEodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdCAhPSBudWxsICYmIHR5cGVvZiB0ID09IFwib2JqZWN0XCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBUID0gQTtcclxuICAgICAgICB2YXIgUCA9IFwiW29iamVjdCBPYmplY3RdXCI7XHJcbiAgICAgICAgdmFyIFMgPSBGdW5jdGlvbi5wcm90b3R5cGUsIEUgPSBPYmplY3QucHJvdG90eXBlO1xyXG4gICAgICAgIHZhciBSID0gUy50b1N0cmluZztcclxuICAgICAgICB2YXIgTyA9IEUuaGFzT3duUHJvcGVydHk7XHJcbiAgICAgICAgdmFyIEkgPSBSLmNhbGwoT2JqZWN0KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVih0KSB7XHJcbiAgICAgICAgICAgIGlmICghVCh0KSB8fCBfKHQpICE9IFApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBlID0gQyh0KTtcclxuICAgICAgICAgICAgaWYgKGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGkgPSBPLmNhbGwoZSwgXCJjb25zdHJ1Y3RvclwiKSAmJiBlLmNvbnN0cnVjdG9yO1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIGkgPT0gXCJmdW5jdGlvblwiICYmIGkgaW5zdGFuY2VvZiBpICYmIFIuY2FsbChpKSA9PSBJXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgTiA9IFY7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE0oKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX19kYXRhX18gPSBbXTtcclxuICAgICAgICAgICAgdGhpcy5zaXplID0gMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIEIgPSBNO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB6KHQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQgPT09IGUgfHwgdCAhPT0gdCAmJiBlICE9PSBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgTCA9IHo7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEYodCwgZSkge1xyXG4gICAgICAgICAgICB2YXIgaSA9IHQubGVuZ3RoO1xyXG4gICAgICAgICAgICB3aGlsZSAoaS0tKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoTCh0W2ldWzBdLCBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIC0xXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgRCA9IEY7XHJcbiAgICAgICAgdmFyIGogPSBBcnJheS5wcm90b3R5cGU7XHJcbiAgICAgICAgdmFyIEggPSBqLnNwbGljZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVyh0KSB7XHJcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5fX2RhdGFfXywgaSA9IEQoZSwgdCk7XHJcbiAgICAgICAgICAgIGlmIChpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG4gPSBlLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIGlmIChpID09IG4pIHtcclxuICAgICAgICAgICAgICAgIGUucG9wKClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIEguY2FsbChlLCBpLCAxKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC0tdGhpcy5zaXplO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHEgPSBXO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBVKHQpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl9fZGF0YV9fLCBpID0gRChlLCB0KTtcclxuICAgICAgICAgICAgcmV0dXJuIGkgPCAwID8gdW5kZWZpbmVkIDogZVtpXVsxXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyICQgPSBVO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBHKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEQodGhpcy5fX2RhdGFfXywgdCkgPiAtMVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIEsgPSBHO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBKKHQsIGUpIHtcclxuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLl9fZGF0YV9fLCBuID0gRChpLCB0KTtcclxuICAgICAgICAgICAgaWYgKG4gPCAwKSB7XHJcbiAgICAgICAgICAgICAgICArK3RoaXMuc2l6ZTtcclxuICAgICAgICAgICAgICAgIGkucHVzaChbdCwgZV0pXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpW25dWzFdID0gZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgWSA9IEo7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFEodCkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IC0xLCBpID0gdCA9PSBudWxsID8gMCA6IHQubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHdoaWxlICgrK2UgPCBpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbiA9IHRbZV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChuWzBdLCBuWzFdKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBRLnByb3RvdHlwZS5jbGVhciA9IEI7XHJcbiAgICAgICAgUS5wcm90b3R5cGVbXCJkZWxldGVcIl0gPSBxO1xyXG4gICAgICAgIFEucHJvdG90eXBlLmdldCA9ICQ7XHJcbiAgICAgICAgUS5wcm90b3R5cGUuaGFzID0gSztcclxuICAgICAgICBRLnByb3RvdHlwZS5zZXQgPSBZO1xyXG4gICAgICAgIHZhciBYID0gUTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWigpIHtcclxuICAgICAgICAgICAgdGhpcy5fX2RhdGFfXyA9IG5ldyBYO1xyXG4gICAgICAgICAgICB0aGlzLnNpemUgPSAwXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgdHQgPSBaO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBldCh0KSB7XHJcbiAgICAgICAgICAgIHZhciBlID0gdGhpcy5fX2RhdGFfXywgaSA9IGVbXCJkZWxldGVcIl0odCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IGUuc2l6ZTtcclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBpdCA9IGV0O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBudCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9fZGF0YV9fLmdldCh0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG90ID0gbnQ7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJ0KHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgc3QgPSBydDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYXQodCkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IHR5cGVvZiB0O1xyXG4gICAgICAgICAgICByZXR1cm4gdCAhPSBudWxsICYmIChlID09IFwib2JqZWN0XCIgfHwgZSA9PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgY3QgPSBhdDtcclxuICAgICAgICB2YXIgbHQgPSBcIltvYmplY3QgQXN5bmNGdW5jdGlvbl1cIiwgZHQgPSBcIltvYmplY3QgRnVuY3Rpb25dXCIsIHV0ID0gXCJbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXVwiLFxyXG4gICAgICAgICAgICBodCA9IFwiW29iamVjdCBQcm94eV1cIjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZnQodCkge1xyXG4gICAgICAgICAgICBpZiAoIWN0KHQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZSA9IF8odCk7XHJcbiAgICAgICAgICAgIHJldHVybiBlID09IGR0IHx8IGUgPT0gdXQgfHwgZSA9PSBsdCB8fCBlID09IGh0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZ3QgPSBmdDtcclxuICAgICAgICB2YXIgbXQgPSBuW1wiYVwiXVtcIl9fY29yZS1qc19zaGFyZWRfX1wiXTtcclxuICAgICAgICB2YXIgcHQgPSBtdDtcclxuICAgICAgICB2YXIgYnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0ID0gL1teLl0rJC8uZXhlYyhwdCAmJiBwdC5rZXlzICYmIHB0LmtleXMuSUVfUFJPVE8gfHwgXCJcIik7XHJcbiAgICAgICAgICAgIHJldHVybiB0ID8gXCJTeW1ib2woc3JjKV8xLlwiICsgdCA6IFwiXCJcclxuICAgICAgICB9KCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHd0KHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICEhYnQgJiYgYnQgaW4gdFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGt0ID0gd3Q7XHJcbiAgICAgICAgdmFyIF90ID0gRnVuY3Rpb24ucHJvdG90eXBlO1xyXG4gICAgICAgIHZhciB2dCA9IF90LnRvU3RyaW5nO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB5dCh0KSB7XHJcbiAgICAgICAgICAgIGlmICh0ICE9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZ0LmNhbGwodClcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgKyBcIlwiXHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFwiXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB4dCA9IHl0O1xyXG4gICAgICAgIHZhciBDdCA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcclxuICAgICAgICB2YXIgQXQgPSAvXlxcW29iamVjdCAuKz9Db25zdHJ1Y3RvclxcXSQvO1xyXG4gICAgICAgIHZhciBUdCA9IEZ1bmN0aW9uLnByb3RvdHlwZSwgUHQgPSBPYmplY3QucHJvdG90eXBlO1xyXG4gICAgICAgIHZhciBTdCA9IFR0LnRvU3RyaW5nO1xyXG4gICAgICAgIHZhciBFdCA9IFB0Lmhhc093blByb3BlcnR5O1xyXG4gICAgICAgIHZhciBSdCA9IFJlZ0V4cChcIl5cIiArIFN0LmNhbGwoRXQpLnJlcGxhY2UoQ3QsIFwiXFxcXCQmXCIpLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csIFwiJDEuKj9cIikgKyBcIiRcIik7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE90KHQpIHtcclxuICAgICAgICAgICAgaWYgKCFjdCh0KSB8fCBrdCh0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGUgPSBndCh0KSA/IFJ0IDogQXQ7XHJcbiAgICAgICAgICAgIHJldHVybiBlLnRlc3QoeHQodCkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgSXQgPSBPdDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVnQodCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdCA9PSBudWxsID8gdW5kZWZpbmVkIDogdFtlXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIE50ID0gVnQ7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE10KHQsIGUpIHtcclxuICAgICAgICAgICAgdmFyIGkgPSBOdCh0LCBlKTtcclxuICAgICAgICAgICAgcmV0dXJuIEl0KGkpID8gaSA6IHVuZGVmaW5lZFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIEJ0ID0gTXQ7XHJcbiAgICAgICAgdmFyIHp0ID0gQnQobltcImFcIl0sIFwiTWFwXCIpO1xyXG4gICAgICAgIHZhciBMdCA9IHp0O1xyXG4gICAgICAgIHZhciBGdCA9IEJ0KE9iamVjdCwgXCJjcmVhdGVcIik7XHJcbiAgICAgICAgdmFyIER0ID0gRnQ7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGp0KCkge1xyXG4gICAgICAgICAgICB0aGlzLl9fZGF0YV9fID0gRHQgPyBEdChudWxsKSA6IHt9O1xyXG4gICAgICAgICAgICB0aGlzLnNpemUgPSAwXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgSHQgPSBqdDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gV3QodCkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMuaGFzKHQpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW3RdO1xyXG4gICAgICAgICAgICB0aGlzLnNpemUgLT0gZSA/IDEgOiAwO1xyXG4gICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHF0ID0gV3Q7XHJcbiAgICAgICAgdmFyIFV0ID0gXCJfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fXCI7XHJcbiAgICAgICAgdmFyICR0ID0gT2JqZWN0LnByb3RvdHlwZTtcclxuICAgICAgICB2YXIgR3QgPSAkdC5oYXNPd25Qcm9wZXJ0eTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gS3QodCkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMuX19kYXRhX187XHJcbiAgICAgICAgICAgIGlmIChEdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGkgPSBlW3RdO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgPT09IFV0ID8gdW5kZWZpbmVkIDogaVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBHdC5jYWxsKGUsIHQpID8gZVt0XSA6IHVuZGVmaW5lZFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIEp0ID0gS3Q7XHJcbiAgICAgICAgdmFyIFl0ID0gT2JqZWN0LnByb3RvdHlwZTtcclxuICAgICAgICB2YXIgUXQgPSBZdC5oYXNPd25Qcm9wZXJ0eTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWHQodCkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IHRoaXMuX19kYXRhX187XHJcbiAgICAgICAgICAgIHJldHVybiBEdCA/IGVbdF0gIT09IHVuZGVmaW5lZCA6IFF0LmNhbGwoZSwgdClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBadCA9IFh0O1xyXG4gICAgICAgIHZhciB0ZSA9IFwiX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfX1wiO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBlZSh0LCBlKSB7XHJcbiAgICAgICAgICAgIHZhciBpID0gdGhpcy5fX2RhdGFfXztcclxuICAgICAgICAgICAgdGhpcy5zaXplICs9IHRoaXMuaGFzKHQpID8gMCA6IDE7XHJcbiAgICAgICAgICAgIGlbdF0gPSBEdCAmJiBlID09PSB1bmRlZmluZWQgPyB0ZSA6IGU7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaWUgPSBlZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbmUodCkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IC0xLCBpID0gdCA9PSBudWxsID8gMCA6IHQubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHdoaWxlICgrK2UgPCBpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbiA9IHRbZV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChuWzBdLCBuWzFdKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuZS5wcm90b3R5cGUuY2xlYXIgPSBIdDtcclxuICAgICAgICBuZS5wcm90b3R5cGVbXCJkZWxldGVcIl0gPSBxdDtcclxuICAgICAgICBuZS5wcm90b3R5cGUuZ2V0ID0gSnQ7XHJcbiAgICAgICAgbmUucHJvdG90eXBlLmhhcyA9IFp0O1xyXG4gICAgICAgIG5lLnByb3RvdHlwZS5zZXQgPSBpZTtcclxuICAgICAgICB2YXIgb2UgPSBuZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcmUoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IDA7XHJcbiAgICAgICAgICAgIHRoaXMuX19kYXRhX18gPSB7aGFzaDogbmV3IG9lLCBtYXA6IG5ldyAoTHQgfHwgWCksIHN0cmluZzogbmV3IG9lfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHNlID0gcmU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFlKHQpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSB0eXBlb2YgdDtcclxuICAgICAgICAgICAgcmV0dXJuIGUgPT0gXCJzdHJpbmdcIiB8fCBlID09IFwibnVtYmVyXCIgfHwgZSA9PSBcInN5bWJvbFwiIHx8IGUgPT0gXCJib29sZWFuXCIgPyB0ICE9PSBcIl9fcHJvdG9fX1wiIDogdCA9PT0gbnVsbFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGNlID0gYWU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxlKHQsIGUpIHtcclxuICAgICAgICAgICAgdmFyIGkgPSB0Ll9fZGF0YV9fO1xyXG4gICAgICAgICAgICByZXR1cm4gY2UoZSkgPyBpW3R5cGVvZiBlID09IFwic3RyaW5nXCIgPyBcInN0cmluZ1wiIDogXCJoYXNoXCJdIDogaS5tYXBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBkZSA9IGxlO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB1ZSh0KSB7XHJcbiAgICAgICAgICAgIHZhciBlID0gZGUodGhpcywgdClbXCJkZWxldGVcIl0odCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2l6ZSAtPSBlID8gMSA6IDA7XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaGUgPSB1ZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZmUodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGUodGhpcywgdCkuZ2V0KHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZ2UgPSBmZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbWUodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZGUodGhpcywgdCkuaGFzKHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcGUgPSBtZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYmUodCwgZSkge1xyXG4gICAgICAgICAgICB2YXIgaSA9IGRlKHRoaXMsIHQpLCBuID0gaS5zaXplO1xyXG4gICAgICAgICAgICBpLnNldCh0LCBlKTtcclxuICAgICAgICAgICAgdGhpcy5zaXplICs9IGkuc2l6ZSA9PSBuID8gMCA6IDE7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgd2UgPSBiZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24ga2UodCkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IC0xLCBpID0gdCA9PSBudWxsID8gMCA6IHQubGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgIHdoaWxlICgrK2UgPCBpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbiA9IHRbZV07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChuWzBdLCBuWzFdKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBrZS5wcm90b3R5cGUuY2xlYXIgPSBzZTtcclxuICAgICAgICBrZS5wcm90b3R5cGVbXCJkZWxldGVcIl0gPSBoZTtcclxuICAgICAgICBrZS5wcm90b3R5cGUuZ2V0ID0gZ2U7XHJcbiAgICAgICAga2UucHJvdG90eXBlLmhhcyA9IHBlO1xyXG4gICAgICAgIGtlLnByb3RvdHlwZS5zZXQgPSB3ZTtcclxuICAgICAgICB2YXIgX2UgPSBrZTtcclxuICAgICAgICB2YXIgdmUgPSAyMDA7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHllKHQsIGUpIHtcclxuICAgICAgICAgICAgdmFyIGkgPSB0aGlzLl9fZGF0YV9fO1xyXG4gICAgICAgICAgICBpZiAoaSBpbnN0YW5jZW9mIFgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBuID0gaS5fX2RhdGFfXztcclxuICAgICAgICAgICAgICAgIGlmICghTHQgfHwgbi5sZW5ndGggPCB2ZSAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBuLnB1c2goW3QsIGVdKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNpemUgPSArK2kuc2l6ZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaSA9IHRoaXMuX19kYXRhX18gPSBuZXcgX2UobilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpLnNldCh0LCBlKTtcclxuICAgICAgICAgICAgdGhpcy5zaXplID0gaS5zaXplO1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHhlID0geWU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIENlKHQpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSB0aGlzLl9fZGF0YV9fID0gbmV3IFgodCk7XHJcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA9IGUuc2l6ZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgQ2UucHJvdG90eXBlLmNsZWFyID0gdHQ7XHJcbiAgICAgICAgQ2UucHJvdG90eXBlW1wiZGVsZXRlXCJdID0gaXQ7XHJcbiAgICAgICAgQ2UucHJvdG90eXBlLmdldCA9IG90O1xyXG4gICAgICAgIENlLnByb3RvdHlwZS5oYXMgPSBzdDtcclxuICAgICAgICBDZS5wcm90b3R5cGUuc2V0ID0geGU7XHJcbiAgICAgICAgdmFyIEFlID0gQ2U7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFRlKHQsIGUpIHtcclxuICAgICAgICAgICAgdmFyIGkgPSAtMSwgbiA9IHQgPT0gbnVsbCA/IDAgOiB0Lmxlbmd0aDtcclxuICAgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChlKHRbaV0sIGksIHQpID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBQZSA9IFRlO1xyXG4gICAgICAgIHZhciBTZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHZhciB0ID0gQnQoT2JqZWN0LCBcImRlZmluZVByb3BlcnR5XCIpO1xyXG4gICAgICAgICAgICAgICAgdCh7fSwgXCJcIiwge30pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfSBjYXRjaCAodCkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSgpO1xyXG4gICAgICAgIHZhciBFZSA9IFNlO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBSZSh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGlmIChlID09IFwiX19wcm90b19fXCIgJiYgRWUpIHtcclxuICAgICAgICAgICAgICAgIEVlKHQsIGUsIHtjb25maWd1cmFibGU6IHRydWUsIGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiBpLCB3cml0YWJsZTogdHJ1ZX0pXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0W2VdID0gaVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgT2UgPSBSZTtcclxuICAgICAgICB2YXIgSWUgPSBPYmplY3QucHJvdG90eXBlO1xyXG4gICAgICAgIHZhciBWZSA9IEllLmhhc093blByb3BlcnR5O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBOZSh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIHZhciBuID0gdFtlXTtcclxuICAgICAgICAgICAgaWYgKCEoVmUuY2FsbCh0LCBlKSAmJiBMKG4sIGkpKSB8fCBpID09PSB1bmRlZmluZWQgJiYgIShlIGluIHQpKSB7XHJcbiAgICAgICAgICAgICAgICBPZSh0LCBlLCBpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgTWUgPSBOZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQmUodCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICB2YXIgbyA9ICFpO1xyXG4gICAgICAgICAgICBpIHx8IChpID0ge30pO1xyXG4gICAgICAgICAgICB2YXIgciA9IC0xLCBzID0gZS5sZW5ndGg7XHJcbiAgICAgICAgICAgIHdoaWxlICgrK3IgPCBzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYSA9IGVbcl07XHJcbiAgICAgICAgICAgICAgICB2YXIgYyA9IG4gPyBuKGlbYV0sIHRbYV0sIGEsIGksIHQpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgaWYgKGMgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGMgPSB0W2FdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobykge1xyXG4gICAgICAgICAgICAgICAgICAgIE9lKGksIGEsIGMpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIE1lKGksIGEsIGMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB6ZSA9IEJlO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBMZSh0LCBlKSB7XHJcbiAgICAgICAgICAgIHZhciBpID0gLTEsIG4gPSBBcnJheSh0KTtcclxuICAgICAgICAgICAgd2hpbGUgKCsraSA8IHQpIHtcclxuICAgICAgICAgICAgICAgIG5baV0gPSBlKGkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBGZSA9IExlO1xyXG4gICAgICAgIHZhciBEZSA9IFwiW29iamVjdCBBcmd1bWVudHNdXCI7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGplKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFQodCkgJiYgXyh0KSA9PSBEZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIEhlID0gamU7XHJcbiAgICAgICAgdmFyIFdlID0gT2JqZWN0LnByb3RvdHlwZTtcclxuICAgICAgICB2YXIgcWUgPSBXZS5oYXNPd25Qcm9wZXJ0eTtcclxuICAgICAgICB2YXIgVWUgPSBXZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcclxuICAgICAgICB2YXIgJGUgPSBIZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBhcmd1bWVudHNcclxuICAgICAgICB9KCkpID8gSGUgOiBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gVCh0KSAmJiBxZS5jYWxsKHQsIFwiY2FsbGVlXCIpICYmICFVZS5jYWxsKHQsIFwiY2FsbGVlXCIpXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgR2UgPSAkZTtcclxuICAgICAgICB2YXIgS2UgPSBBcnJheS5pc0FycmF5O1xyXG4gICAgICAgIHZhciBKZSA9IEtlO1xyXG4gICAgICAgIHZhciBZZSA9IGkoNCk7XHJcbiAgICAgICAgdmFyIFFlID0gOTAwNzE5OTI1NDc0MDk5MTtcclxuICAgICAgICB2YXIgWGUgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBaZSh0LCBlKSB7XHJcbiAgICAgICAgICAgIHZhciBpID0gdHlwZW9mIHQ7XHJcbiAgICAgICAgICAgIGUgPSBlID09IG51bGwgPyBRZSA6IGU7XHJcbiAgICAgICAgICAgIHJldHVybiAhIWUgJiYgKGkgPT0gXCJudW1iZXJcIiB8fCBpICE9IFwic3ltYm9sXCIgJiYgWGUudGVzdCh0KSkgJiYgKHQgPiAtMSAmJiB0ICUgMSA9PSAwICYmIHQgPCBlKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHRpID0gWmU7XHJcbiAgICAgICAgdmFyIGVpID0gOTAwNzE5OTI1NDc0MDk5MTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaWkodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHQgPT0gXCJudW1iZXJcIiAmJiB0ID4gLTEgJiYgdCAlIDEgPT0gMCAmJiB0IDw9IGVpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbmkgPSBpaTtcclxuICAgICAgICB2YXIgb2kgPSBcIltvYmplY3QgQXJndW1lbnRzXVwiLCByaSA9IFwiW29iamVjdCBBcnJheV1cIiwgc2kgPSBcIltvYmplY3QgQm9vbGVhbl1cIiwgYWkgPSBcIltvYmplY3QgRGF0ZV1cIixcclxuICAgICAgICAgICAgY2kgPSBcIltvYmplY3QgRXJyb3JdXCIsIGxpID0gXCJbb2JqZWN0IEZ1bmN0aW9uXVwiLCBkaSA9IFwiW29iamVjdCBNYXBdXCIsIHVpID0gXCJbb2JqZWN0IE51bWJlcl1cIixcclxuICAgICAgICAgICAgaGkgPSBcIltvYmplY3QgT2JqZWN0XVwiLCBmaSA9IFwiW29iamVjdCBSZWdFeHBdXCIsIGdpID0gXCJbb2JqZWN0IFNldF1cIiwgbWkgPSBcIltvYmplY3QgU3RyaW5nXVwiLFxyXG4gICAgICAgICAgICBwaSA9IFwiW29iamVjdCBXZWFrTWFwXVwiO1xyXG4gICAgICAgIHZhciBiaSA9IFwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIiwgd2kgPSBcIltvYmplY3QgRGF0YVZpZXddXCIsIGtpID0gXCJbb2JqZWN0IEZsb2F0MzJBcnJheV1cIixcclxuICAgICAgICAgICAgX2kgPSBcIltvYmplY3QgRmxvYXQ2NEFycmF5XVwiLCB2aSA9IFwiW29iamVjdCBJbnQ4QXJyYXldXCIsIHlpID0gXCJbb2JqZWN0IEludDE2QXJyYXldXCIsXHJcbiAgICAgICAgICAgIHhpID0gXCJbb2JqZWN0IEludDMyQXJyYXldXCIsIENpID0gXCJbb2JqZWN0IFVpbnQ4QXJyYXldXCIsIEFpID0gXCJbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XVwiLFxyXG4gICAgICAgICAgICBUaSA9IFwiW29iamVjdCBVaW50MTZBcnJheV1cIiwgUGkgPSBcIltvYmplY3QgVWludDMyQXJyYXldXCI7XHJcbiAgICAgICAgdmFyIFNpID0ge307XHJcbiAgICAgICAgU2lba2ldID0gU2lbX2ldID0gU2lbdmldID0gU2lbeWldID0gU2lbeGldID0gU2lbQ2ldID0gU2lbQWldID0gU2lbVGldID0gU2lbUGldID0gdHJ1ZTtcclxuICAgICAgICBTaVtvaV0gPSBTaVtyaV0gPSBTaVtiaV0gPSBTaVtzaV0gPSBTaVt3aV0gPSBTaVthaV0gPSBTaVtjaV0gPSBTaVtsaV0gPSBTaVtkaV0gPSBTaVt1aV0gPSBTaVtoaV0gPSBTaVtmaV0gPSBTaVtnaV0gPSBTaVttaV0gPSBTaVtwaV0gPSBmYWxzZTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRWkodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gVCh0KSAmJiBuaSh0Lmxlbmd0aCkgJiYgISFTaVtfKHQpXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIFJpID0gRWk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE9pKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdChlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgSWkgPSBPaTtcclxuICAgICAgICB2YXIgVmkgPSBpKDUpO1xyXG4gICAgICAgIHZhciBOaSA9IFZpW1wiYVwiXSAmJiBWaVtcImFcIl0uaXNUeXBlZEFycmF5O1xyXG4gICAgICAgIHZhciBNaSA9IE5pID8gSWkoTmkpIDogUmk7XHJcbiAgICAgICAgdmFyIEJpID0gTWk7XHJcbiAgICAgICAgdmFyIHppID0gT2JqZWN0LnByb3RvdHlwZTtcclxuICAgICAgICB2YXIgTGkgPSB6aS5oYXNPd25Qcm9wZXJ0eTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRmkodCwgZSkge1xyXG4gICAgICAgICAgICB2YXIgaSA9IEplKHQpLCBuID0gIWkgJiYgR2UodCksIG8gPSAhaSAmJiAhbiAmJiBPYmplY3QoWWVbXCJhXCJdKSh0KSwgciA9ICFpICYmICFuICYmICFvICYmIEJpKHQpLFxyXG4gICAgICAgICAgICAgICAgcyA9IGkgfHwgbiB8fCBvIHx8IHIsIGEgPSBzID8gRmUodC5sZW5ndGgsIFN0cmluZykgOiBbXSwgYyA9IGEubGVuZ3RoO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBsIGluIHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICgoZSB8fCBMaS5jYWxsKHQsIGwpKSAmJiAhKHMgJiYgKGwgPT0gXCJsZW5ndGhcIiB8fCBvICYmIChsID09IFwib2Zmc2V0XCIgfHwgbCA9PSBcInBhcmVudFwiKSB8fCByICYmIChsID09IFwiYnVmZmVyXCIgfHwgbCA9PSBcImJ5dGVMZW5ndGhcIiB8fCBsID09IFwiYnl0ZU9mZnNldFwiKSB8fCB0aShsLCBjKSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYS5wdXNoKGwpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGFcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBEaSA9IEZpO1xyXG4gICAgICAgIHZhciBqaSA9IE9iamVjdC5wcm90b3R5cGU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEhpKHQpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSB0ICYmIHQuY29uc3RydWN0b3IsIGkgPSB0eXBlb2YgZSA9PSBcImZ1bmN0aW9uXCIgJiYgZS5wcm90b3R5cGUgfHwgamk7XHJcbiAgICAgICAgICAgIHJldHVybiB0ID09PSBpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgV2kgPSBIaTtcclxuICAgICAgICB2YXIgcWkgPSB5KE9iamVjdC5rZXlzLCBPYmplY3QpO1xyXG4gICAgICAgIHZhciBVaSA9IHFpO1xyXG4gICAgICAgIHZhciAkaSA9IE9iamVjdC5wcm90b3R5cGU7XHJcbiAgICAgICAgdmFyIEdpID0gJGkuaGFzT3duUHJvcGVydHk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEtpKHQpIHtcclxuICAgICAgICAgICAgaWYgKCFXaSh0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVpKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGUgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBPYmplY3QodCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChHaS5jYWxsKHQsIGkpICYmIGkgIT0gXCJjb25zdHJ1Y3RvclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wdXNoKGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBKaSA9IEtpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBZaSh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ICE9IG51bGwgJiYgbmkodC5sZW5ndGgpICYmICFndCh0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIFFpID0gWWk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFhpKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFFpKHQpID8gRGkodCkgOiBKaSh0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIFppID0gWGk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHRuKHQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQgJiYgemUoZSwgWmkoZSksIHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZW4gPSB0bjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbm4odCkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IFtdO1xyXG4gICAgICAgICAgICBpZiAodCAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpIGluIE9iamVjdCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHVzaChpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgb24gPSBubjtcclxuICAgICAgICB2YXIgcm4gPSBPYmplY3QucHJvdG90eXBlO1xyXG4gICAgICAgIHZhciBzbiA9IHJuLmhhc093blByb3BlcnR5O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBhbih0KSB7XHJcbiAgICAgICAgICAgIGlmICghY3QodCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvbih0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBlID0gV2kodCksIGkgPSBbXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgbiBpbiB0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShuID09IFwiY29uc3RydWN0b3JcIiAmJiAoZSB8fCAhc24uY2FsbCh0LCBuKSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5wdXNoKG4pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBjbiA9IGFuO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBsbih0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBRaSh0KSA/IERpKHQsIHRydWUpIDogY24odClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBkbiA9IGxuO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB1bih0LCBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ICYmIHplKGUsIGRuKGUpLCB0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGhuID0gdW47XHJcbiAgICAgICAgdmFyIGZuID0gaSg4KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ24odCwgZSkge1xyXG4gICAgICAgICAgICB2YXIgaSA9IC0xLCBuID0gdC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGUgfHwgKGUgPSBBcnJheShuKSk7XHJcbiAgICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XHJcbiAgICAgICAgICAgICAgICBlW2ldID0gdFtpXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbW4gPSBnbjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcG4odCwgZSkge1xyXG4gICAgICAgICAgICB2YXIgaSA9IC0xLCBuID0gdCA9PSBudWxsID8gMCA6IHQubGVuZ3RoLCBvID0gMCwgciA9IFtdO1xyXG4gICAgICAgICAgICB3aGlsZSAoKytpIDwgbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHMgPSB0W2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUocywgaSwgdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByW28rK10gPSBzXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBibiA9IHBuO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB3bigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFtdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIga24gPSB3bjtcclxuICAgICAgICB2YXIgX24gPSBPYmplY3QucHJvdG90eXBlO1xyXG4gICAgICAgIHZhciB2biA9IF9uLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xyXG4gICAgICAgIHZhciB5biA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XHJcbiAgICAgICAgdmFyIHhuID0gIXluID8ga24gOiBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICBpZiAodCA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW11cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0ID0gT2JqZWN0KHQpO1xyXG4gICAgICAgICAgICByZXR1cm4gYm4oeW4odCksIChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZuLmNhbGwodCwgZSlcclxuICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgQ24gPSB4bjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQW4odCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gemUodCwgQ24odCksIGUpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgVG4gPSBBbjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gUG4odCwgZSkge1xyXG4gICAgICAgICAgICB2YXIgaSA9IC0xLCBuID0gZS5sZW5ndGgsIG8gPSB0Lmxlbmd0aDtcclxuICAgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcclxuICAgICAgICAgICAgICAgIHRbbyArIGldID0gZVtpXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgU24gPSBQbjtcclxuICAgICAgICB2YXIgRW4gPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xyXG4gICAgICAgIHZhciBSbiA9ICFFbiA/IGtuIDogZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSBbXTtcclxuICAgICAgICAgICAgd2hpbGUgKHQpIHtcclxuICAgICAgICAgICAgICAgIFNuKGUsIENuKHQpKTtcclxuICAgICAgICAgICAgICAgIHQgPSBDKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBPbiA9IFJuO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBJbih0LCBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB6ZSh0LCBPbih0KSwgZSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBWbiA9IEluO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBObih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIHZhciBuID0gZSh0KTtcclxuICAgICAgICAgICAgcmV0dXJuIEplKHQpID8gbiA6IFNuKG4sIGkodCkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgTW4gPSBObjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQm4odCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTW4odCwgWmksIENuKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHpuID0gQm47XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIExuKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE1uKHQsIGRuLCBPbilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBGbiA9IExuO1xyXG4gICAgICAgIHZhciBEbiA9IEJ0KG5bXCJhXCJdLCBcIkRhdGFWaWV3XCIpO1xyXG4gICAgICAgIHZhciBqbiA9IERuO1xyXG4gICAgICAgIHZhciBIbiA9IEJ0KG5bXCJhXCJdLCBcIlByb21pc2VcIik7XHJcbiAgICAgICAgdmFyIFduID0gSG47XHJcbiAgICAgICAgdmFyIHFuID0gQnQobltcImFcIl0sIFwiU2V0XCIpO1xyXG4gICAgICAgIHZhciBVbiA9IHFuO1xyXG4gICAgICAgIHZhciAkbiA9IEJ0KG5bXCJhXCJdLCBcIldlYWtNYXBcIik7XHJcbiAgICAgICAgdmFyIEduID0gJG47XHJcbiAgICAgICAgdmFyIEtuID0gXCJbb2JqZWN0IE1hcF1cIiwgSm4gPSBcIltvYmplY3QgT2JqZWN0XVwiLCBZbiA9IFwiW29iamVjdCBQcm9taXNlXVwiLCBRbiA9IFwiW29iamVjdCBTZXRdXCIsXHJcbiAgICAgICAgICAgIFhuID0gXCJbb2JqZWN0IFdlYWtNYXBdXCI7XHJcbiAgICAgICAgdmFyIFpuID0gXCJbb2JqZWN0IERhdGFWaWV3XVwiO1xyXG4gICAgICAgIHZhciB0byA9IHh0KGpuKSwgZW8gPSB4dChMdCksIGlvID0geHQoV24pLCBubyA9IHh0KFVuKSwgb28gPSB4dChHbik7XHJcbiAgICAgICAgdmFyIHJvID0gXztcclxuICAgICAgICBpZiAoam4gJiYgcm8obmV3IGpuKG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IFpuIHx8IEx0ICYmIHJvKG5ldyBMdCkgIT0gS24gfHwgV24gJiYgcm8oV24ucmVzb2x2ZSgpKSAhPSBZbiB8fCBVbiAmJiBybyhuZXcgVW4pICE9IFFuIHx8IEduICYmIHJvKG5ldyBHbikgIT0gWG4pIHtcclxuICAgICAgICAgICAgcm8gPSBmdW5jdGlvbiAodCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGUgPSBfKHQpLCBpID0gZSA9PSBKbiA/IHQuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsIG4gPSBpID8geHQoaSkgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB0bzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBabjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBlbzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBLbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBpbzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBZbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBubzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBRbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBvbzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBYblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHNvID0gcm87XHJcbiAgICAgICAgdmFyIGFvID0gT2JqZWN0LnByb3RvdHlwZTtcclxuICAgICAgICB2YXIgY28gPSBhby5oYXNPd25Qcm9wZXJ0eTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbG8odCkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IHQubGVuZ3RoLCBpID0gbmV3IHQuY29uc3RydWN0b3IoZSk7XHJcbiAgICAgICAgICAgIGlmIChlICYmIHR5cGVvZiB0WzBdID09IFwic3RyaW5nXCIgJiYgY28uY2FsbCh0LCBcImluZGV4XCIpKSB7XHJcbiAgICAgICAgICAgICAgICBpLmluZGV4ID0gdC5pbmRleDtcclxuICAgICAgICAgICAgICAgIGkuaW5wdXQgPSB0LmlucHV0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB1byA9IGxvO1xyXG4gICAgICAgIHZhciBobyA9IG5bXCJhXCJdLlVpbnQ4QXJyYXk7XHJcbiAgICAgICAgdmFyIGZvID0gaG87XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdvKHQpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSBuZXcgdC5jb25zdHJ1Y3Rvcih0LmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgICAgICBuZXcgZm8oZSkuc2V0KG5ldyBmbyh0KSk7XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbW8gPSBnbztcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcG8odCwgZSkge1xyXG4gICAgICAgICAgICB2YXIgaSA9IGUgPyBtbyh0LmJ1ZmZlcikgOiB0LmJ1ZmZlcjtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyB0LmNvbnN0cnVjdG9yKGksIHQuYnl0ZU9mZnNldCwgdC5ieXRlTGVuZ3RoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGJvID0gcG87XHJcbiAgICAgICAgdmFyIHdvID0gL1xcdyokLztcclxuXHJcbiAgICAgICAgZnVuY3Rpb24ga28odCkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IG5ldyB0LmNvbnN0cnVjdG9yKHQuc291cmNlLCB3by5leGVjKHQpKTtcclxuICAgICAgICAgICAgZS5sYXN0SW5kZXggPSB0Lmxhc3RJbmRleDtcclxuICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBfbyA9IGtvO1xyXG4gICAgICAgIHZhciB2byA9IHIgPyByLnByb3RvdHlwZSA6IHVuZGVmaW5lZCwgeW8gPSB2byA/IHZvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHhvKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHlvID8gT2JqZWN0KHlvLmNhbGwodCkpIDoge31cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBDbyA9IHhvO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBBbyh0LCBlKSB7XHJcbiAgICAgICAgICAgIHZhciBpID0gZSA/IG1vKHQuYnVmZmVyKSA6IHQuYnVmZmVyO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IHQuY29uc3RydWN0b3IoaSwgdC5ieXRlT2Zmc2V0LCB0Lmxlbmd0aClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBUbyA9IEFvO1xyXG4gICAgICAgIHZhciBQbyA9IFwiW29iamVjdCBCb29sZWFuXVwiLCBTbyA9IFwiW29iamVjdCBEYXRlXVwiLCBFbyA9IFwiW29iamVjdCBNYXBdXCIsIFJvID0gXCJbb2JqZWN0IE51bWJlcl1cIixcclxuICAgICAgICAgICAgT28gPSBcIltvYmplY3QgUmVnRXhwXVwiLCBJbyA9IFwiW29iamVjdCBTZXRdXCIsIFZvID0gXCJbb2JqZWN0IFN0cmluZ11cIiwgTm8gPSBcIltvYmplY3QgU3ltYm9sXVwiO1xyXG4gICAgICAgIHZhciBNbyA9IFwiW29iamVjdCBBcnJheUJ1ZmZlcl1cIiwgQm8gPSBcIltvYmplY3QgRGF0YVZpZXddXCIsIHpvID0gXCJbb2JqZWN0IEZsb2F0MzJBcnJheV1cIixcclxuICAgICAgICAgICAgTG8gPSBcIltvYmplY3QgRmxvYXQ2NEFycmF5XVwiLCBGbyA9IFwiW29iamVjdCBJbnQ4QXJyYXldXCIsIERvID0gXCJbb2JqZWN0IEludDE2QXJyYXldXCIsXHJcbiAgICAgICAgICAgIGpvID0gXCJbb2JqZWN0IEludDMyQXJyYXldXCIsIEhvID0gXCJbb2JqZWN0IFVpbnQ4QXJyYXldXCIsIFdvID0gXCJbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XVwiLFxyXG4gICAgICAgICAgICBxbyA9IFwiW29iamVjdCBVaW50MTZBcnJheV1cIiwgVW8gPSBcIltvYmplY3QgVWludDMyQXJyYXldXCI7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uICRvKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgdmFyIG4gPSB0LmNvbnN0cnVjdG9yO1xyXG4gICAgICAgICAgICBzd2l0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgTW86XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1vKHQpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBQbzpcclxuICAgICAgICAgICAgICAgIGNhc2UgU286XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBuKCt0KTtcclxuICAgICAgICAgICAgICAgIGNhc2UgQm86XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJvKHQsIGkpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSB6bzpcclxuICAgICAgICAgICAgICAgIGNhc2UgTG86XHJcbiAgICAgICAgICAgICAgICBjYXNlIEZvOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBEbzpcclxuICAgICAgICAgICAgICAgIGNhc2Ugam86XHJcbiAgICAgICAgICAgICAgICBjYXNlIEhvOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBXbzpcclxuICAgICAgICAgICAgICAgIGNhc2UgcW86XHJcbiAgICAgICAgICAgICAgICBjYXNlIFVvOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBUbyh0LCBpKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgRW86XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBuO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBSbzpcclxuICAgICAgICAgICAgICAgIGNhc2UgVm86XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBuKHQpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBPbzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gX28odCk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIElvOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbjtcclxuICAgICAgICAgICAgICAgIGNhc2UgTm86XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENvKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBHbyA9ICRvO1xyXG4gICAgICAgIHZhciBLbyA9IE9iamVjdC5jcmVhdGU7XHJcbiAgICAgICAgdmFyIEpvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiB0KCkge1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghY3QoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge31cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChLbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBLbyhlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdC5wcm90b3R5cGUgPSBlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGkgPSBuZXcgdDtcclxuICAgICAgICAgICAgICAgIHQucHJvdG90eXBlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0oKTtcclxuICAgICAgICB2YXIgWW8gPSBKbztcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gUW8odCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdHlwZW9mIHQuY29uc3RydWN0b3IgPT0gXCJmdW5jdGlvblwiICYmICFXaSh0KSA/IFlvKEModCkpIDoge31cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBYbyA9IFFvO1xyXG4gICAgICAgIHZhciBabyA9IFwiW29iamVjdCBNYXBdXCI7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHRyKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFQodCkgJiYgc28odCkgPT0gWm9cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBlciA9IHRyO1xyXG4gICAgICAgIHZhciBpciA9IFZpW1wiYVwiXSAmJiBWaVtcImFcIl0uaXNNYXA7XHJcbiAgICAgICAgdmFyIG5yID0gaXIgPyBJaShpcikgOiBlcjtcclxuICAgICAgICB2YXIgb3IgPSBucjtcclxuICAgICAgICB2YXIgcnIgPSBcIltvYmplY3QgU2V0XVwiO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBzcih0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBUKHQpICYmIHNvKHQpID09IHJyXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgYXIgPSBzcjtcclxuICAgICAgICB2YXIgY3IgPSBWaVtcImFcIl0gJiYgVmlbXCJhXCJdLmlzU2V0O1xyXG4gICAgICAgIHZhciBsciA9IGNyID8gSWkoY3IpIDogYXI7XHJcbiAgICAgICAgdmFyIGRyID0gbHI7XHJcbiAgICAgICAgdmFyIHVyID0gMSwgaHIgPSAyLCBmciA9IDQ7XHJcbiAgICAgICAgdmFyIGdyID0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIiwgbXIgPSBcIltvYmplY3QgQXJyYXldXCIsIHByID0gXCJbb2JqZWN0IEJvb2xlYW5dXCIsIGJyID0gXCJbb2JqZWN0IERhdGVdXCIsXHJcbiAgICAgICAgICAgIHdyID0gXCJbb2JqZWN0IEVycm9yXVwiLCBrciA9IFwiW29iamVjdCBGdW5jdGlvbl1cIiwgX3IgPSBcIltvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dXCIsIHZyID0gXCJbb2JqZWN0IE1hcF1cIixcclxuICAgICAgICAgICAgeXIgPSBcIltvYmplY3QgTnVtYmVyXVwiLCB4ciA9IFwiW29iamVjdCBPYmplY3RdXCIsIENyID0gXCJbb2JqZWN0IFJlZ0V4cF1cIiwgQXIgPSBcIltvYmplY3QgU2V0XVwiLFxyXG4gICAgICAgICAgICBUciA9IFwiW29iamVjdCBTdHJpbmddXCIsIFByID0gXCJbb2JqZWN0IFN5bWJvbF1cIiwgU3IgPSBcIltvYmplY3QgV2Vha01hcF1cIjtcclxuICAgICAgICB2YXIgRXIgPSBcIltvYmplY3QgQXJyYXlCdWZmZXJdXCIsIFJyID0gXCJbb2JqZWN0IERhdGFWaWV3XVwiLCBPciA9IFwiW29iamVjdCBGbG9hdDMyQXJyYXldXCIsXHJcbiAgICAgICAgICAgIElyID0gXCJbb2JqZWN0IEZsb2F0NjRBcnJheV1cIiwgVnIgPSBcIltvYmplY3QgSW50OEFycmF5XVwiLCBOciA9IFwiW29iamVjdCBJbnQxNkFycmF5XVwiLFxyXG4gICAgICAgICAgICBNciA9IFwiW29iamVjdCBJbnQzMkFycmF5XVwiLCBCciA9IFwiW29iamVjdCBVaW50OEFycmF5XVwiLCB6ciA9IFwiW29iamVjdCBVaW50OENsYW1wZWRBcnJheV1cIixcclxuICAgICAgICAgICAgTHIgPSBcIltvYmplY3QgVWludDE2QXJyYXldXCIsIEZyID0gXCJbb2JqZWN0IFVpbnQzMkFycmF5XVwiO1xyXG4gICAgICAgIHZhciBEciA9IHt9O1xyXG4gICAgICAgIERyW2dyXSA9IERyW21yXSA9IERyW0VyXSA9IERyW1JyXSA9IERyW3ByXSA9IERyW2JyXSA9IERyW09yXSA9IERyW0lyXSA9IERyW1ZyXSA9IERyW05yXSA9IERyW01yXSA9IERyW3ZyXSA9IERyW3lyXSA9IERyW3hyXSA9IERyW0NyXSA9IERyW0FyXSA9IERyW1RyXSA9IERyW1ByXSA9IERyW0JyXSA9IERyW3pyXSA9IERyW0xyXSA9IERyW0ZyXSA9IHRydWU7XHJcbiAgICAgICAgRHJbd3JdID0gRHJba3JdID0gRHJbU3JdID0gZmFsc2U7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGpyKHQsIGUsIGksIG4sIG8sIHIpIHtcclxuICAgICAgICAgICAgdmFyIHMsIGEgPSBlICYgdXIsIGMgPSBlICYgaHIsIGwgPSBlICYgZnI7XHJcbiAgICAgICAgICAgIGlmIChpKSB7XHJcbiAgICAgICAgICAgICAgICBzID0gbyA/IGkodCwgbiwgbywgcikgOiBpKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWN0KHQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBkID0gSmUodCk7XHJcbiAgICAgICAgICAgIGlmIChkKSB7XHJcbiAgICAgICAgICAgICAgICBzID0gdW8odCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW4odCwgcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZhciB1ID0gc28odCksIGggPSB1ID09IGtyIHx8IHUgPT0gX3I7XHJcbiAgICAgICAgICAgICAgICBpZiAoT2JqZWN0KFllW1wiYVwiXSkodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT2JqZWN0KGZuW1wiYVwiXSkodCwgYSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh1ID09IHhyIHx8IHUgPT0gZ3IgfHwgaCAmJiAhbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHMgPSBjIHx8IGggPyB7fSA6IFhvKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYyA/IFZuKHQsIGhuKHMsIHQpKSA6IFRuKHQsIGVuKHMsIHQpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFEclt1XSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbyA/IHQgOiB7fVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzID0gR28odCwgdSwgYSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByIHx8IChyID0gbmV3IEFlKTtcclxuICAgICAgICAgICAgdmFyIGYgPSByLmdldCh0KTtcclxuICAgICAgICAgICAgaWYgKGYpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgci5zZXQodCwgcyk7XHJcbiAgICAgICAgICAgIGlmIChkcih0KSkge1xyXG4gICAgICAgICAgICAgICAgdC5mb3JFYWNoKChmdW5jdGlvbiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgIHMuYWRkKGpyKG4sIGUsIGksIG4sIHQsIHIpKVxyXG4gICAgICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3IodCkpIHtcclxuICAgICAgICAgICAgICAgIHQuZm9yRWFjaCgoZnVuY3Rpb24gKG4sIG8pIHtcclxuICAgICAgICAgICAgICAgICAgICBzLnNldChvLCBqcihuLCBlLCBpLCBvLCB0LCByKSlcclxuICAgICAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBnID0gbCA/IGMgPyBGbiA6IHpuIDogYyA/IGtleXNJbiA6IFppO1xyXG4gICAgICAgICAgICB2YXIgbSA9IGQgPyB1bmRlZmluZWQgOiBnKHQpO1xyXG4gICAgICAgICAgICBQZShtIHx8IHQsIChmdW5jdGlvbiAobiwgbykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG0pIHtcclxuICAgICAgICAgICAgICAgICAgICBvID0gbjtcclxuICAgICAgICAgICAgICAgICAgICBuID0gdFtvXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgTWUocywgbywganIobiwgZSwgaSwgbywgdCwgcikpXHJcbiAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgcmV0dXJuIHNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBIciA9IGpyO1xyXG4gICAgICAgIHZhciBXciA9IDEsIHFyID0gNDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVXIodCwgZSkge1xyXG4gICAgICAgICAgICBlID0gdHlwZW9mIGUgPT0gXCJmdW5jdGlvblwiID8gZSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgcmV0dXJuIEhyKHQsIFdyIHwgcXIsIGUpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgJHIgPSBVcjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gR3IodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gVCh0KSAmJiB0Lm5vZGVUeXBlID09PSAxICYmICFOKHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgS3IgPSBHcjtcclxuXHJcbiAgICAgICAgY2xhc3MgSnIge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb25maWcgPSB7fTtcclxuICAgICAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZpbmUoWXIoZSkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldE9iamVjdFRvVGFyZ2V0KHRoaXMuX2NvbmZpZywgdClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldFRvVGFyZ2V0KHRoaXMuX2NvbmZpZywgdCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVmaW5lKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0VG9UYXJnZXQodGhpcy5fY29uZmlnLCB0LCBlLCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldEZyb21Tb3VyY2UodGhpcy5fY29uZmlnLCB0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIG5hbWVzKCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIE9iamVjdC5rZXlzKHRoaXMuX2NvbmZpZykpIHtcclxuICAgICAgICAgICAgICAgICAgICB5aWVsZCB0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9zZXRUb1RhcmdldCh0LCBlLCBpLCBuID0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGlmIChOKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0T2JqZWN0VG9UYXJnZXQodCwgZSwgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gZS5zcGxpdChcIi5cIik7XHJcbiAgICAgICAgICAgICAgICBlID0gby5wb3AoKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFOKHRbZV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRbZV0gPSB7fVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0ID0gdFtlXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKE4oaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIU4odFtlXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdFtlXSA9IHt9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHQgPSB0W2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldE9iamVjdFRvVGFyZ2V0KHQsIGksIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG4gJiYgdHlwZW9mIHRbZV0gIT0gXCJ1bmRlZmluZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdFtlXSA9IGlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldEZyb21Tb3VyY2UodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuc3BsaXQoXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgZSA9IGkucG9wKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghTih0W2VdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IHRbZV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0ID8gWXIodFtlXSkgOiB1bmRlZmluZWRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3NldE9iamVjdFRvVGFyZ2V0KHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5rZXlzKGUpLmZvckVhY2gobiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0VG9UYXJnZXQodCwgbiwgZVtuXSwgaSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFlyKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICRyKHQsIFFyKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gUXIodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gS3IodCkgPyB0IDogdW5kZWZpbmVkXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBYcigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHQoKSB7XHJcbiAgICAgICAgICAgICAgICB0LmNhbGxlZCA9IHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIFpyID0gWHI7XHJcblxyXG4gICAgICAgIGNsYXNzIHRzIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2UgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGF0aCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wID0gWnIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub2ZmID0gWnIoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBlcyA9IG5ldyBBcnJheSgyNTYpLmZpbGwoKS5tYXAoKHQsIGUpID0+IChcIjBcIiArIGUudG9TdHJpbmcoMTYpKS5zbGljZSgtMikpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBpcygpIHtcclxuICAgICAgICAgICAgY29uc3QgdCA9IE1hdGgucmFuZG9tKCkgKiA0Mjk0OTY3Mjk2ID4+PiAwO1xyXG4gICAgICAgICAgICBjb25zdCBlID0gTWF0aC5yYW5kb20oKSAqIDQyOTQ5NjcyOTYgPj4+IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBNYXRoLnJhbmRvbSgpICogNDI5NDk2NzI5NiA+Pj4gMDtcclxuICAgICAgICAgICAgY29uc3QgbiA9IE1hdGgucmFuZG9tKCkgKiA0Mjk0OTY3Mjk2ID4+PiAwO1xyXG4gICAgICAgICAgICByZXR1cm4gXCJlXCIgKyBlc1t0ID4+IDAgJiAyNTVdICsgZXNbdCA+PiA4ICYgMjU1XSArIGVzW3QgPj4gMTYgJiAyNTVdICsgZXNbdCA+PiAyNCAmIDI1NV0gKyBlc1tlID4+IDAgJiAyNTVdICsgZXNbZSA+PiA4ICYgMjU1XSArIGVzW2UgPj4gMTYgJiAyNTVdICsgZXNbZSA+PiAyNCAmIDI1NV0gKyBlc1tpID4+IDAgJiAyNTVdICsgZXNbaSA+PiA4ICYgMjU1XSArIGVzW2kgPj4gMTYgJiAyNTVdICsgZXNbaSA+PiAyNCAmIDI1NV0gKyBlc1tuID4+IDAgJiAyNTVdICsgZXNbbiA+PiA4ICYgMjU1XSArIGVzW24gPj4gMTYgJiAyNTVdICsgZXNbbiA+PiAyNCAmIDI1NV1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG5zID0ge1xyXG4gICAgICAgICAgICBnZXQodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ICE9IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1t0XSB8fCB0aGlzLm5vcm1hbFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBoaWdoZXN0OiAxZTUsIGhpZ2g6IDFlMywgbm9ybWFsOiAwLCBsb3c6IC0xZTMsIGxvd2VzdDogLTFlNVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIG9zID0gbnM7XHJcbiAgICAgICAgdmFyIHJzID0gaSg2KTtcclxuICAgICAgICB2YXIgc3MgPSBpKDApO1xyXG4gICAgICAgIGNvbnN0IGFzID0gU3ltYm9sKFwibGlzdGVuaW5nVG9cIik7XHJcbiAgICAgICAgY29uc3QgY3MgPSBTeW1ib2woXCJlbWl0dGVySWRcIik7XHJcbiAgICAgICAgY29uc3QgbHMgPSB7XHJcbiAgICAgICAgICAgIG9uKHQsIGUsIGkgPSB7fSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLCB0LCBlLCBpKVxyXG4gICAgICAgICAgICB9LCBvbmNlKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gZnVuY3Rpb24gKHQsIC4uLmkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQub2ZmKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuY2FsbCh0aGlzLCB0LCAuLi5pKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMsIHQsIG8sIGkpXHJcbiAgICAgICAgICAgIH0sIG9mZih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcodGhpcywgdCwgZSlcclxuICAgICAgICAgICAgfSwgbGlzdGVuVG8odCwgZSwgaSwgbiA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbywgcjtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpc1thc10pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzW2FzXSA9IHt9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gdGhpc1thc107XHJcbiAgICAgICAgICAgICAgICBpZiAoIWZzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHModClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBmcyh0KTtcclxuICAgICAgICAgICAgICAgIGlmICghKG8gPSBzW2FdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG8gPSBzW2FdID0ge2VtaXR0ZXI6IHQsIGNhbGxiYWNrczoge319XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIShyID0gby5jYWxsYmFja3NbZV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgciA9IG8uY2FsbGJhY2tzW2VdID0gW11cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHIucHVzaChpKTtcclxuICAgICAgICAgICAgICAgIHBzKHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IGJzKHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbCA9IG9zLmdldChuLnByaW9yaXR5KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSB7Y2FsbGJhY2s6IGksIHByaW9yaXR5OiBsfTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHQubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRbaV0ucHJpb3JpdHkgPCBsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNwbGljZShpLCAwLCBkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5wdXNoKGQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBzdG9wTGlzdGVuaW5nKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzW2FzXTtcclxuICAgICAgICAgICAgICAgIGxldCBvID0gdCAmJiBmcyh0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuICYmIG8gJiYgbltvXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSByICYmIGUgJiYgci5jYWxsYmFja3NbZV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIW4gfHwgdCAmJiAhciB8fCBlICYmICFzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF9zKHQsIGUsIGkpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoaSA9IHMucG9wKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgX3ModCwgZSwgaSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHIuY2FsbGJhY2tzW2VdXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGUgaW4gci5jYWxsYmFja3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKHQsIGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBuW29dXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobyBpbiBuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcExpc3RlbmluZyhuW29dLmVtaXR0ZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzW2FzXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBmaXJlKHQsIC4uLmUpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQgaW5zdGFuY2VvZiB0cyA/IHQgOiBuZXcgdHModGhpcywgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGkubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbyA9IHdzKHRoaXMsIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGkucGF0aC5wdXNoKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBbaSwgLi4uZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBBcnJheS5mcm9tKG8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IG8ubGVuZ3RoOyBlKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9bZV0uY2FsbGJhY2suYXBwbHkodGhpcywgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaS5vZmYuY2FsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGkub2ZmLmNhbGxlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBfcyh0aGlzLCBuLCBvW2VdLmNhbGxiYWNrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkuc3RvcC5jYWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kZWxlZ2F0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5fZGVsZWdhdGlvbnMuZ2V0KG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gdGhpcy5fZGVsZWdhdGlvbnMuZ2V0KFwiKlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtzKHQsIGksIGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtzKG8sIGksIGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkucmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3NbXCJiXCJdLnJldGhyb3dVbmV4cGVjdGVkRXJyb3IodCwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgZGVsZWdhdGUoLi4udCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICB0bzogKGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kZWxlZ2F0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVsZWdhdGlvbnMgPSBuZXcgTWFwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5mb3JFYWNoKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuX2RlbGVnYXRpb25zLmdldCh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbGVnYXRpb25zLnNldCh0LCBuZXcgTWFwKFtbZSwgaV1dKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5zZXQoZSwgaSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHN0b3BEZWxlZ2F0aW5nKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZGVsZWdhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlbGVnYXRpb25zLmNsZWFyKClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZWxlZ2F0aW9ucy5kZWxldGUodClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX2RlbGVnYXRpb25zLmdldCh0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLmRlbGV0ZShlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIGRzID0gbHM7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHVzKHQsIGUpIHtcclxuICAgICAgICAgICAgaWYgKHRbYXNdICYmIHRbYXNdW2VdKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFthc11bZV0uZW1pdHRlclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBocyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGlmICghdFtjc10pIHtcclxuICAgICAgICAgICAgICAgIHRbY3NdID0gZSB8fCBpcygpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGZzKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRbY3NdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBncyh0KSB7XHJcbiAgICAgICAgICAgIGlmICghdC5fZXZlbnRzKSB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodCwgXCJfZXZlbnRzXCIsIHt2YWx1ZToge319KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0Ll9ldmVudHNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG1zKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge2NhbGxiYWNrczogW10sIGNoaWxkRXZlbnRzOiBbXX1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHBzKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IGdzKHQpO1xyXG4gICAgICAgICAgICBpZiAoaVtlXSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IG4gPSBlO1xyXG4gICAgICAgICAgICBsZXQgbyA9IG51bGw7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBbXTtcclxuICAgICAgICAgICAgd2hpbGUgKG4gIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpW25dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlbbl0gPSBtcygpO1xyXG4gICAgICAgICAgICAgICAgci5wdXNoKGlbbl0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpW25dLmNoaWxkRXZlbnRzLnB1c2gobylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG8gPSBuO1xyXG4gICAgICAgICAgICAgICAgbiA9IG4uc3Vic3RyKDAsIG4ubGFzdEluZGV4T2YoXCI6XCIpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChuICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuY2FsbGJhY2tzID0gaVtuXS5jYWxsYmFja3Muc2xpY2UoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaVtuXS5jaGlsZEV2ZW50cy5wdXNoKG8pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGJzKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IGdzKHQpW2VdO1xyXG4gICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBuID0gW2kuY2FsbGJhY2tzXTtcclxuICAgICAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCBpLmNoaWxkRXZlbnRzLmxlbmd0aDsgZSsrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gYnModCwgaS5jaGlsZEV2ZW50c1tlXSk7XHJcbiAgICAgICAgICAgICAgICBuID0gbi5jb25jYXQobylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gd3ModCwgZSkge1xyXG4gICAgICAgICAgICBsZXQgaTtcclxuICAgICAgICAgICAgaWYgKCF0Ll9ldmVudHMgfHwgIShpID0gdC5fZXZlbnRzW2VdKSB8fCAhaS5jYWxsYmFja3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5pbmRleE9mKFwiOlwiKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHdzKHQsIGUuc3Vic3RyKDAsIGUubGFzdEluZGV4T2YoXCI6XCIpKSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaS5jYWxsYmFja3NcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGtzKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgW24sIG9dIG9mIHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbykge1xyXG4gICAgICAgICAgICAgICAgICAgIG8gPSBlLm5hbWVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG8gPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbyA9IG8oZS5uYW1lKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG5ldyB0cyhlLnNvdXJjZSwgbyk7XHJcbiAgICAgICAgICAgICAgICB0LnBhdGggPSBbLi4uZS5wYXRoXTtcclxuICAgICAgICAgICAgICAgIG4uZmlyZSh0LCAuLi5pKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfcyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBicyh0LCBlKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG4pIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGUgPSAwOyBlIDwgdC5sZW5ndGg7IGUrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0W2VdLmNhbGxiYWNrID09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5zcGxpY2UoZSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUtLVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdnModCwgLi4uZSkge1xyXG4gICAgICAgICAgICBlLmZvckVhY2goZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhlKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhlKSkuZm9yRWFjaChpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSBpbiB0LnByb3RvdHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZSwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5lbnVtZXJhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHQucHJvdG90eXBlLCBpLCBuKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHlzIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pdGVtcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXRlbU1hcCA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pZFByb3BlcnR5ID0gdC5pZFByb3BlcnR5IHx8IFwiaWRcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRUb0V4dGVybmFsVG9JbnRlcm5hbE1hcCA9IG5ldyBXZWFrTWFwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmluZFRvSW50ZXJuYWxUb0V4dGVybmFsTWFwID0gbmV3IFdlYWtNYXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9za2lwcGVkSW5kZXhlc0Zyb21FeHRlcm5hbCA9IFtdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXRlbXMubGVuZ3RoXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBmaXJzdCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pdGVtc1swXSB8fCBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBsYXN0KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW3RoaXMubGVuZ3RoIC0gMV0gfHwgbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZGQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5faWRQcm9wZXJ0eTtcclxuICAgICAgICAgICAgICAgIGlmIChuIGluIHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpID0gdFtuXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGkgIT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiY29sbGVjdGlvbi1hZGQtaW52YWxpZC1pZFwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5nZXQoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcImNvbGxlY3Rpb24tYWRkLWl0ZW0tYWxyZWFkeS1leGlzdHNcIiwgdGhpcylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRbbl0gPSBpID0gaXMoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLl9pdGVtcy5sZW5ndGhcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZSA+IHRoaXMuX2l0ZW1zLmxlbmd0aCB8fCBlIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJjb2xsZWN0aW9uLWFkZC1pdGVtLWludmFsaWQtaW5kZXhcIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1zLnNwbGljZShlLCAwLCB0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2l0ZW1NYXAuc2V0KGksIHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiYWRkXCIsIHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0KHQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5faXRlbU1hcC5nZXQodClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHQgPT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLl9pdGVtc1t0XVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiY29sbGVjdGlvbi1nZXQtaW52YWxpZC1hcmc6IEluZGV4IG9yIGlkIG11c3QgYmUgZ2l2ZW4uXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZSB8fCBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGhhcyh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pdGVtTWFwLmhhcyh0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5faWRQcm9wZXJ0eTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gdFtlXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXRlbU1hcC5oYXMoaSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0SW5kZXgodCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGU7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLl9pdGVtTWFwLmdldCh0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmluZGV4T2YoZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVtb3ZlKHQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlLCBpLCBuO1xyXG4gICAgICAgICAgICAgICAgbGV0IG8gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLl9pZFByb3BlcnR5O1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpID0gdDtcclxuICAgICAgICAgICAgICAgICAgICBuID0gdGhpcy5faXRlbU1hcC5nZXQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbyA9ICFuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLl9pdGVtcy5pbmRleE9mKG4pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdCA9PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbiA9IHRoaXMuX2l0ZW1zW2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIG8gPSAhbjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gbltyXVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbiA9IHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IG5bcl07XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMuX2l0ZW1zLmluZGV4T2Yobik7XHJcbiAgICAgICAgICAgICAgICAgICAgbyA9IGUgPT0gLTEgfHwgIXRoaXMuX2l0ZW1NYXAuZ2V0KGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJjb2xsZWN0aW9uLXJlbW92ZS00MDQ6IEl0ZW0gbm90IGZvdW5kLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5faXRlbXMuc3BsaWNlKGUsIDEpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXRlbU1hcC5kZWxldGUoaSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gdGhpcy5fYmluZFRvSW50ZXJuYWxUb0V4dGVybmFsTWFwLmdldChuKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRUb0ludGVybmFsVG9FeHRlcm5hbE1hcC5kZWxldGUobik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iaW5kVG9FeHRlcm5hbFRvSW50ZXJuYWxNYXAuZGVsZXRlKHMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKFwicmVtb3ZlXCIsIG4sIGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWFwKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pdGVtcy5tYXAodCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZmluZCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXRlbXMuZmluZCh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmaWx0ZXIodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zLmZpbHRlcih0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjbGVhcigpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9iaW5kVG9Db2xsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKHRoaXMuX2JpbmRUb0NvbGxlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRUb0NvbGxlY3Rpb24gPSBudWxsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZSgwKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBiaW5kVG8odCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2JpbmRUb0NvbGxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiY29sbGVjdGlvbi1iaW5kLXRvLXJlYmluZDogVGhlIGNvbGxlY3Rpb24gY2Fubm90IGJlIGJvdW5kIG1vcmUgdGhhbiBvbmNlLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmluZFRvQ29sbGVjdGlvbiA9IHQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFzOiB0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0VXBCaW5kVG9CaW5kaW5nKGUgPT4gbmV3IHQoZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgdXNpbmc6IHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQgPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRVcEJpbmRUb0JpbmRpbmcoZSA9PiB0KGUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0VXBCaW5kVG9CaW5kaW5nKGUgPT4gZVt0XSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3NldFVwQmluZFRvQmluZGluZyh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5fYmluZFRvQ29sbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSAoaSwgbiwgbykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBlLl9iaW5kVG9Db2xsZWN0aW9uID09IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IGUuX2JpbmRUb0ludGVybmFsVG9FeHRlcm5hbE1hcC5nZXQobik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIgJiYgcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9iaW5kVG9FeHRlcm5hbFRvSW50ZXJuYWxNYXAuc2V0KG4sIHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9iaW5kVG9JbnRlcm5hbFRvRXh0ZXJuYWxNYXAuc2V0KHMsIG4pXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQobik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2tpcHBlZEluZGV4ZXNGcm9tRXh0ZXJuYWwucHVzaChvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCByID0gbztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMuX3NraXBwZWRJbmRleGVzRnJvbUV4dGVybmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobyA+IHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLS1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZS5fc2tpcHBlZEluZGV4ZXNGcm9tRXh0ZXJuYWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyID49IHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByKytcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9iaW5kVG9FeHRlcm5hbFRvSW50ZXJuYWxNYXAuc2V0KG4sIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9iaW5kVG9JbnRlcm5hbFRvRXh0ZXJuYWxNYXAuc2V0KGksIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmFkZChpLCByKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCBlLl9za2lwcGVkSW5kZXhlc0Zyb21FeHRlcm5hbC5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgPD0gZS5fc2tpcHBlZEluZGV4ZXNGcm9tRXh0ZXJuYWxbdF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLl9za2lwcGVkSW5kZXhlc0Zyb21FeHRlcm5hbFt0XSsrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpKG51bGwsIHQsIGUuZ2V0SW5kZXgodCkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKGUsIFwiYWRkXCIsIGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhlLCBcInJlbW92ZVwiLCAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9iaW5kVG9FeHRlcm5hbFRvSW50ZXJuYWxNYXAuZ2V0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKG4pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NraXBwZWRJbmRleGVzRnJvbUV4dGVybmFsID0gdGhpcy5fc2tpcHBlZEluZGV4ZXNGcm9tRXh0ZXJuYWwucmVkdWNlKCh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpIDwgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wdXNoKGUgLSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID4gZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wdXNoKGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgICAgICAgICB9LCBbXSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW1N5bWJvbC5pdGVyYXRvcl0oKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2cyh5cywgZHMpO1xyXG5cclxuICAgICAgICBjbGFzcyB4cyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUgPSBbXSwgaSA9IFtdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0ID0gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BsdWdpbnMgPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXZhaWxhYmxlUGx1Z2lucyA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LnBsdWdpbk5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXZhaWxhYmxlUGx1Z2lucy5zZXQodC5wbHVnaW5OYW1lLCB0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRleHRQbHVnaW5zID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW3QsIGVdIG9mIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0UGx1Z2lucy5zZXQodCwgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGV4dFBsdWdpbnMuc2V0KGUsIHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LnBsdWdpbk5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXZhaWxhYmxlUGx1Z2lucy5zZXQodC5wbHVnaW5OYW1lLCB0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgKiBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLl9wbHVnaW5zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0WzBdID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCB0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuX3BsdWdpbnMuZ2V0KHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IFwicGx1Z2luY29sbGVjdGlvbi1wbHVnaW4tbm90LWxvYWRlZDogVGhlIHJlcXVlc3RlZCBwbHVnaW4gaXMgbm90IGxvYWRlZC5cIjtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gdC5wbHVnaW5OYW1lIHx8IHQubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKGUsIHRoaXMuX2NvbnRleHQsIHtwbHVnaW46IGl9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaGFzKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wbHVnaW5zLmhhcyh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KHQsIGUgPSBbXSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5fY29udGV4dDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgU2V0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IGcodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gZyhlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBmKHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gXCJwbHVnaW5jb2xsZWN0aW9uLXBsdWdpbi1ub3QtZm91bmQ6IFNvbWUgcGx1Z2lucyBhcmUgbm90IGF2YWlsYWJsZSBhbmQgY291bGQgbm90IGJlIGxvYWRlZC5cIjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKE9iamVjdChzc1tcImFcIl0pKHQpLCB7cGx1Z2luczogY30pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgc3NbXCJiXCJdKHQsIG4sIHtwbHVnaW5zOiBjfSkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwocy5tYXAobCkpLnRoZW4oKCkgPT4gZChyLCBcImluaXRcIikpLnRoZW4oKCkgPT4gZChyLCBcImFmdGVySW5pdFwiKSkudGhlbigoKSA9PiByKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBsKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYS5pbmNsdWRlcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkuX3BsdWdpbnMuaGFzKHQpIHx8IG8uaGFzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdSh0KS5jYXRjaChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcihPYmplY3Qoc3NbXCJhXCJdKShcInBsdWdpbmNvbGxlY3Rpb24tbG9hZDogSXQgd2FzIG5vdCBwb3NzaWJsZSB0byBsb2FkIHRoZSBwbHVnaW4uXCIpLCB7cGx1Z2luOiB0fSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IGVcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnJlZHVjZSgodCwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW5bZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkuX2NvbnRleHRQbHVnaW5zLmhhcyhuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC50aGVuKG5bZV0uYmluZChuKSlcclxuICAgICAgICAgICAgICAgICAgICB9LCBQcm9taXNlLnJlc29sdmUoKSlcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiB1KHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uYWRkKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5yZXF1aXJlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5yZXF1aXJlcy5mb3JFYWNoKGkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBoKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmlzQ29udGV4dFBsdWdpbiAmJiAhby5pc0NvbnRleHRQbHVnaW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInBsdWdpbmNvbGxlY3Rpb24tY29udGV4dC1yZXF1aXJlZDogQ29udGV4dCBwbHVnaW4gY2FuIG5vdCByZXF1aXJlIHBsdWdpbiB3aGljaCBpcyBub3QgYSBjb250ZXh0IHBsdWdpblwiLCBudWxsLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbHVnaW46IG8ubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkQnk6IHQubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5pbmNsdWRlcyhvKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwicGx1Z2luY29sbGVjdGlvbi1yZXF1aXJlZDogQ2Fubm90IGxvYWQgYSBwbHVnaW4gYmVjYXVzZSBvbmUgb2YgaXRzIGRlcGVuZGVuY2llcyBpcyBsaXN0ZWQgaW5cIiArIFwidGhlIGByZW1vdmVQbHVnaW5zYCBvcHRpb24uXCIsIG4sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbjogby5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRCeTogdC5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwobylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IGkuX2NvbnRleHRQbHVnaW5zLmdldCh0KSB8fCBuZXcgdChuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5fYWRkKHQsIGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByLnB1c2goYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHMoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaCh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaS5fYXZhaWxhYmxlUGx1Z2lucy5nZXQodClcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBmKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFoKGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnB1c2goaSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5sZW5ndGggPyBlIDogbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGcodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0Lm1hcCh0ID0+IGgodCkpLmZpbHRlcih0ID0+ICEhdClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgWywgZV0gb2YgdGhpcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZS5kZXN0cm95ID09IFwiZnVuY3Rpb25cIiAmJiAhdGhpcy5fY29udGV4dFBsdWdpbnMuaGFzKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQucHVzaChlLmRlc3Ryb3koKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2FkZCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wbHVnaW5zLnNldCh0LCBlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnBsdWdpbk5hbWU7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wbHVnaW5zLmhhcyhpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJwbHVnaW5jb2xsZWN0aW9uLXBsdWdpbi1uYW1lLWNvbmZsaWN0OiBUd28gcGx1Z2lucyB3aXRoIHRoZSBzYW1lIG5hbWUgd2VyZSBsb2FkZWQuXCIsIG51bGwsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luTmFtZTogaSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGx1Z2luMTogdGhpcy5fcGx1Z2lucy5nZXQoaSkuY29uc3RydWN0b3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsdWdpbjI6IHRcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGx1Z2lucy5zZXQoaSwgZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMoeHMsIGRzKTtcclxuICAgICAgICBpZiAoIXdpbmRvdy5DS0VESVRPUl9UUkFOU0xBVElPTlMpIHtcclxuICAgICAgICAgICAgd2luZG93LkNLRURJVE9SX1RSQU5TTEFUSU9OUyA9IHt9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBDcyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB3aW5kb3cuQ0tFRElUT1JfVFJBTlNMQVRJT05TW3RdIHx8ICh3aW5kb3cuQ0tFRElUT1JfVFJBTlNMQVRJT05TW3RdID0ge30pO1xyXG4gICAgICAgICAgICBPYmplY3QuYXNzaWduKGksIGUpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBBcyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBTcygpO1xyXG4gICAgICAgICAgICBpZiAoaSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgdCA9IE9iamVjdC5rZXlzKHdpbmRvdy5DS0VESVRPUl9UUkFOU0xBVElPTlMpWzBdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGkgPT09IDAgfHwgIVBzKHQsIGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5yZXBsYWNlKC8gXFxbY29udGV4dDogW15cXF1dK1xcXSQvLCBcIlwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSB3aW5kb3cuQ0tFRElUT1JfVFJBTlNMQVRJT05TW3RdO1xyXG4gICAgICAgICAgICByZXR1cm4gbltlXS5yZXBsYWNlKC8gXFxbY29udGV4dDogW15cXF1dK1xcXSQvLCBcIlwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVHMoKSB7XHJcbiAgICAgICAgICAgIHdpbmRvdy5DS0VESVRPUl9UUkFOU0xBVElPTlMgPSB7fVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gUHModCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdCBpbiB3aW5kb3cuQ0tFRElUT1JfVFJBTlNMQVRJT05TICYmIGUgaW4gd2luZG93LkNLRURJVE9SX1RSQU5TTEFUSU9OU1t0XVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gU3MoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh3aW5kb3cuQ0tFRElUT1JfVFJBTlNMQVRJT05TKS5sZW5ndGhcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IEVzID0gW1wiYXJcIiwgXCJmYVwiLCBcImhlXCIsIFwia3VcIiwgXCJ1Z1wiXTtcclxuXHJcbiAgICAgICAgY2xhc3MgUnMge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0ID0ge30pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudWlMYW5ndWFnZSA9IHQudWlMYW5ndWFnZSB8fCBcImVuXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRMYW5ndWFnZSA9IHQuY29udGVudExhbmd1YWdlIHx8IHRoaXMudWlMYW5ndWFnZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudWlMYW5ndWFnZURpcmVjdGlvbiA9IE9zKHRoaXMudWlMYW5ndWFnZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnRMYW5ndWFnZURpcmVjdGlvbiA9IE9zKHRoaXMuY29udGVudExhbmd1YWdlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudCA9ICguLi50KSA9PiB0aGlzLl90KC4uLnQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBsYW5ndWFnZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcImxvY2FsZS1kZXByZWNhdGVkLWxhbmd1YWdlLXByb3BlcnR5OiBcIiArIFwiVGhlIExvY2FsZSNsYW5ndWFnZSBwcm9wZXJ0eSBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5lYXIgZnV0dXJlLiBcIiArIFwiUGxlYXNlIHVzZSAjdWlMYW5ndWFnZSBhbmQgI2NvbnRlbnRMYW5ndWFnZSBwcm9wZXJ0aWVzIGluc3RlYWQuXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudWlMYW5ndWFnZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaSA9IEFzKHRoaXMudWlMYW5ndWFnZSwgdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBpLnJlcGxhY2UoLyUoXFxkKykvZywgKHQsIGkpID0+IGkgPCBlLmxlbmd0aCA/IGVbaV0gOiB0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gT3ModCkge1xyXG4gICAgICAgICAgICByZXR1cm4gRXMuaW5jbHVkZXModCkgPyBcInJ0bFwiIDogXCJsdHJcIlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgSXMge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZyA9IG5ldyBKcih0LCB0aGlzLmNvbnN0cnVjdG9yLmRlZmF1bHRDb25maWcpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuY29uc3RydWN0b3IuYnVpbHRpblBsdWdpbnM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5kZWZpbmUoXCJwbHVnaW5zXCIsIGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wbHVnaW5zID0gbmV3IHhzKHRoaXMsIGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuY29uZmlnLmdldChcImxhbmd1YWdlXCIpIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGUgPSBuZXcgUnMoe1xyXG4gICAgICAgICAgICAgICAgICAgIHVpTGFuZ3VhZ2U6IHR5cGVvZiBpID09PSBcInN0cmluZ1wiID8gaSA6IGkudWksXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGVudExhbmd1YWdlOiB0aGlzLmNvbmZpZy5nZXQoXCJsYW5ndWFnZS5jb250ZW50XCIpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMudCA9IHRoaXMubG9jYWxlLnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvcnMgPSBuZXcgeXM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0T3duZXIgPSBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXRQbHVnaW5zKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuY29uZmlnLmdldChcInBsdWdpbnNcIikgfHwgW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZSAhPSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcImNvbnRleHQtaW5pdHBsdWdpbnMtY29uc3RydWN0b3Itb25seTogT25seSBhIGNvbnN0cnVjdG9yIGZ1bmN0aW9uIGlzIGFsbG93ZWQgYXMgYSBjb250ZXh0IHBsdWdpbi5cIiwgbnVsbCwge1BsdWdpbjogZX0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmlzQ29udGV4dFBsdWdpbiAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiY29udGV4dC1pbml0cGx1Z2lucy1pbnZhbGlkLXBsdWdpbjogT25seSBhIHBsdWdpbiBtYXJrZWQgYXMgYSBjb250ZXh0IHBsdWdpbiBpcyBhbGxvd2VkIHRvIGJlIHVzZWQgd2l0aCBhIGNvbnRleHQuXCIsIG51bGwsIHtQbHVnaW46IGV9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnBsdWdpbnMuaW5pdCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UuYWxsKEFycmF5LmZyb20odGhpcy5lZGl0b3JzLCB0ID0+IHQuZGVzdHJveSgpKSkudGhlbigoKSA9PiB0aGlzLnBsdWdpbnMuZGVzdHJveSgpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfYWRkRWRpdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jb250ZXh0T3duZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiY29udGV4dC1hZGRFZGl0b3ItcHJpdmF0ZS1jb250ZXh0OiBDYW5ub3QgYWRkIG11bHRpcGxlIGVkaXRvcnMgdG8gdGhlIGNvbnRleHQgd2hpY2ggaXMgY3JlYXRlZCBieSB0aGUgZWRpdG9yLlwiKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3JzLmFkZCh0KTtcclxuICAgICAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29udGV4dE93bmVyID0gdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVtb3ZlRWRpdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVkaXRvcnMuaGFzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0b3JzLnJlbW92ZSh0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbnRleHRPd25lciA9PT0gdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlc3Ryb3koKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRFZGl0b3JDb25maWcoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0ge307XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5jb25maWcubmFtZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghW1wicGx1Z2luc1wiLCBcInJlbW92ZVBsdWdpbnNcIiwgXCJleHRyYVBsdWdpbnNcIl0uaW5jbHVkZXMoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdFtlXSA9IHRoaXMuY29uZmlnLmdldChlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBjcmVhdGUodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgdGhpcyh0KTtcclxuICAgICAgICAgICAgICAgICAgICBlKGkuaW5pdFBsdWdpbnMoKS50aGVuKCgpID0+IGkpKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVnModCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gTWF0aC5taW4odC5sZW5ndGgsIGUubGVuZ3RoKTtcclxuICAgICAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCBpOyBuKyspIHtcclxuICAgICAgICAgICAgICAgIGlmICh0W25dICE9IGVbbl0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0Lmxlbmd0aCA9PSBlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic2FtZVwiXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodC5sZW5ndGggPCBlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicHJlZml4XCJcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImV4dGVuc2lvblwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBOcyA9IDQ7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE1zKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEhyKHQsIE5zKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIEJzID0gTXM7XHJcblxyXG4gICAgICAgIGNsYXNzIHpzIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudCA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudCA9IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGluZGV4KCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgodCA9IHRoaXMucGFyZW50LmdldENoaWxkSW5kZXgodGhpcykpID09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInZpZXctbm9kZS1ub3QtZm91bmQtaW4tcGFyZW50OiBUaGUgbm9kZSdzIHBhcmVudCBkb2VzIG5vdCBjb250YWluIHRoaXMgbm9kZS5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBuZXh0U2libGluZygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgIT09IG51bGwgJiYgdGhpcy5wYXJlbnQuZ2V0Q2hpbGQodCArIDEpIHx8IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHByZXZpb3VzU2libGluZygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgIT09IG51bGwgJiYgdGhpcy5wYXJlbnQuZ2V0Q2hpbGQodCAtIDEpIHx8IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHJvb3QoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodC5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ID0gdC5wYXJlbnRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzQXR0YWNoZWQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yb290LmlzKFwicm9vdEVsZW1lbnRcIilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0UGF0aCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCBlID0gdGhpcztcclxuICAgICAgICAgICAgICAgIHdoaWxlIChlLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQudW5zaGlmdChlLmluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICBlID0gZS5wYXJlbnRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldEFuY2VzdG9ycyh0ID0ge2luY2x1ZGVTZWxmOiBmYWxzZSwgcGFyZW50Rmlyc3Q6IGZhbHNlfSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSB0LmluY2x1ZGVTZWxmID8gdGhpcyA6IHRoaXMucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlW3QucGFyZW50Rmlyc3QgPyBcInB1c2hcIiA6IFwidW5zaGlmdFwiXShpKTtcclxuICAgICAgICAgICAgICAgICAgICBpID0gaS5wYXJlbnRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENvbW1vbkFuY2VzdG9yKHQsIGUgPSB7fSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZ2V0QW5jZXN0b3JzKGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuZ2V0QW5jZXN0b3JzKGUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG8gPSAwO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGlbb10gPT0gbltvXSAmJiBpW29dKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbysrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbyA9PT0gMCA/IG51bGwgOiBpW28gLSAxXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc0JlZm9yZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcyA9PSB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb290ICE9PSB0LnJvb3QpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmdldFBhdGgoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LmdldFBhdGgoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBWcyhlLCBpKTtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAobikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VcInByZWZpeFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlXCJleHRlbnNpb25cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlW25dIDwgaVtuXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc0FmdGVyKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzID09IHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvb3QgIT09IHQucm9vdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLmlzQmVmb3JlKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZW1vdmUoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5fcmVtb3ZlQ2hpbGRyZW4odGhpcy5pbmRleClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2ZpcmVDaGFuZ2UodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiY2hhbmdlOlwiICsgdCwgZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBhcmVudC5fZmlyZUNoYW5nZSh0LCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gQnModGhpcyk7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdC5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpcyh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PSBcIm5vZGVcIiB8fCB0ID09IFwidmlldzpub2RlXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMoenMsIGRzKTtcclxuXHJcbiAgICAgICAgY2xhc3MgTHMgZXh0ZW5kcyB6cyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdGV4dERhdGEgPSBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ID09IFwidGV4dFwiIHx8IHQgPT0gXCJ2aWV3OnRleHRcIiB8fCBzdXBlci5pcyh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgZGF0YSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90ZXh0RGF0YVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgX2RhdGEoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldCBfZGF0YSh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlQ2hhbmdlKFwidGV4dFwiLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RleHREYXRhID0gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc1NpbWlsYXIodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEodCBpbnN0YW5jZW9mIExzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMgPT09IHQgfHwgdGhpcy5kYXRhID09PSB0LmRhdGFcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2Nsb25lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMcyh0aGlzLmRvY3VtZW50LCB0aGlzLmRhdGEpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIEZzIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0Tm9kZSA9IHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSA8IDAgfHwgZSA+IHQuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlldy10ZXh0cHJveHktd3Jvbmctb2Zmc2V0aW50ZXh0OiBHaXZlbiBvZmZzZXRJblRleHQgdmFsdWUgaXMgaW5jb3JyZWN0LlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGkgPCAwIHx8IGUgKyBpID4gdC5kYXRhLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ2aWV3LXRleHRwcm94eS13cm9uZy1sZW5ndGg6IEdpdmVuIGxlbmd0aCB2YWx1ZSBpcyBpbmNvcnJlY3QuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEgPSB0LmRhdGEuc3Vic3RyaW5nKGUsIGUgKyBpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0SW5UZXh0ID0gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgb2Zmc2V0U2l6ZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBpc1BhcnRpYWwoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aCAhPT0gdGhpcy50ZXh0Tm9kZS5kYXRhLmxlbmd0aFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgcGFyZW50KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dE5vZGUucGFyZW50XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCByb290KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dE5vZGUucm9vdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgZG9jdW1lbnQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0Tm9kZS5kb2N1bWVudFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpcyh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PSBcInRleHRQcm94eVwiIHx8IHQgPT0gXCJ2aWV3OnRleHRQcm94eVwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldEFuY2VzdG9ycyh0ID0ge2luY2x1ZGVTZWxmOiBmYWxzZSwgcGFyZW50Rmlyc3Q6IGZhbHNlfSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSB0LmluY2x1ZGVTZWxmID8gdGhpcy50ZXh0Tm9kZSA6IHRoaXMucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBlW3QucGFyZW50Rmlyc3QgPyBcInB1c2hcIiA6IFwidW5zaGlmdFwiXShpKTtcclxuICAgICAgICAgICAgICAgICAgICBpID0gaS5wYXJlbnRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIERzKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBpbiB0KSB7XHJcbiAgICAgICAgICAgICAgICBlLnNldChpLCB0W2ldKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBqcyh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhISh0ICYmIHRbU3ltYm9sLml0ZXJhdG9yXSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEhzKHQpIHtcclxuICAgICAgICAgICAgaWYgKGpzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IE1hcCh0KVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIERzKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIFdzIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IoLi4udCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGF0dGVybnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkKC4uLnQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFkZCguLi50KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBlIG9mIHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGUgPT0gXCJzdHJpbmdcIiB8fCBlIGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB7bmFtZTogZX1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuY2xhc3NlcyAmJiAodHlwZW9mIGUuY2xhc3NlcyA9PSBcInN0cmluZ1wiIHx8IGUuY2xhc3NlcyBpbnN0YW5jZW9mIFJlZ0V4cCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5jbGFzc2VzID0gW2UuY2xhc3Nlc11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGF0dGVybnMucHVzaChlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBtYXRjaCguLi50KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLl9wYXR0ZXJucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gcXMoZSwgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge2VsZW1lbnQ6IGUsIHBhdHRlcm46IHQsIG1hdGNoOiBpfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWF0Y2hBbGwoLi4udCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5fcGF0dGVybnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHFzKGksIHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKHtlbGVtZW50OiBpLCBwYXR0ZXJuOiB0LCBtYXRjaDogbn0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5sZW5ndGggPiAwID8gZSA6IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0RWxlbWVudE5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcGF0dGVybnMubGVuZ3RoICE9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9wYXR0ZXJuc1swXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm5hbWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHQgIT0gXCJmdW5jdGlvblwiICYmIGUgJiYgIShlIGluc3RhbmNlb2YgUmVnRXhwKSA/IGUgOiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHFzKHQsIGUpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUodClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBpID0ge307XHJcbiAgICAgICAgICAgIGlmIChlLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgIGkubmFtZSA9IFVzKGUubmFtZSwgdC5uYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmICghaS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICBpLmF0dHJpYnV0ZXMgPSAkcyhlLmF0dHJpYnV0ZXMsIHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlLmNsYXNzZXMpIHtcclxuICAgICAgICAgICAgICAgIGkuY2xhc3NlcyA9IEdzKGUuY2xhc3NlcywgdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkuY2xhc3Nlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlLnN0eWxlcykge1xyXG4gICAgICAgICAgICAgICAgaS5zdHlsZXMgPSBLcyhlLnN0eWxlcywgdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkuc3R5bGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFVzKHQsIGUpIHtcclxuICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBSZWdFeHApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0LnRlc3QoZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdCA9PT0gZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gJHModCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbiBpbiB0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gdFtuXTtcclxuICAgICAgICAgICAgICAgIGlmIChlLmhhc0F0dHJpYnV0ZShuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLmdldEF0dHJpYnV0ZShuKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobyA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnB1c2gobilcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG8gaW5zdGFuY2VvZiBSZWdFeHApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8udGVzdCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5wdXNoKG4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ID09PSBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkucHVzaChuKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBHcyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChuIGluc3RhbmNlb2YgUmVnRXhwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGUuZ2V0Q2xhc3NOYW1lcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuLnRlc3QoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkucHVzaChlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5oYXNDbGFzcyhuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGkucHVzaChuKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBLcyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBbXTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBuIGluIHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0W25dO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuaGFzU3R5bGUobikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZS5nZXRTdHlsZShuKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobyBpbnN0YW5jZW9mIFJlZ0V4cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoby50ZXN0KHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnB1c2gobilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQgPT09IG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5wdXNoKG4pXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBKcyA9IFwiW29iamVjdCBTeW1ib2xdXCI7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFlzKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB0ID09IFwic3ltYm9sXCIgfHwgVCh0KSAmJiBfKHQpID09IEpzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgUXMgPSBZcztcclxuICAgICAgICB2YXIgWHMgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLCBacyA9IC9eXFx3KiQvO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB0YSh0LCBlKSB7XHJcbiAgICAgICAgICAgIGlmIChKZSh0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGkgPSB0eXBlb2YgdDtcclxuICAgICAgICAgICAgaWYgKGkgPT0gXCJudW1iZXJcIiB8fCBpID09IFwic3ltYm9sXCIgfHwgaSA9PSBcImJvb2xlYW5cIiB8fCB0ID09IG51bGwgfHwgUXModCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFpzLnRlc3QodCkgfHwgIVhzLnRlc3QodCkgfHwgZSAhPSBudWxsICYmIHQgaW4gT2JqZWN0KGUpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZWEgPSB0YTtcclxuICAgICAgICB2YXIgaWEgPSBcIkV4cGVjdGVkIGEgZnVuY3Rpb25cIjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbmEodCwgZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQgIT0gXCJmdW5jdGlvblwiIHx8IGUgIT0gbnVsbCAmJiB0eXBlb2YgZSAhPSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoaWEpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbiA9IGFyZ3VtZW50cywgbyA9IGUgPyBlLmFwcGx5KHRoaXMsIG4pIDogblswXSwgciA9IGkuY2FjaGU7XHJcbiAgICAgICAgICAgICAgICBpZiAoci5oYXMobykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5nZXQobylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBzID0gdC5hcHBseSh0aGlzLCBuKTtcclxuICAgICAgICAgICAgICAgIGkuY2FjaGUgPSByLnNldChvLCBzKSB8fCByO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaS5jYWNoZSA9IG5ldyAobmEuQ2FjaGUgfHwgX2UpO1xyXG4gICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbmEuQ2FjaGUgPSBfZTtcclxuICAgICAgICB2YXIgb2EgPSBuYTtcclxuICAgICAgICB2YXIgcmEgPSA1MDA7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNhKHQpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSBvYSh0LCAoZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpLnNpemUgPT09IHJhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5jbGVhcigpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIHZhciBpID0gZS5jYWNoZTtcclxuICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBhYSA9IHNhO1xyXG4gICAgICAgIHZhciBjYSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcclxuICAgICAgICB2YXIgbGEgPSAvXFxcXChcXFxcKT8vZztcclxuICAgICAgICB2YXIgZGEgPSBhYSgoZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSBbXTtcclxuICAgICAgICAgICAgaWYgKHQuY2hhckNvZGVBdCgwKSA9PT0gNDYpIHtcclxuICAgICAgICAgICAgICAgIGUucHVzaChcIlwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQucmVwbGFjZShjYSwgKGZ1bmN0aW9uICh0LCBpLCBuLCBvKSB7XHJcbiAgICAgICAgICAgICAgICBlLnB1c2gobiA/IG8ucmVwbGFjZShsYSwgXCIkMVwiKSA6IGkgfHwgdClcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgIH0pKTtcclxuICAgICAgICB2YXIgdWEgPSBkYTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaGEodCwgZSkge1xyXG4gICAgICAgICAgICB2YXIgaSA9IC0xLCBuID0gdCA9PSBudWxsID8gMCA6IHQubGVuZ3RoLCBvID0gQXJyYXkobik7XHJcbiAgICAgICAgICAgIHdoaWxlICgrK2kgPCBuKSB7XHJcbiAgICAgICAgICAgICAgICBvW2ldID0gZSh0W2ldLCBpLCB0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZmEgPSBoYTtcclxuICAgICAgICB2YXIgZ2EgPSAxIC8gMDtcclxuICAgICAgICB2YXIgbWEgPSByID8gci5wcm90b3R5cGUgOiB1bmRlZmluZWQsIHBhID0gbWEgPyBtYS50b1N0cmluZyA6IHVuZGVmaW5lZDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYmEodCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoSmUodCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYSh0LCBiYSkgKyBcIlwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKFFzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGEgPyBwYS5jYWxsKHQpIDogXCJcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBlID0gdCArIFwiXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBlID09IFwiMFwiICYmIDEgLyB0ID09IC1nYSA/IFwiLTBcIiA6IGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB3YSA9IGJhO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBrYSh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ID09IG51bGwgPyBcIlwiIDogd2EodClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBfYSA9IGthO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB2YSh0LCBlKSB7XHJcbiAgICAgICAgICAgIGlmIChKZSh0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZWEodCwgZSkgPyBbdF0gOiB1YShfYSh0KSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB5YSA9IHZhO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB4YSh0KSB7XHJcbiAgICAgICAgICAgIHZhciBlID0gdCA9PSBudWxsID8gMCA6IHQubGVuZ3RoO1xyXG4gICAgICAgICAgICByZXR1cm4gZSA/IHRbZSAtIDFdIDogdW5kZWZpbmVkXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgQ2EgPSB4YTtcclxuICAgICAgICB2YXIgQWEgPSAxIC8gMDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVGEodCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQgPT0gXCJzdHJpbmdcIiB8fCBRcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZSA9IHQgKyBcIlwiO1xyXG4gICAgICAgICAgICByZXR1cm4gZSA9PSBcIjBcIiAmJiAxIC8gdCA9PSAtQWEgPyBcIi0wXCIgOiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgUGEgPSBUYTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gU2EodCwgZSkge1xyXG4gICAgICAgICAgICBlID0geWEoZSwgdCk7XHJcbiAgICAgICAgICAgIHZhciBpID0gMCwgbiA9IGUubGVuZ3RoO1xyXG4gICAgICAgICAgICB3aGlsZSAodCAhPSBudWxsICYmIGkgPCBuKSB7XHJcbiAgICAgICAgICAgICAgICB0ID0gdFtQYShlW2krK10pXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpICYmIGkgPT0gbiA/IHQgOiB1bmRlZmluZWRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBFYSA9IFNhO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBSYSh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIHZhciBuID0gLTEsIG8gPSB0Lmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKGUgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICBlID0gLWUgPiBvID8gMCA6IG8gKyBlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaSA9IGkgPiBvID8gbyA6IGk7XHJcbiAgICAgICAgICAgIGlmIChpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgaSArPSBvXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbyA9IGUgPiBpID8gMCA6IGkgLSBlID4+PiAwO1xyXG4gICAgICAgICAgICBlID4+Pj0gMDtcclxuICAgICAgICAgICAgdmFyIHIgPSBBcnJheShvKTtcclxuICAgICAgICAgICAgd2hpbGUgKCsrbiA8IG8pIHtcclxuICAgICAgICAgICAgICAgIHJbbl0gPSB0W24gKyBlXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgT2EgPSBSYTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSWEodCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZS5sZW5ndGggPCAyID8gdCA6IEVhKHQsIE9hKGUsIDAsIC0xKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBWYSA9IElhO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBOYSh0LCBlKSB7XHJcbiAgICAgICAgICAgIGUgPSB5YShlLCB0KTtcclxuICAgICAgICAgICAgdCA9IFZhKHQsIGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gdCA9PSBudWxsIHx8IGRlbGV0ZSB0W1BhKENhKGUpKV1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBNYSA9IE5hO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBCYSh0LCBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ID09IG51bGwgPyB0cnVlIDogTWEodCwgZSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB6YSA9IEJhO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBMYSh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIHZhciBuID0gdCA9PSBudWxsID8gdW5kZWZpbmVkIDogRWEodCwgZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuID09PSB1bmRlZmluZWQgPyBpIDogblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIEZhID0gTGE7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIERhKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgaWYgKGkgIT09IHVuZGVmaW5lZCAmJiAhTCh0W2VdLCBpKSB8fCBpID09PSB1bmRlZmluZWQgJiYgIShlIGluIHQpKSB7XHJcbiAgICAgICAgICAgICAgICBPZSh0LCBlLCBpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgamEgPSBEYTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSGEodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUsIGksIG4pIHtcclxuICAgICAgICAgICAgICAgIHZhciBvID0gLTEsIHIgPSBPYmplY3QoZSksIHMgPSBuKGUpLCBhID0gcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoYS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGMgPSBzW3QgPyBhIDogKytvXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaShyW2NdLCBjLCByKSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgV2EgPSBIYTtcclxuICAgICAgICB2YXIgcWEgPSBXYSgpO1xyXG4gICAgICAgIHZhciBVYSA9IHFhO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiAkYSh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBUKHQpICYmIFFpKHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgR2EgPSAkYTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gS2EodCwgZSkge1xyXG4gICAgICAgICAgICBpZiAoZSA9PT0gXCJjb25zdHJ1Y3RvclwiICYmIHR5cGVvZiB0W2VdID09PSBcImZ1bmN0aW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlID09IFwiX19wcm90b19fXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0W2VdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgSmEgPSBLYTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWWEodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gemUodCwgZG4odCkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgUWEgPSBZYTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWGEodCwgZSwgaSwgbiwgbywgciwgcykge1xyXG4gICAgICAgICAgICB2YXIgYSA9IEphKHQsIGkpLCBjID0gSmEoZSwgaSksIGwgPSBzLmdldChjKTtcclxuICAgICAgICAgICAgaWYgKGwpIHtcclxuICAgICAgICAgICAgICAgIGphKHQsIGksIGwpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGQgPSByID8gcihhLCBjLCBpICsgXCJcIiwgdCwgZSwgcykgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIHZhciB1ID0gZCA9PT0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICBpZiAodSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGggPSBKZShjKSwgZiA9ICFoICYmIE9iamVjdChZZVtcImFcIl0pKGMpLCBnID0gIWggJiYgIWYgJiYgQmkoYyk7XHJcbiAgICAgICAgICAgICAgICBkID0gYztcclxuICAgICAgICAgICAgICAgIGlmIChoIHx8IGYgfHwgZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChKZShhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkID0gYVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoR2EoYSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IG1uKGEpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IE9iamVjdChmbltcImFcIl0pKGMsIHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IFRvKGMsIHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZCA9IFtdXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChOKGMpIHx8IEdlKGMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZCA9IGE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEdlKGEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBRYShhKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIWN0KGEpIHx8IGd0KGEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGQgPSBYbyhjKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdSA9IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHUpIHtcclxuICAgICAgICAgICAgICAgIHMuc2V0KGMsIGQpO1xyXG4gICAgICAgICAgICAgICAgbyhkLCBjLCBuLCByLCBzKTtcclxuICAgICAgICAgICAgICAgIHNbXCJkZWxldGVcIl0oYylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBqYSh0LCBpLCBkKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIFphID0gWGE7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHRjKHQsIGUsIGksIG4sIG8pIHtcclxuICAgICAgICAgICAgaWYgKHQgPT09IGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFVhKGUsIChmdW5jdGlvbiAociwgcykge1xyXG4gICAgICAgICAgICAgICAgbyB8fCAobyA9IG5ldyBBZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3QocikpIHtcclxuICAgICAgICAgICAgICAgICAgICBaYSh0LCBlLCBzLCBpLCB0YywgbiwgbylcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBuID8gbihKYSh0LCBzKSwgciwgcyArIFwiXCIsIHQsIGUsIG8pIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgamEodCwgcywgYSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSksIGRuKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGVjID0gdGM7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGljKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBuYyA9IGljO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBvYyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoaS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5jYWxsKGUpO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmNhbGwoZSwgaVswXSk7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuY2FsbChlLCBpWzBdLCBpWzFdKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5jYWxsKGUsIGlbMF0sIGlbMV0sIGlbMl0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHQuYXBwbHkoZSwgaSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciByYyA9IG9jO1xyXG4gICAgICAgIHZhciBzYyA9IE1hdGgubWF4O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBhYyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGUgPSBzYyhlID09PSB1bmRlZmluZWQgPyB0Lmxlbmd0aCAtIDEgOiBlLCAwKTtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBuID0gYXJndW1lbnRzLCBvID0gLTEsIHIgPSBzYyhuLmxlbmd0aCAtIGUsIDApLCBzID0gQXJyYXkocik7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoKytvIDwgcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHNbb10gPSBuW2UgKyBvXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbyA9IC0xO1xyXG4gICAgICAgICAgICAgICAgdmFyIGEgPSBBcnJheShlICsgMSk7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoKytvIDwgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFbb10gPSBuW29dXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhW2VdID0gaShzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByYyh0LCB0aGlzLCBhKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgY2MgPSBhYztcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbGModCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGRjID0gbGM7XHJcbiAgICAgICAgdmFyIHVjID0gIUVlID8gbmMgOiBmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gRWUodCwgXCJ0b1N0cmluZ1wiLCB7Y29uZmlndXJhYmxlOiB0cnVlLCBlbnVtZXJhYmxlOiBmYWxzZSwgdmFsdWU6IGRjKGUpLCB3cml0YWJsZTogdHJ1ZX0pXHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgaGMgPSB1YztcclxuICAgICAgICB2YXIgZmMgPSA4MDAsIGdjID0gMTY7XHJcbiAgICAgICAgdmFyIG1jID0gRGF0ZS5ub3c7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHBjKHQpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSAwLCBpID0gMDtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBuID0gbWMoKSwgbyA9IGdjIC0gKG4gLSBpKTtcclxuICAgICAgICAgICAgICAgIGkgPSBuO1xyXG4gICAgICAgICAgICAgICAgaWYgKG8gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCsrZSA+PSBmYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuYXBwbHkodW5kZWZpbmVkLCBhcmd1bWVudHMpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBiYyA9IHBjO1xyXG4gICAgICAgIHZhciB3YyA9IGJjKGhjKTtcclxuICAgICAgICB2YXIga2MgPSB3YztcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2ModCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ga2MoY2ModCwgZSwgbmMpLCB0ICsgXCJcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB2YyA9IF9jO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiB5Yyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGlmICghY3QoaSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBuID0gdHlwZW9mIGU7XHJcbiAgICAgICAgICAgIGlmIChuID09IFwibnVtYmVyXCIgPyBRaShpKSAmJiB0aShlLCBpLmxlbmd0aCkgOiBuID09IFwic3RyaW5nXCIgJiYgZSBpbiBpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTChpW2VdLCB0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHhjID0geWM7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIENjKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZjKChmdW5jdGlvbiAoZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIG4gPSAtMSwgbyA9IGkubGVuZ3RoLCByID0gbyA+IDEgPyBpW28gLSAxXSA6IHVuZGVmaW5lZCwgcyA9IG8gPiAyID8gaVsyXSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHIgPSB0Lmxlbmd0aCA+IDMgJiYgdHlwZW9mIHIgPT0gXCJmdW5jdGlvblwiID8gKG8tLSwgcikgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAocyAmJiB4YyhpWzBdLCBpWzFdLCBzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHIgPSBvIDwgMyA/IHVuZGVmaW5lZCA6IHI7XHJcbiAgICAgICAgICAgICAgICAgICAgbyA9IDFcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGUgPSBPYmplY3QoZSk7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoKytuIDwgbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhID0gaVtuXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0KGUsIGEsIG4sIHIpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgQWMgPSBDYztcclxuICAgICAgICB2YXIgVGMgPSBBYygoZnVuY3Rpb24gKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgZWModCwgZSwgaSlcclxuICAgICAgICB9KSk7XHJcbiAgICAgICAgdmFyIFBjID0gVGM7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFNjKHQsIGUsIGksIG4pIHtcclxuICAgICAgICAgICAgaWYgKCFjdCh0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlID0geWEoZSwgdCk7XHJcbiAgICAgICAgICAgIHZhciBvID0gLTEsIHIgPSBlLmxlbmd0aCwgcyA9IHIgLSAxLCBhID0gdDtcclxuICAgICAgICAgICAgd2hpbGUgKGEgIT0gbnVsbCAmJiArK28gPCByKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYyA9IFBhKGVbb10pLCBsID0gaTtcclxuICAgICAgICAgICAgICAgIGlmIChvICE9IHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGFbY107XHJcbiAgICAgICAgICAgICAgICAgICAgbCA9IG4gPyBuKGQsIGMsIGEpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IGN0KGQpID8gZCA6IHRpKGVbbyArIDFdKSA/IFtdIDoge31cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBNZShhLCBjLCBsKTtcclxuICAgICAgICAgICAgICAgIGEgPSBhW2NdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBFYyA9IFNjO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBSYyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ID09IG51bGwgPyB0IDogRWModCwgZSwgaSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBPYyA9IFJjO1xyXG5cclxuICAgICAgICBjbGFzcyBJYyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3R5bGVQcm9jZXNzb3IgPSB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBpc0VtcHR5KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IE9iamVjdC5lbnRyaWVzKHRoaXMuX3N0eWxlcyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gQXJyYXkuZnJvbSh0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhZS5sZW5ndGhcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHNpemUoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFN0eWxlTmFtZXMoKS5sZW5ndGhcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0VG8odCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IEFycmF5LmZyb20oTmModCkuZW50cmllcygpKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW3QsIGldIG9mIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHlsZVByb2Nlc3Nvci50b05vcm1hbGl6ZWRGb3JtKHQsIGksIHRoaXMuX3N0eWxlcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaGFzKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLl9zdHlsZVByb2Nlc3Nvci5nZXRSZWR1Y2VkRm9ybSh0LCB0aGlzLl9zdHlsZXMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuZmluZCgoW2VdKSA9PiBlID09PSB0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KGkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3QodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtlLCBpXSBvZiBPYmplY3QuZW50cmllcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHlsZVByb2Nlc3Nvci50b05vcm1hbGl6ZWRGb3JtKGUsIGksIHRoaXMuX3N0eWxlcylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlUHJvY2Vzc29yLnRvTm9ybWFsaXplZEZvcm0odCwgZSwgdGhpcy5fc3R5bGVzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW1vdmUodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IE1jKHQpO1xyXG4gICAgICAgICAgICAgICAgemEodGhpcy5fc3R5bGVzLCBlKTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9zdHlsZXNbdF07XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGVhbkVtcHR5T2JqZWN0c09uUGF0aChlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXROb3JtYWxpemVkKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdHlsZVByb2Nlc3Nvci5nZXROb3JtYWxpemVkKHQsIHRoaXMuX3N0eWxlcylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRTdHlsZXNFbnRyaWVzKCkubWFwKHQgPT4gdC5qb2luKFwiOlwiKSkuc29ydCgpLmpvaW4oXCI7XCIpICsgXCI7XCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0QXNTdHJpbmcodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3N0eWxlc1t0XSAmJiAhY3QodGhpcy5fc3R5bGVzW3RdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdHlsZXNbdF1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLl9zdHlsZVByb2Nlc3Nvci5nZXRSZWR1Y2VkRm9ybSh0LCB0aGlzLl9zdHlsZXMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuZmluZCgoW2VdKSA9PiBlID09PSB0KTtcclxuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlbMV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0U3R5bGVOYW1lcygpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW11cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9nZXRTdHlsZXNFbnRyaWVzKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5tYXAoKFt0XSkgPT4gdClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2xlYXIoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdHlsZXMgPSB7fVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0U3R5bGVzRW50cmllcygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBPYmplY3Qua2V5cyh0aGlzLl9zdHlsZXMpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LnB1c2goLi4udGhpcy5fc3R5bGVQcm9jZXNzb3IuZ2V0UmVkdWNlZEZvcm0oaSwgdGhpcy5fc3R5bGVzKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jbGVhbkVtcHR5T2JqZWN0c09uUGF0aCh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5zcGxpdChcIi5cIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5sZW5ndGggPiAxO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5zcGxpY2UoMCwgZS5sZW5ndGggLSAxKS5qb2luKFwiLlwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBGYSh0aGlzLl9zdHlsZXMsIG4pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gIUFycmF5LmZyb20oT2JqZWN0LmtleXMobykpLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGlmIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUobilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgVmMge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX25vcm1hbGl6ZXJzID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2V4dHJhY3RvcnMgPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVkdWNlcnMgPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29uc3VtYWJsZXMgPSBuZXcgTWFwXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRvTm9ybWFsaXplZEZvcm0odCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN0KGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQmMoaSwgTWModCksIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX25vcm1hbGl6ZXJzLmhhcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9ub3JtYWxpemVycy5nZXQodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qge3BhdGg6IG8sIHZhbHVlOiByfSA9IG4oZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgQmMoaSwgbywgcilcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQmMoaSwgdCwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0Tm9ybWFsaXplZCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gUGMoe30sIGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZVt0XSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVbdF1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9leHRyYWN0b3JzLmhhcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9leHRyYWN0b3JzLmdldCh0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGkgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZhKGUsIGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpKHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEZhKGUsIE1jKHQpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRSZWR1Y2VkRm9ybSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5nZXROb3JtYWxpemVkKHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3JlZHVjZXJzLmhhcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLl9yZWR1Y2Vycy5nZXQodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUoaSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbW3QsIGldXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRSZWxhdGVkU3R5bGVzKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb25zdW1hYmxlcy5nZXQodCkgfHwgW11cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0Tm9ybWFsaXplcih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ub3JtYWxpemVycy5zZXQodCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0RXh0cmFjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2V4dHJhY3RvcnMuc2V0KHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldFJlZHVjZXIodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVkdWNlcnMuc2V0KHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldFN0eWxlUmVsYXRpb24odCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFwU3R5bGVOYW1lcyh0LCBlKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFwU3R5bGVOYW1lcyhpLCBbdF0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9tYXBTdHlsZU5hbWVzKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fY29uc3VtYWJsZXMuaGFzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29uc3VtYWJsZXMuc2V0KHQsIFtdKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29uc3VtYWJsZXMuZ2V0KHQpLnB1c2goLi4uZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gTmModCkge1xyXG4gICAgICAgICAgICBsZXQgZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICAgICAgbGV0IG4gPSAwO1xyXG4gICAgICAgICAgICBsZXQgbyA9IG51bGw7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICBpZiAodCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5jaGFyQXQodC5sZW5ndGggLSAxKSAhPSBcIjtcIikge1xyXG4gICAgICAgICAgICAgICAgdCA9IHQgKyBcIjtcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IHMgPSAwOyBzIDwgdC5sZW5ndGg7IHMrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IHQuY2hhckF0KHMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZVwiOlwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHQuc3Vic3RyKGksIHMgLSBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gcyArIDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlJ1wiJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZVwiJ1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZVwiO1wiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5zdWJzdHIobiwgcyAtIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByLnNldChvLnRyaW0oKSwgZS50cmltKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBzICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGEgPT09IGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBNYyh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0LnJlcGxhY2UoXCItXCIsIFwiLlwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQmModCwgZSwgaSkge1xyXG4gICAgICAgICAgICBsZXQgbiA9IGk7XHJcbiAgICAgICAgICAgIGlmIChjdChpKSkge1xyXG4gICAgICAgICAgICAgICAgbiA9IFBjKHt9LCBGYSh0LCBlKSwgaSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBPYyh0LCBlLCBuKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgemMgZXh0ZW5kcyB6cyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUsIGksIG4pIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2F0dHJzID0gTGMoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnNlcnRDaGlsZCgwLCBuKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xhc3NlcyA9IG5ldyBTZXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYXR0cnMuaGFzKFwiY2xhc3NcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5fYXR0cnMuZ2V0KFwiY2xhc3NcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgRmModGhpcy5fY2xhc3NlcywgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXR0cnMuZGVsZXRlKFwiY2xhc3NcIilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlcyA9IG5ldyBJYyh0aGlzLmRvY3VtZW50LnN0eWxlc1Byb2Nlc3Nvcik7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYXR0cnMuaGFzKFwic3R5bGVcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdHlsZXMuc2V0VG8odGhpcy5fYXR0cnMuZ2V0KFwic3R5bGVcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2F0dHJzLmRlbGV0ZShcInN0eWxlXCIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXN0b21Qcm9wZXJ0aWVzID0gbmV3IE1hcFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgY2hpbGRDb3VudCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5sZW5ndGhcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGlzRW1wdHkoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW4ubGVuZ3RoID09PSAwXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzKHQsIGUgPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5yZXBsYWNlKC9edmlldzovLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpID09IFwiZWxlbWVudFwiIHx8IGkgPT0gdGhpcy5uYW1lIHx8IHN1cGVyLmlzKHQpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpID09IFwiZWxlbWVudFwiICYmIGUgPT0gdGhpcy5uYW1lXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENoaWxkKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlblt0XVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRDaGlsZEluZGV4KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5pbmRleE9mKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENoaWxkcmVuKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuW1N5bWJvbC5pdGVyYXRvcl0oKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIGdldEF0dHJpYnV0ZUtleXMoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fY2xhc3Nlcy5zaXplID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHlpZWxkXCJjbGFzc1wiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3N0eWxlcy5pc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeWllbGRcInN0eWxlXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLl9hdHRycy5rZXlzKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgKiBnZXRBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuX2F0dHJzLmVudHJpZXMoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jbGFzc2VzLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeWllbGRbXCJjbGFzc1wiLCB0aGlzLmdldEF0dHJpYnV0ZShcImNsYXNzXCIpXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9zdHlsZXMuaXNFbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHlpZWxkW1wic3R5bGVcIiwgdGhpcy5nZXRBdHRyaWJ1dGUoXCJzdHlsZVwiKV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0QXR0cmlidXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0ID09IFwiY2xhc3NcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jbGFzc2VzLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbLi4udGhpcy5fY2xhc3Nlc10uam9pbihcIiBcIilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQgPT0gXCJzdHlsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuX3N0eWxlcy50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID09IFwiXCIgPyB1bmRlZmluZWQgOiB0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYXR0cnMuZ2V0KHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGhhc0F0dHJpYnV0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodCA9PSBcImNsYXNzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2xhc3Nlcy5zaXplID4gMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQgPT0gXCJzdHlsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF0aGlzLl9zdHlsZXMuaXNFbXB0eVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F0dHJzLmhhcyh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc1NpbWlsYXIodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEodCBpbnN0YW5jZW9mIHpjKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMgPT09IHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmFtZSAhPSB0Lm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hdHRycy5zaXplICE9PSB0Ll9hdHRycy5zaXplIHx8IHRoaXMuX2NsYXNzZXMuc2l6ZSAhPT0gdC5fY2xhc3Nlcy5zaXplIHx8IHRoaXMuX3N0eWxlcy5zaXplICE9PSB0Ll9zdHlsZXMuc2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZSwgaV0gb2YgdGhpcy5fYXR0cnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXQuX2F0dHJzLmhhcyhlKSB8fCB0Ll9hdHRycy5nZXQoZSkgIT09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuX2NsYXNzZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXQuX2NsYXNzZXMuaGFzKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLl9zdHlsZXMuZ2V0U3R5bGVOYW1lcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0Ll9zdHlsZXMuaGFzKGUpIHx8IHQuX3N0eWxlcy5nZXRBc1N0cmluZyhlKSAhPT0gdGhpcy5fc3R5bGVzLmdldEFzU3RyaW5nKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGhhc0NsYXNzKC4uLnQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jbGFzc2VzLmhhcyhlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRDbGFzc05hbWVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NsYXNzZXMua2V5cygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFN0eWxlKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdHlsZXMuZ2V0QXNTdHJpbmcodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0Tm9ybWFsaXplZFN0eWxlKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdHlsZXMuZ2V0Tm9ybWFsaXplZCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRTdHlsZU5hbWVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3N0eWxlcy5nZXRTdHlsZU5hbWVzKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaGFzU3R5bGUoLi4udCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3N0eWxlcy5oYXMoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZmluZEFuY2VzdG9yKC4uLnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgV3MoLi4udCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgaSA9IHRoaXMucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5tYXRjaChpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpID0gaS5wYXJlbnRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldEN1c3RvbVByb3BlcnR5KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jdXN0b21Qcm9wZXJ0aWVzLmdldCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIGdldEN1c3RvbVByb3BlcnRpZXMoKSB7XHJcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5fY3VzdG9tUHJvcGVydGllcy5lbnRyaWVzKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0SWRlbnRpdHkoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gQXJyYXkuZnJvbSh0aGlzLl9jbGFzc2VzKS5zb3J0KCkuam9pbihcIixcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5fc3R5bGVzLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gQXJyYXkuZnJvbSh0aGlzLl9hdHRycykubWFwKHQgPT4gYCR7dFswXX09XCIke3RbMV19XCJgKS5zb3J0KCkuam9pbihcIiBcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5uYW1lICsgKHQgPT0gXCJcIiA/IFwiXCIgOiBgIGNsYXNzPVwiJHt0fVwiYCkgKyAoIWUgPyBcIlwiIDogYCBzdHlsZT1cIiR7ZX1cImApICsgKGkgPT0gXCJcIiA/IFwiXCIgOiBgICR7aX1gKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY2xvbmUodCA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gW107XHJcbiAgICAgICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLmdldENoaWxkcmVuKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKGkuX2Nsb25lKHQpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmRvY3VtZW50LCB0aGlzLm5hbWUsIHRoaXMuX2F0dHJzLCBlKTtcclxuICAgICAgICAgICAgICAgIGkuX2NsYXNzZXMgPSBuZXcgU2V0KHRoaXMuX2NsYXNzZXMpO1xyXG4gICAgICAgICAgICAgICAgaS5fc3R5bGVzLnNldCh0aGlzLl9zdHlsZXMuZ2V0Tm9ybWFsaXplZCgpKTtcclxuICAgICAgICAgICAgICAgIGkuX2N1c3RvbVByb3BlcnRpZXMgPSBuZXcgTWFwKHRoaXMuX2N1c3RvbVByb3BlcnRpZXMpO1xyXG4gICAgICAgICAgICAgICAgaS5nZXRGaWxsZXJPZmZzZXQgPSB0aGlzLmdldEZpbGxlck9mZnNldDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9hcHBlbmRDaGlsZCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faW5zZXJ0Q2hpbGQodGhpcy5jaGlsZENvdW50LCB0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfaW5zZXJ0Q2hpbGQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZUNoYW5nZShcImNoaWxkcmVuXCIsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IERjKHRoaXMuZG9jdW1lbnQsIGUpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5wYXJlbnQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5fcmVtb3ZlKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wYXJlbnQgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIGUuZG9jdW1lbnQgPSB0aGlzLmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLnNwbGljZSh0LCAwLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICB0Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVtb3ZlQ2hpbGRyZW4odCwgZSA9IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmVDaGFuZ2UoXCJjaGlsZHJlblwiLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSB0OyBpIDwgdCArIGU7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuW2ldLnBhcmVudCA9IG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5zcGxpY2UodCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3NldEF0dHJpYnV0ZSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBlID0gU3RyaW5nKGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZUNoYW5nZShcImF0dHJpYnV0ZXNcIiwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodCA9PSBcImNsYXNzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBGYyh0aGlzLl9jbGFzc2VzLCBlKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ID09IFwic3R5bGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlcy5zZXRUbyhlKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdHRycy5zZXQodCwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3JlbW92ZUF0dHJpYnV0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlQ2hhbmdlKFwiYXR0cmlidXRlc1wiLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIGlmICh0ID09IFwiY2xhc3NcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jbGFzc2VzLnNpemUgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NsYXNzZXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodCA9PSBcInN0eWxlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3N0eWxlcy5pc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0eWxlcy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hdHRycy5kZWxldGUodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2FkZENsYXNzKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmVDaGFuZ2UoXCJhdHRyaWJ1dGVzXCIsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdCA9IEFycmF5LmlzQXJyYXkodCkgPyB0IDogW3RdO1xyXG4gICAgICAgICAgICAgICAgdC5mb3JFYWNoKHQgPT4gdGhpcy5fY2xhc3Nlcy5hZGQodCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZW1vdmVDbGFzcyh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlQ2hhbmdlKFwiYXR0cmlidXRlc1wiLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIHQgPSBBcnJheS5pc0FycmF5KHQpID8gdCA6IFt0XTtcclxuICAgICAgICAgICAgICAgIHQuZm9yRWFjaCh0ID0+IHRoaXMuX2NsYXNzZXMuZGVsZXRlKHQpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2V0U3R5bGUodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZUNoYW5nZShcImF0dHJpYnV0ZXNcIiwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdHlsZXMuc2V0KHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZW1vdmVTdHlsZSh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlQ2hhbmdlKFwiYXR0cmlidXRlc1wiLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIHQgPSBBcnJheS5pc0FycmF5KHQpID8gdCA6IFt0XTtcclxuICAgICAgICAgICAgICAgIHQuZm9yRWFjaCh0ID0+IHRoaXMuX3N0eWxlcy5yZW1vdmUodCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9zZXRDdXN0b21Qcm9wZXJ0eSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXN0b21Qcm9wZXJ0aWVzLnNldCh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVtb3ZlQ3VzdG9tUHJvcGVydHkodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2N1c3RvbVByb3BlcnRpZXMuZGVsZXRlKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIExjKHQpIHtcclxuICAgICAgICAgICAgdCA9IEhzKHQpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtlLCBpXSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuZGVsZXRlKGUpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpICE9IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LnNldChlLCBTdHJpbmcoaSkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEZjKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IGUuc3BsaXQoL1xccysvKTtcclxuICAgICAgICAgICAgdC5jbGVhcigpO1xyXG4gICAgICAgICAgICBpLmZvckVhY2goZSA9PiB0LmFkZChlKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIERjKHQsIGUpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBlID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbbmV3IExzKHQsIGUpXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghanMoZSkpIHtcclxuICAgICAgICAgICAgICAgIGUgPSBbZV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbShlKS5tYXAoZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGUgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTHModCwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgRnMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExzKHQsIGUuZGF0YSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBqYyBleHRlbmRzIHpjIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCwgZSwgaSwgbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldEZpbGxlck9mZnNldCA9IEhjXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzKHQsIGUgPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdCAmJiB0LnJlcGxhY2UoL152aWV3Oi8sIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPT0gXCJjb250YWluZXJFbGVtZW50XCIgfHwgc3VwZXIuaXModClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPT0gXCJjb250YWluZXJFbGVtZW50XCIgJiYgZSA9PSB0aGlzLm5hbWUgfHwgc3VwZXIuaXModCwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSGMoKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHQgPSBbLi4udGhpcy5nZXRDaGlsZHJlbigpXTtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHRbdGhpcy5jaGlsZENvdW50IC0gMV07XHJcbiAgICAgICAgICAgIGlmIChlICYmIGUuaXMoXCJlbGVtZW50XCIsIFwiYnJcIikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkQ291bnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlLmlzKFwidWlFbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZENvdW50XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgV2MgPSBBYygoZnVuY3Rpb24gKHQsIGUpIHtcclxuICAgICAgICAgICAgemUoZSwgZG4oZSksIHQpXHJcbiAgICAgICAgfSkpO1xyXG4gICAgICAgIHZhciBxYyA9IFdjO1xyXG4gICAgICAgIGNvbnN0IFVjID0gU3ltYm9sKFwib2JzZXJ2YWJsZVByb3BlcnRpZXNcIik7XHJcbiAgICAgICAgY29uc3QgJGMgPSBTeW1ib2woXCJib3VuZE9ic2VydmFibGVzXCIpO1xyXG4gICAgICAgIGNvbnN0IEdjID0gU3ltYm9sKFwiYm91bmRQcm9wZXJ0aWVzXCIpO1xyXG4gICAgICAgIGNvbnN0IEtjID0ge1xyXG4gICAgICAgICAgICBzZXQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGN0KHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgT2JqZWN0LmtleXModCkuZm9yRWFjaChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQoZSwgdFtlXSlcclxuICAgICAgICAgICAgICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFljKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXNbVWNdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQgaW4gdGhpcyAmJiAhaS5oYXModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwib2JzZXJ2YWJsZS1zZXQtY2Fubm90LW92ZXJyaWRlOiBDYW5ub3Qgb3ZlcnJpZGUgYW4gZXhpc3RpbmcgcHJvcGVydHkuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgdCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaS5nZXQodClcclxuICAgICAgICAgICAgICAgICAgICB9LCBzZXQoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5nZXQodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvID0gdGhpcy5maXJlKFwic2V0OlwiICsgdCwgdCwgZSwgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gIT09IG8gfHwgIWkuaGFzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldCh0LCBvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcImNoYW5nZTpcIiArIHQsIHQsIG8sIG4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXNbdF0gPSBlXHJcbiAgICAgICAgICAgIH0sIGJpbmQoLi4udCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0Lmxlbmd0aCB8fCAhdGwodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwib2JzZXJ2YWJsZS1iaW5kLXdyb25nLXByb3BlcnRpZXM6IEFsbCBwcm9wZXJ0aWVzIG11c3QgYmUgc3RyaW5ncy5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuZXcgU2V0KHQpLnNpemUgIT09IHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIm9ic2VydmFibGUtYmluZC1kdXBsaWNhdGUtcHJvcGVydGllczogUHJvcGVydGllcyBtdXN0IGJlIHVuaXF1ZS5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFljKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXNbR2NdO1xyXG4gICAgICAgICAgICAgICAgdC5mb3JFYWNoKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmhhcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwib2JzZXJ2YWJsZS1iaW5kLXJlYmluZDogQ2Fubm90IGJpbmQgdGhlIHNhbWUgcHJvcGVydHkgbW9yZSB0aGFuIG9uY2UuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIHQuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0ge3Byb3BlcnR5OiB0LCB0bzogW119O1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc2V0KHQsIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0KHQsIG4pXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7dG86IFFjLCB0b01hbnk6IFhjLCBfb2JzZXJ2YWJsZTogdGhpcywgX2JpbmRQcm9wZXJ0aWVzOiB0LCBfdG86IFtdLCBfYmluZGluZ3M6IGl9XHJcbiAgICAgICAgICAgIH0sIHVuYmluZCguLi50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShVYyBpbiB0aGlzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXNbR2NdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXNbJGNdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0bCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwib2JzZXJ2YWJsZS11bmJpbmQtd3JvbmctcHJvcGVydGllczogUHJvcGVydGllcyBtdXN0IGJlIHN0cmluZ3MuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHQuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGUuZ2V0KHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvLCByLCBzLCBhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLnRvLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gdFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB0WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcyA9IGkuZ2V0KG8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSA9IHNbcl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmRlbGV0ZShuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghYS5zaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHNbcl1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghT2JqZWN0LmtleXMocykubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5kZWxldGUobyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKG8sIFwiY2hhbmdlXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmRlbGV0ZSh0KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGkuZm9yRWFjaCgodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoZSwgXCJjaGFuZ2VcIilcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5jbGVhcigpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIGRlY29yYXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzW3RdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIm9ic2VydmFibGVtaXhpbi1jYW5ub3QtZGVjb3JhdGUtdW5kZWZpbmVkOiBDYW5ub3QgZGVjb3JhdGUgYW4gdW5kZWZpbmVkIG1ldGhvZC5cIiwgdGhpcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1ldGhvZE5hbWU6IHRcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5vbih0LCAodCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHQucmV0dXJuID0gZS5hcHBseSh0aGlzLCBpKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzW3RdID0gZnVuY3Rpb24gKC4uLmUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5maXJlKHQsIGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHFjKEtjLCBkcyk7XHJcbiAgICAgICAgdmFyIEpjID0gS2M7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFljKHQpIHtcclxuICAgICAgICAgICAgaWYgKFVjIGluIHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBVYywge3ZhbHVlOiBuZXcgTWFwfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCAkYywge3ZhbHVlOiBuZXcgTWFwfSk7XHJcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCBHYywge3ZhbHVlOiBuZXcgTWFwfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFFjKC4uLnQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IGVsKC4uLnQpO1xyXG4gICAgICAgICAgICBjb25zdCBpID0gQXJyYXkuZnJvbSh0aGlzLl9iaW5kaW5ncy5rZXlzKCkpO1xyXG4gICAgICAgICAgICBjb25zdCBuID0gaS5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmICghZS5jYWxsYmFjayAmJiBlLnRvLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJvYnNlcnZhYmxlLWJpbmQtdG8tbm8tY2FsbGJhY2s6IEJpbmRpbmcgbXVsdGlwbGUgb2JzZXJ2YWJsZXMgb25seSBwb3NzaWJsZSB3aXRoIGNhbGxiYWNrLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChuID4gMSAmJiBlLmNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwib2JzZXJ2YWJsZS1iaW5kLXRvLWV4dHJhLWNhbGxiYWNrOiBDYW5ub3QgYmluZCBtdWx0aXBsZSBwcm9wZXJ0aWVzIGFuZCB1c2UgYSBjYWxsYmFjayBpbiBvbmUgYmluZGluZy5cIiwgdGhpcylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlLnRvLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5wcm9wZXJ0aWVzLmxlbmd0aCAmJiB0LnByb3BlcnRpZXMubGVuZ3RoICE9PSBuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIm9ic2VydmFibGUtYmluZC10by1wcm9wZXJ0aWVzLWxlbmd0aDogVGhlIG51bWJlciBvZiBwcm9wZXJ0aWVzIG11c3QgbWF0Y2guXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQucHJvcGVydGllcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LnByb3BlcnRpZXMgPSB0aGlzLl9iaW5kUHJvcGVydGllc1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5fdG8gPSBlLnRvO1xyXG4gICAgICAgICAgICBpZiAoZS5jYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmluZGluZ3MuZ2V0KGlbMF0pLmNhbGxiYWNrID0gZS5jYWxsYmFja1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJsKHRoaXMuX29ic2VydmFibGUsIHRoaXMuX3RvKTtcclxuICAgICAgICAgICAgbmwodGhpcyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2JpbmRQcm9wZXJ0aWVzLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICBvbCh0aGlzLl9vYnNlcnZhYmxlLCB0KVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWGModCwgZSwgaSkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fYmluZGluZ3Muc2l6ZSA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJvYnNlcnZhYmxlLWJpbmQtdG8tbWFueS1ub3Qtb25lLWJpbmRpbmc6IENhbm5vdCBiaW5kIG11bHRpcGxlIHByb3BlcnRpZXMgd2l0aCB0b01hbnkoKS5cIiwgdGhpcylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLnRvKC4uLlpjKHQsIGUpLCBpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWmModCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5tYXAodCA9PiBbdCwgZV0pO1xyXG4gICAgICAgICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgaSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHRsKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQuZXZlcnkodCA9PiB0eXBlb2YgdCA9PSBcInN0cmluZ1wiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZWwoLi4udCkge1xyXG4gICAgICAgICAgICBpZiAoIXQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwib2JzZXJ2YWJsZS1iaW5kLXRvLXBhcnNlLWVycm9yOiBJbnZhbGlkIGFyZ3VtZW50IHN5bnRheCBpbiBgdG8oKWAuXCIsIG51bGwpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZSA9IHt0bzogW119O1xyXG4gICAgICAgICAgICBsZXQgaTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0W3QubGVuZ3RoIC0gMV0gPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICBlLmNhbGxiYWNrID0gdC5wb3AoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdCA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5wcm9wZXJ0aWVzLnB1c2godClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHQgPT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSB7b2JzZXJ2YWJsZTogdCwgcHJvcGVydGllczogW119O1xyXG4gICAgICAgICAgICAgICAgICAgIGUudG8ucHVzaChpKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwib2JzZXJ2YWJsZS1iaW5kLXRvLXBhcnNlLWVycm9yOiBJbnZhbGlkIGFyZ3VtZW50IHN5bnRheCBpbiBgdG8oKWAuXCIsIG51bGwpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaWwodCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICBjb25zdCBvID0gdFskY107XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBvLmdldChpKTtcclxuICAgICAgICAgICAgY29uc3QgcyA9IHIgfHwge307XHJcbiAgICAgICAgICAgIGlmICghc1tuXSkge1xyXG4gICAgICAgICAgICAgICAgc1tuXSA9IG5ldyBTZXRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzW25dLmFkZChlKTtcclxuICAgICAgICAgICAgaWYgKCFyKSB7XHJcbiAgICAgICAgICAgICAgICBvLnNldChpLCBzKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBubCh0KSB7XHJcbiAgICAgICAgICAgIGxldCBlO1xyXG4gICAgICAgICAgICB0Ll9iaW5kaW5ncy5mb3JFYWNoKChpLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0Ll90by5mb3JFYWNoKG8gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSBvLnByb3BlcnRpZXNbaS5jYWxsYmFjayA/IDAgOiB0Ll9iaW5kUHJvcGVydGllcy5pbmRleE9mKG4pXTtcclxuICAgICAgICAgICAgICAgICAgICBpLnRvLnB1c2goW28ub2JzZXJ2YWJsZSwgZV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlsKHQuX29ic2VydmFibGUsIGksIG8ub2JzZXJ2YWJsZSwgZSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBvbCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0W0djXTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGkuZ2V0KGUpO1xyXG4gICAgICAgICAgICBsZXQgbztcclxuICAgICAgICAgICAgaWYgKG4uY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgIG8gPSBuLmNhbGxiYWNrLmFwcGx5KHQsIG4udG8ubWFwKHQgPT4gdFswXVt0WzFdXSkpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBvID0gbi50b1swXTtcclxuICAgICAgICAgICAgICAgIG8gPSBvWzBdW29bMV1dXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQuaGFzT3duUHJvcGVydHkoZSkpIHtcclxuICAgICAgICAgICAgICAgIHRbZV0gPSBvXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0LnNldChlLCBvKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBybCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGUuZm9yRWFjaChlID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0WyRjXTtcclxuICAgICAgICAgICAgICAgIGxldCBuO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpLmdldChlLm9ic2VydmFibGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5saXN0ZW5UbyhlLm9ic2VydmFibGUsIFwiY2hhbmdlXCIsIChvLCByKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBpLmdldChlLm9ic2VydmFibGUpW3JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5mb3JFYWNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9sKHQsIGUucHJvcGVydHkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHNsIGV4dGVuZHMgamMge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0LCBlLCBpLCBuKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaXNSZWFkT25seVwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImlzRm9jdXNlZFwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmQoXCJpc1JlYWRPbmx5XCIpLnRvKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iaW5kKFwiaXNGb2N1c2VkXCIpLnRvKHQsIFwiaXNGb2N1c2VkXCIsIGUgPT4gZSAmJiB0LnNlbGVjdGlvbi5lZGl0YWJsZUVsZW1lbnQgPT0gdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHQuc2VsZWN0aW9uLCBcImNoYW5nZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0ZvY3VzZWQgPSB0LmlzRm9jdXNlZCAmJiB0LnNlbGVjdGlvbi5lZGl0YWJsZUVsZW1lbnQgPT0gdGhpc1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXModCwgZSA9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0ICYmIHQucmVwbGFjZSgvXnZpZXc6LywgXCJcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA9PSBcImVkaXRhYmxlRWxlbWVudFwiIHx8IHN1cGVyLmlzKHQpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpID09IFwiZWRpdGFibGVFbGVtZW50XCIgJiYgZSA9PSB0aGlzLm5hbWUgfHwgc3VwZXIuaXModCwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcExpc3RlbmluZygpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKHNsLCBKYyk7XHJcbiAgICAgICAgY29uc3QgYWwgPSBTeW1ib2woXCJyb290TmFtZVwiKTtcclxuXHJcbiAgICAgICAgY2xhc3MgY2wgZXh0ZW5kcyBzbCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yb290TmFtZSA9IFwibWFpblwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzKHQsIGUgPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5yZXBsYWNlKC9edmlldzovLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpID09IFwicm9vdEVsZW1lbnRcIiB8fCBzdXBlci5pcyh0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA9PSBcInJvb3RFbGVtZW50XCIgJiYgZSA9PSB0aGlzLm5hbWUgfHwgc3VwZXIuaXModCwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHJvb3ROYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q3VzdG9tUHJvcGVydHkoYWwpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldCByb290TmFtZSh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRDdXN0b21Qcm9wZXJ0eShhbCwgdClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0IF9uYW1lKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgbGwge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0ID0ge30pIHtcclxuICAgICAgICAgICAgICAgIGlmICghdC5ib3VuZGFyaWVzICYmICF0LnN0YXJ0UG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlldy10cmVlLXdhbGtlci1uby1zdGFydC1wb3NpdGlvbjogTmVpdGhlciBib3VuZGFyaWVzIG5vciBzdGFydGluZyBwb3NpdGlvbiBoYXZlIGJlZW4gZGVmaW5lZC5cIiwgbnVsbClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0LmRpcmVjdGlvbiAmJiB0LmRpcmVjdGlvbiAhPSBcImZvcndhcmRcIiAmJiB0LmRpcmVjdGlvbiAhPSBcImJhY2t3YXJkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlldy10cmVlLXdhbGtlci11bmtub3duLWRpcmVjdGlvbjogT25seSBgYmFja3dhcmRgIGFuZCBgZm9yd2FyZGAgZGlyZWN0aW9uIGFsbG93ZWQuXCIsIHQuc3RhcnRQb3NpdGlvbiwge2RpcmVjdGlvbjogdC5kaXJlY3Rpb259KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5ib3VuZGFyaWVzID0gdC5ib3VuZGFyaWVzIHx8IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5zdGFydFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IGRsLl9jcmVhdGVBdCh0LnN0YXJ0UG9zaXRpb24pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBkbC5fY3JlYXRlQXQodC5ib3VuZGFyaWVzW3QuZGlyZWN0aW9uID09IFwiYmFja3dhcmRcIiA/IFwiZW5kXCIgOiBcInN0YXJ0XCJdKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSB0LmRpcmVjdGlvbiB8fCBcImZvcndhcmRcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2luZ2xlQ2hhcmFjdGVycyA9ICEhdC5zaW5nbGVDaGFyYWN0ZXJzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaGFsbG93ID0gISF0LnNoYWxsb3c7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlnbm9yZUVsZW1lbnRFbmQgPSAhIXQuaWdub3JlRWxlbWVudEVuZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JvdW5kYXJ5U3RhcnRQYXJlbnQgPSB0aGlzLmJvdW5kYXJpZXMgPyB0aGlzLmJvdW5kYXJpZXMuc3RhcnQucGFyZW50IDogbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JvdW5kYXJ5RW5kUGFyZW50ID0gdGhpcy5ib3VuZGFyaWVzID8gdGhpcy5ib3VuZGFyaWVzLmVuZC5wYXJlbnQgOiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2tpcCh0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZSwgaSwgbjtcclxuICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICBuID0gdGhpcy5wb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAoe2RvbmU6IGUsIHZhbHVlOiBpfSA9IHRoaXMubmV4dCgpKVxyXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoIWUgJiYgdChpKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBuZXh0KCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09IFwiZm9yd2FyZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25leHQoKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJldmlvdXMoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfbmV4dCgpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0ID0gdGhpcy5wb3NpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMucG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaS5wYXJlbnQgPT09IG51bGwgJiYgdC5vZmZzZXQgPT09IGkuY2hpbGRDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7ZG9uZTogdHJ1ZX1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpID09PSB0aGlzLl9ib3VuZGFyeUVuZFBhcmVudCAmJiB0Lm9mZnNldCA9PSB0aGlzLmJvdW5kYXJpZXMuZW5kLm9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7ZG9uZTogdHJ1ZX1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBuO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgaW5zdGFuY2VvZiBMcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmlzQXRFbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IGRsLl9jcmVhdGVBZnRlcihpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25leHQoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBuID0gaS5kYXRhW3Qub2Zmc2V0XVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuID0gaS5nZXRDaGlsZCh0Lm9mZnNldClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuIGluc3RhbmNlb2YgemMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2hhbGxvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gbmV3IGRsKG4sIDApXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5vZmZzZXQrK1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gdDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0UmV0dXJuVmFsdWUoXCJlbGVtZW50U3RhcnRcIiwgbiwgZSwgdCwgMSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobiBpbnN0YW5jZW9mIExzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2luZ2xlQ2hhcmFjdGVycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gbmV3IGRsKG4sIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25leHQoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBpID0gbi5kYXRhLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuID09IHRoaXMuX2JvdW5kYXJ5RW5kUGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gdGhpcy5ib3VuZGFyaWVzLmVuZC5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gbmV3IEZzKG4sIDAsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdCA9IGRsLl9jcmVhdGVBZnRlcihvKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IG5ldyBGcyhuLCAwLCBuLmRhdGEubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQub2Zmc2V0KytcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdFJldHVyblZhbHVlKFwidGV4dFwiLCBvLCBlLCB0LCBpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG4gPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNpbmdsZUNoYXJhY3RlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IDFcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gaSA9PT0gdGhpcy5fYm91bmRhcnlFbmRQYXJlbnQgPyB0aGlzLmJvdW5kYXJpZXMuZW5kLm9mZnNldCA6IGkuZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBlIC0gdC5vZmZzZXRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IG5ldyBGcyhpLCB0Lm9mZnNldCwgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5vZmZzZXQgKz0gbjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gdDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZm9ybWF0UmV0dXJuVmFsdWUoXCJ0ZXh0XCIsIG8sIGUsIHQsIG4pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHQgPSBkbC5fY3JlYXRlQWZ0ZXIoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaWdub3JlRWxlbWVudEVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbmV4dCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdFJldHVyblZhbHVlKFwiZWxlbWVudEVuZFwiLCBpLCBlLCB0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3ByZXZpb3VzKCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHQgPSB0aGlzLnBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5wb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGlmIChpLnBhcmVudCA9PT0gbnVsbCAmJiB0Lm9mZnNldCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7ZG9uZTogdHJ1ZX1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpID09IHRoaXMuX2JvdW5kYXJ5U3RhcnRQYXJlbnQgJiYgdC5vZmZzZXQgPT0gdGhpcy5ib3VuZGFyaWVzLnN0YXJ0Lm9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7ZG9uZTogdHJ1ZX1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBuO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgaW5zdGFuY2VvZiBMcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmlzQXRTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gZGwuX2NyZWF0ZUJlZm9yZShpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByZXZpb3VzKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbiA9IGkuZGF0YVt0Lm9mZnNldCAtIDFdXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG4gPSBpLmdldENoaWxkKHQub2Zmc2V0IC0gMSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuIGluc3RhbmNlb2YgemMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2hhbGxvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gbmV3IGRsKG4sIG4uY2hpbGRDb3VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pZ25vcmVFbGVtZW50RW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJldmlvdXMoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdFJldHVyblZhbHVlKFwiZWxlbWVudEVuZFwiLCBuLCBlLCB0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5vZmZzZXQtLTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXRSZXR1cm5WYWx1ZShcImVsZW1lbnRTdGFydFwiLCBuLCBlLCB0LCAxKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobiBpbnN0YW5jZW9mIExzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc2luZ2xlQ2hhcmFjdGVycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gbmV3IGRsKG4sIG4uZGF0YS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByZXZpb3VzKClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgaSA9IG4uZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBvO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA9PSB0aGlzLl9ib3VuZGFyeVN0YXJ0UGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5ib3VuZGFyaWVzLnN0YXJ0Lm9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBuZXcgRnMobiwgZSwgbi5kYXRhLmxlbmd0aCAtIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IG8uZGF0YS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ID0gZGwuX2NyZWF0ZUJlZm9yZShvKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IG5ldyBGcyhuLCAwLCBuLmRhdGEubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQub2Zmc2V0LS1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdFJldHVyblZhbHVlKFwidGV4dFwiLCBvLCBlLCB0LCBpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIG4gPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5zaW5nbGVDaGFyYWN0ZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBpID09PSB0aGlzLl9ib3VuZGFyeVN0YXJ0UGFyZW50ID8gdGhpcy5ib3VuZGFyaWVzLnN0YXJ0Lm9mZnNldCA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSB0Lm9mZnNldCAtIGVcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gMVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0Lm9mZnNldCAtPSBuO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgRnMoaSwgdC5vZmZzZXQsIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9mb3JtYXRSZXR1cm5WYWx1ZShcInRleHRcIiwgbywgZSwgdCwgbilcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IGRsLl9jcmVhdGVCZWZvcmUoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zvcm1hdFJldHVyblZhbHVlKFwiZWxlbWVudFN0YXJ0XCIsIGksIGUsIHQsIDEpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9mb3JtYXRSZXR1cm5WYWx1ZSh0LCBlLCBpLCBuLCBvKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEZzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUub2Zmc2V0SW5UZXh0ICsgZS5kYXRhLmxlbmd0aCA9PSBlLnRleHROb2RlLmRhdGEubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpcmVjdGlvbiA9PSBcImZvcndhcmRcIiAmJiAhKHRoaXMuYm91bmRhcmllcyAmJiB0aGlzLmJvdW5kYXJpZXMuZW5kLmlzRXF1YWwodGhpcy5wb3NpdGlvbikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gZGwuX2NyZWF0ZUFmdGVyKGUudGV4dE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBkbC5fY3JlYXRlQWZ0ZXIoZS50ZXh0Tm9kZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5vZmZzZXRJblRleHQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09IFwiYmFja3dhcmRcIiAmJiAhKHRoaXMuYm91bmRhcmllcyAmJiB0aGlzLmJvdW5kYXJpZXMuc3RhcnQuaXNFcXVhbCh0aGlzLnBvc2l0aW9uKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBkbC5fY3JlYXRlQmVmb3JlKGUudGV4dE5vZGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBkbC5fY3JlYXRlQmVmb3JlKGUudGV4dE5vZGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge2RvbmU6IGZhbHNlLCB2YWx1ZToge3R5cGU6IHQsIGl0ZW06IGUsIHByZXZpb3VzUG9zaXRpb246IGksIG5leHRQb3NpdGlvbjogbiwgbGVuZ3RoOiBvfX1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgZGwge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhcmVudCA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9mZnNldCA9IGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IG5vZGVBZnRlcigpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudC5pcyhcInRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmdldENoaWxkKHRoaXMub2Zmc2V0KSB8fCBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBub2RlQmVmb3JlKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucGFyZW50LmlzKFwidGV4dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0Q2hpbGQodGhpcy5vZmZzZXQgLSAxKSB8fCBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBpc0F0U3RhcnQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQgPT09IDBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGlzQXRFbmQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5wYXJlbnQuaXMoXCJ0ZXh0XCIpID8gdGhpcy5wYXJlbnQuZGF0YS5sZW5ndGggOiB0aGlzLnBhcmVudC5jaGlsZENvdW50O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0ID09PSB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCByb290KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LnJvb3RcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGVkaXRhYmxlRWxlbWVudCgpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0ID0gdGhpcy5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoISh0IGluc3RhbmNlb2Ygc2wpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSB0LnBhcmVudFxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0U2hpZnRlZEJ5KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBkbC5fY3JlYXRlQXQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5vZmZzZXQgKyB0O1xyXG4gICAgICAgICAgICAgICAgZS5vZmZzZXQgPSBpIDwgMCA/IDAgOiBpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0TGFzdE1hdGNoaW5nUG9zaXRpb24odCwgZSA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBlLnN0YXJ0UG9zaXRpb24gPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBsbChlKTtcclxuICAgICAgICAgICAgICAgIGkuc2tpcCh0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpLnBvc2l0aW9uXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldEFuY2VzdG9ycygpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnBhcmVudC5pcyhcImRvY3VtZW50RnJhZ21lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RoaXMucGFyZW50XVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXJlbnQuZ2V0QW5jZXN0b3JzKHtpbmNsdWRlU2VsZjogdHJ1ZX0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENvbW1vbkFuY2VzdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmdldEFuY2VzdG9ycygpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuZ2V0QW5jZXN0b3JzKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbiA9IDA7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoZVtuXSA9PSBpW25dICYmIGVbbl0pIHtcclxuICAgICAgICAgICAgICAgICAgICBuKytcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IGVbbiAtIDFdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ID09IFwicG9zaXRpb25cIiB8fCB0ID09IFwidmlldzpwb3NpdGlvblwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzRXF1YWwodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50ID09IHQucGFyZW50ICYmIHRoaXMub2Zmc2V0ID09IHQub2Zmc2V0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzQmVmb3JlKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVXaXRoKHQpID09IFwiYmVmb3JlXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNBZnRlcih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlV2l0aCh0KSA9PSBcImFmdGVyXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29tcGFyZVdpdGgodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucm9vdCAhPT0gdC5yb290KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiZGlmZmVyZW50XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRXF1YWwodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJzYW1lXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLnBhcmVudC5pcyhcIm5vZGVcIikgPyB0aGlzLnBhcmVudC5nZXRQYXRoKCkgOiBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnBhcmVudC5pcyhcIm5vZGVcIikgPyB0LnBhcmVudC5nZXRQYXRoKCkgOiBbXTtcclxuICAgICAgICAgICAgICAgIGUucHVzaCh0aGlzLm9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICBpLnB1c2godC5vZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IFZzKGUsIGkpO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZVwicHJlZml4XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImJlZm9yZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VcImV4dGVuc2lvblwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJhZnRlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlW25dIDwgaVtuXSA/IFwiYmVmb3JlXCIgOiBcImFmdGVyXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0V2Fsa2VyKHQgPSB7fSkge1xyXG4gICAgICAgICAgICAgICAgdC5zdGFydFBvc2l0aW9uID0gdGhpcztcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbGwodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2xvbmUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGRsKHRoaXMucGFyZW50LCB0aGlzLm9mZnNldClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIF9jcmVhdGVBdCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodCBpbnN0YW5jZW9mIGRsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0aGlzKHQucGFyZW50LCB0Lm9mZnNldClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgPT0gXCJlbmRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gaS5pcyhcInRleHRcIikgPyBpLmRhdGEubGVuZ3RoIDogaS5jaGlsZENvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlID09IFwiYmVmb3JlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUJlZm9yZShpKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZSA9PSBcImFmdGVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUFmdGVyKGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlICE9PSAwICYmICFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ2aWV3LWNyZWF0ZVBvc2l0aW9uQXQtb2Zmc2V0LXJlcXVpcmVkOiBcIiArIFwiVmlldyNjcmVhdGVQb3NpdGlvbkF0KCkgcmVxdWlyZXMgdGhlIG9mZnNldCB3aGVuIHRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgYSB2aWV3IGl0ZW0uXCIsIGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgZGwoaSwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIF9jcmVhdGVBZnRlcih0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5pcyhcInRleHRQcm94eVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgZGwodC50ZXh0Tm9kZSwgdC5vZmZzZXRJblRleHQgKyB0LmRhdGEubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCF0LnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ2aWV3LXBvc2l0aW9uLWFmdGVyLXJvb3Q6IFlvdSBjYW4gbm90IG1ha2UgcG9zaXRpb24gYWZ0ZXIgcm9vdC5cIiwgdCwge3Jvb3Q6IHR9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBkbCh0LnBhcmVudCwgdC5pbmRleCArIDEpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBfY3JlYXRlQmVmb3JlKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0LmlzKFwidGV4dFByb3h5XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBkbCh0LnRleHROb2RlLCB0Lm9mZnNldEluVGV4dClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdC5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlldy1wb3NpdGlvbi1iZWZvcmUtcm9vdDogWW91IGNhbiBub3QgbWFrZSBwb3NpdGlvbiBiZWZvcmUgcm9vdC5cIiwgdCwge3Jvb3Q6IHR9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBkbCh0LnBhcmVudCwgdC5pbmRleClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgdWwge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlID0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCA9IHQuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW5kID0gZSA/IGUuY2xvbmUoKSA6IHQuY2xvbmUoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xyXG4gICAgICAgICAgICAgICAgeWllbGQqIG5ldyBsbCh7Ym91bmRhcmllczogdGhpcywgaWdub3JlRWxlbWVudEVuZDogdHJ1ZX0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBpc0NvbGxhcHNlZCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0LmlzRXF1YWwodGhpcy5lbmQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBpc0ZsYXQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydC5wYXJlbnQgPT09IHRoaXMuZW5kLnBhcmVudFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgcm9vdCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0LnJvb3RcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0RW5sYXJnZWQoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdCA9IHRoaXMuc3RhcnQuZ2V0TGFzdE1hdGNoaW5nUG9zaXRpb24oaGwsIHtkaXJlY3Rpb246IFwiYmFja3dhcmRcIn0pO1xyXG4gICAgICAgICAgICAgICAgbGV0IGUgPSB0aGlzLmVuZC5nZXRMYXN0TWF0Y2hpbmdQb3NpdGlvbihobCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5wYXJlbnQuaXMoXCJ0ZXh0XCIpICYmIHQuaXNBdFN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IGRsLl9jcmVhdGVCZWZvcmUodC5wYXJlbnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5wYXJlbnQuaXMoXCJ0ZXh0XCIpICYmIGUuaXNBdEVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSBkbC5fY3JlYXRlQWZ0ZXIoZS5wYXJlbnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHVsKHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFRyaW1tZWQoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdCA9IHRoaXMuc3RhcnQuZ2V0TGFzdE1hdGNoaW5nUG9zaXRpb24oaGwpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuaXNBZnRlcih0aGlzLmVuZCkgfHwgdC5pc0VxdWFsKHRoaXMuZW5kKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdWwodCwgdClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBlID0gdGhpcy5lbmQuZ2V0TGFzdE1hdGNoaW5nUG9zaXRpb24oaGwsIHtkaXJlY3Rpb246IFwiYmFja3dhcmRcIn0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQubm9kZUFmdGVyO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGUubm9kZUJlZm9yZTtcclxuICAgICAgICAgICAgICAgIGlmIChpICYmIGkuaXMoXCJ0ZXh0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IG5ldyBkbChpLCAwKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG4gJiYgbi5pcyhcInRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gbmV3IGRsKG4sIG4uZGF0YS5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHVsKHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzRXF1YWwodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMgPT0gdCB8fCB0aGlzLnN0YXJ0LmlzRXF1YWwodC5zdGFydCkgJiYgdGhpcy5lbmQuaXNFcXVhbCh0LmVuZClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udGFpbnNQb3NpdGlvbih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5pc0FmdGVyKHRoaXMuc3RhcnQpICYmIHQuaXNCZWZvcmUodGhpcy5lbmQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRhaW5zUmFuZ2UodCwgZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5pc0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuY29udGFpbnNQb3NpdGlvbih0LnN0YXJ0KSB8fCBlICYmIHRoaXMuc3RhcnQuaXNFcXVhbCh0LnN0YXJ0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLmNvbnRhaW5zUG9zaXRpb24odC5lbmQpIHx8IGUgJiYgdGhpcy5lbmQuaXNFcXVhbCh0LmVuZCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaSAmJiBuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldERpZmZlcmVuY2UodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNJbnRlcnNlY3RpbmcodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250YWluc1Bvc2l0aW9uKHQuc3RhcnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChuZXcgdWwodGhpcy5zdGFydCwgdC5zdGFydCkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRhaW5zUG9zaXRpb24odC5lbmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChuZXcgdWwodC5lbmQsIHRoaXMuZW5kKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHVzaCh0aGlzLmNsb25lKCkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRJbnRlcnNlY3Rpb24odCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNJbnRlcnNlY3RpbmcodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgZSA9IHRoaXMuc3RhcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSB0aGlzLmVuZDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250YWluc1Bvc2l0aW9uKHQuc3RhcnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB0LnN0YXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRhaW5zUG9zaXRpb24odC5lbmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB0LmVuZFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHVsKGUsIGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRXYWxrZXIodCA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICB0LmJvdW5kYXJpZXMgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBsbCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRDb21tb25BbmNlc3RvcigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0LmdldENvbW1vbkFuY2VzdG9yKHRoaXMuZW5kKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRDb250YWluZWRFbGVtZW50KCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IHQgPSB0aGlzLnN0YXJ0Lm5vZGVBZnRlcjtcclxuICAgICAgICAgICAgICAgIGxldCBlID0gdGhpcy5lbmQubm9kZUJlZm9yZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXJ0LnBhcmVudC5pcyhcInRleHRcIikgJiYgdGhpcy5zdGFydC5pc0F0RW5kICYmIHRoaXMuc3RhcnQucGFyZW50Lm5leHRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IHRoaXMuc3RhcnQucGFyZW50Lm5leHRTaWJsaW5nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5lbmQucGFyZW50LmlzKFwidGV4dFwiKSAmJiB0aGlzLmVuZC5pc0F0U3RhcnQgJiYgdGhpcy5lbmQucGFyZW50LnByZXZpb3VzU2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLmVuZC5wYXJlbnQucHJldmlvdXNTaWJsaW5nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodCAmJiB0LmlzKFwiZWxlbWVudFwiKSAmJiB0ID09PSBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNsb25lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB1bCh0aGlzLnN0YXJ0LCB0aGlzLmVuZClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgKiBnZXRJdGVtcyh0ID0ge30pIHtcclxuICAgICAgICAgICAgICAgIHQuYm91bmRhcmllcyA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICB0Lmlnbm9yZUVsZW1lbnRFbmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBsbCh0KTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgdC5pdGVtXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICogZ2V0UG9zaXRpb25zKHQgPSB7fSkge1xyXG4gICAgICAgICAgICAgICAgdC5ib3VuZGFyaWVzID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgbGwodCk7XHJcbiAgICAgICAgICAgICAgICB5aWVsZCBlLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB5aWVsZCB0Lm5leHRQb3NpdGlvblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpcyh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PSBcInJhbmdlXCIgfHwgdCA9PSBcInZpZXc6cmFuZ2VcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc0ludGVyc2VjdGluZyh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydC5pc0JlZm9yZSh0LmVuZCkgJiYgdGhpcy5lbmQuaXNBZnRlcih0LnN0YXJ0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgX2NyZWF0ZUZyb21QYXJlbnRzQW5kT2Zmc2V0cyh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMobmV3IGRsKHQsIGUpLCBuZXcgZGwoaSwgbikpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBfY3JlYXRlRnJvbVBvc2l0aW9uQW5kU2hpZnQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5nZXRTaGlmdGVkQnkoZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZSA+IDAgPyBuZXcgdGhpcyhpLCBuKSA6IG5ldyB0aGlzKG4sIGkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBfY3JlYXRlSW4odCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUZyb21QYXJlbnRzQW5kT2Zmc2V0cyh0LCAwLCB0LCB0LmNoaWxkQ291bnQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBfY3JlYXRlT24odCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuaXMoXCJ0ZXh0UHJveHlcIikgPyB0Lm9mZnNldFNpemUgOiAxO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUZyb21Qb3NpdGlvbkFuZFNoaWZ0KGRsLl9jcmVhdGVCZWZvcmUodCksIGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGhsKHQpIHtcclxuICAgICAgICAgICAgaWYgKHQuaXRlbS5pcyhcImF0dHJpYnV0ZUVsZW1lbnRcIikgfHwgdC5pdGVtLmlzKFwidWlFbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZmwodCkge1xyXG4gICAgICAgICAgICBsZXQgZSA9IDA7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICBlKytcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgZ2wge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0ID0gbnVsbCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VzID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0UmFuZ2VCYWNrd2FyZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXNGYWtlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mYWtlU2VsZWN0aW9uTGFiZWwgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUbyh0LCBlLCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgaXNGYWtlKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRmFrZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgZmFrZVNlbGVjdGlvbkxhYmVsKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zha2VTZWxlY3Rpb25MYWJlbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgYW5jaG9yKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9yYW5nZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9yYW5nZXNbdGhpcy5fcmFuZ2VzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuX2xhc3RSYW5nZUJhY2t3YXJkID8gdC5lbmQgOiB0LnN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuY2xvbmUoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgZm9jdXMoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3Jhbmdlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuX3Jhbmdlc1t0aGlzLl9yYW5nZXMubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5fbGFzdFJhbmdlQmFja3dhcmQgPyB0LnN0YXJ0IDogdC5lbmQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5jbG9uZSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBpc0NvbGxhcHNlZCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJhbmdlQ291bnQgPT09IDEgJiYgdGhpcy5fcmFuZ2VzWzBdLmlzQ29sbGFwc2VkXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCByYW5nZUNvdW50KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jhbmdlcy5sZW5ndGhcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGlzQmFja3dhcmQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNDb2xsYXBzZWQgJiYgdGhpcy5fbGFzdFJhbmdlQmFja3dhcmRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGVkaXRhYmxlRWxlbWVudCgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFuY2hvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFuY2hvci5lZGl0YWJsZUVsZW1lbnRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICogZ2V0UmFuZ2VzKCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMuX3Jhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHQuY2xvbmUoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRGaXJzdFJhbmdlKCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuX3Jhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdCB8fCBlLnN0YXJ0LmlzQmVmb3JlKHQuc3RhcnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPyB0LmNsb25lKCkgOiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldExhc3RSYW5nZSgpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0ID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLl9yYW5nZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXQgfHwgZS5lbmQuaXNBZnRlcih0LmVuZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IGVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCA/IHQuY2xvbmUoKSA6IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0Rmlyc3RQb3NpdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmdldEZpcnN0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ID8gdC5zdGFydC5jbG9uZSgpIDogbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRMYXN0UG9zaXRpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5nZXRMYXN0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ID8gdC5lbmQuY2xvbmUoKSA6IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNFcXVhbCh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0Zha2UgIT0gdC5pc0Zha2UpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRmFrZSAmJiB0aGlzLmZha2VTZWxlY3Rpb25MYWJlbCAhPSB0LmZha2VTZWxlY3Rpb25MYWJlbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmFuZ2VDb3VudCAhPSB0LnJhbmdlQ291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5yYW5nZUNvdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5hbmNob3IuaXNFcXVhbCh0LmFuY2hvcikgfHwgIXRoaXMuZm9jdXMuaXNFcXVhbCh0LmZvY3VzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuX3Jhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIHQuX3Jhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5pc0VxdWFsKG4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzU2ltaWxhcih0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0JhY2t3YXJkICE9IHQuaXNCYWNrd2FyZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IGZsKHRoaXMuZ2V0UmFuZ2VzKCkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGZsKHQuZ2V0UmFuZ2VzKCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUgIT0gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGUgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBlIG9mIHRoaXMuZ2V0UmFuZ2VzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gZS5nZXRUcmltbWVkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBuIG9mIHQuZ2V0UmFuZ2VzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IG4uZ2V0VHJpbW1lZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5zdGFydC5pc0VxdWFsKG4uc3RhcnQpICYmIGUuZW5kLmlzRXF1YWwobi5lbmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFNlbGVjdGVkRWxlbWVudCgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJhbmdlQ291bnQgIT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rmlyc3RSYW5nZSgpLmdldENvbnRhaW5lZEVsZW1lbnQoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRUbyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFJhbmdlcyhbXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0RmFrZU9wdGlvbnMoZSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodCBpbnN0YW5jZW9mIGdsIHx8IHQgaW5zdGFuY2VvZiBtbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFJhbmdlcyh0LmdldFJhbmdlcygpLCB0LmlzQmFja3dhcmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldEZha2VPcHRpb25zKHtmYWtlOiB0LmlzRmFrZSwgbGFiZWw6IHQuZmFrZVNlbGVjdGlvbkxhYmVsfSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodCBpbnN0YW5jZW9mIHVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UmFuZ2VzKFt0XSwgZSAmJiBlLmJhY2t3YXJkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRGYWtlT3B0aW9ucyhlKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0IGluc3RhbmNlb2YgZGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRSYW5nZXMoW25ldyB1bCh0KV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldEZha2VPcHRpb25zKGUpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQgaW5zdGFuY2VvZiB6cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSAhIWkgJiYgISFpLmJhY2t3YXJkO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInZpZXctc2VsZWN0aW9uLXNldFRvLXJlcXVpcmVkLXNlY29uZC1wYXJhbWV0ZXI6IFwiICsgXCJzZWxlY3Rpb24uc2V0VG8gcmVxdWlyZXMgdGhlIHNlY29uZCBwYXJhbWV0ZXIgd2hlbiB0aGUgZmlyc3QgcGFyYW1ldGVyIGlzIGEgbm9kZS5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUgPT0gXCJpblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB1bC5fY3JlYXRlSW4odClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUgPT0gXCJvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB1bC5fY3JlYXRlT24odClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gbmV3IHVsKGRsLl9jcmVhdGVBdCh0LCBlKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UmFuZ2VzKFtvXSwgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0RmFrZU9wdGlvbnMoaSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoanModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRSYW5nZXModCwgZSAmJiBlLmJhY2t3YXJkKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRGYWtlT3B0aW9ucyhlKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlldy1zZWxlY3Rpb24tc2V0VG8tbm90LXNlbGVjdGFibGU6IENhbm5vdCBzZXQgc2VsZWN0aW9uIHRvIGdpdmVuIHBsYWNlLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiY2hhbmdlXCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldEZvY3VzKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFuY2hvciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ2aWV3LXNlbGVjdGlvbi1zZXRGb2N1cy1uby1yYW5nZXM6IENhbm5vdCBzZXQgc2VsZWN0aW9uIGZvY3VzIGlmIHRoZXJlIGFyZSBubyByYW5nZXMgaW4gc2VsZWN0aW9uLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGRsLl9jcmVhdGVBdCh0LCBlKTtcclxuICAgICAgICAgICAgICAgIGlmIChpLmNvbXBhcmVXaXRoKHRoaXMuZm9jdXMpID09IFwic2FtZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5hbmNob3I7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZXMucG9wKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaS5jb21wYXJlV2l0aChuKSA9PSBcImJlZm9yZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkUmFuZ2UobmV3IHVsKGksIG4pLCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRSYW5nZShuZXcgdWwobiwgaSkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJjaGFuZ2VcIilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXModCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPT0gXCJzZWxlY3Rpb25cIiB8fCB0ID09IFwidmlldzpzZWxlY3Rpb25cIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2V0UmFuZ2VzKHQsIGUgPSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgdCA9IEFycmF5LmZyb20odCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkUmFuZ2UoZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RSYW5nZUJhY2t3YXJkID0gISFlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9zZXRGYWtlT3B0aW9ucyh0ID0ge30pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzRmFrZSA9ICEhdC5mYWtlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmFrZVNlbGVjdGlvbkxhYmVsID0gdC5mYWtlID8gdC5sYWJlbCB8fCBcIlwiIDogXCJcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfYWRkUmFuZ2UodCwgZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoISh0IGluc3RhbmNlb2YgdWwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInZpZXctc2VsZWN0aW9uLWFkZC1yYW5nZS1ub3QtcmFuZ2U6IFwiICsgXCJTZWxlY3Rpb24gcmFuZ2Ugc2V0IHRvIGFuIG9iamVjdCB0aGF0IGlzIG5vdCBhbiBpbnN0YW5jZSBvZiB2aWV3LlJhbmdlXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wdXNoUmFuZ2UodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9sYXN0UmFuZ2VCYWNrd2FyZCA9ICEhZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcHVzaFJhbmdlKHQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLl9yYW5nZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5pc0ludGVyc2VjdGluZyhlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlldy1zZWxlY3Rpb24tcmFuZ2UtaW50ZXJzZWN0czogVHJ5aW5nIHRvIGFkZCBhIHJhbmdlIHRoYXQgaW50ZXJzZWN0cyB3aXRoIGFub3RoZXIgcmFuZ2UgZnJvbSBzZWxlY3Rpb24uXCIsIHRoaXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZGVkUmFuZ2U6IHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnRlcnNlY3RpbmdSYW5nZTogZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX3Jhbmdlcy5wdXNoKG5ldyB1bCh0LnN0YXJ0LCB0LmVuZCkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKGdsLCBkcyk7XHJcblxyXG4gICAgICAgIGNsYXNzIG1sIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCA9IG51bGwsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbiA9IG5ldyBnbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbi5kZWxlZ2F0ZShcImNoYW5nZVwiKS50byh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbi5zZXRUbyh0LCBlLCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgaXNGYWtlKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5pc0Zha2VcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGZha2VTZWxlY3Rpb25MYWJlbCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uZmFrZVNlbGVjdGlvbkxhYmVsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBhbmNob3IoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmFuY2hvclxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgZm9jdXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmZvY3VzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBpc0NvbGxhcHNlZCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uaXNDb2xsYXBzZWRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHJhbmdlQ291bnQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLnJhbmdlQ291bnRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGlzQmFja3dhcmQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmlzQmFja3dhcmRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGVkaXRhYmxlRWxlbWVudCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uZWRpdGFibGVFbGVtZW50XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBfcmFuZ2VzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5fcmFuZ2VzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICogZ2V0UmFuZ2VzKCkge1xyXG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuX3NlbGVjdGlvbi5nZXRSYW5nZXMoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRGaXJzdFJhbmdlKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5nZXRGaXJzdFJhbmdlKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0TGFzdFJhbmdlKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5nZXRMYXN0UmFuZ2UoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRGaXJzdFBvc2l0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5nZXRGaXJzdFBvc2l0aW9uKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0TGFzdFBvc2l0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5nZXRMYXN0UG9zaXRpb24oKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRTZWxlY3RlZEVsZW1lbnQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmdldFNlbGVjdGVkRWxlbWVudCgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzRXF1YWwodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5pc0VxdWFsKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzU2ltaWxhcih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmlzU2ltaWxhcih0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpcyh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PSBcInNlbGVjdGlvblwiIHx8IHQgPT0gXCJkb2N1bWVudFNlbGVjdGlvblwiIHx8IHQgPT0gXCJ2aWV3OnNlbGVjdGlvblwiIHx8IHQgPT0gXCJ2aWV3OmRvY3VtZW50U2VsZWN0aW9uXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3NldFRvKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbi5zZXRUbyh0LCBlLCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2V0Rm9jdXModCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0aW9uLnNldEZvY3VzKHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKG1sLCBkcyk7XHJcblxyXG4gICAgICAgIGNsYXNzIHBsIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb24gPSBuZXcgbWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3RzID0gbmV3IHlzKHtpZFByb3BlcnR5OiBcInJvb3ROYW1lXCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGVzUHJvY2Vzc29yID0gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaXNSZWFkT25seVwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImlzRm9jdXNlZFwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImlzQ29tcG9zaW5nXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Bvc3RGaXhlcnMgPSBuZXcgU2V0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFJvb3QodCA9IFwibWFpblwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yb290cy5nZXQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVnaXN0ZXJQb3N0Rml4ZXIodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcG9zdEZpeGVycy5hZGQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucm9vdHMubWFwKHQgPT4gdC5kZXN0cm95KCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NhbGxQb3N0Rml4ZXJzKHQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHRoaXMuX3Bvc3RGaXhlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGkodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMocGwsIEpjKTtcclxuICAgICAgICBjb25zdCBibCA9IDEwO1xyXG5cclxuICAgICAgICBjbGFzcyB3bCBleHRlbmRzIHpjIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCwgZSwgaSwgbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdldEZpbGxlck9mZnNldCA9IGtsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJpb3JpdHkgPSBibDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Nsb25lc0dyb3VwID0gbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgcHJpb3JpdHkoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJpb3JpdHlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGlkKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lkXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldEVsZW1lbnRzV2l0aFNhbWVJZCgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlkID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcImF0dHJpYnV0ZS1lbGVtZW50LWdldC1lbGVtZW50cy13aXRoLXNhbWUtaWQtbm8taWQ6IFwiICsgXCJDYW5ub3QgZ2V0IGVsZW1lbnRzIHdpdGggdGhlIHNhbWUgaWQgZm9yIGFuIGF0dHJpYnV0ZSBlbGVtZW50IHdpdGhvdXQgaWQuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNldCh0aGlzLl9jbG9uZXNHcm91cClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXModCwgZSA9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0ICYmIHQucmVwbGFjZSgvXnZpZXc6LywgXCJcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA9PSBcImF0dHJpYnV0ZUVsZW1lbnRcIiB8fCBzdXBlci5pcyh0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA9PSBcImF0dHJpYnV0ZUVsZW1lbnRcIiAmJiBlID09IHRoaXMubmFtZSB8fCBzdXBlci5pcyh0LCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc1NpbWlsYXIodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaWQgIT09IG51bGwgfHwgdC5pZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlkID09PSB0LmlkXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VwZXIuaXNTaW1pbGFyKHQpICYmIHRoaXMucHJpb3JpdHkgPT0gdC5wcmlvcml0eVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY2xvbmUodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHN1cGVyLl9jbG9uZSh0KTtcclxuICAgICAgICAgICAgICAgIGUuX3ByaW9yaXR5ID0gdGhpcy5fcHJpb3JpdHk7XHJcbiAgICAgICAgICAgICAgICBlLl9pZCA9IHRoaXMuX2lkO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgd2wuREVGQVVMVF9QUklPUklUWSA9IGJsO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBrbCgpIHtcclxuICAgICAgICAgICAgaWYgKF9sKHRoaXMpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCB0ID0gdGhpcy5wYXJlbnQ7XHJcbiAgICAgICAgICAgIHdoaWxlICh0ICYmIHQuaXMoXCJhdHRyaWJ1dGVFbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoX2wodCkgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHQgPSB0LnBhcmVudFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdCB8fCBfbCh0KSA+IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRDb3VudFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2wodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0LmdldENoaWxkcmVuKCkpLmZpbHRlcih0ID0+ICF0LmlzKFwidWlFbGVtZW50XCIpKS5sZW5ndGhcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHZsIGV4dGVuZHMgemMge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0LCBlLCBpLCBuKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0RmlsbGVyT2Zmc2V0ID0geWxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXModCwgZSA9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnJlcGxhY2UoL152aWV3Oi8sIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPT0gXCJlbXB0eUVsZW1lbnRcIiB8fCBzdXBlci5pcyh0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA9PSBcImVtcHR5RWxlbWVudFwiICYmIGUgPT0gdGhpcy5uYW1lIHx8IHN1cGVyLmlzKHQsIGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9pbnNlcnRDaGlsZCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSAmJiAoZSBpbnN0YW5jZW9mIHpzIHx8IEFycmF5LmZyb20oZSkubGVuZ3RoID4gMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlldy1lbXB0eWVsZW1lbnQtY2Fubm90LWFkZDogQ2Fubm90IGFkZCBjaGlsZCBub2RlcyB0byBFbXB0eUVsZW1lbnQgaW5zdGFuY2UuXCIsIFt0aGlzLCBlXSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geWwoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB4bCA9IG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICBjb25zdCBDbCA9IHtcclxuICAgICAgICAgICAgaXNNYWM6IFRsKHhsKSxcclxuICAgICAgICAgICAgaXNFZGdlOiBQbCh4bCksXHJcbiAgICAgICAgICAgIGlzR2Vja286IFNsKHhsKSxcclxuICAgICAgICAgICAgaXNTYWZhcmk6IEVsKHhsKSxcclxuICAgICAgICAgICAgaXNBbmRyb2lkOiBSbCh4bCksXHJcbiAgICAgICAgICAgIGZlYXR1cmVzOiB7aXNSZWdFeHBVbmljb2RlUHJvcGVydHlTdXBwb3J0ZWQ6IE9sKCl9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2YXIgQWwgPSBDbDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVGwodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdC5pbmRleE9mKFwibWFjaW50b3NoXCIpID4gLTFcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFBsKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICEhdC5tYXRjaCgvZWRnZVxcLyhcXGQrLj9cXGQqKS8pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBTbCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIXQubWF0Y2goL2dlY2tvXFwvXFxkKy8pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBFbCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0LmluZGV4T2YoXCIgYXBwbGV3ZWJraXQvXCIpID4gLTEgJiYgdC5pbmRleE9mKFwiY2hyb21lXCIpID09PSAtMVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gUmwodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdC5pbmRleE9mKFwiYW5kcm9pZFwiKSA+IC0xXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBPbCgpIHtcclxuICAgICAgICAgICAgbGV0IHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHQgPSBcIsSHXCIuc2VhcmNoKG5ldyBSZWdFeHAoXCJbXFxcXHB7TH1dXCIsIFwidVwiKSkgPT09IDBcclxuICAgICAgICAgICAgfSBjYXRjaCAodCkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBJbCA9IHtcIuKMmFwiOiBcImN0cmxcIiwgXCLih6dcIjogXCJzaGlmdFwiLCBcIuKMpVwiOiBcImFsdFwifTtcclxuICAgICAgICBjb25zdCBWbCA9IHtjdHJsOiBcIuKMmFwiLCBzaGlmdDogXCLih6dcIiwgYWx0OiBcIuKMpVwifTtcclxuICAgICAgICBjb25zdCBObCA9IExsKCk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE1sKHQpIHtcclxuICAgICAgICAgICAgbGV0IGU7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdCA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBlID0gTmxbdC50b0xvd2VyQ2FzZSgpXTtcclxuICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJrZXlib2FyZC11bmtub3duLWtleTogVW5rbm93biBrZXkgbmFtZS5cIiwgbnVsbCwge2tleTogdH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlID0gdC5rZXlDb2RlICsgKHQuYWx0S2V5ID8gTmwuYWx0IDogMCkgKyAodC5jdHJsS2V5ID8gTmwuY3RybCA6IDApICsgKHQuc2hpZnRLZXkgPyBObC5zaGlmdCA6IDApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEJsKHQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0ID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHQgPSBGbCh0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0Lm1hcCh0ID0+IHR5cGVvZiB0ID09IFwic3RyaW5nXCIgPyBNbCh0KSA6IHQpLnJlZHVjZSgodCwgZSkgPT4gZSArIHQsIDApXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB6bCh0KSB7XHJcbiAgICAgICAgICAgIGlmICghQWwuaXNNYWMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIEZsKHQpLm1hcCh0ID0+IFZsW3QudG9Mb3dlckNhc2UoKV0gfHwgdCkucmVkdWNlKCh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5zbGljZSgtMSkgaW4gSWwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCArIGVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgKyBcIitcIiArIGVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIExsKCkge1xyXG4gICAgICAgICAgICBjb25zdCB0ID0ge1xyXG4gICAgICAgICAgICAgICAgYXJyb3dsZWZ0OiAzNyxcclxuICAgICAgICAgICAgICAgIGFycm93dXA6IDM4LFxyXG4gICAgICAgICAgICAgICAgYXJyb3dyaWdodDogMzksXHJcbiAgICAgICAgICAgICAgICBhcnJvd2Rvd246IDQwLFxyXG4gICAgICAgICAgICAgICAgYmFja3NwYWNlOiA4LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiA0NixcclxuICAgICAgICAgICAgICAgIGVudGVyOiAxMyxcclxuICAgICAgICAgICAgICAgIHNwYWNlOiAzMixcclxuICAgICAgICAgICAgICAgIGVzYzogMjcsXHJcbiAgICAgICAgICAgICAgICB0YWI6IDksXHJcbiAgICAgICAgICAgICAgICBjdHJsOiAxMTE0MTEyLFxyXG4gICAgICAgICAgICAgICAgY21kOiAxMTE0MTEyLFxyXG4gICAgICAgICAgICAgICAgc2hpZnQ6IDIyMjgyMjQsXHJcbiAgICAgICAgICAgICAgICBhbHQ6IDQ0NTY0NDhcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgZm9yIChsZXQgZSA9IDY1OyBlIDw9IDkwOyBlKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGUpO1xyXG4gICAgICAgICAgICAgICAgdFtpLnRvTG93ZXJDYXNlKCldID0gZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IGUgPSA0ODsgZSA8PSA1NzsgZSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0W2UgLSA0OF0gPSBlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgZSA9IDExMjsgZSA8PSAxMjM7IGUrKykge1xyXG4gICAgICAgICAgICAgICAgdFtcImZcIiArIChlIC0gMTExKV0gPSBlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEZsKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQuc3BsaXQoL1xccypcXCtcXHMqLylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIERsIGV4dGVuZHMgemMge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0LCBlLCBpLCBuKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ2V0RmlsbGVyT2Zmc2V0ID0gSGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXModCwgZSA9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnJlcGxhY2UoL152aWV3Oi8sIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPT0gXCJ1aUVsZW1lbnRcIiB8fCBzdXBlci5pcyh0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaSA9PSBcInVpRWxlbWVudFwiICYmIGUgPT0gdGhpcy5uYW1lIHx8IHN1cGVyLmlzKHQsIGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9pbnNlcnRDaGlsZCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSAmJiAoZSBpbnN0YW5jZW9mIHpzIHx8IEFycmF5LmZyb20oZSkubGVuZ3RoID4gMCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlldy11aWVsZW1lbnQtY2Fubm90LWFkZDogQ2Fubm90IGFkZCBjaGlsZCBub2RlcyB0byBVSUVsZW1lbnQgaW5zdGFuY2UuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbmRlcih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50b0RvbUVsZW1lbnQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9Eb21FbGVtZW50KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmNyZWF0ZUVsZW1lbnQodGhpcy5uYW1lKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLmdldEF0dHJpYnV0ZUtleXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKHQsIHRoaXMuZ2V0QXR0cmlidXRlKHQpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gamwodCkge1xyXG4gICAgICAgICAgICB0LmRvY3VtZW50Lm9uKFwia2V5ZG93blwiLCAoZSwgaSkgPT4gV2woZSwgaSwgdC5kb21Db252ZXJ0ZXIpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSGwoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBXbCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gTmwuYXJyb3dyaWdodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IGUuZG9tVGFyZ2V0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5yYW5nZUNvdW50ID09IDEgJiYgdC5nZXRSYW5nZUF0KDApLmNvbGxhcHNlZDtcclxuICAgICAgICAgICAgICAgIGlmIChuIHx8IGUuc2hpZnRLZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5mb2N1c05vZGU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IHQuZm9jdXNPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IGkuZG9tUG9zaXRpb25Ub1ZpZXcoZSwgbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IHIuZ2V0TGFzdE1hdGNoaW5nUG9zaXRpb24odCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lml0ZW0uaXMoXCJ1aUVsZW1lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuaXRlbS5pcyhcInVpRWxlbWVudFwiKSB8fCB0Lml0ZW0uaXMoXCJhdHRyaWJ1dGVFbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBpLnZpZXdQb3NpdGlvblRvRG9tKGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5jb2xsYXBzZShlLnBhcmVudCwgZS5vZmZzZXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmV4dGVuZChlLnBhcmVudCwgZS5vZmZzZXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHFsIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudCA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnNlcnRDaGlsZCgwLCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbltTeW1ib2wuaXRlcmF0b3JdKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGNoaWxkQ291bnQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW4ubGVuZ3RoXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBpc0VtcHR5KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hpbGRDb3VudCA9PT0gMFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgcm9vdCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBwYXJlbnQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpcyh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PSBcImRvY3VtZW50RnJhZ21lbnRcIiB8fCB0ID09IFwidmlldzpkb2N1bWVudEZyYWdtZW50XCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2FwcGVuZENoaWxkKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pbnNlcnRDaGlsZCh0aGlzLmNoaWxkQ291bnQsIHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENoaWxkKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlblt0XVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRDaGlsZEluZGV4KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5pbmRleE9mKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENoaWxkcmVuKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuW1N5bWJvbC5pdGVyYXRvcl0oKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfaW5zZXJ0Q2hpbGQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZUNoYW5nZShcImNoaWxkcmVuXCIsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IFVsKHRoaXMuZG9jdW1lbnQsIGUpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5wYXJlbnQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5fcmVtb3ZlKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wYXJlbnQgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLnNwbGljZSh0LCAwLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICB0Kys7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVtb3ZlQ2hpbGRyZW4odCwgZSA9IDEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmVDaGFuZ2UoXCJjaGlsZHJlblwiLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSB0OyBpIDwgdCArIGU7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuW2ldLnBhcmVudCA9IG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5zcGxpY2UodCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2ZpcmVDaGFuZ2UodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiY2hhbmdlOlwiICsgdCwgZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMocWwsIGRzKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVWwodCwgZSkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGUgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtuZXcgTHModCwgZSldXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFqcyhlKSkge1xyXG4gICAgICAgICAgICAgICAgZSA9IFtlXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKGUpLm1hcChlID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMcyh0LCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBGcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTHModCwgZS5kYXRhKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzICRsIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudCA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jbG9uZUdyb3VwcyA9IG5ldyBNYXBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0U2VsZWN0aW9uKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQuc2VsZWN0aW9uLl9zZXRUbyh0LCBlLCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRTZWxlY3Rpb25Gb2N1cyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50LnNlbGVjdGlvbi5fc2V0Rm9jdXModCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlVGV4dCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExzKHRoaXMuZG9jdW1lbnQsIHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZUF0dHJpYnV0ZUVsZW1lbnQodCwgZSwgaSA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IHdsKHRoaXMuZG9jdW1lbnQsIHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkucHJpb3JpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBuLl9wcmlvcml0eSA9IGkucHJpb3JpdHlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpLmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5faWQgPSBpLmlkXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVDb250YWluZXJFbGVtZW50KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgamModGhpcy5kb2N1bWVudCwgdCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlRWRpdGFibGVFbGVtZW50KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgc2wodGhpcy5kb2N1bWVudCwgdCwgZSk7XHJcbiAgICAgICAgICAgICAgICBpLl9kb2N1bWVudCA9IHRoaXMuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVFbXB0eUVsZW1lbnQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB2bCh0aGlzLmRvY3VtZW50LCB0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVVSUVsZW1lbnQodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBEbCh0aGlzLmRvY3VtZW50LCB0LCBlKTtcclxuICAgICAgICAgICAgICAgIGlmIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5yZW5kZXIgPSBpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRBdHRyaWJ1dGUodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgaS5fc2V0QXR0cmlidXRlKHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbW92ZUF0dHJpYnV0ZSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBlLl9yZW1vdmVBdHRyaWJ1dGUodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWRkQ2xhc3ModCwgZSkge1xyXG4gICAgICAgICAgICAgICAgZS5fYWRkQ2xhc3ModClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3ModCwgZSkge1xyXG4gICAgICAgICAgICAgICAgZS5fcmVtb3ZlQ2xhc3ModClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0U3R5bGUodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKE4odCkgJiYgaSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IGVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkuX3NldFN0eWxlKHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbW92ZVN0eWxlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGUuX3JlbW92ZVN0eWxlKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldEN1c3RvbVByb3BlcnR5KHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGkuX3NldEN1c3RvbVByb3BlcnR5KHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbW92ZUN1c3RvbVByb3BlcnR5KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlLl9yZW1vdmVDdXN0b21Qcm9wZXJ0eSh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBicmVha0F0dHJpYnV0ZXModCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBkbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9icmVha0F0dHJpYnV0ZXModClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JyZWFrQXR0cmlidXRlc1JhbmdlKHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJyZWFrQ29udGFpbmVyKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGlmICghZS5pcyhcImNvbnRhaW5lckVsZW1lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlldy13cml0ZXItYnJlYWstbm9uLWNvbnRhaW5lci1lbGVtZW50OiBUcnlpbmcgdG8gYnJlYWsgYW4gZWxlbWVudCB3aGljaCBpcyBub3QgYSBjb250YWluZXIgZWxlbWVudC5cIiwgdGhpcy5kb2N1bWVudClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghZS5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlldy13cml0ZXItYnJlYWstcm9vdDogVHJ5aW5nIHRvIGJyZWFrIHJvb3QgZWxlbWVudC5cIiwgdGhpcy5kb2N1bWVudClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0LmlzQXRTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkbC5fY3JlYXRlQmVmb3JlKGUpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0LmlzQXRFbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5fY2xvbmUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0KGRsLl9jcmVhdGVBZnRlcihlKSwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyB1bCh0LCBkbC5fY3JlYXRlQXQoZSwgXCJlbmRcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgZGwoaSwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb3ZlKG4sIG8pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGwuX2NyZWF0ZUFmdGVyKGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1lcmdlQXR0cmlidXRlcyh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaS5pcyhcInRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGkuaXMoXCJhdHRyaWJ1dGVFbGVtZW50XCIpICYmIGkuY2hpbGRDb3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBpLnBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gaS5pbmRleDtcclxuICAgICAgICAgICAgICAgICAgICBpLl9yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVGcm9tQ2xvbmVkRWxlbWVudHNHcm91cChpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tZXJnZUF0dHJpYnV0ZXMobmV3IGRsKHQsIGUpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGkuZ2V0Q2hpbGQoZSAtIDEpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGkuZ2V0Q2hpbGQoZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW4gfHwgIW8pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG4uaXMoXCJ0ZXh0XCIpICYmIG8uaXMoXCJ0ZXh0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFhsKG4sIG8pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG4uaXMoXCJhdHRyaWJ1dGVFbGVtZW50XCIpICYmIG8uaXMoXCJhdHRyaWJ1dGVFbGVtZW50XCIpICYmIG4uaXNTaW1pbGFyKG8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IG4uY2hpbGRDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICBuLl9hcHBlbmRDaGlsZChvLmdldENoaWxkcmVuKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG8uX3JlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUZyb21DbG9uZWRFbGVtZW50c0dyb3VwKG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1lcmdlQXR0cmlidXRlcyhuZXcgZGwobiwgdCkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBtZXJnZUNvbnRhaW5lcnModCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubm9kZUJlZm9yZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0Lm5vZGVBZnRlcjtcclxuICAgICAgICAgICAgICAgIGlmICghZSB8fCAhaSB8fCAhZS5pcyhcImNvbnRhaW5lckVsZW1lbnRcIikgfHwgIWkuaXMoXCJjb250YWluZXJFbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInZpZXctd3JpdGVyLW1lcmdlLWNvbnRhaW5lcnMtaW52YWxpZC1wb3NpdGlvbjogXCIgKyBcIkVsZW1lbnQgYmVmb3JlIGFuZCBhZnRlciBnaXZlbiBwb3NpdGlvbiBjYW5ub3QgYmUgbWVyZ2VkLlwiLCB0aGlzLmRvY3VtZW50KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGUuZ2V0Q2hpbGQoZS5jaGlsZENvdW50IC0gMSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gbiBpbnN0YW5jZW9mIExzID8gZGwuX2NyZWF0ZUF0KG4sIFwiZW5kXCIpIDogZGwuX2NyZWF0ZUF0KGUsIFwiZW5kXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlKHVsLl9jcmVhdGVJbihpKSwgZGwuX2NyZWF0ZUF0KGUsIFwiZW5kXCIpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHVsLl9jcmVhdGVPbihpKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbnNlcnQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgZSA9IGpzKGUpID8gWy4uLmVdIDogW2VdO1xyXG4gICAgICAgICAgICAgICAgWmwoZSwgdGhpcy5kb2N1bWVudCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gS2wodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlldy13cml0ZXItaW52YWxpZC1wb3NpdGlvbi1jb250YWluZXJcIiwgdGhpcy5kb2N1bWVudClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9icmVha0F0dHJpYnV0ZXModCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gaS5faW5zZXJ0Q2hpbGQobi5vZmZzZXQsIGUpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRUb0Nsb25lZEVsZW1lbnRzR3JvdXAodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuLmdldFNoaWZ0ZWRCeShvKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB0aGlzLm1lcmdlQXR0cmlidXRlcyhuKTtcclxuICAgICAgICAgICAgICAgIGlmIChvID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB1bChzLCBzKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXMuaXNFcXVhbChuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByLm9mZnNldC0tXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLm1lcmdlQXR0cmlidXRlcyhyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHVsKHMsIHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbW92ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdCBpbnN0YW5jZW9mIHVsID8gdCA6IHVsLl9jcmVhdGVPbih0KTtcclxuICAgICAgICAgICAgICAgIGlkKGUsIHRoaXMuZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHFsKHRoaXMuZG9jdW1lbnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7c3RhcnQ6IGksIGVuZDogbn0gPSB0aGlzLl9icmVha0F0dHJpYnV0ZXNSYW5nZShlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBpLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuLm9mZnNldCAtIGkub2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG8uX3JlbW92ZUNoaWxkcmVuKGkub2Zmc2V0LCByKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlRnJvbUNsb25lZEVsZW1lbnRzR3JvdXAodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSB0aGlzLm1lcmdlQXR0cmlidXRlcyhpKTtcclxuICAgICAgICAgICAgICAgIGUuc3RhcnQgPSBhO1xyXG4gICAgICAgICAgICAgICAgZS5lbmQgPSBhLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHFsKHRoaXMuZG9jdW1lbnQsIHMpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNsZWFyKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlkKHQsIHRoaXMuZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuZ2V0V2Fsa2VyKHtkaXJlY3Rpb246IFwiYmFja3dhcmRcIiwgaWdub3JlRWxlbWVudEVuZDogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gbi5pdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpLmlzKFwiZWxlbWVudFwiKSAmJiBlLmlzU2ltaWxhcihpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gdWwuX2NyZWF0ZU9uKGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghbi5uZXh0UG9zaXRpb24uaXNBZnRlcih0LnN0YXJ0KSAmJiBpLmlzKFwidGV4dFByb3h5XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBpLmdldEFuY2VzdG9ycygpLmZpbmQodCA9PiB0LmlzKFwiZWxlbWVudFwiKSAmJiBlLmlzU2ltaWxhcih0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gdWwuX2NyZWF0ZUluKHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uZW5kLmlzQWZ0ZXIodC5lbmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLmVuZCA9IHQuZW5kXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8uc3RhcnQuaXNCZWZvcmUodC5zdGFydCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uc3RhcnQgPSB0LnN0YXJ0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUobylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1vdmUodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5pc0FmdGVyKHQuZW5kKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLl9icmVha0F0dHJpYnV0ZXMoZSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGUucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuLmNoaWxkQ291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IHRoaXMuX2JyZWFrQXR0cmlidXRlc1JhbmdlKHQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzLnJlbW92ZSh0KTtcclxuICAgICAgICAgICAgICAgICAgICBlLm9mZnNldCArPSBuLmNoaWxkQ291bnQgLSBvXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzLnJlbW92ZSh0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5zZXJ0KGUsIGkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHdyYXAodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEoZSBpbnN0YW5jZW9mIHdsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ2aWV3LXdyaXRlci13cmFwLWludmFsaWQtYXR0cmlidXRlXCIsIHRoaXMuZG9jdW1lbnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZCh0LCB0aGlzLmRvY3VtZW50KTtcclxuICAgICAgICAgICAgICAgIGlmICghdC5pc0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93cmFwUmFuZ2UodCwgZSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSB0LnN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpLnBhcmVudC5pcyhcImVsZW1lbnRcIikgJiYgIUdsKGkucGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gaS5nZXRMYXN0TWF0Y2hpbmdQb3NpdGlvbih0ID0+IHQuaXRlbS5pcyhcInVpRWxlbWVudFwiKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IHRoaXMuX3dyYXBQb3NpdGlvbihpLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4uaXNDb2xsYXBzZWQgJiYgbi5nZXRGaXJzdFBvc2l0aW9uKCkuaXNFcXVhbCh0LnN0YXJ0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGlvbihpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHVsKGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHVud3JhcCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShlIGluc3RhbmNlb2Ygd2wpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInZpZXctd3JpdGVyLXVud3JhcC1pbnZhbGlkLWF0dHJpYnV0ZVwiLCB0aGlzLmRvY3VtZW50KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWQodCwgdGhpcy5kb2N1bWVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5pc0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7c3RhcnQ6IGksIGVuZDogbn0gPSB0aGlzLl9icmVha0F0dHJpYnV0ZXNSYW5nZSh0LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBpLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLl91bndyYXBDaGlsZHJlbihvLCBpLm9mZnNldCwgbi5vZmZzZXQsIGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMubWVyZ2VBdHRyaWJ1dGVzKHIuc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzLmlzRXF1YWwoci5zdGFydCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByLmVuZC5vZmZzZXQtLVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IHRoaXMubWVyZ2VBdHRyaWJ1dGVzKHIuZW5kKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdWwocywgYSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVuYW1lKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgamModGhpcy5kb2N1bWVudCwgdCwgZS5nZXRBdHRyaWJ1dGVzKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnQoZGwuX2NyZWF0ZUFmdGVyKGUpLCBpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubW92ZSh1bC5fY3JlYXRlSW4oZSksIGRsLl9jcmVhdGVBdChpLCAwKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZSh1bC5fY3JlYXRlT24oZSkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2xlYXJDbG9uZWRFbGVtZW50c0dyb3VwKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Nsb25lR3JvdXBzLmRlbGV0ZSh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVQb3NpdGlvbkF0KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkbC5fY3JlYXRlQXQodCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlUG9zaXRpb25BZnRlcih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGwuX2NyZWF0ZUFmdGVyKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZVBvc2l0aW9uQmVmb3JlKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkbC5fY3JlYXRlQmVmb3JlKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZVJhbmdlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdWwodCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlUmFuZ2VPbih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdWwuX2NyZWF0ZU9uKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZVJhbmdlSW4odCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVsLl9jcmVhdGVJbih0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVTZWxlY3Rpb24odCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBnbCh0LCBlLCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfd3JhcENoaWxkcmVuKHQsIGUsIGksIG4pIHtcclxuICAgICAgICAgICAgICAgIGxldCBvID0gZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBbXTtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChvIDwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmdldENoaWxkKG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmlzKFwidGV4dFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gZS5pcyhcImF0dHJpYnV0ZUVsZW1lbnRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IGUuaXMoXCJlbXB0eUVsZW1lbnRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IGUuaXMoXCJ1aUVsZW1lbnRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMgJiYgdGhpcy5fd3JhcEF0dHJpYnV0ZUVsZW1lbnQobiwgZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgci5wdXNoKG5ldyBkbCh0LCBvKSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgfHwgYSB8fCBjIHx8IHMgJiYgSmwobiwgZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IG4uX2Nsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuX3JlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLl9hcHBlbmRDaGlsZChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5faW5zZXJ0Q2hpbGQobywgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FkZFRvQ2xvbmVkRWxlbWVudHNHcm91cChpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgci5wdXNoKG5ldyBkbCh0LCBvKSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fd3JhcENoaWxkcmVuKGUsIDAsIGUuY2hpbGRDb3VudCwgbilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbysrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgcyA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHQub2Zmc2V0IC09IHM7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQub2Zmc2V0ID09IGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMubWVyZ2VBdHRyaWJ1dGVzKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbi5pc0VxdWFsKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHMrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS0tXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVsLl9jcmVhdGVGcm9tUGFyZW50c0FuZE9mZnNldHModCwgZSwgdCwgaSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3Vud3JhcENoaWxkcmVuKHQsIGUsIGksIG4pIHtcclxuICAgICAgICAgICAgICAgIGxldCBvID0gZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBbXTtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChvIDwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmdldENoaWxkKG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZS5pcyhcImF0dHJpYnV0ZUVsZW1lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5pc1NpbWlsYXIobikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGUuZ2V0Q2hpbGRyZW4oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IGUuY2hpbGRDb3VudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5fcmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuX2luc2VydENoaWxkKG8sIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVGcm9tQ2xvbmVkRWxlbWVudHNHcm91cChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgci5wdXNoKG5ldyBkbCh0LCBvKSwgbmV3IGRsKHQsIG8gKyBzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gKz0gcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSArPSBzIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Vud3JhcEF0dHJpYnV0ZUVsZW1lbnQobiwgZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgci5wdXNoKG5ldyBkbCh0LCBvKSwgbmV3IGRsKHQsIG8gKyAxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8rKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdW53cmFwQ2hpbGRyZW4oZSwgMCwgZS5jaGlsZENvdW50LCBuKTtcclxuICAgICAgICAgICAgICAgICAgICBvKytcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBzID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiByKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5vZmZzZXQgLT0gcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5vZmZzZXQgPT0gZSB8fCB0Lm9mZnNldCA9PSBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLm1lcmdlQXR0cmlidXRlcyh0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW4uaXNFcXVhbCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGktLVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB1bC5fY3JlYXRlRnJvbVBhcmVudHNBbmRPZmZzZXRzKHQsIGUsIHQsIGkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF93cmFwUmFuZ2UodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qge3N0YXJ0OiBpLCBlbmQ6IG59ID0gdGhpcy5fYnJlYWtBdHRyaWJ1dGVzUmFuZ2UodCwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gaS5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gdGhpcy5fd3JhcENoaWxkcmVuKG8sIGkub2Zmc2V0LCBuLm9mZnNldCwgZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gdGhpcy5tZXJnZUF0dHJpYnV0ZXMoci5zdGFydCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXMuaXNFcXVhbChyLnN0YXJ0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHIuZW5kLm9mZnNldC0tXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gdGhpcy5tZXJnZUF0dHJpYnV0ZXMoci5lbmQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB1bChzLCBhKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfd3JhcFBvc2l0aW9uKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlLmlzU2ltaWxhcih0LnBhcmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWWwodC5jbG9uZSgpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQucGFyZW50LmlzKFwidGV4dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQgPSBRbCh0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuY3JlYXRlQXR0cmlidXRlRWxlbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgaS5fcHJpb3JpdHkgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcbiAgICAgICAgICAgICAgICBpLmlzU2ltaWxhciA9ICgpID0+IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdC5wYXJlbnQuX2luc2VydENoaWxkKHQub2Zmc2V0LCBpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgdWwodCwgdC5nZXRTaGlmdGVkQnkoMSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy53cmFwKG4sIGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG5ldyBkbChpLnBhcmVudCwgaS5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICBpLl9yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBvLm5vZGVCZWZvcmU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gby5ub2RlQWZ0ZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAociBpbnN0YW5jZW9mIExzICYmIHMgaW5zdGFuY2VvZiBMcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBYbChyLCBzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFlsKG8pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF93cmFwQXR0cmlidXRlRWxlbWVudCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW5kKHQsIGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodC5uYW1lICE9PSBlLm5hbWUgfHwgdC5wcmlvcml0eSAhPT0gZS5wcmlvcml0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHQuZ2V0QXR0cmlidXRlS2V5cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IFwiY2xhc3NcIiB8fCBpID09PSBcInN0eWxlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuaGFzQXR0cmlidXRlKGkpICYmIGUuZ2V0QXR0cmlidXRlKGkpICE9PSB0LmdldEF0dHJpYnV0ZShpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdC5nZXRTdHlsZU5hbWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5oYXNTdHlsZShpKSAmJiBlLmdldFN0eWxlKGkpICE9PSB0LmdldFN0eWxlKGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0LmdldEF0dHJpYnV0ZUtleXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBcImNsYXNzXCIgfHwgaSA9PT0gXCJzdHlsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZS5oYXNBdHRyaWJ1dGUoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoaSwgdC5nZXRBdHRyaWJ1dGUoaSksIGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHQuZ2V0U3R5bGVOYW1lcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlLmhhc1N0eWxlKGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3R5bGUoaSwgdC5nZXRTdHlsZShpKSwgZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdC5nZXRDbGFzc05hbWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWUuaGFzQ2xhc3MoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRDbGFzcyhpLCBlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF91bndyYXBBdHRyaWJ1dGVFbGVtZW50KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbmQodCwgZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0Lm5hbWUgIT09IGUubmFtZSB8fCB0LnByaW9yaXR5ICE9PSBlLnByaW9yaXR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdC5nZXRBdHRyaWJ1dGVLZXlzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gXCJjbGFzc1wiIHx8IGkgPT09IFwic3R5bGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWUuaGFzQXR0cmlidXRlKGkpIHx8IGUuZ2V0QXR0cmlidXRlKGkpICE9PSB0LmdldEF0dHJpYnV0ZShpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUuaGFzQ2xhc3MoLi4udC5nZXRDbGFzc05hbWVzKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdC5nZXRTdHlsZU5hbWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWUuaGFzU3R5bGUoaSkgfHwgZS5nZXRTdHlsZShpKSAhPT0gdC5nZXRTdHlsZShpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdC5nZXRBdHRyaWJ1dGVLZXlzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gXCJjbGFzc1wiIHx8IGkgPT09IFwic3R5bGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShpLCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVDbGFzcyhBcnJheS5mcm9tKHQuZ2V0Q2xhc3NOYW1lcygpKSwgZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZVN0eWxlKEFycmF5LmZyb20odC5nZXRTdHlsZU5hbWVzKCkpLCBlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9icmVha0F0dHJpYnV0ZXNSYW5nZSh0LCBlID0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuZW5kO1xyXG4gICAgICAgICAgICAgICAgaWQodCwgdGhpcy5kb2N1bWVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5pc0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9icmVha0F0dHJpYnV0ZXModC5zdGFydCwgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB1bChpLCBpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMuX2JyZWFrQXR0cmlidXRlcyhuLCBlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBvLnBhcmVudC5jaGlsZENvdW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMuX2JyZWFrQXR0cmlidXRlcyhpLCBlKTtcclxuICAgICAgICAgICAgICAgIG8ub2Zmc2V0ICs9IG8ucGFyZW50LmNoaWxkQ291bnQgLSByO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB1bChzLCBvKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfYnJlYWtBdHRyaWJ1dGVzKHQsIGUgPSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQub2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKHQucGFyZW50LmlzKFwiZW1wdHlFbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInZpZXctd3JpdGVyLWNhbm5vdC1icmVhay1lbXB0eS1lbGVtZW50XCIsIHRoaXMuZG9jdW1lbnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodC5wYXJlbnQuaXMoXCJ1aUVsZW1lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlldy13cml0ZXItY2Fubm90LWJyZWFrLXVpLWVsZW1lbnRcIiwgdGhpcy5kb2N1bWVudClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghZSAmJiBuLmlzKFwidGV4dFwiKSAmJiBlZChuLnBhcmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5jbG9uZSgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZWQobikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5jbG9uZSgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobi5pcyhcInRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYnJlYWtBdHRyaWJ1dGVzKFFsKHQpLCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG4uY2hpbGRDb3VudDtcclxuICAgICAgICAgICAgICAgIGlmIChpID09IG8pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gbmV3IGRsKG4ucGFyZW50LCBuLmluZGV4ICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JyZWFrQXR0cmlidXRlcyh0LCBlKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gbmV3IGRsKG4ucGFyZW50LCBuLmluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JyZWFrQXR0cmlidXRlcyh0LCBlKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBuLmluZGV4ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IG4uX2Nsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ucGFyZW50Ll9pbnNlcnRDaGlsZCh0LCBvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkVG9DbG9uZWRFbGVtZW50c0dyb3VwKG8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gbi5jaGlsZENvdW50IC0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG4uX3JlbW92ZUNoaWxkcmVuKGksIHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvLl9hcHBlbmRDaGlsZChzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IG5ldyBkbChuLnBhcmVudCwgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9icmVha0F0dHJpYnV0ZXMoYSwgZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9hZGRUb0Nsb25lZEVsZW1lbnRzR3JvdXAodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0LnJvb3QuaXMoXCJyb290RWxlbWVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQuaXMoXCJlbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHQuZ2V0Q2hpbGRyZW4oKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRUb0Nsb25lZEVsZW1lbnRzR3JvdXAoZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5pZDtcclxuICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSB0aGlzLl9jbG9uZUdyb3Vwcy5nZXQoZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpID0gbmV3IFNldDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jbG9uZUdyb3Vwcy5zZXQoZSwgaSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkuYWRkKHQpO1xyXG4gICAgICAgICAgICAgICAgdC5fY2xvbmVzR3JvdXAgPSBpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZW1vdmVGcm9tQ2xvbmVkRWxlbWVudHNHcm91cCh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5pcyhcImVsZW1lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdC5nZXRDaGlsZHJlbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUZyb21DbG9uZWRFbGVtZW50c0dyb3VwKGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuaWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9jbG9uZUdyb3Vwcy5nZXQoZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkuZGVsZXRlKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEdsKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odC5nZXRDaGlsZHJlbigpKS5zb21lKHQgPT4gIXQuaXMoXCJ1aUVsZW1lbnRcIikpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBLbCh0KSB7XHJcbiAgICAgICAgICAgIGxldCBlID0gdC5wYXJlbnQ7XHJcbiAgICAgICAgICAgIHdoaWxlICghZWQoZSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGUgPSBlLnBhcmVudFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBKbCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGlmICh0LnByaW9yaXR5IDwgZS5wcmlvcml0eSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0LnByaW9yaXR5ID4gZS5wcmlvcml0eSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHQuZ2V0SWRlbnRpdHkoKSA8IGUuZ2V0SWRlbnRpdHkoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWWwodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5ub2RlQmVmb3JlO1xyXG4gICAgICAgICAgICBpZiAoZSAmJiBlLmlzKFwidGV4dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBkbChlLCBlLmRhdGEubGVuZ3RoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0Lm5vZGVBZnRlcjtcclxuICAgICAgICAgICAgaWYgKGkgJiYgaS5pcyhcInRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgZGwoaSwgMClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gUWwodCkge1xyXG4gICAgICAgICAgICBpZiAodC5vZmZzZXQgPT0gdC5wYXJlbnQuZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgZGwodC5wYXJlbnQucGFyZW50LCB0LnBhcmVudC5pbmRleCArIDEpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQub2Zmc2V0ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGRsKHQucGFyZW50LnBhcmVudCwgdC5wYXJlbnQuaW5kZXgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZSA9IHQucGFyZW50LmRhdGEuc2xpY2UodC5vZmZzZXQpO1xyXG4gICAgICAgICAgICB0LnBhcmVudC5fZGF0YSA9IHQucGFyZW50LmRhdGEuc2xpY2UoMCwgdC5vZmZzZXQpO1xyXG4gICAgICAgICAgICB0LnBhcmVudC5wYXJlbnQuX2luc2VydENoaWxkKHQucGFyZW50LmluZGV4ICsgMSwgbmV3IExzKHQucm9vdC5kb2N1bWVudCwgZSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGRsKHQucGFyZW50LnBhcmVudCwgdC5wYXJlbnQuaW5kZXggKyAxKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWGwodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5kYXRhLmxlbmd0aDtcclxuICAgICAgICAgICAgdC5fZGF0YSArPSBlLmRhdGE7XHJcbiAgICAgICAgICAgIGUuX3JlbW92ZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IGRsKHQsIGkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBabCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRkLnNvbWUodCA9PiBpIGluc3RhbmNlb2YgdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlldy13cml0ZXItaW5zZXJ0LWludmFsaWQtbm9kZVwiLCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFpLmlzKFwidGV4dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFpsKGkuZ2V0Q2hpbGRyZW4oKSwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgdGQgPSBbTHMsIHdsLCBqYywgdmwsIERsXTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZWQodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdCAmJiAodC5pcyhcImNvbnRhaW5lckVsZW1lbnRcIikgfHwgdC5pcyhcImRvY3VtZW50RnJhZ21lbnRcIikpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBpZCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBLbCh0LnN0YXJ0KTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IEtsKHQuZW5kKTtcclxuICAgICAgICAgICAgaWYgKCFpIHx8ICFuIHx8IGkgIT09IG4pIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ2aWV3LXdyaXRlci1pbnZhbGlkLXJhbmdlLWNvbnRhaW5lclwiLCBlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBuZCh0LCBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0LmlkID09PSBudWxsICYmIGUuaWQgPT09IG51bGxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9kKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh0KSA9PSBcIltvYmplY3QgVGV4dF1cIlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgcmQgPSB0ID0+IHQuY3JlYXRlVGV4dE5vZGUoXCLCoFwiKTtcclxuICAgICAgICBjb25zdCBzZCA9IHQgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5jcmVhdGVFbGVtZW50KFwiYnJcIik7XHJcbiAgICAgICAgICAgIGUuZGF0YXNldC5ja2VGaWxsZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgYWQgPSA3O1xyXG4gICAgICAgIGNvbnN0IGNkID0gKCgpID0+IHtcclxuICAgICAgICAgICAgbGV0IHQgPSBcIlwiO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IGFkOyBlKyspIHtcclxuICAgICAgICAgICAgICAgIHQgKz0gXCLigItcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgfSkoKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbGQodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gb2QodCkgJiYgdC5kYXRhLnN1YnN0cigwLCBhZCkgPT09IGNkXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkZCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0LmRhdGEubGVuZ3RoID09IGFkICYmIGxkKHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB1ZCh0KSB7XHJcbiAgICAgICAgICAgIGlmIChsZCh0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuZGF0YS5zbGljZShhZClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0LmRhdGFcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaGQodCkge1xyXG4gICAgICAgICAgICB0LmRvY3VtZW50Lm9uKFwia2V5ZG93blwiLCBmZClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGZkKHQsIGUpIHtcclxuICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PSBObC5hcnJvd2xlZnQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLmRvbVRhcmdldC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQucmFuZ2VDb3VudCA9PSAxICYmIHQuZ2V0UmFuZ2VBdCgwKS5jb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5nZXRSYW5nZUF0KDApLnN0YXJ0Q29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LmdldFJhbmdlQXQoMCkuc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxkKGUpICYmIGkgPD0gYWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5jb2xsYXBzZShlLCAwKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ2QodCwgZSwgaSwgbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgIGkgPSBpIHx8IGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PT0gZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodCkpIHtcclxuICAgICAgICAgICAgICAgIHQgPSBBcnJheS5mcm9tKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGUpKSB7XHJcbiAgICAgICAgICAgICAgICBlID0gQXJyYXkuZnJvbShlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBtZCh0LCBlLCBpKTtcclxuICAgICAgICAgICAgcmV0dXJuIG4gPyBrZChvLCBlLmxlbmd0aCkgOiB3ZChlLCBvKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbWQodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBjb25zdCBuID0gcGQodCwgZSwgaSk7XHJcbiAgICAgICAgICAgIGlmIChuID09PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtmaXJzdEluZGV4OiAtMSwgbGFzdEluZGV4T2xkOiAtMSwgbGFzdEluZGV4TmV3OiAtMX1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvID0gYmQodCwgbik7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBiZChlLCBuKTtcclxuICAgICAgICAgICAgY29uc3QgcyA9IHBkKG8sIHIsIGkpO1xyXG4gICAgICAgICAgICBjb25zdCBhID0gdC5sZW5ndGggLSBzO1xyXG4gICAgICAgICAgICBjb25zdCBjID0gZS5sZW5ndGggLSBzO1xyXG4gICAgICAgICAgICByZXR1cm4ge2ZpcnN0SW5kZXg6IG4sIGxhc3RJbmRleE9sZDogYSwgbGFzdEluZGV4TmV3OiBjfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcGQodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBuID0gMDsgbiA8IE1hdGgubWF4KHQubGVuZ3RoLCBlLmxlbmd0aCk7IG4rKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRbbl0gPT09IHVuZGVmaW5lZCB8fCBlW25dID09PSB1bmRlZmluZWQgfHwgIWkodFtuXSwgZVtuXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAtMVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYmQodCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdC5zbGljZShlKS5yZXZlcnNlKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdkKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCB7Zmlyc3RJbmRleDogbiwgbGFzdEluZGV4T2xkOiBvLCBsYXN0SW5kZXhOZXc6IHJ9ID0gZTtcclxuICAgICAgICAgICAgaWYgKHIgLSBuID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaS5wdXNoKHtpbmRleDogbiwgdHlwZTogXCJpbnNlcnRcIiwgdmFsdWVzOiB0LnNsaWNlKG4sIHIpfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobyAtIG4gPiAwKSB7XHJcbiAgICAgICAgICAgICAgICBpLnB1c2goe2luZGV4OiBuICsgKHIgLSBuKSwgdHlwZTogXCJkZWxldGVcIiwgaG93TWFueTogbyAtIG59KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBrZCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHtmaXJzdEluZGV4OiBpLCBsYXN0SW5kZXhPbGQ6IG4sIGxhc3RJbmRleE5ldzogb30gPSB0O1xyXG4gICAgICAgICAgICBpZiAoaSA9PT0gLTEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheShlKS5maWxsKFwiZXF1YWxcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgciA9IFtdO1xyXG4gICAgICAgICAgICBpZiAoaSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHIgPSByLmNvbmNhdChBcnJheShpKS5maWxsKFwiZXF1YWxcIikpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG8gLSBpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgciA9IHIuY29uY2F0KEFycmF5KG8gLSBpKS5maWxsKFwiaW5zZXJ0XCIpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChuIC0gaSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHIgPSByLmNvbmNhdChBcnJheShuIC0gaSkuZmlsbChcImRlbGV0ZVwiKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobyA8IGUpIHtcclxuICAgICAgICAgICAgICAgIHIgPSByLmNvbmNhdChBcnJheShlIC0gbykuZmlsbChcImVxdWFsXCIpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfZCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGkgPSBpIHx8IGZ1bmN0aW9uICh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PT0gZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBjb25zdCBuID0gdC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBlLmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKG4gPiAyMDAgfHwgbyA+IDIwMCB8fCBuICsgbyA+IDMwMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIF9kLmZhc3REaWZmKHQsIGUsIGksIHRydWUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHIsIHM7XHJcbiAgICAgICAgICAgIGlmIChvIDwgbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0ID0gZTtcclxuICAgICAgICAgICAgICAgIGUgPSBpO1xyXG4gICAgICAgICAgICAgICAgciA9IFwiZGVsZXRlXCI7XHJcbiAgICAgICAgICAgICAgICBzID0gXCJpbnNlcnRcIlxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgciA9IFwiaW5zZXJ0XCI7XHJcbiAgICAgICAgICAgICAgICBzID0gXCJkZWxldGVcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGEgPSB0Lmxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgYyA9IGUubGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBsID0gYyAtIGE7XHJcbiAgICAgICAgICAgIGNvbnN0IGQgPSB7fTtcclxuICAgICAgICAgICAgY29uc3QgdSA9IHt9O1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gaChuKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gKHVbbiAtIDFdICE9PSB1bmRlZmluZWQgPyB1W24gLSAxXSA6IC0xKSArIDE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsID0gdVtuICsgMV0gIT09IHVuZGVmaW5lZCA/IHVbbiArIDFdIDogLTE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoID0gbyA+IGwgPyAtMSA6IDE7XHJcbiAgICAgICAgICAgICAgICBpZiAoZFtuICsgaF0pIHtcclxuICAgICAgICAgICAgICAgICAgICBkW25dID0gZFtuICsgaF0uc2xpY2UoMClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghZFtuXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRbbl0gPSBbXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZFtuXS5wdXNoKG8gPiBsID8gciA6IHMpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGYgPSBNYXRoLm1heChvLCBsKTtcclxuICAgICAgICAgICAgICAgIGxldCBnID0gZiAtIG47XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoZyA8IGEgJiYgZiA8IGMgJiYgaSh0W2ddLCBlW2ZdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGcrKztcclxuICAgICAgICAgICAgICAgICAgICBmKys7XHJcbiAgICAgICAgICAgICAgICAgICAgZFtuXS5wdXNoKFwiZXF1YWxcIilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBmID0gMDtcclxuICAgICAgICAgICAgbGV0IGc7XHJcbiAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgIGZvciAoZyA9IC1mOyBnIDwgbDsgZysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdVtnXSA9IGgoZylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoZyA9IGwgKyBmOyBnID4gbDsgZy0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdVtnXSA9IGgoZylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHVbbF0gPSBoKGwpO1xyXG4gICAgICAgICAgICAgICAgZisrXHJcbiAgICAgICAgICAgIH0gd2hpbGUgKHVbbF0gIT09IGMpO1xyXG4gICAgICAgICAgICByZXR1cm4gZFtsXS5zbGljZSgxKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgX2QuZmFzdERpZmYgPSBnZDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdmQodCwgZSwgaSkge1xyXG4gICAgICAgICAgICB0Lmluc2VydEJlZm9yZShpLCB0LmNoaWxkTm9kZXNbZV0gfHwgbnVsbClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHlkKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHQucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgIGUucmVtb3ZlQ2hpbGQodClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geGQodCkge1xyXG4gICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuZGVmYXVsdFZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIHQuZGVmYXVsdFZpZXcuRG9jdW1lbnRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5vd25lckRvY3VtZW50ICYmIHQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgdC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3Lk5vZGVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIENkIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb21Eb2N1bWVudHMgPSBuZXcgU2V0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb21Db252ZXJ0ZXIgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXJrZWRBdHRyaWJ1dGVzID0gbmV3IFNldDtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFya2VkQ2hpbGRyZW4gPSBuZXcgU2V0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXJrZWRUZXh0cyA9IG5ldyBTZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbiA9IGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5saW5lRmlsbGVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Zha2VTZWxlY3Rpb25Db250YWluZXIgPSBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1hcmtUb1N5bmModCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQgPT09IFwidGV4dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9tQ29udmVydGVyLm1hcFZpZXdUb0RvbShlLnBhcmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJrZWRUZXh0cy5hZGQoZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5kb21Db252ZXJ0ZXIubWFwVmlld1RvRG9tKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gXCJhdHRyaWJ1dGVzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXJrZWRBdHRyaWJ1dGVzLmFkZChlKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodCA9PT0gXCJjaGlsZHJlblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFya2VkQ2hpbGRyZW4uYWRkKGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInZpZXctcmVuZGVyZXItdW5rbm93bi10eXBlOiBVbmtub3duIHR5cGUgcGFzc2VkIHRvIFJlbmRlcmVyLm1hcmtUb1N5bmMuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLm1hcmtlZENoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlQ2hpbGRyZW5NYXBwaW5ncyh0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lubGluZUZpbGxlciAmJiAhdGhpcy5faXNTZWxlY3Rpb25JbklubGluZUZpbGxlcigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlSW5saW5lRmlsbGVyKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pbmxpbmVGaWxsZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ID0gdGhpcy5fZ2V0SW5saW5lRmlsbGVyUG9zaXRpb24oKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9uZWVkc0lubGluZUZpbGxlckF0U2VsZWN0aW9uKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ID0gdGhpcy5zZWxlY3Rpb24uZ2V0Rmlyc3RQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWFya2VkQ2hpbGRyZW4uYWRkKHQucGFyZW50KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMubWFya2VkQXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUF0dHJzKHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5tYXJrZWRDaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNoaWxkcmVuKGUsIHtpbmxpbmVGaWxsZXJQb3NpdGlvbjogdH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5tYXJrZWRUZXh0cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5tYXJrZWRDaGlsZHJlbi5oYXMoZS5wYXJlbnQpICYmIHRoaXMuZG9tQ29udmVydGVyLm1hcFZpZXdUb0RvbShlLnBhcmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlVGV4dChlLCB7aW5saW5lRmlsbGVyUG9zaXRpb246IHR9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZG9tQ29udmVydGVyLnZpZXdQb3NpdGlvblRvRG9tKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLnBhcmVudC5vd25lckRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbGQoZS5wYXJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2lubGluZUZpbGxlciA9IFRkKGksIGUucGFyZW50LCBlLm9mZnNldClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbmxpbmVGaWxsZXIgPSBlLnBhcmVudFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faW5saW5lRmlsbGVyID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVGb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXJrZWRUZXh0cy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXJrZWRBdHRyaWJ1dGVzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtlZENoaWxkcmVuLmNsZWFyKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3VwZGF0ZUNoaWxkcmVuTWFwcGluZ3ModCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZG9tQ29udmVydGVyLm1hcFZpZXdUb0RvbSh0KTtcclxuICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZG9tQ29udmVydGVyLm1hcFZpZXdUb0RvbSh0KS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IEFycmF5LmZyb20odGhpcy5kb21Db252ZXJ0ZXIudmlld0NoaWxkcmVuVG9Eb20odCwgZS5vd25lckRvY3VtZW50LCB7d2l0aENoaWxkcmVuOiBmYWxzZX0pKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0aGlzLl9kaWZmTm9kZUxpc3RzKGksIG4pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHRoaXMuX2ZpbmRSZXBsYWNlQWN0aW9ucyhvLCBpLCBuKTtcclxuICAgICAgICAgICAgICAgIGlmIChyLmluZGV4T2YoXCJyZXBsYWNlXCIpICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB7ZXF1YWw6IDAsIGluc2VydDogMCwgZGVsZXRlOiAwfTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2Ygcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobyA9PT0gXCJyZXBsYWNlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBlLmVxdWFsICsgZS5pbnNlcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gZS5lcXVhbCArIGUuZGVsZXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IHQuZ2V0Q2hpbGQobyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocyAmJiAhcy5pcyhcInVpRWxlbWVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUVsZW1lbnRNYXBwaW5ncyhzLCBpW3JdKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeWQobltvXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmVxdWFsKytcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVbb10rK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdXBkYXRlRWxlbWVudE1hcHBpbmdzKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9tQ29udmVydGVyLnVuYmluZERvbUVsZW1lbnQoZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvbUNvbnZlcnRlci5iaW5kRWxlbWVudHMoZSwgdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtlZENoaWxkcmVuLmFkZCh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFya2VkQXR0cmlidXRlcy5hZGQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldElubGluZUZpbGxlclBvc2l0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuc2VsZWN0aW9uLmdldEZpcnN0UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGlmICh0LnBhcmVudC5pcyhcInRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGwuX2NyZWF0ZUJlZm9yZSh0aGlzLnNlbGVjdGlvbi5nZXRGaXJzdFBvc2l0aW9uKCkucGFyZW50KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfaXNTZWxlY3Rpb25JbklubGluZUZpbGxlcigpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbi5yYW5nZUNvdW50ICE9IDEgfHwgIXRoaXMuc2VsZWN0aW9uLmlzQ29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5zZWxlY3Rpb24uZ2V0Rmlyc3RQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZG9tQ29udmVydGVyLnZpZXdQb3NpdGlvblRvRG9tKHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUgJiYgb2QoZS5wYXJlbnQpICYmIGxkKGUucGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3JlbW92ZUlubGluZUZpbGxlcigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9pbmxpbmVGaWxsZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWxkKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInZpZXctcmVuZGVyZXItZmlsbGVyLXdhcy1sb3N0OiBUaGUgaW5saW5lIGZpbGxlciBub2RlIHdhcyBsb3N0LlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRkKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHQpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuZGF0YSA9IHQuZGF0YS5zdWJzdHIoYWQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmxpbmVGaWxsZXIgPSBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9uZWVkc0lubGluZUZpbGxlckF0U2VsZWN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uLnJhbmdlQ291bnQgIT0gMSB8fCAhdGhpcy5zZWxlY3Rpb24uaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnNlbGVjdGlvbi5nZXRGaXJzdFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZG9tQ29udmVydGVyLm1hcFZpZXdUb0RvbShlLnJvb3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUuaXMoXCJlbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIUFkKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gZS5nZXRGaWxsZXJPZmZzZXQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQubm9kZUJlZm9yZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0Lm5vZGVBZnRlcjtcclxuICAgICAgICAgICAgICAgIGlmIChuIGluc3RhbmNlb2YgTHMgfHwgbyBpbnN0YW5jZW9mIExzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdXBkYXRlVGV4dCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5kb21Db252ZXJ0ZXIuZmluZENvcnJlc3BvbmRpbmdEb21UZXh0KHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuZG9tQ29udmVydGVyLnZpZXdUb0RvbSh0LCBpLm93bmVyRG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGkuZGF0YTtcclxuICAgICAgICAgICAgICAgIGxldCByID0gbi5kYXRhO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IGUuaW5saW5lRmlsbGVyUG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICBpZiAocyAmJiBzLnBhcmVudCA9PSB0LnBhcmVudCAmJiBzLm9mZnNldCA9PSB0LmluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgciA9IGNkICsgclxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG8gIT0gcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBnZChvLCByKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS50eXBlID09PSBcImluc2VydFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmluc2VydERhdGEoZS5pbmRleCwgZS52YWx1ZXMuam9pbihcIlwiKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuZGVsZXRlRGF0YShlLmluZGV4LCBlLmhvd01hbnkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF91cGRhdGVBdHRycyh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5kb21Db252ZXJ0ZXIubWFwVmlld1RvRG9tKHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gQXJyYXkuZnJvbShlLmF0dHJpYnV0ZXMpLm1hcCh0ID0+IHQubmFtZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5nZXRBdHRyaWJ1dGVLZXlzKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2Ygbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKGksIHQuZ2V0QXR0cmlidXRlKGkpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXQuaGFzQXR0cmlidXRlKG4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucmVtb3ZlQXR0cmlidXRlKG4pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdXBkYXRlQ2hpbGRyZW4odCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZG9tQ29udmVydGVyLm1hcFZpZXdUb0RvbSh0KTtcclxuICAgICAgICAgICAgICAgIGlmICghaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGUuaW5saW5lRmlsbGVyUG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gdGhpcy5kb21Db252ZXJ0ZXIubWFwVmlld1RvRG9tKHQpLmNoaWxkTm9kZXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gQXJyYXkuZnJvbSh0aGlzLmRvbUNvbnZlcnRlci52aWV3Q2hpbGRyZW5Ub0RvbSh0LCBpLm93bmVyRG9jdW1lbnQsIHtcclxuICAgICAgICAgICAgICAgICAgICBiaW5kOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGlubGluZUZpbGxlclBvc2l0aW9uOiBuXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobiAmJiBuLnBhcmVudCA9PT0gdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIFRkKGkub3duZXJEb2N1bWVudCwgciwgbi5vZmZzZXQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gdGhpcy5fZGlmZk5vZGVMaXN0cyhvLCByKTtcclxuICAgICAgICAgICAgICAgIGxldCBhID0gMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBuZXcgU2V0O1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gXCJkZWxldGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjLmFkZChvW2FdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeWQob1thXSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQgPT09IFwiZXF1YWxcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhKytcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IFwiaW5zZXJ0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmQoaSwgYSwgclthXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGErK1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodCA9PT0gXCJlcXVhbFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcmtEZXNjZW5kYW50VGV4dFRvU3luYyh0aGlzLmRvbUNvbnZlcnRlci5kb21Ub1ZpZXcoclthXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhKytcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdC5wYXJlbnROb2RlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9tQ29udmVydGVyLnVuYmluZERvbUVsZW1lbnQodClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9kaWZmTm9kZUxpc3RzKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHQgPSBSZCh0LCB0aGlzLl9mYWtlU2VsZWN0aW9uQ29udGFpbmVyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBfZCh0LCBlLCBTZC5iaW5kKG51bGwsIHRoaXMuZG9tQ29udmVydGVyKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2ZpbmRSZXBsYWNlQWN0aW9ucyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5pbmRleE9mKFwiaW5zZXJ0XCIpID09PSAtMSB8fCB0LmluZGV4T2YoXCJkZWxldGVcIikgPT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBuID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgbyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHIgPSBbXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB7ZXF1YWw6IDAsIGluc2VydDogMCwgZGVsZXRlOiAwfTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgYSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEgPT09IFwiaW5zZXJ0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgci5wdXNoKGlbcy5lcXVhbCArIHMuaW5zZXJ0XSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGEgPT09IFwiZGVsZXRlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgby5wdXNoKGVbcy5lcXVhbCArIHMuZGVsZXRlXSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gbi5jb25jYXQoX2QobywgciwgUGQpLm1hcCh0ID0+IHQgPT09IFwiZXF1YWxcIiA/IFwicmVwbGFjZVwiIDogdCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLnB1c2goXCJlcXVhbFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gW11cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgc1thXSsrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5jb25jYXQoX2QobywgciwgUGQpLm1hcCh0ID0+IHQgPT09IFwiZXF1YWxcIiA/IFwicmVwbGFjZVwiIDogdCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9tYXJrRGVzY2VuZGFudFRleHRUb1N5bmModCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodC5pcyhcInRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcmtlZFRleHRzLmFkZCh0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0LmlzKFwiZWxlbWVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0LmdldENoaWxkcmVuKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFya0Rlc2NlbmRhbnRUZXh0VG9TeW5jKGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdXBkYXRlU2VsZWN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uLnJhbmdlQ291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVEb21TZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVGYWtlU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5kb21Db252ZXJ0ZXIubWFwVmlld1RvRG9tKHRoaXMuc2VsZWN0aW9uLmVkaXRhYmxlRWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNGb2N1c2VkIHx8ICF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb24uaXNGYWtlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlRmFrZVNlbGVjdGlvbih0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVGYWtlU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlRG9tU2VsZWN0aW9uKHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF91cGRhdGVGYWtlU2VsZWN0aW9uKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm93bmVyRG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2Zha2VTZWxlY3Rpb25Db250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mYWtlU2VsZWN0aW9uQ29udGFpbmVyID0gT2QoZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9mYWtlU2VsZWN0aW9uQ29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb21Db252ZXJ0ZXIuYmluZEZha2VTZWxlY3Rpb24oaSwgdGhpcy5zZWxlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9mYWtlU2VsZWN0aW9uTmVlZHNVcGRhdGUodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghaS5wYXJlbnRFbGVtZW50IHx8IGkucGFyZW50RWxlbWVudCAhPSB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5hcHBlbmRDaGlsZChpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaS50ZXh0Q29udGVudCA9IHRoaXMuc2VsZWN0aW9uLmZha2VTZWxlY3Rpb25MYWJlbCB8fCBcIsKgXCI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBlLmNyZWF0ZVJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICBuLnJlbW92ZUFsbFJhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgby5zZWxlY3ROb2RlQ29udGVudHMoaSk7XHJcbiAgICAgICAgICAgICAgICBuLmFkZFJhbmdlKG8pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF91cGRhdGVEb21TZWxlY3Rpb24odCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZG9tU2VsZWN0aW9uTmVlZHNVcGRhdGUoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmRvbUNvbnZlcnRlci52aWV3UG9zaXRpb25Ub0RvbSh0aGlzLnNlbGVjdGlvbi5hbmNob3IpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuZG9tQ29udmVydGVyLnZpZXdQb3NpdGlvblRvRG9tKHRoaXMuc2VsZWN0aW9uLmZvY3VzKTtcclxuICAgICAgICAgICAgICAgIHQuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIGUuY29sbGFwc2UoaS5wYXJlbnQsIGkub2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgIGUuZXh0ZW5kKG4ucGFyZW50LCBuLm9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoQWwuaXNHZWNrbykge1xyXG4gICAgICAgICAgICAgICAgICAgIEVkKG4sIGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9kb21TZWxlY3Rpb25OZWVkc1VwZGF0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuZG9tQ29udmVydGVyLmlzRG9tU2VsZWN0aW9uQ29ycmVjdCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdCAmJiB0aGlzLmRvbUNvbnZlcnRlci5kb21TZWxlY3Rpb25Ub1ZpZXcodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSAmJiB0aGlzLnNlbGVjdGlvbi5pc0VxdWFsKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2VsZWN0aW9uLmlzQ29sbGFwc2VkICYmIHRoaXMuc2VsZWN0aW9uLmlzU2ltaWxhcihlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2Zha2VTZWxlY3Rpb25OZWVkc1VwZGF0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5fZmFrZVNlbGVjdGlvbkNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0Lm93bmVyRG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUgfHwgZS5wYXJlbnRFbGVtZW50ICE9PSB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpLmFuY2hvck5vZGUgIT09IGUgJiYgIWUuY29udGFpbnMoaS5hbmNob3JOb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZS50ZXh0Q29udGVudCAhPT0gdGhpcy5zZWxlY3Rpb24uZmFrZVNlbGVjdGlvbkxhYmVsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZW1vdmVEb21TZWxlY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5kb21Eb2N1bWVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5yYW5nZUNvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmFjdGl2ZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmRvbUNvbnZlcnRlci5tYXBEb21Ub1ZpZXcoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlICYmIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZ2V0U2VsZWN0aW9uKCkucmVtb3ZlQWxsUmFuZ2VzKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3JlbW92ZUZha2VTZWxlY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5fZmFrZVNlbGVjdGlvbkNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmUoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdXBkYXRlRm9jdXMoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5zZWxlY3Rpb24uZWRpdGFibGVFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG9tQ29udmVydGVyLmZvY3VzKHQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2cyhDZCwgSmMpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBBZCh0KSB7XHJcbiAgICAgICAgICAgIGlmICh0LmdldEF0dHJpYnV0ZShcImNvbnRlbnRlZGl0YWJsZVwiKSA9PSBcImZhbHNlXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmZpbmRBbmNlc3Rvcih0ID0+IHQuaGFzQXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIpKTtcclxuICAgICAgICAgICAgcmV0dXJuICFlIHx8IGUuZ2V0QXR0cmlidXRlKFwiY29udGVudGVkaXRhYmxlXCIpID09IFwidHJ1ZVwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBUZCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlIGluc3RhbmNlb2YgQXJyYXkgPyBlIDogZS5jaGlsZE5vZGVzO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gbltpXTtcclxuICAgICAgICAgICAgaWYgKG9kKG8pKSB7XHJcbiAgICAgICAgICAgICAgICBvLmRhdGEgPSBjZCArIG8uZGF0YTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gdC5jcmVhdGVUZXh0Tm9kZShjZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG4uc3BsaWNlKGksIDAsIG8pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZkKGUsIGksIG8pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBQZCh0LCBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB4ZCh0KSAmJiB4ZChlKSAmJiAhb2QodCkgJiYgIW9kKGUpICYmIHQudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBlLnRhZ05hbWUudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gU2QodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBpZiAoZSA9PT0gaSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChvZChlKSAmJiBvZChpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuZGF0YSA9PT0gaS5kYXRhXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodC5pc0Jsb2NrRmlsbGVyKGUpICYmIHQuaXNCbG9ja0ZpbGxlcihpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEVkKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHQucGFyZW50O1xyXG4gICAgICAgICAgICBpZiAoaS5ub2RlVHlwZSAhPSBOb2RlLkVMRU1FTlRfTk9ERSB8fCB0Lm9mZnNldCAhPSBpLmNoaWxkTm9kZXMubGVuZ3RoIC0gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbiA9IGkuY2hpbGROb2Rlc1t0Lm9mZnNldF07XHJcbiAgICAgICAgICAgIGlmIChuICYmIG4udGFnTmFtZSA9PSBcIkJSXCIpIHtcclxuICAgICAgICAgICAgICAgIGUuYWRkUmFuZ2UoZS5nZXRSYW5nZUF0KDApKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBSZCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBBcnJheS5mcm9tKHQpO1xyXG4gICAgICAgICAgICBpZiAoaS5sZW5ndGggPT0gMCB8fCAhZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBuID0gaVtpLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAobiA9PSBlKSB7XHJcbiAgICAgICAgICAgICAgICBpLnBvcCgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE9kKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgT2JqZWN0LmFzc2lnbihlLnN0eWxlLCB7cG9zaXRpb246IFwiZml4ZWRcIiwgdG9wOiAwLCBsZWZ0OiBcIi05OTk5cHhcIiwgd2lkdGg6IFwiNDJweFwifSk7XHJcbiAgICAgICAgICAgIGUudGV4dENvbnRlbnQgPSBcIsKgXCI7XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgSWQgPSB7d2luZG93OiB3aW5kb3csIGRvY3VtZW50OiBkb2N1bWVudH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFZkKHQpIHtcclxuICAgICAgICAgICAgbGV0IGUgPSAwO1xyXG4gICAgICAgICAgICB3aGlsZSAodC5wcmV2aW91c1NpYmxpbmcpIHtcclxuICAgICAgICAgICAgICAgIHQgPSB0LnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgIGUrK1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBOZCh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSBbXTtcclxuICAgICAgICAgICAgd2hpbGUgKHQgJiYgdC5ub2RlVHlwZSAhPSBOb2RlLkRPQ1VNRU5UX05PREUpIHtcclxuICAgICAgICAgICAgICAgIGUudW5zaGlmdCh0KTtcclxuICAgICAgICAgICAgICAgIHQgPSB0LnBhcmVudE5vZGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gTWQodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gTmQodCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBOZChlKTtcclxuICAgICAgICAgICAgbGV0IG8gPSAwO1xyXG4gICAgICAgICAgICB3aGlsZSAoaVtvXSA9PSBuW29dICYmIGlbb10pIHtcclxuICAgICAgICAgICAgICAgIG8rK1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvID09PSAwID8gbnVsbCA6IGlbbyAtIDFdXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBCZCA9IHNkKGRvY3VtZW50KTtcclxuXHJcbiAgICAgICAgY2xhc3MgemQge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlID0ge30pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ibG9ja0ZpbGxlck1vZGUgPSBlLmJsb2NrRmlsbGVyTW9kZSB8fCBcImJyXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByZUVsZW1lbnRzID0gW1wicHJlXCJdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ibG9ja0VsZW1lbnRzID0gW1wicFwiLCBcImRpdlwiLCBcImgxXCIsIFwiaDJcIiwgXCJoM1wiLCBcImg0XCIsIFwiaDVcIiwgXCJoNlwiLCBcImxpXCIsIFwiZGRcIiwgXCJkdFwiLCBcImZpZ2NhcHRpb25cIl07XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ibG9ja0ZpbGxlciA9IHRoaXMuYmxvY2tGaWxsZXJNb2RlID09IFwiYnJcIiA/IHNkIDogcmQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kb21Ub1ZpZXdNYXBwaW5nID0gbmV3IFdlYWtNYXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3VG9Eb21NYXBwaW5nID0gbmV3IFdlYWtNYXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mYWtlU2VsZWN0aW9uTWFwcGluZyA9IG5ldyBXZWFrTWFwXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJpbmRGYWtlU2VsZWN0aW9uKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Zha2VTZWxlY3Rpb25NYXBwaW5nLnNldCh0LCBuZXcgZ2woZSkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZha2VTZWxlY3Rpb25Ub1ZpZXcodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2Zha2VTZWxlY3Rpb25NYXBwaW5nLmdldCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBiaW5kRWxlbWVudHModCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZG9tVG9WaWV3TWFwcGluZy5zZXQodCwgZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3VG9Eb21NYXBwaW5nLnNldChlLCB0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB1bmJpbmREb21FbGVtZW50KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLl9kb21Ub1ZpZXdNYXBwaW5nLmdldCh0KTtcclxuICAgICAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9tVG9WaWV3TWFwcGluZy5kZWxldGUodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmlld1RvRG9tTWFwcGluZy5kZWxldGUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIEFycmF5LmZyb20odC5jaGlsZE5vZGVzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuYmluZERvbUVsZW1lbnQoZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJpbmREb2N1bWVudEZyYWdtZW50cyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kb21Ub1ZpZXdNYXBwaW5nLnNldCh0LCBlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdUb0RvbU1hcHBpbmcuc2V0KGUsIHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZpZXdUb0RvbSh0LCBlLCBpID0ge30pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0LmlzKFwidGV4dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9wcm9jZXNzRGF0YUZyb21WaWV3VGV4dCh0KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5jcmVhdGVUZXh0Tm9kZShpKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXBWaWV3VG9Eb20odCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwVmlld1RvRG9tKHQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmlzKFwiZG9jdW1lbnRGcmFnbWVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gZS5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLmJpbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYmluZERvY3VtZW50RnJhZ21lbnRzKG4sIHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQuaXMoXCJ1aUVsZW1lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHQucmVuZGVyKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaS5iaW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJpbmRFbGVtZW50cyhuLCB0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuaGFzQXR0cmlidXRlKFwieG1sbnNcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBlLmNyZWF0ZUVsZW1lbnROUyh0LmdldEF0dHJpYnV0ZShcInhtbG5zXCIpLCB0Lm5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gZS5jcmVhdGVFbGVtZW50KHQubmFtZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaS5iaW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJpbmRFbGVtZW50cyhuLCB0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0LmdldEF0dHJpYnV0ZUtleXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5zZXRBdHRyaWJ1dGUoZSwgdC5nZXRBdHRyaWJ1dGUoZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkud2l0aENoaWxkcmVuIHx8IGkud2l0aENoaWxkcmVuID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBvIG9mIHRoaXMudmlld0NoaWxkcmVuVG9Eb20odCwgZSwgaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uYXBwZW5kQ2hpbGQobylcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIHZpZXdDaGlsZHJlblRvRG9tKHQsIGUsIGkgPSB7fSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuZ2V0RmlsbGVyT2Zmc2V0ICYmIHQuZ2V0RmlsbGVyT2Zmc2V0KCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbyA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHIgb2YgdC5nZXRDaGlsZHJlbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4gPT09IG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgdGhpcy5fYmxvY2tGaWxsZXIoZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgdGhpcy52aWV3VG9Eb20ociwgZSwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbysrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobiA9PT0gbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHRoaXMuX2Jsb2NrRmlsbGVyKGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHZpZXdSYW5nZVRvRG9tKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLnZpZXdQb3NpdGlvblRvRG9tKHQuc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMudmlld1Bvc2l0aW9uVG9Eb20odC5lbmQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICBuLnNldFN0YXJ0KGUucGFyZW50LCBlLm9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICBuLnNldEVuZChpLnBhcmVudCwgaS5vZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdmlld1Bvc2l0aW9uVG9Eb20odCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuaXMoXCJ0ZXh0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZmluZENvcnJlc3BvbmRpbmdEb21UZXh0KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IHQub2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsZChpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuICs9IGFkXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cGFyZW50OiBpLCBvZmZzZXQ6IG59XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpLCBuLCBvO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0Lm9mZnNldCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gdGhpcy5tYXBWaWV3VG9Eb20oZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gaS5jaGlsZE5vZGVzWzBdXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubm9kZUJlZm9yZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGUuaXMoXCJ0ZXh0XCIpID8gdGhpcy5maW5kQ29ycmVzcG9uZGluZ0RvbVRleHQoZSkgOiB0aGlzLm1hcFZpZXdUb0RvbSh0Lm5vZGVCZWZvcmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IG4ucGFyZW50Tm9kZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IG4ubmV4dFNpYmxpbmdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9kKG8pICYmIGxkKG8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7cGFyZW50OiBvLCBvZmZzZXQ6IGFkfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gbiA/IFZkKG4pICsgMSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtwYXJlbnQ6IGksIG9mZnNldDogcn1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZG9tVG9WaWV3KHQsIGUgPSB7fSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNCbG9ja0ZpbGxlcih0LCB0aGlzLmJsb2NrRmlsbGVyTW9kZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZ2V0UGFyZW50VUlFbGVtZW50KHQsIHRoaXMuX2RvbVRvVmlld01hcHBpbmcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG9kKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRkKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuX3Byb2Nlc3NEYXRhRnJvbURvbVRleHQodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlID09PSBcIlwiID8gbnVsbCA6IG5ldyBMcyh0aGlzLmRvY3VtZW50LCBlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pc0NvbW1lbnQodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5tYXBEb21Ub1ZpZXcodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubWFwRG9tVG9WaWV3KHQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRG9jdW1lbnRGcmFnbWVudCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gbmV3IHFsKHRoaXMuZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5iaW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJpbmREb2N1bWVudEZyYWdtZW50cyh0LCBpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGUua2VlcE9yaWdpbmFsQ2FzZSA/IHQudGFnTmFtZSA6IHQudGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gbmV3IHpjKHRoaXMuZG9jdW1lbnQsIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5iaW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJpbmRFbGVtZW50cyh0LCBpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0LmF0dHJpYnV0ZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHQgPSBvLmxlbmd0aCAtIDE7IHQgPj0gMDsgdC0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLl9zZXRBdHRyaWJ1dGUob1t0XS5uYW1lLCBvW3RdLnZhbHVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLndpdGhDaGlsZHJlbiB8fCBlLndpdGhDaGlsZHJlbiA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiB0aGlzLmRvbUNoaWxkcmVuVG9WaWV3KHQsIGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLl9hcHBlbmRDaGlsZChuKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICogZG9tQ2hpbGRyZW5Ub1ZpZXcodCwgZSA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHQuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LmNoaWxkTm9kZXNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMuZG9tVG9WaWV3KG4sIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIG9cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRvbVNlbGVjdGlvblRvVmlldyh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5yYW5nZUNvdW50ID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGUgPSB0LmdldFJhbmdlQXQoMCkuc3RhcnRDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9kKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBlLnBhcmVudE5vZGVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZmFrZVNlbGVjdGlvblRvVmlldyhlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmlzRG9tU2VsZWN0aW9uQmFja3dhcmQodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBlID0gMDsgZSA8IHQucmFuZ2VDb3VudDsgZSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuZ2V0UmFuZ2VBdChlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gdGhpcy5kb21SYW5nZVRvVmlldyhuKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnB1c2gobylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGdsKGksIHtiYWNrd2FyZDogZX0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRvbVJhbmdlVG9WaWV3KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmRvbVBvc2l0aW9uVG9WaWV3KHQuc3RhcnRDb250YWluZXIsIHQuc3RhcnRPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZG9tUG9zaXRpb25Ub1ZpZXcodC5lbmRDb250YWluZXIsIHQuZW5kT2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgIGlmIChlICYmIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHVsKGUsIGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkb21Qb3NpdGlvblRvVmlldyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0Jsb2NrRmlsbGVyKHQsIHRoaXMuYmxvY2tGaWxsZXJNb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRvbVBvc2l0aW9uVG9WaWV3KHQucGFyZW50Tm9kZSwgVmQodCkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5tYXBEb21Ub1ZpZXcodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSAmJiBpLmlzKFwidWlFbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRsLl9jcmVhdGVCZWZvcmUoaSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChvZCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb21Qb3NpdGlvblRvVmlldyh0LnBhcmVudE5vZGUsIFZkKHQpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5maW5kQ29ycmVzcG9uZGluZ1ZpZXdUZXh0KHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuID0gZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxkKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gLT0gYWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBuIDwgMCA/IDAgOiBuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgZGwoaSwgbilcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMubWFwRG9tVG9WaWV3KHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBkbChlLCAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuY2hpbGROb2Rlc1tlIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBvZChpKSA/IHRoaXMuZmluZENvcnJlc3BvbmRpbmdWaWV3VGV4dChpKSA6IHRoaXMubWFwRG9tVG9WaWV3KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobiAmJiBuLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBkbChuLnBhcmVudCwgbi5pbmRleCArIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWFwRG9tVG9WaWV3KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFBhcmVudFVJRWxlbWVudCh0KSB8fCB0aGlzLl9kb21Ub1ZpZXdNYXBwaW5nLmdldCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmaW5kQ29ycmVzcG9uZGluZ1ZpZXdUZXh0KHQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5nZXRQYXJlbnRVSUVsZW1lbnQodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0VsZW1lbnQoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMubWFwRG9tVG9WaWV3KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIExzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5uZXh0U2libGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMubWFwRG9tVG9WaWV3KHQucGFyZW50Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGUuZ2V0Q2hpbGQoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgTHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbWFwVmlld1RvRG9tKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl92aWV3VG9Eb21NYXBwaW5nLmdldCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmaW5kQ29ycmVzcG9uZGluZ0RvbVRleHQodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUgJiYgdGhpcy5tYXBWaWV3VG9Eb20oZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXBWaWV3VG9Eb20oZSkubmV4dFNpYmxpbmdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghZSAmJiB0LnBhcmVudCAmJiB0aGlzLm1hcFZpZXdUb0RvbSh0LnBhcmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tYXBWaWV3VG9Eb20odC5wYXJlbnQpLmNoaWxkTm9kZXNbMF1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvY3VzKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLm1hcFZpZXdUb0RvbSh0KTtcclxuICAgICAgICAgICAgICAgIGlmIChlICYmIGUub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qge3Njcm9sbFg6IHQsIHNjcm9sbFk6IGl9ID0gSWQud2luZG93O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBGZChlLCB0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge3Njcm9sbExlZnQ6IGUsIHNjcm9sbFRvcDogaX0gPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLnB1c2goW2UsIGldKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGUuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBGZChlLCB0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW2UsIGldID0gbi5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnNjcm9sbExlZnQgPSBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnNjcm9sbFRvcCA9IGlcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBJZC53aW5kb3cuc2Nyb2xsVG8odCwgaSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNFbGVtZW50KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ICYmIHQubm9kZVR5cGUgPT0gTm9kZS5FTEVNRU5UX05PREVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNEb2N1bWVudEZyYWdtZW50KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ICYmIHQubm9kZVR5cGUgPT0gTm9kZS5ET0NVTUVOVF9GUkFHTUVOVF9OT0RFXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzQ29tbWVudCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCAmJiB0Lm5vZGVUeXBlID09IE5vZGUuQ09NTUVOVF9OT0RFXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzQmxvY2tGaWxsZXIodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYmxvY2tGaWxsZXJNb2RlID09IFwiYnJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmlzRXF1YWxOb2RlKEJkKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQudGFnTmFtZSA9PT0gXCJCUlwiICYmIGpkKHQsIHRoaXMuYmxvY2tFbGVtZW50cykgJiYgdC5wYXJlbnROb2RlLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBEZCh0LCB0aGlzLmJsb2NrRWxlbWVudHMpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzRG9tU2VsZWN0aW9uQmFja3dhcmQodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgZS5zZXRTdGFydCh0LmFuY2hvck5vZGUsIHQuYW5jaG9yT2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgIGUuc2V0RW5kKHQuZm9jdXNOb2RlLCB0LmZvY3VzT2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmNvbGxhcHNlZDtcclxuICAgICAgICAgICAgICAgIGUuZGV0YWNoKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRQYXJlbnRVSUVsZW1lbnQodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IE5kKHQpO1xyXG4gICAgICAgICAgICAgICAgZS5wb3AoKTtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9kb21Ub1ZpZXdNYXBwaW5nLmdldCh0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSAmJiBpLmlzKFwidWlFbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNEb21TZWxlY3Rpb25Db3JyZWN0KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0RvbVNlbGVjdGlvblBvc2l0aW9uQ29ycmVjdCh0LmFuY2hvck5vZGUsIHQuYW5jaG9yT2Zmc2V0KSAmJiB0aGlzLl9pc0RvbVNlbGVjdGlvblBvc2l0aW9uQ29ycmVjdCh0LmZvY3VzTm9kZSwgdC5mb2N1c09mZnNldClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2lzRG9tU2VsZWN0aW9uUG9zaXRpb25Db3JyZWN0KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvZCh0KSAmJiBsZCh0KSAmJiBlIDwgYWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRWxlbWVudCh0KSAmJiBsZCh0LmNoaWxkTm9kZXNbZV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5tYXBEb21Ub1ZpZXcodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSAmJiBpLmlzKFwidWlFbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcHJvY2Vzc0RhdGFGcm9tVmlld1RleHQodCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGUgPSB0LmRhdGE7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5nZXRBbmNlc3RvcnMoKS5zb21lKHQgPT4gdGhpcy5wcmVFbGVtZW50cy5pbmNsdWRlcyh0Lm5hbWUpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5jaGFyQXQoMCkgPT0gXCIgXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5fZ2V0VG91Y2hpbmdWaWV3VGV4dE5vZGUodCwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpICYmIHRoaXMuX25vZGVFbmRzV2l0aFNwYWNlKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuIHx8ICFpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBcIsKgXCIgKyBlLnN1YnN0cigxKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlLmNoYXJBdChlLmxlbmd0aCAtIDEpID09IFwiIFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX2dldFRvdWNoaW5nVmlld1RleHROb2RlKHQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmNoYXJBdChlLmxlbmd0aCAtIDIpID09IFwiIFwiIHx8ICFpIHx8IGkuZGF0YS5jaGFyQXQoMCkgPT0gXCIgXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZSA9IGUuc3Vic3RyKDAsIGUubGVuZ3RoIC0gMSkgKyBcIsKgXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5yZXBsYWNlKC8gezJ9L2csIFwiIMKgXCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9ub2RlRW5kc1dpdGhTcGFjZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5nZXRBbmNlc3RvcnMoKS5zb21lKHQgPT4gdGhpcy5wcmVFbGVtZW50cy5pbmNsdWRlcyh0Lm5hbWUpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuX3Byb2Nlc3NEYXRhRnJvbVZpZXdUZXh0KHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuY2hhckF0KGUubGVuZ3RoIC0gMSkgPT0gXCIgXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3Byb2Nlc3NEYXRhRnJvbURvbVRleHQodCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGUgPSB0LmRhdGE7XHJcbiAgICAgICAgICAgICAgICBpZiAoTGQodCwgdGhpcy5wcmVFbGVtZW50cykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdWQodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGUgPSBlLnJlcGxhY2UoL1sgXFxuXFx0XFxyXXsxLH0vZywgXCIgXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX2dldFRvdWNoaW5nSW5saW5lRG9tTm9kZSh0LCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5fZ2V0VG91Y2hpbmdJbmxpbmVEb21Ob2RlKHQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMuX2NoZWNrU2hvdWxkTGVmdFRyaW1Eb21UZXh0KGkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHRoaXMuX2NoZWNrU2hvdWxkUmlnaHRUcmltRG9tVGV4dCh0LCBuKTtcclxuICAgICAgICAgICAgICAgIGlmIChvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IGUucmVwbGFjZSgvXiAvLCBcIlwiKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gZS5yZXBsYWNlKC8gJC8sIFwiXCIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlID0gdWQobmV3IFRleHQoZSkpO1xyXG4gICAgICAgICAgICAgICAgZSA9IGUucmVwbGFjZSgvIFxcdTAwQTAvZywgXCIgIFwiKTtcclxuICAgICAgICAgICAgICAgIGlmICgvKCB8XFx1MDBBMClcXHUwMEEwJC8udGVzdChlKSB8fCAhbiB8fCBuLmRhdGEgJiYgbi5kYXRhLmNoYXJBdCgwKSA9PSBcIiBcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSBlLnJlcGxhY2UoL1xcdTAwQTAkLywgXCIgXCIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobykge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSBlLnJlcGxhY2UoL15cXHUwMEEwLywgXCIgXCIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY2hlY2tTaG91bGRMZWZ0VHJpbURvbVRleHQodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChLcih0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gL1teXFxTXFx1MDBBMF0vLnRlc3QodC5kYXRhLmNoYXJBdCh0LmRhdGEubGVuZ3RoIC0gMSkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jaGVja1Nob3VsZFJpZ2h0VHJpbURvbVRleHQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAhbGQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldFRvdWNoaW5nVmlld1RleHROb2RlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgbGwoe1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXJ0UG9zaXRpb246IGUgPyBkbC5fY3JlYXRlQWZ0ZXIodCkgOiBkbC5fY3JlYXRlQmVmb3JlKHQpLFxyXG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbjogZSA/IFwiZm9yd2FyZFwiIDogXCJiYWNrd2FyZFwiXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQuaXRlbS5pcyhcImNvbnRhaW5lckVsZW1lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQuaXRlbS5pcyhcImJyXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0Lml0ZW0uaXMoXCJ0ZXh0UHJveHlcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuaXRlbVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRUb3VjaGluZ0lubGluZURvbU5vZGUodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0LnBhcmVudE5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUgPyBcIm5leHROb2RlXCIgOiBcInByZXZpb3VzTm9kZVwiO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQub3duZXJEb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBOZCh0KVswXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuLmNyZWF0ZVRyZWVXYWxrZXIobywgTm9kZUZpbHRlci5TSE9XX1RFWFQgfCBOb2RlRmlsdGVyLlNIT1dfRUxFTUVOVCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGFjY2VwdE5vZGUodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob2QodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9BQ0NFUFRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodC50YWdOYW1lID09IFwiQlJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE5vZGVGaWx0ZXIuRklMVEVSX0FDQ0VQVFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBOb2RlRmlsdGVyLkZJTFRFUl9TS0lQXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByLmN1cnJlbnROb2RlID0gdDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSByW2ldKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocyAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBNZCh0LCBzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZSAmJiAhTGQodCwgdGhpcy5ibG9ja0VsZW1lbnRzLCBlKSAmJiAhTGQocywgdGhpcy5ibG9ja0VsZW1lbnRzLCBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIExkKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgbGV0IG4gPSBOZCh0KTtcclxuICAgICAgICAgICAgaWYgKGkpIHtcclxuICAgICAgICAgICAgICAgIG4gPSBuLnNsaWNlKG4uaW5kZXhPZihpKSArIDEpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG4uc29tZSh0ID0+IHQudGFnTmFtZSAmJiBlLmluY2x1ZGVzKHQudGFnTmFtZS50b0xvd2VyQ2FzZSgpKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEZkKHQsIGUpIHtcclxuICAgICAgICAgICAgd2hpbGUgKHQgJiYgdCAhPSBJZC5kb2N1bWVudCkge1xyXG4gICAgICAgICAgICAgICAgZSh0KTtcclxuICAgICAgICAgICAgICAgIHQgPSB0LnBhcmVudE5vZGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRGQodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gb2QodCkgJiYgdC5kYXRhID09IFwiwqBcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGkgJiYgamQodCwgZSkgJiYgdC5wYXJlbnROb2RlLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBqZCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LnBhcmVudE5vZGU7XHJcbiAgICAgICAgICAgIHJldHVybiBpICYmIGkudGFnTmFtZSAmJiBlLmluY2x1ZGVzKGkudGFnTmFtZS50b0xvd2VyQ2FzZSgpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSGQodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseSh0KTtcclxuICAgICAgICAgICAgaWYgKGUgPT0gXCJbb2JqZWN0IFdpbmRvd11cIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZSA9PSBcIltvYmplY3QgZ2xvYmFsXVwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgV2QgPSBxYyh7fSwgZHMsIHtcclxuICAgICAgICAgICAgbGlzdGVuVG8odCwgLi4uZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHhkKHQpIHx8IEhkKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX2dldFByb3h5RW1pdHRlcih0KSB8fCBuZXcgVWQodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5hdHRhY2goLi4uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IGlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRzLmxpc3RlblRvLmNhbGwodGhpcywgdCwgLi4uZSlcclxuICAgICAgICAgICAgfSwgc3RvcExpc3RlbmluZyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoeGQodCkgfHwgSGQodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5fZ2V0UHJveHlFbWl0dGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IGVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRzLnN0b3BMaXN0ZW5pbmcuY2FsbCh0aGlzLCB0LCBlLCBpKTtcclxuICAgICAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgVWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LmRldGFjaChlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCBfZ2V0UHJveHlFbWl0dGVyKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1cyh0aGlzLCAkZCh0KSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHZhciBxZCA9IFdkO1xyXG5cclxuICAgICAgICBjbGFzcyBVZCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIGhzKHRoaXMsICRkKHQpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RvbU5vZGUgPSB0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHFjKFVkLnByb3RvdHlwZSwgZHMsIHtcclxuICAgICAgICAgICAgYXR0YWNoKHQsIGUsIGkgPSB7fSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2RvbUxpc3RlbmVycyAmJiB0aGlzLl9kb21MaXN0ZW5lcnNbdF0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9jcmVhdGVEb21MaXN0ZW5lcih0LCAhIWkudXNlQ2FwdHVyZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kb21Ob2RlLmFkZEV2ZW50TGlzdGVuZXIodCwgbiwgISFpLnVzZUNhcHR1cmUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9kb21MaXN0ZW5lcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kb21MaXN0ZW5lcnMgPSB7fVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZG9tTGlzdGVuZXJzW3RdID0gblxyXG4gICAgICAgICAgICB9LCBkZXRhY2godCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZG9tTGlzdGVuZXJzW3RdICYmICghKGUgPSB0aGlzLl9ldmVudHNbdF0pIHx8ICFlLmNhbGxiYWNrcy5sZW5ndGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZG9tTGlzdGVuZXJzW3RdLnJlbW92ZUxpc3RlbmVyKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSwgX2NyZWF0ZURvbUxpc3RlbmVyKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUodCwgZSlcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBpLnJlbW92ZUxpc3RlbmVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RvbU5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0LCBpLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5fZG9tTGlzdGVuZXJzW3RdXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiAkZCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0W1wiZGF0YS1jay1leHBhbmRvXCJdIHx8ICh0W1wiZGF0YS1jay1leHBhbmRvXCJdID0gaXMoKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIEdkIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3ID0gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQgPSB0LmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbmFibGUoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IHRydWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGlzYWJsZSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVkID0gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzYWJsZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMoR2QsIHFkKTtcclxuICAgICAgICB2YXIgS2QgPSBcIl9fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX19cIjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSmQodCkge1xyXG4gICAgICAgICAgICB0aGlzLl9fZGF0YV9fLnNldCh0LCBLZCk7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgWWQgPSBKZDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gUWQodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBYZCA9IFFkO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBaZCh0KSB7XHJcbiAgICAgICAgICAgIHZhciBlID0gLTEsIGkgPSB0ID09IG51bGwgPyAwIDogdC5sZW5ndGg7XHJcbiAgICAgICAgICAgIHRoaXMuX19kYXRhX18gPSBuZXcgX2U7XHJcbiAgICAgICAgICAgIHdoaWxlICgrK2UgPCBpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZCh0W2VdKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBaZC5wcm90b3R5cGUuYWRkID0gWmQucHJvdG90eXBlLnB1c2ggPSBZZDtcclxuICAgICAgICBaZC5wcm90b3R5cGUuaGFzID0gWGQ7XHJcbiAgICAgICAgdmFyIHR1ID0gWmQ7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGV1KHQsIGUpIHtcclxuICAgICAgICAgICAgdmFyIGkgPSAtMSwgbiA9IHQgPT0gbnVsbCA/IDAgOiB0Lmxlbmd0aDtcclxuICAgICAgICAgICAgd2hpbGUgKCsraSA8IG4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChlKHRbaV0sIGksIHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBpdSA9IGV1O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBudSh0LCBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0LmhhcyhlKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG91ID0gbnU7XHJcbiAgICAgICAgdmFyIHJ1ID0gMSwgc3UgPSAyO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBhdSh0LCBlLCBpLCBuLCBvLCByKSB7XHJcbiAgICAgICAgICAgIHZhciBzID0gaSAmIHJ1LCBhID0gdC5sZW5ndGgsIGMgPSBlLmxlbmd0aDtcclxuICAgICAgICAgICAgaWYgKGEgIT0gYyAmJiAhKHMgJiYgYyA+IGEpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbCA9IHIuZ2V0KHQpO1xyXG4gICAgICAgICAgICBpZiAobCAmJiByLmdldChlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGwgPT0gZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBkID0gLTEsIHUgPSB0cnVlLCBoID0gaSAmIHN1ID8gbmV3IHR1IDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICByLnNldCh0LCBlKTtcclxuICAgICAgICAgICAgci5zZXQoZSwgdCk7XHJcbiAgICAgICAgICAgIHdoaWxlICgrK2QgPCBhKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZiA9IHRbZF0sIGcgPSBlW2RdO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IHMgPyBuKGcsIGYsIGQsIGUsIHQsIHIpIDogbihmLCBnLCBkLCB0LCBlLCByKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG0gIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWl1KGUsIChmdW5jdGlvbiAodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW91KGgsIGUpICYmIChmID09PSB0IHx8IG8oZiwgdCwgaSwgbiwgcikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaC5wdXNoKGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIShmID09PSBnIHx8IG8oZiwgZywgaSwgbiwgcikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcltcImRlbGV0ZVwiXSh0KTtcclxuICAgICAgICAgICAgcltcImRlbGV0ZVwiXShlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBjdSA9IGF1O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBsdSh0KSB7XHJcbiAgICAgICAgICAgIHZhciBlID0gLTEsIGkgPSBBcnJheSh0LnNpemUpO1xyXG4gICAgICAgICAgICB0LmZvckVhY2goKGZ1bmN0aW9uICh0LCBuKSB7XHJcbiAgICAgICAgICAgICAgICBpWysrZV0gPSBbbiwgdF1cclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGR1ID0gbHU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHV1KHQpIHtcclxuICAgICAgICAgICAgdmFyIGUgPSAtMSwgaSA9IEFycmF5KHQuc2l6ZSk7XHJcbiAgICAgICAgICAgIHQuZm9yRWFjaCgoZnVuY3Rpb24gKHQpIHtcclxuICAgICAgICAgICAgICAgIGlbKytlXSA9IHRcclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGh1ID0gdXU7XHJcbiAgICAgICAgdmFyIGZ1ID0gMSwgZ3UgPSAyO1xyXG4gICAgICAgIHZhciBtdSA9IFwiW29iamVjdCBCb29sZWFuXVwiLCBwdSA9IFwiW29iamVjdCBEYXRlXVwiLCBidSA9IFwiW29iamVjdCBFcnJvcl1cIiwgd3UgPSBcIltvYmplY3QgTWFwXVwiLFxyXG4gICAgICAgICAgICBrdSA9IFwiW29iamVjdCBOdW1iZXJdXCIsIF91ID0gXCJbb2JqZWN0IFJlZ0V4cF1cIiwgdnUgPSBcIltvYmplY3QgU2V0XVwiLCB5dSA9IFwiW29iamVjdCBTdHJpbmddXCIsXHJcbiAgICAgICAgICAgIHh1ID0gXCJbb2JqZWN0IFN5bWJvbF1cIjtcclxuICAgICAgICB2YXIgQ3UgPSBcIltvYmplY3QgQXJyYXlCdWZmZXJdXCIsIEF1ID0gXCJbb2JqZWN0IERhdGFWaWV3XVwiO1xyXG4gICAgICAgIHZhciBUdSA9IHIgPyByLnByb3RvdHlwZSA6IHVuZGVmaW5lZCwgUHUgPSBUdSA/IFR1LnZhbHVlT2YgOiB1bmRlZmluZWQ7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFN1KHQsIGUsIGksIG4sIG8sIHIsIHMpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChpKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEF1OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmJ5dGVMZW5ndGggIT0gZS5ieXRlTGVuZ3RoIHx8IHQuYnl0ZU9mZnNldCAhPSBlLmJ5dGVPZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHQgPSB0LmJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICBlID0gZS5idWZmZXI7XHJcbiAgICAgICAgICAgICAgICBjYXNlIEN1OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmJ5dGVMZW5ndGggIT0gZS5ieXRlTGVuZ3RoIHx8ICFyKG5ldyBmbyh0KSwgbmV3IGZvKGUpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIG11OlxyXG4gICAgICAgICAgICAgICAgY2FzZSBwdTpcclxuICAgICAgICAgICAgICAgIGNhc2Uga3U6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEwoK3QsICtlKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgYnU6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQubmFtZSA9PSBlLm5hbWUgJiYgdC5tZXNzYWdlID09IGUubWVzc2FnZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgX3U6XHJcbiAgICAgICAgICAgICAgICBjYXNlIHl1OlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ID09IGUgKyBcIlwiO1xyXG4gICAgICAgICAgICAgICAgY2FzZSB3dTpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGR1O1xyXG4gICAgICAgICAgICAgICAgY2FzZSB2dTpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYyA9IG4gJiBmdTtcclxuICAgICAgICAgICAgICAgICAgICBhIHx8IChhID0gaHUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LnNpemUgIT0gZS5zaXplICYmICFjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbCA9IHMuZ2V0KHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsID09IGVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbiB8PSBndTtcclxuICAgICAgICAgICAgICAgICAgICBzLnNldCh0LCBlKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IGN1KGEodCksIGEoZSksIG4sIG8sIHIsIHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNbXCJkZWxldGVcIl0odCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQ7XHJcbiAgICAgICAgICAgICAgICBjYXNlIHh1OlxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChQdSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHUuY2FsbCh0KSA9PSBQdS5jYWxsKGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIEV1ID0gU3U7XHJcbiAgICAgICAgdmFyIFJ1ID0gMTtcclxuICAgICAgICB2YXIgT3UgPSBPYmplY3QucHJvdG90eXBlO1xyXG4gICAgICAgIHZhciBJdSA9IE91Lmhhc093blByb3BlcnR5O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBWdSh0LCBlLCBpLCBuLCBvLCByKSB7XHJcbiAgICAgICAgICAgIHZhciBzID0gaSAmIFJ1LCBhID0gem4odCksIGMgPSBhLmxlbmd0aCwgbCA9IHpuKGUpLCBkID0gbC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGlmIChjICE9IGQgJiYgIXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB1ID0gYztcclxuICAgICAgICAgICAgd2hpbGUgKHUtLSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGggPSBhW3VdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCEocyA/IGggaW4gZSA6IEl1LmNhbGwoZSwgaCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGYgPSByLmdldCh0KTtcclxuICAgICAgICAgICAgaWYgKGYgJiYgci5nZXQoZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmID09IGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgZyA9IHRydWU7XHJcbiAgICAgICAgICAgIHIuc2V0KHQsIGUpO1xyXG4gICAgICAgICAgICByLnNldChlLCB0KTtcclxuICAgICAgICAgICAgdmFyIG0gPSBzO1xyXG4gICAgICAgICAgICB3aGlsZSAoKyt1IDwgYykge1xyXG4gICAgICAgICAgICAgICAgaCA9IGFbdV07XHJcbiAgICAgICAgICAgICAgICB2YXIgcCA9IHRbaF0sIGIgPSBlW2hdO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdyA9IHMgPyBuKGIsIHAsIGgsIGUsIHQsIHIpIDogbihwLCBiLCBoLCB0LCBlLCByKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCEodyA9PT0gdW5kZWZpbmVkID8gcCA9PT0gYiB8fCBvKHAsIGIsIGksIG4sIHIpIDogdykpIHtcclxuICAgICAgICAgICAgICAgICAgICBnID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG0gfHwgKG0gPSBoID09IFwiY29uc3RydWN0b3JcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZyAmJiAhbSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGsgPSB0LmNvbnN0cnVjdG9yLCBfID0gZS5jb25zdHJ1Y3RvcjtcclxuICAgICAgICAgICAgICAgIGlmIChrICE9IF8gJiYgKFwiY29uc3RydWN0b3JcIiBpbiB0ICYmIFwiY29uc3RydWN0b3JcIiBpbiBlKSAmJiAhKHR5cGVvZiBrID09IFwiZnVuY3Rpb25cIiAmJiBrIGluc3RhbmNlb2YgayAmJiB0eXBlb2YgXyA9PSBcImZ1bmN0aW9uXCIgJiYgXyBpbnN0YW5jZW9mIF8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZyA9IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcltcImRlbGV0ZVwiXSh0KTtcclxuICAgICAgICAgICAgcltcImRlbGV0ZVwiXShlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGdcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBOdSA9IFZ1O1xyXG4gICAgICAgIHZhciBNdSA9IDE7XHJcbiAgICAgICAgdmFyIEJ1ID0gXCJbb2JqZWN0IEFyZ3VtZW50c11cIiwgenUgPSBcIltvYmplY3QgQXJyYXldXCIsIEx1ID0gXCJbb2JqZWN0IE9iamVjdF1cIjtcclxuICAgICAgICB2YXIgRnUgPSBPYmplY3QucHJvdG90eXBlO1xyXG4gICAgICAgIHZhciBEdSA9IEZ1Lmhhc093blByb3BlcnR5O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBqdSh0LCBlLCBpLCBuLCBvLCByKSB7XHJcbiAgICAgICAgICAgIHZhciBzID0gSmUodCksIGEgPSBKZShlKSwgYyA9IHMgPyB6dSA6IHNvKHQpLCBsID0gYSA/IHp1IDogc28oZSk7XHJcbiAgICAgICAgICAgIGMgPSBjID09IEJ1ID8gTHUgOiBjO1xyXG4gICAgICAgICAgICBsID0gbCA9PSBCdSA/IEx1IDogbDtcclxuICAgICAgICAgICAgdmFyIGQgPSBjID09IEx1LCB1ID0gbCA9PSBMdSwgaCA9IGMgPT0gbDtcclxuICAgICAgICAgICAgaWYgKGggJiYgT2JqZWN0KFllW1wiYVwiXSkodCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghT2JqZWN0KFllW1wiYVwiXSkoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZCA9IGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGggJiYgIWQpIHtcclxuICAgICAgICAgICAgICAgIHIgfHwgKHIgPSBuZXcgQWUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHMgfHwgQmkodCkgPyBjdSh0LCBlLCBpLCBuLCBvLCByKSA6IEV1KHQsIGUsIGMsIGksIG4sIG8sIHIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCEoaSAmIE11KSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGYgPSBkICYmIER1LmNhbGwodCwgXCJfX3dyYXBwZWRfX1wiKSwgZyA9IHUgJiYgRHUuY2FsbChlLCBcIl9fd3JhcHBlZF9fXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGYgfHwgZykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtID0gZiA/IHQudmFsdWUoKSA6IHQsIHAgPSBnID8gZS52YWx1ZSgpIDogZTtcclxuICAgICAgICAgICAgICAgICAgICByIHx8IChyID0gbmV3IEFlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbyhtLCBwLCBpLCBuLCByKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghaCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgciB8fCAociA9IG5ldyBBZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBOdSh0LCBlLCBpLCBuLCBvLCByKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIEh1ID0ganU7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFd1KHQsIGUsIGksIG4sIG8pIHtcclxuICAgICAgICAgICAgaWYgKHQgPT09IGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQgPT0gbnVsbCB8fCBlID09IG51bGwgfHwgIVQodCkgJiYgIVQoZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ICE9PSB0ICYmIGUgIT09IGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gSHUodCwgZSwgaSwgbiwgV3UsIG8pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcXUgPSBXdTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVXUodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBpID0gdHlwZW9mIGkgPT0gXCJmdW5jdGlvblwiID8gaSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgdmFyIG4gPSBpID8gaSh0LCBlKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgcmV0dXJuIG4gPT09IHVuZGVmaW5lZCA/IHF1KHQsIGUsIHVuZGVmaW5lZCwgaSkgOiAhIW5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciAkdSA9IFV1O1xyXG5cclxuICAgICAgICBjbGFzcyBHdSBleHRlbmRzIEdkIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb25maWcgPSB7Y2hpbGRMaXN0OiB0cnVlLCBjaGFyYWN0ZXJEYXRhOiB0cnVlLCBjaGFyYWN0ZXJEYXRhT2xkVmFsdWU6IHRydWUsIHN1YnRyZWU6IHRydWV9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb21Db252ZXJ0ZXIgPSB0LmRvbUNvbnZlcnRlcjtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVuZGVyZXIgPSB0Ll9yZW5kZXJlcjtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RvbUVsZW1lbnRzID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tdXRhdGlvbk9ic2VydmVyID0gbmV3IHdpbmRvdy5NdXRhdGlvbk9ic2VydmVyKHRoaXMuX29uTXV0YXRpb25zLmJpbmQodGhpcykpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZsdXNoKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb25NdXRhdGlvbnModGhpcy5fbXV0YXRpb25PYnNlcnZlci50YWtlUmVjb3JkcygpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvYnNlcnZlKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RvbUVsZW1lbnRzLnB1c2godCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9tdXRhdGlvbk9ic2VydmVyLm9ic2VydmUodCwgdGhpcy5fY29uZmlnKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbmFibGUoKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5lbmFibGUoKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLl9kb21FbGVtZW50cykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX211dGF0aW9uT2JzZXJ2ZXIub2JzZXJ2ZSh0LCB0aGlzLl9jb25maWcpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRpc2FibGUoKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5kaXNhYmxlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tdXRhdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbXV0YXRpb25PYnNlcnZlci5kaXNjb25uZWN0KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX29uTXV0YXRpb25zKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZG9tQ29udmVydGVyO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IFNldDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkudHlwZSA9PT0gXCJjaGlsZExpc3RcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZS5tYXBEb21Ub1ZpZXcoaS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiB0LmlzKFwidWlFbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ICYmICF0aGlzLl9pc0JvZ3VzQnJNdXRhdGlvbihpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5hZGQodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGUubWFwRG9tVG9WaWV3KG8udGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiB0LmlzKFwidWlFbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLnR5cGUgPT09IFwiY2hhcmFjdGVyRGF0YVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLmZpbmRDb3JyZXNwb25kaW5nVmlld1RleHQoby50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiAhbi5oYXModC5wYXJlbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldCh0LCB7dHlwZTogXCJ0ZXh0XCIsIG9sZFRleHQ6IHQuZGF0YSwgbmV3VGV4dDogdWQoby50YXJnZXQpLCBub2RlOiB0fSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdCAmJiBsZChvLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uYWRkKGUubWFwRG9tVG9WaWV3KG8udGFyZ2V0LnBhcmVudE5vZGUpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGkudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm1hcmtUb1N5bmMoXCJ0ZXh0XCIsIHQubm9kZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5wdXNoKHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLm1hcFZpZXdUb0RvbSh0KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gQXJyYXkuZnJvbSh0LmdldENoaWxkcmVuKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBBcnJheS5mcm9tKGUuZG9tQ2hpbGRyZW5Ub1ZpZXcoaSwge3dpdGhDaGlsZHJlbjogZmFsc2V9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEkdShuLCByLCBhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbmRlcmVyLm1hcmtUb1N5bmMoXCJjaGlsZHJlblwiLCB0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgby5wdXNoKHt0eXBlOiBcImNoaWxkcmVuXCIsIG9sZENoaWxkcmVuOiBuLCBuZXdDaGlsZHJlbjogciwgbm9kZTogdH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHRbMF0udGFyZ2V0Lm93bmVyRG9jdW1lbnQuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgcyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAociAmJiByLmFuY2hvck5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZS5kb21Qb3NpdGlvblRvVmlldyhyLmFuY2hvck5vZGUsIHIuYW5jaG9yT2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5kb21Qb3NpdGlvblRvVmlldyhyLmZvY3VzTm9kZSwgci5mb2N1c09mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gbmV3IGdsKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzLnNldEZvY3VzKGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG8ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5maXJlKFwibXV0YXRpb25zXCIsIG8sIHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5mb3JjZVJlbmRlcigpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ID09PSBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0LmlzKFwidGV4dFwiKSAmJiBlLmlzKFwidGV4dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5kYXRhID09PSBlLmRhdGFcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9pc0JvZ3VzQnJNdXRhdGlvbih0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5uZXh0U2libGluZyA9PT0gbnVsbCAmJiB0LnJlbW92ZWROb2Rlcy5sZW5ndGggPT09IDAgJiYgdC5hZGRlZE5vZGVzLmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMuZG9tQ29udmVydGVyLmRvbVRvVmlldyh0LmFkZGVkTm9kZXNbMF0sIHt3aXRoQ2hpbGRyZW46IGZhbHNlfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlICYmIGUuaXMoXCJlbGVtZW50XCIsIFwiYnJcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgS3Uge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudCA9IHQuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvbUV2ZW50ID0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9tVGFyZ2V0ID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICBxYyh0aGlzLCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgdGFyZ2V0KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmlldy5kb21Db252ZXJ0ZXIubWFwRG9tVG9WaWV3KHRoaXMuZG9tVGFyZ2V0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwcmV2ZW50RGVmYXVsdCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9tRXZlbnQucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdG9wUHJvcGFnYXRpb24oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvbUV2ZW50LnN0b3BQcm9wYWdhdGlvbigpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIEp1IGV4dGVuZHMgR2Qge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXNlQ2FwdHVyZSA9IGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9ic2VydmUodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHR5cGVvZiB0aGlzLmRvbUV2ZW50VHlwZSA9PSBcInN0cmluZ1wiID8gW3RoaXMuZG9tRXZlbnRUeXBlXSA6IHRoaXMuZG9tRXZlbnRUeXBlO1xyXG4gICAgICAgICAgICAgICAgZS5mb3JFYWNoKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odCwgZSwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9uRG9tRXZlbnQoZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHt1c2VDYXB0dXJlOiB0aGlzLnVzZUNhcHR1cmV9KVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZmlyZSh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50LmZpcmUodCwgbmV3IEt1KHRoaXMudmlldywgZSwgaSkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIFl1IGV4dGVuZHMgSnUge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9tRXZlbnRUeXBlID0gW1wia2V5ZG93blwiLCBcImtleXVwXCJdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9uRG9tRXZlbnQodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKHQudHlwZSwgdCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleUNvZGU6IHQua2V5Q29kZSxcclxuICAgICAgICAgICAgICAgICAgICBhbHRLZXk6IHQuYWx0S2V5LFxyXG4gICAgICAgICAgICAgICAgICAgIGN0cmxLZXk6IHQuY3RybEtleSB8fCB0Lm1ldGFLZXksXHJcbiAgICAgICAgICAgICAgICAgICAgc2hpZnRLZXk6IHQuc2hpZnRLZXksXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0IGtleXN0cm9rZSgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1sKHRoaXMpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIFF1ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbltcImFcIl0uRGF0ZS5ub3coKVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIFh1ID0gUXU7XHJcbiAgICAgICAgdmFyIFp1ID0gMCAvIDA7XHJcbiAgICAgICAgdmFyIHRoID0gL15cXHMrfFxccyskL2c7XHJcbiAgICAgICAgdmFyIGVoID0gL15bLStdMHhbMC05YS1mXSskL2k7XHJcbiAgICAgICAgdmFyIGloID0gL14wYlswMV0rJC9pO1xyXG4gICAgICAgIHZhciBuaCA9IC9eMG9bMC03XSskL2k7XHJcbiAgICAgICAgdmFyIG9oID0gcGFyc2VJbnQ7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJoKHQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0ID09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKFFzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWnVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY3QodCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBlID0gdHlwZW9mIHQudmFsdWVPZiA9PSBcImZ1bmN0aW9uXCIgPyB0LnZhbHVlT2YoKSA6IHQ7XHJcbiAgICAgICAgICAgICAgICB0ID0gY3QoZSkgPyBlICsgXCJcIiA6IGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQgIT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPT09IDAgPyB0IDogK3RcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0ID0gdC5yZXBsYWNlKHRoLCBcIlwiKTtcclxuICAgICAgICAgICAgdmFyIGkgPSBpaC50ZXN0KHQpO1xyXG4gICAgICAgICAgICByZXR1cm4gaSB8fCBuaC50ZXN0KHQpID8gb2godC5zbGljZSgyKSwgaSA/IDIgOiA4KSA6IGVoLnRlc3QodCkgPyBadSA6ICt0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgc2ggPSByaDtcclxuICAgICAgICB2YXIgYWggPSBcIkV4cGVjdGVkIGEgZnVuY3Rpb25cIjtcclxuICAgICAgICB2YXIgY2ggPSBNYXRoLm1heCwgbGggPSBNYXRoLm1pbjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZGgodCwgZSwgaSkge1xyXG4gICAgICAgICAgICB2YXIgbiwgbywgciwgcywgYSwgYywgbCA9IDAsIGQgPSBmYWxzZSwgdSA9IGZhbHNlLCBoID0gdHJ1ZTtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0ICE9IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihhaClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlID0gc2goZSkgfHwgMDtcclxuICAgICAgICAgICAgaWYgKGN0KGkpKSB7XHJcbiAgICAgICAgICAgICAgICBkID0gISFpLmxlYWRpbmc7XHJcbiAgICAgICAgICAgICAgICB1ID0gXCJtYXhXYWl0XCIgaW4gaTtcclxuICAgICAgICAgICAgICAgIHIgPSB1ID8gY2goc2goaS5tYXhXYWl0KSB8fCAwLCBlKSA6IHI7XHJcbiAgICAgICAgICAgICAgICBoID0gXCJ0cmFpbGluZ1wiIGluIGkgPyAhIWkudHJhaWxpbmcgOiBoXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGYoZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGkgPSBuLCByID0gbztcclxuICAgICAgICAgICAgICAgIG4gPSBvID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgbCA9IGU7XHJcbiAgICAgICAgICAgICAgICBzID0gdC5hcHBseShyLCBpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGcodCkge1xyXG4gICAgICAgICAgICAgICAgbCA9IHQ7XHJcbiAgICAgICAgICAgICAgICBhID0gc2V0VGltZW91dChiLCBlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkID8gZih0KSA6IHNcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gbSh0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IHQgLSBjLCBuID0gdCAtIGwsIG8gPSBlIC0gaTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1ID8gbGgobywgciAtIG4pIDogb1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBwKHQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpID0gdCAtIGMsIG4gPSB0IC0gbDtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjID09PSB1bmRlZmluZWQgfHwgaSA+PSBlIHx8IGkgPCAwIHx8IHUgJiYgbiA+PSByXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGIoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdCA9IFh1KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAocCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB3KHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhID0gc2V0VGltZW91dChiLCBtKHQpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiB3KHQpIHtcclxuICAgICAgICAgICAgICAgIGEgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaCAmJiBuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG4gPSBvID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gaygpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoYSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGwgPSAwO1xyXG4gICAgICAgICAgICAgICAgbiA9IGMgPSBvID0gYSA9IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBfKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGEgPT09IHVuZGVmaW5lZCA/IHMgOiB3KFh1KCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHYoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdCA9IFh1KCksIGkgPSBwKHQpO1xyXG4gICAgICAgICAgICAgICAgbiA9IGFyZ3VtZW50cztcclxuICAgICAgICAgICAgICAgIG8gPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgYyA9IHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGcoYylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhID0gc2V0VGltZW91dChiLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYoYylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYSA9IHNldFRpbWVvdXQoYiwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHYuY2FuY2VsID0gaztcclxuICAgICAgICAgICAgdi5mbHVzaCA9IF87XHJcbiAgICAgICAgICAgIHJldHVybiB2XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgdWggPSBkaDtcclxuXHJcbiAgICAgICAgY2xhc3MgaGggZXh0ZW5kcyBHZCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZVNlbGVjdGlvbkNoYW5nZURvbmVEZWJvdW5jZWQgPSB1aCh0ID0+IHRoaXMuZG9jdW1lbnQuZmlyZShcInNlbGVjdGlvbkNoYW5nZURvbmVcIiwgdCksIDIwMClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb2JzZXJ2ZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgdC5vbihcImtleWRvd25cIiwgKGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4uaXNGYWtlICYmIGZoKGkua2V5Q29kZSkgJiYgdGhpcy5pc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVTZWxlY3Rpb25Nb3ZlKGkua2V5Q29kZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwibG93ZXN0XCJ9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlyZVNlbGVjdGlvbkNoYW5nZURvbmVEZWJvdW5jZWQuY2FuY2VsKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2hhbmRsZVNlbGVjdGlvbk1vdmUodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZG9jdW1lbnQuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBnbChlLmdldFJhbmdlcygpLCB7YmFja3dhcmQ6IGUuaXNCYWNrd2FyZCwgZmFrZTogZmFsc2V9KTtcclxuICAgICAgICAgICAgICAgIGlmICh0ID09IE5sLmFycm93bGVmdCB8fCB0ID09IE5sLmFycm93dXApIHtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldFRvKGkuZ2V0Rmlyc3RQb3NpdGlvbigpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQgPT0gTmwuYXJyb3dyaWdodCB8fCB0ID09IE5sLmFycm93ZG93bikge1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0VG8oaS5nZXRMYXN0UG9zaXRpb24oKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB7b2xkU2VsZWN0aW9uOiBlLCBuZXdTZWxlY3Rpb246IGksIGRvbVNlbGVjdGlvbjogbnVsbH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50LmZpcmUoXCJzZWxlY3Rpb25DaGFuZ2VcIiwgbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlU2VsZWN0aW9uQ2hhbmdlRG9uZURlYm91bmNlZChuKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBmaCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0ID09IE5sLmFycm93cmlnaHQgfHwgdCA9PSBObC5hcnJvd2xlZnQgfHwgdCA9PSBObC5hcnJvd3VwIHx8IHQgPT0gTmwuYXJyb3dkb3duXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBnaCBleHRlbmRzIEdkIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm11dGF0aW9uT2JzZXJ2ZXIgPSB0LmdldE9ic2VydmVyKEd1KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uID0gdGhpcy5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvbUNvbnZlcnRlciA9IHQuZG9tQ29udmVydGVyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZG9jdW1lbnRzID0gbmV3IFdlYWtTZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlU2VsZWN0aW9uQ2hhbmdlRG9uZURlYm91bmNlZCA9IHVoKHQgPT4gdGhpcy5kb2N1bWVudC5maXJlKFwic2VsZWN0aW9uQ2hhbmdlRG9uZVwiLCB0KSwgMjAwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NsZWFySW5maW5pdGVMb29wSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB0aGlzLl9jbGVhckluZmluaXRlTG9vcCgpLCAxZTMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbG9vcGJhY2tDb3VudGVyID0gMFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvYnNlcnZlKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm93bmVyRG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZG9jdW1lbnRzLmhhcyhlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhlLCBcInNlbGVjdGlvbmNoYW5nZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlU2VsZWN0aW9uQ2hhbmdlKGUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RvY3VtZW50cy5hZGQoZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5fY2xlYXJJbmZpbml0ZUxvb3BJbnRlcnZhbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlU2VsZWN0aW9uQ2hhbmdlRG9uZURlYm91bmNlZC5jYW5jZWwoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfaGFuZGxlU2VsZWN0aW9uQ2hhbmdlKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubXV0YXRpb25PYnNlcnZlci5mbHVzaCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZGVmYXVsdFZpZXcuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5kb21Db252ZXJ0ZXIuZG9tU2VsZWN0aW9uVG9WaWV3KGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkucmFuZ2VDb3VudCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb24uaXNFcXVhbChpKSAmJiB0aGlzLmRvbUNvbnZlcnRlci5pc0RvbVNlbGVjdGlvbkNvcnJlY3QoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgrK3RoaXMuX2xvb3BiYWNrQ291bnRlciA+IDYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb24uaXNTaW1pbGFyKGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LmZvcmNlUmVuZGVyKClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHtvbGRTZWxlY3Rpb246IHRoaXMuc2VsZWN0aW9uLCBuZXdTZWxlY3Rpb246IGksIGRvbVNlbGVjdGlvbjogZX07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5maXJlKFwic2VsZWN0aW9uQ2hhbmdlXCIsIHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmVTZWxlY3Rpb25DaGFuZ2VEb25lRGVib3VuY2VkKHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jbGVhckluZmluaXRlTG9vcCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xvb3BiYWNrQ291bnRlciA9IDBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgbWggZXh0ZW5kcyBKdSB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb21FdmVudFR5cGUgPSBbXCJmb2N1c1wiLCBcImJsdXJcIl07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVzZUNhcHR1cmUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBlLm9uKFwiZm9jdXNcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuaXNGb2N1c2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJUaW1lb3V0SWQgPSBzZXRUaW1lb3V0KCgpID0+IHQuZm9yY2VSZW5kZXIoKSwgNTApXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGUub24oXCJibHVyXCIsIChpLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IGUuc2VsZWN0aW9uLmVkaXRhYmxlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobyA9PT0gbnVsbCB8fCBvID09PSBuLnRhcmdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmlzRm9jdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmZvcmNlUmVuZGVyKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvbkRvbUV2ZW50KHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh0LnR5cGUsIHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVuZGVyVGltZW91dElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuX3JlbmRlclRpbWVvdXRJZClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN1cGVyLmRlc3Ryb3koKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBwaCBleHRlbmRzIEp1IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvbUV2ZW50VHlwZSA9IFtcImNvbXBvc2l0aW9uc3RhcnRcIiwgXCJjb21wb3NpdGlvbnVwZGF0ZVwiLCBcImNvbXBvc2l0aW9uZW5kXCJdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBlLm9uKFwiY29tcG9zaXRpb25zdGFydFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5pc0NvbXBvc2luZyA9IHRydWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZS5vbihcImNvbXBvc2l0aW9uZW5kXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlLmlzQ29tcG9zaW5nID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9uRG9tRXZlbnQodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKHQudHlwZSwgdClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgYmggZXh0ZW5kcyBKdSB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb21FdmVudFR5cGUgPSBbXCJiZWZvcmVpbnB1dFwiXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvbkRvbUV2ZW50KHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh0LnR5cGUsIHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdoKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkodCkgPT0gXCJbb2JqZWN0IFJhbmdlXVwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBraCh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSh0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRvcDogcGFyc2VJbnQoZS5ib3JkZXJUb3BXaWR0aCwgMTApLFxyXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHBhcnNlSW50KGUuYm9yZGVyUmlnaHRXaWR0aCwgMTApLFxyXG4gICAgICAgICAgICAgICAgYm90dG9tOiBwYXJzZUludChlLmJvcmRlckJvdHRvbVdpZHRoLCAxMCksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiBwYXJzZUludChlLmJvcmRlckxlZnRXaWR0aCwgMTApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IF9oID0gW1widG9wXCIsIFwicmlnaHRcIiwgXCJib3R0b21cIiwgXCJsZWZ0XCIsIFwid2lkdGhcIiwgXCJoZWlnaHRcIl07XHJcblxyXG4gICAgICAgIGNsYXNzIHZoIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHdoKHQpO1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwiX3NvdXJjZVwiLCB7dmFsdWU6IHQuX3NvdXJjZSB8fCB0LCB3cml0YWJsZTogdHJ1ZSwgZW51bWVyYWJsZTogZmFsc2V9KTtcclxuICAgICAgICAgICAgICAgIGlmIChLcih0KSB8fCBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeWgodGhpcywgdmguZ2V0RG9tUmFuZ2VSZWN0cyh0KVswXSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB5aCh0aGlzLCB0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoSGQodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7aW5uZXJXaWR0aDogZSwgaW5uZXJIZWlnaHQ6IGl9ID0gdDtcclxuICAgICAgICAgICAgICAgICAgICB5aCh0aGlzLCB7dG9wOiAwLCByaWdodDogZSwgYm90dG9tOiBpLCBsZWZ0OiAwLCB3aWR0aDogZSwgaGVpZ2h0OiBpfSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeWgodGhpcywgdClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2xvbmUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHZoKHRoaXMpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1vdmVUbyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvcCA9IGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0ID0gdCArIHRoaXMud2lkdGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvdHRvbSA9IGUgKyB0aGlzLmhlaWdodDtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdCA9IHQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBtb3ZlQnkodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b3AgKz0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmlnaHQgKz0gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMubGVmdCArPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ib3R0b20gKz0gZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldEludGVyc2VjdGlvbih0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcDogTWF0aC5tYXgodGhpcy50b3AsIHQudG9wKSxcclxuICAgICAgICAgICAgICAgICAgICByaWdodDogTWF0aC5taW4odGhpcy5yaWdodCwgdC5yaWdodCksXHJcbiAgICAgICAgICAgICAgICAgICAgYm90dG9tOiBNYXRoLm1pbih0aGlzLmJvdHRvbSwgdC5ib3R0b20pLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlZnQ6IE1hdGgubWF4KHRoaXMubGVmdCwgdC5sZWZ0KVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGUud2lkdGggPSBlLnJpZ2h0IC0gZS5sZWZ0O1xyXG4gICAgICAgICAgICAgICAgZS5oZWlnaHQgPSBlLmJvdHRvbSAtIGUudG9wO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUud2lkdGggPCAwIHx8IGUuaGVpZ2h0IDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdmgoZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0SW50ZXJzZWN0aW9uQXJlYSh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5nZXRJbnRlcnNlY3Rpb24odCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmdldEFyZWEoKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRBcmVhKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMud2lkdGggKiB0aGlzLmhlaWdodFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRWaXNpYmxlKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuX3NvdXJjZTtcclxuICAgICAgICAgICAgICAgIGxldCBlID0gdGhpcy5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF4aCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gdC5wYXJlbnROb2RlIHx8IHQuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGkgJiYgIXhoKGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBuZXcgdmgoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLmdldEludGVyc2VjdGlvbih0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuLmdldEFyZWEoKSA8IGUuZ2V0QXJlYSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGkucGFyZW50Tm9kZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzRXF1YWwodCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIF9oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNbZV0gIT09IHRbZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udGFpbnModCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZ2V0SW50ZXJzZWN0aW9uKHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEhKGUgJiYgZS5pc0VxdWFsKHQpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBleGNsdWRlU2Nyb2xsYmFyc0FuZEJvcmRlcnMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5fc291cmNlO1xyXG4gICAgICAgICAgICAgICAgbGV0IGUsIGksIG47XHJcbiAgICAgICAgICAgICAgICBpZiAoSGQodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gdC5pbm5lcldpZHRoIC0gdC5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IHQuaW5uZXJIZWlnaHQgLSB0LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbiA9IHQuZ2V0Q29tcHV0ZWRTdHlsZSh0LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuZGlyZWN0aW9uXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBraCh0aGlzLl9zb3VyY2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0Lm9mZnNldFdpZHRoIC0gdC5jbGllbnRXaWR0aCAtIG8ubGVmdCAtIG8ucmlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IHQub2Zmc2V0SGVpZ2h0IC0gdC5jbGllbnRIZWlnaHQgLSBvLnRvcCAtIG8uYm90dG9tO1xyXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZSh0KS5kaXJlY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sZWZ0ICs9IG8ubGVmdDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRvcCArPSBvLnRvcDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJpZ2h0IC09IG8ucmlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib3R0b20gLT0gby5ib3R0b207XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IHRoaXMucmlnaHQgLSB0aGlzLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB0aGlzLmJvdHRvbSAtIHRoaXMudG9wXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLndpZHRoIC09IGU7XHJcbiAgICAgICAgICAgICAgICBpZiAobiA9PT0gXCJsdHJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmlnaHQgLT0gZVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxlZnQgKz0gZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgLT0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYm90dG9tIC09IGk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0RG9tUmFuZ2VSZWN0cyh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gQXJyYXkuZnJvbSh0LmdldENsaWVudFJlY3RzKCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKG5ldyB2aCh0KSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gdC5zdGFydENvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob2QoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IGkucGFyZW50Tm9kZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IHZoKGkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG4ucmlnaHQgPSBuLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbi53aWR0aCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wdXNoKG4pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB5aCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiBfaCkge1xyXG4gICAgICAgICAgICAgICAgdFtpXSA9IGVbaV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geGgodCkge1xyXG4gICAgICAgICAgICBpZiAoIUtyKHQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdCA9PT0gdC5vd25lckRvY3VtZW50LmJvZHlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IENoID0ge307XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEFoKHt0YXJnZXQ6IHQsIHZpZXdwb3J0T2Zmc2V0OiBlID0gMH0pIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IFZoKHQpO1xyXG4gICAgICAgICAgICBsZXQgbiA9IGk7XHJcbiAgICAgICAgICAgIGxldCBvID0gbnVsbDtcclxuICAgICAgICAgICAgd2hpbGUgKG4pIHtcclxuICAgICAgICAgICAgICAgIGxldCByO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4gPT0gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHIgPSBOaCh0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByID0gTmgobylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFNoKHIsICgpID0+IE1oKHQsIG4pKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBNaCh0LCBuKTtcclxuICAgICAgICAgICAgICAgIFBoKG4sIHMsIGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4ucGFyZW50ICE9IG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBvID0gbi5mcmFtZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbiA9IG4ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG4gPSBudWxsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFRoKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IE5oKHQpO1xyXG4gICAgICAgICAgICBTaChlLCAoKSA9PiBuZXcgdmgodCkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBPYmplY3QuYXNzaWduKENoLCB7c2Nyb2xsVmlld3BvcnRUb1Nob3dUYXJnZXQ6IEFoLCBzY3JvbGxBbmNlc3RvcnNUb1Nob3dUYXJnZXQ6IFRofSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFBoKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGUuY2xvbmUoKS5tb3ZlQnkoMCwgaSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBlLmNsb25lKCkubW92ZUJ5KDAsIC1pKTtcclxuICAgICAgICAgICAgY29uc3QgciA9IG5ldyB2aCh0KS5leGNsdWRlU2Nyb2xsYmFyc0FuZEJvcmRlcnMoKTtcclxuICAgICAgICAgICAgY29uc3QgcyA9IFtvLCBuXTtcclxuICAgICAgICAgICAgaWYgKCFzLmV2ZXJ5KHQgPT4gci5jb250YWlucyh0KSkpIHtcclxuICAgICAgICAgICAgICAgIGxldCB7c2Nyb2xsWDogcywgc2Nyb2xsWTogYX0gPSB0O1xyXG4gICAgICAgICAgICAgICAgaWYgKFJoKG8sIHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYSAtPSByLnRvcCAtIGUudG9wICsgaVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChFaChuLCByKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGEgKz0gZS5ib3R0b20gLSByLmJvdHRvbSArIGlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChPaChlLCByKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHMgLT0gci5sZWZ0IC0gZS5sZWZ0ICsgaVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChJaChlLCByKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHMgKz0gZS5yaWdodCAtIHIucmlnaHQgKyBpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0LnNjcm9sbFRvKHMsIGEpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFNoKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IFZoKHQpO1xyXG4gICAgICAgICAgICBsZXQgbiwgbztcclxuICAgICAgICAgICAgd2hpbGUgKHQgIT0gaS5kb2N1bWVudC5ib2R5KSB7XHJcbiAgICAgICAgICAgICAgICBvID0gZSgpO1xyXG4gICAgICAgICAgICAgICAgbiA9IG5ldyB2aCh0KS5leGNsdWRlU2Nyb2xsYmFyc0FuZEJvcmRlcnMoKTtcclxuICAgICAgICAgICAgICAgIGlmICghbi5jb250YWlucyhvKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChSaChvLCBuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnNjcm9sbFRvcCAtPSBuLnRvcCAtIG8udG9wXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChFaChvLCBuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnNjcm9sbFRvcCArPSBvLmJvdHRvbSAtIG4uYm90dG9tXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChPaChvLCBuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnNjcm9sbExlZnQgLT0gbi5sZWZ0IC0gby5sZWZ0XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChJaChvLCBuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnNjcm9sbExlZnQgKz0gby5yaWdodCAtIG4ucmlnaHRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0ID0gdC5wYXJlbnROb2RlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEVoKHQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQuYm90dG9tID4gZS5ib3R0b21cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFJoKHQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQudG9wIDwgZS50b3BcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE9oKHQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQubGVmdCA8IGUubGVmdFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSWgodCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdC5yaWdodCA+IGUucmlnaHRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFZoKHQpIHtcclxuICAgICAgICAgICAgaWYgKHdoKHQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5zdGFydENvbnRhaW5lci5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE5oKHQpIHtcclxuICAgICAgICAgICAgaWYgKHdoKHQpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZSA9IHQuY29tbW9uQW5jZXN0b3JDb250YWluZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAob2QoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gZS5wYXJlbnROb2RlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQucGFyZW50Tm9kZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBNaCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBWaCh0KTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IG5ldyB2aCh0KTtcclxuICAgICAgICAgICAgaWYgKGkgPT09IGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdCA9IGk7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodCAhPSBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZnJhbWVFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgdmgoZSkuZXhjbHVkZVNjcm9sbGJhcnNBbmRCb3JkZXJzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5tb3ZlQnkoaS5sZWZ0LCBpLnRvcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IHQucGFyZW50XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIEJoIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudCA9IG5ldyBwbCh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9tQ29udmVydGVyID0gbmV3IHpkKHRoaXMuZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb21Sb290cyA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImlzUmVuZGVyaW5nSW5Qcm9ncmVzc1wiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlciA9IG5ldyBDZCh0aGlzLmRvbUNvbnZlcnRlciwgdGhpcy5kb2N1bWVudC5zZWxlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuYmluZChcImlzRm9jdXNlZFwiKS50byh0aGlzLmRvY3VtZW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2luaXRpYWxEb21Sb290QXR0cmlidXRlcyA9IG5ldyBXZWFrTWFwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb2JzZXJ2ZXJzID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29uZ29pbmdDaGFuZ2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Bvc3RGaXhlcnNJblByb2dyZXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJpbmdEaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGFzQ2hhbmdlZFNpbmNlVGhlTGFzdFJlbmRlcmluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd3JpdGVyID0gbmV3ICRsKHRoaXMuZG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRPYnNlcnZlcihHdSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZE9ic2VydmVyKGdoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkT2JzZXJ2ZXIobWgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGRPYnNlcnZlcihZdSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZE9ic2VydmVyKGhoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkT2JzZXJ2ZXIocGgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKEFsLmlzQW5kcm9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRkT2JzZXJ2ZXIoYmgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBoZCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGpsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbihcInJlbmRlclwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5maXJlKFwibGF5b3V0Q2hhbmdlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYXNDaGFuZ2VkU2luY2VUaGVMYXN0UmVuZGVyaW5nID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLmRvY3VtZW50LnNlbGVjdGlvbiwgXCJjaGFuZ2VcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhc0NoYW5nZWRTaW5jZVRoZUxhc3RSZW5kZXJpbmcgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhdHRhY2hEb21Sb290KHQsIGUgPSBcIm1haW5cIikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZG9jdW1lbnQuZ2V0Um9vdChlKTtcclxuICAgICAgICAgICAgICAgIGkuX25hbWUgPSB0LnRhZ05hbWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB7fTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3Qge25hbWU6IGUsIHZhbHVlOiBvfSBvZiBBcnJheS5mcm9tKHQuYXR0cmlidXRlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICBuW2VdID0gbztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZSA9PT0gXCJjbGFzc1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3dyaXRlci5hZGRDbGFzcyhvLnNwbGl0KFwiIFwiKSwgaSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl93cml0ZXIuc2V0QXR0cmlidXRlKGUsIG8sIGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5pdGlhbERvbVJvb3RBdHRyaWJ1dGVzLnNldCh0LCBuKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fd3JpdGVyLnNldEF0dHJpYnV0ZShcImNvbnRlbnRlZGl0YWJsZVwiLCAhaS5pc1JlYWRPbmx5LCBpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaS5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3dyaXRlci5hZGRDbGFzcyhcImNrLXJlYWQtb25seVwiLCBpKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3dyaXRlci5yZW1vdmVDbGFzcyhcImNrLXJlYWQtb25seVwiLCBpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBvKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvbVJvb3RzLnNldChlLCB0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9tQ29udmVydGVyLmJpbmRFbGVtZW50cyh0LCBpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLm1hcmtUb1N5bmMoXCJjaGlsZHJlblwiLCBpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLm1hcmtUb1N5bmMoXCJhdHRyaWJ1dGVzXCIsIGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuZG9tRG9jdW1lbnRzLmFkZCh0Lm93bmVyRG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgaS5vbihcImNoYW5nZTpjaGlsZHJlblwiLCAodCwgZSkgPT4gdGhpcy5fcmVuZGVyZXIubWFya1RvU3luYyhcImNoaWxkcmVuXCIsIGUpKTtcclxuICAgICAgICAgICAgICAgIGkub24oXCJjaGFuZ2U6YXR0cmlidXRlc1wiLCAodCwgZSkgPT4gdGhpcy5fcmVuZGVyZXIubWFya1RvU3luYyhcImF0dHJpYnV0ZXNcIiwgZSkpO1xyXG4gICAgICAgICAgICAgICAgaS5vbihcImNoYW5nZTp0ZXh0XCIsICh0LCBlKSA9PiB0aGlzLl9yZW5kZXJlci5tYXJrVG9TeW5jKFwidGV4dFwiLCBlKSk7XHJcbiAgICAgICAgICAgICAgICBpLm9uKFwiY2hhbmdlOmlzUmVhZE9ubHlcIiwgKCkgPT4gdGhpcy5jaGFuZ2UobykpO1xyXG4gICAgICAgICAgICAgICAgaS5vbihcImNoYW5nZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFzQ2hhbmdlZFNpbmNlVGhlTGFzdFJlbmRlcmluZyA9IHRydWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHRoaXMuX29ic2VydmVycy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGkub2JzZXJ2ZSh0LCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXRhY2hEb21Sb290KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmRvbVJvb3RzLmdldCh0KTtcclxuICAgICAgICAgICAgICAgIEFycmF5LmZyb20oZS5hdHRyaWJ1dGVzKS5mb3JFYWNoKCh7bmFtZTogdH0pID0+IGUucmVtb3ZlQXR0cmlidXRlKHQpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9pbml0aWFsRG9tUm9vdEF0dHJpYnV0ZXMuZ2V0KGUpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IGluIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZSh0LCBpW3RdKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5kb21Sb290cy5kZWxldGUodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvbUNvbnZlcnRlci51bmJpbmREb21FbGVtZW50KGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldERvbVJvb3QodCA9IFwibWFpblwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kb21Sb290cy5nZXQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWRkT2JzZXJ2ZXIodCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGUgPSB0aGlzLl9vYnNlcnZlcnMuZ2V0KHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZSA9IG5ldyB0KHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb2JzZXJ2ZXJzLnNldCh0LCBlKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW3QsIGldIG9mIHRoaXMuZG9tUm9vdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLm9ic2VydmUoaSwgdClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGUuZW5hYmxlKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRPYnNlcnZlcih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fb2JzZXJ2ZXJzLmdldCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkaXNhYmxlT2JzZXJ2ZXJzKCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMuX29ic2VydmVycy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuZGlzYWJsZSgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVuYWJsZU9ic2VydmVycygpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLl9vYnNlcnZlcnMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LmVuYWJsZSgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNjcm9sbFRvVGhlU2VsZWN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZG9jdW1lbnQuc2VsZWN0aW9uLmdldEZpcnN0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgQWgoe3RhcmdldDogdGhpcy5kb21Db252ZXJ0ZXIudmlld1JhbmdlVG9Eb20odCksIHZpZXdwb3J0T2Zmc2V0OiAyMH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvY3VzKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmRvY3VtZW50LmlzRm9jdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmRvY3VtZW50LnNlbGVjdGlvbi5lZGl0YWJsZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb21Db252ZXJ0ZXIuZm9jdXModCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VSZW5kZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjaGFuZ2UodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNSZW5kZXJpbmdJblByb2dyZXNzIHx8IHRoaXMuX3Bvc3RGaXhlcnNJblByb2dyZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcImNhbm5vdC1jaGFuZ2Utdmlldy10cmVlOiBcIiArIFwiQXR0ZW1wdGluZyB0byBtYWtlIGNoYW5nZXMgdG8gdGhlIHZpZXcgd2hlbiBpdCBpcyBpbiBhbiBpbmNvcnJlY3Qgc3RhdGU6IHJlbmRlcmluZyBvciBwb3N0LWZpeGVycyBhcmUgaW4gcHJvZ3Jlc3MuIFwiICsgXCJUaGlzIG1heSBjYXVzZSBzb21lIHVuZXhwZWN0ZWQgYmVoYXZpb3IgYW5kIGluY29uc2lzdGVuY3kgYmV0d2VlbiB0aGUgRE9NIGFuZCB0aGUgdmlldy5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX29uZ29pbmdDaGFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQodGhpcy5fd3JpdGVyKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9vbmdvaW5nQ2hhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdCh0aGlzLl93cml0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29uZ29pbmdDaGFuZ2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3JlbmRlcmluZ0Rpc2FibGVkICYmIHRoaXMuX2hhc0NoYW5nZWRTaW5jZVRoZUxhc3RSZW5kZXJpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcG9zdEZpeGVyc0luUHJvZ3Jlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50Ll9jYWxsUG9zdEZpeGVycyh0aGlzLl93cml0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wb3N0Rml4ZXJzSW5Qcm9ncmVzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJyZW5kZXJcIilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzc1tcImJcIl0ucmV0aHJvd1VuZXhwZWN0ZWRFcnJvcih0LCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3JjZVJlbmRlcigpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hhc0NoYW5nZWRTaW5jZVRoZUxhc3RSZW5kZXJpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGFuZ2UoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLl9vYnNlcnZlcnMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LmRlc3Ryb3koKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVQb3NpdGlvbkF0KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkbC5fY3JlYXRlQXQodCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlUG9zaXRpb25BZnRlcih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGwuX2NyZWF0ZUFmdGVyKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZVBvc2l0aW9uQmVmb3JlKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkbC5fY3JlYXRlQmVmb3JlKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZVJhbmdlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdWwodCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlUmFuZ2VPbih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdWwuX2NyZWF0ZU9uKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZVJhbmdlSW4odCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVsLl9jcmVhdGVJbih0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVTZWxlY3Rpb24odCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBnbCh0LCBlLCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZGlzYWJsZVJlbmRlcmluZyh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJpbmdEaXNhYmxlZCA9IHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodCA9PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hhbmdlKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVuZGVyKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1JlbmRlcmluZ0luUHJvZ3Jlc3MgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXNhYmxlT2JzZXJ2ZXJzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW5hYmxlT2JzZXJ2ZXJzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzUmVuZGVyaW5nSW5Qcm9ncmVzcyA9IGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKEJoLCBKYyk7XHJcblxyXG4gICAgICAgIGNsYXNzIHpoIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYXJlbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXR0cnMgPSBIcyh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgaW5kZXgoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdDtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCh0ID0gdGhpcy5wYXJlbnQuZ2V0Q2hpbGRJbmRleCh0aGlzKSkgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibW9kZWwtbm9kZS1ub3QtZm91bmQtaW4tcGFyZW50OiBUaGUgbm9kZSdzIHBhcmVudCBkb2VzIG5vdCBjb250YWluIHRoaXMgbm9kZS5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBzdGFydE9mZnNldCgpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0O1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoKHQgPSB0aGlzLnBhcmVudC5nZXRDaGlsZFN0YXJ0T2Zmc2V0KHRoaXMpKSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJtb2RlbC1ub2RlLW5vdC1mb3VuZC1pbi1wYXJlbnQ6IFRoZSBub2RlJ3MgcGFyZW50IGRvZXMgbm90IGNvbnRhaW4gdGhpcyBub2RlLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IG9mZnNldFNpemUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgZW5kT2Zmc2V0KCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydE9mZnNldCArIHRoaXMub2Zmc2V0U2l6ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgbmV4dFNpYmxpbmcoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5pbmRleDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ICE9PSBudWxsICYmIHRoaXMucGFyZW50LmdldENoaWxkKHQgKyAxKSB8fCBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBwcmV2aW91c1NpYmxpbmcoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5pbmRleDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ICE9PSBudWxsICYmIHRoaXMucGFyZW50LmdldENoaWxkKHQgLSAxKSB8fCBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCByb290KCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHQgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHQucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IHQucGFyZW50XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc0F0dGFjaGVkKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucm9vdC5pcyhcInJvb3RFbGVtZW50XCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFBhdGgoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gW107XHJcbiAgICAgICAgICAgICAgICBsZXQgZSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoZS5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LnVuc2hpZnQoZS5zdGFydE9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IGUucGFyZW50XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRBbmNlc3RvcnModCA9IHtpbmNsdWRlU2VsZjogZmFsc2UsIHBhcmVudEZpcnN0OiBmYWxzZX0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCBpID0gdC5pbmNsdWRlU2VsZiA/IHRoaXMgOiB0aGlzLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZVt0LnBhcmVudEZpcnN0ID8gXCJwdXNoXCIgOiBcInVuc2hpZnRcIl0oaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IGkucGFyZW50XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRDb21tb25BbmNlc3Rvcih0LCBlID0ge30pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmdldEFuY2VzdG9ycyhlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LmdldEFuY2VzdG9ycyhlKTtcclxuICAgICAgICAgICAgICAgIGxldCBvID0gMDtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChpW29dID09IG5bb10gJiYgaVtvXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG8rK1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG8gPT09IDAgPyBudWxsIDogaVtvIC0gMV1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNCZWZvcmUodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMgPT0gdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucm9vdCAhPT0gdC5yb290KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5nZXRQYXRoKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5nZXRQYXRoKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gVnMoZSwgaSk7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlXCJwcmVmaXhcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZVwiZXh0ZW5zaW9uXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZVtuXSA8IGlbbl1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNBZnRlcih0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcyA9PSB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb290ICE9PSB0LnJvb3QpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAhdGhpcy5pc0JlZm9yZSh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBoYXNBdHRyaWJ1dGUodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F0dHJzLmhhcyh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRBdHRyaWJ1dGUodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F0dHJzLmdldCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F0dHJzLmVudHJpZXMoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRBdHRyaWJ1dGVLZXlzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F0dHJzLmtleXMoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0ge307XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYXR0cnMuc2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuYXR0cmlidXRlcyA9IEFycmF5LmZyb20odGhpcy5fYXR0cnMpLnJlZHVjZSgodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0W2VbMF1dID0gZVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgICAgICAgICB9LCB7fSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ID09IFwibm9kZVwiIHx8IHQgPT0gXCJtb2RlbDpub2RlXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2Nsb25lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB6aCh0aGlzLl9hdHRycylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3JlbW92ZSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFyZW50Ll9yZW1vdmVDaGlsZHJlbih0aGlzLmluZGV4KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2V0QXR0cmlidXRlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2F0dHJzLnNldCh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2V0QXR0cmlidXRlc1RvKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2F0dHJzID0gSHModClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3JlbW92ZUF0dHJpYnV0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYXR0cnMuZGVsZXRlKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jbGVhckF0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hdHRycy5jbGVhcigpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIExoIGV4dGVuZHMgemgge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcihlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RhdGEgPSB0IHx8IFwiXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IG9mZnNldFNpemUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kYXRhLmxlbmd0aFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgZGF0YSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kYXRhXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ID09IFwidGV4dFwiIHx8IHQgPT0gXCJtb2RlbDp0ZXh0XCIgfHwgc3VwZXIuaXModClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9KU09OKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHN1cGVyLnRvSlNPTigpO1xyXG4gICAgICAgICAgICAgICAgdC5kYXRhID0gdGhpcy5kYXRhO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2Nsb25lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMaCh0aGlzLmRhdGEsIHRoaXMuZ2V0QXR0cmlidXRlcygpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZnJvbUpTT04odCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMaCh0LmRhdGEsIHQuYXR0cmlidXRlcylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgRmgge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRleHROb2RlID0gdDtcclxuICAgICAgICAgICAgICAgIGlmIChlIDwgMCB8fCBlID4gdC5vZmZzZXRTaXplKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIm1vZGVsLXRleHRwcm94eS13cm9uZy1vZmZzZXRpbnRleHQ6IEdpdmVuIG9mZnNldEluVGV4dCB2YWx1ZSBpcyBpbmNvcnJlY3QuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA8IDAgfHwgZSArIGkgPiB0Lm9mZnNldFNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibW9kZWwtdGV4dHByb3h5LXdyb25nLWxlbmd0aDogR2l2ZW4gbGVuZ3RoIHZhbHVlIGlzIGluY29ycmVjdC5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IHQuZGF0YS5zdWJzdHJpbmcoZSwgZSArIGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vZmZzZXRJblRleHQgPSBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBzdGFydE9mZnNldCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHROb2RlLnN0YXJ0T2Zmc2V0ICE9PSBudWxsID8gdGhpcy50ZXh0Tm9kZS5zdGFydE9mZnNldCArIHRoaXMub2Zmc2V0SW5UZXh0IDogbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgb2Zmc2V0U2l6ZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEubGVuZ3RoXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBlbmRPZmZzZXQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydE9mZnNldCAhPT0gbnVsbCA/IHRoaXMuc3RhcnRPZmZzZXQgKyB0aGlzLm9mZnNldFNpemUgOiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBpc1BhcnRpYWwoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXRTaXplICE9PSB0aGlzLnRleHROb2RlLm9mZnNldFNpemVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHBhcmVudCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHROb2RlLnBhcmVudFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgcm9vdCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHROb2RlLnJvb3RcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXModCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPT0gXCJ0ZXh0UHJveHlcIiB8fCB0ID09IFwibW9kZWw6dGV4dFByb3h5XCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0UGF0aCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnRleHROb2RlLmdldFBhdGgoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0W3QubGVuZ3RoIC0gMV0gKz0gdGhpcy5vZmZzZXRJblRleHRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldEFuY2VzdG9ycyh0ID0ge2luY2x1ZGVTZWxmOiBmYWxzZSwgcGFyZW50Rmlyc3Q6IGZhbHNlfSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSB0LmluY2x1ZGVTZWxmID8gdGhpcyA6IHRoaXMucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlW3QucGFyZW50Rmlyc3QgPyBcInB1c2hcIiA6IFwidW5zaGlmdFwiXShpKTtcclxuICAgICAgICAgICAgICAgICAgICBpID0gaS5wYXJlbnRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGhhc0F0dHJpYnV0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0Tm9kZS5oYXNBdHRyaWJ1dGUodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0QXR0cmlidXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHROb2RlLmdldEF0dHJpYnV0ZSh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dE5vZGUuZ2V0QXR0cmlidXRlcygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldEF0dHJpYnV0ZUtleXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0Tm9kZS5nZXRBdHRyaWJ1dGVLZXlzKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgRGgge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ub2RlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnNlcnROb2RlcygwLCB0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub2Rlc1tTeW1ib2wuaXRlcmF0b3JdKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGxlbmd0aCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub2Rlcy5sZW5ndGhcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IG1heE9mZnNldCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub2Rlcy5yZWR1Y2UoKHQsIGUpID0+IHQgKyBlLm9mZnNldFNpemUsIDApXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldE5vZGUodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25vZGVzW3RdIHx8IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0Tm9kZUluZGV4KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLl9ub2Rlcy5pbmRleE9mKHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgPT0gLTEgPyBudWxsIDogZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXROb2RlU3RhcnRPZmZzZXQodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZ2V0Tm9kZUluZGV4KHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgPT09IG51bGwgPyBudWxsIDogdGhpcy5fbm9kZXMuc2xpY2UoMCwgZSkucmVkdWNlKCh0LCBlKSA9PiB0ICsgZS5vZmZzZXRTaXplLCAwKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbmRleFRvT2Zmc2V0KHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0ID09IHRoaXMuX25vZGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1heE9mZnNldFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuX25vZGVzW3RdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIm1vZGVsLW5vZGVsaXN0LWluZGV4LW91dC1vZi1ib3VuZHM6IEdpdmVuIGluZGV4IGNhbm5vdCBiZSBmb3VuZCBpbiB0aGUgbm9kZSBsaXN0LlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Tm9kZVN0YXJ0T2Zmc2V0KGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9mZnNldFRvSW5kZXgodCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGUgPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHRoaXMuX25vZGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPj0gZSAmJiB0IDwgZSArIGkub2Zmc2V0U2l6ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5nZXROb2RlSW5kZXgoaSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZSArPSBpLm9mZnNldFNpemVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlICE9IHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibW9kZWwtbm9kZWxpc3Qtb2Zmc2V0LW91dC1vZi1ib3VuZHM6IEdpdmVuIG9mZnNldCBjYW5ub3QgYmUgZm91bmQgaW4gdGhlIG5vZGUgbGlzdC5cIiwgdGhpcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQ6IHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVMaXN0OiB0aGlzXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxlbmd0aFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfaW5zZXJ0Tm9kZXModCwgZSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0IGluc3RhbmNlb2YgemgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJtb2RlbC1ub2RlbGlzdC1pbnNlcnROb2Rlcy1ub3Qtbm9kZTogVHJ5aW5nIHRvIGluc2VydCBhbiBvYmplY3Qgd2hpY2ggaXMgbm90IGEgTm9kZSBpbnN0YW5jZS5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9ub2Rlcy5zcGxpY2UodCwgMCwgLi4uZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3JlbW92ZU5vZGVzKHQsIGUgPSAxKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbm9kZXMuc3BsaWNlKHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRvSlNPTigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ub2Rlcy5tYXAodCA9PiB0LnRvSlNPTigpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBqaCBleHRlbmRzIHpoIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIoZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hpbGRyZW4gPSBuZXcgRGg7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2luc2VydENoaWxkKDAsIGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBjaGlsZENvdW50KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLmxlbmd0aFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgbWF4T2Zmc2V0KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLm1heE9mZnNldFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgaXNFbXB0eSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkQ291bnQgPT09IDBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXModCwgZSA9IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnJlcGxhY2UoL15tb2RlbDovLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpID09IFwiZWxlbWVudFwiIHx8IGkgPT0gdGhpcy5uYW1lIHx8IHN1cGVyLmlzKHQpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpID09IFwiZWxlbWVudFwiICYmIGUgPT0gdGhpcy5uYW1lXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENoaWxkKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5nZXROb2RlKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENoaWxkcmVuKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuW1N5bWJvbC5pdGVyYXRvcl0oKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRDaGlsZEluZGV4KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5nZXROb2RlSW5kZXgodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0Q2hpbGRTdGFydE9mZnNldCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW4uZ2V0Tm9kZVN0YXJ0T2Zmc2V0KHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG9mZnNldFRvSW5kZXgodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLm9mZnNldFRvSW5kZXgodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0Tm9kZUJ5UGF0aCh0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZSA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSBlLmdldENoaWxkKGUub2Zmc2V0VG9JbmRleChpKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRvSlNPTigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBzdXBlci50b0pTT04oKTtcclxuICAgICAgICAgICAgICAgIHQubmFtZSA9IHRoaXMubmFtZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jaGlsZHJlbi5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5jaGlsZHJlbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLl9jaGlsZHJlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmNoaWxkcmVuLnB1c2goZS50b0pTT04oKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY2xvbmUodCA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdCA/IEFycmF5LmZyb20odGhpcy5fY2hpbGRyZW4pLm1hcCh0ID0+IHQuX2Nsb25lKHRydWUpKSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGpoKHRoaXMubmFtZSwgdGhpcy5nZXRBdHRyaWJ1dGVzKCksIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9hcHBlbmRDaGlsZCh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnNlcnRDaGlsZCh0aGlzLmNoaWxkQ291bnQsIHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9pbnNlcnRDaGlsZCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gSGgoZSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LnBhcmVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0Ll9yZW1vdmUoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0LnBhcmVudCA9IHRoaXNcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLl9pbnNlcnROb2Rlcyh0LCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVtb3ZlQ2hpbGRyZW4odCwgZSA9IDEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9jaGlsZHJlbi5fcmVtb3ZlTm9kZXModCwgZSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQucGFyZW50ID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGZyb21KU09OKHQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmICh0LmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0LmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChqaC5mcm9tSlNPTihpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChMaC5mcm9tSlNPTihpKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgamgodC5uYW1lLCB0LmF0dHJpYnV0ZXMsIGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEhoKHQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0ID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbbmV3IExoKHQpXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghanModCkpIHtcclxuICAgICAgICAgICAgICAgIHQgPSBbdF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0KS5tYXAodCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTGgodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgRmgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExoKHQuZGF0YSwgdC5nZXRBdHRyaWJ1dGVzKCkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgV2gge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0ID0ge30pIHtcclxuICAgICAgICAgICAgICAgIGlmICghdC5ib3VuZGFyaWVzICYmICF0LnN0YXJ0UG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibW9kZWwtdHJlZS13YWxrZXItbm8tc3RhcnQtcG9zaXRpb246IE5laXRoZXIgYm91bmRhcmllcyBub3Igc3RhcnRpbmcgcG9zaXRpb24gaGF2ZSBiZWVuIGRlZmluZWQuXCIsIG51bGwpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5kaXJlY3Rpb24gfHwgXCJmb3J3YXJkXCI7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSAhPSBcImZvcndhcmRcIiAmJiBlICE9IFwiYmFja3dhcmRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJtb2RlbC10cmVlLXdhbGtlci11bmtub3duLWRpcmVjdGlvbjogT25seSBgYmFja3dhcmRgIGFuZCBgZm9yd2FyZGAgZGlyZWN0aW9uIGFsbG93ZWQuXCIsIHQsIHtkaXJlY3Rpb246IGV9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ib3VuZGFyaWVzID0gdC5ib3VuZGFyaWVzIHx8IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5zdGFydFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHQuc3RhcnRQb3NpdGlvbi5jbG9uZSgpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBVaC5fY3JlYXRlQXQodGhpcy5ib3VuZGFyaWVzW3RoaXMuZGlyZWN0aW9uID09IFwiYmFja3dhcmRcIiA/IFwiZW5kXCIgOiBcInN0YXJ0XCJdKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbi5zdGlja2luZXNzID0gXCJ0b05vbmVcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2luZ2xlQ2hhcmFjdGVycyA9ICEhdC5zaW5nbGVDaGFyYWN0ZXJzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zaGFsbG93ID0gISF0LnNoYWxsb3c7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlnbm9yZUVsZW1lbnRFbmQgPSAhIXQuaWdub3JlRWxlbWVudEVuZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JvdW5kYXJ5U3RhcnRQYXJlbnQgPSB0aGlzLmJvdW5kYXJpZXMgPyB0aGlzLmJvdW5kYXJpZXMuc3RhcnQucGFyZW50IDogbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JvdW5kYXJ5RW5kUGFyZW50ID0gdGhpcy5ib3VuZGFyaWVzID8gdGhpcy5ib3VuZGFyaWVzLmVuZC5wYXJlbnQgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmlzaXRlZFBhcmVudCA9IHRoaXMucG9zaXRpb24ucGFyZW50XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2tpcCh0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZSwgaSwgbiwgbztcclxuICAgICAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgICAgICBuID0gdGhpcy5wb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBvID0gdGhpcy5fdmlzaXRlZFBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICAoe2RvbmU6IGUsIHZhbHVlOiBpfSA9IHRoaXMubmV4dCgpKVxyXG4gICAgICAgICAgICAgICAgfSB3aGlsZSAoIWUgJiYgdChpKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gbjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92aXNpdGVkUGFyZW50ID0gb1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBuZXh0KCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlyZWN0aW9uID09IFwiZm9yd2FyZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX25leHQoKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJldmlvdXMoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfbmV4dCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMucG9zaXRpb24uY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl92aXNpdGVkUGFyZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKGkucGFyZW50ID09PSBudWxsICYmIGUub2Zmc2V0ID09PSBpLm1heE9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7ZG9uZTogdHJ1ZX1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpID09PSB0aGlzLl9ib3VuZGFyeUVuZFBhcmVudCAmJiBlLm9mZnNldCA9PSB0aGlzLmJvdW5kYXJpZXMuZW5kLm9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7ZG9uZTogdHJ1ZX1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLnRleHROb2RlID8gZS50ZXh0Tm9kZSA6IGUubm9kZUFmdGVyO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4gaW5zdGFuY2VvZiBqaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5zaGFsbG93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucGF0aC5wdXNoKDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92aXNpdGVkUGFyZW50ID0gblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUub2Zmc2V0KytcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHFoKFwiZWxlbWVudFN0YXJ0XCIsIG4sIHQsIGUsIDEpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG4gaW5zdGFuY2VvZiBMaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNpbmdsZUNoYXJhY3RlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IDFcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdCA9IG4uZW5kT2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fYm91bmRhcnlFbmRQYXJlbnQgPT0gaSAmJiB0aGlzLmJvdW5kYXJpZXMuZW5kLm9mZnNldCA8IHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSB0aGlzLmJvdW5kYXJpZXMuZW5kLm9mZnNldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB0IC0gZS5vZmZzZXRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IGUub2Zmc2V0IC0gbi5zdGFydE9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gbmV3IEZoKG4sIHIsIG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGUub2Zmc2V0ICs9IG87XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHFoKFwidGV4dFwiLCBzLCB0LCBlLCBvKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnBhdGgucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5vZmZzZXQrKztcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92aXNpdGVkUGFyZW50ID0gaS5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaWdub3JlRWxlbWVudEVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbmV4dCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHFoKFwiZWxlbWVudEVuZFwiLCBpLCB0LCBlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3ByZXZpb3VzKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMucG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5wb3NpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX3Zpc2l0ZWRQYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaS5wYXJlbnQgPT09IG51bGwgJiYgZS5vZmZzZXQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge2RvbmU6IHRydWV9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PSB0aGlzLl9ib3VuZGFyeVN0YXJ0UGFyZW50ICYmIGUub2Zmc2V0ID09IHRoaXMuYm91bmRhcmllcy5zdGFydC5vZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge2RvbmU6IHRydWV9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZS50ZXh0Tm9kZSA/IGUudGV4dE5vZGUgOiBlLm5vZGVCZWZvcmU7XHJcbiAgICAgICAgICAgICAgICBpZiAobiBpbnN0YW5jZW9mIGpoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5vZmZzZXQtLTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2hhbGxvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnBhdGgucHVzaChuLm1heE9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92aXNpdGVkUGFyZW50ID0gbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaWdub3JlRWxlbWVudEVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ByZXZpb3VzKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBxaChcImVsZW1lbnRFbmRcIiwgbiwgdCwgZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcWgoXCJlbGVtZW50U3RhcnRcIiwgbiwgdCwgZSwgMSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG4gaW5zdGFuY2VvZiBMaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNpbmdsZUNoYXJhY3RlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IDFcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdCA9IG4uc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9ib3VuZGFyeVN0YXJ0UGFyZW50ID09IGkgJiYgdGhpcy5ib3VuZGFyaWVzLnN0YXJ0Lm9mZnNldCA+IHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSB0aGlzLmJvdW5kYXJpZXMuc3RhcnQub2Zmc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IGUub2Zmc2V0IC0gdFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gZS5vZmZzZXQgLSBuLnN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuZXcgRmgobiwgciAtIG8sIG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGUub2Zmc2V0IC09IG87XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHFoKFwidGV4dFwiLCBzLCB0LCBlLCBvKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnBhdGgucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmlzaXRlZFBhcmVudCA9IGkucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBxaChcImVsZW1lbnRTdGFydFwiLCBpLCB0LCBlLCAxKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBxaCh0LCBlLCBpLCBuLCBvKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7ZG9uZTogZmFsc2UsIHZhbHVlOiB7dHlwZTogdCwgaXRlbTogZSwgcHJldmlvdXNQb3NpdGlvbjogaSwgbmV4dFBvc2l0aW9uOiBuLCBsZW5ndGg6IG99fVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgVWgge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlLCBpID0gXCJ0b05vbmVcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0LmlzKFwiZWxlbWVudFwiKSAmJiAhdC5pcyhcImRvY3VtZW50RnJhZ21lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibW9kZWwtcG9zaXRpb24tcm9vdC1pbnZhbGlkOiBQb3NpdGlvbiByb290IGludmFsaWQuXCIsIHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIShlIGluc3RhbmNlb2YgQXJyYXkpIHx8IGUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIm1vZGVsLXBvc2l0aW9uLXBhdGgtaW5jb3JyZWN0LWZvcm1hdDogUG9zaXRpb24gcGF0aCBtdXN0IGJlIGFuIGFycmF5IHdpdGggYXQgbGVhc3Qgb25lIGl0ZW0uXCIsIHQsIHtwYXRoOiBlfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGUgPSB0LmdldFBhdGgoKS5jb25jYXQoZSk7XHJcbiAgICAgICAgICAgICAgICB0ID0gdC5yb290O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yb290ID0gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMucGF0aCA9IGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0aWNraW5lc3MgPSBpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBvZmZzZXQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQ2EodGhpcy5wYXRoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXQgb2Zmc2V0KHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMucGF0aFt0aGlzLnBhdGgubGVuZ3RoIC0gMV0gPSB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBwYXJlbnQoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdCA9IHRoaXMucm9vdDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGUgPSAwOyBlIDwgdGhpcy5wYXRoLmxlbmd0aCAtIDE7IGUrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHQgPSB0LmdldENoaWxkKHQub2Zmc2V0VG9JbmRleCh0aGlzLnBhdGhbZV0pKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIm1vZGVsLXBvc2l0aW9uLXBhdGgtaW5jb3JyZWN0OiBUaGUgcG9zaXRpb24ncyBwYXRoIGlzIGluY29ycmVjdC5cIiwgdGhpcywge3Bvc2l0aW9uOiB0aGlzfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodC5pcyhcInRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibW9kZWwtcG9zaXRpb24tcGF0aC1pbmNvcnJlY3Q6IFRoZSBwb3NpdGlvbidzIHBhdGggaXMgaW5jb3JyZWN0LlwiLCB0aGlzLCB7cG9zaXRpb246IHRoaXN9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGluZGV4KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50Lm9mZnNldFRvSW5kZXgodGhpcy5vZmZzZXQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCB0ZXh0Tm9kZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnBhcmVudC5nZXRDaGlsZCh0aGlzLmluZGV4KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgTGggJiYgdC5zdGFydE9mZnNldCA8IHRoaXMub2Zmc2V0ID8gdCA6IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IG5vZGVBZnRlcigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHROb2RlID09PSBudWxsID8gdGhpcy5wYXJlbnQuZ2V0Q2hpbGQodGhpcy5pbmRleCkgOiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBub2RlQmVmb3JlKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGV4dE5vZGUgPT09IG51bGwgPyB0aGlzLnBhcmVudC5nZXRDaGlsZCh0aGlzLmluZGV4IC0gMSkgOiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBpc0F0U3RhcnQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQgPT09IDBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGlzQXRFbmQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQgPT0gdGhpcy5wYXJlbnQubWF4T2Zmc2V0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbXBhcmVXaXRoKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvb3QgIT0gdC5yb290KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiZGlmZmVyZW50XCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBWcyh0aGlzLnBhdGgsIHQucGF0aCk7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlXCJzYW1lXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInNhbWVcIjtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlXCJwcmVmaXhcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiYmVmb3JlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZVwiZXh0ZW5zaW9uXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImFmdGVyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGF0aFtlXSA8IHQucGF0aFtlXSA/IFwiYmVmb3JlXCIgOiBcImFmdGVyXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0TGFzdE1hdGNoaW5nUG9zaXRpb24odCwgZSA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBlLnN0YXJ0UG9zaXRpb24gPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBXaChlKTtcclxuICAgICAgICAgICAgICAgIGkuc2tpcCh0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpLnBvc2l0aW9uXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFBhcmVudFBhdGgoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoLnNsaWNlKDAsIC0xKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRBbmNlc3RvcnMoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5wYXJlbnQuaXMoXCJkb2N1bWVudEZyYWdtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLnBhcmVudF1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGFyZW50LmdldEFuY2VzdG9ycyh7aW5jbHVkZVNlbGY6IHRydWV9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRDb21tb25QYXRoKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvb3QgIT0gdC5yb290KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gVnModGhpcy5wYXRoLCB0LnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHR5cGVvZiBlID09IFwic3RyaW5nXCIgPyBNYXRoLm1pbih0aGlzLnBhdGgubGVuZ3RoLCB0LnBhdGgubGVuZ3RoKSA6IGU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5wYXRoLnNsaWNlKDAsIGkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENvbW1vbkFuY2VzdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmdldEFuY2VzdG9ycygpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuZ2V0QW5jZXN0b3JzKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbiA9IDA7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoZVtuXSA9PSBpW25dICYmIGVbbl0pIHtcclxuICAgICAgICAgICAgICAgICAgICBuKytcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBuID09PSAwID8gbnVsbCA6IGVbbiAtIDFdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFNoaWZ0ZWRCeSh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5jbG9uZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUub2Zmc2V0ICsgdDtcclxuICAgICAgICAgICAgICAgIGUub2Zmc2V0ID0gaSA8IDAgPyAwIDogaTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzQWZ0ZXIodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZVdpdGgodCkgPT0gXCJhZnRlclwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzQmVmb3JlKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVXaXRoKHQpID09IFwiYmVmb3JlXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNFcXVhbCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlV2l0aCh0KSA9PSBcInNhbWVcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc1RvdWNoaW5nKHQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGxldCBpID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLmNvbXBhcmVXaXRoKHQpO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZVwic2FtZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlXCJiZWZvcmVcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZSA9IFVoLl9jcmVhdGVBdCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IFVoLl9jcmVhdGVBdCh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZVwiYWZ0ZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZSA9IFVoLl9jcmVhdGVBdCh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IFVoLl9jcmVhdGVBdCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgbyA9IGUucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGUucGF0aC5sZW5ndGggKyBpLnBhdGgubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuaXNFcXVhbChpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5wYXRoLmxlbmd0aCA+IGkucGF0aC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUub2Zmc2V0ICE9PSBvLm1heE9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wYXRoID0gZS5wYXRoLnNsaWNlKDAsIC0xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IG8ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLm9mZnNldCsrXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkub2Zmc2V0ICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnBhdGggPSBpLnBhdGguc2xpY2UoMCwgLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpcyh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PSBcInBvc2l0aW9uXCIgfHwgdCA9PSBcIm1vZGVsOnBvc2l0aW9uXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaGFzU2FtZVBhcmVudEFzKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvb3QgIT09IHQucm9vdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZ2V0UGFyZW50UGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuZ2V0UGFyZW50UGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFZzKGUsIGkpID09IFwic2FtZVwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFRyYW5zZm9ybWVkQnlPcGVyYXRpb24odCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGU7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHQudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VcImluc2VydFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5fZ2V0VHJhbnNmb3JtZWRCeUluc2VydE9wZXJhdGlvbih0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZVwibW92ZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VcInJlbW92ZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VcInJlaW5zZXJ0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLl9nZXRUcmFuc2Zvcm1lZEJ5TW92ZU9wZXJhdGlvbih0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZVwic3BsaXRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMuX2dldFRyYW5zZm9ybWVkQnlTcGxpdE9wZXJhdGlvbih0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZVwibWVyZ2VcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMuX2dldFRyYW5zZm9ybWVkQnlNZXJnZU9wZXJhdGlvbih0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgZSA9IFVoLl9jcmVhdGVBdCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRUcmFuc2Zvcm1lZEJ5SW5zZXJ0T3BlcmF0aW9uKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRUcmFuc2Zvcm1lZEJ5SW5zZXJ0aW9uKHQucG9zaXRpb24sIHQuaG93TWFueSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldFRyYW5zZm9ybWVkQnlNb3ZlT3BlcmF0aW9uKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRUcmFuc2Zvcm1lZEJ5TW92ZSh0LnNvdXJjZVBvc2l0aW9uLCB0LnRhcmdldFBvc2l0aW9uLCB0Lmhvd01hbnkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRUcmFuc2Zvcm1lZEJ5U3BsaXRPcGVyYXRpb24odCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubW92ZWRSYW5nZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmNvbnRhaW5zUG9zaXRpb24odGhpcykgfHwgZS5zdGFydC5pc0VxdWFsKHRoaXMpICYmIHRoaXMuc3RpY2tpbmVzcyA9PSBcInRvTmV4dFwiO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q29tYmluZWQodC5zcGxpdFBvc2l0aW9uLCB0Lm1vdmVUYXJnZXRQb3NpdGlvbilcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQuZ3JhdmV5YXJkUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldFRyYW5zZm9ybWVkQnlNb3ZlKHQuZ3JhdmV5YXJkUG9zaXRpb24sIHQuaW5zZXJ0aW9uUG9zaXRpb24sIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldFRyYW5zZm9ybWVkQnlJbnNlcnRpb24odC5pbnNlcnRpb25Qb3NpdGlvbiwgMSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRUcmFuc2Zvcm1lZEJ5TWVyZ2VPcGVyYXRpb24odCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubW92ZWRSYW5nZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmNvbnRhaW5zUG9zaXRpb24odGhpcykgfHwgZS5zdGFydC5pc0VxdWFsKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG47XHJcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0aGlzLl9nZXRDb21iaW5lZCh0LnNvdXJjZVBvc2l0aW9uLCB0LnRhcmdldFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5zb3VyY2VQb3NpdGlvbi5pc0JlZm9yZSh0LnRhcmdldFBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gbi5fZ2V0VHJhbnNmb3JtZWRCeURlbGV0aW9uKHQuZGVsZXRpb25Qb3NpdGlvbiwgMSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaXNFcXVhbCh0LmRlbGV0aW9uUG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbiA9IFVoLl9jcmVhdGVBdCh0LmRlbGV0aW9uUG9zaXRpb24pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0aGlzLl9nZXRUcmFuc2Zvcm1lZEJ5TW92ZSh0LmRlbGV0aW9uUG9zaXRpb24sIHQuZ3JhdmV5YXJkUG9zaXRpb24sIDEpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0VHJhbnNmb3JtZWRCeURlbGV0aW9uKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBVaC5fY3JlYXRlQXQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb290ICE9IHQucm9vdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoVnModC5nZXRQYXJlbnRQYXRoKCksIHRoaXMuZ2V0UGFyZW50UGF0aCgpKSA9PSBcInNhbWVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0Lm9mZnNldCA8IHRoaXMub2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm9mZnNldCArIGUgPiB0aGlzLm9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkub2Zmc2V0IC09IGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoVnModC5nZXRQYXJlbnRQYXRoKCksIHRoaXMuZ2V0UGFyZW50UGF0aCgpKSA9PSBcInByZWZpeFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQucGF0aC5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0Lm9mZnNldCA8PSB0aGlzLnBhdGhbbl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQub2Zmc2V0ICsgZSA+IHRoaXMucGF0aFtuXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkucGF0aFtuXSAtPSBlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0VHJhbnNmb3JtZWRCeUluc2VydGlvbih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gVWguX2NyZWF0ZUF0KHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucm9vdCAhPSB0LnJvb3QpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKFZzKHQuZ2V0UGFyZW50UGF0aCgpLCB0aGlzLmdldFBhcmVudFBhdGgoKSkgPT0gXCJzYW1lXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5vZmZzZXQgPCB0aGlzLm9mZnNldCB8fCB0Lm9mZnNldCA9PSB0aGlzLm9mZnNldCAmJiB0aGlzLnN0aWNraW5lc3MgIT0gXCJ0b1ByZXZpb3VzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5vZmZzZXQgKz0gZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoVnModC5nZXRQYXJlbnRQYXRoKCksIHRoaXMuZ2V0UGFyZW50UGF0aCgpKSA9PSBcInByZWZpeFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQucGF0aC5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0Lm9mZnNldCA8PSB0aGlzLnBhdGhbbl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5wYXRoW25dICs9IGVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0VHJhbnNmb3JtZWRCeU1vdmUodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgZSA9IGUuX2dldFRyYW5zZm9ybWVkQnlEZWxldGlvbih0LCBpKTtcclxuICAgICAgICAgICAgICAgIGlmICh0LmlzRXF1YWwoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVWguX2NyZWF0ZUF0KHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5fZ2V0VHJhbnNmb3JtZWRCeURlbGV0aW9uKHQsIGkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG4gPT09IG51bGwgfHwgdC5pc0VxdWFsKHRoaXMpICYmIHRoaXMuc3RpY2tpbmVzcyA9PSBcInRvTmV4dFwiIHx8IHQuZ2V0U2hpZnRlZEJ5KGkpLmlzRXF1YWwodGhpcykgJiYgdGhpcy5zdGlja2luZXNzID09IFwidG9QcmV2aW91c1wiO1xyXG4gICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Q29tYmluZWQodCwgZSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4uX2dldFRyYW5zZm9ybWVkQnlJbnNlcnRpb24oZSwgaSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldENvbWJpbmVkKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnBhdGgubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBVaC5fY3JlYXRlQXQoZSk7XHJcbiAgICAgICAgICAgICAgICBuLnN0aWNraW5lc3MgPSB0aGlzLnN0aWNraW5lc3M7XHJcbiAgICAgICAgICAgICAgICBuLm9mZnNldCA9IG4ub2Zmc2V0ICsgdGhpcy5wYXRoW2ldIC0gdC5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBuLnBhdGggPSBuLnBhdGguY29uY2F0KHRoaXMucGF0aC5zbGljZShpICsgMSkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9KU09OKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtyb290OiB0aGlzLnJvb3QudG9KU09OKCksIHBhdGg6IEFycmF5LmZyb20odGhpcy5wYXRoKSwgc3RpY2tpbmVzczogdGhpcy5zdGlja2luZXNzfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjbG9uZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLnJvb3QsIHRoaXMucGF0aCwgdGhpcy5zdGlja2luZXNzKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgX2NyZWF0ZUF0KHQsIGUsIGkgPSBcInRvTm9uZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodCBpbnN0YW5jZW9mIFVoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBVaCh0LnJvb3QsIHQucGF0aCwgdC5zdGlja2luZXNzKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZSA9PSBcImVuZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBuLm1heE9mZnNldFxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZSA9PSBcImJlZm9yZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVCZWZvcmUobiwgaSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUgPT0gXCJhZnRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jcmVhdGVBZnRlcihuLCBpKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZSAhPT0gMCAmJiAhZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibW9kZWwtY3JlYXRlUG9zaXRpb25BdC1vZmZzZXQtcmVxdWlyZWQ6IFwiICsgXCJNb2RlbCNjcmVhdGVQb3NpdGlvbkF0KCkgcmVxdWlyZXMgdGhlIG9mZnNldCB3aGVuIHRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgYSBtb2RlbCBpdGVtLlwiLCBbdGhpcywgdF0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbi5pcyhcImVsZW1lbnRcIikgJiYgIW4uaXMoXCJkb2N1bWVudEZyYWdtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJtb2RlbC1wb3NpdGlvbi1wYXJlbnQtaW5jb3JyZWN0OiBQb3NpdGlvbiBwYXJlbnQgaGF2ZSB0byBiZSBhIGVsZW1lbnQgb3IgZG9jdW1lbnQgZnJhZ21lbnQuXCIsIFt0aGlzLCB0XSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IG4uZ2V0UGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG8ucHVzaChlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMobi5yb290LCBvLCBpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgX2NyZWF0ZUFmdGVyKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdC5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibW9kZWwtcG9zaXRpb24tYWZ0ZXItcm9vdDogWW91IGNhbm5vdCBtYWtlIGEgcG9zaXRpb24gYWZ0ZXIgcm9vdC5cIiwgW3RoaXMsIHRdLCB7cm9vdDogdH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY3JlYXRlQXQodC5wYXJlbnQsIHQuZW5kT2Zmc2V0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgX2NyZWF0ZUJlZm9yZSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIm1vZGVsLXBvc2l0aW9uLWJlZm9yZS1yb290OiBZb3UgY2Fubm90IG1ha2UgYSBwb3NpdGlvbiBiZWZvcmUgcm9vdC5cIiwgdCwge3Jvb3Q6IHR9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUF0KHQucGFyZW50LCB0LnN0YXJ0T2Zmc2V0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZnJvbUpTT04odCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQucm9vdCA9PT0gXCIkZ3JhdmV5YXJkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gbmV3IFVoKGUuZ3JhdmV5YXJkLCB0LnBhdGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc3RpY2tpbmVzcyA9IHQuc3RpY2tpbmVzcztcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFlLmdldFJvb3QodC5yb290KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJtb2RlbC1wb3NpdGlvbi1mcm9tanNvbi1uby1yb290OiBDYW5ub3QgY3JlYXRlIHBvc2l0aW9uIGZvciBkb2N1bWVudC4gUm9vdCB3aXRoIHNwZWNpZmllZCBuYW1lIGRvZXMgbm90IGV4aXN0LlwiLCBlLCB7cm9vdE5hbWU6IHQucm9vdH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVoKGUuZ2V0Um9vdCh0LnJvb3QpLCB0LnBhdGgsIHQuc3RpY2tpbmVzcylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgJGgge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlID0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydCA9IFVoLl9jcmVhdGVBdCh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW5kID0gZSA/IFVoLl9jcmVhdGVBdChlKSA6IFVoLl9jcmVhdGVBdCh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhcnQuc3RpY2tpbmVzcyA9IHRoaXMuaXNDb2xsYXBzZWQgPyBcInRvTm9uZVwiIDogXCJ0b05leHRcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW5kLnN0aWNraW5lc3MgPSB0aGlzLmlzQ29sbGFwc2VkID8gXCJ0b05vbmVcIiA6IFwidG9QcmV2aW91c1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICogW1N5bWJvbC5pdGVyYXRvcl0oKSB7XHJcbiAgICAgICAgICAgICAgICB5aWVsZCogbmV3IFdoKHtib3VuZGFyaWVzOiB0aGlzLCBpZ25vcmVFbGVtZW50RW5kOiB0cnVlfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGlzQ29sbGFwc2VkKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc3RhcnQuaXNFcXVhbCh0aGlzLmVuZClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGlzRmxhdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnN0YXJ0LmdldFBhcmVudFBhdGgoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVuZC5nZXRQYXJlbnRQYXRoKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gVnModCwgZSkgPT0gXCJzYW1lXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHJvb3QoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydC5yb290XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRhaW5zUG9zaXRpb24odCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuaXNBZnRlcih0aGlzLnN0YXJ0KSAmJiB0LmlzQmVmb3JlKHRoaXMuZW5kKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb250YWluc1JhbmdlKHQsIGUgPSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmNvbnRhaW5zUG9zaXRpb24odC5zdGFydCkgfHwgZSAmJiB0aGlzLnN0YXJ0LmlzRXF1YWwodC5zdGFydCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5jb250YWluc1Bvc2l0aW9uKHQuZW5kKSB8fCBlICYmIHRoaXMuZW5kLmlzRXF1YWwodC5lbmQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkgJiYgblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb250YWluc0l0ZW0odCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFVoLl9jcmVhdGVCZWZvcmUodCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWluc1Bvc2l0aW9uKGUpIHx8IHRoaXMuc3RhcnQuaXNFcXVhbChlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpcyh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PSBcInJhbmdlXCIgfHwgdCA9PSBcIm1vZGVsOnJhbmdlXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNFcXVhbCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydC5pc0VxdWFsKHQuc3RhcnQpICYmIHRoaXMuZW5kLmlzRXF1YWwodC5lbmQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzSW50ZXJzZWN0aW5nKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0LmlzQmVmb3JlKHQuZW5kKSAmJiB0aGlzLmVuZC5pc0FmdGVyKHQuc3RhcnQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldERpZmZlcmVuY2UodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNJbnRlcnNlY3RpbmcodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250YWluc1Bvc2l0aW9uKHQuc3RhcnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChuZXcgJGgodGhpcy5zdGFydCwgdC5zdGFydCkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRhaW5zUG9zaXRpb24odC5lbmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChuZXcgJGgodC5lbmQsIHRoaXMuZW5kKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHVzaChuZXcgJGgodGhpcy5zdGFydCwgdGhpcy5lbmQpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0SW50ZXJzZWN0aW9uKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzSW50ZXJzZWN0aW5nKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGUgPSB0aGlzLnN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gdGhpcy5lbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udGFpbnNQb3NpdGlvbih0LnN0YXJ0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gdC5zdGFydFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250YWluc1Bvc2l0aW9uKHQuZW5kKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gdC5lbmRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkaChlLCBpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0TWluaW1hbEZsYXRSYW5nZXMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5zdGFydC5nZXRDb21tb25QYXRoKHRoaXMuZW5kKS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gVWguX2NyZWF0ZUF0KHRoaXMuc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgbGV0IG4gPSBpLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChpLnBhdGgubGVuZ3RoID4gZSArIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gbi5tYXhPZmZzZXQgLSBpLm9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnB1c2gobmV3ICRoKGksIGkuZ2V0U2hpZnRlZEJ5KGUpKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaS5wYXRoID0gaS5wYXRoLnNsaWNlKDAsIC0xKTtcclxuICAgICAgICAgICAgICAgICAgICBpLm9mZnNldCsrO1xyXG4gICAgICAgICAgICAgICAgICAgIG4gPSBuLnBhcmVudFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGkucGF0aC5sZW5ndGggPD0gdGhpcy5lbmQucGF0aC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lbmQucGF0aFtpLnBhdGgubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGUgLSBpLm9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobiAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnB1c2gobmV3ICRoKGksIGkuZ2V0U2hpZnRlZEJ5KG4pKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaS5vZmZzZXQgPSBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGkucGF0aC5wdXNoKDApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRXYWxrZXIodCA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICB0LmJvdW5kYXJpZXMgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBXaCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIGdldEl0ZW1zKHQgPSB7fSkge1xyXG4gICAgICAgICAgICAgICAgdC5ib3VuZGFyaWVzID0gdGhpcztcclxuICAgICAgICAgICAgICAgIHQuaWdub3JlRWxlbWVudEVuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gbmV3IFdoKHQpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB5aWVsZCB0Lml0ZW1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgKiBnZXRQb3NpdGlvbnModCA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICB0LmJvdW5kYXJpZXMgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBXaCh0KTtcclxuICAgICAgICAgICAgICAgIHlpZWxkIGUucG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHlpZWxkIHQubmV4dFBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFRyYW5zZm9ybWVkQnlPcGVyYXRpb24odCkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0LnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlXCJpbnNlcnRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2dldFRyYW5zZm9ybWVkQnlJbnNlcnRPcGVyYXRpb24odCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZVwibW92ZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VcInJlbW92ZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VcInJlaW5zZXJ0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRUcmFuc2Zvcm1lZEJ5TW92ZU9wZXJhdGlvbih0KTtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlXCJzcGxpdFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RoaXMuX2dldFRyYW5zZm9ybWVkQnlTcGxpdE9wZXJhdGlvbih0KV07XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZVwibWVyZ2VcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFt0aGlzLl9nZXRUcmFuc2Zvcm1lZEJ5TWVyZ2VPcGVyYXRpb24odCldXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW25ldyAkaCh0aGlzLnN0YXJ0LCB0aGlzLmVuZCldXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFRyYW5zZm9ybWVkQnlPcGVyYXRpb25zKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBbbmV3ICRoKHRoaXMuc3RhcnQsIHRoaXMuZW5kKV07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgZS5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gZVt0XS5nZXRUcmFuc2Zvcm1lZEJ5T3BlcmF0aW9uKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnNwbGljZSh0LCAxLCAuLi5uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdCArPSBuLmxlbmd0aCAtIDFcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IGUubGVuZ3RoOyB0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZVt0XTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBuID0gdCArIDE7IG4gPCBlLmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlW25dO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaS5jb250YWluc1JhbmdlKHQpIHx8IHQuY29udGFpbnNSYW5nZShpKSB8fCBpLmlzRXF1YWwodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3BsaWNlKG4sIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRDb21tb25BbmNlc3RvcigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0LmdldENvbW1vbkFuY2VzdG9yKHRoaXMuZW5kKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRDb250YWluZWRFbGVtZW50KCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuc3RhcnQubm9kZUFmdGVyO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZW5kLm5vZGVCZWZvcmU7XHJcbiAgICAgICAgICAgICAgICBpZiAodCAmJiB0LmlzKFwiZWxlbWVudFwiKSAmJiB0ID09PSBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRvSlNPTigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7c3RhcnQ6IHRoaXMuc3RhcnQudG9KU09OKCksIGVuZDogdGhpcy5lbmQudG9KU09OKCl9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNsb25lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuc3RhcnQsIHRoaXMuZW5kKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0VHJhbnNmb3JtZWRCeUluc2VydE9wZXJhdGlvbih0LCBlID0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRUcmFuc2Zvcm1lZEJ5SW5zZXJ0aW9uKHQucG9zaXRpb24sIHQuaG93TWFueSwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldFRyYW5zZm9ybWVkQnlNb3ZlT3BlcmF0aW9uKHQsIGUgPSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuc291cmNlUG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5ob3dNYW55O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHQudGFyZ2V0UG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0VHJhbnNmb3JtZWRCeU1vdmUoaSwgbywgbiwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldFRyYW5zZm9ybWVkQnlTcGxpdE9wZXJhdGlvbih0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5zdGFydC5fZ2V0VHJhbnNmb3JtZWRCeVNwbGl0T3BlcmF0aW9uKHQpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSB0aGlzLmVuZC5fZ2V0VHJhbnNmb3JtZWRCeVNwbGl0T3BlcmF0aW9uKHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZW5kLmlzRXF1YWwodC5pbnNlcnRpb25Qb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpID0gdGhpcy5lbmQuZ2V0U2hpZnRlZEJ5KDEpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5yb290ICE9IGkucm9vdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSB0aGlzLmVuZC5nZXRTaGlmdGVkQnkoLTEpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3ICRoKGUsIGkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRUcmFuc2Zvcm1lZEJ5TWVyZ2VPcGVyYXRpb24odCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhcnQuaXNFcXVhbCh0LnRhcmdldFBvc2l0aW9uKSAmJiB0aGlzLmVuZC5pc0VxdWFsKHQuZGVsZXRpb25Qb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3ICRoKHRoaXMuc3RhcnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgZSA9IHRoaXMuc3RhcnQuX2dldFRyYW5zZm9ybWVkQnlNZXJnZU9wZXJhdGlvbih0KTtcclxuICAgICAgICAgICAgICAgIGxldCBpID0gdGhpcy5lbmQuX2dldFRyYW5zZm9ybWVkQnlNZXJnZU9wZXJhdGlvbih0KTtcclxuICAgICAgICAgICAgICAgIGlmIChlLnJvb3QgIT0gaS5yb290KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IHRoaXMuZW5kLmdldFNoaWZ0ZWRCeSgtMSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlLmlzQWZ0ZXIoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5zb3VyY2VQb3NpdGlvbi5pc0JlZm9yZSh0LnRhcmdldFBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gVWguX2NyZWF0ZUF0KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLm9mZnNldCA9IDBcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXQuZGVsZXRpb25Qb3NpdGlvbi5pc0VxdWFsKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gdC5kZWxldGlvblBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHQudGFyZ2V0UG9zaXRpb25cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkaChlLCBpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkaChlLCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0VHJhbnNmb3JtZWRCeUluc2VydGlvbih0LCBlLCBpID0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpICYmIHRoaXMuY29udGFpbnNQb3NpdGlvbih0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbmV3ICRoKHRoaXMuc3RhcnQsIHQpLCBuZXcgJGgodC5nZXRTaGlmdGVkQnkoZSksIHRoaXMuZW5kLl9nZXRUcmFuc2Zvcm1lZEJ5SW5zZXJ0aW9uKHQsIGUpKV1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyAkaCh0aGlzLnN0YXJ0LCB0aGlzLmVuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zdGFydCA9IGkuc3RhcnQuX2dldFRyYW5zZm9ybWVkQnlJbnNlcnRpb24odCwgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5lbmQgPSBpLmVuZC5fZ2V0VHJhbnNmb3JtZWRCeUluc2VydGlvbih0LCBlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2ldXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRUcmFuc2Zvcm1lZEJ5TW92ZSh0LCBlLCBpLCBuID0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzQ29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuc3RhcnQuX2dldFRyYW5zZm9ybWVkQnlNb3ZlKHQsIGUsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbmV3ICRoKG4pXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9ICRoLl9jcmVhdGVGcm9tUG9zaXRpb25BbmRTaGlmdCh0LCBpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBlLl9nZXRUcmFuc2Zvcm1lZEJ5RGVsZXRpb24odCwgaSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jb250YWluc1Bvc2l0aW9uKGUpICYmICFuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8uY29udGFpbnNQb3NpdGlvbih0aGlzLnN0YXJ0KSB8fCBvLmNvbnRhaW5zUG9zaXRpb24odGhpcy5lbmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLnN0YXJ0Ll9nZXRUcmFuc2Zvcm1lZEJ5TW92ZSh0LCBlLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMuZW5kLl9nZXRUcmFuc2Zvcm1lZEJ5TW92ZSh0LCBlLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtuZXcgJGgobiwgbyldXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IHM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gdGhpcy5nZXREaWZmZXJlbmNlKG8pO1xyXG4gICAgICAgICAgICAgICAgbGV0IGMgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbCA9IHRoaXMuZ2V0SW50ZXJzZWN0aW9uKG8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGEubGVuZ3RoID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICBjID0gbmV3ICRoKGFbMF0uc3RhcnQuX2dldFRyYW5zZm9ybWVkQnlEZWxldGlvbih0LCBpKSwgYVswXS5lbmQuX2dldFRyYW5zZm9ybWVkQnlEZWxldGlvbih0LCBpKSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoYS5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIGMgPSBuZXcgJGgodGhpcy5zdGFydCwgdGhpcy5lbmQuX2dldFRyYW5zZm9ybWVkQnlEZWxldGlvbih0LCBpKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcyA9IGMuX2dldFRyYW5zZm9ybWVkQnlJbnNlcnRpb24ociwgaSwgbCAhPT0gbnVsbCB8fCBuKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBzID0gW11cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IG5ldyAkaChsLnN0YXJ0Ll9nZXRDb21iaW5lZChvLnN0YXJ0LCByKSwgbC5lbmQuX2dldENvbWJpbmVkKG8uc3RhcnQsIHIpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocy5sZW5ndGggPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzLnNwbGljZSgxLCAwLCB0KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHMucHVzaCh0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRUcmFuc2Zvcm1lZEJ5RGVsZXRpb24odCwgZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSB0aGlzLnN0YXJ0Ll9nZXRUcmFuc2Zvcm1lZEJ5RGVsZXRpb24odCwgZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbiA9IHRoaXMuZW5kLl9nZXRUcmFuc2Zvcm1lZEJ5RGVsZXRpb24odCwgZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PSBudWxsICYmIG4gPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IHRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuID09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBuID0gdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkaChpLCBuKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgX2NyZWF0ZUZyb21Qb3NpdGlvbkFuZFNoaWZ0KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuZ2V0U2hpZnRlZEJ5KGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgPiAwID8gbmV3IHRoaXMoaSwgbikgOiBuZXcgdGhpcyhuLCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgX2NyZWF0ZUluKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcyhVaC5fY3JlYXRlQXQodCwgMCksIFVoLl9jcmVhdGVBdCh0LCB0Lm1heE9mZnNldCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBfY3JlYXRlT24odCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NyZWF0ZUZyb21Qb3NpdGlvbkFuZFNoaWZ0KFVoLl9jcmVhdGVCZWZvcmUodCksIHQub2Zmc2V0U2l6ZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIF9jcmVhdGVGcm9tUmFuZ2VzKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJyYW5nZS1jcmVhdGUtZnJvbS1yYW5nZXMtZW1wdHktYXJyYXk6IEF0IGxlYXN0IG9uZSByYW5nZSBoYXMgdG8gYmUgcGFzc2VkLlwiLCBudWxsKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0Lmxlbmd0aCA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRbMF0uY2xvbmUoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRbMF07XHJcbiAgICAgICAgICAgICAgICB0LnNvcnQoKHQsIGUpID0+IHQuc3RhcnQuaXNBZnRlcihlLnN0YXJ0KSA/IDEgOiAtMSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5pbmRleE9mKGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyB0aGlzKGUuc3RhcnQsIGUuZW5kKTtcclxuICAgICAgICAgICAgICAgIGlmIChpID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGUgPSBpIC0gMTsgdHJ1ZTsgZSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0W2VdLmVuZC5pc0VxdWFsKG4uc3RhcnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLnN0YXJ0ID0gVWguX2NyZWF0ZUF0KHRbZV0uc3RhcnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZSA9IGkgKyAxOyBlIDwgdC5sZW5ndGg7IGUrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0W2VdLnN0YXJ0LmlzRXF1YWwobi5lbmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4uZW5kID0gVWguX2NyZWF0ZUF0KHRbZV0uZW5kKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGZyb21KU09OKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcyhVaC5mcm9tSlNPTih0LnN0YXJ0LCBlKSwgVWguZnJvbUpTT04odC5lbmQsIGUpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBHaCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kZWxUb1ZpZXdNYXBwaW5nID0gbmV3IFdlYWtNYXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3VG9Nb2RlbE1hcHBpbmcgPSBuZXcgV2Vha01hcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdUb01vZGVsTGVuZ3RoQ2FsbGJhY2tzID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtlck5hbWVUb0VsZW1lbnRzID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRUb01hcmtlck5hbWVzID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VuYm91bmRNYXJrZXJOYW1lcyA9IG5ldyBTZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwibW9kZWxUb1ZpZXdQb3NpdGlvblwiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnZpZXdQb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX21vZGVsVG9WaWV3TWFwcGluZy5nZXQoZS5tb2RlbFBvc2l0aW9uLnBhcmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS52aWV3UG9zaXRpb24gPSB0aGlzLl9maW5kUG9zaXRpb25JbihpLCBlLm1vZGVsUG9zaXRpb24ub2Zmc2V0KVxyXG4gICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImxvd1wifSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwidmlld1RvTW9kZWxQb3NpdGlvblwiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLm1vZGVsUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmZpbmRNYXBwZWRWaWV3QW5jZXN0b3IoZS52aWV3UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl92aWV3VG9Nb2RlbE1hcHBpbmcuZ2V0KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0aGlzLl90b01vZGVsT2Zmc2V0KGUudmlld1Bvc2l0aW9uLnBhcmVudCwgZS52aWV3UG9zaXRpb24ub2Zmc2V0LCBpKTtcclxuICAgICAgICAgICAgICAgICAgICBlLm1vZGVsUG9zaXRpb24gPSBVaC5fY3JlYXRlQXQobiwgbylcclxuICAgICAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJsb3dcIn0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGJpbmRFbGVtZW50cyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RlbFRvVmlld01hcHBpbmcuc2V0KHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmlld1RvTW9kZWxNYXBwaW5nLnNldChlLCB0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB1bmJpbmRWaWV3RWxlbWVudCh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy50b01vZGVsRWxlbWVudCh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdUb01vZGVsTWFwcGluZy5kZWxldGUodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZWxlbWVudFRvTWFya2VyTmFtZXMuaGFzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuX2VsZW1lbnRUb01hcmtlck5hbWVzLmdldCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91bmJvdW5kTWFya2VyTmFtZXMuYWRkKGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX21vZGVsVG9WaWV3TWFwcGluZy5nZXQoZSkgPT0gdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsVG9WaWV3TWFwcGluZy5kZWxldGUoZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdW5iaW5kTW9kZWxFbGVtZW50KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLnRvVmlld0VsZW1lbnQodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RlbFRvVmlld01hcHBpbmcuZGVsZXRlKHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3ZpZXdUb01vZGVsTWFwcGluZy5nZXQoZSkgPT0gdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdUb01vZGVsTWFwcGluZy5kZWxldGUoZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYmluZEVsZW1lbnRUb01hcmtlcih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5fbWFya2VyTmFtZVRvRWxlbWVudHMuZ2V0KGUpIHx8IG5ldyBTZXQ7XHJcbiAgICAgICAgICAgICAgICBpLmFkZCh0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9lbGVtZW50VG9NYXJrZXJOYW1lcy5nZXQodCkgfHwgbmV3IFNldDtcclxuICAgICAgICAgICAgICAgIG4uYWRkKGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFya2VyTmFtZVRvRWxlbWVudHMuc2V0KGUsIGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudFRvTWFya2VyTmFtZXMuc2V0KHQsIG4pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHVuYmluZEVsZW1lbnRGcm9tTWFya2VyTmFtZSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5fbWFya2VyTmFtZVRvRWxlbWVudHMuZ2V0KGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpLmRlbGV0ZSh0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaS5zaXplID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFya2VyTmFtZVRvRWxlbWVudHMuZGVsZXRlKGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuX2VsZW1lbnRUb01hcmtlck5hbWVzLmdldCh0KTtcclxuICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5kZWxldGUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4uc2l6ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRUb01hcmtlck5hbWVzLmRlbGV0ZSh0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZmx1c2hVbmJvdW5kTWFya2VyTmFtZXMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gQXJyYXkuZnJvbSh0aGlzLl91bmJvdW5kTWFya2VyTmFtZXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdW5ib3VuZE1hcmtlck5hbWVzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjbGVhckJpbmRpbmdzKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kZWxUb1ZpZXdNYXBwaW5nID0gbmV3IFdlYWtNYXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3VG9Nb2RlbE1hcHBpbmcgPSBuZXcgV2Vha01hcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtlck5hbWVUb0VsZW1lbnRzID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRUb01hcmtlck5hbWVzID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VuYm91bmRNYXJrZXJOYW1lcyA9IG5ldyBTZXRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9Nb2RlbEVsZW1lbnQodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3ZpZXdUb01vZGVsTWFwcGluZy5nZXQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9WaWV3RWxlbWVudCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWxUb1ZpZXdNYXBwaW5nLmdldCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b01vZGVsUmFuZ2UodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkaCh0aGlzLnRvTW9kZWxQb3NpdGlvbih0LnN0YXJ0KSwgdGhpcy50b01vZGVsUG9zaXRpb24odC5lbmQpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b1ZpZXdSYW5nZSh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHVsKHRoaXMudG9WaWV3UG9zaXRpb24odC5zdGFydCksIHRoaXMudG9WaWV3UG9zaXRpb24odC5lbmQpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b01vZGVsUG9zaXRpb24odCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHt2aWV3UG9zaXRpb246IHQsIG1hcHBlcjogdGhpc307XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJ2aWV3VG9Nb2RlbFBvc2l0aW9uXCIsIGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUubW9kZWxQb3NpdGlvblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b1ZpZXdQb3NpdGlvbih0LCBlID0ge2lzUGhhbnRvbTogZmFsc2V9KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0ge21vZGVsUG9zaXRpb246IHQsIG1hcHBlcjogdGhpcywgaXNQaGFudG9tOiBlLmlzUGhhbnRvbX07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJtb2RlbFRvVmlld1Bvc2l0aW9uXCIsIGkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkudmlld1Bvc2l0aW9uXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1hcmtlck5hbWVUb0VsZW1lbnRzKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLl9tYXJrZXJOYW1lVG9FbGVtZW50cy5nZXQodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBTZXQ7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmlzKFwiYXR0cmlidXRlRWxlbWVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdC5nZXRFbGVtZW50c1dpdGhTYW1lSWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5hZGQoZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuYWRkKHQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVnaXN0ZXJWaWV3VG9Nb2RlbExlbmd0aCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3VG9Nb2RlbExlbmd0aENhbGxiYWNrcy5zZXQodCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZmluZE1hcHBlZFZpZXdBbmNlc3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZSA9IHQucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKCF0aGlzLl92aWV3VG9Nb2RlbE1hcHBpbmcuaGFzKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IGUucGFyZW50XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdG9Nb2RlbE9mZnNldCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSAhPSB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuX3RvTW9kZWxPZmZzZXQodC5wYXJlbnQsIHQuaW5kZXgsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0aGlzLl90b01vZGVsT2Zmc2V0KHQsIGUsIHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuICsgb1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQuaXMoXCJ0ZXh0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBuID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbiArPSB0aGlzLmdldE1vZGVsTGVuZ3RoKHQuZ2V0Q2hpbGQoaSkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRNb2RlbExlbmd0aCh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdmlld1RvTW9kZWxMZW5ndGhDYWxsYmFja3MuZ2V0KHQubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5fdmlld1RvTW9kZWxMZW5ndGhDYWxsYmFja3MuZ2V0KHQubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUodClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fdmlld1RvTW9kZWxNYXBwaW5nLmhhcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAxXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQuaXMoXCJ0ZXh0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuZGF0YS5sZW5ndGhcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5pcyhcInVpRWxlbWVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAwXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdC5nZXRDaGlsZHJlbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgKz0gdGhpcy5nZXRNb2RlbExlbmd0aChpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZmluZFBvc2l0aW9uSW4odCwgZSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbiA9IDA7XHJcbiAgICAgICAgICAgICAgICBsZXQgbyA9IDA7XHJcbiAgICAgICAgICAgICAgICBsZXQgciA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5pcyhcInRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGRsKHQsIGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobyA8IGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpID0gdC5nZXRDaGlsZChyKTtcclxuICAgICAgICAgICAgICAgICAgICBuID0gdGhpcy5nZXRNb2RlbExlbmd0aChpKTtcclxuICAgICAgICAgICAgICAgICAgICBvICs9IG47XHJcbiAgICAgICAgICAgICAgICAgICAgcisrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobyA9PSBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vdmVWaWV3UG9zaXRpb25Ub1RleHROb2RlKG5ldyBkbCh0LCByKSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2ZpbmRQb3NpdGlvbkluKGksIGUgLSAobyAtIG4pKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfbW92ZVZpZXdQb3NpdGlvblRvVGV4dE5vZGUodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubm9kZUJlZm9yZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0Lm5vZGVBZnRlcjtcclxuICAgICAgICAgICAgICAgIGlmIChlIGluc3RhbmNlb2YgTHMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGRsKGUsIGUuZGF0YS5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgaW5zdGFuY2VvZiBMcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgZGwoaSwgMClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKEdoLCBkcyk7XHJcblxyXG4gICAgICAgIGNsYXNzIEtoIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb25zdW1hYmxlID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3RleHRQcm94eVJlZ2lzdHJ5ID0gbmV3IE1hcFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZGQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgZSA9IEpoKGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBGaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQgPSB0aGlzLl9nZXRTeW1ib2xGb3JUZXh0UHJveHkodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fY29uc3VtYWJsZS5oYXModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb25zdW1hYmxlLnNldCh0LCBuZXcgTWFwKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29uc3VtYWJsZS5nZXQodCkuc2V0KGUsIHRydWUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN1bWUodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgZSA9IEpoKGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBGaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQgPSB0aGlzLl9nZXRTeW1ib2xGb3JUZXh0UHJveHkodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRlc3QodCwgZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb25zdW1hYmxlLmdldCh0KS5zZXQoZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0ZXN0KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGUgPSBKaChlKTtcclxuICAgICAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgRmgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ID0gdGhpcy5fZ2V0U3ltYm9sRm9yVGV4dFByb3h5KHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5fY29uc3VtYWJsZS5nZXQodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLmdldChlKTtcclxuICAgICAgICAgICAgICAgIGlmIChuID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmV2ZXJ0KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGUgPSBKaChlKTtcclxuICAgICAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgRmgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ID0gdGhpcy5fZ2V0U3ltYm9sRm9yVGV4dFByb3h5KHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy50ZXN0KHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29uc3VtYWJsZS5nZXQodCkuc2V0KGUsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRTeW1ib2xGb3JUZXh0UHJveHkodCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX3RleHRQcm94eVJlZ2lzdHJ5LmdldCh0LnN0YXJ0T2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgIGlmIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGkuZ2V0KHQuZW5kT2Zmc2V0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gbi5nZXQodC5wYXJlbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMuX2FkZFN5bWJvbEZvclRleHRQcm94eSh0LnN0YXJ0T2Zmc2V0LCB0LmVuZE9mZnNldCwgdC5wYXJlbnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfYWRkU3ltYm9sRm9yVGV4dFByb3h5KHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBTeW1ib2woXCJ0ZXh0UHJveHlTeW1ib2xcIik7XHJcbiAgICAgICAgICAgICAgICBsZXQgbywgcjtcclxuICAgICAgICAgICAgICAgIG8gPSB0aGlzLl90ZXh0UHJveHlSZWdpc3RyeS5nZXQodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW8pIHtcclxuICAgICAgICAgICAgICAgICAgICBvID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXh0UHJveHlSZWdpc3RyeS5zZXQodCwgbylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHIgPSBvLmdldChlKTtcclxuICAgICAgICAgICAgICAgIGlmICghcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHIgPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICAgICAgICAgIG8uc2V0KGUsIHIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByLnNldChpLCBuKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEpoKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHQuc3BsaXQoXCI6XCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gZS5sZW5ndGggPiAxID8gZVswXSArIFwiOlwiICsgZVsxXSA6IGVbMF1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIFloIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uQXBpID0gcWMoe2Rpc3BhdGNoZXI6IHRoaXN9LCB0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb252ZXJ0Q2hhbmdlcyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdC5nZXRNYXJrZXJzVG9SZW1vdmUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udmVydE1hcmtlclJlbW92ZShlLm5hbWUsIGUucmFuZ2UsIGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdC5nZXRDaGFuZ2VzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS50eXBlID09IFwiaW5zZXJ0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb252ZXJ0SW5zZXJ0KCRoLl9jcmVhdGVGcm9tUG9zaXRpb25BbmRTaGlmdChlLnBvc2l0aW9uLCBlLmxlbmd0aCksIGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChlLnR5cGUgPT0gXCJyZW1vdmVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnRSZW1vdmUoZS5wb3NpdGlvbiwgZS5sZW5ndGgsIGUubmFtZSwgaSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnRBdHRyaWJ1dGUoZS5yYW5nZSwgZS5hdHRyaWJ1dGVLZXksIGUuYXR0cmlidXRlT2xkVmFsdWUsIGUuYXR0cmlidXRlTmV3VmFsdWUsIGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMuY29udmVyc2lvbkFwaS5tYXBwZXIuZmx1c2hVbmJvdW5kTWFya2VyTmFtZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLmdldCh0KS5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udmVydE1hcmtlclJlbW92ZSh0LCBuLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnRNYXJrZXJBZGQodCwgbiwgaSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0LmdldE1hcmtlcnNUb0FkZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb252ZXJ0TWFya2VyQWRkKGUubmFtZSwgZS5yYW5nZSwgaSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udmVydEluc2VydCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnNpb25BcGkud3JpdGVyID0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udmVyc2lvbkFwaS5jb25zdW1hYmxlID0gdGhpcy5fY3JlYXRlSW5zZXJ0Q29uc3VtYWJsZSh0KTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGUuaXRlbTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gJGguX2NyZWF0ZUZyb21Qb3NpdGlvbkFuZFNoaWZ0KGUucHJldmlvdXNQb3NpdGlvbiwgZS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB7aXRlbTogdCwgcmFuZ2U6IGl9O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlc3RBbmRGaXJlKFwiaW5zZXJ0XCIsIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0LmdldEF0dHJpYnV0ZUtleXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLmF0dHJpYnV0ZUtleSA9IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4uYXR0cmlidXRlT2xkVmFsdWUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLmF0dHJpYnV0ZU5ld1ZhbHVlID0gdC5nZXRBdHRyaWJ1dGUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Rlc3RBbmRGaXJlKGBhdHRyaWJ1dGU6JHtlfWAsIG4pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJDb252ZXJzaW9uQXBpKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udmVydFJlbW92ZSh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnNpb25BcGkud3JpdGVyID0gbjtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcInJlbW92ZTpcIiArIGksIHtwb3NpdGlvbjogdCwgbGVuZ3RoOiBlfSwgdGhpcy5jb252ZXJzaW9uQXBpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NsZWFyQ29udmVyc2lvbkFwaSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnZlcnRBdHRyaWJ1dGUodCwgZSwgaSwgbiwgbykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uQXBpLndyaXRlciA9IG87XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnNpb25BcGkuY29uc3VtYWJsZSA9IHRoaXMuX2NyZWF0ZUNvbnN1bWFibGVGb3JSYW5nZSh0LCBgYXR0cmlidXRlOiR7ZX1gKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IG8uaXRlbTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gJGguX2NyZWF0ZUZyb21Qb3NpdGlvbkFuZFNoaWZ0KG8ucHJldmlvdXNQb3NpdGlvbiwgby5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB7aXRlbTogdCwgcmFuZ2U6IHIsIGF0dHJpYnV0ZUtleTogZSwgYXR0cmlidXRlT2xkVmFsdWU6IGksIGF0dHJpYnV0ZU5ld1ZhbHVlOiBufTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90ZXN0QW5kRmlyZShgYXR0cmlidXRlOiR7ZX1gLCBzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJDb252ZXJzaW9uQXBpKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udmVydFNlbGVjdGlvbih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gQXJyYXkuZnJvbShlLmdldE1hcmtlcnNBdFBvc2l0aW9uKHQuZ2V0Rmlyc3RQb3NpdGlvbigpKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnNpb25BcGkud3JpdGVyID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udmVyc2lvbkFwaS5jb25zdW1hYmxlID0gdGhpcy5fY3JlYXRlU2VsZWN0aW9uQ29uc3VtYWJsZSh0LCBuKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcInNlbGVjdGlvblwiLCB7c2VsZWN0aW9uOiB0fSwgdGhpcy5jb252ZXJzaW9uQXBpKTtcclxuICAgICAgICAgICAgICAgIGlmICghdC5pc0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghUWgodC5nZXRGaXJzdFBvc2l0aW9uKCksIGUsIHRoaXMuY29udmVyc2lvbkFwaS5tYXBwZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB7aXRlbTogdCwgbWFya2VyTmFtZTogZS5uYW1lLCBtYXJrZXJSYW5nZTogaX07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY29udmVyc2lvbkFwaS5jb25zdW1hYmxlLnRlc3QodCwgXCJhZGRNYXJrZXI6XCIgKyBlLm5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcImFkZE1hcmtlcjpcIiArIGUubmFtZSwgbiwgdGhpcy5jb252ZXJzaW9uQXBpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0LmdldEF0dHJpYnV0ZUtleXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW06IHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiB0LmdldEZpcnN0UmFuZ2UoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlS2V5OiBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVPbGRWYWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlTmV3VmFsdWU6IHQuZ2V0QXR0cmlidXRlKGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jb252ZXJzaW9uQXBpLmNvbnN1bWFibGUudGVzdCh0LCBcImF0dHJpYnV0ZTpcIiArIGkuYXR0cmlidXRlS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJhdHRyaWJ1dGU6XCIgKyBpLmF0dHJpYnV0ZUtleSArIFwiOiR0ZXh0XCIsIGksIHRoaXMuY29udmVyc2lvbkFwaSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGVhckNvbnZlcnNpb25BcGkoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb252ZXJ0TWFya2VyQWRkKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZS5yb290LmRvY3VtZW50IHx8IGUucm9vdC5yb290TmFtZSA9PSBcIiRncmF2ZXlhcmRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uQXBpLndyaXRlciA9IGk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gXCJhZGRNYXJrZXI6XCIgKyB0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG5ldyBLaDtcclxuICAgICAgICAgICAgICAgIG8uYWRkKGUsIG4pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uQXBpLmNvbnN1bWFibGUgPSBvO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKG4sIHttYXJrZXJOYW1lOiB0LCBtYXJrZXJSYW5nZTogZX0sIHRoaXMuY29udmVyc2lvbkFwaSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW8udGVzdChlLCBuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uQXBpLmNvbnN1bWFibGUgPSB0aGlzLl9jcmVhdGVDb25zdW1hYmxlRm9yUmFuZ2UoZSwgbik7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgZS5nZXRJdGVtcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNvbnZlcnNpb25BcGkuY29uc3VtYWJsZS50ZXN0KGksIG4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB7aXRlbTogaSwgcmFuZ2U6ICRoLl9jcmVhdGVPbihpKSwgbWFya2VyTmFtZTogdCwgbWFya2VyUmFuZ2U6IGV9O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZShuLCBvLCB0aGlzLmNvbnZlcnNpb25BcGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGVhckNvbnZlcnNpb25BcGkoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb252ZXJ0TWFya2VyUmVtb3ZlKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZS5yb290LmRvY3VtZW50IHx8IGUucm9vdC5yb290TmFtZSA9PSBcIiRncmF2ZXlhcmRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uQXBpLndyaXRlciA9IGk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJyZW1vdmVNYXJrZXI6XCIgKyB0LCB7bWFya2VyTmFtZTogdCwgbWFya2VyUmFuZ2U6IGV9LCB0aGlzLmNvbnZlcnNpb25BcGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJDb252ZXJzaW9uQXBpKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUluc2VydENvbnN1bWFibGUodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBLaDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGkuaXRlbTtcclxuICAgICAgICAgICAgICAgICAgICBlLmFkZCh0LCBcImluc2VydFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdC5nZXRBdHRyaWJ1dGVLZXlzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5hZGQodCwgXCJhdHRyaWJ1dGU6XCIgKyBpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVDb25zdW1hYmxlRm9yUmFuZ2UodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBLaDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiB0LmdldEl0ZW1zKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpLmFkZChuLCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZVNlbGVjdGlvbkNvbnN1bWFibGUodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBLaDtcclxuICAgICAgICAgICAgICAgIGkuYWRkKHQsIFwic2VsZWN0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpLmFkZCh0LCBcImFkZE1hcmtlcjpcIiArIG4ubmFtZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0LmdldEF0dHJpYnV0ZUtleXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGkuYWRkKHQsIFwiYXR0cmlidXRlOlwiICsgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF90ZXN0QW5kRmlyZSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY29udmVyc2lvbkFwaS5jb25zdW1hYmxlLnRlc3QoZS5pdGVtLCB0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuaXRlbS5uYW1lIHx8IFwiJHRleHRcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh0ICsgXCI6XCIgKyBpLCBlLCB0aGlzLmNvbnZlcnNpb25BcGkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jbGVhckNvbnZlcnNpb25BcGkoKSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5jb252ZXJzaW9uQXBpLndyaXRlcjtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmNvbnZlcnNpb25BcGkuY29uc3VtYWJsZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2cyhZaCwgZHMpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBRaCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBBcnJheS5mcm9tKHQuZ2V0QW5jZXN0b3JzKCkpO1xyXG4gICAgICAgICAgICBvLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIG8ucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICBjb25zdCByID0gby5zb21lKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG4uY29udGFpbnNJdGVtKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IGkudG9WaWV3RWxlbWVudCh0KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gISFlLmdldEN1c3RvbVByb3BlcnR5KFwiYWRkSGlnaGxpZ2h0XCIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gIXJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIFhoIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdFJhbmdlQmFja3dhcmQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JhbmdlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXR0cnMgPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFRvKHQsIGUsIGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBhbmNob3IoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmFuZ2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5fcmFuZ2VzW3RoaXMuX3Jhbmdlcy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGFzdFJhbmdlQmFja3dhcmQgPyB0LmVuZCA6IHQuc3RhcnRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBmb2N1cygpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9yYW5nZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9yYW5nZXNbdGhpcy5fcmFuZ2VzLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9sYXN0UmFuZ2VCYWNrd2FyZCA/IHQuc3RhcnQgOiB0LmVuZFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGlzQ29sbGFwc2VkKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuX3Jhbmdlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBpZiAodCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yYW5nZXNbMF0uaXNDb2xsYXBzZWRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCByYW5nZUNvdW50KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jhbmdlcy5sZW5ndGhcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGlzQmFja3dhcmQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuaXNDb2xsYXBzZWQgJiYgdGhpcy5fbGFzdFJhbmdlQmFja3dhcmRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNFcXVhbCh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yYW5nZUNvdW50ICE9IHQucmFuZ2VDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnJhbmdlQ291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFuY2hvci5pc0VxdWFsKHQuYW5jaG9yKSB8fCAhdGhpcy5mb2N1cy5pc0VxdWFsKHQuZm9jdXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5fcmFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgdC5fcmFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmlzRXF1YWwobikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgKiBnZXRSYW5nZXMoKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5fcmFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgbmV3ICRoKHQuc3RhcnQsIHQuZW5kKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRGaXJzdFJhbmdlKCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuX3Jhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdCB8fCBlLnN0YXJ0LmlzQmVmb3JlKHQuc3RhcnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPyBuZXcgJGgodC5zdGFydCwgdC5lbmQpIDogbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRMYXN0UmFuZ2UoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5fcmFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0IHx8IGUuZW5kLmlzQWZ0ZXIodC5lbmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPyBuZXcgJGgodC5zdGFydCwgdC5lbmQpIDogbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRGaXJzdFBvc2l0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZ2V0Rmlyc3RSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPyB0LnN0YXJ0LmNsb25lKCkgOiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldExhc3RQb3NpdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmdldExhc3RSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPyB0LmVuZC5jbG9uZSgpIDogbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRUbyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFJhbmdlcyhbXSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodCBpbnN0YW5jZW9mIFhoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UmFuZ2VzKHQuZ2V0UmFuZ2VzKCksIHQuaXNCYWNrd2FyZClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodCAmJiB0eXBlb2YgdC5nZXRSYW5nZXMgPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UmFuZ2VzKHQuZ2V0UmFuZ2VzKCksIHQuaXNCYWNrd2FyZClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodCBpbnN0YW5jZW9mICRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UmFuZ2VzKFt0XSwgISFlICYmICEhZS5iYWNrd2FyZClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodCBpbnN0YW5jZW9mIFVoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UmFuZ2VzKFtuZXcgJGgodCldKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0IGluc3RhbmNlb2YgemgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gISFpICYmICEhaS5iYWNrd2FyZDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZSA9PSBcImluXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9ICRoLl9jcmVhdGVJbih0KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZSA9PSBcIm9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9ICRoLl9jcmVhdGVPbih0KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBuZXcgJGgoVWguX2NyZWF0ZUF0KHQsIGUpKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJtb2RlbC1zZWxlY3Rpb24tc2V0VG8tcmVxdWlyZWQtc2Vjb25kLXBhcmFtZXRlcjogXCIgKyBcInNlbGVjdGlvbi5zZXRUbyByZXF1aXJlcyB0aGUgc2Vjb25kIHBhcmFtZXRlciB3aGVuIHRoZSBmaXJzdCBwYXJhbWV0ZXIgaXMgYSBub2RlLlwiLCBbdGhpcywgdF0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFJhbmdlcyhbb10sIG4pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGpzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UmFuZ2VzKHQsIGUgJiYgISFlLmJhY2t3YXJkKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibW9kZWwtc2VsZWN0aW9uLXNldFRvLW5vdC1zZWxlY3RhYmxlOiBDYW5ub3Qgc2V0IHRoZSBzZWxlY3Rpb24gdG8gdGhlIGdpdmVuIHBsYWNlLlwiLCBbdGhpcywgdF0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9zZXRSYW5nZXModCwgZSA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0ID0gQXJyYXkuZnJvbSh0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnNvbWUoZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoZSBpbnN0YW5jZW9mICRoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibW9kZWwtc2VsZWN0aW9uLXNldC1yYW5nZXMtbm90LXJhbmdlOiBcIiArIFwiU2VsZWN0aW9uIHJhbmdlIHNldCB0byBhbiBvYmplY3QgdGhhdCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgbW9kZWwuUmFuZ2UuXCIsIFt0aGlzLCB0XSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jhbmdlcy5ldmVyeSh0ID0+ICF0LmlzRXF1YWwoZSkpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmICh0Lmxlbmd0aCA9PT0gdGhpcy5fcmFuZ2VzLmxlbmd0aCAmJiAhaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQWxsUmFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3B1c2hSYW5nZShlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdFJhbmdlQmFja3dhcmQgPSAhIWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJjaGFuZ2U6cmFuZ2VcIiwge2RpcmVjdENoYW5nZTogdHJ1ZX0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldEZvY3VzKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFuY2hvciA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJtb2RlbC1zZWxlY3Rpb24tc2V0Rm9jdXMtbm8tcmFuZ2VzOiBDYW5ub3Qgc2V0IHNlbGVjdGlvbiBmb2N1cyBpZiB0aGVyZSBhcmUgbm8gcmFuZ2VzIGluIHNlbGVjdGlvbi5cIiwgW3RoaXMsIHRdKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IFVoLl9jcmVhdGVBdCh0LCBlKTtcclxuICAgICAgICAgICAgICAgIGlmIChpLmNvbXBhcmVXaXRoKHRoaXMuZm9jdXMpID09IFwic2FtZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5hbmNob3I7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmFuZ2VzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BvcFJhbmdlKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpLmNvbXBhcmVXaXRoKG4pID09IFwiYmVmb3JlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wdXNoUmFuZ2UobmV3ICRoKGksIG4pKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9sYXN0UmFuZ2VCYWNrd2FyZCA9IHRydWVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHVzaFJhbmdlKG5ldyAkaChuLCBpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbGFzdFJhbmdlQmFja3dhcmQgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiY2hhbmdlOnJhbmdlXCIsIHtkaXJlY3RDaGFuZ2U6IHRydWV9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRBdHRyaWJ1dGUodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F0dHJzLmdldCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F0dHJzLmVudHJpZXMoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRBdHRyaWJ1dGVLZXlzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F0dHJzLmtleXMoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBoYXNBdHRyaWJ1dGUodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2F0dHJzLmhhcyh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW1vdmVBdHRyaWJ1dGUodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzQXR0cmlidXRlKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXR0cnMuZGVsZXRlKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcImNoYW5nZTphdHRyaWJ1dGVcIiwge2F0dHJpYnV0ZUtleXM6IFt0XSwgZGlyZWN0Q2hhbmdlOiB0cnVlfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0QXR0cmlidXRlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdldEF0dHJpYnV0ZSh0KSAhPT0gZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2F0dHJzLnNldCh0LCBlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJjaGFuZ2U6YXR0cmlidXRlXCIsIHthdHRyaWJ1dGVLZXlzOiBbdF0sIGRpcmVjdENoYW5nZTogdHJ1ZX0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFNlbGVjdGVkRWxlbWVudCgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJhbmdlQ291bnQgIT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Rmlyc3RSYW5nZSgpLmdldENvbnRhaW5lZEVsZW1lbnQoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpcyh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PSBcInNlbGVjdGlvblwiIHx8IHQgPT0gXCJtb2RlbDpzZWxlY3Rpb25cIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIGdldFNlbGVjdGVkQmxvY2tzKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG5ldyBXZWFrU2V0O1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMuZ2V0UmFuZ2VzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZWYoZS5zdGFydCwgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgJiYgbmYoaSwgZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgaVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgZS5nZXRXYWxrZXIoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5pdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaS50eXBlID09IFwiZWxlbWVudEVuZFwiICYmIHRmKG4sIHQsIGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCBuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGVmKGUuZW5kLCB0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobiAmJiAhZS5lbmQuaXNUb3VjaGluZyhVaC5fY3JlYXRlQXQobiwgMCkpICYmIG5mKG4sIGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnRhaW5zRW50aXJlQ29udGVudCh0ID0gdGhpcy5hbmNob3Iucm9vdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFVoLl9jcmVhdGVBdCh0LCAwKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBVaC5fY3JlYXRlQXQodCwgXCJlbmRcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5pc1RvdWNoaW5nKHRoaXMuZ2V0Rmlyc3RQb3NpdGlvbigpKSAmJiBpLmlzVG91Y2hpbmcodGhpcy5nZXRMYXN0UG9zaXRpb24oKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3B1c2hSYW5nZSh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1JhbmdlKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VzLnB1c2gobmV3ICRoKHQuc3RhcnQsIHQuZW5kKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NoZWNrUmFuZ2UodCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCB0aGlzLl9yYW5nZXMubGVuZ3RoOyBlKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5pc0ludGVyc2VjdGluZyh0aGlzLl9yYW5nZXNbZV0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJtb2RlbC1zZWxlY3Rpb24tcmFuZ2UtaW50ZXJzZWN0czogVHJ5aW5nIHRvIGFkZCBhIHJhbmdlIHRoYXQgaW50ZXJzZWN0cyB3aXRoIGFub3RoZXIgcmFuZ2UgaW4gdGhlIHNlbGVjdGlvbi5cIiwgW3RoaXMsIHRdLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRlZFJhbmdlOiB0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW50ZXJzZWN0aW5nUmFuZ2U6IHRoaXMuX3Jhbmdlc1tlXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3JlbW92ZUFsbFJhbmdlcygpIHtcclxuICAgICAgICAgICAgICAgIHdoaWxlICh0aGlzLl9yYW5nZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BvcFJhbmdlKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3BvcFJhbmdlKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VzLnBvcCgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKFhoLCBkcyk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFpoKHQsIGUpIHtcclxuICAgICAgICAgICAgaWYgKGUuaGFzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlLmFkZCh0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHQucm9vdC5kb2N1bWVudC5tb2RlbC5zY2hlbWEuaXNCbG9jayh0KSAmJiB0LnBhcmVudFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdGYodCwgZSwgaSkge1xyXG4gICAgICAgICAgICByZXR1cm4gWmgodCwgZSkgJiYgbmYodCwgaSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGVmKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHQucGFyZW50O1xyXG4gICAgICAgICAgICBjb25zdCBuID0gaS5yb290LmRvY3VtZW50Lm1vZGVsLnNjaGVtYTtcclxuICAgICAgICAgICAgY29uc3QgbyA9IHQucGFyZW50LmdldEFuY2VzdG9ycyh7cGFyZW50Rmlyc3Q6IHRydWUsIGluY2x1ZGVTZWxmOiB0cnVlfSk7XHJcbiAgICAgICAgICAgIGxldCByID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IHMgPSBvLmZpbmQodCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgciA9IG4uaXNMaW1pdCh0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhciAmJiBaaCh0LCBlKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgby5mb3JFYWNoKHQgPT4gZS5hZGQodCkpO1xyXG4gICAgICAgICAgICByZXR1cm4gc1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbmYodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gb2YodCk7XHJcbiAgICAgICAgICAgIGlmICghaSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBuID0gZS5jb250YWluc1JhbmdlKCRoLl9jcmVhdGVPbihpKSwgdHJ1ZSk7XHJcbiAgICAgICAgICAgIHJldHVybiAhblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb2YodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5yb290LmRvY3VtZW50Lm1vZGVsLnNjaGVtYTtcclxuICAgICAgICAgICAgbGV0IGkgPSB0LnBhcmVudDtcclxuICAgICAgICAgICAgd2hpbGUgKGkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlLmlzQmxvY2soaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaSA9IGkucGFyZW50XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHJmIGV4dGVuZHMgJGgge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0LCBlKTtcclxuICAgICAgICAgICAgICAgIHNmLmNhbGwodGhpcylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGV0YWNoKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXModCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPT0gXCJsaXZlUmFuZ2VcIiB8fCB0ID09IFwibW9kZWw6bGl2ZVJhbmdlXCIgfHwgc3VwZXIuaXModClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9SYW5nZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgJGgodGhpcy5zdGFydCwgdGhpcy5lbmQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBmcm9tUmFuZ2UodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyByZih0LnN0YXJ0LCB0LmVuZClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2YoKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5yb290LmRvY3VtZW50Lm1vZGVsLCBcImFwcGx5T3BlcmF0aW9uXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZVswXTtcclxuICAgICAgICAgICAgICAgIGlmICghaS5pc0RvY3VtZW50T3BlcmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBhZi5jYWxsKHRoaXMsIGkpXHJcbiAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJsb3dcIn0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhZih0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmdldFRyYW5zZm9ybWVkQnlPcGVyYXRpb24odCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSAkaC5fY3JlYXRlRnJvbVJhbmdlcyhlKTtcclxuICAgICAgICAgICAgY29uc3QgbiA9ICFpLmlzRXF1YWwodGhpcyk7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBjZih0aGlzLCB0KTtcclxuICAgICAgICAgICAgbGV0IHIgPSBudWxsO1xyXG4gICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkucm9vdC5yb290TmFtZSA9PSBcIiRncmF2ZXlhcmRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LnR5cGUgPT0gXCJyZW1vdmVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gdC5zb3VyY2VQb3NpdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB0LmRlbGV0aW9uUG9zaXRpb25cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy50b1JhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXJ0ID0gaS5zdGFydDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW5kID0gaS5lbmQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJjaGFuZ2U6cmFuZ2VcIiwgZSwge2RlbGV0aW9uUG9zaXRpb246IHJ9KVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcImNoYW5nZTpjb250ZW50XCIsIHRoaXMudG9SYW5nZSgpLCB7ZGVsZXRpb25Qb3NpdGlvbjogcn0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNmKHQsIGUpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2VcImluc2VydFwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmNvbnRhaW5zUG9zaXRpb24oZS5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICBjYXNlXCJtb3ZlXCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlXCJyZW1vdmVcIjpcclxuICAgICAgICAgICAgICAgIGNhc2VcInJlaW5zZXJ0XCI6XHJcbiAgICAgICAgICAgICAgICBjYXNlXCJtZXJnZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmNvbnRhaW5zUG9zaXRpb24oZS5zb3VyY2VQb3NpdGlvbikgfHwgdC5zdGFydC5pc0VxdWFsKGUuc291cmNlUG9zaXRpb24pIHx8IHQuY29udGFpbnNQb3NpdGlvbihlLnRhcmdldFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIGNhc2VcInNwbGl0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuY29udGFpbnNQb3NpdGlvbihlLnNwbGl0UG9zaXRpb24pIHx8IHQuY29udGFpbnNQb3NpdGlvbihlLmluc2VydGlvblBvc2l0aW9uKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMocmYsIGRzKTtcclxuICAgICAgICBjb25zdCBsZiA9IFwic2VsZWN0aW9uOlwiO1xyXG5cclxuICAgICAgICBjbGFzcyBkZiB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbiA9IG5ldyB1Zih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbi5kZWxlZ2F0ZShcImNoYW5nZTpyYW5nZVwiKS50byh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbi5kZWxlZ2F0ZShcImNoYW5nZTphdHRyaWJ1dGVcIikudG8odGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3Rpb24uZGVsZWdhdGUoXCJjaGFuZ2U6bWFya2VyXCIpLnRvKHRoaXMpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBpc0NvbGxhcHNlZCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uaXNDb2xsYXBzZWRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGFuY2hvcigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uYW5jaG9yXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBmb2N1cygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uZm9jdXNcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHJhbmdlQ291bnQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLnJhbmdlQ291bnRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGhhc093blJhbmdlKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5oYXNPd25SYW5nZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgaXNCYWNrd2FyZCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uaXNCYWNrd2FyZFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgaXNHcmF2aXR5T3ZlcnJpZGRlbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uaXNHcmF2aXR5T3ZlcnJpZGRlblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgbWFya2VycygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24ubWFya2Vyc1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgX3JhbmdlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uX3Jhbmdlc1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRSYW5nZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmdldFJhbmdlcygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldEZpcnN0UG9zaXRpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmdldEZpcnN0UG9zaXRpb24oKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRMYXN0UG9zaXRpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmdldExhc3RQb3NpdGlvbigpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldEZpcnN0UmFuZ2UoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmdldEZpcnN0UmFuZ2UoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRMYXN0UmFuZ2UoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmdldExhc3RSYW5nZSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFNlbGVjdGVkQmxvY2tzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5nZXRTZWxlY3RlZEJsb2NrcygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFNlbGVjdGVkRWxlbWVudCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uZ2V0U2VsZWN0ZWRFbGVtZW50KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udGFpbnNFbnRpcmVDb250ZW50KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uY29udGFpbnNFbnRpcmVDb250ZW50KHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3Rpb24uZGVzdHJveSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldEF0dHJpYnV0ZUtleXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmdldEF0dHJpYnV0ZUtleXMoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5nZXRBdHRyaWJ1dGVzKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0QXR0cmlidXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3Rpb24uZ2V0QXR0cmlidXRlKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGhhc0F0dHJpYnV0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLmhhc0F0dHJpYnV0ZSh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZWZyZXNoKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0aW9uLl91cGRhdGVNYXJrZXJzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3Rpb24uX3VwZGF0ZUF0dHJpYnV0ZXMoZmFsc2UpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ID09IFwic2VsZWN0aW9uXCIgfHwgdCA9PSBcIm1vZGVsOnNlbGVjdGlvblwiIHx8IHQgPT0gXCJkb2N1bWVudFNlbGVjdGlvblwiIHx8IHQgPT0gXCJtb2RlbDpkb2N1bWVudFNlbGVjdGlvblwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9zZXRGb2N1cyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3Rpb24uc2V0Rm9jdXModCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3NldFRvKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbi5zZXRUbyh0LCBlLCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2V0QXR0cmlidXRlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NlbGVjdGlvbi5zZXRBdHRyaWJ1dGUodCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3JlbW92ZUF0dHJpYnV0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3Rpb24ucmVtb3ZlQXR0cmlidXRlKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRTdG9yZWRBdHRyaWJ1dGVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGlvbi5fZ2V0U3RvcmVkQXR0cmlidXRlcygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9vdmVycmlkZUdyYXZpdHkoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uLm92ZXJyaWRlR3Jhdml0eSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZXN0b3JlR3Jhdml0eSh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZWxlY3Rpb24ucmVzdG9yZUdyYXZpdHkodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIF9nZXRTdG9yZUF0dHJpYnV0ZUtleSh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbGYgKyB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBfaXNTdG9yZUF0dHJpYnV0ZUtleSh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5zdGFydHNXaXRoKGxmKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2cyhkZiwgZHMpO1xyXG5cclxuICAgICAgICBjbGFzcyB1ZiBleHRlbmRzIFhoIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFya2VycyA9IG5ldyB5cyh7aWRQcm9wZXJ0eTogXCJuYW1lXCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsID0gdC5tb2RlbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RvY3VtZW50ID0gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2F0dHJpYnV0ZVByaW9yaXR5ID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpeEdyYXZleWFyZFJhbmdlc0RhdGEgPSBbXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hhc0NoYW5nZWRSYW5nZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3ZlcnJpZGRlbkdyYXZpdHlSZWdpc3RlciA9IG5ldyBTZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMuX21vZGVsLCBcImFwcGx5T3BlcmF0aW9uXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IGVbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpLmlzRG9jdW1lbnRPcGVyYXRpb24gfHwgaS50eXBlID09IFwibWFya2VyXCIgfHwgaS50eXBlID09IFwicmVuYW1lXCIgfHwgaS50eXBlID09IFwibm9vcFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5fZml4R3JhdmV5YXJkUmFuZ2VzRGF0YS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qge2xpdmVSYW5nZTogdCwgc291cmNlUG9zaXRpb246IGV9ID0gdGhpcy5fZml4R3JhdmV5YXJkUmFuZ2VzRGF0YS5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maXhHcmF2ZXlhcmRTZWxlY3Rpb24odCwgZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2hhc0NoYW5nZWRSYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYXNDaGFuZ2VkUmFuZ2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiY2hhbmdlOnJhbmdlXCIsIHtkaXJlY3RDaGFuZ2U6IGZhbHNlfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwibG93ZXN0XCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub24oXCJjaGFuZ2U6cmFuZ2VcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLmdldFJhbmdlcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZG9jdW1lbnQuX3ZhbGlkYXRlU2VsZWN0aW9uUmFuZ2UodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJkb2N1bWVudC1zZWxlY3Rpb24td3JvbmctcG9zaXRpb246IFJhbmdlIGZyb20gZG9jdW1lbnQgc2VsZWN0aW9uIHN0YXJ0cyBvciBlbmRzIGF0IGluY29ycmVjdCBwb3NpdGlvbi5cIiwgdGhpcywge3JhbmdlOiB0fSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLl9tb2RlbC5tYXJrZXJzLCBcInVwZGF0ZVwiLCAoKSA9PiB0aGlzLl91cGRhdGVNYXJrZXJzKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLl9kb2N1bWVudCwgXCJjaGFuZ2VcIiwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBmZih0aGlzLl9tb2RlbCwgZSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBpc0NvbGxhcHNlZCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9yYW5nZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPT09IDAgPyB0aGlzLl9kb2N1bWVudC5fZ2V0RGVmYXVsdFJhbmdlKCkuaXNDb2xsYXBzZWQgOiBzdXBlci5pc0NvbGxhcHNlZFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgYW5jaG9yKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmFuY2hvciB8fCB0aGlzLl9kb2N1bWVudC5fZ2V0RGVmYXVsdFJhbmdlKCkuc3RhcnRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGZvY3VzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1cGVyLmZvY3VzIHx8IHRoaXMuX2RvY3VtZW50Ll9nZXREZWZhdWx0UmFuZ2UoKS5lbmRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHJhbmdlQ291bnQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmFuZ2VzLmxlbmd0aCA/IHRoaXMuX3Jhbmdlcy5sZW5ndGggOiAxXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBoYXNPd25SYW5nZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yYW5nZXMubGVuZ3RoID4gMFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgaXNHcmF2aXR5T3ZlcnJpZGRlbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhIXRoaXMuX292ZXJyaWRkZW5HcmF2aXR5UmVnaXN0ZXIuc2l6ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCB0aGlzLl9yYW5nZXMubGVuZ3RoOyB0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yYW5nZXNbdF0uZGV0YWNoKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcExpc3RlbmluZygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICogZ2V0UmFuZ2VzKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3Jhbmdlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB5aWVsZCogc3VwZXIuZ2V0UmFuZ2VzKClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgdGhpcy5fZG9jdW1lbnQuX2dldERlZmF1bHRSYW5nZSgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldEZpcnN0UmFuZ2UoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VwZXIuZ2V0Rmlyc3RSYW5nZSgpIHx8IHRoaXMuX2RvY3VtZW50Ll9nZXREZWZhdWx0UmFuZ2UoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRMYXN0UmFuZ2UoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VwZXIuZ2V0TGFzdFJhbmdlKCkgfHwgdGhpcy5fZG9jdW1lbnQuX2dldERlZmF1bHRSYW5nZSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldFRvKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyLnNldFRvKHQsIGUsIGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlQXR0cmlidXRlcyh0cnVlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZU1hcmtlcnMoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRGb2N1cyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5zZXRGb2N1cyh0LCBlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUF0dHJpYnV0ZXModHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVNYXJrZXJzKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0QXR0cmlidXRlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zZXRBdHRyaWJ1dGUodCwgZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gW3RdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcImNoYW5nZTphdHRyaWJ1dGVcIiwge2F0dHJpYnV0ZUtleXM6IGUsIGRpcmVjdENoYW5nZTogdHJ1ZX0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbW92ZUF0dHJpYnV0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVtb3ZlQXR0cmlidXRlKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IFt0XTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJjaGFuZ2U6YXR0cmlidXRlXCIsIHthdHRyaWJ1dGVLZXlzOiBlLCBkaXJlY3RDaGFuZ2U6IHRydWV9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvdmVycmlkZUdyYXZpdHkoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gaXMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX292ZXJyaWRkZW5HcmF2aXR5UmVnaXN0ZXIuYWRkKHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX292ZXJyaWRkZW5HcmF2aXR5UmVnaXN0ZXIuc2l6ZSA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUF0dHJpYnV0ZXModHJ1ZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlc3RvcmVHcmF2aXR5KHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fb3ZlcnJpZGRlbkdyYXZpdHlSZWdpc3Rlci5oYXModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiZG9jdW1lbnQtc2VsZWN0aW9uLWdyYXZpdHktd3JvbmctcmVzdG9yZTogQXR0ZW1wdGluZyB0byByZXN0b3JlIHRoZSBzZWxlY3Rpb24gZ3Jhdml0eSBmb3IgYW4gdW5rbm93biBVSUQuXCIsIHRoaXMsIHt1aWQ6IHR9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3ZlcnJpZGRlbkdyYXZpdHlSZWdpc3Rlci5kZWxldGUodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNHcmF2aXR5T3ZlcnJpZGRlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUF0dHJpYnV0ZXModHJ1ZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3BvcFJhbmdlKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VzLnBvcCgpLmRldGFjaCgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9wdXNoUmFuZ2UodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuX3ByZXBhcmVSYW5nZSh0KTtcclxuICAgICAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VzLnB1c2goZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3ByZXBhcmVSYW5nZSh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja1JhbmdlKHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQucm9vdCA9PSB0aGlzLl9kb2N1bWVudC5ncmF2ZXlhcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSByZi5mcm9tUmFuZ2UodCk7XHJcbiAgICAgICAgICAgICAgICBlLm9uKFwiY2hhbmdlOnJhbmdlXCIsICh0LCBpLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFzQ2hhbmdlZFJhbmdlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5yb290ID09IHRoaXMuX2RvY3VtZW50LmdyYXZleWFyZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9maXhHcmF2ZXlhcmRSYW5nZXNEYXRhLnB1c2goe2xpdmVSYW5nZTogZSwgc291cmNlUG9zaXRpb246IG4uZGVsZXRpb25Qb3NpdGlvbn0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdXBkYXRlTWFya2VycygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIGxldCBlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5fbW9kZWwubWFya2Vycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIHRoaXMuZ2V0UmFuZ2VzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkuY29udGFpbnNSYW5nZShuLCAhbi5pc0NvbGxhcHNlZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucHVzaChlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IEFycmF5LmZyb20odGhpcy5tYXJrZXJzKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1hcmtlcnMuaGFzKGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWFya2Vycy5hZGQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIEFycmF5LmZyb20odGhpcy5tYXJrZXJzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdC5pbmNsdWRlcyhpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hcmtlcnMucmVtb3ZlKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiY2hhbmdlOm1hcmtlclwiLCB7b2xkTWFya2VyczogaSwgZGlyZWN0Q2hhbmdlOiBmYWxzZX0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF91cGRhdGVBdHRyaWJ1dGVzKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBIcyh0aGlzLl9nZXRTdXJyb3VuZGluZ0F0dHJpYnV0ZXMoKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gSHModGhpcy5nZXRBdHRyaWJ1dGVzKCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hdHRyaWJ1dGVQcmlvcml0eSA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXR0cnMgPSBuZXcgTWFwXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW3QsIGVdIG9mIHRoaXMuX2F0dHJpYnV0ZVByaW9yaXR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlID09IFwibG93XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2F0dHJzLmRlbGV0ZSh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2F0dHJpYnV0ZVByaW9yaXR5LmRlbGV0ZSh0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0QXR0cmlidXRlc1RvKGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbdCwgZV0gb2YgdGhpcy5nZXRBdHRyaWJ1dGVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWkuaGFzKHQpIHx8IGkuZ2V0KHQpICE9PSBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ucHVzaCh0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW3RdIG9mIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaGFzQXR0cmlidXRlKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ucHVzaCh0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJjaGFuZ2U6YXR0cmlidXRlXCIsIHthdHRyaWJ1dGVLZXlzOiBuLCBkaXJlY3RDaGFuZ2U6IGZhbHNlfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3NldEF0dHJpYnV0ZSh0LCBlLCBpID0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGkgPyBcIm5vcm1hbFwiIDogXCJsb3dcIjtcclxuICAgICAgICAgICAgICAgIGlmIChuID09IFwibG93XCIgJiYgdGhpcy5fYXR0cmlidXRlUHJpb3JpdHkuZ2V0KHQpID09IFwibm9ybWFsXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBzdXBlci5nZXRBdHRyaWJ1dGUodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobyA9PT0gZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXR0cnMuc2V0KHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlUHJpb3JpdHkuc2V0KHQsIG4pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3JlbW92ZUF0dHJpYnV0ZSh0LCBlID0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUgPyBcIm5vcm1hbFwiIDogXCJsb3dcIjtcclxuICAgICAgICAgICAgICAgIGlmIChpID09IFwibG93XCIgJiYgdGhpcy5fYXR0cmlidXRlUHJpb3JpdHkuZ2V0KHQpID09IFwibm9ybWFsXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2F0dHJpYnV0ZVByaW9yaXR5LnNldCh0LCBpKTtcclxuICAgICAgICAgICAgICAgIGlmICghc3VwZXIuaGFzQXR0cmlidXRlKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hdHRycy5kZWxldGUodCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2V0QXR0cmlidXRlc1RvKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgU2V0O1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZSwgaV0gb2YgdGhpcy5nZXRBdHRyaWJ1dGVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5nZXQoZSkgPT09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlQXR0cmlidXRlKGUsIGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbaSwgbl0gb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9zZXRBdHRyaWJ1dGUoaSwgbiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuYWRkKGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgKiBfZ2V0U3RvcmVkQXR0cmlidXRlcygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmdldEZpcnN0UG9zaXRpb24oKS5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pc0NvbGxhcHNlZCAmJiB0LmlzRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdC5nZXRBdHRyaWJ1dGVLZXlzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuc3RhcnRzV2l0aChsZikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLnN1YnN0cihsZi5sZW5ndGgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGRbaSwgdC5nZXRBdHRyaWJ1dGUoZSldXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRTdXJyb3VuZGluZ0F0dHJpYnV0ZXMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5nZXRGaXJzdFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5fbW9kZWwuc2NoZW1hO1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzQ29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZ2V0Rmlyc3RSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuLml0ZW0uaXMoXCJlbGVtZW50XCIpICYmIGUuaXNPYmplY3Qobi5pdGVtKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobi50eXBlID09IFwidGV4dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gbi5pdGVtLmdldEF0dHJpYnV0ZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnRleHROb2RlID8gdC50ZXh0Tm9kZSA6IHQubm9kZUJlZm9yZTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdC50ZXh0Tm9kZSA/IHQudGV4dE5vZGUgOiB0Lm5vZGVBZnRlcjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNHcmF2aXR5T3ZlcnJpZGRlbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gaGYoZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBoZihuKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNHcmF2aXR5T3ZlcnJpZGRlbiAmJiAhaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdCA9IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlICh0ICYmICFpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ID0gdC5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gaGYodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQgPSBuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodCAmJiAhaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHQubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gaGYodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHRoaXMuX2dldFN0b3JlZEF0dHJpYnV0ZXMoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9maXhHcmF2ZXlhcmRTZWxlY3Rpb24odCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9tb2RlbC5zY2hlbWEuZ2V0TmVhcmVzdFNlbGVjdGlvblJhbmdlKGkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMuX3Jhbmdlcy5pbmRleE9mKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VzLnNwbGljZShvLCAxKTtcclxuICAgICAgICAgICAgICAgIHQuZGV0YWNoKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9wcmVwYXJlUmFuZ2Uobik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmFuZ2VzLnNwbGljZShvLCAwLCB0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBoZih0KSB7XHJcbiAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgRmggfHwgdCBpbnN0YW5jZW9mIExoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5nZXRBdHRyaWJ1dGVzKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZmYodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5kb2N1bWVudC5kaWZmZXI7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiBpLmdldENoYW5nZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG4udHlwZSAhPSBcImluc2VydFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuLnBvc2l0aW9uLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuLmxlbmd0aCA9PT0gaS5tYXhPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAobykge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuZW5xdWV1ZUNoYW5nZShlLCB0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IEFycmF5LmZyb20oaS5nZXRBdHRyaWJ1dGVLZXlzKCkpLmZpbHRlcih0ID0+IHQuc3RhcnRzV2l0aChsZikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmVBdHRyaWJ1dGUobiwgaSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGdmIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlzcGF0Y2hlcnMgPSB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFkZCh0KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5fZGlzcGF0Y2hlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0KGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbWYgPSAxLCBwZiA9IDQ7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGJmKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIEhyKHQsIG1mIHwgcGYpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgd2YgPSBiZjtcclxuXHJcbiAgICAgICAgY2xhc3Mga2YgZXh0ZW5kcyBnZiB7XHJcbiAgICAgICAgICAgIGVsZW1lbnRUb0VsZW1lbnQodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKE5mKHQpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVUb0VsZW1lbnQodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKE1mKHQpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVUb0F0dHJpYnV0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoQmYodCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1hcmtlclRvRWxlbWVudCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoemYodCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1hcmtlclRvSGlnaGxpZ2h0KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChMZih0KSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX2YoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpLmNvbnN1bWFibGUuY29uc3VtZShlLml0ZW0sIFwiaW5zZXJ0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS53cml0ZXI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gaS5tYXBwZXIudG9WaWV3UG9zaXRpb24oZS5yYW5nZS5zdGFydCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbi5jcmVhdGVUZXh0KGUuaXRlbS5kYXRhKTtcclxuICAgICAgICAgICAgICAgIG4uaW5zZXJ0KG8sIHIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHZmKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHQsIGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLm1hcHBlci50b1ZpZXdQb3NpdGlvbihlLnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBlLnBvc2l0aW9uLmdldFNoaWZ0ZWRCeShlLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gaS5tYXBwZXIudG9WaWV3UG9zaXRpb24obywge2lzUGhhbnRvbTogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IGkud3JpdGVyLmNyZWF0ZVJhbmdlKG4sIHIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IGkud3JpdGVyLnJlbW92ZShzLmdldFRyaW1tZWQoKSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgaS53cml0ZXIuY3JlYXRlUmFuZ2VJbihhKS5nZXRJdGVtcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5tYXBwZXIudW5iaW5kVmlld0VsZW1lbnQodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geWYodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5jcmVhdGVBdHRyaWJ1dGVFbGVtZW50KFwic3BhblwiLCBlLmF0dHJpYnV0ZXMpO1xyXG4gICAgICAgICAgICBpZiAoZS5jbGFzc2VzKSB7XHJcbiAgICAgICAgICAgICAgICBpLl9hZGRDbGFzcyhlLmNsYXNzZXMpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGUucHJpb3JpdHkpIHtcclxuICAgICAgICAgICAgICAgIGkuX3ByaW9yaXR5ID0gZS5wcmlvcml0eVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGkuX2lkID0gZS5pZDtcclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHhmKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHQsIGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGlmIChuLmlzQ29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkuY29uc3VtYWJsZS5jb25zdW1lKG4sIFwic2VsZWN0aW9uXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygbi5nZXRSYW5nZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBpLm1hcHBlci50b1ZpZXdSYW5nZSh0KTtcclxuICAgICAgICAgICAgICAgICAgICBvLnB1c2goZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkud3JpdGVyLnNldFNlbGVjdGlvbihvLCB7YmFja3dhcmQ6IG4uaXNCYWNrd2FyZH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIENmKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHQsIGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGlmICghbi5pc0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFpLmNvbnN1bWFibGUuY29uc3VtZShuLCBcInNlbGVjdGlvblwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGkud3JpdGVyO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG4uZ2V0Rmlyc3RQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IGkubWFwcGVyLnRvVmlld1Bvc2l0aW9uKHIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IG8uYnJlYWtBdHRyaWJ1dGVzKHMpO1xyXG4gICAgICAgICAgICAgICAgby5zZXRTZWxlY3Rpb24oYSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQWYoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGkud3JpdGVyO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG4uZG9jdW1lbnQuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG8uZ2V0UmFuZ2VzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5pc0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5lbmQucGFyZW50LmlzQXR0YWNoZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS53cml0ZXIubWVyZ2VBdHRyaWJ1dGVzKHQuc3RhcnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuLnNldFNlbGVjdGlvbihudWxsKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBUZih0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHQoaS5hdHRyaWJ1dGVPbGRWYWx1ZSwgbi53cml0ZXIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHQoaS5hdHRyaWJ1dGVOZXdWYWx1ZSwgbi53cml0ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvICYmICFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIW4uY29uc3VtYWJsZS5jb25zdW1lKGkuaXRlbSwgZS5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG4ud3JpdGVyO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IHMuZG9jdW1lbnQuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkuaXRlbSBpbnN0YW5jZW9mIFhoIHx8IGkuaXRlbSBpbnN0YW5jZW9mIGRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcy53cmFwKGEuZ2V0Rmlyc3RSYW5nZSgpLCByKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdCA9IG4ubWFwcGVyLnRvVmlld1JhbmdlKGkucmFuZ2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpLmF0dHJpYnV0ZU9sZFZhbHVlICE9PSBudWxsICYmIG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHMudW53cmFwKHQsIG8pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpLmF0dHJpYnV0ZU5ld1ZhbHVlICE9PSBudWxsICYmIHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcy53cmFwKHQsIHIpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBQZih0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHQoaS5pdGVtLCBuLndyaXRlcik7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW8pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghbi5jb25zdW1hYmxlLmNvbnN1bWUoaS5pdGVtLCBcImluc2VydFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG4ubWFwcGVyLnRvVmlld1Bvc2l0aW9uKGkucmFuZ2Uuc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgbi5tYXBwZXIuYmluZEVsZW1lbnRzKGkuaXRlbSwgbyk7XHJcbiAgICAgICAgICAgICAgICBuLndyaXRlci5pbnNlcnQociwgbylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gU2YodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGUsIGksIG4pID0+IHtcclxuICAgICAgICAgICAgICAgIGkuaXNPcGVuaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0KGksIG4ud3JpdGVyKTtcclxuICAgICAgICAgICAgICAgIGkuaXNPcGVuaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gdChpLCBuLndyaXRlcik7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW8gfHwgIXIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBpLm1hcmtlclJhbmdlO1xyXG4gICAgICAgICAgICAgICAgaWYgKHMuaXNDb2xsYXBzZWQgJiYgIW4uY29uc3VtYWJsZS5jb25zdW1lKHMsIGUubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuLmNvbnN1bWFibGUuY29uc3VtZSh0Lml0ZW0sIGUubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IG4ubWFwcGVyO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IG4ud3JpdGVyO1xyXG4gICAgICAgICAgICAgICAgYy5pbnNlcnQoYS50b1ZpZXdQb3NpdGlvbihzLnN0YXJ0KSwgbyk7XHJcbiAgICAgICAgICAgICAgICBuLm1hcHBlci5iaW5kRWxlbWVudFRvTWFya2VyKG8sIGkubWFya2VyTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXMuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjLmluc2VydChhLnRvVmlld1Bvc2l0aW9uKHMuZW5kKSwgcik7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5tYXBwZXIuYmluZEVsZW1lbnRUb01hcmtlcihyLCBpLm1hcmtlck5hbWUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlLnN0b3AoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBFZigpIHtcclxuICAgICAgICAgICAgcmV0dXJuICh0LCBlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5tYXBwZXIubWFya2VyTmFtZVRvRWxlbWVudHMoZS5tYXJrZXJOYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmICghbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpLm1hcHBlci51bmJpbmRFbGVtZW50RnJvbU1hcmtlck5hbWUodCwgZS5tYXJrZXJOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpLndyaXRlci5jbGVhcihpLndyaXRlci5jcmVhdGVSYW5nZU9uKHQpLCB0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaS53cml0ZXIuY2xlYXJDbG9uZWRFbGVtZW50c0dyb3VwKGUubWFya2VyTmFtZSk7XHJcbiAgICAgICAgICAgICAgICB0LnN0b3AoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBSZih0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHQoaS5hdHRyaWJ1dGVPbGRWYWx1ZSwgaSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gdChpLmF0dHJpYnV0ZU5ld1ZhbHVlLCBpKTtcclxuICAgICAgICAgICAgICAgIGlmICghbyAmJiAhcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFuLmNvbnN1bWFibGUuY29uc3VtZShpLml0ZW0sIGUubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuLm1hcHBlci50b1ZpZXdFbGVtZW50KGkuaXRlbSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gbi53cml0ZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiY29udmVyc2lvbi1hdHRyaWJ1dGUtdG8tYXR0cmlidXRlLW9uLXRleHQ6IFwiICsgXCJUcnlpbmcgdG8gY29udmVydCB0ZXh0IG5vZGUncyBhdHRyaWJ1dGUgd2l0aCBhdHRyaWJ1dGUtdG8tYXR0cmlidXRlIGNvbnZlcnRlci5cIiwgW2ksIG5dKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGkuYXR0cmlidXRlT2xkVmFsdWUgIT09IG51bGwgJiYgbykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLmtleSA9PSBcImNsYXNzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IEFycmF5LmlzQXJyYXkoby52YWx1ZSkgPyBvLnZhbHVlIDogW28udmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5yZW1vdmVDbGFzcyhlLCBzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvLmtleSA9PSBcInN0eWxlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IE9iamVjdC5rZXlzKG8udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5yZW1vdmVTdHlsZShlLCBzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYS5yZW1vdmVBdHRyaWJ1dGUoby5rZXksIHMpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGkuYXR0cmlidXRlTmV3VmFsdWUgIT09IG51bGwgJiYgcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyLmtleSA9PSBcImNsYXNzXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IEFycmF5LmlzQXJyYXkoci52YWx1ZSkgPyByLnZhbHVlIDogW3IudmFsdWVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5hZGRDbGFzcyhlLCBzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyLmtleSA9PSBcInN0eWxlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IE9iamVjdC5rZXlzKHIudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5zZXRTdHlsZShlLCByLnZhbHVlW2VdLCBzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYS5zZXRBdHRyaWJ1dGUoci5rZXksIHIudmFsdWUsIHMpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBPZih0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpLml0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghKGkuaXRlbSBpbnN0YW5jZW9mIFhoIHx8IGkuaXRlbSBpbnN0YW5jZW9mIGRmKSAmJiAhaS5pdGVtLmlzKFwidGV4dFByb3h5XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gV2YodCwgaSwgbik7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW8pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghbi5jb25zdW1hYmxlLmNvbnN1bWUoaS5pdGVtLCBlLm5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbi53cml0ZXI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0geWYociwgbyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gci5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBpZiAoaS5pdGVtIGluc3RhbmNlb2YgWGggfHwgaS5pdGVtIGluc3RhbmNlb2YgZGYpIHtcclxuICAgICAgICAgICAgICAgICAgICByLndyYXAoYS5nZXRGaXJzdFJhbmdlKCksIHMsIGEpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBuLm1hcHBlci50b1ZpZXdSYW5nZShpLnJhbmdlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gci53cmFwKHQsIHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBlLmdldEl0ZW1zKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuaXMoXCJhdHRyaWJ1dGVFbGVtZW50XCIpICYmIHQuaXNTaW1pbGFyKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLm1hcHBlci5iaW5kRWxlbWVudFRvTWFya2VyKHQsIGkubWFya2VyTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBJZih0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpLml0ZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghKGkuaXRlbSBpbnN0YW5jZW9mIGpoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IFdmKHQsIGksIG4pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIW4uY29uc3VtYWJsZS50ZXN0KGkuaXRlbSwgZS5uYW1lKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG4ubWFwcGVyLnRvVmlld0VsZW1lbnQoaS5pdGVtKTtcclxuICAgICAgICAgICAgICAgIGlmIChyICYmIHIuZ2V0Q3VzdG9tUHJvcGVydHkoXCJhZGRIaWdobGlnaHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBuLmNvbnN1bWFibGUuY29uc3VtZShpLml0ZW0sIGUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mICRoLl9jcmVhdGVJbihpLml0ZW0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4uY29uc3VtYWJsZS5jb25zdW1lKHQuaXRlbSwgZS5uYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByLmdldEN1c3RvbVByb3BlcnR5KFwiYWRkSGlnaGxpZ2h0XCIpKHIsIG8sIG4ud3JpdGVyKTtcclxuICAgICAgICAgICAgICAgICAgICBuLm1hcHBlci5iaW5kRWxlbWVudFRvTWFya2VyKHIsIGkubWFya2VyTmFtZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVmYodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGUsIGksIG4pID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpLm1hcmtlclJhbmdlLmlzQ29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gV2YodCwgaSwgbik7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW8pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB5ZihuLndyaXRlciwgbyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gbi5tYXBwZXIubWFya2VyTmFtZVRvRWxlbWVudHMoaS5tYXJrZXJOYW1lKTtcclxuICAgICAgICAgICAgICAgIGlmICghcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBuLm1hcHBlci51bmJpbmRFbGVtZW50RnJvbU1hcmtlck5hbWUodCwgaS5tYXJrZXJOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5pcyhcImF0dHJpYnV0ZUVsZW1lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbi53cml0ZXIudW53cmFwKG4ud3JpdGVyLmNyZWF0ZVJhbmdlT24odCksIHIpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5nZXRDdXN0b21Qcm9wZXJ0eShcInJlbW92ZUhpZ2hsaWdodFwiKSh0LCBvLmlkLCBuLndyaXRlcilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuLndyaXRlci5jbGVhckNsb25lZEVsZW1lbnRzR3JvdXAoaS5tYXJrZXJOYW1lKTtcclxuICAgICAgICAgICAgICAgIGUuc3RvcCgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE5mKHQpIHtcclxuICAgICAgICAgICAgdCA9IHdmKHQpO1xyXG4gICAgICAgICAgICB0LnZpZXcgPSBGZih0LnZpZXcsIFwiY29udGFpbmVyXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlLm9uKFwiaW5zZXJ0OlwiICsgdC5tb2RlbCwgUGYodC52aWV3KSwge3ByaW9yaXR5OiB0LmNvbnZlcnRlclByaW9yaXR5IHx8IFwibm9ybWFsXCJ9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBNZih0KSB7XHJcbiAgICAgICAgICAgIHQgPSB3Zih0KTtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHQubW9kZWwua2V5ID8gdC5tb2RlbC5rZXkgOiB0Lm1vZGVsO1xyXG4gICAgICAgICAgICBsZXQgaSA9IFwiYXR0cmlidXRlOlwiICsgZTtcclxuICAgICAgICAgICAgaWYgKHQubW9kZWwubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgaSArPSBcIjpcIiArIHQubW9kZWwubmFtZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0Lm1vZGVsLnZhbHVlcykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHQubW9kZWwudmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC52aWV3W2VdID0gRmYodC52aWV3W2VdLCBcImF0dHJpYnV0ZVwiKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdC52aWV3ID0gRmYodC52aWV3LCBcImF0dHJpYnV0ZVwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBqZih0KTtcclxuICAgICAgICAgICAgcmV0dXJuIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5vbihpLCBUZihuKSwge3ByaW9yaXR5OiB0LmNvbnZlcnRlclByaW9yaXR5IHx8IFwibm9ybWFsXCJ9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBCZih0KSB7XHJcbiAgICAgICAgICAgIHQgPSB3Zih0KTtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHQubW9kZWwua2V5ID8gdC5tb2RlbC5rZXkgOiB0Lm1vZGVsO1xyXG4gICAgICAgICAgICBsZXQgaSA9IFwiYXR0cmlidXRlOlwiICsgZTtcclxuICAgICAgICAgICAgaWYgKHQubW9kZWwubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgaSArPSBcIjpcIiArIHQubW9kZWwubmFtZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0Lm1vZGVsLnZhbHVlcykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHQubW9kZWwudmFsdWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC52aWV3W2VdID0gSGYodC52aWV3W2VdKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdC52aWV3ID0gSGYodC52aWV3KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBqZih0KTtcclxuICAgICAgICAgICAgcmV0dXJuIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5vbihpLCBSZihuKSwge3ByaW9yaXR5OiB0LmNvbnZlcnRlclByaW9yaXR5IHx8IFwibm9ybWFsXCJ9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB6Zih0KSB7XHJcbiAgICAgICAgICAgIHQgPSB3Zih0KTtcclxuICAgICAgICAgICAgdC52aWV3ID0gRmYodC52aWV3LCBcInVpXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlLm9uKFwiYWRkTWFya2VyOlwiICsgdC5tb2RlbCwgU2YodC52aWV3KSwge3ByaW9yaXR5OiB0LmNvbnZlcnRlclByaW9yaXR5IHx8IFwibm9ybWFsXCJ9KTtcclxuICAgICAgICAgICAgICAgIGUub24oXCJyZW1vdmVNYXJrZXI6XCIgKyB0Lm1vZGVsLCBFZih0LnZpZXcpLCB7cHJpb3JpdHk6IHQuY29udmVydGVyUHJpb3JpdHkgfHwgXCJub3JtYWxcIn0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIExmKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5vbihcImFkZE1hcmtlcjpcIiArIHQubW9kZWwsIE9mKHQudmlldyksIHtwcmlvcml0eTogdC5jb252ZXJ0ZXJQcmlvcml0eSB8fCBcIm5vcm1hbFwifSk7XHJcbiAgICAgICAgICAgICAgICBlLm9uKFwiYWRkTWFya2VyOlwiICsgdC5tb2RlbCwgSWYodC52aWV3KSwge3ByaW9yaXR5OiB0LmNvbnZlcnRlclByaW9yaXR5IHx8IFwibm9ybWFsXCJ9KTtcclxuICAgICAgICAgICAgICAgIGUub24oXCJyZW1vdmVNYXJrZXI6XCIgKyB0Lm1vZGVsLCBWZih0LnZpZXcpLCB7cHJpb3JpdHk6IHQuY29udmVydGVyUHJpb3JpdHkgfHwgXCJub3JtYWxcIn0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEZmKHQsIGUpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0ID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gKGksIG4pID0+IERmKHQsIG4sIGUpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBEZih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdCA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICB0ID0ge25hbWU6IHR9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IG47XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBPYmplY3QuYXNzaWduKHt9LCB0LmF0dHJpYnV0ZXMpO1xyXG4gICAgICAgICAgICBpZiAoaSA9PSBcImNvbnRhaW5lclwiKSB7XHJcbiAgICAgICAgICAgICAgICBuID0gZS5jcmVhdGVDb250YWluZXJFbGVtZW50KHQubmFtZSwgbylcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpID09IFwiYXR0cmlidXRlXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB7cHJpb3JpdHk6IHQucHJpb3JpdHkgfHwgd2wuREVGQVVMVF9QUklPUklUWX07XHJcbiAgICAgICAgICAgICAgICBuID0gZS5jcmVhdGVBdHRyaWJ1dGVFbGVtZW50KHQubmFtZSwgbywgaSlcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG4gPSBlLmNyZWF0ZVVJRWxlbWVudCh0Lm5hbWUsIG8pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQuc3R5bGVzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gT2JqZWN0LmtleXModC5zdHlsZXMpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBvIG9mIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnNldFN0eWxlKG8sIHQuc3R5bGVzW29dLCBuKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0LmNsYXNzZXMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LmNsYXNzZXM7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGkgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuYWRkQ2xhc3MoaSwgbilcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5hZGRDbGFzcyh0LCBuKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gamYodCkge1xyXG4gICAgICAgICAgICBpZiAodC5tb2RlbC52YWx1ZXMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LnZpZXdbZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG4oZSwgaSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0LnZpZXdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSGYodCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUgPT4gKHtrZXk6IHQsIHZhbHVlOiBlfSlcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgdCA9PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiB0XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlID0+ICh7a2V5OiB0LmtleSwgdmFsdWU6IGV9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gV2YodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBjb25zdCBuID0gdHlwZW9mIHQgPT0gXCJmdW5jdGlvblwiID8gdChlLCBpKSA6IHQ7XHJcbiAgICAgICAgICAgIGlmICghbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIW4ucHJpb3JpdHkpIHtcclxuICAgICAgICAgICAgICAgIG4ucHJpb3JpdHkgPSAxMFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghbi5pZCkge1xyXG4gICAgICAgICAgICAgICAgbi5pZCA9IGUubWFya2VyTmFtZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBxZiBleHRlbmRzIGdmIHtcclxuICAgICAgICAgICAgZWxlbWVudFRvRWxlbWVudCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoS2YodCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVsZW1lbnRUb0F0dHJpYnV0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hZGQoSmYodCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZVRvQXR0cmlidXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChZZih0KSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWxlbWVudFRvTWFya2VyKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFkZChRZih0KSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVWYoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlLm1vZGVsUmFuZ2UgJiYgaS5jb25zdW1hYmxlLmNvbnN1bWUoZS52aWV3SXRlbSwge25hbWU6IHRydWV9KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHttb2RlbFJhbmdlOiB0LCBtb2RlbEN1cnNvcjogbn0gPSBpLmNvbnZlcnRDaGlsZHJlbihlLnZpZXdJdGVtLCBlLm1vZGVsQ3Vyc29yKTtcclxuICAgICAgICAgICAgICAgICAgICBlLm1vZGVsUmFuZ2UgPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgIGUubW9kZWxDdXJzb3IgPSBuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uICRmKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHQsIGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpLnNjaGVtYS5jaGVja0NoaWxkKGUubW9kZWxDdXJzb3IsIFwiJHRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaS5jb25zdW1hYmxlLmNvbnN1bWUoZS52aWV3SXRlbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGkud3JpdGVyLmNyZWF0ZVRleHQoZS52aWV3SXRlbS5kYXRhKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS53cml0ZXIuaW5zZXJ0KHQsIGUubW9kZWxDdXJzb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLm1vZGVsUmFuZ2UgPSAkaC5fY3JlYXRlRnJvbVBvc2l0aW9uQW5kU2hpZnQoZS5tb2RlbEN1cnNvciwgdC5vZmZzZXRTaXplKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5tb2RlbEN1cnNvciA9IGUubW9kZWxSYW5nZS5lbmRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEdmKHQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChpLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gbi5uZXdTZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbmV3IFhoO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG8uZ2V0UmFuZ2VzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzLnB1c2goZS50b01vZGVsUmFuZ2UodCkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByLnNldFRvKHMsIHtiYWNrd2FyZDogby5pc0JhY2t3YXJkfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXIuaXNFcXVhbCh0LmRvY3VtZW50LnNlbGVjdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LmNoYW5nZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRTZWxlY3Rpb24ocilcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBLZih0KSB7XHJcbiAgICAgICAgICAgIHQgPSB3Zih0KTtcclxuICAgICAgICAgICAgY29uc3QgZSA9IFpmKHQpO1xyXG4gICAgICAgICAgICBjb25zdCBpID0gWGYodC52aWV3KTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGkgPyBcImVsZW1lbnQ6XCIgKyBpIDogXCJlbGVtZW50XCI7XHJcbiAgICAgICAgICAgIHJldHVybiBpID0+IHtcclxuICAgICAgICAgICAgICAgIGkub24obiwgZSwge3ByaW9yaXR5OiB0LmNvbnZlcnRlclByaW9yaXR5IHx8IFwibm9ybWFsXCJ9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBKZih0KSB7XHJcbiAgICAgICAgICAgIHQgPSB3Zih0KTtcclxuICAgICAgICAgICAgaWcodCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSBuZyh0LCBmYWxzZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBYZih0LnZpZXcpO1xyXG4gICAgICAgICAgICBjb25zdCBuID0gaSA/IFwiZWxlbWVudDpcIiArIGkgOiBcImVsZW1lbnRcIjtcclxuICAgICAgICAgICAgcmV0dXJuIGkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaS5vbihuLCBlLCB7cHJpb3JpdHk6IHQuY29udmVydGVyUHJpb3JpdHkgfHwgXCJsb3dcIn0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFlmKHQpIHtcclxuICAgICAgICAgICAgdCA9IHdmKHQpO1xyXG4gICAgICAgICAgICBsZXQgZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdC52aWV3ID09IFwic3RyaW5nXCIgfHwgdC52aWV3LmtleSkge1xyXG4gICAgICAgICAgICAgICAgZSA9IGVnKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWcodCwgZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBuZyh0LCB0cnVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5vbihcImVsZW1lbnRcIiwgaSwge3ByaW9yaXR5OiB0LmNvbnZlcnRlclByaW9yaXR5IHx8IFwibG93XCJ9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBRZih0KSB7XHJcbiAgICAgICAgICAgIHQgPSB3Zih0KTtcclxuICAgICAgICAgICAgc2codCk7XHJcbiAgICAgICAgICAgIHJldHVybiBLZih0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWGYodCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQgPT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgdC5uYW1lID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0Lm5hbWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWmYodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC52aWV3ID8gbmV3IFdzKHQudmlldykgOiBudWxsO1xyXG4gICAgICAgICAgICByZXR1cm4gKGksIG4sIG8pID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCByID0ge307XHJcbiAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLm1hdGNoKG4udmlld0l0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgciA9IHQubWF0Y2hcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHIubmFtZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gdGcodC5tb2RlbCwgbi52aWV3SXRlbSwgby53cml0ZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIW8uY29uc3VtYWJsZS50ZXN0KG4udmlld0l0ZW0sIHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gby5zcGxpdFRvQWxsb3dlZFBhcmVudChzLCBuLm1vZGVsQ3Vyc29yKTtcclxuICAgICAgICAgICAgICAgIGlmICghYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgby53cml0ZXIuaW5zZXJ0KHMsIGEucG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgby5jb252ZXJ0Q2hpbGRyZW4obi52aWV3SXRlbSwgby53cml0ZXIuY3JlYXRlUG9zaXRpb25BdChzLCAwKSk7XHJcbiAgICAgICAgICAgICAgICBvLmNvbnN1bWFibGUuY29uc3VtZShuLnZpZXdJdGVtLCByKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBvLmdldFNwbGl0UGFydHMocyk7XHJcbiAgICAgICAgICAgICAgICBuLm1vZGVsUmFuZ2UgPSBuZXcgJGgoby53cml0ZXIuY3JlYXRlUG9zaXRpb25CZWZvcmUocyksIG8ud3JpdGVyLmNyZWF0ZVBvc2l0aW9uQWZ0ZXIoY1tjLmxlbmd0aCAtIDFdKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYS5jdXJzb3JQYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBuLm1vZGVsQ3Vyc29yID0gby53cml0ZXIuY3JlYXRlUG9zaXRpb25BdChhLmN1cnNvclBhcmVudCwgMClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5tb2RlbEN1cnNvciA9IG4ubW9kZWxSYW5nZS5lbmRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdGcodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBpZiAodCBpbnN0YW5jZW9mIEZ1bmN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdChlLCBpKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkuY3JlYXRlRWxlbWVudCh0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBlZyh0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdC52aWV3ID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHQudmlldyA9IHtrZXk6IHQudmlld31cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBlID0gdC52aWV3LmtleTtcclxuICAgICAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgICAgIGlmIChlID09IFwiY2xhc3NcIiB8fCBlID09IFwic3R5bGVcIikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGUgPT0gXCJjbGFzc1wiID8gXCJjbGFzc2VzXCIgOiBcInN0eWxlc1wiO1xyXG4gICAgICAgICAgICAgICAgaSA9IHtbbl06IHQudmlldy52YWx1ZX1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0eXBlb2YgdC52aWV3LnZhbHVlID09IFwidW5kZWZpbmVkXCIgPyAvW1xcc1xcU10qLyA6IHQudmlldy52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGkgPSB7YXR0cmlidXRlczoge1tlXTogbn19XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQudmlldy5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpLm5hbWUgPSB0LnZpZXcubmFtZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQudmlldyA9IGk7XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBpZyh0LCBlID0gbnVsbCkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gZSA9PT0gbnVsbCA/IHRydWUgOiB0ID0+IHQuZ2V0QXR0cmlidXRlKGUpO1xyXG4gICAgICAgICAgICBjb25zdCBuID0gdHlwZW9mIHQubW9kZWwgIT0gXCJvYmplY3RcIiA/IHQubW9kZWwgOiB0Lm1vZGVsLmtleTtcclxuICAgICAgICAgICAgY29uc3QgbyA9IHR5cGVvZiB0Lm1vZGVsICE9IFwib2JqZWN0XCIgfHwgdHlwZW9mIHQubW9kZWwudmFsdWUgPT0gXCJ1bmRlZmluZWRcIiA/IGkgOiB0Lm1vZGVsLnZhbHVlO1xyXG4gICAgICAgICAgICB0Lm1vZGVsID0ge2tleTogbiwgdmFsdWU6IG99XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBuZyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgV3ModC52aWV3KTtcclxuICAgICAgICAgICAgcmV0dXJuIChuLCBvLCByKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gaS5tYXRjaChvLnZpZXdJdGVtKTtcclxuICAgICAgICAgICAgICAgIGlmICghcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IHQubW9kZWwua2V5O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHR5cGVvZiB0Lm1vZGVsLnZhbHVlID09IFwiZnVuY3Rpb25cIiA/IHQubW9kZWwudmFsdWUoby52aWV3SXRlbSkgOiB0Lm1vZGVsLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGMgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChvZyh0LnZpZXcsIG8udmlld0l0ZW0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcy5tYXRjaC5uYW1lID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgcy5tYXRjaC5uYW1lXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXIuY29uc3VtYWJsZS50ZXN0KG8udmlld0l0ZW0sIHMubWF0Y2gpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIW8ubW9kZWxSYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG8gPSBPYmplY3QuYXNzaWduKG8sIHIuY29udmVydENoaWxkcmVuKG8udmlld0l0ZW0sIG8ubW9kZWxDdXJzb3IpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbCA9IHJnKG8ubW9kZWxSYW5nZSwge2tleTogYSwgdmFsdWU6IGN9LCBlLCByKTtcclxuICAgICAgICAgICAgICAgIGlmIChsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgci5jb25zdW1hYmxlLmNvbnN1bWUoby52aWV3SXRlbSwgcy5tYXRjaClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb2codCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdHlwZW9mIHQgPT0gXCJmdW5jdGlvblwiID8gdChlKSA6IHQ7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaSA9PSBcIm9iamVjdFwiICYmICFYZihpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICFpLmNsYXNzZXMgJiYgIWkuYXR0cmlidXRlcyAmJiAhaS5zdHlsZXNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJnKHQsIGUsIGksIG4pIHtcclxuICAgICAgICAgICAgbGV0IG8gPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCByIG9mIEFycmF5LmZyb20odC5nZXRJdGVtcyh7c2hhbGxvdzogaX0pKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG4uc2NoZW1hLmNoZWNrQXR0cmlidXRlKHIsIGUua2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG4ud3JpdGVyLnNldEF0dHJpYnV0ZShlLmtleSwgZS52YWx1ZSwgcik7XHJcbiAgICAgICAgICAgICAgICAgICAgbyA9IHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc2codCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5tb2RlbDtcclxuICAgICAgICAgICAgdC5tb2RlbCA9ICh0LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdHlwZW9mIGUgPT0gXCJzdHJpbmdcIiA/IGUgOiBlKHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkuY3JlYXRlRWxlbWVudChcIiRtYXJrZXJcIiwge1wiZGF0YS1uYW1lXCI6IG59KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBhZyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3ID0gbmV3IEJoKGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXBwZXIgPSBuZXcgR2g7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25jYXN0RGlzcGF0Y2hlciA9IG5ldyBZaCh7bWFwcGVyOiB0aGlzLm1hcHBlcn0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMubW9kZWwuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gdGhpcy5tb2RlbC5tYXJrZXJzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLm1vZGVsLCBcIl9iZWZvcmVDaGFuZ2VzXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuX2Rpc2FibGVSZW5kZXJpbmcodHJ1ZSlcclxuICAgICAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJoaWdoZXN0XCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5tb2RlbCwgXCJfYWZ0ZXJDaGFuZ2VzXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXcuX2Rpc2FibGVSZW5kZXJpbmcoZmFsc2UpXHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwibG93ZXN0XCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8oaSwgXCJjaGFuZ2VcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlldy5jaGFuZ2UodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG93bmNhc3REaXNwYXRjaGVyLmNvbnZlcnRDaGFuZ2VzKGkuZGlmZmVyLCBvLCB0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3duY2FzdERpc3BhdGNoZXIuY29udmVydFNlbGVjdGlvbihuLCBvLCB0KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwibG93XCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy52aWV3LmRvY3VtZW50LCBcInNlbGVjdGlvbkNoYW5nZVwiLCBHZih0aGlzLm1vZGVsLCB0aGlzLm1hcHBlcikpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb3duY2FzdERpc3BhdGNoZXIub24oXCJpbnNlcnQ6JHRleHRcIiwgX2YoKSwge3ByaW9yaXR5OiBcImxvd2VzdFwifSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25jYXN0RGlzcGF0Y2hlci5vbihcInJlbW92ZVwiLCB2ZigpLCB7cHJpb3JpdHk6IFwibG93XCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG93bmNhc3REaXNwYXRjaGVyLm9uKFwic2VsZWN0aW9uXCIsIEFmKCksIHtwcmlvcml0eTogXCJsb3dcIn0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb3duY2FzdERpc3BhdGNoZXIub24oXCJzZWxlY3Rpb25cIiwgeGYoKSwge3ByaW9yaXR5OiBcImxvd1wifSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25jYXN0RGlzcGF0Y2hlci5vbihcInNlbGVjdGlvblwiLCBDZigpLCB7cHJpb3JpdHk6IFwibG93XCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5kb2N1bWVudC5yb290cy5iaW5kVG8odGhpcy5tb2RlbC5kb2N1bWVudC5yb290cykudXNpbmcodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQucm9vdE5hbWUgPT0gXCIkZ3JhdmV5YXJkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBjbCh0aGlzLnZpZXcuZG9jdW1lbnQsIHQubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5yb290TmFtZSA9IHQucm9vdE5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXBwZXIuYmluZEVsZW1lbnRzKHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcExpc3RlbmluZygpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKGFnLCBKYyk7XHJcblxyXG4gICAgICAgIGNsYXNzIGNnIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb21tYW5kcyA9IG5ldyBNYXBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWRkKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbW1hbmRzLnNldCh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbW1hbmRzLmdldCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBleGVjdXRlKHQsIC4uLmUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmdldCh0KTtcclxuICAgICAgICAgICAgICAgIGlmICghaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJjb21tYW5kY29sbGVjdGlvbi1jb21tYW5kLW5vdC1mb3VuZDogQ29tbWFuZCBkb2VzIG5vdCBleGlzdC5cIiwgdGhpcywge2NvbW1hbmROYW1lOiB0fSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkuZXhlY3V0ZSguLi5lKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIG5hbWVzKCkge1xyXG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuX2NvbW1hbmRzLmtleXMoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIGNvbW1hbmRzKCkge1xyXG4gICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuX2NvbW1hbmRzLnZhbHVlcygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbW1hbmRzW1N5bWJvbC5pdGVyYXRvcl0oKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMuY29tbWFuZHMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuZGVzdHJveSgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGxnIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb25zdW1hYmxlcyA9IG5ldyBNYXBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWRkKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuaXMoXCJ0ZXh0XCIpIHx8IHQuaXMoXCJkb2N1bWVudEZyYWdtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29uc3VtYWJsZXMuc2V0KHQsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jb25zdW1hYmxlcy5oYXModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpID0gbmV3IGRnKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnN1bWFibGVzLnNldCh0LCBpKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpID0gdGhpcy5fY29uc3VtYWJsZXMuZ2V0KHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpLmFkZChlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0ZXN0KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9jb25zdW1hYmxlcy5nZXQodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0LmlzKFwidGV4dFwiKSB8fCB0LmlzKFwiZG9jdW1lbnRGcmFnbWVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaS50ZXN0KGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN1bWUodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGVzdCh0LCBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmlzKFwidGV4dFwiKSB8fCB0LmlzKFwiZG9jdW1lbnRGcmFnbWVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb25zdW1hYmxlcy5zZXQodCwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29uc3VtYWJsZXMuZ2V0KHQpLmNvbnN1bWUoZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXZlcnQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX2NvbnN1bWFibGVzLmdldCh0KTtcclxuICAgICAgICAgICAgICAgIGlmIChpICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5pcyhcInRleHRcIikgfHwgdC5pcyhcImRvY3VtZW50RnJhZ21lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fY29uc3VtYWJsZXMuc2V0KHQsIHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5yZXZlcnQoZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBjb25zdW1hYmxlc0Zyb21FbGVtZW50KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB7ZWxlbWVudDogdCwgbmFtZTogdHJ1ZSwgYXR0cmlidXRlczogW10sIGNsYXNzZXM6IFtdLCBzdHlsZXM6IFtdfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LmdldEF0dHJpYnV0ZUtleXMoKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT0gXCJzdHlsZVwiIHx8IHQgPT0gXCJjbGFzc1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGUuYXR0cmlidXRlcy5wdXNoKHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5nZXRDbGFzc05hbWVzKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuY2xhc3Nlcy5wdXNoKHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gdC5nZXRTdHlsZU5hbWVzKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygbykge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc3R5bGVzLnB1c2godClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBjcmVhdGVGcm9tKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSBuZXcgbGcodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0LmlzKFwidGV4dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuYWRkKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodC5pcyhcImVsZW1lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLmFkZCh0LCBsZy5jb25zdW1hYmxlc0Zyb21FbGVtZW50KHQpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQuaXMoXCJkb2N1bWVudEZyYWdtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5hZGQodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0LmdldENoaWxkcmVuKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gbGcuY3JlYXRlRnJvbShpLCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgZGcge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2FuQ29uc3VtZU5hbWUgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29uc3VtYWJsZXMgPSB7YXR0cmlidXRlczogbmV3IE1hcCwgc3R5bGVzOiBuZXcgTWFwLCBjbGFzc2VzOiBuZXcgTWFwfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZGQodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbkNvbnN1bWVOYW1lID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIGluIHRoaXMuX2NvbnN1bWFibGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW4gdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGQoZSwgdFtlXSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRlc3QodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQubmFtZSAmJiAhdGhpcy5fY2FuQ29uc3VtZU5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FuQ29uc3VtZU5hbWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBpbiB0aGlzLl9jb25zdW1hYmxlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlIGluIHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX3Rlc3QoZSwgdFtlXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3VtZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FuQ29uc3VtZU5hbWUgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIGluIHRoaXMuX2NvbnN1bWFibGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW4gdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb25zdW1lKGUsIHRbZV0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXZlcnQodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQubmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbkNvbnN1bWVOYW1lID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIGluIHRoaXMuX2NvbnN1bWFibGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgaW4gdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXZlcnQoZSwgdFtlXSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9hZGQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IEplKGUpID8gZSA6IFtlXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9jb25zdW1hYmxlc1t0XTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IFwiYXR0cmlidXRlc1wiICYmIChlID09PSBcImNsYXNzXCIgfHwgZSA9PT0gXCJzdHlsZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlld2NvbnN1bWFibGUtaW52YWxpZC1hdHRyaWJ1dGU6IENsYXNzZXMgYW5kIHN0eWxlcyBzaG91bGQgYmUgaGFuZGxlZCBzZXBhcmF0ZWx5LlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBuLnNldChlLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gXCJzdHlsZXNcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5lbGVtZW50LmRvY3VtZW50LnN0eWxlc1Byb2Nlc3Nvci5nZXRSZWxhdGVkU3R5bGVzKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLnNldCh0LCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdGVzdCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gSmUoZSkgPyBlIDogW2VdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuX2NvbnN1bWFibGVzW3RdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gXCJhdHRyaWJ1dGVzXCIgJiYgKGUgPT09IFwiY2xhc3NcIiB8fCBlID09PSBcInN0eWxlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlID09IFwiY2xhc3NcIiA/IFwiY2xhc3Nlc1wiIDogXCJzdHlsZXNcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX3Rlc3QodCwgWy4uLnRoaXMuX2NvbnN1bWFibGVzW3RdLmtleXMoKV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBuLmdldChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NvbnN1bWUodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IEplKGUpID8gZSA6IFtlXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9jb25zdW1hYmxlc1t0XTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IFwiYXR0cmlidXRlc1wiICYmIChlID09PSBcImNsYXNzXCIgfHwgZSA9PT0gXCJzdHlsZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZSA9PSBcImNsYXNzXCIgPyBcImNsYXNzZXNcIiA6IFwic3R5bGVzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnN1bWUodCwgWy4uLnRoaXMuX2NvbnN1bWFibGVzW3RdLmtleXMoKV0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbi5zZXQoZSwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA9PSBcInN0eWxlc1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5lbGVtZW50LmRvY3VtZW50LnN0eWxlc1Byb2Nlc3Nvci5nZXRSZWxhdGVkU3R5bGVzKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5zZXQodCwgZmFsc2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZXZlcnQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IEplKGUpID8gZSA6IFtlXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9jb25zdW1hYmxlc1t0XTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IFwiYXR0cmlidXRlc1wiICYmIChlID09PSBcImNsYXNzXCIgfHwgZSA9PT0gXCJzdHlsZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZSA9PSBcImNsYXNzXCIgPyBcImNsYXNzZXNcIiA6IFwic3R5bGVzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JldmVydCh0LCBbLi4udGhpcy5fY29uc3VtYWJsZXNbdF0ua2V5cygpXSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gbi5nZXQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5zZXQoZSwgdHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgdWcge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NvdXJjZURlZmluaXRpb25zID0ge307XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hdHRyaWJ1dGVQcm9wZXJ0aWVzID0ge307XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlY29yYXRlKFwiY2hlY2tDaGlsZFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoXCJjaGVja0F0dHJpYnV0ZVwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub24oXCJjaGVja0F0dHJpYnV0ZVwiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGVbMF0gPSBuZXcgaGcoZVswXSlcclxuICAgICAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJoaWdoZXN0XCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub24oXCJjaGVja0NoaWxkXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZVswXSA9IG5ldyBoZyhlWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICBlWzFdID0gdGhpcy5nZXREZWZpbml0aW9uKGVbMV0pXHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwiaGlnaGVzdFwifSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVnaXN0ZXIodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3NvdXJjZURlZmluaXRpb25zW3RdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInNjaGVtYS1jYW5ub3QtcmVnaXN0ZXItaXRlbS10d2ljZTogQSBzaW5nbGUgaXRlbSBjYW5ub3QgYmUgcmVnaXN0ZXJlZCB0d2ljZSBpbiB0aGUgc2NoZW1hLlwiLCB0aGlzLCB7aXRlbU5hbWU6IHR9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fc291cmNlRGVmaW5pdGlvbnNbdF0gPSBbT2JqZWN0LmFzc2lnbih7fSwgZSldO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJDYWNoZSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV4dGVuZCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3NvdXJjZURlZmluaXRpb25zW3RdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInNjaGVtYS1jYW5ub3QtZXh0ZW5kLW1pc3NpbmctaXRlbTogQ2Fubm90IGV4dGVuZCBhbiBpdGVtIHdoaWNoIHdhcyBub3QgcmVnaXN0ZXJlZCB5ZXQuXCIsIHRoaXMsIHtpdGVtTmFtZTogdH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zb3VyY2VEZWZpbml0aW9uc1t0XS5wdXNoKE9iamVjdC5hc3NpZ24oe30sIGUpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NsZWFyQ2FjaGUoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXREZWZpbml0aW9ucygpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fY29tcGlsZWREZWZpbml0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbXBpbGUoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbXBpbGVkRGVmaW5pdGlvbnNcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0RGVmaW5pdGlvbih0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdCA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IHRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5pcyAmJiAodC5pcyhcInRleHRcIikgfHwgdC5pcyhcInRleHRQcm94eVwiKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gXCIkdGV4dFwiXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0Lm5hbWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdldERlZmluaXRpb25zKClbZV1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNSZWdpc3RlcmVkKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhIXRoaXMuZ2V0RGVmaW5pdGlvbih0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc0Jsb2NrKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmdldERlZmluaXRpb24odCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gISEoZSAmJiBlLmlzQmxvY2spXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzTGltaXQodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZ2V0RGVmaW5pdGlvbih0KTtcclxuICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEhKGUuaXNMaW1pdCB8fCBlLmlzT2JqZWN0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpc09iamVjdCh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5nZXREZWZpbml0aW9uKHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEhKGUgJiYgZS5pc09iamVjdClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNJbmxpbmUodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZ2V0RGVmaW5pdGlvbih0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhIShlICYmIGUuaXNJbmxpbmUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNoZWNrQ2hpbGQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hlY2tDb250ZXh0TWF0Y2goZSwgdClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2hlY2tBdHRyaWJ1dGUodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZ2V0RGVmaW5pdGlvbih0Lmxhc3QpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaS5hbGxvd0F0dHJpYnV0ZXMuaW5jbHVkZXMoZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2hlY2tNZXJnZSh0LCBlID0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBVaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm5vZGVCZWZvcmU7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQubm9kZUFmdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGUgaW5zdGFuY2VvZiBqaCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInNjaGVtYS1jaGVjay1tZXJnZS1uby1lbGVtZW50LWJlZm9yZTogVGhlIG5vZGUgYmVmb3JlIHRoZSBtZXJnZSBwb3NpdGlvbiBtdXN0IGJlIGFuIGVsZW1lbnQuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghKGkgaW5zdGFuY2VvZiBqaCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInNjaGVtYS1jaGVjay1tZXJnZS1uby1lbGVtZW50LWFmdGVyOiBUaGUgbm9kZSBhZnRlciB0aGUgbWVyZ2UgcG9zaXRpb24gbXVzdCBiZSBhbiBlbGVtZW50LlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGVja01lcmdlKGUsIGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgZS5nZXRDaGlsZHJlbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNoZWNrQ2hpbGQodCwgaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWRkQ2hpbGRDaGVjayh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwiY2hlY2tDaGlsZFwiLCAoZSwgW2ksIG5dKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gdChpLCBuKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG8gPT0gXCJib29sZWFuXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucmV0dXJuID0gb1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJoaWdoXCJ9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZGRBdHRyaWJ1dGVDaGVjayh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwiY2hlY2tBdHRyaWJ1dGVcIiwgKGUsIFtpLCBuXSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0KGksIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbyA9PSBcImJvb2xlYW5cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5yZXR1cm4gPSBvXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImhpZ2hcIn0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldEF0dHJpYnV0ZVByb3BlcnRpZXModCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXR0cmlidXRlUHJvcGVydGllc1t0XSA9IE9iamVjdC5hc3NpZ24odGhpcy5nZXRBdHRyaWJ1dGVQcm9wZXJ0aWVzKHQpLCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRBdHRyaWJ1dGVQcm9wZXJ0aWVzKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hdHRyaWJ1dGVQcm9wZXJ0aWVzW3RdIHx8IHt9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldExpbWl0RWxlbWVudCh0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZTtcclxuICAgICAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgVWgpIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gdC5wYXJlbnRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQgaW5zdGFuY2VvZiAkaCA/IFt0XSA6IEFycmF5LmZyb20odC5nZXRSYW5nZXMoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IGkucmVkdWNlKCh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmdldENvbW1vbkFuY2VzdG9yKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5nZXRDb21tb25BbmNlc3RvcihpLCB7aW5jbHVkZVNlbGY6IHRydWV9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIG51bGwpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoIXRoaXMuaXNMaW1pdChlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gZS5wYXJlbnRcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNoZWNrQXR0cmlidXRlSW5TZWxlY3Rpb24odCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5nZXRGaXJzdFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IFsuLi5pLmdldEFuY2VzdG9ycygpLCBuZXcgTGgoXCJcIiwgdC5nZXRBdHRyaWJ1dGVzKCkpXTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGVja0F0dHJpYnV0ZShuLCBlKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5nZXRSYW5nZXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuY2hlY2tBdHRyaWJ1dGUoaS5pdGVtLCBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgKiBnZXRWYWxpZFJhbmdlcyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0ID0gUGcodCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHlpZWxkKiB0aGlzLl9nZXRWYWxpZFJhbmdlc0ZvclJhbmdlKGksIGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldE5lYXJlc3RTZWxlY3Rpb25SYW5nZSh0LCBlID0gXCJib3RoXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrQ2hpbGQodCwgXCIkdGV4dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgJGgodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBpLCBuO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHQuZ2V0QW5jZXN0b3JzKCkucmV2ZXJzZSgpLmZpbmQodCA9PiB0aGlzLmlzTGltaXQodCkpIHx8IHQucm9vdDtcclxuICAgICAgICAgICAgICAgIGlmIChlID09IFwiYm90aFwiIHx8IGUgPT0gXCJiYWNrd2FyZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IG5ldyBXaCh7Ym91bmRhcmllczogJGguX2NyZWF0ZUluKG8pLCBzdGFydFBvc2l0aW9uOiB0LCBkaXJlY3Rpb246IFwiYmFja3dhcmRcIn0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZSA9PSBcImJvdGhcIiB8fCBlID09IFwiZm9yd2FyZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbiA9IG5ldyBXaCh7Ym91bmRhcmllczogJGguX2NyZWF0ZUluKG8pLCBzdGFydFBvc2l0aW9uOiB0fSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBUZyhpLCBuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LndhbGtlciA9PSBpID8gXCJlbGVtZW50RW5kXCIgOiBcImVsZW1lbnRTdGFydFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuLnR5cGUgPT0gZSAmJiB0aGlzLmlzT2JqZWN0KG4uaXRlbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRoLl9jcmVhdGVPbihuLml0ZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoZWNrQ2hpbGQobi5uZXh0UG9zaXRpb24sIFwiJHRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkaChuLm5leHRQb3NpdGlvbilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmaW5kQWxsb3dlZFBhcmVudCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaSA9IHQucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja0NoaWxkKGksIGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzTGltaXQoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IGkucGFyZW50XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW1vdmVEaXNhbGxvd2VkQXR0cmlidXRlcyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpLmlzKFwidGV4dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZyh0aGlzLCBpLCBlKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSAkaC5fY3JlYXRlSW4oaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LmdldFBvc2l0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQubm9kZUJlZm9yZSB8fCB0LnBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNnKHRoaXMsIGksIGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZUNvbnRleHQodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBoZyh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY2xlYXJDYWNoZSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbXBpbGVkRGVmaW5pdGlvbnMgPSBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jb21waWxlKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuX3NvdXJjZURlZmluaXRpb25zO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IE9iamVjdC5rZXlzKGUpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0W25dID0gZmcoZVtuXSwgbilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZ2codCwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWcodCwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcGcodCwgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYmcodCwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2codCwgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAga2codCwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbXBpbGVkRGVmaW5pdGlvbnMgPSB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jaGVja0NvbnRleHRNYXRjaCh0LCBlLCBpID0gZS5sZW5ndGggLSAxKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5nZXRJdGVtKGkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuYWxsb3dJbi5pbmNsdWRlcyhuLm5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmdldERlZmluaXRpb24obik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGVja0NvbnRleHRNYXRjaCh0LCBlLCBpIC0gMSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIF9nZXRWYWxpZFJhbmdlc0ZvclJhbmdlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGxldCBpID0gdC5zdGFydDtcclxuICAgICAgICAgICAgICAgIGxldCBuID0gdC5zdGFydDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiB0LmdldEl0ZW1zKHtzaGFsbG93OiB0cnVlfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5pcyhcImVsZW1lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQqIHRoaXMuX2dldFZhbGlkUmFuZ2VzRm9yUmFuZ2UoJGguX2NyZWF0ZUluKG8pLCBlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuY2hlY2tBdHRyaWJ1dGUobywgZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpLmlzRXF1YWwobikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIG5ldyAkaChpLCBuKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBVaC5fY3JlYXRlQWZ0ZXIobylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbiA9IFVoLl9jcmVhdGVBZnRlcihvKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFpLmlzRXF1YWwobikpIHtcclxuICAgICAgICAgICAgICAgICAgICB5aWVsZCBuZXcgJGgoaSwgbilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnModWcsIEpjKTtcclxuXHJcbiAgICAgICAgY2xhc3MgaGcge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodCBpbnN0YW5jZW9mIGhnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdCA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IFt0XVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheSh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQgPSB0LmdldEFuY2VzdG9ycyh7aW5jbHVkZVNlbGY6IHRydWV9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRbMF0gJiYgdHlwZW9mIHRbMF0gIT0gXCJzdHJpbmdcIiAmJiB0WzBdLmlzKFwiZG9jdW1lbnRGcmFnbWVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc2hpZnQoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5faXRlbXMgPSB0Lm1hcChBZylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGxlbmd0aCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pdGVtcy5sZW5ndGhcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGxhc3QoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXRlbXNbdGhpcy5faXRlbXMubGVuZ3RoIC0gMV1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXRlbXNbU3ltYm9sLml0ZXJhdG9yXSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHB1c2godCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBoZyhbdF0pO1xyXG4gICAgICAgICAgICAgICAgZS5faXRlbXMgPSBbLi4udGhpcy5faXRlbXMsIC4uLmUuX2l0ZW1zXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldEl0ZW0odCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2l0ZW1zW3RdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICogZ2V0TmFtZXMoKSB7XHJcbiAgICAgICAgICAgICAgICB5aWVsZCogdGhpcy5faXRlbXMubWFwKHQgPT4gdC5uYW1lKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBlbmRzV2l0aCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmdldE5hbWVzKCkpLmpvaW4oXCIgXCIpLmVuZHNXaXRoKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXJ0c1dpdGgodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5nZXROYW1lcygpKS5qb2luKFwiIFwiKS5zdGFydHNXaXRoKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGZnKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IGUsXHJcbiAgICAgICAgICAgICAgICBhbGxvd0luOiBbXSxcclxuICAgICAgICAgICAgICAgIGFsbG93Q29udGVudE9mOiBbXSxcclxuICAgICAgICAgICAgICAgIGFsbG93V2hlcmU6IFtdLFxyXG4gICAgICAgICAgICAgICAgYWxsb3dBdHRyaWJ1dGVzOiBbXSxcclxuICAgICAgICAgICAgICAgIGFsbG93QXR0cmlidXRlc09mOiBbXSxcclxuICAgICAgICAgICAgICAgIGluaGVyaXRUeXBlc0Zyb206IFtdXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIF9nKHQsIGkpO1xyXG4gICAgICAgICAgICB2Zyh0LCBpLCBcImFsbG93SW5cIik7XHJcbiAgICAgICAgICAgIHZnKHQsIGksIFwiYWxsb3dDb250ZW50T2ZcIik7XHJcbiAgICAgICAgICAgIHZnKHQsIGksIFwiYWxsb3dXaGVyZVwiKTtcclxuICAgICAgICAgICAgdmcodCwgaSwgXCJhbGxvd0F0dHJpYnV0ZXNcIik7XHJcbiAgICAgICAgICAgIHZnKHQsIGksIFwiYWxsb3dBdHRyaWJ1dGVzT2ZcIik7XHJcbiAgICAgICAgICAgIHZnKHQsIGksIFwiaW5oZXJpdFR5cGVzRnJvbVwiKTtcclxuICAgICAgICAgICAgeWcodCwgaSk7XHJcbiAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnZyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0W2VdLmFsbG93Q29udGVudE9mKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodFtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB4Zyh0LCBpKTtcclxuICAgICAgICAgICAgICAgICAgICBuLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuYWxsb3dJbi5wdXNoKGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkZWxldGUgdFtlXS5hbGxvd0NvbnRlbnRPZlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbWcodCwgZSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdFtlXS5hbGxvd1doZXJlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdFtpXTtcclxuICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IG4uYWxsb3dJbjtcclxuICAgICAgICAgICAgICAgICAgICB0W2VdLmFsbG93SW4ucHVzaCguLi5pKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0W2VdLmFsbG93V2hlcmVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHBnKHQsIGUpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHRbZV0uYWxsb3dBdHRyaWJ1dGVzT2YpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0W2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gbi5hbGxvd0F0dHJpYnV0ZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgdFtlXS5hbGxvd0F0dHJpYnV0ZXMucHVzaCguLi5pKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0W2VdLmFsbG93QXR0cmlidXRlc09mXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBiZyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0W2VdO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgaS5pbmhlcml0VHlwZXNGcm9tKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdFtlXTtcclxuICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IE9iamVjdC5rZXlzKG4pLmZpbHRlcih0ID0+IHQuc3RhcnRzV2l0aChcImlzXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShlIGluIGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpW2VdID0gbltlXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlbGV0ZSBpLmluaGVyaXRUeXBlc0Zyb21cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHdnKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHRbZV07XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBpLmFsbG93SW4uZmlsdGVyKGUgPT4gdFtlXSk7XHJcbiAgICAgICAgICAgIGkuYWxsb3dJbiA9IEFycmF5LmZyb20obmV3IFNldChuKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGtnKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHRbZV07XHJcbiAgICAgICAgICAgIGkuYWxsb3dBdHRyaWJ1dGVzID0gQXJyYXkuZnJvbShuZXcgU2V0KGkuYWxsb3dBdHRyaWJ1dGVzKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9nKHQsIGUpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBPYmplY3Qua2V5cyhpKS5maWx0ZXIodCA9PiB0LnN0YXJ0c1dpdGgoXCJpc1wiKSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVbbl0gPSBpW25dXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHZnKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbltpXSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZVtpXS5wdXNoKG5baV0pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkobltpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlW2ldLnB1c2goLi4ubltpXSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geWcodCwgZSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IGkuaW5oZXJpdEFsbEZyb207XHJcbiAgICAgICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuYWxsb3dDb250ZW50T2YucHVzaCh0KTtcclxuICAgICAgICAgICAgICAgICAgICBlLmFsbG93V2hlcmUucHVzaCh0KTtcclxuICAgICAgICAgICAgICAgICAgICBlLmFsbG93QXR0cmlidXRlc09mLnB1c2godCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5pbmhlcml0VHlwZXNGcm9tLnB1c2godClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geGcodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdFtlXTtcclxuICAgICAgICAgICAgcmV0dXJuIENnKHQpLmZpbHRlcih0ID0+IHQuYWxsb3dJbi5pbmNsdWRlcyhpLm5hbWUpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQ2codCkge1xyXG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmtleXModCkubWFwKGUgPT4gdFtlXSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEFnKHQpIHtcclxuICAgICAgICAgICAgaWYgKHR5cGVvZiB0ID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogdCwgKiBnZXRBdHRyaWJ1dGVLZXlzKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGdldEF0dHJpYnV0ZSgpIHtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHQuaXMoXCJlbGVtZW50XCIpID8gdC5uYW1lIDogXCIkdGV4dFwiLCAqIGdldEF0dHJpYnV0ZUtleXMoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkKiB0LmdldEF0dHJpYnV0ZUtleXMoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGdldEF0dHJpYnV0ZShlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LmdldEF0dHJpYnV0ZShlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24qIFRnKHQsIGUpIHtcclxuICAgICAgICAgICAgbGV0IGkgPSBmYWxzZTtcclxuICAgICAgICAgICAgd2hpbGUgKCFpKSB7XHJcbiAgICAgICAgICAgICAgICBpID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubmV4dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZS5kb25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGR7d2Fsa2VyOiB0LCB2YWx1ZTogZS52YWx1ZX1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLm5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXQuZG9uZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxke3dhbGtlcjogZSwgdmFsdWU6IHQudmFsdWV9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiogUGcodCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgeWllbGQqIGUuZ2V0TWluaW1hbEZsYXRSYW5nZXMoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBTZyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiBlLmdldEF0dHJpYnV0ZUtleXMoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0LmNoZWNrQXR0cmlidXRlKGUsIG4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5yZW1vdmVBdHRyaWJ1dGUobiwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgRWcge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0ID0ge30pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NwbGl0UGFydHMgPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbW9kZWxDdXJzb3IgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uQXBpID0gT2JqZWN0LmFzc2lnbih7fSwgdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnNpb25BcGkuY29udmVydEl0ZW0gPSB0aGlzLl9jb252ZXJ0SXRlbS5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uQXBpLmNvbnZlcnRDaGlsZHJlbiA9IHRoaXMuX2NvbnZlcnRDaGlsZHJlbi5iaW5kKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uQXBpLnNwbGl0VG9BbGxvd2VkUGFyZW50ID0gdGhpcy5fc3BsaXRUb0FsbG93ZWRQYXJlbnQuYmluZCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udmVyc2lvbkFwaS5nZXRTcGxpdFBhcnRzID0gdGhpcy5fZ2V0U3BsaXRQYXJ0cy5iaW5kKHRoaXMpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnZlcnQodCwgZSwgaSA9IFtcIiRyb290XCJdKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJ2aWV3Q2xlYW51cFwiLCB0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsQ3Vyc29yID0gT2coaSwgZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnNpb25BcGkud3JpdGVyID0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udmVyc2lvbkFwaS5jb25zdW1hYmxlID0gbGcuY3JlYXRlRnJvbSh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udmVyc2lvbkFwaS5zdG9yZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgY29uc3Qge21vZGVsUmFuZ2U6IG59ID0gdGhpcy5fY29udmVydEl0ZW0odCwgdGhpcy5fbW9kZWxDdXJzb3IpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGUuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVFbXB0eUVsZW1lbnRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIEFycmF5LmZyb20odGhpcy5fbW9kZWxDdXJzb3IucGFyZW50LmdldENoaWxkcmVuKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuYXBwZW5kKHQsIG8pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG8ubWFya2VycyA9IFJnKG8sIGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RlbEN1cnNvciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zcGxpdFBhcnRzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnNpb25BcGkud3JpdGVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udmVyc2lvbkFwaS5zdG9yZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY29udmVydEl0ZW0odCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IE9iamVjdC5hc3NpZ24oe3ZpZXdJdGVtOiB0LCBtb2RlbEN1cnNvcjogZSwgbW9kZWxSYW5nZTogbnVsbH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuaXMoXCJlbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiZWxlbWVudDpcIiArIHQubmFtZSwgaSwgdGhpcy5jb252ZXJzaW9uQXBpKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0LmlzKFwidGV4dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcInRleHRcIiwgaSwgdGhpcy5jb252ZXJzaW9uQXBpKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJkb2N1bWVudEZyYWdtZW50XCIsIGksIHRoaXMuY29udmVyc2lvbkFwaSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpLm1vZGVsUmFuZ2UgJiYgIShpLm1vZGVsUmFuZ2UgaW5zdGFuY2VvZiAkaCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidmlldy1jb252ZXJzaW9uLWRpc3BhdGNoZXItaW5jb3JyZWN0LXJlc3VsdDogSW5jb3JyZWN0IGNvbnZlcnNpb24gcmVzdWx0IHdhcyBkcm9wcGVkLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHttb2RlbFJhbmdlOiBpLm1vZGVsUmFuZ2UsIG1vZGVsQ3Vyc29yOiBpLm1vZGVsQ3Vyc29yfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY29udmVydENoaWxkcmVuKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgJGgoZSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbiA9IGU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgQXJyYXkuZnJvbSh0LmdldENoaWxkcmVuKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuX2NvbnZlcnRJdGVtKGUsIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0Lm1vZGVsUmFuZ2UgaW5zdGFuY2VvZiAkaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLmVuZCA9IHQubW9kZWxSYW5nZS5lbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSB0Lm1vZGVsQ3Vyc29yXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHttb2RlbFJhbmdlOiBpLCBtb2RlbEN1cnNvcjogbn1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3NwbGl0VG9BbGxvd2VkUGFyZW50KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmNvbnZlcnNpb25BcGkuc2NoZW1hLmZpbmRBbGxvd2VkUGFyZW50KGUsIHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpID09PSBlLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cG9zaXRpb246IGV9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fbW9kZWxDdXJzb3IucGFyZW50LmdldEFuY2VzdG9ycygpLmluY2x1ZGVzKGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLmNvbnZlcnNpb25BcGkud3JpdGVyLnNwbGl0KGUsIGkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG4ucmFuZ2UuZ2V0V2Fsa2VyKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC50eXBlID09IFwiZWxlbWVudEVuZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8ucHVzaCh0Lml0ZW0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IG8ucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0Lml0ZW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyU3BsaXRQYWlyKGUsIGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtwb3NpdGlvbjogbi5wb3NpdGlvbiwgY3Vyc29yUGFyZW50OiBuLnJhbmdlLmVuZC5wYXJlbnR9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZWdpc3RlclNwbGl0UGFpcih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3NwbGl0UGFydHMuaGFzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3BsaXRQYXJ0cy5zZXQodCwgW3RdKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX3NwbGl0UGFydHMuZ2V0KHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3BsaXRQYXJ0cy5zZXQoZSwgaSk7XHJcbiAgICAgICAgICAgICAgICBpLnB1c2goZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldFNwbGl0UGFydHModCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGU7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3NwbGl0UGFydHMuaGFzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IFt0XVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5fc3BsaXRQYXJ0cy5nZXQodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZW1vdmVFbXB0eUVsZW1lbnRzKCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLl9zcGxpdFBhcnRzLmtleXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmlzRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uQXBpLndyaXRlci5yZW1vdmUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NwbGl0UGFydHMuZGVsZXRlKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlRW1wdHlFbGVtZW50cygpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKEVnLCBkcyk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFJnKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBTZXQ7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gJGguX2NyZWF0ZUluKHQpLmdldEl0ZW1zKCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBvKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5uYW1lID09IFwiJG1hcmtlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5hZGQodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgaSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1uYW1lXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGUuY3JlYXRlUG9zaXRpb25CZWZvcmUodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW4uaGFzKGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5zZXQoaSwgbmV3ICRoKG8uY2xvbmUoKSkpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG4uZ2V0KGkpLmVuZCA9IG8uY2xvbmUoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZS5yZW1vdmUodClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gT2codCwgZSkge1xyXG4gICAgICAgICAgICBsZXQgaTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIG5ldyBoZyh0KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIG4uZ2V0QXR0cmlidXRlS2V5cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdFtlXSA9IG4uZ2V0QXR0cmlidXRlKGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gZS5jcmVhdGVFbGVtZW50KG4ubmFtZSwgdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuYXBwZW5kKG8sIGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpID0gVWguX2NyZWF0ZUF0KG8sIDApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIElnIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbCA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0eWxlc1Byb2Nlc3NvciA9IGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByb2Nlc3NvcjtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFwcGVyID0gbmV3IEdoO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb3duY2FzdERpc3BhdGNoZXIgPSBuZXcgWWgoe21hcHBlcjogdGhpcy5tYXBwZXJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG93bmNhc3REaXNwYXRjaGVyLm9uKFwiaW5zZXJ0OiR0ZXh0XCIsIF9mKCksIHtwcmlvcml0eTogXCJsb3dlc3RcIn0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGNhc3REaXNwYXRjaGVyID0gbmV3IEVnKHtzY2hlbWE6IHQuc2NoZW1hfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdEb2N1bWVudCA9IG5ldyBwbChlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdXcml0ZXIgPSBuZXcgJGwodGhpcy52aWV3RG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGNhc3REaXNwYXRjaGVyLm9uKFwidGV4dFwiLCAkZigpLCB7cHJpb3JpdHk6IFwibG93ZXN0XCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMudXBjYXN0RGlzcGF0Y2hlci5vbihcImVsZW1lbnRcIiwgVWYoKSwge3ByaW9yaXR5OiBcImxvd2VzdFwifSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVwY2FzdERpc3BhdGNoZXIub24oXCJkb2N1bWVudEZyYWdtZW50XCIsIFVmKCksIHtwcmlvcml0eTogXCJsb3dlc3RcIn0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWNvcmF0ZShcImluaXRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwiaW5pdFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwicmVhZHlcIilcclxuICAgICAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJsb3dlc3RcIn0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7cm9vdE5hbWU6IGUgPSBcIm1haW5cIiwgdHJpbTogaSA9IFwiZW1wdHlcIn0gPSB0IHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jaGVja0lmUm9vdHNFeGlzdHMoW2VdKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJkYXRhY29udHJvbGxlci1nZXQtbm9uLWV4aXN0ZW50LXJvb3Q6IEF0dGVtcHRpbmcgdG8gZ2V0IGRhdGEgZnJvbSBhIG5vbi1leGlzdGluZyByb290LlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMubW9kZWwuZG9jdW1lbnQuZ2V0Um9vdChlKTtcclxuICAgICAgICAgICAgICAgIGlmIChpID09PSBcImVtcHR5XCIgJiYgIXRoaXMubW9kZWwuaGFzQ29udGVudChuLCB7aWdub3JlV2hpdGVzcGFjZXM6IHRydWV9KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5zdHJpbmdpZnkobilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RyaW5naWZ5KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLnRvVmlldyh0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnByb2Nlc3Nvci50b0RhdGEoZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9WaWV3KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLnZpZXdEb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl92aWV3V3JpdGVyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXBwZXIuY2xlYXJCaW5kaW5ncygpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9ICRoLl9jcmVhdGVJbih0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgcWwoZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcHBlci5iaW5kRWxlbWVudHModCwgbyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvd25jYXN0RGlzcGF0Y2hlci5jb252ZXJ0SW5zZXJ0KG4sIGkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0LmlzKFwiZG9jdW1lbnRGcmFnbWVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBWZyh0KTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFt0LCBuXSBvZiBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZG93bmNhc3REaXNwYXRjaGVyLmNvbnZlcnRNYXJrZXJBZGQodCwgbiwgaSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsLmRvY3VtZW50LnZlcnNpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiZGF0YWNvbnRyb2xsZXItaW5pdC1kb2N1bWVudC1ub3QtZW1wdHk6IFRyeWluZyB0byBzZXQgaW5pdGlhbCBkYXRhIHRvIG5vdCBlbXB0eSBkb2N1bWVudC5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCBlID0ge307XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLm1haW4gPSB0XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2NoZWNrSWZSb290c0V4aXN0cyhPYmplY3Qua2V5cyhlKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiZGF0YWNvbnRyb2xsZXItaW5pdC1ub24tZXhpc3RlbnQtcm9vdDogQXR0ZW1wdGluZyB0byBpbml0IGRhdGEgb24gYSBub24tZXhpc3Rpbmcgcm9vdC5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuZW5xdWV1ZUNoYW5nZShcInRyYW5zcGFyZW50XCIsIHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiBPYmplY3Qua2V5cyhlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5tb2RlbC5kb2N1bWVudC5nZXRSb290KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0Lmluc2VydCh0aGlzLnBhcnNlKGVbaV0sIG4pLCBuLCAwKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldCh0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5tYWluID0gdFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9jaGVja0lmUm9vdHNFeGlzdHMoT2JqZWN0LmtleXMoZSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcImRhdGFjb250cm9sbGVyLXNldC1ub24tZXhpc3RlbnQtcm9vdDogQXR0ZW1wdGluZyB0byBzZXQgZGF0YSBvbiBhIG5vbi1leGlzdGluZyByb290LlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5lbnF1ZXVlQ2hhbmdlKFwidHJhbnNwYXJlbnRcIiwgdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5zZXRTZWxlY3Rpb24obnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmVTZWxlY3Rpb25BdHRyaWJ1dGUodGhpcy5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24uZ2V0QXR0cmlidXRlS2V5cygpKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgT2JqZWN0LmtleXMoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMubW9kZWwuZG9jdW1lbnQuZ2V0Um9vdChpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmUodC5jcmVhdGVSYW5nZUluKG4pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5pbnNlcnQodGhpcy5wYXJzZShlW2ldLCBuKSwgbiwgMClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBwYXJzZSh0LCBlID0gXCIkcm9vdFwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5wcm9jZXNzb3IudG9WaWV3KHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9Nb2RlbChpLCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b01vZGVsKHQsIGUgPSBcIiRyb290XCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmNoYW5nZShpID0+IHRoaXMudXBjYXN0RGlzcGF0Y2hlci5jb252ZXJ0KHQsIGksIGUpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZGRTdHlsZVByb2Nlc3NvclJ1bGVzKHQpIHtcclxuICAgICAgICAgICAgICAgIHQodGhpcy5zdHlsZXNQcm9jZXNzb3IpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY2hlY2tJZlJvb3RzRXhpc3RzKHQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1vZGVsLmRvY3VtZW50LmdldFJvb3ROYW1lcygpLmluY2x1ZGVzKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKElnLCBKYyk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFZnKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5yb290LmRvY3VtZW50O1xyXG4gICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSAkaC5fY3JlYXRlSW4odCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBpLm1vZGVsLm1hcmtlcnMpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuLmdldEludGVyc2VjdGlvbih0LmdldFJhbmdlKCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnB1c2goW3QubmFtZSwgaV0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIE5nIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGVscGVycyA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kb3duY2FzdCA9IEFycmF5LmlzQXJyYXkodCkgPyB0IDogW3RdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlQ29udmVyc2lvbkhlbHBlcnMoe25hbWU6IFwiZG93bmNhc3RcIiwgZGlzcGF0Y2hlcnM6IHRoaXMuX2Rvd25jYXN0LCBpc0Rvd25jYXN0OiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGNhc3QgPSBBcnJheS5pc0FycmF5KGUpID8gZSA6IFtlXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUNvbnZlcnNpb25IZWxwZXJzKHtuYW1lOiBcInVwY2FzdFwiLCBkaXNwYXRjaGVyczogdGhpcy5fdXBjYXN0LCBpc0Rvd25jYXN0OiBmYWxzZX0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFkZEFsaWFzKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9kb3duY2FzdC5pbmNsdWRlcyhlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl91cGNhc3QuaW5jbHVkZXMoZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW4gJiYgIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiY29udmVyc2lvbi1hZGQtYWxpYXMtZGlzcGF0Y2hlci1ub3QtcmVnaXN0ZXJlZDogXCIgKyBcIlRyeWluZyB0byByZWdpc3RlciBhbmQgYWxpYXMgZm9yIGEgZGlzcGF0Y2hlciB0aGF0IG5hcyBub3QgYmVlbiByZWdpc3RlcmVkLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlQ29udmVyc2lvbkhlbHBlcnMoe25hbWU6IHQsIGRpc3BhdGNoZXJzOiBbZV0sIGlzRG93bmNhc3Q6IGl9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3IodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9oZWxwZXJzLmhhcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJjb252ZXJzaW9uLWZvci11bmtub3duLWdyb3VwOiBUcnlpbmcgdG8gYWRkIGEgY29udmVydGVyIHRvIGFuIHVua25vd24gZGlzcGF0Y2hlcnMgZ3JvdXAuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faGVscGVycy5nZXQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZWxlbWVudFRvRWxlbWVudCh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcihcImRvd25jYXN0XCIpLmVsZW1lbnRUb0VsZW1lbnQodCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHttb2RlbDogZSwgdmlldzogaX0gb2YgTWcodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcihcInVwY2FzdFwiKS5lbGVtZW50VG9FbGVtZW50KHttb2RlbDogZSwgdmlldzogaSwgY29udmVydGVyUHJpb3JpdHk6IHQuY29udmVydGVyUHJpb3JpdHl9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhdHRyaWJ1dGVUb0VsZW1lbnQodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb3IoXCJkb3duY2FzdFwiKS5hdHRyaWJ1dGVUb0VsZW1lbnQodCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHttb2RlbDogZSwgdmlldzogaX0gb2YgTWcodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcihcInVwY2FzdFwiKS5lbGVtZW50VG9BdHRyaWJ1dGUoe3ZpZXc6IGksIG1vZGVsOiBlLCBjb252ZXJ0ZXJQcmlvcml0eTogdC5jb252ZXJ0ZXJQcmlvcml0eX0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGF0dHJpYnV0ZVRvQXR0cmlidXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9yKFwiZG93bmNhc3RcIikuYXR0cmlidXRlVG9BdHRyaWJ1dGUodCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHttb2RlbDogZSwgdmlldzogaX0gb2YgTWcodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvcihcInVwY2FzdFwiKS5hdHRyaWJ1dGVUb0F0dHJpYnV0ZSh7dmlldzogaSwgbW9kZWw6IGV9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlQ29udmVyc2lvbkhlbHBlcnMoe25hbWU6IHQsIGRpc3BhdGNoZXJzOiBlLCBpc0Rvd25jYXN0OiBpfSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2hlbHBlcnMuaGFzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcImNvbnZlcnNpb24tZ3JvdXAtZXhpc3RzOiBUcnlpbmcgdG8gcmVnaXN0ZXIgYSBncm91cCBuYW1lIHRoYXQgaGFzIGFscmVhZHkgYmVlbiByZWdpc3RlcmVkLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGkgPyBuZXcga2YoZSkgOiBuZXcgcWYoZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9oZWxwZXJzLnNldCh0LCBuKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiogTWcodCkge1xyXG4gICAgICAgICAgICBpZiAodC5tb2RlbC52YWx1ZXMpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0Lm1vZGVsLnZhbHVlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB7a2V5OiB0Lm1vZGVsLmtleSwgdmFsdWU6IGV9O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LnZpZXdbZV07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IHQudXBjYXN0QWxzbyA/IHQudXBjYXN0QWxzb1tlXSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICB5aWVsZCogQmcoaSwgbiwgbylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHlpZWxkKiBCZyh0Lm1vZGVsLCB0LnZpZXcsIHQudXBjYXN0QWxzbylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24qIEJnKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgeWllbGR7bW9kZWw6IHQsIHZpZXc6IGV9O1xyXG4gICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgaSA9IEFycmF5LmlzQXJyYXkoaSkgPyBpIDogW2ldO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICB5aWVsZHttb2RlbDogdCwgdmlldzogZX1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3Mgemcge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0ID0gXCJkZWZhdWx0XCIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3BlcmF0aW9ucyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID0gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgYmFzZVZlcnNpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5vcGVyYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQuYmFzZVZlcnNpb24gIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuYmFzZVZlcnNpb25cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZGRPcGVyYXRpb24odCkge1xyXG4gICAgICAgICAgICAgICAgdC5iYXRjaCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wZXJhdGlvbnMucHVzaCh0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIExnIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXNlVmVyc2lvbiA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRG9jdW1lbnRPcGVyYXRpb24gPSB0aGlzLmJhc2VWZXJzaW9uICE9PSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXRjaCA9IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3ZhbGlkYXRlKCkge1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0Ll9fY2xhc3NOYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5jbGFzc05hbWU7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdC5iYXRjaDtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0LmlzRG9jdW1lbnRPcGVyYXRpb247XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IGNsYXNzTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIk9wZXJhdGlvblwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBmcm9tSlNPTih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRoaXModC5iYXNlVmVyc2lvbilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgRmcge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtlcnMgPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hpbGRyZW4gPSBuZXcgRGg7XHJcbiAgICAgICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2luc2VydENoaWxkKDAsIHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2hpbGRyZW4oKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgY2hpbGRDb3VudCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5sZW5ndGhcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IG1heE9mZnNldCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5tYXhPZmZzZXRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGlzRW1wdHkoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jaGlsZENvdW50ID09PSAwXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCByb290KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHBhcmVudCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ID09IFwiZG9jdW1lbnRGcmFnbWVudFwiIHx8IHQgPT0gXCJtb2RlbDpkb2N1bWVudEZyYWdtZW50XCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0Q2hpbGQodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLmdldE5vZGUodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0Q2hpbGRyZW4oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW5bU3ltYm9sLml0ZXJhdG9yXSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENoaWxkSW5kZXgodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkcmVuLmdldE5vZGVJbmRleCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRDaGlsZFN0YXJ0T2Zmc2V0KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZHJlbi5nZXROb2RlU3RhcnRPZmZzZXQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0UGF0aCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXROb2RlQnlQYXRoKHQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlID0gdGhpcztcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IGUuZ2V0Q2hpbGQoZS5vZmZzZXRUb0luZGV4KGkpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb2Zmc2V0VG9JbmRleCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGRyZW4ub2Zmc2V0VG9JbmRleCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5fY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0LnB1c2goZS50b0pTT04oKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBmcm9tSlNPTih0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpLm5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKGpoLmZyb21KU09OKGkpKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChMaC5mcm9tSlNPTihpKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZnKGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9hcHBlbmRDaGlsZCh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbnNlcnRDaGlsZCh0aGlzLmNoaWxkQ291bnQsIHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9pbnNlcnRDaGlsZCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gRGcoZSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LnBhcmVudCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0Ll9yZW1vdmUoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0LnBhcmVudCA9IHRoaXNcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkcmVuLl9pbnNlcnROb2Rlcyh0LCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVtb3ZlQ2hpbGRyZW4odCwgZSA9IDEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9jaGlsZHJlbi5fcmVtb3ZlTm9kZXModCwgZSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQucGFyZW50ID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRGcodCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtuZXcgTGgodCldXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFqcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgdCA9IFt0XVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHQpLm1hcCh0ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdCA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBMaCh0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBGaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTGgodC5kYXRhLCB0LmdldEF0dHJpYnV0ZXMoKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBqZyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGUgPSBVZyhlKTtcclxuICAgICAgICAgICAgY29uc3QgaSA9IGUucmVkdWNlKCh0LCBlKSA9PiB0ICsgZS5vZmZzZXRTaXplLCAwKTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IHQucGFyZW50O1xyXG4gICAgICAgICAgICBHZyh0KTtcclxuICAgICAgICAgICAgY29uc3QgbyA9IHQuaW5kZXg7XHJcbiAgICAgICAgICAgIG4uX2luc2VydENoaWxkKG8sIGUpO1xyXG4gICAgICAgICAgICAkZyhuLCBvICsgZS5sZW5ndGgpO1xyXG4gICAgICAgICAgICAkZyhuLCBvKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyAkaCh0LCB0LmdldFNoaWZ0ZWRCeShpKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEhnKHQpIHtcclxuICAgICAgICAgICAgaWYgKCF0LmlzRmxhdCkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIm9wZXJhdGlvbi11dGlscy1yZW1vdmUtcmFuZ2Utbm90LWZsYXQ6IFwiICsgXCJUcnlpbmcgdG8gcmVtb3ZlIGEgcmFuZ2Ugd2hpY2ggc3RhcnRzIGFuZCBlbmRzIGluIGRpZmZlcmVudCBlbGVtZW50LlwiLCB0aGlzKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LnN0YXJ0LnBhcmVudDtcclxuICAgICAgICAgICAgR2codC5zdGFydCk7XHJcbiAgICAgICAgICAgIEdnKHQuZW5kKTtcclxuICAgICAgICAgICAgY29uc3QgaSA9IGUuX3JlbW92ZUNoaWxkcmVuKHQuc3RhcnQuaW5kZXgsIHQuZW5kLmluZGV4IC0gdC5zdGFydC5pbmRleCk7XHJcbiAgICAgICAgICAgICRnKGUsIHQuc3RhcnQuaW5kZXgpO1xyXG4gICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gV2codCwgZSkge1xyXG4gICAgICAgICAgICBpZiAoIXQuaXNGbGF0KSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwib3BlcmF0aW9uLXV0aWxzLW1vdmUtcmFuZ2Utbm90LWZsYXQ6IFwiICsgXCJUcnlpbmcgdG8gbW92ZSBhIHJhbmdlIHdoaWNoIHN0YXJ0cyBhbmQgZW5kcyBpbiBkaWZmZXJlbnQgZWxlbWVudC5cIiwgdGhpcylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBpID0gSGcodCk7XHJcbiAgICAgICAgICAgIGUgPSBlLl9nZXRUcmFuc2Zvcm1lZEJ5RGVsZXRpb24odC5zdGFydCwgdC5lbmQub2Zmc2V0IC0gdC5zdGFydC5vZmZzZXQpO1xyXG4gICAgICAgICAgICByZXR1cm4gamcoZSwgaSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHFnKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgR2codC5zdGFydCk7XHJcbiAgICAgICAgICAgIEdnKHQuZW5kKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIHQuZ2V0SXRlbXMoe3NoYWxsb3c6IHRydWV9KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG4uaXMoXCJ0ZXh0UHJveHlcIikgPyBuLnRleHROb2RlIDogbjtcclxuICAgICAgICAgICAgICAgIGlmIChpICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5fc2V0QXR0cmlidXRlKGUsIGkpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuX3JlbW92ZUF0dHJpYnV0ZShlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJGcodC5wYXJlbnQsIHQuaW5kZXgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJGcodC5lbmQucGFyZW50LCB0LmVuZC5pbmRleClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFVnKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IFtdO1xyXG4gICAgICAgICAgICBpZiAoISh0IGluc3RhbmNlb2YgQXJyYXkpKSB7XHJcbiAgICAgICAgICAgICAgICB0ID0gW3RdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRbaV0gPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHVzaChuZXcgTGgodFtpXSkpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRbaV0gaW5zdGFuY2VvZiBGaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHVzaChuZXcgTGgodFtpXS5kYXRhLCB0W2ldLmdldEF0dHJpYnV0ZXMoKSkpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRbaV0gaW5zdGFuY2VvZiBGZyB8fCB0W2ldIGluc3RhbmNlb2YgRGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgdFtpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnB1c2gobilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRbaV0gaW5zdGFuY2VvZiB6aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHVzaCh0W2ldKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAobGV0IHQgPSAxOyB0IDwgZS5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGVbdF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZVt0IC0gMV07XHJcbiAgICAgICAgICAgICAgICBpZiAoaSBpbnN0YW5jZW9mIExoICYmIG4gaW5zdGFuY2VvZiBMaCAmJiBLZyhpLCBuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc3BsaWNlKHQgLSAxLCAyLCBuZXcgTGgobi5kYXRhICsgaS5kYXRhLCBuLmdldEF0dHJpYnV0ZXMoKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHQtLVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiAkZyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LmdldENoaWxkKGUgLSAxKTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IHQuZ2V0Q2hpbGQoZSk7XHJcbiAgICAgICAgICAgIGlmIChpICYmIG4gJiYgaS5pcyhcInRleHRcIikgJiYgbi5pcyhcInRleHRcIikgJiYgS2coaSwgbikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgTGgoaS5kYXRhICsgbi5kYXRhLCBpLmdldEF0dHJpYnV0ZXMoKSk7XHJcbiAgICAgICAgICAgICAgICB0Ll9yZW1vdmVDaGlsZHJlbihlIC0gMSwgMik7XHJcbiAgICAgICAgICAgICAgICB0Ll9pbnNlcnRDaGlsZChlIC0gMSwgbylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gR2codCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC50ZXh0Tm9kZTtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHQucGFyZW50O1xyXG4gICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQub2Zmc2V0IC0gZS5zdGFydE9mZnNldDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBlLmluZGV4O1xyXG4gICAgICAgICAgICAgICAgaS5fcmVtb3ZlQ2hpbGRyZW4obywgMSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbmV3IExoKGUuZGF0YS5zdWJzdHIoMCwgbiksIGUuZ2V0QXR0cmlidXRlcygpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuZXcgTGgoZS5kYXRhLnN1YnN0cihuKSwgZS5nZXRBdHRyaWJ1dGVzKCkpO1xyXG4gICAgICAgICAgICAgICAgaS5faW5zZXJ0Q2hpbGQobywgW3IsIHNdKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBLZyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LmdldEF0dHJpYnV0ZXMoKTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGUuZ2V0QXR0cmlidXRlcygpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRbMV0gIT09IGUuZ2V0QXR0cmlidXRlKHRbMF0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuLm5leHQoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBuLm5leHQoKS5kb25lXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBKZyh0LCBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBxdSh0LCBlKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIFlnID0gSmc7XHJcblxyXG4gICAgICAgIGNsYXNzIFFnIGV4dGVuZHMgTGcge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlLCBpLCBuLCBvKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcihvKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmFuZ2UgPSB0LmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmtleSA9IGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9sZFZhbHVlID0gaSA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IGk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5ld1ZhbHVlID0gbiA9PT0gdW5kZWZpbmVkID8gbnVsbCA6IG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHR5cGUoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vbGRWYWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImFkZEF0dHJpYnV0ZVwiXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubmV3VmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJyZW1vdmVBdHRyaWJ1dGVcIlxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJjaGFuZ2VBdHRyaWJ1dGVcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjbG9uZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUWcodGhpcy5yYW5nZSwgdGhpcy5rZXksIHRoaXMub2xkVmFsdWUsIHRoaXMubmV3VmFsdWUsIHRoaXMuYmFzZVZlcnNpb24pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFJldmVyc2VkKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBRZyh0aGlzLnJhbmdlLCB0aGlzLmtleSwgdGhpcy5uZXdWYWx1ZSwgdGhpcy5vbGRWYWx1ZSwgdGhpcy5iYXNlVmVyc2lvbiArIDEpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRvSlNPTigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBzdXBlci50b0pTT04oKTtcclxuICAgICAgICAgICAgICAgIHQucmFuZ2UgPSB0aGlzLnJhbmdlLnRvSlNPTigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3ZhbGlkYXRlKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnJhbmdlLmlzRmxhdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJhdHRyaWJ1dGUtb3BlcmF0aW9uLXJhbmdlLW5vdC1mbGF0OiBUaGUgcmFuZ2UgdG8gY2hhbmdlIGlzIG5vdCBmbGF0LlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMucmFuZ2UuZ2V0SXRlbXMoe3NoYWxsb3c6IHRydWV9KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm9sZFZhbHVlICE9PSBudWxsICYmICFZZyh0LmdldEF0dHJpYnV0ZSh0aGlzLmtleSksIHRoaXMub2xkVmFsdWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJhdHRyaWJ1dGUtb3BlcmF0aW9uLXdyb25nLW9sZC12YWx1ZTogQ2hhbmdlZCBub2RlIGhhcyBkaWZmZXJlbnQgYXR0cmlidXRlIHZhbHVlIHRoYW4gb3BlcmF0aW9uJ3MgXCIgKyBcIm9sZCBhdHRyaWJ1dGUgdmFsdWUuXCIsIHRoaXMsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW06IHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXk6IHRoaXMua2V5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IHRoaXMub2xkVmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMub2xkVmFsdWUgPT09IG51bGwgJiYgdGhpcy5uZXdWYWx1ZSAhPT0gbnVsbCAmJiB0Lmhhc0F0dHJpYnV0ZSh0aGlzLmtleSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcImF0dHJpYnV0ZS1vcGVyYXRpb24tYXR0cmlidXRlLWV4aXN0czogVGhlIGF0dHJpYnV0ZSB3aXRoIGdpdmVuIGtleSBhbHJlYWR5IGV4aXN0cy5cIiwgdGhpcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZTogdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogdGhpcy5rZXlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9leGVjdXRlKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFZZyh0aGlzLm9sZFZhbHVlLCB0aGlzLm5ld1ZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHFnKHRoaXMucmFuZ2UsIHRoaXMua2V5LCB0aGlzLm5ld1ZhbHVlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IGNsYXNzTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkF0dHJpYnV0ZU9wZXJhdGlvblwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBmcm9tSlNPTih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFFnKCRoLmZyb21KU09OKHQucmFuZ2UsIGUpLCB0LmtleSwgdC5vbGRWYWx1ZSwgdC5uZXdWYWx1ZSwgdC5iYXNlVmVyc2lvbilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgWGcgZXh0ZW5kcyBMZyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VQb3NpdGlvbiA9IHQuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaG93TWFueSA9IGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHR5cGUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJkZXRhY2hcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gc3VwZXIudG9KU09OKCk7XHJcbiAgICAgICAgICAgICAgICB0LnNvdXJjZVBvc2l0aW9uID0gdGhpcy5zb3VyY2VQb3NpdGlvbi50b0pTT04oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF92YWxpZGF0ZSgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZVBvc2l0aW9uLnJvb3QuZG9jdW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiZGV0YWNoLW9wZXJhdGlvbi1vbi1kb2N1bWVudC1ub2RlOiBDYW5ub3QgZGV0YWNoIGRvY3VtZW50IG5vZGUuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9leGVjdXRlKCkge1xyXG4gICAgICAgICAgICAgICAgSGcoJGguX2NyZWF0ZUZyb21Qb3NpdGlvbkFuZFNoaWZ0KHRoaXMuc291cmNlUG9zaXRpb24sIHRoaXMuaG93TWFueSkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgY2xhc3NOYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRGV0YWNoT3BlcmF0aW9uXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgWmcgZXh0ZW5kcyBMZyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUsIGksIG4pIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKG4pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VQb3NpdGlvbiA9IHQuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlUG9zaXRpb24uc3RpY2tpbmVzcyA9IFwidG9OZXh0XCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvd01hbnkgPSBlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRQb3NpdGlvbiA9IGkuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0UG9zaXRpb24uc3RpY2tpbmVzcyA9IFwidG9Ob25lXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHR5cGUoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50YXJnZXRQb3NpdGlvbi5yb290LnJvb3ROYW1lID09IFwiJGdyYXZleWFyZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicmVtb3ZlXCJcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zb3VyY2VQb3NpdGlvbi5yb290LnJvb3ROYW1lID09IFwiJGdyYXZleWFyZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicmVpbnNlcnRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibW92ZVwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNsb25lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0aGlzLmNvbnN0cnVjdG9yKHRoaXMuc291cmNlUG9zaXRpb24sIHRoaXMuaG93TWFueSwgdGhpcy50YXJnZXRQb3NpdGlvbiwgdGhpcy5iYXNlVmVyc2lvbilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0TW92ZWRSYW5nZVN0YXJ0KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0UG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlEZWxldGlvbih0aGlzLnNvdXJjZVBvc2l0aW9uLCB0aGlzLmhvd01hbnkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFJldmVyc2VkKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuc291cmNlUG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlJbnNlcnRpb24odGhpcy50YXJnZXRQb3NpdGlvbiwgdGhpcy5ob3dNYW55KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcy5jb25zdHJ1Y3Rvcih0aGlzLmdldE1vdmVkUmFuZ2VTdGFydCgpLCB0aGlzLmhvd01hbnksIHQsIHRoaXMuYmFzZVZlcnNpb24gKyAxKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdmFsaWRhdGUoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5zb3VyY2VQb3NpdGlvbi5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy50YXJnZXRQb3NpdGlvbi5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5zb3VyY2VQb3NpdGlvbi5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy50YXJnZXRQb3NpdGlvbi5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSArIHRoaXMuaG93TWFueSA+IHQubWF4T2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIm1vdmUtb3BlcmF0aW9uLW5vZGVzLWRvLW5vdC1leGlzdDogVGhlIG5vZGVzIHdoaWNoIHNob3VsZCBiZSBtb3ZlZCBkbyBub3QgZXhpc3QuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQgPT09IGUgJiYgaSA8IG4gJiYgbiA8IGkgKyB0aGlzLmhvd01hbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibW92ZS1vcGVyYXRpb24tcmFuZ2UtaW50by1pdHNlbGY6IFRyeWluZyB0byBtb3ZlIGEgcmFuZ2Ugb2Ygbm9kZXMgdG8gdGhlIGluc2lkZSBvZiB0aGF0IHJhbmdlLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNvdXJjZVBvc2l0aW9uLnJvb3QgPT0gdGhpcy50YXJnZXRQb3NpdGlvbi5yb290KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFZzKHRoaXMuc291cmNlUG9zaXRpb24uZ2V0UGFyZW50UGF0aCgpLCB0aGlzLnRhcmdldFBvc2l0aW9uLmdldFBhcmVudFBhdGgoKSkgPT0gXCJwcmVmaXhcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5zb3VyY2VQb3NpdGlvbi5wYXRoLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnRhcmdldFBvc2l0aW9uLnBhdGhbdF0gPj0gaSAmJiB0aGlzLnRhcmdldFBvc2l0aW9uLnBhdGhbdF0gPCBpICsgdGhpcy5ob3dNYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibW92ZS1vcGVyYXRpb24tbm9kZS1pbnRvLWl0c2VsZjogVHJ5aW5nIHRvIG1vdmUgYSByYW5nZSBvZiBub2RlcyBpbnRvIG9uZSBvZiBub2RlcyBmcm9tIHRoYXQgcmFuZ2UuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9leGVjdXRlKCkge1xyXG4gICAgICAgICAgICAgICAgV2coJGguX2NyZWF0ZUZyb21Qb3NpdGlvbkFuZFNoaWZ0KHRoaXMuc291cmNlUG9zaXRpb24sIHRoaXMuaG93TWFueSksIHRoaXMudGFyZ2V0UG9zaXRpb24pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRvSlNPTigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBzdXBlci50b0pTT04oKTtcclxuICAgICAgICAgICAgICAgIHQuc291cmNlUG9zaXRpb24gPSB0aGlzLnNvdXJjZVBvc2l0aW9uLnRvSlNPTigpO1xyXG4gICAgICAgICAgICAgICAgdC50YXJnZXRQb3NpdGlvbiA9IHRoaXMudGFyZ2V0UG9zaXRpb24udG9KU09OKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IGNsYXNzTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIk1vdmVPcGVyYXRpb25cIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZnJvbUpTT04odCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IFVoLmZyb21KU09OKHQuc291cmNlUG9zaXRpb24sIGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IFVoLmZyb21KU09OKHQudGFyZ2V0UG9zaXRpb24sIGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB0aGlzKGksIHQuaG93TWFueSwgbiwgdC5iYXNlVmVyc2lvbilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgdG0gZXh0ZW5kcyBMZyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHQuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24uc3RpY2tpbmVzcyA9IFwidG9Ob25lXCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVzID0gbmV3IERoKFVnKGUpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2hvdWxkUmVjZWl2ZUF0dHJpYnV0ZXMgPSBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgdHlwZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImluc2VydFwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBob3dNYW55KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubm9kZXMubWF4T2Zmc2V0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNsb25lKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG5ldyBEaChbLi4udGhpcy5ub2Rlc10ubWFwKHQgPT4gdC5fY2xvbmUodHJ1ZSkpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgdG0odGhpcy5wb3NpdGlvbiwgdCwgdGhpcy5iYXNlVmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICBlLnNob3VsZFJlY2VpdmVBdHRyaWJ1dGVzID0gdGhpcy5zaG91bGRSZWNlaXZlQXR0cmlidXRlcztcclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFJldmVyc2VkKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMucG9zaXRpb24ucm9vdC5kb2N1bWVudC5ncmF2ZXlhcmQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gbmV3IFVoKHQsIFswXSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFpnKHRoaXMucG9zaXRpb24sIHRoaXMubm9kZXMubWF4T2Zmc2V0LCBlLCB0aGlzLmJhc2VWZXJzaW9uICsgMSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3ZhbGlkYXRlKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMucG9zaXRpb24ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0IHx8IHQubWF4T2Zmc2V0IDwgdGhpcy5wb3NpdGlvbi5vZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiaW5zZXJ0LW9wZXJhdGlvbi1wb3NpdGlvbi1pbnZhbGlkOiBJbnNlcnRpb24gcG9zaXRpb24gaXMgaW52YWxpZC5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2V4ZWN1dGUoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5ub2RlcztcclxuICAgICAgICAgICAgICAgIHRoaXMubm9kZXMgPSBuZXcgRGgoWy4uLnRdLm1hcCh0ID0+IHQuX2Nsb25lKHRydWUpKSk7XHJcbiAgICAgICAgICAgICAgICBqZyh0aGlzLnBvc2l0aW9uLCB0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gc3VwZXIudG9KU09OKCk7XHJcbiAgICAgICAgICAgICAgICB0LnBvc2l0aW9uID0gdGhpcy5wb3NpdGlvbi50b0pTT04oKTtcclxuICAgICAgICAgICAgICAgIHQubm9kZXMgPSB0aGlzLm5vZGVzLnRvSlNPTigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGdldCBjbGFzc05hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJJbnNlcnRPcGVyYXRpb25cIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZnJvbUpTT04odCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHQubm9kZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkucHVzaChqaC5mcm9tSlNPTihlKSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnB1c2goTGguZnJvbUpTT04oZSkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyB0bShVaC5mcm9tSlNPTih0LnBvc2l0aW9uLCBlKSwgaSwgdC5iYXNlVmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICBuLnNob3VsZFJlY2VpdmVBdHRyaWJ1dGVzID0gdC5zaG91bGRSZWNlaXZlQXR0cmlidXRlcztcclxuICAgICAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGVtIGV4dGVuZHMgTGcge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlLCBpLCBuLCBvLCByKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcihyKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubmFtZSA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9sZFJhbmdlID0gZSA/IGUuY2xvbmUoKSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5ld1JhbmdlID0gaSA/IGkuY2xvbmUoKSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFmZmVjdHNEYXRhID0gbztcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtlcnMgPSBuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCB0eXBlKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwibWFya2VyXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2xvbmUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGVtKHRoaXMubmFtZSwgdGhpcy5vbGRSYW5nZSwgdGhpcy5uZXdSYW5nZSwgdGhpcy5fbWFya2VycywgdGhpcy5hZmZlY3RzRGF0YSwgdGhpcy5iYXNlVmVyc2lvbilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0UmV2ZXJzZWQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGVtKHRoaXMubmFtZSwgdGhpcy5uZXdSYW5nZSwgdGhpcy5vbGRSYW5nZSwgdGhpcy5fbWFya2VycywgdGhpcy5hZmZlY3RzRGF0YSwgdGhpcy5iYXNlVmVyc2lvbiArIDEpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9leGVjdXRlKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMubmV3UmFuZ2UgPyBcIl9zZXRcIiA6IFwiX3JlbW92ZVwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFya2Vyc1t0XSh0aGlzLm5hbWUsIHRoaXMubmV3UmFuZ2UsIHRydWUsIHRoaXMuYWZmZWN0c0RhdGEpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRvSlNPTigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBzdXBlci50b0pTT04oKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm9sZFJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5vbGRSYW5nZSA9IHRoaXMub2xkUmFuZ2UudG9KU09OKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm5ld1JhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5uZXdSYW5nZSA9IHRoaXMubmV3UmFuZ2UudG9KU09OKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGRlbGV0ZSB0Ll9tYXJrZXJzO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGdldCBjbGFzc05hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJNYXJrZXJPcGVyYXRpb25cIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZnJvbUpTT04odCwgZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBlbSh0Lm5hbWUsIHQub2xkUmFuZ2UgPyAkaC5mcm9tSlNPTih0Lm9sZFJhbmdlLCBlKSA6IG51bGwsIHQubmV3UmFuZ2UgPyAkaC5mcm9tSlNPTih0Lm5ld1JhbmdlLCBlKSA6IG51bGwsIGUubW9kZWwubWFya2VycywgdC5hZmZlY3RzRGF0YSwgdC5iYXNlVmVyc2lvbilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgaW0gZXh0ZW5kcyBMZyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUsIGksIG4pIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKG4pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uLnN0aWNraW5lc3MgPSBcInRvTmV4dFwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbGROYW1lID0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMubmV3TmFtZSA9IGlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHR5cGUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJyZW5hbWVcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjbG9uZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgaW0odGhpcy5wb3NpdGlvbi5jbG9uZSgpLCB0aGlzLm9sZE5hbWUsIHRoaXMubmV3TmFtZSwgdGhpcy5iYXNlVmVyc2lvbilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0UmV2ZXJzZWQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGltKHRoaXMucG9zaXRpb24uY2xvbmUoKSwgdGhpcy5uZXdOYW1lLCB0aGlzLm9sZE5hbWUsIHRoaXMuYmFzZVZlcnNpb24gKyAxKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdmFsaWRhdGUoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5wb3NpdGlvbi5ub2RlQWZ0ZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAoISh0IGluc3RhbmNlb2YgamgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInJlbmFtZS1vcGVyYXRpb24td3JvbmctcG9zaXRpb246IEdpdmVuIHBvc2l0aW9uIGlzIGludmFsaWQgb3Igbm9kZSBhZnRlciBpdCBpcyBub3QgYW4gaW5zdGFuY2Ugb2YgRWxlbWVudC5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5uYW1lICE9PSB0aGlzLm9sZE5hbWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwicmVuYW1lLW9wZXJhdGlvbi13cm9uZy1uYW1lOiBFbGVtZW50IHRvIGNoYW5nZSBoYXMgZGlmZmVyZW50IG5hbWUgdGhhbiBvcGVyYXRpb24ncyBvbGQgbmFtZS5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2V4ZWN1dGUoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5wb3NpdGlvbi5ub2RlQWZ0ZXI7XHJcbiAgICAgICAgICAgICAgICB0Lm5hbWUgPSB0aGlzLm5ld05hbWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9KU09OKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHN1cGVyLnRvSlNPTigpO1xyXG4gICAgICAgICAgICAgICAgdC5wb3NpdGlvbiA9IHRoaXMucG9zaXRpb24udG9KU09OKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IGNsYXNzTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlJlbmFtZU9wZXJhdGlvblwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBmcm9tSlNPTih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IGltKFVoLmZyb21KU09OKHQucG9zaXRpb24sIGUpLCB0Lm9sZE5hbWUsIHQubmV3TmFtZSwgdC5iYXNlVmVyc2lvbilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3Mgbm0gZXh0ZW5kcyBMZyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUsIGksIG4sIG8pIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKG8pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yb290ID0gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMua2V5ID0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMub2xkVmFsdWUgPSBpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uZXdWYWx1ZSA9IG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IHR5cGUoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vbGRWYWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImFkZFJvb3RBdHRyaWJ1dGVcIlxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLm5ld1ZhbHVlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicmVtb3ZlUm9vdEF0dHJpYnV0ZVwiXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNoYW5nZVJvb3RBdHRyaWJ1dGVcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjbG9uZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgbm0odGhpcy5yb290LCB0aGlzLmtleSwgdGhpcy5vbGRWYWx1ZSwgdGhpcy5uZXdWYWx1ZSwgdGhpcy5iYXNlVmVyc2lvbilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0UmV2ZXJzZWQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IG5tKHRoaXMucm9vdCwgdGhpcy5rZXksIHRoaXMubmV3VmFsdWUsIHRoaXMub2xkVmFsdWUsIHRoaXMuYmFzZVZlcnNpb24gKyAxKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdmFsaWRhdGUoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5yb290ICE9IHRoaXMucm9vdC5yb290IHx8IHRoaXMucm9vdC5pcyhcImRvY3VtZW50RnJhZ21lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwicm9vdGF0dHJpYnV0ZS1vcGVyYXRpb24tbm90LWEtcm9vdDogVGhlIGVsZW1lbnQgdG8gY2hhbmdlIGlzIG5vdCBhIHJvb3QgZWxlbWVudC5cIiwgdGhpcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb290OiB0aGlzLnJvb3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogdGhpcy5rZXlcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub2xkVmFsdWUgIT09IG51bGwgJiYgdGhpcy5yb290LmdldEF0dHJpYnV0ZSh0aGlzLmtleSkgIT09IHRoaXMub2xkVmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwicm9vdGF0dHJpYnV0ZS1vcGVyYXRpb24td3Jvbmctb2xkLXZhbHVlOiBDaGFuZ2VkIG5vZGUgaGFzIGRpZmZlcmVudCBhdHRyaWJ1dGUgdmFsdWUgdGhhbiBvcGVyYXRpb24ncyBcIiArIFwib2xkIGF0dHJpYnV0ZSB2YWx1ZS5cIiwgdGhpcywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByb290OiB0aGlzLnJvb3QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogdGhpcy5rZXlcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMub2xkVmFsdWUgPT09IG51bGwgJiYgdGhpcy5uZXdWYWx1ZSAhPT0gbnVsbCAmJiB0aGlzLnJvb3QuaGFzQXR0cmlidXRlKHRoaXMua2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJyb290YXR0cmlidXRlLW9wZXJhdGlvbi1hdHRyaWJ1dGUtZXhpc3RzOiBUaGUgYXR0cmlidXRlIHdpdGggZ2l2ZW4ga2V5IGFscmVhZHkgZXhpc3RzLlwiLCB0aGlzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvb3Q6IHRoaXMucm9vdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiB0aGlzLmtleVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9leGVjdXRlKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubmV3VmFsdWUgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvb3QuX3NldEF0dHJpYnV0ZSh0aGlzLmtleSwgdGhpcy5uZXdWYWx1ZSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yb290Ll9yZW1vdmVBdHRyaWJ1dGUodGhpcy5rZXkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRvSlNPTigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBzdXBlci50b0pTT04oKTtcclxuICAgICAgICAgICAgICAgIHQucm9vdCA9IHRoaXMucm9vdC50b0pTT04oKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgY2xhc3NOYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiUm9vdEF0dHJpYnV0ZU9wZXJhdGlvblwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBmcm9tSlNPTih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUuZ2V0Um9vdCh0LnJvb3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInJvb3RhdHRyaWJ1dGUtb3BlcmF0aW9uLWZyb21qc29uLW5vLXJvb3Q6IENhbm5vdCBjcmVhdGUgUm9vdEF0dHJpYnV0ZU9wZXJhdGlvbi4gUm9vdCB3aXRoIHNwZWNpZmllZCBuYW1lIGRvZXMgbm90IGV4aXN0LlwiLCB0aGlzLCB7cm9vdE5hbWU6IHQucm9vdH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IG5tKGUuZ2V0Um9vdCh0LnJvb3QpLCB0LmtleSwgdC5vbGRWYWx1ZSwgdC5uZXdWYWx1ZSwgdC5iYXNlVmVyc2lvbilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3Mgb20gZXh0ZW5kcyBMZyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUsIGksIG4sIG8pIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKG8pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zb3VyY2VQb3NpdGlvbiA9IHQuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc291cmNlUG9zaXRpb24uc3RpY2tpbmVzcyA9IFwidG9QcmV2aW91c1wiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ob3dNYW55ID0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFyZ2V0UG9zaXRpb24gPSBpLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRhcmdldFBvc2l0aW9uLnN0aWNraW5lc3MgPSBcInRvTmV4dFwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncmF2ZXlhcmRQb3NpdGlvbiA9IG4uY2xvbmUoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgdHlwZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIm1lcmdlXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGRlbGV0aW9uUG9zaXRpb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVoKHRoaXMuc291cmNlUG9zaXRpb24ucm9vdCwgdGhpcy5zb3VyY2VQb3NpdGlvbi5wYXRoLnNsaWNlKDAsIC0xKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IG1vdmVkUmFuZ2UoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5zb3VyY2VQb3NpdGlvbi5nZXRTaGlmdGVkQnkoTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgJGgodGhpcy5zb3VyY2VQb3NpdGlvbiwgdClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2xvbmUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5zb3VyY2VQb3NpdGlvbiwgdGhpcy5ob3dNYW55LCB0aGlzLnRhcmdldFBvc2l0aW9uLCB0aGlzLmdyYXZleWFyZFBvc2l0aW9uLCB0aGlzLmJhc2VWZXJzaW9uKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRSZXZlcnNlZCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnRhcmdldFBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5TWVyZ2VPcGVyYXRpb24odGhpcyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5zb3VyY2VQb3NpdGlvbi5wYXRoLnNsaWNlKDAsIC0xKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgVWgodGhpcy5zb3VyY2VQb3NpdGlvbi5yb290LCBlKS5fZ2V0VHJhbnNmb3JtZWRCeU1lcmdlT3BlcmF0aW9uKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBybSh0LCB0aGlzLmhvd01hbnksIHRoaXMuZ3JhdmV5YXJkUG9zaXRpb24sIHRoaXMuYmFzZVZlcnNpb24gKyAxKTtcclxuICAgICAgICAgICAgICAgIG4uaW5zZXJ0aW9uUG9zaXRpb24gPSBpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3ZhbGlkYXRlKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuc291cmNlUG9zaXRpb24ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMudGFyZ2V0UG9zaXRpb24ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0LnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJtZXJnZS1vcGVyYXRpb24tc291cmNlLXBvc2l0aW9uLWludmFsaWQ6IE1lcmdlIHNvdXJjZSBwb3NpdGlvbiBpcyBpbnZhbGlkLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghZS5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibWVyZ2Utb3BlcmF0aW9uLXRhcmdldC1wb3NpdGlvbi1pbnZhbGlkOiBNZXJnZSB0YXJnZXQgcG9zaXRpb24gaXMgaW52YWxpZC5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5ob3dNYW55ICE9IHQubWF4T2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIm1lcmdlLW9wZXJhdGlvbi1ob3ctbWFueS1pbnZhbGlkOiBNZXJnZSBvcGVyYXRpb24gc3BlY2lmaWVzIHdyb25nIG51bWJlciBvZiBub2RlcyB0byBtb3ZlLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZXhlY3V0ZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnNvdXJjZVBvc2l0aW9uLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSAkaC5fY3JlYXRlSW4odCk7XHJcbiAgICAgICAgICAgICAgICBXZyhlLCB0aGlzLnRhcmdldFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIFdnKCRoLl9jcmVhdGVPbih0KSwgdGhpcy5ncmF2ZXlhcmRQb3NpdGlvbilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9KU09OKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHN1cGVyLnRvSlNPTigpO1xyXG4gICAgICAgICAgICAgICAgdC5zb3VyY2VQb3NpdGlvbiA9IHQuc291cmNlUG9zaXRpb24udG9KU09OKCk7XHJcbiAgICAgICAgICAgICAgICB0LnRhcmdldFBvc2l0aW9uID0gdC50YXJnZXRQb3NpdGlvbi50b0pTT04oKTtcclxuICAgICAgICAgICAgICAgIHQuZ3JhdmV5YXJkUG9zaXRpb24gPSB0LmdyYXZleWFyZFBvc2l0aW9uLnRvSlNPTigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGdldCBjbGFzc05hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJNZXJnZU9wZXJhdGlvblwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBmcm9tSlNPTih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gVWguZnJvbUpTT04odC5zb3VyY2VQb3NpdGlvbiwgZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gVWguZnJvbUpTT04odC50YXJnZXRQb3NpdGlvbiwgZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gVWguZnJvbUpTT04odC5ncmF2ZXlhcmRQb3NpdGlvbiwgZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHRoaXMoaSwgdC5ob3dNYW55LCBuLCBvLCB0LmJhc2VWZXJzaW9uKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBybSBleHRlbmRzIExnIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIobik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNwbGl0UG9zaXRpb24gPSB0LmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNwbGl0UG9zaXRpb24uc3RpY2tpbmVzcyA9IFwidG9OZXh0XCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhvd01hbnkgPSBlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRpb25Qb3NpdGlvbiA9IHJtLmdldEluc2VydGlvblBvc2l0aW9uKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnRpb25Qb3NpdGlvbi5zdGlja2luZXNzID0gXCJ0b05vbmVcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JhdmV5YXJkUG9zaXRpb24gPSBpID8gaS5jbG9uZSgpIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyYXZleWFyZFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ncmF2ZXlhcmRQb3NpdGlvbi5zdGlja2luZXNzID0gXCJ0b05leHRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgdHlwZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcInNwbGl0XCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IG1vdmVUYXJnZXRQb3NpdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmluc2VydGlvblBvc2l0aW9uLnBhdGguc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgIHQucHVzaCgwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWgodGhpcy5pbnNlcnRpb25Qb3NpdGlvbi5yb290LCB0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgbW92ZWRSYW5nZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnNwbGl0UG9zaXRpb24uZ2V0U2hpZnRlZEJ5KE51bWJlci5QT1NJVElWRV9JTkZJTklUWSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3ICRoKHRoaXMuc3BsaXRQb3NpdGlvbiwgdClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2xvbmUoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbmV3IHRoaXMuY29uc3RydWN0b3IodGhpcy5zcGxpdFBvc2l0aW9uLCB0aGlzLmhvd01hbnksIHRoaXMuZ3JhdmV5YXJkUG9zaXRpb24sIHRoaXMuYmFzZVZlcnNpb24pO1xyXG4gICAgICAgICAgICAgICAgdC5pbnNlcnRpb25Qb3NpdGlvbiA9IHRoaXMuaW5zZXJ0aW9uUG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRSZXZlcnNlZCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnNwbGl0UG9zaXRpb24ucm9vdC5kb2N1bWVudC5ncmF2ZXlhcmQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gbmV3IFVoKHQsIFswXSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IG9tKHRoaXMubW92ZVRhcmdldFBvc2l0aW9uLCB0aGlzLmhvd01hbnksIHRoaXMuc3BsaXRQb3NpdGlvbiwgZSwgdGhpcy5iYXNlVmVyc2lvbiArIDEpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF92YWxpZGF0ZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnNwbGl0UG9zaXRpb24ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuc3BsaXRQb3NpdGlvbi5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQgfHwgdC5tYXhPZmZzZXQgPCBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInNwbGl0LW9wZXJhdGlvbi1wb3NpdGlvbi1pbnZhbGlkOiBTcGxpdCBwb3NpdGlvbiBpcyBpbnZhbGlkLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdC5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwic3BsaXQtb3BlcmF0aW9uLXNwbGl0LWluLXJvb3Q6IENhbm5vdCBzcGxpdCByb290IGVsZW1lbnQuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuaG93TWFueSAhPSB0Lm1heE9mZnNldCAtIHRoaXMuc3BsaXRQb3NpdGlvbi5vZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwic3BsaXQtb3BlcmF0aW9uLWhvdy1tYW55LWludmFsaWQ6IFNwbGl0IG9wZXJhdGlvbiBzcGVjaWZpZXMgd3JvbmcgbnVtYmVyIG9mIG5vZGVzIHRvIG1vdmUuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ3JhdmV5YXJkUG9zaXRpb24gJiYgIXRoaXMuZ3JhdmV5YXJkUG9zaXRpb24ubm9kZUFmdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInNwbGl0LW9wZXJhdGlvbi1ncmF2ZXlhcmQtcG9zaXRpb24taW52YWxpZDogR3JhdmV5YXJkIHBvc2l0aW9uIGludmFsaWQuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9leGVjdXRlKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuc3BsaXRQb3NpdGlvbi5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ncmF2ZXlhcmRQb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIFdnKCRoLl9jcmVhdGVGcm9tUG9zaXRpb25BbmRTaGlmdCh0aGlzLmdyYXZleWFyZFBvc2l0aW9uLCAxKSwgdGhpcy5pbnNlcnRpb25Qb3NpdGlvbilcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuX2Nsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgamcodGhpcy5pbnNlcnRpb25Qb3NpdGlvbiwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgJGgoVWguX2NyZWF0ZUF0KHQsIHRoaXMuc3BsaXRQb3NpdGlvbi5vZmZzZXQpLCBVaC5fY3JlYXRlQXQodCwgdC5tYXhPZmZzZXQpKTtcclxuICAgICAgICAgICAgICAgIFdnKGUsIHRoaXMubW92ZVRhcmdldFBvc2l0aW9uKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gc3VwZXIudG9KU09OKCk7XHJcbiAgICAgICAgICAgICAgICB0LnNwbGl0UG9zaXRpb24gPSB0aGlzLnNwbGl0UG9zaXRpb24udG9KU09OKCk7XHJcbiAgICAgICAgICAgICAgICB0Lmluc2VydGlvblBvc2l0aW9uID0gdGhpcy5pbnNlcnRpb25Qb3NpdGlvbi50b0pTT04oKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyYXZleWFyZFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5ncmF2ZXlhcmRQb3NpdGlvbiA9IHRoaXMuZ3JhdmV5YXJkUG9zaXRpb24udG9KU09OKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgY2xhc3NOYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiU3BsaXRPcGVyYXRpb25cIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0SW5zZXJ0aW9uUG9zaXRpb24odCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQucGF0aC5zbGljZSgwLCAtMSk7XHJcbiAgICAgICAgICAgICAgICBlW2UubGVuZ3RoIC0gMV0rKztcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWgodC5yb290LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZnJvbUpTT04odCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IFVoLmZyb21KU09OKHQuc3BsaXRQb3NpdGlvbiwgZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gVWguZnJvbUpTT04odC5pbnNlcnRpb25Qb3NpdGlvbiwgZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gdC5ncmF2ZXlhcmRQb3NpdGlvbiA/IFVoLmZyb21KU09OKHQuZ3JhdmV5YXJkUG9zaXRpb24sIGUpIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuZXcgdGhpcyhpLCB0Lmhvd01hbnksIG8sIHQuYmFzZVZlcnNpb24pO1xyXG4gICAgICAgICAgICAgICAgci5pbnNlcnRpb25Qb3NpdGlvbiA9IG47XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBzbSBleHRlbmRzIGpoIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSwgaSA9IFwibWFpblwiKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcihlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RvY3VtZW50ID0gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMucm9vdE5hbWUgPSBpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBkb2N1bWVudCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kb2N1bWVudFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpcyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5yZXBsYWNlKFwibW9kZWw6XCIsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPT0gXCJyb290RWxlbWVudFwiIHx8IHN1cGVyLmlzKHQpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpID09IFwicm9vdEVsZW1lbnRcIiAmJiBlID09IHRoaXMubmFtZSB8fCBzdXBlci5pcyh0LCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yb290TmFtZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBhbSB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXRjaCA9IGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlVGV4dCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExoKHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZUVsZW1lbnQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBqaCh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVEb2N1bWVudEZyYWdtZW50KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGZ1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbnNlcnQodCwgZSwgaSA9IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Fzc2VydFdyaXRlclVzZWRDb3JyZWN0bHkoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgTGggJiYgdC5kYXRhID09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBVaC5fY3JlYXRlQXQoZSwgaSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaG0odC5yb290LCBuLnJvb3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW92ZSgkaC5fY3JlYXRlT24odCksIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5yb290LmRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibW9kZWwtd3JpdGVyLWluc2VydC1mb3JiaWRkZW4tbW92ZTogXCIgKyBcIkNhbm5vdCBtb3ZlIGEgbm9kZSBmcm9tIGEgZG9jdW1lbnQgdG8gYSBkaWZmZXJlbnQgdHJlZS4gXCIgKyBcIkl0IGlzIGZvcmJpZGRlbiB0byBtb3ZlIGEgbm9kZSB0aGF0IHdhcyBhbHJlYWR5IGluIGEgZG9jdW1lbnQgb3V0c2lkZSBvZiBpdC5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlKHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gbi5yb290LmRvY3VtZW50ID8gbi5yb290LmRvY3VtZW50LnZlcnNpb24gOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG5ldyB0bShuLCB0LCBvKTtcclxuICAgICAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgTGgpIHtcclxuICAgICAgICAgICAgICAgICAgICByLnNob3VsZFJlY2VpdmVBdHRyaWJ1dGVzID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXRjaC5hZGRPcGVyYXRpb24ocik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmFwcGx5T3BlcmF0aW9uKHIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBGZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2UsIGldIG9mIHQubWFya2Vycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gVWguX2NyZWF0ZUF0KGkucm9vdCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgJGgoaS5zdGFydC5fZ2V0Q29tYmluZWQodCwgbiksIGkuZW5kLl9nZXRDb21iaW5lZCh0LCBuKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB7cmFuZ2U6IG8sIHVzaW5nT3BlcmF0aW9uOiB0cnVlLCBhZmZlY3RzRGF0YTogdHJ1ZX07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsLm1hcmtlcnMuaGFzKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU1hcmtlcihlLCByKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hZGRNYXJrZXIoZSwgcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5zZXJ0VGV4dCh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEZnIHx8IGUgaW5zdGFuY2VvZiBqaCB8fCBlIGluc3RhbmNlb2YgVWgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluc2VydCh0aGlzLmNyZWF0ZVRleHQodCksIGUsIGkpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0KHRoaXMuY3JlYXRlVGV4dCh0LCBlKSwgaSwgbilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5zZXJ0RWxlbWVudCh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEZnIHx8IGUgaW5zdGFuY2VvZiBqaCB8fCBlIGluc3RhbmNlb2YgVWgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluc2VydCh0aGlzLmNyZWF0ZUVsZW1lbnQodCksIGUsIGkpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0KHRoaXMuY3JlYXRlRWxlbWVudCh0LCBlKSwgaSwgbilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXBwZW5kKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0KHQsIGUsIFwiZW5kXCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFwcGVuZFRleHQodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBGZyB8fCBlIGluc3RhbmNlb2YgamgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluc2VydCh0aGlzLmNyZWF0ZVRleHQodCksIGUsIFwiZW5kXCIpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0KHRoaXMuY3JlYXRlVGV4dCh0LCBlKSwgaSwgXCJlbmRcIilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXBwZW5kRWxlbWVudCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIEZnIHx8IGUgaW5zdGFuY2VvZiBqaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0KHRoaXMuY3JlYXRlRWxlbWVudCh0KSwgZSwgXCJlbmRcIilcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnNlcnQodGhpcy5jcmVhdGVFbGVtZW50KHQsIGUpLCBpLCBcImVuZFwiKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRBdHRyaWJ1dGUodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXNzZXJ0V3JpdGVyVXNlZENvcnJlY3RseSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgaW5zdGFuY2VvZiAkaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLmdldE1pbmltYWxGbGF0UmFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY20odGhpcywgdCwgZSwgaSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxtKHRoaXMsIHQsIGUsIGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldEF0dHJpYnV0ZXModCwgZSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbaSwgbl0gb2YgSHModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZShpLCBuLCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW1vdmVBdHRyaWJ1dGUodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXNzZXJ0V3JpdGVyVXNlZENvcnJlY3RseSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiAkaCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmdldE1pbmltYWxGbGF0UmFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY20odGhpcywgdCwgbnVsbCwgZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxtKHRoaXMsIHQsIG51bGwsIGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNsZWFyQXR0cmlidXRlcyh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hc3NlcnRXcml0ZXJVc2VkQ29ycmVjdGx5KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHQuZ2V0QXR0cmlidXRlS2V5cygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKGUsIHQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGlmICghKHQgaW5zdGFuY2VvZiAkaCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlKHQpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0LmdldEl0ZW1zKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZShpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbW92ZSh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hc3NlcnRXcml0ZXJVc2VkQ29ycmVjdGx5KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoISh0IGluc3RhbmNlb2YgJGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIndyaXRlci1tb3ZlLWludmFsaWQtcmFuZ2U6IEludmFsaWQgcmFuZ2UgdG8gbW92ZS5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdC5pc0ZsYXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwid3JpdGVyLW1vdmUtcmFuZ2Utbm90LWZsYXQ6IFJhbmdlIHRvIG1vdmUgaXMgbm90IGZsYXQuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gVWguX2NyZWF0ZUF0KGUsIGkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4uaXNFcXVhbCh0LnN0YXJ0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkT3BlcmF0aW9uRm9yQWZmZWN0ZWRNYXJrZXJzKFwibW92ZVwiLCB0KTtcclxuICAgICAgICAgICAgICAgIGlmICghaG0odC5yb290LCBuLnJvb3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIndyaXRlci1tb3ZlLWRpZmZlcmVudC1kb2N1bWVudDogUmFuZ2UgaXMgZ29pbmcgdG8gYmUgbW92ZWQgYmV0d2VlbiBkaWZmZXJlbnQgZG9jdW1lbnRzLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHQucm9vdC5kb2N1bWVudCA/IHQucm9vdC5kb2N1bWVudC52ZXJzaW9uIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuZXcgWmcodC5zdGFydCwgdC5lbmQub2Zmc2V0IC0gdC5zdGFydC5vZmZzZXQsIG4sIG8pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXRjaC5hZGRPcGVyYXRpb24ocik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmFwcGx5T3BlcmF0aW9uKHIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbW92ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hc3NlcnRXcml0ZXJVc2VkQ29ycmVjdGx5KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdCBpbnN0YW5jZW9mICRoID8gdCA6ICRoLl9jcmVhdGVPbih0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmdldE1pbmltYWxGbGF0UmFuZ2VzKCkucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRPcGVyYXRpb25Gb3JBZmZlY3RlZE1hcmtlcnMoXCJtb3ZlXCIsIHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHVtKHQuc3RhcnQsIHQuZW5kLm9mZnNldCAtIHQuc3RhcnQub2Zmc2V0LCB0aGlzLmJhdGNoLCB0aGlzLm1vZGVsKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBtZXJnZSh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hc3NlcnRXcml0ZXJVc2VkQ29ycmVjdGx5KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5ub2RlQmVmb3JlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQubm9kZUFmdGVyO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkT3BlcmF0aW9uRm9yQWZmZWN0ZWRNYXJrZXJzKFwibWVyZ2VcIiwgdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIShlIGluc3RhbmNlb2YgamgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIndyaXRlci1tZXJnZS1uby1lbGVtZW50LWJlZm9yZTogTm9kZSBiZWZvcmUgbWVyZ2UgcG9zaXRpb24gbXVzdCBiZSBhbiBlbGVtZW50LlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCEoaSBpbnN0YW5jZW9mIGpoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ3cml0ZXItbWVyZ2Utbm8tZWxlbWVudC1hZnRlcjogTm9kZSBhZnRlciBtZXJnZSBwb3NpdGlvbiBtdXN0IGJlIGFuIGVsZW1lbnQuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQucm9vdC5kb2N1bWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21lcmdlRGV0YWNoZWQodClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWVyZ2UodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlUG9zaXRpb25Gcm9tUGF0aCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5jcmVhdGVQb3NpdGlvbkZyb21QYXRoKHQsIGUsIGkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZVBvc2l0aW9uQXQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuY3JlYXRlUG9zaXRpb25BdCh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVQb3NpdGlvbkFmdGVyKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmNyZWF0ZVBvc2l0aW9uQWZ0ZXIodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlUG9zaXRpb25CZWZvcmUodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuY3JlYXRlUG9zaXRpb25CZWZvcmUodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlUmFuZ2UodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuY3JlYXRlUmFuZ2UodCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlUmFuZ2VJbih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5jcmVhdGVSYW5nZUluKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZVJhbmdlT24odCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuY3JlYXRlUmFuZ2VPbih0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVTZWxlY3Rpb24odCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuY3JlYXRlU2VsZWN0aW9uKHQsIGUsIGkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9tZXJnZURldGFjaGVkKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm5vZGVCZWZvcmU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5ub2RlQWZ0ZXI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmUoJGguX2NyZWF0ZUluKGkpLCBVaC5fY3JlYXRlQXQoZSwgXCJlbmRcIikpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmUoaSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX21lcmdlKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBVaC5fY3JlYXRlQXQodC5ub2RlQmVmb3JlLCBcImVuZFwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBVaC5fY3JlYXRlQXQodC5ub2RlQWZ0ZXIsIDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQucm9vdC5kb2N1bWVudC5ncmF2ZXlhcmQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gbmV3IFVoKG4sIFswXSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gdC5yb290LmRvY3VtZW50LnZlcnNpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gbmV3IG9tKGksIHQubm9kZUFmdGVyLm1heE9mZnNldCwgZSwgbywgcik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhdGNoLmFkZE9wZXJhdGlvbihzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuYXBwbHlPcGVyYXRpb24ocylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVuYW1lKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Fzc2VydFdyaXRlclVzZWRDb3JyZWN0bHkoKTtcclxuICAgICAgICAgICAgICAgIGlmICghKHQgaW5zdGFuY2VvZiBqaCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwid3JpdGVyLXJlbmFtZS1ub3QtZWxlbWVudC1pbnN0YW5jZTogVHJ5aW5nIHRvIHJlbmFtZSBhbiBvYmplY3Qgd2hpY2ggaXMgbm90IGFuIGluc3RhbmNlIG9mIEVsZW1lbnQuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5yb290LmRvY3VtZW50ID8gdC5yb290LmRvY3VtZW50LnZlcnNpb24gOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBpbShVaC5fY3JlYXRlQmVmb3JlKHQpLCB0Lm5hbWUsIGUsIGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYXRjaC5hZGRPcGVyYXRpb24obik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmFwcGx5T3BlcmF0aW9uKG4pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNwbGl0KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Fzc2VydFdyaXRlclVzZWRDb3JyZWN0bHkoKTtcclxuICAgICAgICAgICAgICAgIGxldCBpID0gdC5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIndyaXRlci1zcGxpdC1lbGVtZW50LW5vLXBhcmVudDogRWxlbWVudCB3aXRoIG5vIHBhcmVudCBjYW4gbm90IGJlIHNwbGl0LlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IGkucGFyZW50XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQucGFyZW50LmdldEFuY2VzdG9ycyh7aW5jbHVkZVNlbGY6IHRydWV9KS5pbmNsdWRlcyhlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ3cml0ZXItc3BsaXQtaW52YWxpZC1saW1pdC1lbGVtZW50OiBMaW1pdCBlbGVtZW50IGlzIG5vdCBhIHBvc2l0aW9uIGFuY2VzdG9yLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IG4sIG87XHJcbiAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IGkucm9vdC5kb2N1bWVudCA/IGkucm9vdC5kb2N1bWVudC52ZXJzaW9uIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gaS5tYXhPZmZzZXQgLSB0Lm9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gbmV3IHJtKHQsIHIsIG51bGwsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmF0Y2guYWRkT3BlcmF0aW9uKHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuYXBwbHlPcGVyYXRpb24ocyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuICYmICFvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gdC5wYXJlbnQubmV4dFNpYmxpbmdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IHRoaXMuY3JlYXRlUG9zaXRpb25BZnRlcih0LnBhcmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IHQucGFyZW50XHJcbiAgICAgICAgICAgICAgICB9IHdoaWxlIChpICE9PSBlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7cG9zaXRpb246IHQsIHJhbmdlOiBuZXcgJGgoVWguX2NyZWF0ZUF0KG4sIFwiZW5kXCIpLCBVaC5fY3JlYXRlQXQobywgMCkpfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB3cmFwKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Fzc2VydFdyaXRlclVzZWRDb3JyZWN0bHkoKTtcclxuICAgICAgICAgICAgICAgIGlmICghdC5pc0ZsYXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwid3JpdGVyLXdyYXAtcmFuZ2Utbm90LWZsYXQ6IFJhbmdlIHRvIHdyYXAgaXMgbm90IGZsYXQuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZSBpbnN0YW5jZW9mIGpoID8gZSA6IG5ldyBqaChlKTtcclxuICAgICAgICAgICAgICAgIGlmIChpLmNoaWxkQ291bnQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIndyaXRlci13cmFwLWVsZW1lbnQtbm90LWVtcHR5OiBFbGVtZW50IHRvIHdyYXAgd2l0aCBpcyBub3QgZW1wdHkuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaS5wYXJlbnQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwid3JpdGVyLXdyYXAtZWxlbWVudC1hdHRhY2hlZDogRWxlbWVudCB0byB3cmFwIHdpdGggaXMgYWxyZWFkeSBhdHRhY2hlZCB0byB0cmVlIG1vZGVsLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnNlcnQoaSwgdC5zdGFydCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3ICRoKHQuc3RhcnQuZ2V0U2hpZnRlZEJ5KDEpLCB0LmVuZC5nZXRTaGlmdGVkQnkoMSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb3ZlKG4sIFVoLl9jcmVhdGVBdChpLCAwKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdW53cmFwKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Fzc2VydFdyaXRlclVzZWRDb3JyZWN0bHkoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0LnBhcmVudCA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ3cml0ZXItdW53cmFwLWVsZW1lbnQtbm8tcGFyZW50OiBUcnlpbmcgdG8gdW53cmFwIGFuIGVsZW1lbnQgd2hpY2ggaGFzIG5vIHBhcmVudC5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubW92ZSgkaC5fY3JlYXRlSW4odCksIHRoaXMuY3JlYXRlUG9zaXRpb25BZnRlcih0KSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZSh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZGRNYXJrZXIodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXNzZXJ0V3JpdGVyVXNlZENvcnJlY3RseSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlIHx8IHR5cGVvZiBlLnVzaW5nT3BlcmF0aW9uICE9IFwiYm9vbGVhblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIndyaXRlci1hZGRNYXJrZXItbm8tdXNpbmdPcGVyYXRpb246IFRoZSBvcHRpb25zLnVzaW5nT3BlcmF0aW9uIHBhcmFtZXRlciBpcyByZXF1aXJlZCB3aGVuIGFkZGluZyBhIG5ldyBtYXJrZXIuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS51c2luZ09wZXJhdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLnJhbmdlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGUuYWZmZWN0c0RhdGEgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogZS5hZmZlY3RzRGF0YTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLm1vZGVsLm1hcmtlcnMuaGFzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIndyaXRlci1hZGRNYXJrZXItbWFya2VyLWV4aXN0czogTWFya2VyIHdpdGggcHJvdmlkZWQgbmFtZSBhbHJlYWR5IGV4aXN0cy5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ3cml0ZXItYWRkTWFya2VyLW5vLXJhbmdlOiBSYW5nZSBwYXJhbWV0ZXIgaXMgcmVxdWlyZWQgd2hlbiBhZGRpbmcgYSBuZXcgbWFya2VyLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwubWFya2Vycy5fc2V0KHQsIG4sIGksIG8pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBkbSh0aGlzLCB0LCBudWxsLCBuLCBvKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsLm1hcmtlcnMuZ2V0KHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHVwZGF0ZU1hcmtlcih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hc3NlcnRXcml0ZXJVc2VkQ29ycmVjdGx5KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdHlwZW9mIHQgPT0gXCJzdHJpbmdcIiA/IHQgOiB0Lm5hbWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5tb2RlbC5tYXJrZXJzLmdldChpKTtcclxuICAgICAgICAgICAgICAgIGlmICghbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ3cml0ZXItdXBkYXRlTWFya2VyLW1hcmtlci1ub3QtZXhpc3RzOiBNYXJrZXIgd2l0aCBwcm92aWRlZCBuYW1lIGRvZXMgbm90IGV4aXN0cy5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwubWFya2Vycy5fcmVmcmVzaChuKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0eXBlb2YgZS51c2luZ09wZXJhdGlvbiA9PSBcImJvb2xlYW5cIjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0eXBlb2YgZS5hZmZlY3RzRGF0YSA9PSBcImJvb2xlYW5cIjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSByID8gZS5hZmZlY3RzRGF0YSA6IG4uYWZmZWN0c0RhdGE7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW8gJiYgIWUucmFuZ2UgJiYgIXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwid3JpdGVyLXVwZGF0ZU1hcmtlci13cm9uZy1vcHRpb25zOiBPbmUgb2YgdGhlIG9wdGlvbnMgaXMgcmVxdWlyZWQgLSBwcm92aWRlIHJhbmdlLCB1c2luZ09wZXJhdGlvbnMgb3IgYWZmZWN0c0RhdGEuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gbi5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IGUucmFuZ2UgPyBlLnJhbmdlIDogYTtcclxuICAgICAgICAgICAgICAgIGlmIChvICYmIGUudXNpbmdPcGVyYXRpb24gIT09IG4ubWFuYWdlZFVzaW5nT3BlcmF0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLnVzaW5nT3BlcmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRtKHRoaXMsIGksIG51bGwsIGMsIHMpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG0odGhpcywgaSwgYSwgbnVsbCwgcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubW9kZWwubWFya2Vycy5fc2V0KGksIGMsIHVuZGVmaW5lZCwgcylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobi5tYW5hZ2VkVXNpbmdPcGVyYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG0odGhpcywgaSwgYSwgYywgcylcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5tYXJrZXJzLl9zZXQoaSwgYywgdW5kZWZpbmVkLCBzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW1vdmVNYXJrZXIodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXNzZXJ0V3JpdGVyVXNlZENvcnJlY3RseSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHR5cGVvZiB0ID09IFwic3RyaW5nXCIgPyB0IDogdC5uYW1lO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLm1vZGVsLm1hcmtlcnMuaGFzKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIndyaXRlci1yZW1vdmVNYXJrZXItbm8tbWFya2VyOiBUcnlpbmcgdG8gcmVtb3ZlIG1hcmtlciB3aGljaCBkb2VzIG5vdCBleGlzdC5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLm1vZGVsLm1hcmtlcnMuZ2V0KGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpLm1hbmFnZWRVc2luZ09wZXJhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLm1hcmtlcnMuX3JlbW92ZShlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLmdldFJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICBkbSh0aGlzLCBlLCBuLCBudWxsLCBpLmFmZmVjdHNEYXRhKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRTZWxlY3Rpb24odCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXNzZXJ0V3JpdGVyVXNlZENvcnJlY3RseSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24uX3NldFRvKHQsIGUsIGkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldFNlbGVjdGlvbkZvY3VzKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Fzc2VydFdyaXRlclVzZWRDb3JyZWN0bHkoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uLl9zZXRGb2N1cyh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRTZWxlY3Rpb25BdHRyaWJ1dGUodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYXNzZXJ0V3JpdGVyVXNlZENvcnJlY3RseSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ID09PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0U2VsZWN0aW9uQXR0cmlidXRlKHQsIGUpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2UsIGldIG9mIEhzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFNlbGVjdGlvbkF0dHJpYnV0ZShlLCBpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVtb3ZlU2VsZWN0aW9uQXR0cmlidXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Fzc2VydFdyaXRlclVzZWRDb3JyZWN0bHkoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdCA9PT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVNlbGVjdGlvbkF0dHJpYnV0ZSh0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVTZWxlY3Rpb25BdHRyaWJ1dGUoZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG92ZXJyaWRlU2VsZWN0aW9uR3Jhdml0eSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbi5fb3ZlcnJpZGVHcmF2aXR5KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVzdG9yZVNlbGVjdGlvbkdyYXZpdHkodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24uX3Jlc3RvcmVHcmF2aXR5KHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9zZXRTZWxlY3Rpb25BdHRyaWJ1dGUodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkuaXNDb2xsYXBzZWQgJiYgaS5hbmNob3IucGFyZW50LmlzRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gZGYuX2dldFN0b3JlQXR0cmlidXRlS2V5KHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0QXR0cmlidXRlKG4sIGUsIGkuYW5jaG9yLnBhcmVudClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkuX3NldEF0dHJpYnV0ZSh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVtb3ZlU2VsZWN0aW9uQXR0cmlidXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGlmIChlLmlzQ29sbGFwc2VkICYmIGUuYW5jaG9yLnBhcmVudC5pc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IGRmLl9nZXRTdG9yZUF0dHJpYnV0ZUtleSh0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUF0dHJpYnV0ZShpLCBlLmFuY2hvci5wYXJlbnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlLl9yZW1vdmVBdHRyaWJ1dGUodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2Fzc2VydFdyaXRlclVzZWRDb3JyZWN0bHkoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tb2RlbC5fY3VycmVudFdyaXRlciAhPT0gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ3cml0ZXItaW5jb3JyZWN0LXVzZTogVHJ5aW5nIHRvIHVzZSBhIHdyaXRlciBvdXRzaWRlIHRoZSBjaGFuZ2UoKSBibG9jay5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2FkZE9wZXJhdGlvbkZvckFmZmVjdGVkTWFya2Vycyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5tb2RlbC5tYXJrZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpLm1hbmFnZWRVc2luZ09wZXJhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGkuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ID09IFwibW92ZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBlLmNvbnRhaW5zUG9zaXRpb24obi5zdGFydCkgfHwgZS5zdGFydC5pc0VxdWFsKG4uc3RhcnQpIHx8IGUuY29udGFpbnNQb3NpdGlvbihuLmVuZCkgfHwgZS5lbmQuaXNFcXVhbChuLmVuZClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZS5ub2RlQmVmb3JlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5ub2RlQWZ0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuLnN0YXJ0LnBhcmVudCA9PSB0ICYmIG4uc3RhcnQuaXNBdEVuZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG4uZW5kLnBhcmVudCA9PSBpICYmIG4uZW5kLm9mZnNldCA9PSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gbi5lbmQubm9kZUFmdGVyID09IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBuLnN0YXJ0Lm5vZGVBZnRlciA9PSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gciB8fCBzIHx8IGEgfHwgY1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAobykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZU1hcmtlcihpLm5hbWUsIHtyYW5nZTogbn0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjbSh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSB0Lm1vZGVsO1xyXG4gICAgICAgICAgICBjb25zdCByID0gby5kb2N1bWVudDtcclxuICAgICAgICAgICAgbGV0IHMgPSBuLnN0YXJ0O1xyXG4gICAgICAgICAgICBsZXQgYTtcclxuICAgICAgICAgICAgbGV0IGM7XHJcbiAgICAgICAgICAgIGxldCBsO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygbi5nZXRXYWxrZXIoe3NoYWxsb3c6IHRydWV9KSkge1xyXG4gICAgICAgICAgICAgICAgbCA9IHQuaXRlbS5nZXRBdHRyaWJ1dGUoZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYSAmJiBjICE9IGwpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYyAhPSBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGQoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzID0gYVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYSA9IHQubmV4dFBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgYyA9IGxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoYSBpbnN0YW5jZW9mIFVoICYmIGEgIT0gcyAmJiBjICE9IGkpIHtcclxuICAgICAgICAgICAgICAgIGQoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBkKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyAkaChzLCBhKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGwgPSBuLnJvb3QuZG9jdW1lbnQgPyByLnZlcnNpb24gOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IG5ldyBRZyhuLCBlLCBjLCBpLCBsKTtcclxuICAgICAgICAgICAgICAgIHQuYmF0Y2guYWRkT3BlcmF0aW9uKGQpO1xyXG4gICAgICAgICAgICAgICAgby5hcHBseU9wZXJhdGlvbihkKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBsbSh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSB0Lm1vZGVsO1xyXG4gICAgICAgICAgICBjb25zdCByID0gby5kb2N1bWVudDtcclxuICAgICAgICAgICAgY29uc3QgcyA9IG4uZ2V0QXR0cmlidXRlKGUpO1xyXG4gICAgICAgICAgICBsZXQgYSwgYztcclxuICAgICAgICAgICAgaWYgKHMgIT0gaSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbCA9IG4ucm9vdCA9PT0gbjtcclxuICAgICAgICAgICAgICAgIGlmIChsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IG4uZG9jdW1lbnQgPyByLnZlcnNpb24gOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGMgPSBuZXcgbm0obiwgZSwgcywgaSwgdClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYSA9IG5ldyAkaChVaC5fY3JlYXRlQmVmb3JlKG4pLCB0LmNyZWF0ZVBvc2l0aW9uQWZ0ZXIobikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBhLnJvb3QuZG9jdW1lbnQgPyByLnZlcnNpb24gOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGMgPSBuZXcgUWcoYSwgZSwgcywgaSwgbylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHQuYmF0Y2guYWRkT3BlcmF0aW9uKGMpO1xyXG4gICAgICAgICAgICAgICAgby5hcHBseU9wZXJhdGlvbihjKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkbSh0LCBlLCBpLCBuLCBvKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSB0Lm1vZGVsO1xyXG4gICAgICAgICAgICBjb25zdCBzID0gci5kb2N1bWVudDtcclxuICAgICAgICAgICAgY29uc3QgYSA9IG5ldyBlbShlLCBpLCBuLCByLm1hcmtlcnMsIG8sIHMudmVyc2lvbik7XHJcbiAgICAgICAgICAgIHQuYmF0Y2guYWRkT3BlcmF0aW9uKGEpO1xyXG4gICAgICAgICAgICByLmFwcGx5T3BlcmF0aW9uKGEpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB1bSh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIGxldCBvO1xyXG4gICAgICAgICAgICBpZiAodC5yb290LmRvY3VtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gbi5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuZXcgVWgoaS5ncmF2ZXlhcmQsIFswXSk7XHJcbiAgICAgICAgICAgICAgICBvID0gbmV3IFpnKHQsIGUsIHIsIGkudmVyc2lvbilcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG8gPSBuZXcgWGcodCwgZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpLmFkZE9wZXJhdGlvbihvKTtcclxuICAgICAgICAgICAgbi5hcHBseU9wZXJhdGlvbihvKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaG0odCwgZSkge1xyXG4gICAgICAgICAgICBpZiAodCA9PT0gZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodCBpbnN0YW5jZW9mIHNtICYmIGUgaW5zdGFuY2VvZiBzbSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGZtIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFya2VyQ29sbGVjdGlvbiA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VzSW5FbGVtZW50ID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRTbmFwc2hvdHMgPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlZE1hcmtlcnMgPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlQ291bnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkQ2hhbmdlcyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRDaGFuZ2VzV2l0aEdyYXZleWFyZCA9IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGlzRW1wdHkoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hhbmdlc0luRWxlbWVudC5zaXplID09IDAgJiYgdGhpcy5fY2hhbmdlZE1hcmtlcnMuc2l6ZSA9PSAwXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlZnJlc2hJdGVtKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0luSW5zZXJ0ZWRFbGVtZW50KHQucGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFya1JlbW92ZSh0LnBhcmVudCwgdC5zdGFydE9mZnNldCwgdC5vZmZzZXRTaXplKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtJbnNlcnQodC5wYXJlbnQsIHQuc3RhcnRPZmZzZXQsIHQub2Zmc2V0U2l6ZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gJGguX2NyZWF0ZU9uKHQpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMuX21hcmtlckNvbGxlY3Rpb24uZ2V0TWFya2Vyc0ludGVyc2VjdGluZ1JhbmdlKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlck1hcmtlckNoYW5nZSh0Lm5hbWUsIGUsIGUsIHQuYWZmZWN0c0RhdGEpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRDaGFuZ2VzID0gbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBidWZmZXJPcGVyYXRpb24odCkge1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh0LnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlXCJpbnNlcnRcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNJbkluc2VydGVkRWxlbWVudCh0LnBvc2l0aW9uLnBhcmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcmtJbnNlcnQodC5wb3NpdGlvbi5wYXJlbnQsIHQucG9zaXRpb24ub2Zmc2V0LCB0Lm5vZGVzLm1heE9mZnNldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VcImFkZEF0dHJpYnV0ZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VcInJlbW92ZUF0dHJpYnV0ZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VcImNoYW5nZUF0dHJpYnV0ZVwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0LnJhbmdlLmdldEl0ZW1zKHtzaGFsbG93OiB0cnVlfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0luSW5zZXJ0ZWRFbGVtZW50KGUucGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXJrQXR0cmlidXRlKGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZVwicmVtb3ZlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZVwibW92ZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VcInJlaW5zZXJ0XCI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuc291cmNlUG9zaXRpb24uaXNFcXVhbCh0LnRhcmdldFBvc2l0aW9uKSB8fCB0LnNvdXJjZVBvc2l0aW9uLmdldFNoaWZ0ZWRCeSh0Lmhvd01hbnkpLmlzRXF1YWwodC50YXJnZXRQb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLl9pc0luSW5zZXJ0ZWRFbGVtZW50KHQuc291cmNlUG9zaXRpb24ucGFyZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX2lzSW5JbnNlcnRlZEVsZW1lbnQodC50YXJnZXRQb3NpdGlvbi5wYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcmtSZW1vdmUodC5zb3VyY2VQb3NpdGlvbi5wYXJlbnQsIHQuc291cmNlUG9zaXRpb24ub2Zmc2V0LCB0Lmhvd01hbnkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXJrSW5zZXJ0KHQudGFyZ2V0UG9zaXRpb24ucGFyZW50LCB0LmdldE1vdmVkUmFuZ2VTdGFydCgpLm9mZnNldCwgdC5ob3dNYW55KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2VcInJlbmFtZVwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0luSW5zZXJ0ZWRFbGVtZW50KHQucG9zaXRpb24ucGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFya1JlbW92ZSh0LnBvc2l0aW9uLnBhcmVudCwgdC5wb3NpdGlvbi5vZmZzZXQsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXJrSW5zZXJ0KHQucG9zaXRpb24ucGFyZW50LCB0LnBvc2l0aW9uLm9mZnNldCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSAkaC5fY3JlYXRlRnJvbVBvc2l0aW9uQW5kU2hpZnQodC5wb3NpdGlvbiwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLl9tYXJrZXJDb2xsZWN0aW9uLmdldE1hcmtlcnNJbnRlcnNlY3RpbmdSYW5nZShlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYnVmZmVyTWFya2VyQ2hhbmdlKHQubmFtZSwgZSwgZSwgdC5hZmZlY3RzRGF0YSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXNlXCJzcGxpdFwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnNwbGl0UG9zaXRpb24ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lzSW5JbnNlcnRlZEVsZW1lbnQoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcmtSZW1vdmUoZSwgdC5zcGxpdFBvc2l0aW9uLm9mZnNldCwgdC5ob3dNYW55KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNJbkluc2VydGVkRWxlbWVudCh0Lmluc2VydGlvblBvc2l0aW9uLnBhcmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcmtJbnNlcnQodC5pbnNlcnRpb25Qb3NpdGlvbi5wYXJlbnQsIHQuaW5zZXJ0aW9uUG9zaXRpb24ub2Zmc2V0LCAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmdyYXZleWFyZFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9tYXJrUmVtb3ZlKHQuZ3JhdmV5YXJkUG9zaXRpb24ucGFyZW50LCB0LmdyYXZleWFyZFBvc2l0aW9uLm9mZnNldCwgMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXNlXCJtZXJnZVwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnNvdXJjZVBvc2l0aW9uLnBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pc0luSW5zZXJ0ZWRFbGVtZW50KGUucGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFya1JlbW92ZShlLnBhcmVudCwgZS5zdGFydE9mZnNldCwgMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5ncmF2ZXlhcmRQb3NpdGlvbi5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcmtJbnNlcnQoaSwgdC5ncmF2ZXlhcmRQb3NpdGlvbi5vZmZzZXQsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdC50YXJnZXRQb3NpdGlvbi5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNJbkluc2VydGVkRWxlbWVudChuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFya0luc2VydChuLCB0LnRhcmdldFBvc2l0aW9uLm9mZnNldCwgZS5tYXhPZmZzZXQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRDaGFuZ2VzID0gbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBidWZmZXJNYXJrZXJDaGFuZ2UodCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMuX2NoYW5nZWRNYXJrZXJzLmdldCh0KTtcclxuICAgICAgICAgICAgICAgIGlmICghbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZWRNYXJrZXJzLnNldCh0LCB7b2xkUmFuZ2U6IGUsIG5ld1JhbmdlOiBpLCBhZmZlY3RzRGF0YTogbn0pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG8ubmV3UmFuZ2UgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIG8uYWZmZWN0c0RhdGEgPSBuO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLm9sZFJhbmdlID09IG51bGwgJiYgby5uZXdSYW5nZSA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZWRNYXJrZXJzLmRlbGV0ZSh0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0TWFya2Vyc1RvUmVtb3ZlKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZSwgaV0gb2YgdGhpcy5fY2hhbmdlZE1hcmtlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaS5vbGRSYW5nZSAhPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQucHVzaCh7bmFtZTogZSwgcmFuZ2U6IGkub2xkUmFuZ2V9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldE1hcmtlcnNUb0FkZCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2UsIGldIG9mIHRoaXMuX2NoYW5nZWRNYXJrZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkubmV3UmFuZ2UgIT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnB1c2goe25hbWU6IGUsIHJhbmdlOiBpLm5ld1JhbmdlfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRDaGFuZ2VkTWFya2VycygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuX2NoYW5nZWRNYXJrZXJzKS5tYXAodCA9PiAoe1xyXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IHRbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YToge29sZFJhbmdlOiB0WzFdLm9sZFJhbmdlLCBuZXdSYW5nZTogdFsxXS5uZXdSYW5nZX1cclxuICAgICAgICAgICAgICAgIH0pKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBoYXNEYXRhQ2hhbmdlcygpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgWywgdF0gb2YgdGhpcy5fY2hhbmdlZE1hcmtlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5hZmZlY3RzRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGFuZ2VzSW5FbGVtZW50LnNpemUgPiAwXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENoYW5nZXModCA9IHtpbmNsdWRlQ2hhbmdlc0luR3JhdmV5YXJkOiBmYWxzZX0pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jYWNoZWRDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQuaW5jbHVkZUNoYW5nZXNJbkdyYXZleWFyZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkQ2hhbmdlc1dpdGhHcmF2ZXlhcmQuc2xpY2UoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRDaGFuZ2VzLnNsaWNlKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5fY2hhbmdlc0luRWxlbWVudC5rZXlzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5fY2hhbmdlc0luRWxlbWVudC5nZXQodCkuc29ydCgodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5vZmZzZXQgPT09IGUub2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC50eXBlICE9IGUudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnR5cGUgPT0gXCJyZW1vdmVcIiA/IC0xIDogMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5vZmZzZXQgPCBlLm9mZnNldCA/IC0xIDogMVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9lbGVtZW50U25hcHNob3RzLmdldCh0KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gZ20odC5nZXRDaGlsZHJlbigpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gbW0obi5sZW5ndGgsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPT09IFwiaVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnB1c2godGhpcy5fZ2V0SW5zZXJ0RGlmZih0LCBzLCBvW3NdLm5hbWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMrK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IFwiclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnB1c2godGhpcy5fZ2V0UmVtb3ZlRGlmZih0LCBzLCBuW2FdLm5hbWUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGErK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IFwiYVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gb1tzXS5hdHRyaWJ1dGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IG5bYV0uYXR0cmlidXRlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9bc10ubmFtZSA9PSBcIiR0ZXh0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gbmV3ICRoKFVoLl9jcmVhdGVBdCh0LCBzKSwgVWguX2NyZWF0ZUF0KHQsIHMgKyAxKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQub2Zmc2V0VG9JbmRleChzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjID0gbmV3ICRoKFVoLl9jcmVhdGVBdCh0LCBzKSwgVWguX2NyZWF0ZUF0KHQuZ2V0Q2hpbGQoZSksIDApKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKC4uLnRoaXMuX2dldEF0dHJpYnV0ZXNEaWZmKGMsIHIsIGkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGErK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYSsrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlLnNvcnQoKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5wb3NpdGlvbi5yb290ICE9IGUucG9zaXRpb24ucm9vdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5wb3NpdGlvbi5yb290LnJvb3ROYW1lIDwgZS5wb3NpdGlvbi5yb290LnJvb3ROYW1lID8gLTEgOiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LnBvc2l0aW9uLmlzRXF1YWwoZS5wb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQuY2hhbmdlQ291bnQgLSBlLmNoYW5nZUNvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnBvc2l0aW9uLmlzQmVmb3JlKGUucG9zaXRpb24pID8gLTEgOiAxXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHQgPSAxOyB0IDwgZS5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlW3QgLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gZVt0XTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gaS50eXBlID09IFwicmVtb3ZlXCIgJiYgbi50eXBlID09IFwicmVtb3ZlXCIgJiYgaS5uYW1lID09IFwiJHRleHRcIiAmJiBuLm5hbWUgPT0gXCIkdGV4dFwiICYmIGkucG9zaXRpb24uaXNFcXVhbChuLnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gaS50eXBlID09IFwiaW5zZXJ0XCIgJiYgbi50eXBlID09IFwiaW5zZXJ0XCIgJiYgaS5uYW1lID09IFwiJHRleHRcIiAmJiBuLm5hbWUgPT0gXCIkdGV4dFwiICYmIGkucG9zaXRpb24ucGFyZW50ID09IG4ucG9zaXRpb24ucGFyZW50ICYmIGkucG9zaXRpb24ub2Zmc2V0ICsgaS5sZW5ndGggPT0gbi5wb3NpdGlvbi5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IGkudHlwZSA9PSBcImF0dHJpYnV0ZVwiICYmIG4udHlwZSA9PSBcImF0dHJpYnV0ZVwiICYmIGkucG9zaXRpb24ucGFyZW50ID09IG4ucG9zaXRpb24ucGFyZW50ICYmIGkucmFuZ2UuaXNGbGF0ICYmIG4ucmFuZ2UuaXNGbGF0ICYmIGkucG9zaXRpb24ub2Zmc2V0ICsgaS5sZW5ndGggPT0gbi5wb3NpdGlvbi5vZmZzZXQgJiYgaS5hdHRyaWJ1dGVLZXkgPT0gbi5hdHRyaWJ1dGVLZXkgJiYgaS5hdHRyaWJ1dGVPbGRWYWx1ZSA9PSBuLmF0dHJpYnV0ZU9sZFZhbHVlICYmIGkuYXR0cmlidXRlTmV3VmFsdWUgPT0gbi5hdHRyaWJ1dGVOZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobyB8fCByIHx8IHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZVt0IC0gMV0ubGVuZ3RoKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlW3QgLSAxXS5yYW5nZS5lbmQgPSBlW3QgLSAxXS5yYW5nZS5lbmQuZ2V0U2hpZnRlZEJ5KDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zcGxpY2UodCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQtLVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHQuY2hhbmdlQ291bnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQudHlwZSA9PSBcImF0dHJpYnV0ZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSB0LnBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgdC5sZW5ndGhcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VDb3VudCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRDaGFuZ2VzV2l0aEdyYXZleWFyZCA9IGUuc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZENoYW5nZXMgPSBlLnNsaWNlKCkuZmlsdGVyKHBtKTtcclxuICAgICAgICAgICAgICAgIGlmICh0LmluY2x1ZGVDaGFuZ2VzSW5HcmF2ZXlhcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2FjaGVkQ2hhbmdlc1dpdGhHcmF2ZXlhcmRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhY2hlZENoYW5nZXNcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVzZXQoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VzSW5FbGVtZW50LmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50U25hcHNob3RzLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VkTWFya2Vycy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2FjaGVkQ2hhbmdlcyA9IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX21hcmtJbnNlcnQodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHt0eXBlOiBcImluc2VydFwiLCBvZmZzZXQ6IGUsIGhvd01hbnk6IGksIGNvdW50OiB0aGlzLl9jaGFuZ2VDb3VudCsrfTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtDaGFuZ2UodCwgbilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX21hcmtSZW1vdmUodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHt0eXBlOiBcInJlbW92ZVwiLCBvZmZzZXQ6IGUsIGhvd01hbnk6IGksIGNvdW50OiB0aGlzLl9jaGFuZ2VDb3VudCsrfTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtDaGFuZ2UodCwgbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVBbGxOZXN0ZWRDaGFuZ2VzKHQsIGUsIGkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9tYXJrQXR0cmlidXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB7dHlwZTogXCJhdHRyaWJ1dGVcIiwgb2Zmc2V0OiB0LnN0YXJ0T2Zmc2V0LCBob3dNYW55OiB0Lm9mZnNldFNpemUsIGNvdW50OiB0aGlzLl9jaGFuZ2VDb3VudCsrfTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21hcmtDaGFuZ2UodC5wYXJlbnQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9tYXJrQ2hhbmdlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21ha2VTbmFwc2hvdCh0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9nZXRDaGFuZ2VzRm9yRWxlbWVudCh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZUNoYW5nZShlLCBpKTtcclxuICAgICAgICAgICAgICAgIGkucHVzaChlKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHQgPSAwOyB0IDwgaS5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpW3RdLmhvd01hbnkgPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc3BsaWNlKHQsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LS1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRDaGFuZ2VzRm9yRWxlbWVudCh0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jaGFuZ2VzSW5FbGVtZW50Lmhhcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLl9jaGFuZ2VzSW5FbGVtZW50LmdldCh0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlc0luRWxlbWVudC5zZXQodCwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9tYWtlU25hcHNob3QodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9lbGVtZW50U25hcHNob3RzLmhhcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRTbmFwc2hvdHMuc2V0KHQsIGdtKHQuZ2V0Q2hpbGRyZW4oKSkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9oYW5kbGVDaGFuZ2UodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdC5ub2Rlc1RvSGFuZGxlID0gdC5ob3dNYW55O1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5vZmZzZXQgKyB0Lmhvd01hbnk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IGkub2Zmc2V0ICsgaS5ob3dNYW55O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LnR5cGUgPT0gXCJpbnNlcnRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaS50eXBlID09IFwiaW5zZXJ0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm9mZnNldCA8PSBpLm9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkub2Zmc2V0ICs9IHQuaG93TWFueVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0Lm9mZnNldCA8IG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmhvd01hbnkgKz0gdC5ub2Rlc1RvSGFuZGxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZXNUb0hhbmRsZSA9IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaS50eXBlID09IFwicmVtb3ZlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm9mZnNldCA8IGkub2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vZmZzZXQgKz0gdC5ob3dNYW55XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkudHlwZSA9PSBcImF0dHJpYnV0ZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5vZmZzZXQgPD0gaS5vZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9mZnNldCArPSB0Lmhvd01hbnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5vZmZzZXQgPCBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IGkuaG93TWFueTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmhvd01hbnkgPSB0Lm9mZnNldCAtIGkub2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUudW5zaGlmdCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYXR0cmlidXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG93TWFueTogbyAtIGkuaG93TWFueSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IHRoaXMuX2NoYW5nZUNvdW50KytcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LnR5cGUgPT0gXCJyZW1vdmVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaS50eXBlID09IFwiaW5zZXJ0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuIDw9IGkub2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vZmZzZXQgLT0gdC5ob3dNYW55XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG4gPD0gbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm9mZnNldCA8IGkub2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuIC0gaS5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkub2Zmc2V0ID0gdC5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuaG93TWFueSAtPSBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm5vZGVzVG9IYW5kbGUgLT0gZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuaG93TWFueSAtPSB0Lm5vZGVzVG9IYW5kbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZXNUb0hhbmRsZSA9IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm9mZnNldCA8PSBpLm9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm5vZGVzVG9IYW5kbGUgLT0gaS5ob3dNYW55O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmhvd01hbnkgPSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0Lm9mZnNldCA8IG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IG8gLSB0Lm9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5ob3dNYW55IC09IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZXNUb0hhbmRsZSAtPSBlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLnR5cGUgPT0gXCJyZW1vdmVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gPD0gaS5vZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9mZnNldCAtPSB0Lmhvd01hbnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5vZmZzZXQgPCBpLm9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZXNUb0hhbmRsZSArPSBpLmhvd01hbnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5ob3dNYW55ID0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLnR5cGUgPT0gXCJhdHRyaWJ1dGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gPD0gaS5vZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLm9mZnNldCAtPSB0Lmhvd01hbnlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5vZmZzZXQgPCBpLm9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuIC0gaS5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5vZmZzZXQgPSB0Lm9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmhvd01hbnkgLT0gZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0Lm9mZnNldCA8IG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobiA8PSBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLmhvd01hbnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuaG93TWFueSA9IHQub2Zmc2V0IC0gaS5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuIC0gaS5ob3dNYW55IC0gdC5ub2Rlc1RvSGFuZGxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnVuc2hpZnQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhdHRyaWJ1dGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogdC5vZmZzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3dNYW55OiBvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IHRoaXMuX2NoYW5nZUNvdW50KytcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmhvd01hbnkgLT0gbyAtIHQub2Zmc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LnR5cGUgPT0gXCJhdHRyaWJ1dGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaS50eXBlID09IFwiaW5zZXJ0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lm9mZnNldCA8IGkub2Zmc2V0ICYmIG4gPiBpLm9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuID4gbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhdHRyaWJ1dGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvd01hbnk6IG4gLSBvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQ6IHRoaXMuX2NoYW5nZUNvdW50KytcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2hhbmdlKHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnB1c2godClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5ub2Rlc1RvSGFuZGxlID0gaS5vZmZzZXQgLSB0Lm9mZnNldDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lmhvd01hbnkgPSB0Lm5vZGVzVG9IYW5kbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5vZmZzZXQgPj0gaS5vZmZzZXQgJiYgdC5vZmZzZXQgPCBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gPiBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZXNUb0hhbmRsZSA9IG4gLSBvO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm9mZnNldCA9IG9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm5vZGVzVG9IYW5kbGUgPSAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLnR5cGUgPT0gXCJyZW1vdmVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQub2Zmc2V0IDwgaS5vZmZzZXQgJiYgbiA+IGkub2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhdHRyaWJ1dGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBpLm9mZnNldCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG93TWFueTogbiAtIGkub2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudDogdGhpcy5fY2hhbmdlQ291bnQrK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlQ2hhbmdlKG8sIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm5vZGVzVG9IYW5kbGUgPSBpLm9mZnNldCAtIHQub2Zmc2V0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuaG93TWFueSA9IHQubm9kZXNUb0hhbmRsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLnR5cGUgPT0gXCJhdHRyaWJ1dGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQub2Zmc2V0ID49IGkub2Zmc2V0ICYmIG4gPD0gbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQubm9kZXNUb0hhbmRsZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5ob3dNYW55ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm9mZnNldCA9IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5vZmZzZXQgPD0gaS5vZmZzZXQgJiYgbiA+PSBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5ob3dNYW55ID0gMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdC5ob3dNYW55ID0gdC5ub2Rlc1RvSGFuZGxlO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlIHQubm9kZXNUb0hhbmRsZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0SW5zZXJ0RGlmZih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiaW5zZXJ0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFVoLl9jcmVhdGVBdCh0LCBlKSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMSxcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VDb3VudDogdGhpcy5fY2hhbmdlQ291bnQrK1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0UmVtb3ZlRGlmZih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwicmVtb3ZlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IFVoLl9jcmVhdGVBdCh0LCBlKSxcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBpLFxyXG4gICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMSxcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VDb3VudDogdGhpcy5fY2hhbmdlQ291bnQrK1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0QXR0cmlidXRlc0RpZmYodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaSA9IG5ldyBNYXAoaSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtvLCByXSBvZiBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IGkuaGFzKG8pID8gaS5nZXQobykgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlICE9PSByKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImF0dHJpYnV0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHQuc3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZTogdC5jbG9uZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVuZ3RoOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlS2V5OiBvLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlT2xkVmFsdWU6IHIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVOZXdWYWx1ZTogZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZUNvdW50OiB0aGlzLl9jaGFuZ2VDb3VudCsrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGkuZGVsZXRlKG8pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtlLCBvXSBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhdHRyaWJ1dGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHQuc3RhcnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlOiB0LmNsb25lKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aDogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlS2V5OiBlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVPbGRWYWx1ZTogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlTmV3VmFsdWU6IG8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZUNvdW50OiB0aGlzLl9jaGFuZ2VDb3VudCsrXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9pc0luSW5zZXJ0ZWRFbGVtZW50KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX2NoYW5nZXNJbkVsZW1lbnQuZ2V0KGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnR5cGUgPT0gXCJpbnNlcnRcIiAmJiBuID49IHQub2Zmc2V0ICYmIG4gPCB0Lm9mZnNldCArIHQuaG93TWFueSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9pc0luSW5zZXJ0ZWRFbGVtZW50KGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZW1vdmVBbGxOZXN0ZWRDaGFuZ2VzKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgJGgoVWguX2NyZWF0ZUF0KHQsIGUpLCBVaC5fY3JlYXRlQXQodCwgZSArIGkpKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBuLmdldEl0ZW1zKHtzaGFsbG93OiB0cnVlfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5pcyhcImVsZW1lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudFNuYXBzaG90cy5kZWxldGUodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoYW5nZXNJbkVsZW1lbnQuZGVsZXRlKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVBbGxOZXN0ZWRDaGFuZ2VzKHQsIDAsIHQubWF4T2Zmc2V0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZ20odCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaS5pcyhcInRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCB0ID0gMDsgdCA8IGkuZGF0YS5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnB1c2goe25hbWU6IFwiJHRleHRcIiwgYXR0cmlidXRlczogbmV3IE1hcChpLmdldEF0dHJpYnV0ZXMoKSl9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wdXNoKHtuYW1lOiBpLm5hbWUsIGF0dHJpYnV0ZXM6IG5ldyBNYXAoaS5nZXRBdHRyaWJ1dGVzKCkpfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbW0odCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gW107XHJcbiAgICAgICAgICAgIGxldCBuID0gMDtcclxuICAgICAgICAgICAgbGV0IG8gPSAwO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQub2Zmc2V0ID4gbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGUgPSAwOyBlIDwgdC5vZmZzZXQgLSBuOyBlKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5wdXNoKFwiZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBvICs9IHQub2Zmc2V0IC0gblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQudHlwZSA9PSBcImluc2VydFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCB0Lmhvd01hbnk7IGUrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnB1c2goXCJpXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0Lm9mZnNldCArIHQuaG93TWFueVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0LnR5cGUgPT0gXCJyZW1vdmVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGUgPSAwOyBlIDwgdC5ob3dNYW55OyBlKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5wdXNoKFwiclwiKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBuID0gdC5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgbyArPSB0Lmhvd01hbnlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5wdXNoKC4uLlwiYVwiLnJlcGVhdCh0Lmhvd01hbnkpLnNwbGl0KFwiXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICBuID0gdC5vZmZzZXQgKyB0Lmhvd01hbnk7XHJcbiAgICAgICAgICAgICAgICAgICAgbyArPSB0Lmhvd01hbnlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAobyA8IHQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGUgPSAwOyBlIDwgdCAtIG8gLSBuOyBlKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpLnB1c2goXCJlXCIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHBtKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHQucG9zaXRpb24gJiYgdC5wb3NpdGlvbi5yb290LnJvb3ROYW1lID09IFwiJGdyYXZleWFyZFwiO1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5yYW5nZSAmJiB0LnJhbmdlLnJvb3Qucm9vdE5hbWUgPT0gXCIkZ3JhdmV5YXJkXCI7XHJcbiAgICAgICAgICAgIHJldHVybiAhZSAmJiAhaVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgYm0ge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wZXJhdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VuZG9QYWlycyA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91bmRvbmVPcGVyYXRpb25zID0gbmV3IFNldFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZGRPcGVyYXRpb24odCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX29wZXJhdGlvbnMuaW5jbHVkZXModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX29wZXJhdGlvbnMucHVzaCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRPcGVyYXRpb25zKHQgPSAwLCBlID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodCA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW11cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9vcGVyYXRpb25zLnNsaWNlKHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldE9wZXJhdGlvbih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fb3BlcmF0aW9uc1t0XVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRPcGVyYXRpb25Bc1VuZG9uZSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91bmRvUGFpcnMuc2V0KGUsIHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdW5kb25lT3BlcmF0aW9ucy5hZGQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNVbmRvaW5nT3BlcmF0aW9uKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl91bmRvUGFpcnMuaGFzKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlzVW5kb25lT3BlcmF0aW9uKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl91bmRvbmVPcGVyYXRpb25zLmhhcyh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRVbmRvbmVPcGVyYXRpb24odCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VuZG9QYWlycy5nZXQodClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gd20odCkge1xyXG4gICAgICAgICAgICByZXR1cm4gISF0ICYmIHQubGVuZ3RoID09IDEgJiYgL1tcXHUwMzAwLVxcdTAzNmZcXHUxYWIwLVxcdTFhZmZcXHUxZGMwLVxcdTFkZmZcXHUyMGQwLVxcdTIwZmZcXHVmZTIwLVxcdWZlMmZdLy50ZXN0KHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBrbSh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIXQgJiYgdC5sZW5ndGggPT0gMSAmJiAvW1xcdWQ4MDAtXFx1ZGJmZl0vLnRlc3QodClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9tKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICEhdCAmJiB0Lmxlbmd0aCA9PSAxICYmIC9bXFx1ZGMwMC1cXHVkZmZmXS8udGVzdCh0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdm0odCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ga20odC5jaGFyQXQoZSAtIDEpKSAmJiBfbSh0LmNoYXJBdChlKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHltKHQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHdtKHQuY2hhckF0KGUpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgeG0gPSBcIiRncmF2ZXlhcmRcIjtcclxuXHJcbiAgICAgICAgY2xhc3MgQ20ge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsID0gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMudmVyc2lvbiA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnkgPSBuZXcgYm0odGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbiA9IG5ldyBkZih0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucm9vdHMgPSBuZXcgeXMoe2lkUHJvcGVydHk6IFwicm9vdE5hbWVcIn0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaWZmZXIgPSBuZXcgZm0odC5tYXJrZXJzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Bvc3RGaXhlcnMgPSBuZXcgU2V0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faGFzU2VsZWN0aW9uQ2hhbmdlZEZyb21UaGVMYXN0Q2hhbmdlQmxvY2sgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlUm9vdChcIiRyb290XCIsIHhtKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odCwgXCJhcHBseU9wZXJhdGlvblwiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpLmlzRG9jdW1lbnRPcGVyYXRpb24gJiYgaS5iYXNlVmVyc2lvbiAhPT0gdGhpcy52ZXJzaW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJtb2RlbC1kb2N1bWVudC1hcHBseU9wZXJhdGlvbi13cm9uZy12ZXJzaW9uOiBPbmx5IG9wZXJhdGlvbnMgd2l0aCBtYXRjaGluZyB2ZXJzaW9ucyBjYW4gYmUgYXBwbGllZC5cIiwgdGhpcywge29wZXJhdGlvbjogaX0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImhpZ2hlc3RcIn0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0LCBcImFwcGx5T3BlcmF0aW9uXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IGVbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkuaXNEb2N1bWVudE9wZXJhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRpZmZlci5idWZmZXJPcGVyYXRpb24oaSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwiaGlnaFwifSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHQsIFwiYXBwbHlPcGVyYXRpb25cIiwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZVswXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaS5pc0RvY3VtZW50T3BlcmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmVyc2lvbisrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpc3RvcnkuYWRkT3BlcmF0aW9uKGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImxvd1wifSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMuc2VsZWN0aW9uLCBcImNoYW5nZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFzU2VsZWN0aW9uQ2hhbmdlZEZyb21UaGVMYXN0Q2hhbmdlQmxvY2sgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odC5tYXJrZXJzLCBcInVwZGF0ZVwiLCAodCwgZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlmZmVyLmJ1ZmZlck1hcmtlckNoYW5nZShlLm5hbWUsIGksIG4sIGUuYWZmZWN0c0RhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUub24oXCJjaGFuZ2VcIiwgKHQsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGlmZmVyLmJ1ZmZlck1hcmtlckNoYW5nZShlLm5hbWUsIGksIGUuZ2V0UmFuZ2UoKSwgZS5hZmZlY3RzRGF0YSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgZ3JhdmV5YXJkKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Um9vdCh4bSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlUm9vdCh0ID0gXCIkcm9vdFwiLCBlID0gXCJtYWluXCIpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnJvb3RzLmdldChlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJtb2RlbC1kb2N1bWVudC1jcmVhdGVSb290LW5hbWUtZXhpc3RzOiBSb290IHdpdGggc3BlY2lmaWVkIG5hbWUgYWxyZWFkeSBleGlzdHMuXCIsIHRoaXMsIHtuYW1lOiBlfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgc20odGhpcywgdCwgZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3RzLmFkZChpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRSb290KHQgPSBcIm1haW5cIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucm9vdHMuZ2V0KHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFJvb3ROYW1lcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMucm9vdHMsIHQgPT4gdC5yb290TmFtZSkuZmlsdGVyKHQgPT4gdCAhPSB4bSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVnaXN0ZXJQb3N0Rml4ZXIodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcG9zdEZpeGVycy5hZGQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9KU09OKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IEJzKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdC5zZWxlY3Rpb24gPSBcIltlbmdpbmUubW9kZWwuRG9jdW1lbnRTZWxlY3Rpb25dXCI7XHJcbiAgICAgICAgICAgICAgICB0Lm1vZGVsID0gXCJbZW5naW5lLm1vZGVsLk1vZGVsXVwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2hhbmRsZUNoYW5nZUJsb2NrKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9oYXNEb2N1bWVudENoYW5nZWRGcm9tVGhlTGFzdENoYW5nZUJsb2NrKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jYWxsUG9zdEZpeGVycyh0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGlvbi5yZWZyZXNoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZGlmZmVyLmhhc0RhdGFDaGFuZ2VzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiY2hhbmdlOmRhdGFcIiwgdC5iYXRjaClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJjaGFuZ2VcIiwgdC5iYXRjaClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb24ucmVmcmVzaCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGlmZmVyLnJlc2V0KClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2hhc1NlbGVjdGlvbkNoYW5nZWRGcm9tVGhlTGFzdENoYW5nZUJsb2NrID0gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2hhc0RvY3VtZW50Q2hhbmdlZEZyb21UaGVMYXN0Q2hhbmdlQmxvY2soKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIXRoaXMuZGlmZmVyLmlzRW1wdHkgfHwgdGhpcy5faGFzU2VsZWN0aW9uQ2hhbmdlZEZyb21UaGVMYXN0Q2hhbmdlQmxvY2tcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldERlZmF1bHRSb290KCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMucm9vdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAhPT0gdGhpcy5ncmF2ZXlhcmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5ncmF2ZXlhcmRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldERlZmF1bHRSYW5nZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9nZXREZWZhdWx0Um9vdCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5zY2hlbWE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5jcmVhdGVQb3NpdGlvbkZyb21QYXRoKHQsIFswXSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gaS5nZXROZWFyZXN0U2VsZWN0aW9uUmFuZ2Uobik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbyB8fCBlLmNyZWF0ZVJhbmdlKG4pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF92YWxpZGF0ZVNlbGVjdGlvblJhbmdlKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBBbSh0LnN0YXJ0KSAmJiBBbSh0LmVuZClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NhbGxQb3N0Rml4ZXJzKHQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHRoaXMuX3Bvc3RGaXhlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb24ucmVmcmVzaCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gaSh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IHdoaWxlIChlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2cyhDbSwgZHMpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBBbSh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LnRleHROb2RlO1xyXG4gICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuZGF0YTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0Lm9mZnNldCAtIGUuc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIXZtKGksIG4pICYmICF5bShpLCBuKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBUbSB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFya2VycyA9IG5ldyBNYXBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbWFya2Vycy52YWx1ZXMoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBoYXModCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21hcmtlcnMuaGFzKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbWFya2Vycy5nZXQodCkgfHwgbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2V0KHQsIGUsIGkgPSBmYWxzZSwgbiA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gdCBpbnN0YW5jZW9mIFBtID8gdC5uYW1lIDogdDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLl9tYXJrZXJzLmdldChvKTtcclxuICAgICAgICAgICAgICAgIGlmIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHIuZ2V0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdC5pc0VxdWFsKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuX2F0dGFjaExpdmVSYW5nZShyZi5mcm9tUmFuZ2UoZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSAhPSByLm1hbmFnZWRVc2luZ09wZXJhdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgci5fbWFuYWdlZFVzaW5nT3BlcmF0aW9ucyA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbiA9PT0gXCJib29sZWFuXCIgJiYgbiAhPSByLmFmZmVjdHNEYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuX2FmZmVjdHNEYXRhID0gbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcyA9IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwidXBkYXRlOlwiICsgbywgciwgdCwgZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSByZi5mcm9tUmFuZ2UoZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gbmV3IFBtKG8sIHMsIGksIG4pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFya2Vycy5zZXQobywgYSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJ1cGRhdGU6XCIgKyBvLCBhLCBudWxsLCBlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZW1vdmUodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQgaW5zdGFuY2VvZiBQbSA/IHQubmFtZSA6IHQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5fbWFya2Vycy5nZXQoZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcmtlcnMuZGVsZXRlKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcInVwZGF0ZTpcIiArIGUsIGksIGkuZ2V0UmFuZ2UoKSwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveU1hcmtlcihpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZWZyZXNoKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0IGluc3RhbmNlb2YgUG0gPyB0Lm5hbWUgOiB0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX21hcmtlcnMuZ2V0KGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIm1hcmtlcmNvbGxlY3Rpb24tcmVmcmVzaC1tYXJrZXItbm90LWV4aXN0czogTWFya2VyIHdpdGggcHJvdmlkZWQgbmFtZSBkb2VzIG5vdCBleGlzdHMuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5nZXRSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKFwidXBkYXRlOlwiICsgZSwgaSwgbiwgbiwgaS5tYW5hZ2VkVXNpbmdPcGVyYXRpb25zLCBpLmFmZmVjdHNEYXRhKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIGdldE1hcmtlcnNBdFBvc2l0aW9uKHQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuZ2V0UmFuZ2UoKS5jb250YWluc1Bvc2l0aW9uKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIGVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICogZ2V0TWFya2Vyc0ludGVyc2VjdGluZ1JhbmdlKHQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuZ2V0UmFuZ2UoKS5nZXRJbnRlcnNlY3Rpb24odCkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLl9tYXJrZXJzLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGVzdHJveU1hcmtlcih0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFya2VycyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIGdldE1hcmtlcnNHcm91cCh0KSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5fbWFya2Vycy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLm5hbWUuc3RhcnRzV2l0aCh0ICsgXCI6XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIGVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9kZXN0cm95TWFya2VyKHQpIHtcclxuICAgICAgICAgICAgICAgIHQuc3RvcExpc3RlbmluZygpO1xyXG4gICAgICAgICAgICAgICAgdC5fZGV0YWNoTGl2ZVJhbmdlKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMoVG0sIGRzKTtcclxuXHJcbiAgICAgICAgY2xhc3MgUG0ge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm5hbWUgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGl2ZVJhbmdlID0gdGhpcy5fYXR0YWNoTGl2ZVJhbmdlKGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFuYWdlZFVzaW5nT3BlcmF0aW9ucyA9IGk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hZmZlY3RzRGF0YSA9IG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IG1hbmFnZWRVc2luZ09wZXJhdGlvbnMoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2xpdmVSYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJtYXJrZXItZGVzdHJveWVkOiBDYW5ub3QgdXNlIGEgZGVzdHJveWVkIG1hcmtlciBpbnN0YW5jZS5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYW5hZ2VkVXNpbmdPcGVyYXRpb25zXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBhZmZlY3RzRGF0YSgpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fbGl2ZVJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcIm1hcmtlci1kZXN0cm95ZWQ6IENhbm5vdCB1c2UgYSBkZXN0cm95ZWQgbWFya2VyIGluc3RhbmNlLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2FmZmVjdHNEYXRhXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFN0YXJ0KCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9saXZlUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibWFya2VyLWRlc3Ryb3llZDogQ2Fubm90IHVzZSBhIGRlc3Ryb3llZCBtYXJrZXIgaW5zdGFuY2UuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGl2ZVJhbmdlLnN0YXJ0LmNsb25lKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0RW5kKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9saXZlUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibWFya2VyLWRlc3Ryb3llZDogQ2Fubm90IHVzZSBhIGRlc3Ryb3llZCBtYXJrZXIgaW5zdGFuY2UuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGl2ZVJhbmdlLmVuZC5jbG9uZSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFJhbmdlKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9saXZlUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibWFya2VyLWRlc3Ryb3llZDogQ2Fubm90IHVzZSBhIGRlc3Ryb3llZCBtYXJrZXIgaW5zdGFuY2UuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbGl2ZVJhbmdlLnRvUmFuZ2UoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpcyh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PSBcIm1hcmtlclwiIHx8IHQgPT0gXCJtb2RlbDptYXJrZXJcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfYXR0YWNoTGl2ZVJhbmdlKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9saXZlUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9kZXRhY2hMaXZlUmFuZ2UoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdC5kZWxlZ2F0ZShcImNoYW5nZTpyYW5nZVwiKS50byh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHQuZGVsZWdhdGUoXCJjaGFuZ2U6Y29udGVudFwiKS50byh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xpdmVSYW5nZSA9IHQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZGV0YWNoTGl2ZVJhbmdlKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGl2ZVJhbmdlLnN0b3BEZWxlZ2F0aW5nKFwiY2hhbmdlOnJhbmdlXCIsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGl2ZVJhbmdlLnN0b3BEZWxlZ2F0aW5nKFwiY2hhbmdlOmNvbnRlbnRcIiwgdGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9saXZlUmFuZ2UuZGV0YWNoKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9saXZlUmFuZ2UgPSBudWxsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKFBtLCBkcyk7XHJcblxyXG4gICAgICAgIGNsYXNzIFNtIGV4dGVuZHMgTGcge1xyXG4gICAgICAgICAgICBnZXQgdHlwZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIm5vb3BcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjbG9uZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgU20odGhpcy5iYXNlVmVyc2lvbilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0UmV2ZXJzZWQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNtKHRoaXMuYmFzZVZlcnNpb24gKyAxKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZXhlY3V0ZSgpIHtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGdldCBjbGFzc05hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJOb09wZXJhdGlvblwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IEVtID0ge307XHJcbiAgICAgICAgRW1bUWcuY2xhc3NOYW1lXSA9IFFnO1xyXG4gICAgICAgIEVtW3RtLmNsYXNzTmFtZV0gPSB0bTtcclxuICAgICAgICBFbVtlbS5jbGFzc05hbWVdID0gZW07XHJcbiAgICAgICAgRW1bWmcuY2xhc3NOYW1lXSA9IFpnO1xyXG4gICAgICAgIEVtW1NtLmNsYXNzTmFtZV0gPSBTbTtcclxuICAgICAgICBFbVtMZy5jbGFzc05hbWVdID0gTGc7XHJcbiAgICAgICAgRW1baW0uY2xhc3NOYW1lXSA9IGltO1xyXG4gICAgICAgIEVtW25tLmNsYXNzTmFtZV0gPSBubTtcclxuICAgICAgICBFbVtybS5jbGFzc05hbWVdID0gcm07XHJcbiAgICAgICAgRW1bb20uY2xhc3NOYW1lXSA9IG9tO1xyXG5cclxuICAgICAgICBjbGFzcyBSbSB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBmcm9tSlNPTih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gRW1bdC5fX2NsYXNzTmFtZV0uZnJvbUpTT04odCwgZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgT20gZXh0ZW5kcyBVaCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUsIGkgPSBcInRvTm9uZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0LCBlLCBpKTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5yb290LmlzKFwicm9vdEVsZW1lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwibW9kZWwtbGl2ZXBvc2l0aW9uLXJvb3Qtbm90LXJvb3RlbGVtZW50OiBMaXZlUG9zaXRpb24ncyByb290IGhhcyB0byBiZSBhbiBpbnN0YW5jZSBvZiBSb290RWxlbWVudC5cIiwgdClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIEltLmNhbGwodGhpcylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGV0YWNoKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXModCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPT0gXCJsaXZlUG9zaXRpb25cIiB8fCB0ID09IFwibW9kZWw6bGl2ZVBvc2l0aW9uXCIgfHwgc3VwZXIuaXModClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9Qb3NpdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVWgodGhpcy5yb290LCB0aGlzLnBhdGguc2xpY2UoKSwgdGhpcy5zdGlja2luZXNzKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZnJvbVBvc2l0aW9uKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgdGhpcyh0LnJvb3QsIHQucGF0aC5zbGljZSgpLCBlID8gZSA6IHQuc3RpY2tpbmVzcylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSW0oKSB7XHJcbiAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5yb290LmRvY3VtZW50Lm1vZGVsLCBcImFwcGx5T3BlcmF0aW9uXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZVswXTtcclxuICAgICAgICAgICAgICAgIGlmICghaS5pc0RvY3VtZW50T3BlcmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBWbS5jYWxsKHRoaXMsIGkpXHJcbiAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJsb3dcIn0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBWbSh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmdldFRyYW5zZm9ybWVkQnlPcGVyYXRpb24odCk7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc0VxdWFsKGUpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy50b1Bvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBhdGggPSBlLnBhdGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJvb3QgPSBlLnJvb3Q7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJjaGFuZ2VcIiwgdClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMoT20sIGRzKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gTm0odCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdC5jaGFuZ2UobyA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcjtcclxuICAgICAgICAgICAgICAgIGlmICghaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHIgPSB0LmRvY3VtZW50LnNlbGVjdGlvblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpIGluc3RhbmNlb2YgWGggfHwgaSBpbnN0YW5jZW9mIGRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgciA9IGlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgciA9IG8uY3JlYXRlU2VsZWN0aW9uKGksIG4pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXIuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LmRlbGV0ZUNvbnRlbnQociwge2RvTm90QXV0b3BhcmFncmFwaDogdHJ1ZX0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gbmV3IE1tKHQsIG8sIHIuYW5jaG9yKTtcclxuICAgICAgICAgICAgICAgIGxldCBhO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuaXMoXCJkb2N1bWVudEZyYWdtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYSA9IGUuZ2V0Q2hpbGRyZW4oKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhID0gW2VdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzLmhhbmRsZU5vZGVzKGEsIHtpc0ZpcnN0OiB0cnVlLCBpc0xhc3Q6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBzLmdldFNlbGVjdGlvblJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyIGluc3RhbmNlb2YgZGYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgby5zZXRTZWxlY3Rpb24oYylcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByLnNldFRvKGMpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGwgPSBzLmdldEFmZmVjdGVkUmFuZ2UoKSB8fCB0LmNyZWF0ZVJhbmdlKHIuYW5jaG9yKTtcclxuICAgICAgICAgICAgICAgIHMuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIE1tIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbCA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlciA9IGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FuTWVyZ2VXaXRoID0gbmV3IFNldChbdGhpcy5wb3NpdGlvbi5wYXJlbnRdKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hID0gdC5zY2hlbWE7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maWx0ZXJBdHRyaWJ1dGVzT2YgPSBbXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FmZmVjdGVkU3RhcnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWZmZWN0ZWRFbmQgPSBudWxsXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGhhbmRsZU5vZGVzKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHQgPSBBcnJheS5mcm9tKHQpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHRbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlTm9kZShuLCB7aXNGaXJzdDogaSA9PT0gMCAmJiBlLmlzRmlyc3QsIGlzTGFzdDogaSA9PT0gdC5sZW5ndGggLSAxICYmIGUuaXNMYXN0fSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hLnJlbW92ZURpc2FsbG93ZWRBdHRyaWJ1dGVzKHRoaXMuX2ZpbHRlckF0dHJpYnV0ZXNPZiwgdGhpcy53cml0ZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsdGVyQXR0cmlidXRlc09mID0gW11cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0U2VsZWN0aW9uUmFuZ2UoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5ub2RlVG9TZWxlY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJGguX2NyZWF0ZU9uKHRoaXMubm9kZVRvU2VsZWN0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuc2NoZW1hLmdldE5lYXJlc3RTZWxlY3Rpb25SYW5nZSh0aGlzLnBvc2l0aW9uKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRBZmZlY3RlZFJhbmdlKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9hZmZlY3RlZFN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgJGgodGhpcy5fYWZmZWN0ZWRTdGFydCwgdGhpcy5fYWZmZWN0ZWRFbmQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWZmZWN0ZWRTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FmZmVjdGVkU3RhcnQuZGV0YWNoKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hZmZlY3RlZEVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FmZmVjdGVkRW5kLmRldGFjaCgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9oYW5kbGVOb2RlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjaGVtYS5pc09iamVjdCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZU9iamVjdCh0LCBlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9jaGVja0FuZFNwbGl0VG9BbGxvd2VkUG9zaXRpb24odCwgZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVEaXNhbGxvd2VkTm9kZSh0LCBlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2luc2VydCh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX21lcmdlU2libGluZ3NPZih0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfaGFuZGxlT2JqZWN0KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9jaGVja0FuZFNwbGl0VG9BbGxvd2VkUG9zaXRpb24odCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbnNlcnQodClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdHJ5QXV0b3BhcmFncmFwaGluZyh0LCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfaGFuZGxlRGlzYWxsb3dlZE5vZGUodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuaXMoXCJlbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVOb2Rlcyh0LmdldENoaWxkcmVuKCksIGUpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyeUF1dG9wYXJhZ3JhcGhpbmcodCwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2luc2VydCh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2NoZW1hLmNoZWNrQ2hpbGQodGhpcy5wb3NpdGlvbiwgdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiaW5zZXJ0Y29udGVudC13cm9uZy1wb3NpdGlvbjogR2l2ZW4gbm9kZSBjYW5ub3QgYmUgaW5zZXJ0ZWQgb24gdGhlIGdpdmVuIHBvc2l0aW9uLlwiLCB0aGlzLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGU6IHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB0aGlzLnBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBPbS5mcm9tUG9zaXRpb24odGhpcy5wb3NpdGlvbiwgXCJ0b05leHRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRBZmZlY3RlZEJvdW5kYXJpZXModGhpcy5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlci5pbnNlcnQodCwgdGhpcy5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gZS50b1Bvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBlLmRldGFjaCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc2NoZW1hLmlzT2JqZWN0KHQpICYmICF0aGlzLnNjaGVtYS5jaGVja0NoaWxkKHRoaXMucG9zaXRpb24sIFwiJHRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm5vZGVUb1NlbGVjdCA9IHRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ub2RlVG9TZWxlY3QgPSBudWxsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maWx0ZXJBdHRyaWJ1dGVzT2YucHVzaCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2V0QWZmZWN0ZWRCb3VuZGFyaWVzKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fYWZmZWN0ZWRTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FmZmVjdGVkU3RhcnQgPSBPbS5mcm9tUG9zaXRpb24odCwgXCJ0b1ByZXZpb3VzXCIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2FmZmVjdGVkRW5kIHx8IHRoaXMuX2FmZmVjdGVkRW5kLmlzQmVmb3JlKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FmZmVjdGVkRW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FmZmVjdGVkRW5kLmRldGFjaCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FmZmVjdGVkRW5kID0gT20uZnJvbVBvc2l0aW9uKHQsIFwidG9OZXh0XCIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9tZXJnZVNpYmxpbmdzT2YodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCEodCBpbnN0YW5jZW9mIGpoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX2Nhbk1lcmdlTGVmdCh0LCBlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9jYW5NZXJnZVJpZ2h0KHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IE9tLl9jcmVhdGVCZWZvcmUodCk7XHJcbiAgICAgICAgICAgICAgICBvLnN0aWNraW5lc3MgPSBcInRvTmV4dFwiO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IE9tLl9jcmVhdGVBZnRlcih0KTtcclxuICAgICAgICAgICAgICAgIHIuc3RpY2tpbmVzcyA9IFwidG9OZXh0XCI7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBPbS5mcm9tUG9zaXRpb24odGhpcy5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5zdGlja2luZXNzID0gXCJ0b05leHRcIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWZmZWN0ZWRTdGFydC5pc0VxdWFsKG8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FmZmVjdGVkU3RhcnQuZGV0YWNoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FmZmVjdGVkU3RhcnQgPSBPbS5fY3JlYXRlQXQoby5ub2RlQmVmb3JlLCBcImVuZFwiLCBcInRvUHJldmlvdXNcIilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53cml0ZXIubWVyZ2Uobyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8uaXNFcXVhbCh0aGlzLl9hZmZlY3RlZEVuZCkgJiYgZS5pc0xhc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWZmZWN0ZWRFbmQuZGV0YWNoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FmZmVjdGVkRW5kID0gT20uX2NyZWF0ZUF0KG8ubm9kZUJlZm9yZSwgXCJlbmRcIiwgXCJ0b05leHRcIilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHQudG9Qb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHQuZGV0YWNoKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnBvc2l0aW9uLmlzRXF1YWwocikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcImluc2VydGNvbnRlbnQtaW52YWxpZC1pbnNlcnRpb24tcG9zaXRpb25cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IFVoLl9jcmVhdGVBdChyLm5vZGVCZWZvcmUsIFwiZW5kXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBPbS5mcm9tUG9zaXRpb24odGhpcy5wb3NpdGlvbiwgXCJ0b1ByZXZpb3VzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hZmZlY3RlZEVuZC5pc0VxdWFsKHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2FmZmVjdGVkRW5kLmRldGFjaCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZmZlY3RlZEVuZCA9IE9tLl9jcmVhdGVBdChyLm5vZGVCZWZvcmUsIFwiZW5kXCIsIFwidG9OZXh0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMud3JpdGVyLm1lcmdlKHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyLmdldFNoaWZ0ZWRCeSgtMSkuaXNFcXVhbCh0aGlzLl9hZmZlY3RlZFN0YXJ0KSAmJiBlLmlzRmlyc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWZmZWN0ZWRTdGFydC5kZXRhY2goKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWZmZWN0ZWRTdGFydCA9IE9tLl9jcmVhdGVBdChyLm5vZGVCZWZvcmUsIDAsIFwidG9QcmV2aW91c1wiKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnBvc2l0aW9uID0gdC50b1Bvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5kZXRhY2goKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGkgfHwgbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbHRlckF0dHJpYnV0ZXNPZi5wdXNoKHRoaXMucG9zaXRpb24ucGFyZW50KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgby5kZXRhY2goKTtcclxuICAgICAgICAgICAgICAgIHIuZGV0YWNoKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2Nhbk1lcmdlTGVmdCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5pc0ZpcnN0ICYmIGkgaW5zdGFuY2VvZiBqaCAmJiB0aGlzLmNhbk1lcmdlV2l0aC5oYXMoaSkgJiYgdGhpcy5tb2RlbC5zY2hlbWEuY2hlY2tNZXJnZShpLCB0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY2FuTWVyZ2VSaWdodCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgIHJldHVybiBlLmlzTGFzdCAmJiBpIGluc3RhbmNlb2YgamggJiYgdGhpcy5jYW5NZXJnZVdpdGguaGFzKGkpICYmIHRoaXMubW9kZWwuc2NoZW1hLmNoZWNrTWVyZ2UodCwgaSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3RyeUF1dG9wYXJhZ3JhcGhpbmcodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMud3JpdGVyLmNyZWF0ZUVsZW1lbnQoXCJwYXJhZ3JhcGhcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZ2V0QWxsb3dlZEluKGksIHRoaXMucG9zaXRpb24ucGFyZW50KSAmJiB0aGlzLnNjaGVtYS5jaGVja0NoaWxkKGksIHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5fYXBwZW5kQ2hpbGQodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGFuZGxlTm9kZShpLCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY2hlY2tBbmRTcGxpdFRvQWxsb3dlZFBvc2l0aW9uKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLl9nZXRBbGxvd2VkSW4odCwgdGhpcy5wb3NpdGlvbi5wYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoZSAhPSB0aGlzLnBvc2l0aW9uLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjaGVtYS5pc0xpbWl0KHRoaXMucG9zaXRpb24ucGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMucG9zaXRpb24uaXNBdFN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnBvc2l0aW9uLnBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHRoaXMud3JpdGVyLmNyZWF0ZVBvc2l0aW9uQmVmb3JlKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5pc0VtcHR5ICYmIHQucGFyZW50ID09PSBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndyaXRlci5yZW1vdmUodClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5wb3NpdGlvbi5pc0F0RW5kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb24gPSB0aGlzLndyaXRlci5jcmVhdGVQb3NpdGlvbkFmdGVyKHRoaXMucG9zaXRpb24ucGFyZW50KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLndyaXRlci5jcmVhdGVQb3NpdGlvbkFmdGVyKHRoaXMucG9zaXRpb24ucGFyZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0QWZmZWN0ZWRCb3VuZGFyaWVzKHRoaXMucG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLndyaXRlci5zcGxpdCh0aGlzLnBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2FuTWVyZ2VXaXRoLmFkZCh0aGlzLnBvc2l0aW9uLm5vZGVBZnRlcilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0QWxsb3dlZEluKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjaGVtYS5jaGVja0NoaWxkKGUsIHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9nZXRBbGxvd2VkSW4odCwgZS5wYXJlbnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBCbSh0LCBlLCBpID0ge30pIHtcclxuICAgICAgICAgICAgaWYgKGUuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLmdldEZpcnN0UmFuZ2UoKTtcclxuICAgICAgICAgICAgaWYgKG4ucm9vdC5yb290TmFtZSA9PSBcIiRncmF2ZXlhcmRcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbyA9IHQuc2NoZW1hO1xyXG4gICAgICAgICAgICB0LmNoYW5nZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghaS5kb05vdFJlc2V0RW50aXJlQ29udGVudCAmJiBIbShvLCBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGptKHQsIGUsIG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG4uc3RhcnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gT20uZnJvbVBvc2l0aW9uKG4uZW5kLCBcInRvTmV4dFwiKTtcclxuICAgICAgICAgICAgICAgIGlmICghbi5zdGFydC5pc1RvdWNoaW5nKG4uZW5kKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQucmVtb3ZlKG4pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkubGVhdmVVbm1lcmdlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHptKHQsIHIsIHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIG8ucmVtb3ZlRGlzYWxsb3dlZEF0dHJpYnV0ZXMoci5wYXJlbnQuZ2V0Q2hpbGRyZW4oKSwgdClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFdtKHQsIGUsIHIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpLmRvTm90QXV0b3BhcmFncmFwaCAmJiBMbShvLCByKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIERtKHQsIHIsIGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzLmRldGFjaCgpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB6bSh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLnBhcmVudDtcclxuICAgICAgICAgICAgY29uc3QgbyA9IGkucGFyZW50O1xyXG4gICAgICAgICAgICBpZiAobiA9PSBvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5tb2RlbC5zY2hlbWEuaXNMaW1pdChuKSB8fCB0Lm1vZGVsLnNjaGVtYS5pc0xpbWl0KG8pKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIUZtKGUsIGksIHQubW9kZWwuc2NoZW1hKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZSA9IHQuY3JlYXRlUG9zaXRpb25BZnRlcihuKTtcclxuICAgICAgICAgICAgaSA9IHQuY3JlYXRlUG9zaXRpb25CZWZvcmUobyk7XHJcbiAgICAgICAgICAgIGlmICghaS5pc0VxdWFsKGUpKSB7XHJcbiAgICAgICAgICAgICAgICB0Lmluc2VydChvLCBlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQubWVyZ2UoZSk7XHJcbiAgICAgICAgICAgIHdoaWxlIChpLnBhcmVudC5pc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gaS5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBpID0gdC5jcmVhdGVQb3NpdGlvbkJlZm9yZShlKTtcclxuICAgICAgICAgICAgICAgIHQucmVtb3ZlKGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgem0odCwgZSwgaSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIExtKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHQuY2hlY2tDaGlsZChlLCBcIiR0ZXh0XCIpO1xyXG4gICAgICAgICAgICBjb25zdCBuID0gdC5jaGVja0NoaWxkKGUsIFwicGFyYWdyYXBoXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gIWkgJiYgblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRm0odCwgZSwgaSkge1xyXG4gICAgICAgICAgICBjb25zdCBuID0gbmV3ICRoKHQsIGUpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygbi5nZXRXYWxrZXIoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkuaXNMaW1pdCh0Lml0ZW0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIERtKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgY29uc3QgbiA9IHQuY3JlYXRlRWxlbWVudChcInBhcmFncmFwaFwiKTtcclxuICAgICAgICAgICAgdC5pbnNlcnQobiwgZSk7XHJcbiAgICAgICAgICAgIFdtKHQsIGksIHQuY3JlYXRlUG9zaXRpb25BdChuLCAwKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGptKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHQubW9kZWwuc2NoZW1hLmdldExpbWl0RWxlbWVudChlKTtcclxuICAgICAgICAgICAgdC5yZW1vdmUodC5jcmVhdGVSYW5nZUluKGkpKTtcclxuICAgICAgICAgICAgRG0odCwgdC5jcmVhdGVQb3NpdGlvbkF0KGksIDApLCBlKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSG0odCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5nZXRMaW1pdEVsZW1lbnQoZSk7XHJcbiAgICAgICAgICAgIGlmICghZS5jb250YWluc0VudGlyZUNvbnRlbnQoaSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLmdldEZpcnN0UmFuZ2UoKTtcclxuICAgICAgICAgICAgaWYgKG4uc3RhcnQucGFyZW50ID09IG4uZW5kLnBhcmVudCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHQuY2hlY2tDaGlsZChpLCBcInBhcmFncmFwaFwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gV20odCwgZSwgaSkge1xyXG4gICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIGRmKSB7XHJcbiAgICAgICAgICAgICAgICB0LnNldFNlbGVjdGlvbihpKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZS5zZXRUbyhpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBxbSA9ICcgLC4/ITo7XCItKCknO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBVbSh0LCBlLCBpID0ge30pIHtcclxuICAgICAgICAgICAgY29uc3QgbiA9IHQuc2NoZW1hO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gaS5kaXJlY3Rpb24gIT0gXCJiYWNrd2FyZFwiO1xyXG4gICAgICAgICAgICBjb25zdCByID0gaS51bml0ID8gaS51bml0IDogXCJjaGFyYWN0ZXJcIjtcclxuICAgICAgICAgICAgY29uc3QgcyA9IGUuZm9jdXM7XHJcbiAgICAgICAgICAgIGNvbnN0IGEgPSBuZXcgV2goe2JvdW5kYXJpZXM6IEptKHMsIG8pLCBzaW5nbGVDaGFyYWN0ZXJzOiB0cnVlLCBkaXJlY3Rpb246IG8gPyBcImZvcndhcmRcIiA6IFwiYmFja3dhcmRcIn0pO1xyXG4gICAgICAgICAgICBjb25zdCBjID0ge3dhbGtlcjogYSwgc2NoZW1hOiBuLCBpc0ZvcndhcmQ6IG8sIHVuaXQ6IHJ9O1xyXG4gICAgICAgICAgICBsZXQgbDtcclxuICAgICAgICAgICAgd2hpbGUgKGwgPSBhLm5leHQoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGwuZG9uZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9ICRtKGMsIGwudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZSBpbnN0YW5jZW9mIGRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuY2hhbmdlKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRTZWxlY3Rpb25Gb2N1cyhpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0Rm9jdXMoaSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uICRtKHQsIGUpIHtcclxuICAgICAgICAgICAgaWYgKGUudHlwZSA9PSBcInRleHRcIikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQudW5pdCA9PT0gXCJ3b3JkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gS20odC53YWxrZXIsIHQuaXNGb3J3YXJkKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEdtKHQud2Fsa2VyLCB0LnVuaXQsIHQuaXNGb3J3YXJkKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlLnR5cGUgPT0gKHQuaXNGb3J3YXJkID8gXCJlbGVtZW50U3RhcnRcIiA6IFwiZWxlbWVudEVuZFwiKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuc2NoZW1hLmlzT2JqZWN0KGUuaXRlbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gVWguX2NyZWF0ZUF0KGUuaXRlbSwgdC5pc0ZvcndhcmQgPyBcImFmdGVyXCIgOiBcImJlZm9yZVwiKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQuc2NoZW1hLmNoZWNrQ2hpbGQoZS5uZXh0UG9zaXRpb24sIFwiJHRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5uZXh0UG9zaXRpb25cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmICh0LnNjaGVtYS5pc0xpbWl0KGUuaXRlbSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LndhbGtlci5za2lwKCgpID0+IHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQuc2NoZW1hLmNoZWNrQ2hpbGQoZS5uZXh0UG9zaXRpb24sIFwiJHRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5uZXh0UG9zaXRpb25cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gR20odCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5wb3NpdGlvbi50ZXh0Tm9kZTtcclxuICAgICAgICAgICAgaWYgKGkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLmRhdGE7XHJcbiAgICAgICAgICAgICAgICBsZXQgbyA9IHQucG9zaXRpb24ub2Zmc2V0IC0gaS5zdGFydE9mZnNldDtcclxuICAgICAgICAgICAgICAgIHdoaWxlICh2bShuLCBvKSB8fCBlID09IFwiY2hhcmFjdGVyXCIgJiYgeW0obiwgbykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0Lm5leHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBvID0gdC5wb3NpdGlvbi5vZmZzZXQgLSBpLnN0YXJ0T2Zmc2V0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHQucG9zaXRpb25cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEttKHQsIGUpIHtcclxuICAgICAgICAgICAgbGV0IGkgPSB0LnBvc2l0aW9uLnRleHROb2RlO1xyXG4gICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IG4gPSB0LnBvc2l0aW9uLm9mZnNldCAtIGkuc3RhcnRPZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAoIVltKGkuZGF0YSwgbiwgZSkgJiYgIVFtKGksIG4sIGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5uZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IGUgPyB0LnBvc2l0aW9uLm5vZGVBZnRlciA6IHQucG9zaXRpb24ubm9kZUJlZm9yZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobyAmJiBvLmlzKFwidGV4dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gby5kYXRhLmNoYXJBdChlID8gMCA6IG8uZGF0YS5sZW5ndGggLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFxbS5pbmNsdWRlcyhuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5uZXh0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gdC5wb3NpdGlvbi50ZXh0Tm9kZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0LnBvc2l0aW9uLm9mZnNldCAtIGkuc3RhcnRPZmZzZXRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdC5wb3NpdGlvblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSm0odCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5yb290O1xyXG4gICAgICAgICAgICBjb25zdCBuID0gVWguX2NyZWF0ZUF0KGksIGUgPyBcImVuZFwiIDogMCk7XHJcbiAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3ICRoKHQsIG4pXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3ICRoKG4sIHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFltKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGUgKyAoaSA/IDAgOiAtMSk7XHJcbiAgICAgICAgICAgIHJldHVybiBxbS5pbmNsdWRlcyh0LmNoYXJBdChuKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFFtKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGUgPT09IChpID8gdC5lbmRPZmZzZXQgOiAwKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWG0odCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdC5jaGFuZ2UodCA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5nZXRGaXJzdFJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW4gfHwgbi5pc0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gbi5zdGFydC5yb290O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG4uc3RhcnQuZ2V0Q29tbW9uUGF0aChuLmVuZCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gby5nZXROb2RlQnlQYXRoKHIpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGE7XHJcbiAgICAgICAgICAgICAgICBpZiAobi5zdGFydC5wYXJlbnQgPT0gbi5lbmQucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYSA9IG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYSA9IHQuY3JlYXRlUmFuZ2UodC5jcmVhdGVQb3NpdGlvbkF0KHMsIG4uc3RhcnQucGF0aFtyLmxlbmd0aF0pLCB0LmNyZWF0ZVBvc2l0aW9uQXQocywgbi5lbmQucGF0aFtyLmxlbmd0aF0gKyAxKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBhLmVuZC5vZmZzZXQgLSBhLnN0YXJ0Lm9mZnNldDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBhLmdldEl0ZW1zKHtzaGFsbG93OiB0cnVlfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5pcyhcInRleHRQcm94eVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmFwcGVuZFRleHQoZS5kYXRhLCBlLmdldEF0dHJpYnV0ZXMoKSwgaSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmFwcGVuZChlLl9jbG9uZSh0cnVlKSwgaSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoYSAhPSBuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IG4uX2dldFRyYW5zZm9ybWVkQnlNb3ZlKGEuc3RhcnQsIHQuY3JlYXRlUG9zaXRpb25BdChpLCAwKSwgYylbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IHQuY3JlYXRlUmFuZ2UodC5jcmVhdGVQb3NpdGlvbkF0KGksIDApLCBlLnN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gdC5jcmVhdGVSYW5nZShlLmVuZCwgdC5jcmVhdGVQb3NpdGlvbkF0KGksIFwiZW5kXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICBabShyLCB0KTtcclxuICAgICAgICAgICAgICAgICAgICBabShvLCB0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFptKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IFtdO1xyXG4gICAgICAgICAgICBBcnJheS5mcm9tKHQuZ2V0SXRlbXMoe2RpcmVjdGlvbjogXCJiYWNrd2FyZFwifSkpLm1hcCh0ID0+IGUuY3JlYXRlUmFuZ2VPbih0KSkuZmlsdGVyKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IChlLnN0YXJ0LmlzQWZ0ZXIodC5zdGFydCkgfHwgZS5zdGFydC5pc0VxdWFsKHQuc3RhcnQpKSAmJiAoZS5lbmQuaXNCZWZvcmUodC5lbmQpIHx8IGUuZW5kLmlzRXF1YWwodC5lbmQpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgIH0pLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpLnB1c2godC5zdGFydC5wYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgZS5yZW1vdmUodClcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGkuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgIGxldCBpID0gdDtcclxuICAgICAgICAgICAgICAgIHdoaWxlIChpLnBhcmVudCAmJiBpLmlzRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gZS5jcmVhdGVSYW5nZU9uKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBpLnBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICBlLnJlbW92ZSh0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdHAodCkge1xyXG4gICAgICAgICAgICB0LmRvY3VtZW50LnJlZ2lzdGVyUG9zdEZpeGVyKGUgPT4gZXAoZSwgdCkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBlcCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBlLmRvY3VtZW50LnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGUuc2NoZW1hO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gW107XHJcbiAgICAgICAgICAgIGxldCByID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBpLmdldFJhbmdlcygpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gaXAodCwgbik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG8ucHVzaChlKTtcclxuICAgICAgICAgICAgICAgICAgICByID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBvLnB1c2godClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocikge1xyXG4gICAgICAgICAgICAgICAgdC5zZXRTZWxlY3Rpb24oYXAobyksIHtiYWNrd2FyZDogaS5pc0JhY2t3YXJkfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaXAodCwgZSkge1xyXG4gICAgICAgICAgICBpZiAodC5pc0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5wKHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9wKHQsIGUpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBucCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LnN0YXJ0O1xyXG4gICAgICAgICAgICBjb25zdCBuID0gZS5nZXROZWFyZXN0U2VsZWN0aW9uUmFuZ2UoaSk7XHJcbiAgICAgICAgICAgIGlmICghbikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIW4uaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbyA9IG4uc3RhcnQ7XHJcbiAgICAgICAgICAgIGlmIChpLmlzRXF1YWwobykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ldyAkaChvKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb3AodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5zdGFydDtcclxuICAgICAgICAgICAgY29uc3QgbiA9IHQuZW5kO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gZS5jaGVja0NoaWxkKGksIFwiJHRleHRcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBlLmNoZWNrQ2hpbGQobiwgXCIkdGV4dFwiKTtcclxuICAgICAgICAgICAgY29uc3QgcyA9IGUuZ2V0TGltaXRFbGVtZW50KGkpO1xyXG4gICAgICAgICAgICBjb25zdCBhID0gZS5nZXRMaW1pdEVsZW1lbnQobik7XHJcbiAgICAgICAgICAgIGlmIChzID09PSBhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobyAmJiByKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzcChpLCBuLCBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBpLm5vZGVBZnRlciAmJiBlLmlzT2JqZWN0KGkubm9kZUFmdGVyKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gdCA/IG51bGwgOiBlLmdldE5lYXJlc3RTZWxlY3Rpb25SYW5nZShpLCBcImZvcndhcmRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IG4ubm9kZUJlZm9yZSAmJiBlLmlzT2JqZWN0KG4ubm9kZUJlZm9yZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IHIgPyBudWxsIDogZS5nZXROZWFyZXN0U2VsZWN0aW9uUmFuZ2UobiwgXCJiYWNrd2FyZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gbyA/IG8uc3RhcnQgOiBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBzID8gcy5zdGFydCA6IG47XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkaChhLCBjKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGMgPSBzICYmICFzLmlzKFwicm9vdEVsZW1lbnRcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGwgPSBhICYmICFhLmlzKFwicm9vdEVsZW1lbnRcIik7XHJcbiAgICAgICAgICAgIGlmIChjIHx8IGwpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBpLm5vZGVBZnRlciAmJiBuLm5vZGVCZWZvcmUgJiYgaS5ub2RlQWZ0ZXIucGFyZW50ID09PSBuLm5vZGVCZWZvcmUucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGMgJiYgKCF0IHx8ICFjcChpLm5vZGVBZnRlciwgZSkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IGwgJiYgKCF0IHx8ICFjcChuLm5vZGVCZWZvcmUsIGUpKTtcclxuICAgICAgICAgICAgICAgIGxldCBkID0gaTtcclxuICAgICAgICAgICAgICAgIGxldCB1ID0gbjtcclxuICAgICAgICAgICAgICAgIGlmIChvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZCA9IFVoLl9jcmVhdGVCZWZvcmUocnAocywgZSkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgIHUgPSBVaC5fY3JlYXRlQWZ0ZXIocnAoYSwgZSkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3ICRoKGQsIHUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJwKHQsIGUpIHtcclxuICAgICAgICAgICAgbGV0IGkgPSB0O1xyXG4gICAgICAgICAgICBsZXQgbiA9IGk7XHJcbiAgICAgICAgICAgIHdoaWxlIChlLmlzTGltaXQobikgJiYgbi5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgIGkgPSBuO1xyXG4gICAgICAgICAgICAgICAgbiA9IG4ucGFyZW50XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNwKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgY29uc3QgbiA9IHQubm9kZUFmdGVyICYmICFpLmlzTGltaXQodC5ub2RlQWZ0ZXIpIHx8IGkuY2hlY2tDaGlsZCh0LCBcIiR0ZXh0XCIpO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gZS5ub2RlQmVmb3JlICYmICFpLmlzTGltaXQoZS5ub2RlQmVmb3JlKSB8fCBpLmNoZWNrQ2hpbGQoZSwgXCIkdGV4dFwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIG4gfHwgb1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYXAodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gW107XHJcbiAgICAgICAgICAgIGUucHVzaCh0LnNoaWZ0KCkpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IGUucG9wKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaS5pc0ludGVyc2VjdGluZyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LnN0YXJ0LmlzQWZ0ZXIoaS5zdGFydCkgPyBpLnN0YXJ0IDogdC5zdGFydDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gdC5lbmQuaXNBZnRlcihpLmVuZCkgPyB0LmVuZCA6IGkuZW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuZXcgJGgobiwgbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wdXNoKHIpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHVzaCh0KTtcclxuICAgICAgICAgICAgICAgICAgICBlLnB1c2goaSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY3AodCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdCAmJiBlLmlzT2JqZWN0KHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBscCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXJrZXJzID0gbmV3IFRtO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudCA9IG5ldyBDbSh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hID0gbmV3IHVnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ0NoYW5nZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRXcml0ZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgW1wiaW5zZXJ0Q29udGVudFwiLCBcImRlbGV0ZUNvbnRlbnRcIiwgXCJtb2RpZnlTZWxlY3Rpb25cIiwgXCJnZXRTZWxlY3RlZENvbnRlbnRcIiwgXCJhcHBseU9wZXJhdGlvblwiXS5mb3JFYWNoKHQgPT4gdGhpcy5kZWNvcmF0ZSh0KSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwiYXBwbHlPcGVyYXRpb25cIiwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZVswXTtcclxuICAgICAgICAgICAgICAgICAgICBpLl92YWxpZGF0ZSgpXHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwiaGlnaGVzdFwifSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYS5yZWdpc3RlcihcIiRyb290XCIsIHtpc0xpbWl0OiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYS5yZWdpc3RlcihcIiRibG9ja1wiLCB7YWxsb3dJbjogXCIkcm9vdFwiLCBpc0Jsb2NrOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYS5yZWdpc3RlcihcIiR0ZXh0XCIsIHthbGxvd0luOiBcIiRibG9ja1wiLCBpc0lubGluZTogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zY2hlbWEucmVnaXN0ZXIoXCIkY2xpcGJvYXJkSG9sZGVyXCIsIHthbGxvd0NvbnRlbnRPZjogXCIkcm9vdFwiLCBpc0xpbWl0OiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNjaGVtYS5leHRlbmQoXCIkdGV4dFwiLCB7YWxsb3dJbjogXCIkY2xpcGJvYXJkSG9sZGVyXCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hLnJlZ2lzdGVyKFwiJG1hcmtlclwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hLmFkZENoaWxkQ2hlY2soKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5uYW1lID09PSBcIiRtYXJrZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdHAodGhpcylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2hhbmdlKHQpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX3BlbmRpbmdDaGFuZ2VzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nQ2hhbmdlcy5wdXNoKHtiYXRjaDogbmV3IHpnLCBjYWxsYmFjazogdH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcnVuUGVuZGluZ0NoYW5nZXMoKVswXVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0KHRoaXMuX2N1cnJlbnRXcml0ZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNzW1wiYlwiXS5yZXRocm93VW5leHBlY3RlZEVycm9yKHQsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGVucXVldWVDaGFuZ2UodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IG5ldyB6Zyh0KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHQgPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gbmV3IHpnXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdDaGFuZ2VzLnB1c2goe2JhdGNoOiB0LCBjYWxsYmFjazogZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wZW5kaW5nQ2hhbmdlcy5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ydW5QZW5kaW5nQ2hhbmdlcygpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNzW1wiYlwiXS5yZXRocm93VW5leHBlY3RlZEVycm9yKHQsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFwcGx5T3BlcmF0aW9uKHQpIHtcclxuICAgICAgICAgICAgICAgIHQuX2V4ZWN1dGUoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbnNlcnRDb250ZW50KHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBObSh0aGlzLCB0LCBlLCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZWxldGVDb250ZW50KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIEJtKHRoaXMsIHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIG1vZGlmeVNlbGVjdGlvbih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBVbSh0aGlzLCB0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRTZWxlY3RlZENvbnRlbnQodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFhtKHRoaXMsIHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGhhc0NvbnRlbnQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQgaW5zdGFuY2VvZiBqaCA/ICRoLl9jcmVhdGVJbih0KSA6IHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoaS5pc0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMubWFya2Vycy5nZXRNYXJrZXJzSW50ZXJzZWN0aW5nUmFuZ2UoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5hZmZlY3RzRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHtpZ25vcmVXaGl0ZXNwYWNlczogbiA9IGZhbHNlfSA9IGUgfHwge307XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgaS5nZXRJdGVtcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQuaXMoXCJ0ZXh0UHJveHlcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQuZGF0YS5zZWFyY2goL1xcUy8pICE9PSAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5zY2hlbWEuaXNPYmplY3QodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlUG9zaXRpb25Gcm9tUGF0aCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFVoKHQsIGUsIGkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZVBvc2l0aW9uQXQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVoLl9jcmVhdGVBdCh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVQb3NpdGlvbkFmdGVyKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBVaC5fY3JlYXRlQWZ0ZXIodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlUG9zaXRpb25CZWZvcmUodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFVoLl9jcmVhdGVCZWZvcmUodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlUmFuZ2UodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyAkaCh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVSYW5nZUluKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkaC5fY3JlYXRlSW4odClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlUmFuZ2VPbih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJGguX2NyZWF0ZU9uKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZVNlbGVjdGlvbih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFhoKHQsIGUsIGkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZUJhdGNoKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgemcodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlT3BlcmF0aW9uRnJvbUpTT04odCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFJtLmZyb21KU09OKHQsIHRoaXMuZG9jdW1lbnQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50LmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcExpc3RlbmluZygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9ydW5QZW5kaW5nQ2hhbmdlcygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBbXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcIl9iZWZvcmVDaGFuZ2VzXCIpO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuX3BlbmRpbmdDaGFuZ2VzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLl9wZW5kaW5nQ2hhbmdlc1swXS5iYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50V3JpdGVyID0gbmV3IGFtKHRoaXMsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9wZW5kaW5nQ2hhbmdlc1swXS5jYWxsYmFjayh0aGlzLl9jdXJyZW50V3JpdGVyKTtcclxuICAgICAgICAgICAgICAgICAgICB0LnB1c2goaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5faGFuZGxlQ2hhbmdlQmxvY2sodGhpcy5fY3VycmVudFdyaXRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGVuZGluZ0NoYW5nZXMuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50V3JpdGVyID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiX2FmdGVyQ2hhbmdlc1wiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKGxwLCBKYyk7XHJcblxyXG4gICAgICAgIGNsYXNzIGRwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ZW5lciA9IE9iamVjdC5jcmVhdGUocWQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxpc3RlblRvKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyLmxpc3RlblRvKHQsIFwia2V5ZG93blwiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2xpc3RlbmVyLmZpcmUoXCJfa2V5ZG93bjpcIiArIE1sKGUpLCBlKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0KHQsIGUsIGkgPSB7fSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IEJsKHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGkucHJpb3JpdHk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9saXN0ZW5lci5saXN0ZW5Ubyh0aGlzLl9saXN0ZW5lciwgXCJfa2V5ZG93bjpcIiArIG4sICh0LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZShpLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zdG9wUHJvcGFnYXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5zdG9wKClcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0LnJldHVybiA9IHRydWVcclxuICAgICAgICAgICAgICAgIH0sIHtwcmlvcml0eTogb30pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHByZXNzKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhIXRoaXMuX2xpc3RlbmVyLmZpcmUoXCJfa2V5ZG93bjpcIiArIE1sKHQpLCB0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXIuc3RvcExpc3RlbmluZygpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHVwIGV4dGVuZHMgZHAge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IgPSB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldCh0LCBlLCBpID0ge30pIHtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IChlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmV4ZWN1dGUodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHN1cGVyLnNldCh0LCBlLCBpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBocCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQgPSB7fSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29udGV4dCA9IHQuY29udGV4dCB8fCBuZXcgSXMoe2xhbmd1YWdlOiB0Lmxhbmd1YWdlfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb250ZXh0Ll9hZGRFZGl0b3IodGhpcywgIXQuY29udGV4dCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gQXJyYXkuZnJvbSh0aGlzLmNvbnN0cnVjdG9yLmJ1aWx0aW5QbHVnaW5zIHx8IFtdKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29uZmlnID0gbmV3IEpyKHQsIHRoaXMuY29uc3RydWN0b3IuZGVmYXVsdENvbmZpZyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5kZWZpbmUoXCJwbHVnaW5zXCIsIGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuZGVmaW5lKHRoaXMuX2NvbnRleHQuX2dldEVkaXRvckNvbmZpZygpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGx1Z2lucyA9IG5ldyB4cyh0aGlzLCBlLCB0aGlzLl9jb250ZXh0LnBsdWdpbnMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGUgPSB0aGlzLl9jb250ZXh0LmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudCA9IHRoaXMubG9jYWxlLnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmRzID0gbmV3IGNnO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJzdGF0ZVwiLCBcImluaXRpYWxpemluZ1wiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub25jZShcInJlYWR5XCIsICgpID0+IHRoaXMuc3RhdGUgPSBcInJlYWR5XCIsIHtwcmlvcml0eTogXCJoaWdoXCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub25jZShcImRlc3Ryb3lcIiwgKCkgPT4gdGhpcy5zdGF0ZSA9IFwiZGVzdHJveWVkXCIsIHtwcmlvcml0eTogXCJoaWdoXCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaXNSZWFkT25seVwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsID0gbmV3IGxwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBWYztcclxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YSA9IG5ldyBJZyh0aGlzLm1vZGVsLCBpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdGluZyA9IG5ldyBhZyh0aGlzLm1vZGVsLCBpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdGluZy52aWV3LmRvY3VtZW50LmJpbmQoXCJpc1JlYWRPbmx5XCIpLnRvKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uID0gbmV3IE5nKFt0aGlzLmVkaXRpbmcuZG93bmNhc3REaXNwYXRjaGVyLCB0aGlzLmRhdGEuZG93bmNhc3REaXNwYXRjaGVyXSwgdGhpcy5kYXRhLnVwY2FzdERpc3BhdGNoZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uLmFkZEFsaWFzKFwiZGF0YURvd25jYXN0XCIsIHRoaXMuZGF0YS5kb3duY2FzdERpc3BhdGNoZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb252ZXJzaW9uLmFkZEFsaWFzKFwiZWRpdGluZ0Rvd25jYXN0XCIsIHRoaXMuZWRpdGluZy5kb3duY2FzdERpc3BhdGNoZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzdHJva2VzID0gbmV3IHVwKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzdHJva2VzLmxpc3RlblRvKHRoaXMuZWRpdGluZy52aWV3LmRvY3VtZW50KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0UGx1Z2lucygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmNvbmZpZztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmdldChcInBsdWdpbnNcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5nZXQoXCJyZW1vdmVQbHVnaW5zXCIpIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuZ2V0KFwiZXh0cmFQbHVnaW5zXCIpIHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucGx1Z2lucy5pbml0KGUuY29uY2F0KG4pLCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHQgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlID09IFwiaW5pdGlhbGl6aW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ID0gbmV3IFByb21pc2UodCA9PiB0aGlzLm9uY2UoXCJyZWFkeVwiLCB0KSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0LnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcImRlc3Ryb3lcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kcy5kZXN0cm95KClcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4gdGhpcy5wbHVnaW5zLmRlc3Ryb3koKSkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRpbmcuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5c3Ryb2tlcy5kZXN0cm95KClcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4gdGhpcy5fY29udGV4dC5fcmVtb3ZlRWRpdG9yKHRoaXMpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBleGVjdXRlKC4uLnQpIHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21tYW5kcy5leGVjdXRlKC4uLnQpXHJcbiAgICAgICAgICAgICAgICB9IGNhdGNoICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3NbXCJiXCJdLnJldGhyb3dVbmV4cGVjdGVkRXJyb3IodCwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMoaHAsIEpjKTtcclxuXHJcbiAgICAgICAgY2xhc3MgZnAge1xyXG4gICAgICAgICAgICBnZXRIdG1sKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoXCJcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xyXG4gICAgICAgICAgICAgICAgaS5hcHBlbmRDaGlsZCh0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpLmlubmVySFRNTFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBncCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RvbVBhcnNlciA9IG5ldyBET01QYXJzZXI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kb21Db252ZXJ0ZXIgPSBuZXcgemQodCwge2Jsb2NrRmlsbGVyTW9kZTogXCJuYnNwXCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2h0bWxXcml0ZXIgPSBuZXcgZnBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9EYXRhKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLl9kb21Db252ZXJ0ZXIudmlld1RvRG9tKHQsIGRvY3VtZW50KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9odG1sV3JpdGVyLmdldEh0bWwoZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdG9WaWV3KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLl90b0RvbSh0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9kb21Db252ZXJ0ZXIuZG9tVG9WaWV3KGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF90b0RvbSh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5fZG9tUGFyc2VyLnBhcnNlRnJvbVN0cmluZyh0LCBcInRleHQvaHRtbFwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLmJvZHkuY2hpbGROb2RlcztcclxuICAgICAgICAgICAgICAgIHdoaWxlIChuLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpLmFwcGVuZENoaWxkKG5bMF0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBtcCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yID0gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaXNFbmFibGVkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlzYWJsZVN0YWNrID0gbmV3IFNldFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3JjZURpc2FibGVkKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Rpc2FibGVTdGFjay5hZGQodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGlzYWJsZVN0YWNrLnNpemUgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub24oXCJzZXQ6aXNFbmFibGVkXCIsIHBwLCB7cHJpb3JpdHk6IFwiaGlnaGVzdFwifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjbGVhckZvcmNlRGlzYWJsZWQodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlzYWJsZVN0YWNrLmRlbGV0ZSh0KTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kaXNhYmxlU3RhY2suc2l6ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmYoXCJzZXQ6aXNFbmFibGVkXCIsIHBwKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcExpc3RlbmluZygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgaXNDb250ZXh0UGx1Z2luKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKG1wLCBKYyk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHBwKHQpIHtcclxuICAgICAgICAgICAgdC5yZXR1cm4gPSBmYWxzZTtcclxuICAgICAgICAgICAgdC5zdG9wKClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGJwIGV4dGVuZHMgeXMge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih7aWRQcm9wZXJ0eTogXCJ2aWV3VWlkXCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub24oXCJhZGRcIiwgKHQsIGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWUuaXNSZW5kZXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnJlbmRlcigpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmVsZW1lbnQgJiYgdGhpcy5fcGFyZW50RWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZShlLmVsZW1lbnQsIHRoaXMuX3BhcmVudEVsZW1lbnQuY2hpbGRyZW5baV0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwicmVtb3ZlXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuZWxlbWVudCAmJiB0aGlzLl9wYXJlbnRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZWxlbWVudC5yZW1vdmUoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGUgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGFyZW50RWxlbWVudCA9IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWFwKHQgPT4gdC5kZXN0cm95KCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldFBhcmVudCh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRFbGVtZW50ID0gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZWxlZ2F0ZSguLi50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQubGVuZ3RoIHx8ICF3cCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ1aS12aWV3Y29sbGVjdGlvbi1kZWxlZ2F0ZS13cm9uZy1ldmVudHM6IEFsbCBldmVudCBuYW1lcyBtdXN0IGJlIHN0cmluZ3MuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvOiBlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHRoaXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5kZWxlZ2F0ZShuKS50byhlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMub24oXCJhZGRcIiwgKGksIG4pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5kZWxlZ2F0ZShpKS50byhlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5vbihcInJlbW92ZVwiLCAoaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLnN0b3BEZWxlZ2F0aW5nKGksIGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB3cCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0LmV2ZXJ5KHQgPT4gdHlwZW9mIHQgPT0gXCJzdHJpbmdcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGtwID0gXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI7XHJcblxyXG4gICAgICAgIGNsYXNzIF9wIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCBPcChScCh0KSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXNSZW5kZXJlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmV2ZXJ0RGF0YSA9IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVuZGVyKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuX3JlbmRlck5vZGUoe2ludG9GcmFnbWVudDogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXNSZW5kZXJlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhcHBseSh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXZlcnREYXRhID0gcXAoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbmRlck5vZGUoe25vZGU6IHQsIGlzQXBwbHlpbmc6IHRydWUsIHJldmVydERhdGE6IHRoaXMuX3JldmVydERhdGF9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJldmVydCh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3JldmVydERhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwidWktdGVtcGxhdGUtcmV2ZXJ0LW5vdC1hcHBsaWVkOiBBdHRlbXB0aW5nIHRvIHJldmVydCBhIHRlbXBsYXRlIHdoaWNoIGhhcyBub3QgYmVlbiBhcHBsaWVkIHlldC5cIiwgW3RoaXMsIHRdKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmV2ZXJ0VGVtcGxhdGVGcm9tTm9kZSh0LCB0aGlzLl9yZXZlcnREYXRhKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIGdldFZpZXdzKCkge1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24qIHQoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiBlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoanAoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCBpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKEhwKGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQqIHQoaSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB5aWVsZCogdCh0aGlzKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgYmluZCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvKGksIG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB5cCh7ZXZlbnROYW1lT3JGdW5jdGlvbjogaSwgYXR0cmlidXRlOiBpLCBvYnNlcnZhYmxlOiB0LCBlbWl0dGVyOiBlLCBjYWxsYmFjazogbn0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgaWYoaSwgbiwgbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHhwKHtvYnNlcnZhYmxlOiB0LCBlbWl0dGVyOiBlLCBhdHRyaWJ1dGU6IGksIHZhbHVlSWZUcnVlOiBuLCBjYWxsYmFjazogb30pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZXh0ZW5kKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0Ll9pc1JlbmRlcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInRlbXBsYXRlLWV4dGVuZC1yZW5kZXI6IEF0dGVtcHRpbmcgdG8gZXh0ZW5kIGEgdGVtcGxhdGUgd2hpY2ggaGFzIGFscmVhZHkgYmVlbiByZW5kZXJlZC5cIiwgW3RoaXMsIHRdKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgRnAodCwgT3AoUnAoZSkpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVuZGVyTm9kZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZTtcclxuICAgICAgICAgICAgICAgIGlmICh0Lm5vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy50YWcgJiYgdGhpcy50ZXh0XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0aGlzLnRhZyA/IHRoaXMudGV4dCA6ICF0aGlzLnRleHRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXSgndWktdGVtcGxhdGUtd3Jvbmctc3ludGF4OiBOb2RlIGRlZmluaXRpb24gbXVzdCBoYXZlIGVpdGhlciBcInRhZ1wiIG9yIFwidGV4dFwiIHdoZW4gcmVuZGVyaW5nIGEgbmV3IE5vZGUuJywgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyVGV4dCh0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVuZGVyRWxlbWVudCh0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVuZGVyRWxlbWVudCh0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZSA9IHQubm9kZTtcclxuICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0Lm5vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlModGhpcy5ucyB8fCBrcCwgdGhpcy50YWcpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW5kZXJBdHRyaWJ1dGVzKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyRWxlbWVudENoaWxkcmVuKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0VXBMaXN0ZW5lcnModCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVuZGVyVGV4dCh0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgZSA9IHQubm9kZTtcclxuICAgICAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5yZXZlcnREYXRhLnRleHQgPSBlLnRleHRDb250ZW50XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0Lm5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKENwKHRoaXMudGV4dCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iaW5kVG9PYnNlcnZhYmxlKHtzY2hlbWE6IHRoaXMudGV4dCwgdXBkYXRlcjogUHAoZSksIGRhdGE6IHR9KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnRleHRDb250ZW50ID0gdGhpcy50ZXh0LmpvaW4oXCJcIilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZW5kZXJBdHRyaWJ1dGVzKHQpIHtcclxuICAgICAgICAgICAgICAgIGxldCBlLCBpLCBuLCBvO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0Lm5vZGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gdC5yZXZlcnREYXRhO1xyXG4gICAgICAgICAgICAgICAgZm9yIChlIGluIHRoaXMuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIG4gPSByLmdldEF0dHJpYnV0ZShlKTtcclxuICAgICAgICAgICAgICAgICAgICBpID0gdGhpcy5hdHRyaWJ1dGVzW2VdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuYXR0cmlidXRlc1tlXSA9IG5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbyA9IGN0KGlbMF0pICYmIGlbMF0ubnMgPyBpWzBdLm5zIDogbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQ3AoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IG8gPyBpWzBdLnZhbHVlIDogaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMgJiYgVXAoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGEudW5zaGlmdChuKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JpbmRUb09ic2VydmFibGUoe3NjaGVtYTogYSwgdXBkYXRlcjogU3AociwgZSwgbyksIGRhdGE6IHR9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZSA9PSBcInN0eWxlXCIgJiYgdHlwZW9mIGlbMF0gIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVuZGVyU3R5bGVBdHRyaWJ1dGUoaVswXSwgdClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocyAmJiBuICYmIFVwKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnVuc2hpZnQobilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gaS5tYXAodCA9PiB0ID8gdC52YWx1ZSB8fCB0IDogdCkucmVkdWNlKCh0LCBlKSA9PiB0LmNvbmNhdChlKSwgW10pLnJlZHVjZSh6cCwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghRHAoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuc2V0QXR0cmlidXRlTlMobywgZSwgaSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3JlbmRlclN0eWxlQXR0cmlidXRlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLm5vZGU7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG4gaW4gdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0W25dO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChDcChvKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9iaW5kVG9PYnNlcnZhYmxlKHtzY2hlbWE6IFtvXSwgdXBkYXRlcjogRXAoaSwgbiksIGRhdGE6IGV9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc3R5bGVbbl0gPSBvXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVuZGVyRWxlbWVudENoaWxkcmVuKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm5vZGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5pbnRvRnJhZ21lbnQgPyBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkgOiBlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuaXNBcHBseWluZztcclxuICAgICAgICAgICAgICAgIGxldCBvID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgciBvZiB0aGlzLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFdwKHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgci5zZXRQYXJlbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuYXBwZW5kQ2hpbGQodC5lbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChqcChyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghci5pc1JlbmRlcmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5yZW5kZXIoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5hcHBlbmRDaGlsZChyLmVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHhkKHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuYXBwZW5kQ2hpbGQocilcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQucmV2ZXJ0RGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBxcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5jaGlsZHJlbi5wdXNoKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgci5fcmVuZGVyTm9kZSh7bm9kZTogaS5jaGlsZE5vZGVzW28rK10sIGlzQXBwbHlpbmc6IHRydWUsIHJldmVydERhdGE6IG59KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5hcHBlbmRDaGlsZChyLnJlbmRlcigpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQuaW50b0ZyYWdtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5hcHBlbmRDaGlsZChpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2V0VXBMaXN0ZW5lcnModCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmV2ZW50TGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgaW4gdGhpcy5ldmVudExpc3RlbmVycykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmV2ZW50TGlzdGVuZXJzW2VdLm1hcChpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW24sIG9dID0gZS5zcGxpdChcIkBcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLmFjdGl2YXRlRG9tRXZlbnRMaXN0ZW5lcihuLCBvLCB0KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LnJldmVydERhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5yZXZlcnREYXRhLmJpbmRpbmdzLnB1c2goaSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9iaW5kVG9PYnNlcnZhYmxlKHtzY2hlbWE6IHQsIHVwZGF0ZXI6IGUsIGRhdGE6IGl9KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5yZXZlcnREYXRhO1xyXG4gICAgICAgICAgICAgICAgVHAodCwgZSwgaSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gdC5maWx0ZXIodCA9PiAhRHAodCkpLmZpbHRlcih0ID0+IHQub2JzZXJ2YWJsZSkubWFwKG4gPT4gbi5hY3RpdmF0ZUF0dHJpYnV0ZUxpc3RlbmVyKHQsIGUsIGkpKTtcclxuICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5iaW5kaW5ncy5wdXNoKG8pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZXZlcnRUZW1wbGF0ZUZyb21Ob2RlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBlLmJpbmRpbmdzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGUudGV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQudGV4dENvbnRlbnQgPSBlLnRleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgaW4gZS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGUuYXR0cmlidXRlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnJlbW92ZUF0dHJpYnV0ZShpKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKGksIG4pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlLmNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmV2ZXJ0VGVtcGxhdGVGcm9tTm9kZSh0LmNoaWxkTm9kZXNbaV0sIGUuY2hpbGRyZW5baV0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKF9wLCBkcyk7XHJcblxyXG4gICAgICAgIGNsYXNzIHZwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmFzc2lnbih0aGlzLCB0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRWYWx1ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5vYnNlcnZhYmxlW3RoaXMuYXR0cmlidXRlXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNhbGxiYWNrID8gdGhpcy5jYWxsYmFjayhlLCB0KSA6IGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWN0aXZhdGVBdHRyaWJ1dGVMaXN0ZW5lcih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gKCkgPT4gVHAodCwgZSwgaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVtaXR0ZXIubGlzdGVuVG8odGhpcy5vYnNlcnZhYmxlLCBcImNoYW5nZTpcIiArIHRoaXMuYXR0cmlidXRlLCBuKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnN0b3BMaXN0ZW5pbmcodGhpcy5vYnNlcnZhYmxlLCBcImNoYW5nZTpcIiArIHRoaXMuYXR0cmlidXRlLCBuKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyB5cCBleHRlbmRzIHZwIHtcclxuICAgICAgICAgICAgYWN0aXZhdGVEb21FdmVudExpc3RlbmVyKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSAodCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZSB8fCBpLnRhcmdldC5tYXRjaGVzKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdGhpcy5ldmVudE5hbWVPckZ1bmN0aW9uID09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ldmVudE5hbWVPckZ1bmN0aW9uKGkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm9ic2VydmFibGUuZmlyZSh0aGlzLmV2ZW50TmFtZU9yRnVuY3Rpb24sIGkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0dGVyLmxpc3RlblRvKGkubm9kZSwgdCwgbik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdHRlci5zdG9wTGlzdGVuaW5nKGkubm9kZSwgdCwgbilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgeHAgZXh0ZW5kcyB2cCB7XHJcbiAgICAgICAgICAgIGdldFZhbHVlKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBzdXBlci5nZXRWYWx1ZSh0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBEcChlKSA/IGZhbHNlIDogdGhpcy52YWx1ZUlmVHJ1ZSB8fCB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIENwKHQpIHtcclxuICAgICAgICAgICAgaWYgKCF0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdCA9IHQudmFsdWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuc29tZShDcClcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0IGluc3RhbmNlb2YgdnApIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBBcCh0LCBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0Lm1hcCh0ID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgdnApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5nZXRWYWx1ZShlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFRwKHQsIGUsIHtub2RlOiBpfSkge1xyXG4gICAgICAgICAgICBsZXQgbiA9IEFwKHQsIGkpO1xyXG4gICAgICAgICAgICBpZiAodC5sZW5ndGggPT0gMSAmJiB0WzBdIGluc3RhbmNlb2YgeHApIHtcclxuICAgICAgICAgICAgICAgIG4gPSBuWzBdXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuID0gbi5yZWR1Y2UoenAsIFwiXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKERwKG4pKSB7XHJcbiAgICAgICAgICAgICAgICBlLnJlbW92ZSgpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBlLnNldChuKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBQcCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzZXQoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQudGV4dENvbnRlbnQgPSBlXHJcbiAgICAgICAgICAgICAgICB9LCByZW1vdmUoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC50ZXh0Q29udGVudCA9IFwiXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gU3AodCwgZSwgaSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgc2V0KG4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZU5TKGksIGUsIG4pXHJcbiAgICAgICAgICAgICAgICB9LCByZW1vdmUoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmVBdHRyaWJ1dGVOUyhpLCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBFcCh0LCBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBzZXQoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc3R5bGVbZV0gPSBpXHJcbiAgICAgICAgICAgICAgICB9LCByZW1vdmUoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5zdHlsZVtlXSA9IG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gUnAodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gJHIodCwgdCA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodCAmJiAodCBpbnN0YW5jZW9mIHZwIHx8IEhwKHQpIHx8IGpwKHQpIHx8IFdwKHQpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gT3AodCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQgPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgdCA9IE5wKHQpXHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodC50ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBNcCh0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0Lm9uKSB7XHJcbiAgICAgICAgICAgICAgICB0LmV2ZW50TGlzdGVuZXJzID0gVnAodC5vbik7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdC5vblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdC50ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgSXAodC5hdHRyaWJ1dGVzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoV3AodC5jaGlsZHJlbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5wdXNoKHQuY2hpbGRyZW4pXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHQuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChIcChpKSB8fCBqcChpKSB8fCB4ZChpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHVzaChpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnB1c2gobmV3IF9wKGkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdC5jaGlsZHJlbiA9IGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSXAodCkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGUgaW4gdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRbZV0udmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0W2VdLnZhbHVlID0gW10uY29uY2F0KHRbZV0udmFsdWUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBCcCh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBWcCh0KSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZSBpbiB0KSB7XHJcbiAgICAgICAgICAgICAgICBCcCh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBOcCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7dGV4dDogW3RdfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gTXAodCkge1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodC50ZXh0KSkge1xyXG4gICAgICAgICAgICAgICAgdC50ZXh0ID0gW3QudGV4dF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQnAodCwgZSkge1xyXG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkodFtlXSkpIHtcclxuICAgICAgICAgICAgICAgIHRbZV0gPSBbdFtlXV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24genAodCwgZSkge1xyXG4gICAgICAgICAgICBpZiAoRHAoZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoRHAodCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7dH0gJHtlfWBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gTHAodCwgZSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGkgaW4gZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICB0W2ldLnB1c2goLi4uZVtpXSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdFtpXSA9IGVbaV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRnAodCwgZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5hdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQuYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuYXR0cmlidXRlcyA9IHt9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBMcCh0LmF0dHJpYnV0ZXMsIGUuYXR0cmlidXRlcylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZS5ldmVudExpc3RlbmVycykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0LmV2ZW50TGlzdGVuZXJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5ldmVudExpc3RlbmVycyA9IHt9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBMcCh0LmV2ZW50TGlzdGVuZXJzLCBlLmV2ZW50TGlzdGVuZXJzKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlLnRleHQpIHtcclxuICAgICAgICAgICAgICAgIHQudGV4dC5wdXNoKC4uLmUudGV4dClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoZS5jaGlsZHJlbiAmJiBlLmNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuY2hpbGRyZW4ubGVuZ3RoICE9IGUuY2hpbGRyZW4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcInVpLXRlbXBsYXRlLWV4dGVuZC1jaGlsZHJlbi1taXNtYXRjaDogVGhlIG51bWJlciBvZiBjaGlsZHJlbiBpbiBleHRlbmRlZCBkZWZpbml0aW9uIGRvZXMgbm90IG1hdGNoLlwiLCB0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIGUuY2hpbGRyZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBGcCh0LmNoaWxkcmVuW2krK10sIG4pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIERwKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICF0ICYmIHQgIT09IDBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGpwKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQgaW5zdGFuY2VvZiBHcFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSHAodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdCBpbnN0YW5jZW9mIF9wXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBXcCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0IGluc3RhbmNlb2YgYnBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHFwKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge2NoaWxkcmVuOiBbXSwgYmluZGluZ3M6IFtdLCBhdHRyaWJ1dGVzOiB7fX1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFVwKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQgPT0gXCJjbGFzc1wiIHx8IHQgPT0gXCJzdHlsZVwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgJHAgPSBpKDE1KTtcclxuXHJcbiAgICAgICAgY2xhc3MgR3Age1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1JlbmRlcmVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZSA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnQgPSB0ICYmIHQudDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdDb2xsZWN0aW9ucyA9IG5ldyB5cztcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VuYm91bmRDaGlsZHJlbiA9IHRoaXMuY3JlYXRlQ29sbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmlld0NvbGxlY3Rpb25zLm9uKFwiYWRkXCIsIChlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5sb2NhbGUgPSB0XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoXCJyZW5kZXJcIilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGJpbmRUZW1wbGF0ZSgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9iaW5kVGVtcGxhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmluZFRlbXBsYXRlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmluZFRlbXBsYXRlID0gX3AuYmluZCh0aGlzLCB0aGlzKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVDb2xsZWN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG5ldyBicDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdDb2xsZWN0aW9ucy5hZGQodCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZWdpc3RlckNoaWxkKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghanModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ID0gW3RdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VuYm91bmRDaGlsZHJlbi5hZGQoZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVyZWdpc3RlckNoaWxkKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghanModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ID0gW3RdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VuYm91bmRDaGlsZHJlbi5yZW1vdmUoZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0VGVtcGxhdGUodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZSA9IG5ldyBfcCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBleHRlbmRUZW1wbGF0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBfcC5leHRlbmQodGhpcy50ZW1wbGF0ZSwgdClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVuZGVyKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNSZW5kZXJlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ1aS12aWV3LXJlbmRlci1hbHJlYWR5LXJlbmRlcmVkOiBUaGlzIFZpZXcgaGFzIGFscmVhZHkgYmVlbiByZW5kZXJlZC5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRlbXBsYXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50ID0gdGhpcy50ZW1wbGF0ZS5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyQ2hpbGQodGhpcy50ZW1wbGF0ZS5nZXRWaWV3cygpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1JlbmRlcmVkID0gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3Q29sbGVjdGlvbnMubWFwKHQgPT4gdC5kZXN0cm95KCkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudGVtcGxhdGUgJiYgdGhpcy50ZW1wbGF0ZS5fcmV2ZXJ0RGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudGVtcGxhdGUucmV2ZXJ0KHRoaXMuZWxlbWVudClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMoR3AsIHFkKTtcclxuICAgICAgICB2cyhHcCwgSmMpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBLcCh0KSB7XHJcbiAgICAgICAgICAgIHdoaWxlICh0ICYmIHQudGFnTmFtZS50b0xvd2VyQ2FzZSgpICE9IFwiaHRtbFwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoSWQud2luZG93LmdldENvbXB1dGVkU3R5bGUodCkucG9zaXRpb24gIT0gXCJzdGF0aWNcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0ID0gdC5wYXJlbnRFbGVtZW50XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEpwKHtlbGVtZW50OiB0LCB0YXJnZXQ6IGUsIHBvc2l0aW9uczogaSwgbGltaXRlcjogbiwgZml0SW5WaWV3cG9ydDogb30pIHtcclxuICAgICAgICAgICAgaWYgKGd0KGUpKSB7XHJcbiAgICAgICAgICAgICAgICBlID0gZSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGd0KG4pKSB7XHJcbiAgICAgICAgICAgICAgICBuID0gbigpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgciA9IEtwKHQucGFyZW50RWxlbWVudCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHMgPSBuZXcgdmgodCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGEgPSBuZXcgdmgoZSk7XHJcbiAgICAgICAgICAgIGxldCBjO1xyXG4gICAgICAgICAgICBsZXQgbDtcclxuICAgICAgICAgICAgaWYgKCFuICYmICFvKSB7XHJcbiAgICAgICAgICAgICAgICBbbCwgY10gPSBZcChpWzBdLCBhLCBzKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG4gJiYgbmV3IHZoKG4pLmdldFZpc2libGUoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBvICYmIG5ldyB2aChJZC53aW5kb3cpO1xyXG4gICAgICAgICAgICAgICAgW2wsIGNdID0gUXAoaSwgYSwgcywgdCwgZSkgfHwgWXAoaVswXSwgYSwgcylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQge2xlZnQ6IGQsIHRvcDogdX0gPSBYcChjKTtcclxuICAgICAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBYcChuZXcgdmgocikpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IGtoKHIpO1xyXG4gICAgICAgICAgICAgICAgZCAtPSB0LmxlZnQ7XHJcbiAgICAgICAgICAgICAgICB1IC09IHQudG9wO1xyXG4gICAgICAgICAgICAgICAgZCArPSByLnNjcm9sbExlZnQ7XHJcbiAgICAgICAgICAgICAgICB1ICs9IHIuc2Nyb2xsVG9wO1xyXG4gICAgICAgICAgICAgICAgZCAtPSBlLmxlZnQ7XHJcbiAgICAgICAgICAgICAgICB1IC09IGUudG9wXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHtsZWZ0OiBkLCB0b3A6IHUsIG5hbWU6IGx9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBZcCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHtsZWZ0OiBuLCB0b3A6IG8sIG5hbWU6IHJ9ID0gdChlLCBpKTtcclxuICAgICAgICAgICAgcmV0dXJuIFtyLCBpLmNsb25lKCkubW92ZVRvKG4sIG8pXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gUXAodCwgZSwgaSwgbiwgbykge1xyXG4gICAgICAgICAgICBsZXQgciA9IDA7XHJcbiAgICAgICAgICAgIGxldCBzID0gMDtcclxuICAgICAgICAgICAgbGV0IGE7XHJcbiAgICAgICAgICAgIGxldCBjO1xyXG4gICAgICAgICAgICBjb25zdCBsID0gaS5nZXRBcmVhKCk7XHJcbiAgICAgICAgICAgIHQuc29tZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IFtkLCB1XSA9IFlwKHQsIGUsIGkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGg7XHJcbiAgICAgICAgICAgICAgICBsZXQgZjtcclxuICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IG4uZ2V0SW50ZXJzZWN0aW9uKG8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IHQuZ2V0SW50ZXJzZWN0aW9uQXJlYSh1KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaCA9IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGggPSBuLmdldEludGVyc2VjdGlvbkFyZWEodSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobykge1xyXG4gICAgICAgICAgICAgICAgICAgIGYgPSBvLmdldEludGVyc2VjdGlvbkFyZWEodSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChvICYmICFuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGYgPiBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGcoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIW8gJiYgbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoID4gcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmID4gcyAmJiBoID49IHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZygpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChmID49IHMgJiYgaCA+IHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZygpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGcoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcyA9IGY7XHJcbiAgICAgICAgICAgICAgICAgICAgciA9IGg7XHJcbiAgICAgICAgICAgICAgICAgICAgYSA9IHU7XHJcbiAgICAgICAgICAgICAgICAgICAgYyA9IGRcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaCA9PT0gbFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGEgPyBbYywgYV0gOiBudWxsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBYcCh7bGVmdDogdCwgdG9wOiBlfSkge1xyXG4gICAgICAgICAgICBjb25zdCB7c2Nyb2xsWDogaSwgc2Nyb2xsWTogbn0gPSBJZC53aW5kb3c7XHJcbiAgICAgICAgICAgIHJldHVybiB7bGVmdDogdCArIGksIHRvcDogZSArIG59XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBacCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlID0+IGUgKyB0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgdGIgPSBpKDE3KTtcclxuICAgICAgICBjb25zdCBlYiA9IFpwKFwicHhcIik7XHJcbiAgICAgICAgY29uc3QgaWIgPSBJZC5kb2N1bWVudC5ib2R5O1xyXG5cclxuICAgICAgICBjbGFzcyBuYiBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5iaW5kVGVtcGxhdGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcInRvcFwiLCAwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwibGVmdFwiLCAwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwicG9zaXRpb25cIiwgXCJhcnJvd19ud1wiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaXNWaXNpYmxlXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwid2l0aEFycm93XCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJjbGFzc1wiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudCA9IHRoaXMuY3JlYXRlQ29sbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcImRpdlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFtcImNrXCIsIFwiY2stYmFsbG9vbi1wYW5lbFwiLCBlLnRvKFwicG9zaXRpb25cIiwgdCA9PiBgY2stYmFsbG9vbi1wYW5lbF8ke3R9YCksIGUuaWYoXCJpc1Zpc2libGVcIiwgXCJjay1iYWxsb29uLXBhbmVsX3Zpc2libGVcIiksIGUuaWYoXCJ3aXRoQXJyb3dcIiwgXCJjay1iYWxsb29uLXBhbmVsX3dpdGgtYXJyb3dcIiksIGUudG8oXCJjbGFzc1wiKV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7dG9wOiBlLnRvKFwidG9wXCIsIGViKSwgbGVmdDogZS50byhcImxlZnRcIiwgZWIpfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuY29udGVudFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2hvdygpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNWaXNpYmxlID0gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBoaWRlKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1Zpc2libGUgPSBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhdHRhY2hUbyh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3coKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuYi5kZWZhdWx0UG9zaXRpb25zO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IE9iamVjdC5hc3NpZ24oe30sIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25zOiBbZS5zb3V0aEFycm93Tm9ydGgsIGUuc291dGhBcnJvd05vcnRoTWlkZGxlV2VzdCwgZS5zb3V0aEFycm93Tm9ydGhNaWRkbGVFYXN0LCBlLnNvdXRoQXJyb3dOb3J0aFdlc3QsIGUuc291dGhBcnJvd05vcnRoRWFzdCwgZS5ub3J0aEFycm93U291dGgsIGUubm9ydGhBcnJvd1NvdXRoTWlkZGxlV2VzdCwgZS5ub3J0aEFycm93U291dGhNaWRkbGVFYXN0LCBlLm5vcnRoQXJyb3dTb3V0aFdlc3QsIGUubm9ydGhBcnJvd1NvdXRoRWFzdF0sXHJcbiAgICAgICAgICAgICAgICAgICAgbGltaXRlcjogaWIsXHJcbiAgICAgICAgICAgICAgICAgICAgZml0SW5WaWV3cG9ydDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSwgdCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbmIuX2dldE9wdGltYWxQb3NpdGlvbihpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBwYXJzZUludChuLmxlZnQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHBhcnNlSW50KG4udG9wKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuLm5hbWU7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHt0b3A6IHIsIGxlZnQ6IG8sIHBvc2l0aW9uOiBzfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcGluKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5waW4oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BpbldoZW5Jc1Zpc2libGVDYWxsYmFjayA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhcnRQaW5uaW5nKHQpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RvcFBpbm5pbmcoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydFBpbm5pbmcodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMsIFwiY2hhbmdlOmlzVmlzaWJsZVwiLCB0aGlzLl9waW5XaGVuSXNWaXNpYmxlQ2FsbGJhY2spXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHVucGluKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3BpbldoZW5Jc1Zpc2libGVDYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0b3BQaW5uaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKHRoaXMsIFwiY2hhbmdlOmlzVmlzaWJsZVwiLCB0aGlzLl9waW5XaGVuSXNWaXNpYmxlQ2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3BpbldoZW5Jc1Zpc2libGVDYWxsYmFjayA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oaWRlKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3N0YXJ0UGlubmluZyh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0dGFjaFRvKHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG9iKHQudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LmxpbWl0ZXIgPyBvYih0LmxpbWl0ZXIpIDogaWI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKElkLmRvY3VtZW50LCBcInNjcm9sbFwiLCAobiwgbykgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBvLnRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gZSAmJiByLmNvbnRhaW5zKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBpICYmIHIuY29udGFpbnMoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMgfHwgYSB8fCAhZSB8fCAhaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmF0dGFjaFRvKHQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwge3VzZUNhcHR1cmU6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8oSWQud2luZG93LCBcInJlc2l6ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hdHRhY2hUbyh0KVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3N0b3BQaW5uaW5nKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKElkLmRvY3VtZW50LCBcInNjcm9sbFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcExpc3RlbmluZyhJZC53aW5kb3csIFwicmVzaXplXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9iKHQpIHtcclxuICAgICAgICAgICAgaWYgKEtyKHQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh3aCh0KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuY29tbW9uQW5jZXN0b3JDb250YWluZXJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQgPT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb2IodCgpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBuYi5hcnJvd0hvcml6b250YWxPZmZzZXQgPSAyNTtcclxuICAgICAgICBuYi5hcnJvd1ZlcnRpY2FsT2Zmc2V0ID0gMTA7XHJcbiAgICAgICAgbmIuX2dldE9wdGltYWxQb3NpdGlvbiA9IEpwO1xyXG4gICAgICAgIG5iLmRlZmF1bHRQb3NpdGlvbnMgPSB7XHJcbiAgICAgICAgICAgIG5vcnRoV2VzdEFycm93U291dGhXZXN0OiAodCwgZSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIHRvcDogcmIodCwgZSksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiB0LmxlZnQgLSBuYi5hcnJvd0hvcml6b250YWxPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFycm93X3N3XCJcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG5vcnRoV2VzdEFycm93U291dGhNaWRkbGVXZXN0OiAodCwgZSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIHRvcDogcmIodCwgZSksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiB0LmxlZnQgLSBlLndpZHRoICogLjI1IC0gbmIuYXJyb3dIb3Jpem9udGFsT2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhcnJvd19zbXdcIlxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgbm9ydGhXZXN0QXJyb3dTb3V0aDogKHQsIGUpID0+ICh7dG9wOiByYih0LCBlKSwgbGVmdDogdC5sZWZ0IC0gZS53aWR0aCAvIDIsIG5hbWU6IFwiYXJyb3dfc1wifSksXHJcbiAgICAgICAgICAgIG5vcnRoV2VzdEFycm93U291dGhNaWRkbGVFYXN0OiAodCwgZSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIHRvcDogcmIodCwgZSksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiB0LmxlZnQgLSBlLndpZHRoICogLjc1ICsgbmIuYXJyb3dIb3Jpem9udGFsT2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhcnJvd19zbWVcIlxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgbm9ydGhXZXN0QXJyb3dTb3V0aEVhc3Q6ICh0LCBlKSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgdG9wOiByYih0LCBlKSxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHQubGVmdCAtIGUud2lkdGggKyBuYi5hcnJvd0hvcml6b250YWxPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFycm93X3NlXCJcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG5vcnRoQXJyb3dTb3V0aFdlc3Q6ICh0LCBlKSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgdG9wOiByYih0LCBlKSxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHQubGVmdCArIHQud2lkdGggLyAyIC0gbmIuYXJyb3dIb3Jpem9udGFsT2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhcnJvd19zd1wiXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBub3J0aEFycm93U291dGhNaWRkbGVXZXN0OiAodCwgZSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIHRvcDogcmIodCwgZSksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiB0LmxlZnQgKyB0LndpZHRoIC8gMiAtIGUud2lkdGggKiAuMjUgLSBuYi5hcnJvd0hvcml6b250YWxPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFycm93X3Ntd1wiXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBub3J0aEFycm93U291dGg6ICh0LCBlKSA9PiAoe3RvcDogcmIodCwgZSksIGxlZnQ6IHQubGVmdCArIHQud2lkdGggLyAyIC0gZS53aWR0aCAvIDIsIG5hbWU6IFwiYXJyb3dfc1wifSksXHJcbiAgICAgICAgICAgIG5vcnRoQXJyb3dTb3V0aE1pZGRsZUVhc3Q6ICh0LCBlKSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgdG9wOiByYih0LCBlKSxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHQubGVmdCArIHQud2lkdGggLyAyIC0gZS53aWR0aCAqIC43NSArIG5iLmFycm93SG9yaXpvbnRhbE9mZnNldCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYXJyb3dfc21lXCJcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG5vcnRoQXJyb3dTb3V0aEVhc3Q6ICh0LCBlKSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgdG9wOiByYih0LCBlKSxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHQubGVmdCArIHQud2lkdGggLyAyIC0gZS53aWR0aCArIG5iLmFycm93SG9yaXpvbnRhbE9mZnNldCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYXJyb3dfc2VcIlxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgbm9ydGhFYXN0QXJyb3dTb3V0aFdlc3Q6ICh0LCBlKSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgdG9wOiByYih0LCBlKSxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHQucmlnaHQgLSBuYi5hcnJvd0hvcml6b250YWxPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFycm93X3N3XCJcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG5vcnRoRWFzdEFycm93U291dGhNaWRkbGVXZXN0OiAodCwgZSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIHRvcDogcmIodCwgZSksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiB0LnJpZ2h0IC0gZS53aWR0aCAqIC4yNSAtIG5iLmFycm93SG9yaXpvbnRhbE9mZnNldCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYXJyb3dfc213XCJcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIG5vcnRoRWFzdEFycm93U291dGg6ICh0LCBlKSA9PiAoe3RvcDogcmIodCwgZSksIGxlZnQ6IHQucmlnaHQgLSBlLndpZHRoIC8gMiwgbmFtZTogXCJhcnJvd19zXCJ9KSxcclxuICAgICAgICAgICAgbm9ydGhFYXN0QXJyb3dTb3V0aE1pZGRsZUVhc3Q6ICh0LCBlKSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgdG9wOiByYih0LCBlKSxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHQucmlnaHQgLSBlLndpZHRoICogLjc1ICsgbmIuYXJyb3dIb3Jpem9udGFsT2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhcnJvd19zbWVcIlxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgbm9ydGhFYXN0QXJyb3dTb3V0aEVhc3Q6ICh0LCBlKSA9PiAoe1xyXG4gICAgICAgICAgICAgICAgdG9wOiByYih0LCBlKSxcclxuICAgICAgICAgICAgICAgIGxlZnQ6IHQucmlnaHQgLSBlLndpZHRoICsgbmIuYXJyb3dIb3Jpem9udGFsT2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhcnJvd19zZVwiXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBzb3V0aFdlc3RBcnJvd05vcnRoV2VzdDogKHQsIGUpID0+ICh7XHJcbiAgICAgICAgICAgICAgICB0b3A6IHNiKHQsIGUpLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogdC5sZWZ0IC0gbmIuYXJyb3dIb3Jpem9udGFsT2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhcnJvd19ud1wiXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBzb3V0aFdlc3RBcnJvd05vcnRoTWlkZGxlV2VzdDogKHQsIGUpID0+ICh7XHJcbiAgICAgICAgICAgICAgICB0b3A6IHNiKHQsIGUpLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogdC5sZWZ0IC0gZS53aWR0aCAqIC4yNSAtIG5iLmFycm93SG9yaXpvbnRhbE9mZnNldCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYXJyb3dfbm13XCJcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHNvdXRoV2VzdEFycm93Tm9ydGg6ICh0LCBlKSA9PiAoe3RvcDogc2IodCwgZSksIGxlZnQ6IHQubGVmdCAtIGUud2lkdGggLyAyLCBuYW1lOiBcImFycm93X25cIn0pLFxyXG4gICAgICAgICAgICBzb3V0aFdlc3RBcnJvd05vcnRoTWlkZGxlRWFzdDogKHQsIGUpID0+ICh7XHJcbiAgICAgICAgICAgICAgICB0b3A6IHNiKHQsIGUpLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogdC5sZWZ0IC0gZS53aWR0aCAqIC43NSArIG5iLmFycm93SG9yaXpvbnRhbE9mZnNldCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYXJyb3dfbm1lXCJcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHNvdXRoV2VzdEFycm93Tm9ydGhFYXN0OiAodCwgZSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIHRvcDogc2IodCwgZSksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiB0LmxlZnQgLSBlLndpZHRoICsgbmIuYXJyb3dIb3Jpem9udGFsT2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhcnJvd19uZVwiXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBzb3V0aEFycm93Tm9ydGhXZXN0OiAodCwgZSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIHRvcDogc2IodCwgZSksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiB0LmxlZnQgKyB0LndpZHRoIC8gMiAtIG5iLmFycm93SG9yaXpvbnRhbE9mZnNldCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYXJyb3dfbndcIlxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgc291dGhBcnJvd05vcnRoTWlkZGxlV2VzdDogKHQsIGUpID0+ICh7XHJcbiAgICAgICAgICAgICAgICB0b3A6IHNiKHQsIGUpLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogdC5sZWZ0ICsgdC53aWR0aCAvIDIgLSBlLndpZHRoICogLjI1IC0gbmIuYXJyb3dIb3Jpem9udGFsT2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhcnJvd19ubXdcIlxyXG4gICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgc291dGhBcnJvd05vcnRoOiAodCwgZSkgPT4gKHt0b3A6IHNiKHQsIGUpLCBsZWZ0OiB0LmxlZnQgKyB0LndpZHRoIC8gMiAtIGUud2lkdGggLyAyLCBuYW1lOiBcImFycm93X25cIn0pLFxyXG4gICAgICAgICAgICBzb3V0aEFycm93Tm9ydGhNaWRkbGVFYXN0OiAodCwgZSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIHRvcDogc2IodCwgZSksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiB0LmxlZnQgKyB0LndpZHRoIC8gMiAtIGUud2lkdGggKiAuNzUgKyBuYi5hcnJvd0hvcml6b250YWxPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFycm93X25tZVwiXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBzb3V0aEFycm93Tm9ydGhFYXN0OiAodCwgZSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIHRvcDogc2IodCwgZSksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiB0LmxlZnQgKyB0LndpZHRoIC8gMiAtIGUud2lkdGggKyBuYi5hcnJvd0hvcml6b250YWxPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFycm93X25lXCJcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHNvdXRoRWFzdEFycm93Tm9ydGhXZXN0OiAodCwgZSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIHRvcDogc2IodCwgZSksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiB0LnJpZ2h0IC0gbmIuYXJyb3dIb3Jpem9udGFsT2Zmc2V0LFxyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhcnJvd19ud1wiXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBzb3V0aEVhc3RBcnJvd05vcnRoTWlkZGxlV2VzdDogKHQsIGUpID0+ICh7XHJcbiAgICAgICAgICAgICAgICB0b3A6IHNiKHQsIGUpLFxyXG4gICAgICAgICAgICAgICAgbGVmdDogdC5yaWdodCAtIGUud2lkdGggKiAuMjUgLSBuYi5hcnJvd0hvcml6b250YWxPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICBuYW1lOiBcImFycm93X25td1wiXHJcbiAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICBzb3V0aEVhc3RBcnJvd05vcnRoOiAodCwgZSkgPT4gKHt0b3A6IHNiKHQsIGUpLCBsZWZ0OiB0LnJpZ2h0IC0gZS53aWR0aCAvIDIsIG5hbWU6IFwiYXJyb3dfblwifSksXHJcbiAgICAgICAgICAgIHNvdXRoRWFzdEFycm93Tm9ydGhNaWRkbGVFYXN0OiAodCwgZSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIHRvcDogc2IodCwgZSksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiB0LnJpZ2h0IC0gZS53aWR0aCAqIC43NSArIG5iLmFycm93SG9yaXpvbnRhbE9mZnNldCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYXJyb3dfbm1lXCJcclxuICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgIHNvdXRoRWFzdEFycm93Tm9ydGhFYXN0OiAodCwgZSkgPT4gKHtcclxuICAgICAgICAgICAgICAgIHRvcDogc2IodCwgZSksXHJcbiAgICAgICAgICAgICAgICBsZWZ0OiB0LnJpZ2h0IC0gZS53aWR0aCArIG5iLmFycm93SG9yaXpvbnRhbE9mZnNldCxcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYXJyb3dfbmVcIlxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJiKHQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQudG9wIC0gZS5oZWlnaHQgLSBuYi5hcnJvd1ZlcnRpY2FsT2Zmc2V0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzYih0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0LmJvdHRvbSArIG5iLmFycm93VmVydGljYWxPZmZzZXRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBhYiA9IGkoMTkpO1xyXG5cclxuICAgICAgICBjbGFzcyBjYiBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuYmluZFRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJjb250ZW50XCIsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJ2aWV3Qm94XCIsIFwiMCAwIDIwIDIwXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJmaWxsQ29sb3JcIiwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwic3ZnXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbnM6IFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrXCIsIFwiY2staWNvblwiXSwgdmlld0JveDogdC50byhcInZpZXdCb3hcIil9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVhNTENvbnRlbnQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbG9yRmlsbFBhdGhzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwiY2hhbmdlOmNvbnRlbnRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVhNTENvbnRlbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb2xvckZpbGxQYXRocygpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub24oXCJjaGFuZ2U6ZmlsbENvbG9yXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb2xvckZpbGxQYXRocygpXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdXBkYXRlWE1MQ29udGVudCgpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNvbnRlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gKG5ldyBET01QYXJzZXIpLnBhcnNlRnJvbVN0cmluZyh0aGlzLmNvbnRlbnQudHJpbSgpLCBcImltYWdlL3N2Zyt4bWxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQucXVlcnlTZWxlY3RvcihcInN2Z1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5nZXRBdHRyaWJ1dGUoXCJ2aWV3Qm94XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0JveCA9IGlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lbGVtZW50LmlubmVySFRNTCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGUuY2hpbGROb2Rlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5hcHBlbmRDaGlsZChlLmNoaWxkTm9kZXNbMF0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY29sb3JGaWxsUGF0aHMoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5maWxsQ29sb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIi5jay1pY29uX19maWxsXCIpLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc3R5bGUuZmlsbCA9IHRoaXMuZmlsbENvbG9yXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGxiID0gaSgyMSk7XHJcblxyXG4gICAgICAgIGNsYXNzIGRiIGV4dGVuZHMgR3Age1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwidGV4dFwiLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwicG9zaXRpb25cIiwgXCJzXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuYmluZFRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcInNwYW5cIixcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrXCIsIFwiY2stdG9vbHRpcFwiLCBlLnRvKFwicG9zaXRpb25cIiwgdCA9PiBcImNrLXRvb2x0aXBfXCIgKyB0KSwgZS5pZihcInRleHRcIiwgXCJjay1oaWRkZW5cIiwgdCA9PiAhdC50cmltKCkpXX0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogXCJzcGFuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtjbGFzczogW1wiY2tcIiwgXCJjay10b29sdGlwX190ZXh0XCJdfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFt7dGV4dDogZS50byhcInRleHRcIil9XVxyXG4gICAgICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgdWIgPSBpKDIzKTtcclxuXHJcbiAgICAgICAgY2xhc3MgaGIgZXh0ZW5kcyBHcCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuYmluZFRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGlzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImNsYXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJsYWJlbFN0eWxlXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJpY29uXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJpc0VuYWJsZWRcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImlzT25cIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJpc1Zpc2libGVcIiwgdHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImlzVG9nZ2xlYWJsZVwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImtleXN0cm9rZVwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwibGFiZWxcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcInRhYmluZGV4XCIsIC0xKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwidG9vbHRpcFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwidG9vbHRpcFBvc2l0aW9uXCIsIFwic1wiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwidHlwZVwiLCBcImJ1dHRvblwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwid2l0aFRleHRcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJ3aXRoS2V5c3Ryb2tlXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSB0aGlzLmNyZWF0ZUNvbGxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudG9vbHRpcFZpZXcgPSB0aGlzLl9jcmVhdGVUb29sdGlwVmlldygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbFZpZXcgPSB0aGlzLl9jcmVhdGVMYWJlbFZpZXcoaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmljb25WaWV3ID0gbmV3IGNiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pY29uVmlldy5leHRlbmRUZW1wbGF0ZSh7YXR0cmlidXRlczoge2NsYXNzOiBcImNrLWJ1dHRvbl9faWNvblwifX0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzdHJva2VWaWV3ID0gdGhpcy5fY3JlYXRlS2V5c3Ryb2tlVmlldygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iaW5kKFwiX3Rvb2x0aXBTdHJpbmdcIikudG8odGhpcywgXCJ0b29sdGlwXCIsIHRoaXMsIFwibGFiZWxcIiwgdGhpcywgXCJrZXlzdHJva2VcIiwgdGhpcy5fZ2V0VG9vbHRpcFN0cmluZy5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGVtcGxhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZzogXCJidXR0b25cIixcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBbXCJja1wiLCBcImNrLWJ1dHRvblwiLCBlLnRvKFwiY2xhc3NcIiksIGUuaWYoXCJpc0VuYWJsZWRcIiwgXCJjay1kaXNhYmxlZFwiLCB0ID0+ICF0KSwgZS5pZihcImlzVmlzaWJsZVwiLCBcImNrLWhpZGRlblwiLCB0ID0+ICF0KSwgZS50byhcImlzT25cIiwgdCA9PiB0ID8gXCJjay1vblwiIDogXCJjay1vZmZcIiksIGUuaWYoXCJ3aXRoVGV4dFwiLCBcImNrLWJ1dHRvbl93aXRoLXRleHRcIiksIGUuaWYoXCJ3aXRoS2V5c3Ryb2tlXCIsIFwiY2stYnV0dG9uX3dpdGgta2V5c3Ryb2tlXCIpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogZS50byhcInR5cGVcIiwgdCA9PiB0ID8gdCA6IFwiYnV0dG9uXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWJpbmRleDogZS50byhcInRhYmluZGV4XCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBgY2stZWRpdG9yX19hcmlhLWxhYmVsXyR7aX1gLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtZGlzYWJsZWRcIjogZS5pZihcImlzRW5hYmxlZFwiLCB0cnVlLCB0ID0+ICF0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmlhLXByZXNzZWRcIjogZS50byhcImlzT25cIiwgdCA9PiB0aGlzLmlzVG9nZ2xlYWJsZSA/IFN0cmluZyh0KSA6IGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuY2hpbGRyZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW91c2Vkb3duOiBlLnRvKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBjbGljazogZS50byh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcImV4ZWN1dGVcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVuZGVyKCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIucmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pY29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pY29uVmlldy5iaW5kKFwiY29udGVudFwiKS50byh0aGlzLCBcImljb25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5hZGQodGhpcy5pY29uVmlldylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uYWRkKHRoaXMudG9vbHRpcFZpZXcpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5hZGQodGhpcy5sYWJlbFZpZXcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMud2l0aEtleXN0cm9rZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uYWRkKHRoaXMua2V5c3Ryb2tlVmlldylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9jdXMoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQuZm9jdXMoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlVG9vbHRpcFZpZXcoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbmV3IGRiO1xyXG4gICAgICAgICAgICAgICAgdC5iaW5kKFwidGV4dFwiKS50byh0aGlzLCBcIl90b29sdGlwU3RyaW5nXCIpO1xyXG4gICAgICAgICAgICAgICAgdC5iaW5kKFwicG9zaXRpb25cIikudG8odGhpcywgXCJ0b29sdGlwUG9zaXRpb25cIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlTGFiZWxWaWV3KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgR3A7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5iaW5kVGVtcGxhdGU7XHJcbiAgICAgICAgICAgICAgICBlLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwic3BhblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFtcImNrXCIsIFwiY2stYnV0dG9uX19sYWJlbFwiXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IGkudG8oXCJsYWJlbFN0eWxlXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogYGNrLWVkaXRvcl9fYXJpYS1sYWJlbF8ke3R9YFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFt7dGV4dDogdGhpcy5iaW5kVGVtcGxhdGUudG8oXCJsYWJlbFwiKX1dXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVLZXlzdHJva2VWaWV3KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG5ldyBHcDtcclxuICAgICAgICAgICAgICAgIHQuc2V0VGVtcGxhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZzogXCJzcGFuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge2NsYXNzOiBbXCJja1wiLCBcImNrLWJ1dHRvbl9fa2V5c3Ryb2tlXCJdfSxcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW3t0ZXh0OiB0aGlzLmJpbmRUZW1wbGF0ZS50byhcImtleXN0cm9rZVwiLCB0ID0+IHpsKHQpKX1dXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRUb29sdGlwU3RyaW5nKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiB0ID09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHpsKGkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBGdW5jdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQoZSwgaSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtlfSR7aSA/IGAgKCR7aX0pYCA6IFwiXCJ9YFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgZmIge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaXNGb2N1c2VkXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiZm9jdXNlZEVsZW1lbnRcIiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50cyA9IG5ldyBTZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9uZXh0RXZlbnRMb29wVGltZW91dCA9IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWRkKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9lbGVtZW50cy5oYXModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiZm9jdXNUcmFja2VyLWFkZC1lbGVtZW50LWFscmVhZHktZXhpc3RcIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odCwgXCJmb2N1c1wiLCAoKSA9PiB0aGlzLl9mb2N1cyh0KSwge3VzZUNhcHR1cmU6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odCwgXCJibHVyXCIsICgpID0+IHRoaXMuX2JsdXIoKSwge3VzZUNhcHR1cmU6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRzLmFkZCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW1vdmUodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQgPT09IHRoaXMuZm9jdXNlZEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ibHVyKHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZWxlbWVudHMuaGFzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VsZW1lbnRzLmRlbGV0ZSh0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2ZvY3VzKHQpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9uZXh0RXZlbnRMb29wVGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzZWRFbGVtZW50ID0gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNGb2N1c2VkID0gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfYmx1cigpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9uZXh0RXZlbnRMb29wVGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9uZXh0RXZlbnRMb29wVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNlZEVsZW1lbnQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNGb2N1c2VkID0gZmFsc2VcclxuICAgICAgICAgICAgICAgIH0sIDApXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKGZiLCBxZCk7XHJcbiAgICAgICAgdnMoZmIsIEpjKTtcclxuICAgICAgICB2YXIgZ2IgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMTEuNDYzIDUuMTg3YS44ODguODg4IDAgMSAxIDEuMjU0IDEuMjU1TDkuMTYgMTBsMy41NTcgMy41NTdhLjg4OC44ODggMCAxIDEtMS4yNTQgMS4yNTVMNy4yNiAxMC42MWEuODg4Ljg4OCAwIDAgMSAuMTYtMS4zODJsNC4wNDMtNC4wNDJ6XCIvPjwvc3ZnPic7XHJcbiAgICAgICAgdmFyIG1iID0gJzxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTguNTM3IDE0LjgxM2EuODg4Ljg4OCAwIDEgMS0xLjI1NC0xLjI1NUwxMC44NCAxMCA3LjI4MyA2LjQ0MmEuODg4Ljg4OCAwIDEgMSAxLjI1NC0xLjI1NUwxMi43NCA5LjM5YS44ODguODg4IDAgMCAxLS4xNiAxLjM4MmwtNC4wNDMgNC4wNDJ6XCIvPjwvc3ZnPic7XHJcbiAgICAgICAgdmFyIHBiID0gaSgyNSk7XHJcbiAgICAgICAgdmFyIGJiID0gaSgyNyk7XHJcbiAgICAgICAgY29uc3Qgd2IgPSBacChcInB4XCIpO1xyXG5cclxuICAgICAgICBjbGFzcyBrYiBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiQ29udGV4dHVhbEJhbGxvb25cIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb25MaW1pdGVyID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5lZGl0aW5nLnZpZXc7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuc2VsZWN0aW9uLmVkaXRhYmxlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5kb21Db252ZXJ0ZXIubWFwVmlld1RvRG9tKGkucm9vdClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcInZpc2libGVWaWV3XCIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3ID0gbmV3IG5iKHQubG9jYWxlKTtcclxuICAgICAgICAgICAgICAgIHQudWkudmlldy5ib2R5LmFkZCh0aGlzLnZpZXcpO1xyXG4gICAgICAgICAgICAgICAgdC51aS5mb2N1c1RyYWNrZXIuYWRkKHRoaXMudmlldy5lbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdUb1N0YWNrID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lkVG9TdGFjayA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcIl9udW1iZXJPZlN0YWNrc1wiLCAwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiX3NpbmdsZVZpZXdNb2RlXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0b3JWaWV3ID0gdGhpcy5fY3JlYXRlUm90YXRvclZpZXcoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Zha2VQYW5lbHNWaWV3ID0gdGhpcy5fY3JlYXRlRmFrZVBhbmVsc1ZpZXcoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBoYXNWaWV3KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuX3ZpZXdUb1N0YWNrLmtleXMoKSkuaW5jbHVkZXModClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWRkKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmhhc1ZpZXcodC52aWV3KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJjb250ZXh0dWFsYmFsbG9vbi1hZGQtdmlldy1leGlzdDogQ2Fubm90IGFkZCBjb25maWd1cmF0aW9uIG9mIHRoZSBzYW1lIHZpZXcgdHdpY2UuXCIsIFt0aGlzLCB0XSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnN0YWNrSWQgfHwgXCJtYWluXCI7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lkVG9TdGFjay5oYXMoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9pZFRvU3RhY2suc2V0KGUsIG5ldyBNYXAoW1t0LnZpZXcsIHRdXSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdUb1N0YWNrLnNldCh0LnZpZXcsIHRoaXMuX2lkVG9TdGFjay5nZXQoZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX251bWJlck9mU3RhY2tzID0gdGhpcy5faWRUb1N0YWNrLnNpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl92aXNpYmxlU3RhY2sgfHwgdC5zaW5nbGVWaWV3TW9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dTdGFjayhlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9pZFRvU3RhY2suZ2V0KGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuc2luZ2xlVmlld01vZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3dTdGFjayhlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaS5zZXQodC52aWV3LCB0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ZpZXdUb1N0YWNrLnNldCh0LnZpZXcsIGkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPT09IHRoaXMuX3Zpc2libGVTdGFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nob3dWaWV3KHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbW92ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaGFzVmlldyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJjb250ZXh0dWFsYmFsbG9vbi1yZW1vdmUtdmlldy1ub3QtZXhpc3Q6IENhbm5vdCByZW1vdmUgdGhlIGNvbmZpZ3VyYXRpb24gb2YgYSBub24tZXhpc3RlbnQgdmlldy5cIiwgW3RoaXMsIHRdKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuX3ZpZXdUb1N0YWNrLmdldCh0KTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zaW5nbGVWaWV3TW9kZSAmJiB0aGlzLnZpc2libGVWaWV3ID09PSB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2luZ2xlVmlld01vZGUgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmlzaWJsZVZpZXcgPT09IHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5zaXplID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pZFRvU3RhY2suc2l6ZSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nob3dOZXh0U3RhY2soKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3LmhpZGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudmlzaWJsZVZpZXcgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcm90YXRvclZpZXcuaGlkZVZpZXcoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hvd1ZpZXcoQXJyYXkuZnJvbShlLnZhbHVlcygpKVtlLnNpemUgLSAyXSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5zaXplID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faWRUb1N0YWNrLmRlbGV0ZSh0aGlzLl9nZXRTdGFja0lkKGUpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9udW1iZXJPZlN0YWNrcyA9IHRoaXMuX2lkVG9TdGFjay5zaXplXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuZGVsZXRlKHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl92aWV3VG9TdGFjay5kZWxldGUodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdXBkYXRlUG9zaXRpb24odCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92aXNpYmxlU3RhY2suZ2V0KHRoaXMudmlzaWJsZVZpZXcpLnBvc2l0aW9uID0gdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3LnBpbih0aGlzLl9nZXRCYWxsb29uUG9zaXRpb24oKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mYWtlUGFuZWxzVmlldy51cGRhdGVQb3NpdGlvbigpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNob3dTdGFjayh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpc2libGVTdGFjayA9IHQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5faWRUb1N0YWNrLmdldCh0KTtcclxuICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJjb250ZXh0dWFsYmFsbG9vbi1zaG93c3RhY2stc3RhY2stbm90LWV4aXN0OiBDYW5ub3Qgc2hvdyBhIHN0YWNrIHRoYXQgZG9lcyBub3QgZXhpc3QuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdmlzaWJsZVN0YWNrID09PSBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG93VmlldyhBcnJheS5mcm9tKGUudmFsdWVzKCkpLnBvcCgpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgX3Zpc2libGVTdGFjaygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl92aWV3VG9TdGFjay5nZXQodGhpcy52aXNpYmxlVmlldylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldFN0YWNrSWQodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IEFycmF5LmZyb20odGhpcy5faWRUb1N0YWNrLmVudHJpZXMoKSkuZmluZChlID0+IGVbMV0gPT09IHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVbMF1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3Nob3dOZXh0U3RhY2soKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gQXJyYXkuZnJvbSh0aGlzLl9pZFRvU3RhY2sudmFsdWVzKCkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGUgPSB0LmluZGV4T2YodGhpcy5fdmlzaWJsZVN0YWNrKSArIDE7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRbZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zaG93U3RhY2sodGhpcy5fZ2V0U3RhY2tJZCh0W2VdKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3Nob3dQcmV2U3RhY2soKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gQXJyYXkuZnJvbSh0aGlzLl9pZFRvU3RhY2sudmFsdWVzKCkpO1xyXG4gICAgICAgICAgICAgICAgbGV0IGUgPSB0LmluZGV4T2YodGhpcy5fdmlzaWJsZVN0YWNrKSAtIDE7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRbZV0pIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gdC5sZW5ndGggLSAxXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNob3dTdGFjayh0aGlzLl9nZXRTdGFja0lkKHRbZV0pKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlUm90YXRvclZpZXcoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbmV3IF9iKHRoaXMuZWRpdG9yLmxvY2FsZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lZGl0b3IubG9jYWxlLnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuY29udGVudC5hZGQodCk7XHJcbiAgICAgICAgICAgICAgICB0LmJpbmQoXCJpc05hdmlnYXRpb25WaXNpYmxlXCIpLnRvKHRoaXMsIFwiX251bWJlck9mU3RhY2tzXCIsIHRoaXMsIFwiX3NpbmdsZVZpZXdNb2RlXCIsICh0LCBlKSA9PiAhZSAmJiB0ID4gMSk7XHJcbiAgICAgICAgICAgICAgICB0Lm9uKFwiY2hhbmdlOmlzTmF2aWdhdGlvblZpc2libGVcIiwgKCkgPT4gdGhpcy51cGRhdGVQb3NpdGlvbigpLCB7cHJpb3JpdHk6IFwibG93XCJ9KTtcclxuICAgICAgICAgICAgICAgIHQuYmluZChcImNvdW50ZXJcIikudG8odGhpcywgXCJ2aXNpYmxlVmlld1wiLCB0aGlzLCBcIl9udW1iZXJPZlN0YWNrc1wiLCAodCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpIDwgMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gQXJyYXkuZnJvbSh0aGlzLl9pZFRvU3RhY2sudmFsdWVzKCkpLmluZGV4T2YodGhpcy5fdmlzaWJsZVN0YWNrKSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUoXCJsdVwiLCBbbiwgaV0pXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQuYnV0dG9uTmV4dFZpZXcub24oXCJleGVjdXRlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5mb2N1c1RyYWNrZXIuaXNGb2N1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmVkaXRpbmcudmlldy5mb2N1cygpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nob3dOZXh0U3RhY2soKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0LmJ1dHRvblByZXZWaWV3Lm9uKFwiZXhlY3V0ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQuZm9jdXNUcmFja2VyLmlzRm9jdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaG93UHJldlN0YWNrKClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUZha2VQYW5lbHNWaWV3KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG5ldyB2Yih0aGlzLmVkaXRvci5sb2NhbGUsIHRoaXMudmlldyk7XHJcbiAgICAgICAgICAgICAgICB0LmJpbmQoXCJudW1iZXJPZlBhbmVsc1wiKS50byh0aGlzLCBcIl9udW1iZXJPZlN0YWNrc1wiLCB0aGlzLCBcIl9zaW5nbGVWaWV3TW9kZVwiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSAhZSAmJiB0ID49IDI7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkgPyBNYXRoLm1pbih0IC0gMSwgMikgOiAwXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQubGlzdGVuVG8odGhpcy52aWV3LCBcImNoYW5nZTp0b3BcIiwgKCkgPT4gdC51cGRhdGVQb3NpdGlvbigpKTtcclxuICAgICAgICAgICAgICAgIHQubGlzdGVuVG8odGhpcy52aWV3LCBcImNoYW5nZTpsZWZ0XCIsICgpID0+IHQudXBkYXRlUG9zaXRpb24oKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci51aS52aWV3LmJvZHkuYWRkKHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3Nob3dWaWV3KHt2aWV3OiB0LCBiYWxsb29uQ2xhc3NOYW1lOiBlID0gXCJcIiwgd2l0aEFycm93OiBpID0gdHJ1ZSwgc2luZ2xlVmlld01vZGU6IG4gPSBmYWxzZX0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5jbGFzcyA9IGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcud2l0aEFycm93ID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JvdGF0b3JWaWV3LnNob3dWaWV3KHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aXNpYmxlVmlldyA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcucGluKHRoaXMuX2dldEJhbGxvb25Qb3NpdGlvbigpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Zha2VQYW5lbHNWaWV3LnVwZGF0ZVBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NpbmdsZVZpZXdNb2RlID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0QmFsbG9vblBvc2l0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHQgPSBBcnJheS5mcm9tKHRoaXMuX3Zpc2libGVTdGFjay52YWx1ZXMoKSkucG9wKCkucG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICBpZiAodCAmJiAhdC5saW1pdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IE9iamVjdC5hc3NpZ24oe30sIHQsIHtsaW1pdGVyOiB0aGlzLnBvc2l0aW9uTGltaXRlcn0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBfYiBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuYmluZFRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJpc05hdmlnYXRpb25WaXNpYmxlXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIgPSBuZXcgZmI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvblByZXZWaWV3ID0gdGhpcy5fY3JlYXRlQnV0dG9uVmlldyhlKFwibHZcIiksIGdiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYnV0dG9uTmV4dFZpZXcgPSB0aGlzLl9jcmVhdGVCdXR0b25WaWV3KGUoXCJsd1wiKSwgbWIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50ID0gdGhpcy5jcmVhdGVDb2xsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge2NsYXNzOiBbXCJja1wiLCBcImNrLWJhbGxvb24tcm90YXRvclwiXSwgXCJ6LWluZGV4XCI6IFwiLTFcIn0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogXCJkaXZcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge2NsYXNzOiBbXCJjay1iYWxsb29uLXJvdGF0b3JfX25hdmlnYXRpb25cIiwgaS50byhcImlzTmF2aWdhdGlvblZpc2libGVcIiwgdCA9PiB0ID8gXCJcIiA6IFwiY2staGlkZGVuXCIpXX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbdGhpcy5idXR0b25QcmV2Vmlldywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiBcInNwYW5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtjbGFzczogW1wiY2stYmFsbG9vbi1yb3RhdG9yX19jb3VudGVyXCJdfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbe3RleHQ6IGkudG8oXCJjb3VudGVyXCIpfV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgdGhpcy5idXR0b25OZXh0Vmlld11cclxuICAgICAgICAgICAgICAgICAgICB9LCB7dGFnOiBcImRpdlwiLCBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFwiY2stYmFsbG9vbi1yb3RhdG9yX19jb250ZW50XCJ9LCBjaGlsZHJlbjogdGhpcy5jb250ZW50fV1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbmRlcigpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyLnJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIuYWRkKHRoaXMuZWxlbWVudClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2hvd1ZpZXcodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oaWRlVmlldygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZW50LmFkZCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBoaWRlVmlldygpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5jbGVhcigpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVCdXR0b25WaWV3KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgaGIodGhpcy5sb2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgaS5zZXQoe2xhYmVsOiB0LCBpY29uOiBlLCB0b29sdGlwOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyB2YiBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5iaW5kVGVtcGxhdGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcInRvcFwiLCAwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwibGVmdFwiLCAwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaGVpZ2h0XCIsIDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJ3aWR0aFwiLCAwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwibnVtYmVyT2ZQYW5lbHNcIiwgMCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRlbnQgPSB0aGlzLmNyZWF0ZUNvbGxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhbGxvb25QYW5lbFZpZXcgPSBlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcImRpdlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFtcImNrLWZha2UtcGFuZWxcIiwgaS50byhcIm51bWJlck9mUGFuZWxzXCIsIHQgPT4gdCA/IFwiXCIgOiBcImNrLWhpZGRlblwiKV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3A6IGkudG8oXCJ0b3BcIiwgd2IpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGVmdDogaS50byhcImxlZnRcIiwgd2IpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lkdGg6IGkudG8oXCJ3aWR0aFwiLCB3YiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IGkudG8oXCJoZWlnaHRcIiwgd2IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmNvbnRlbnRcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbihcImNoYW5nZTpudW1iZXJPZlBhbmVsc1wiLCAodCwgZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID4gbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRQYW5lbHMoaSAtIG4pXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlUGFuZWxzKG4gLSBpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnVwZGF0ZVBvc2l0aW9uKClcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9hZGRQYW5lbHModCkge1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHQtLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBuZXcgR3A7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5zZXRUZW1wbGF0ZSh7dGFnOiBcImRpdlwifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250ZW50LmFkZCh0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZ2lzdGVyQ2hpbGQodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3JlbW92ZVBhbmVscyh0KSB7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAodC0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuY29udGVudC5sYXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGVudC5yZW1vdmUodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZXJlZ2lzdGVyQ2hpbGQodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5kZXN0cm95KClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdXBkYXRlUG9zaXRpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5udW1iZXJPZlBhbmVscykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHt0b3A6IHQsIGxlZnQ6IGV9ID0gdGhpcy5fYmFsbG9vblBhbmVsVmlldztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7d2lkdGg6IGksIGhlaWdodDogbn0gPSBuZXcgdmgodGhpcy5fYmFsbG9vblBhbmVsVmlldy5lbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKHRoaXMsIHt0b3A6IHQsIGxlZnQ6IGUsIHdpZHRoOiBpLCBoZWlnaHQ6IG59KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyB5YiB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24odGhpcywgdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5hY3Rpb25zICYmIHQua2V5c3Ryb2tlSGFuZGxlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBpbiB0LmFjdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSB0LmFjdGlvbnNbZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgaSA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gW2ldXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQua2V5c3Ryb2tlSGFuZGxlci5zZXQobiwgKHQsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2VdKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgZmlyc3QoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb2N1c2FibGVzLmZpbmQoeGIpIHx8IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGxhc3QoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5mb2N1c2FibGVzLmZpbHRlcih4Yikuc2xpY2UoLTEpWzBdIHx8IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IG5leHQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Rm9jdXNhYmxlSXRlbSgxKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgcHJldmlvdXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZ2V0Rm9jdXNhYmxlSXRlbSgtMSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGN1cnJlbnQoKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5mb2N1c1RyYWNrZXIuZm9jdXNlZEVsZW1lbnQgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c2FibGVzLmZpbmQoKGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5lbGVtZW50ID09PSB0aGlzLmZvY3VzVHJhY2tlci5mb2N1c2VkRWxlbWVudDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gaVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb2N1c0ZpcnN0KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXModGhpcy5maXJzdClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9jdXNMYXN0KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXModGhpcy5sYXN0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb2N1c05leHQoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1cyh0aGlzLm5leHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvY3VzUHJldmlvdXMoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1cyh0aGlzLnByZXZpb3VzKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZm9jdXModCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LmZvY3VzKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldEZvY3VzYWJsZUl0ZW0odCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuY3VycmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmZvY3VzYWJsZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbdCA9PT0gMSA/IFwiZmlyc3RcIiA6IFwibGFzdFwiXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IG4gPSAoZSArIGkgKyB0KSAlIGk7XHJcbiAgICAgICAgICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZm9jdXNhYmxlcy5nZXQobik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHhiKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG4gPSAobiArIGkgKyB0KSAlIGlcclxuICAgICAgICAgICAgICAgIH0gd2hpbGUgKG4gIT09IGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geGIodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gISEodC5mb2N1cyAmJiBJZC53aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSh0LmVsZW1lbnQpLmRpc3BsYXkgIT0gXCJub25lXCIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBDYiBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKHt0YWc6IFwic3BhblwiLCBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrXCIsIFwiY2stdG9vbGJhcl9fc2VwYXJhdG9yXCJdfX0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IEFiID0gMTAwO1xyXG5cclxuICAgICAgICBjbGFzcyBUYiB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICghVGIuX29ic2VydmVySW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBUYi5fY3JlYXRlT2JzZXJ2ZXIoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudCA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jYWxsYmFjayA9IGU7XHJcbiAgICAgICAgICAgICAgICBUYi5fYWRkRWxlbWVudENhbGxiYWNrKHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgVGIuX29ic2VydmVySW5zdGFuY2Uub2JzZXJ2ZSh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgVGIuX2RlbGV0ZUVsZW1lbnRDYWxsYmFjayh0aGlzLl9lbGVtZW50LCB0aGlzLl9jYWxsYmFjaylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIF9hZGRFbGVtZW50Q2FsbGJhY2sodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFUYi5fZWxlbWVudENhbGxiYWNrcykge1xyXG4gICAgICAgICAgICAgICAgICAgIFRiLl9lbGVtZW50Q2FsbGJhY2tzID0gbmV3IE1hcFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSBUYi5fZWxlbWVudENhbGxiYWNrcy5nZXQodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpID0gbmV3IFNldDtcclxuICAgICAgICAgICAgICAgICAgICBUYi5fZWxlbWVudENhbGxiYWNrcy5zZXQodCwgaSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkuYWRkKGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBfZGVsZXRlRWxlbWVudENhbGxiYWNrKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBUYi5fZ2V0RWxlbWVudENhbGxiYWNrcyh0KTtcclxuICAgICAgICAgICAgICAgIGlmIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5kZWxldGUoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpLnNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVGIuX2VsZW1lbnRDYWxsYmFja3MuZGVsZXRlKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBUYi5fb2JzZXJ2ZXJJbnN0YW5jZS51bm9ic2VydmUodClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoVGIuX2VsZW1lbnRDYWxsYmFja3MgJiYgIVRiLl9lbGVtZW50Q2FsbGJhY2tzLnNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICBUYi5fb2JzZXJ2ZXJJbnN0YW5jZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgVGIuX2VsZW1lbnRDYWxsYmFja3MgPSBudWxsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBfZ2V0RWxlbWVudENhbGxiYWNrcyh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIVRiLl9lbGVtZW50Q2FsbGJhY2tzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBUYi5fZWxlbWVudENhbGxiYWNrcy5nZXQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIF9jcmVhdGVPYnNlcnZlcigpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0O1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBJZC53aW5kb3cuUmVzaXplT2JzZXJ2ZXIgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHQgPSBJZC53aW5kb3cuUmVzaXplT2JzZXJ2ZXJcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IFBiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBUYi5fb2JzZXJ2ZXJJbnN0YW5jZSA9IG5ldyB0KHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBUYi5fZ2V0RWxlbWVudENhbGxiYWNrcyhlLnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkoZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFRiLl9vYnNlcnZlckluc3RhbmNlID0gbnVsbDtcclxuICAgICAgICBUYi5fZWxlbWVudENhbGxiYWNrcyA9IG51bGw7XHJcblxyXG4gICAgICAgIGNsYXNzIFBiIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2sgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudHMgPSBuZXcgU2V0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNSZWN0cyA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wZXJpb2RpY0NoZWNrVGltZW91dCA9IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb2JzZXJ2ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGVtZW50cy5hZGQodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGVja0VsZW1lbnRSZWN0c0FuZEV4ZWN1dGVDYWxsYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2VsZW1lbnRzLnNpemUgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdGFydFBlcmlvZGljQ2hlY2soKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB1bm9ic2VydmUodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZWxlbWVudHMuZGVsZXRlKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNSZWN0cy5kZWxldGUodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2VsZW1lbnRzLnNpemUpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zdG9wUGVyaW9kaWNDaGVjaygpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9zdGFydFBlcmlvZGljQ2hlY2soKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrRWxlbWVudFJlY3RzQW5kRXhlY3V0ZUNhbGxiYWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGVyaW9kaWNDaGVja1RpbWVvdXQgPSBzZXRUaW1lb3V0KHQsIEFiKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8oSWQud2luZG93LCBcInJlc2l6ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hlY2tFbGVtZW50UmVjdHNBbmRFeGVjdXRlQ2FsbGJhY2soKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9wZXJpb2RpY0NoZWNrVGltZW91dCA9IHNldFRpbWVvdXQodCwgQWIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9zdG9wUGVyaW9kaWNDaGVjaygpIHtcclxuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLl9wZXJpb2RpY0NoZWNrVGltZW91dCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZpb3VzUmVjdHMuY2xlYXIoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY2hlY2tFbGVtZW50UmVjdHNBbmRFeGVjdXRlQ2FsbGJhY2soKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdGhpcy5fZWxlbWVudHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faGFzUmVjdENoYW5nZWQoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5wdXNoKHt0YXJnZXQ6IGUsIGNvbnRlbnRSZWN0OiB0aGlzLl9wcmV2aW91c1JlY3RzLmdldChlKX0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2FsbGJhY2sodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2hhc1JlY3RDaGFuZ2VkKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdC5vd25lckRvY3VtZW50LmJvZHkuY29udGFpbnModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgdmgodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5fcHJldmlvdXNSZWN0cy5nZXQodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gIWkgfHwgIWkuaXNFcXVhbChlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZpb3VzUmVjdHMuc2V0KHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMoUGIsIHFkKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gU2IodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdC5iaW5kVGVtcGxhdGUudG8oZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS50YXJnZXQgPT09IHQuZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgRWIgZXh0ZW5kcyBHcCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuYmluZFRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJpc1Zpc2libGVcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJwb3NpdGlvblwiLCBcInNlXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMuY3JlYXRlQ29sbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcImRpdlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtjbGFzczogW1wiY2tcIiwgXCJjay1yZXNldFwiLCBcImNrLWRyb3Bkb3duX19wYW5lbFwiLCBlLnRvKFwicG9zaXRpb25cIiwgdCA9PiBgY2stZHJvcGRvd25fX3BhbmVsXyR7dH1gKSwgZS5pZihcImlzVmlzaWJsZVwiLCBcImNrLWRyb3Bkb3duX19wYW5lbC12aXNpYmxlXCIpXX0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuY2hpbGRyZW4sXHJcbiAgICAgICAgICAgICAgICAgICAgb246IHtzZWxlY3RzdGFydDogZS50byh0ID0+IHQucHJldmVudERlZmF1bHQoKSl9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb2N1cygpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmNoaWxkcmVuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uZmlyc3QuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb2N1c0xhc3QoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGlsZHJlbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5jaGlsZHJlbi5sYXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdC5mb2N1c0xhc3QgPT09IFwiZnVuY3Rpb25cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmZvY3VzTGFzdCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5mb2N1cygpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgUmIgPSBpKDI5KTtcclxuXHJcbiAgICAgICAgY2xhc3MgT2IgZXh0ZW5kcyBHcCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuYmluZFRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b25WaWV3ID0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMucGFuZWxWaWV3ID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaXNPcGVuXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaXNFbmFibGVkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJjbGFzc1wiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaWRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcInBhbmVsUG9zaXRpb25cIiwgXCJhdXRvXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIgPSBuZXcgZmI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmtleXN0cm9rZXMgPSBuZXcgZHA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogW1wiY2tcIiwgXCJjay1kcm9wZG93blwiLCBuLnRvKFwiY2xhc3NcIiksIG4uaWYoXCJpc0VuYWJsZWRcIiwgXCJjay1kaXNhYmxlZFwiLCB0ID0+ICF0KV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBuLnRvKFwiaWRcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYXJpYS1kZXNjcmliZWRieVwiOiBuLnRvKFwiYXJpYURlc2NyaWJlZEJ5SWRcIilcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbZSwgaV1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZS5leHRlbmRUZW1wbGF0ZSh7YXR0cmlidXRlczoge2NsYXNzOiBbXCJjay1kcm9wZG93bl9fYnV0dG9uXCJdfX0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbmRlcigpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyLnJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLmJ1dHRvblZpZXcsIFwib3BlblwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc09wZW4gPSAhdGhpcy5pc09wZW5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYW5lbFZpZXcuYmluZChcImlzVmlzaWJsZVwiKS50byh0aGlzLCBcImlzT3BlblwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub24oXCJjaGFuZ2U6aXNPcGVuXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNPcGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5wYW5lbFBvc2l0aW9uID09PSBcImF1dG9cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnBhbmVsVmlldy5wb3NpdGlvbiA9IE9iLl9nZXRPcHRpbWFsUG9zaXRpb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy5wYW5lbFZpZXcuZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldDogdGhpcy5idXR0b25WaWV3LmVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaXRJblZpZXdwb3J0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25zOiB0aGlzLl9wYW5lbFBvc2l0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5uYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wYW5lbFZpZXcucG9zaXRpb24gPSB0aGlzLnBhbmVsUG9zaXRpb25cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMua2V5c3Ryb2tlcy5saXN0ZW5Ubyh0aGlzLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIuYWRkKHRoaXMuZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5pc09wZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5idXR0b25WaWV3LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLmtleXN0cm9rZXMuc2V0KFwiYXJyb3dkb3duXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYnV0dG9uVmlldy5pc0VuYWJsZWQgJiYgIXRoaXMuaXNPcGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNPcGVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmtleXN0cm9rZXMuc2V0KFwiYXJyb3dyaWdodFwiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzT3Blbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMua2V5c3Ryb2tlcy5zZXQoXCJhcnJvd2xlZnRcIiwgdCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmtleXN0cm9rZXMuc2V0KFwiZXNjXCIsIHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvY3VzKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b25WaWV3LmZvY3VzKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IF9wYW5lbFBvc2l0aW9ucygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHtzb3V0aEVhc3Q6IHQsIHNvdXRoV2VzdDogZSwgbm9ydGhFYXN0OiBpLCBub3J0aFdlc3Q6IG59ID0gT2IuZGVmYXVsdFBhbmVsUG9zaXRpb25zO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubG9jYWxlLnVpTGFuZ3VhZ2VEaXJlY3Rpb24gPT09IFwibHRyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3QsIGUsIGksIG5dXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZSwgdCwgbiwgaV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgT2IuZGVmYXVsdFBhbmVsUG9zaXRpb25zID0ge1xyXG4gICAgICAgICAgICBzb3V0aEVhc3Q6IHQgPT4gKHt0b3A6IHQuYm90dG9tLCBsZWZ0OiB0LmxlZnQsIG5hbWU6IFwic2VcIn0pLFxyXG4gICAgICAgICAgICBzb3V0aFdlc3Q6ICh0LCBlKSA9PiAoe3RvcDogdC5ib3R0b20sIGxlZnQ6IHQubGVmdCAtIGUud2lkdGggKyB0LndpZHRoLCBuYW1lOiBcInN3XCJ9KSxcclxuICAgICAgICAgICAgbm9ydGhFYXN0OiAodCwgZSkgPT4gKHt0b3A6IHQudG9wIC0gZS5oZWlnaHQsIGxlZnQ6IHQubGVmdCwgbmFtZTogXCJuZVwifSksXHJcbiAgICAgICAgICAgIG5vcnRoV2VzdDogKHQsIGUpID0+ICh7dG9wOiB0LmJvdHRvbSAtIGUuaGVpZ2h0LCBsZWZ0OiB0LmxlZnQgLSBlLndpZHRoICsgdC53aWR0aCwgbmFtZTogXCJud1wifSlcclxuICAgICAgICB9O1xyXG4gICAgICAgIE9iLl9nZXRPcHRpbWFsUG9zaXRpb24gPSBKcDtcclxuICAgICAgICB2YXIgSWIgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDEwIDEwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNLjk0MSA0LjUyM2EuNzUuNzUgMCAxIDEgMS4wNi0xLjA2bDMuMDA2IDMuMDA1IDMuMDA1LTMuMDA1YS43NS43NSAwIDEgMSAxLjA2IDEuMDZsLTMuNTQ5IDMuNTVhLjc1Ljc1IDAgMCAxLTEuMTY4LS4xMzZMLjk0MSA0LjUyM3pcIi8+PC9zdmc+JztcclxuXHJcbiAgICAgICAgY2xhc3MgVmIgZXh0ZW5kcyBoYiB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hcnJvd1ZpZXcgPSB0aGlzLl9jcmVhdGVBcnJvd1ZpZXcoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXh0ZW5kVGVtcGxhdGUoe2F0dHJpYnV0ZXM6IHtcImFyaWEtaGFzcG9wdXBcIjogdHJ1ZX19KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVsZWdhdGUoXCJleGVjdXRlXCIpLnRvKHRoaXMsIFwib3BlblwiKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uYWRkKHRoaXMuYXJyb3dWaWV3KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlQXJyb3dWaWV3KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG5ldyBjYjtcclxuICAgICAgICAgICAgICAgIHQuY29udGVudCA9IEliO1xyXG4gICAgICAgICAgICAgICAgdC5leHRlbmRUZW1wbGF0ZSh7YXR0cmlidXRlczoge2NsYXNzOiBcImNrLWRyb3Bkb3duX19hcnJvd1wifX0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIE5iID0gaSgzMSk7XHJcblxyXG4gICAgICAgIGNsYXNzIE1iIGV4dGVuZHMgR3Age1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5jcmVhdGVDb2xsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhY2tlciA9IG5ldyBmYjtcclxuICAgICAgICAgICAgICAgIHRoaXMua2V5c3Ryb2tlcyA9IG5ldyBkcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzQ3ljbGVyID0gbmV3IHliKHtcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c2FibGVzOiB0aGlzLml0ZW1zLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzVHJhY2tlcjogdGhpcy5mb2N1c1RyYWNrZXIsXHJcbiAgICAgICAgICAgICAgICAgICAga2V5c3Ryb2tlSGFuZGxlcjogdGhpcy5rZXlzdHJva2VzLFxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnM6IHtmb2N1c1ByZXZpb3VzOiBcImFycm93dXBcIiwgZm9jdXNOZXh0OiBcImFycm93ZG93blwifVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKHt0YWc6IFwidWxcIiwgYXR0cmlidXRlczoge2NsYXNzOiBbXCJja1wiLCBcImNrLXJlc2V0XCIsIFwiY2stbGlzdFwiXX0sIGNoaWxkcmVuOiB0aGlzLml0ZW1zfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVuZGVyKCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIucmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5pdGVtcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNUcmFja2VyLmFkZCh0LmVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLm9uKFwiYWRkXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIuYWRkKGUuZWxlbWVudClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5vbihcInJlbW92ZVwiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNUcmFja2VyLnJlbW92ZShlLmVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMua2V5c3Ryb2tlcy5saXN0ZW5Ubyh0aGlzLmVsZW1lbnQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvY3VzKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNDeWNsZXIuZm9jdXNGaXJzdCgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvY3VzTGFzdCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzQ3ljbGVyLmZvY3VzTGFzdCgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIEJiIGV4dGVuZHMgR3Age1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSB0aGlzLmNyZWF0ZUNvbGxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGVtcGxhdGUoe3RhZzogXCJsaVwiLCBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrXCIsIFwiY2stbGlzdF9faXRlbVwiXX0sIGNoaWxkcmVuOiB0aGlzLmNoaWxkcmVufSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9jdXMoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmZpcnN0LmZvY3VzKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgemIgZXh0ZW5kcyBHcCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZW1wbGF0ZSh7dGFnOiBcImxpXCIsIGF0dHJpYnV0ZXM6IHtjbGFzczogW1wiY2tcIiwgXCJjay1saXN0X19zZXBhcmF0b3JcIl19fSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIExiID0gaSgzMyk7XHJcblxyXG4gICAgICAgIGNsYXNzIEZiIGV4dGVuZHMgaGIge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNUb2dnbGVhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudG9nZ2xlU3dpdGNoVmlldyA9IHRoaXMuX2NyZWF0ZVRvZ2dsZVZpZXcoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZXh0ZW5kVGVtcGxhdGUoe2F0dHJpYnV0ZXM6IHtjbGFzczogXCJjay1zd2l0Y2hidXR0b25cIn19KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uYWRkKHRoaXMudG9nZ2xlU3dpdGNoVmlldylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZVRvZ2dsZVZpZXcoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbmV3IEdwO1xyXG4gICAgICAgICAgICAgICAgdC5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcInNwYW5cIixcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrXCIsIFwiY2stYnV0dG9uX190b2dnbGVcIl19LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbe3RhZzogXCJzcGFuXCIsIGF0dHJpYnV0ZXM6IHtjbGFzczogW1wiY2tcIiwgXCJjay1idXR0b25fX3RvZ2dsZV9faW5uZXJcIl19fV1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRGIoe2VtaXR0ZXI6IHQsIGFjdGl2YXRvcjogZSwgY2FsbGJhY2s6IGksIGNvbnRleHRFbGVtZW50czogbn0pIHtcclxuICAgICAgICAgICAgdC5saXN0ZW5Ubyhkb2N1bWVudCwgXCJtb3VzZWRvd25cIiwgKHQsIHt0YXJnZXQ6IG99KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5jb250YWlucyhvKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpKClcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBqYiA9IGkoMzUpO1xyXG4gICAgICAgIHZhciBIYiA9IGkoMzcpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBXYih0LCBlID0gVmIpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBlKHQpO1xyXG4gICAgICAgICAgICBjb25zdCBuID0gbmV3IEViKHQpO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gbmV3IE9iKHQsIGksIG4pO1xyXG4gICAgICAgICAgICBpLmJpbmQoXCJpc0VuYWJsZWRcIikudG8obyk7XHJcbiAgICAgICAgICAgIGlmIChpIGluc3RhbmNlb2YgVmIpIHtcclxuICAgICAgICAgICAgICAgIGkuYmluZChcImlzT25cIikudG8obywgXCJpc09wZW5cIilcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGkuYXJyb3dWaWV3LmJpbmQoXCJpc09uXCIpLnRvKG8sIFwiaXNPcGVuXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJGIobyk7XHJcbiAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBxYih0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LmxvY2FsZTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGkudDtcclxuICAgICAgICAgICAgY29uc3QgbyA9IHQudG9vbGJhclZpZXcgPSBuZXcgWGIoaSk7XHJcbiAgICAgICAgICAgIG8uc2V0KFwiYXJpYUxhYmVsXCIsIG4oXCJsZ1wiKSk7XHJcbiAgICAgICAgICAgIHQuZXh0ZW5kVGVtcGxhdGUoe2F0dHJpYnV0ZXM6IHtjbGFzczogW1wiY2stdG9vbGJhci1kcm9wZG93blwiXX19KTtcclxuICAgICAgICAgICAgZS5tYXAodCA9PiBvLml0ZW1zLmFkZCh0KSk7XHJcbiAgICAgICAgICAgIHQucGFuZWxWaWV3LmNoaWxkcmVuLmFkZChvKTtcclxuICAgICAgICAgICAgby5pdGVtcy5kZWxlZ2F0ZShcImV4ZWN1dGVcIikudG8odClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFViKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHQubG9jYWxlO1xyXG4gICAgICAgICAgICBjb25zdCBuID0gdC5saXN0VmlldyA9IG5ldyBNYihpKTtcclxuICAgICAgICAgICAgbi5pdGVtcy5iaW5kVG8oZSkudXNpbmcoKHt0eXBlOiB0LCBtb2RlbDogZX0pID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0ID09PSBcInNlcGFyYXRvclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyB6YihpKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ID09PSBcImJ1dHRvblwiIHx8IHQgPT09IFwic3dpdGNoYnV0dG9uXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IEJiKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ID09PSBcImJ1dHRvblwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBuZXcgaGIoaSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gbmV3IEZiKGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG8uYmluZCguLi5PYmplY3Qua2V5cyhlKSkudG8oZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5kZWxlZ2F0ZShcImV4ZWN1dGVcIikudG8obik7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5jaGlsZHJlbi5hZGQobyk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHQucGFuZWxWaWV3LmNoaWxkcmVuLmFkZChuKTtcclxuICAgICAgICAgICAgbi5pdGVtcy5kZWxlZ2F0ZShcImV4ZWN1dGVcIikudG8odClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uICRiKHQpIHtcclxuICAgICAgICAgICAgR2IodCk7XHJcbiAgICAgICAgICAgIEtiKHQpO1xyXG4gICAgICAgICAgICBKYih0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gR2IodCkge1xyXG4gICAgICAgICAgICB0Lm9uKFwicmVuZGVyXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIERiKHtcclxuICAgICAgICAgICAgICAgICAgICBlbWl0dGVyOiB0LCBhY3RpdmF0b3I6ICgpID0+IHQuaXNPcGVuLCBjYWxsYmFjazogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmlzT3BlbiA9IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgY29udGV4dEVsZW1lbnRzOiBbdC5lbGVtZW50XVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEtiKHQpIHtcclxuICAgICAgICAgICAgdC5vbihcImV4ZWN1dGVcIiwgZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5zb3VyY2UgaW5zdGFuY2VvZiBGYikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdC5pc09wZW4gPSBmYWxzZVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSmIodCkge1xyXG4gICAgICAgICAgICB0LmtleXN0cm9rZXMuc2V0KFwiYXJyb3dkb3duXCIsIChlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5pc09wZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0LnBhbmVsVmlldy5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdC5rZXlzdHJva2VzLnNldChcImFycm93dXBcIiwgKGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICh0LmlzT3Blbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHQucGFuZWxWaWV3LmZvY3VzTGFzdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIFliID0gJzxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48Y2lyY2xlIGN4PVwiOS41XCIgY3k9XCI0LjVcIiByPVwiMS41XCIvPjxjaXJjbGUgY3g9XCI5LjVcIiBjeT1cIjEwLjVcIiByPVwiMS41XCIvPjxjaXJjbGUgY3g9XCI5LjVcIiBjeT1cIjE2LjVcIiByPVwiMS41XCIvPjwvc3ZnPic7XHJcbiAgICAgICAgdmFyIFFiID0gaSgzOSk7XHJcblxyXG4gICAgICAgIGNsYXNzIFhiIGV4dGVuZHMgR3Age1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmJpbmRUZW1wbGF0ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9wdGlvbnMgPSBlIHx8IHt9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJhcmlhTGFiZWxcIiwgbihcImxyXCIpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwibWF4V2lkdGhcIiwgXCJhdXRvXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcyA9IHRoaXMuY3JlYXRlQ29sbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIgPSBuZXcgZmI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmtleXN0cm9rZXMgPSBuZXcgZHA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImNsYXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJpc0NvbXBhY3RcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtc1ZpZXcgPSBuZXcgWmIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuID0gdGhpcy5jcmVhdGVDb2xsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmFkZCh0aGlzLml0ZW1zVmlldyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzYWJsZXMgPSB0aGlzLmNyZWF0ZUNvbGxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzQ3ljbGVyID0gbmV3IHliKHtcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c2FibGVzOiB0aGlzLmZvY3VzYWJsZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNUcmFja2VyOiB0aGlzLmZvY3VzVHJhY2tlcixcclxuICAgICAgICAgICAgICAgICAgICBrZXlzdHJva2VIYW5kbGVyOiB0aGlzLmtleXN0cm9rZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uczoge2ZvY3VzUHJldmlvdXM6IFtcImFycm93bGVmdFwiLCBcImFycm93dXBcIl0sIGZvY3VzTmV4dDogW1wiYXJyb3dyaWdodFwiLCBcImFycm93ZG93blwiXX1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcImRpdlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFtcImNrXCIsIFwiY2stdG9vbGJhclwiLCBpLnRvKFwiY2xhc3NcIiksIGkuaWYoXCJpc0NvbXBhY3RcIiwgXCJjay10b29sYmFyX2NvbXBhY3RcIildLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb2xlOiBcInRvb2xiYXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmlhLWxhYmVsXCI6IGkudG8oXCJhcmlhTGFiZWxcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7bWF4V2lkdGg6IGkudG8oXCJtYXhXaWR0aFwiKX1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmNoaWxkcmVuLFxyXG4gICAgICAgICAgICAgICAgICAgIG9uOiB7bW91c2Vkb3duOiBTYih0aGlzKX1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmVoYXZpb3IgPSB0aGlzLm9wdGlvbnMuc2hvdWxkR3JvdXBXaGVuRnVsbCA/IG5ldyBldyh0aGlzKSA6IG5ldyB0dyh0aGlzKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIuYWRkKHQuZWxlbWVudClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMub24oXCJhZGRcIiwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhY2tlci5hZGQoZS5lbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLm9uKFwicmVtb3ZlXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIucmVtb3ZlKGUuZWxlbWVudClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzdHJva2VzLmxpc3RlblRvKHRoaXMuZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iZWhhdmlvci5yZW5kZXIodGhpcylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JlaGF2aW9yLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdXBlci5kZXN0cm95KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9jdXMoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c0N5Y2xlci5mb2N1c0ZpcnN0KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9jdXNMYXN0KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNDeWNsZXIuZm9jdXNMYXN0KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZmlsbEZyb21Db25maWcodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgdC5tYXAodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT0gXCJ8XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5hZGQobmV3IENiKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZS5oYXModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5hZGQoZS5jcmVhdGUodCkpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKE9iamVjdChzc1tcImFcIl0pKFwidG9vbGJhcnZpZXctaXRlbS11bmF2YWlsYWJsZTogVGhlIHJlcXVlc3RlZCB0b29sYmFyIGl0ZW0gaXMgdW5hdmFpbGFibGUuXCIpLCB7bmFtZTogdH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgWmIgZXh0ZW5kcyBHcCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMuY3JlYXRlQ29sbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcImRpdlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtjbGFzczogW1wiY2tcIiwgXCJjay10b29sYmFyX19pdGVtc1wiXX0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMuY2hpbGRyZW5cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHR3IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuYmluZFRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgdC5zZXQoXCJpc1ZlcnRpY2FsXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHQuaXRlbXNWaWV3LmNoaWxkcmVuLmJpbmRUbyh0Lml0ZW1zKS51c2luZyh0ID0+IHQpO1xyXG4gICAgICAgICAgICAgICAgdC5mb2N1c2FibGVzLmJpbmRUbyh0Lml0ZW1zKS51c2luZyh0ID0+IHQpO1xyXG4gICAgICAgICAgICAgICAgdC5leHRlbmRUZW1wbGF0ZSh7YXR0cmlidXRlczoge2NsYXNzOiBbZS5pZihcImlzVmVydGljYWxcIiwgXCJjay10b29sYmFyX3ZlcnRpY2FsXCIpXX19KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGV3IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Q2hpbGRyZW4gPSB0LmNoaWxkcmVuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Rm9jdXNhYmxlcyA9IHQuZm9jdXNhYmxlcztcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld0l0ZW1zVmlldyA9IHQuaXRlbXNWaWV3O1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3Rm9jdXNUcmFja2VyID0gdC5mb2N1c1RyYWNrZXI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdMb2NhbGUgPSB0LmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5ncm91cGVkSXRlbXMgPSB0LmNyZWF0ZUNvbGxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXBlZEl0ZW1zID0gdC5jcmVhdGVDb2xsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3VwZWRJdGVtc0Ryb3Bkb3duID0gdGhpcy5fY3JlYXRlR3JvdXBlZEl0ZW1zRHJvcGRvd24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYWNoZWRQYWRkaW5nID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHQuaXRlbXNWaWV3LmNoaWxkcmVuLmJpbmRUbyh0aGlzLnVuZ3JvdXBlZEl0ZW1zKS51c2luZyh0ID0+IHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51bmdyb3VwZWRJdGVtcy5vbihcImFkZFwiLCB0aGlzLl91cGRhdGVGb2N1c0N5Y2xlYWJsZUl0ZW1zLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51bmdyb3VwZWRJdGVtcy5vbihcInJlbW92ZVwiLCB0aGlzLl91cGRhdGVGb2N1c0N5Y2xlYWJsZUl0ZW1zLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgdC5jaGlsZHJlbi5vbihcImFkZFwiLCB0aGlzLl91cGRhdGVGb2N1c0N5Y2xlYWJsZUl0ZW1zLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgdC5jaGlsZHJlbi5vbihcInJlbW92ZVwiLCB0aGlzLl91cGRhdGVGb2N1c0N5Y2xlYWJsZUl0ZW1zLmJpbmQodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgdC5pdGVtcy5vbihcImFkZFwiLCAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpID4gdGhpcy51bmdyb3VwZWRJdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ncm91cGVkSXRlbXMuYWRkKGUsIGkgLSB0aGlzLnVuZ3JvdXBlZEl0ZW1zLmxlbmd0aClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVuZ3JvdXBlZEl0ZW1zLmFkZChlLCBpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVHcm91cGluZygpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQuaXRlbXMub24oXCJyZW1vdmVcIiwgKHQsIGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSA+IHRoaXMudW5ncm91cGVkSXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXBlZEl0ZW1zLnJlbW92ZShlKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudW5ncm91cGVkSXRlbXMucmVtb3ZlKGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUdyb3VwaW5nKClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdC5leHRlbmRUZW1wbGF0ZSh7YXR0cmlidXRlczoge2NsYXNzOiBbXCJjay10b29sYmFyX2dyb3VwaW5nXCJdfX0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbmRlcih0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXdFbGVtZW50ID0gdC5lbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZW5hYmxlR3JvdXBpbmdPblJlc2l6ZSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZW5hYmxlR3JvdXBpbmdPbk1heFdpZHRoQ2hhbmdlKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3VwZWRJdGVtc0Ryb3Bkb3duLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIuZGVzdHJveSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF91cGRhdGVHcm91cGluZygpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy52aWV3RWxlbWVudC5vd25lckRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy52aWV3RWxlbWVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGxldCB0O1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHRoaXMuX2FyZUl0ZW1zT3ZlcmZsb3dpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ncm91cExhc3RJdGVtKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdCAmJiB0aGlzLmdyb3VwZWRJdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAodGhpcy5ncm91cGVkSXRlbXMubGVuZ3RoICYmICF0aGlzLl9hcmVJdGVtc092ZXJmbG93aW5nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3VuZ3JvdXBGaXJzdEl0ZW0oKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fYXJlSXRlbXNPdmVyZmxvd2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ncm91cExhc3RJdGVtKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBfYXJlSXRlbXNPdmVyZmxvd2luZygpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy51bmdyb3VwZWRJdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnZpZXdFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMudmlld0xvY2FsZS51aUxhbmd1YWdlRGlyZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyB2aCh0Lmxhc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IHZoKHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmNhY2hlZFBhZGRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gSWQud2luZG93LmdldENvbXB1dGVkU3R5bGUodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGUgPT09IFwibHRyXCIgPyBcInBhZGRpbmdSaWdodFwiIDogXCJwYWRkaW5nTGVmdFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVkUGFkZGluZyA9IE51bWJlci5wYXJzZUludChpW25dKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGUgPT09IFwibHRyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaS5yaWdodCA+IG4ucmlnaHQgLSB0aGlzLmNhY2hlZFBhZGRpbmdcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkubGVmdCA8IG4ubGVmdCArIHRoaXMuY2FjaGVkUGFkZGluZ1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZW5hYmxlR3JvdXBpbmdPblJlc2l6ZSgpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNpemVPYnNlcnZlciA9IG5ldyBUYih0aGlzLnZpZXdFbGVtZW50LCBlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXQgfHwgdCAhPT0gZS5jb250ZW50UmVjdC53aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVHcm91cGluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ID0gZS5jb250ZW50UmVjdC53aWR0aFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlR3JvdXBpbmcoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZW5hYmxlR3JvdXBpbmdPbk1heFdpZHRoQ2hhbmdlKHQpIHtcclxuICAgICAgICAgICAgICAgIHQub24oXCJjaGFuZ2U6bWF4V2lkdGhcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUdyb3VwaW5nKClcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9ncm91cExhc3RJdGVtKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmdyb3VwZWRJdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdDaGlsZHJlbi5hZGQobmV3IENiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdDaGlsZHJlbi5hZGQodGhpcy5ncm91cGVkSXRlbXNEcm9wZG93bik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3Rm9jdXNUcmFja2VyLmFkZCh0aGlzLmdyb3VwZWRJdGVtc0Ryb3Bkb3duLmVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmdyb3VwZWRJdGVtcy5hZGQodGhpcy51bmdyb3VwZWRJdGVtcy5yZW1vdmUodGhpcy51bmdyb3VwZWRJdGVtcy5sYXN0KSwgMClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3VuZ3JvdXBGaXJzdEl0ZW0oKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuZ3JvdXBlZEl0ZW1zLmFkZCh0aGlzLmdyb3VwZWRJdGVtcy5yZW1vdmUodGhpcy5ncm91cGVkSXRlbXMuZmlyc3QpKTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5ncm91cGVkSXRlbXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52aWV3Q2hpbGRyZW4ucmVtb3ZlKHRoaXMuZ3JvdXBlZEl0ZW1zRHJvcGRvd24pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0NoaWxkcmVuLnJlbW92ZSh0aGlzLnZpZXdDaGlsZHJlbi5sYXN0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdGb2N1c1RyYWNrZXIucmVtb3ZlKHRoaXMuZ3JvdXBlZEl0ZW1zRHJvcGRvd24uZWxlbWVudClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUdyb3VwZWRJdGVtc0Ryb3Bkb3duKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMudmlld0xvY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gV2IodCk7XHJcbiAgICAgICAgICAgICAgICBpLmNsYXNzID0gXCJjay10b29sYmFyX19ncm91cGVkLWRyb3Bkb3duXCI7XHJcbiAgICAgICAgICAgICAgICBpLnBhbmVsUG9zaXRpb24gPSB0LnVpTGFuZ3VhZ2VEaXJlY3Rpb24gPT09IFwibHRyXCIgPyBcInN3XCIgOiBcInNlXCI7XHJcbiAgICAgICAgICAgICAgICBxYihpLCBbXSk7XHJcbiAgICAgICAgICAgICAgICBpLmJ1dHRvblZpZXcuc2V0KHtsYWJlbDogZShcImxzXCIpLCB0b29sdGlwOiB0cnVlLCBpY29uOiBZYn0pO1xyXG4gICAgICAgICAgICAgICAgaS50b29sYmFyVmlldy5pdGVtcy5iaW5kVG8odGhpcy5ncm91cGVkSXRlbXMpLnVzaW5nKHQgPT4gdCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdXBkYXRlRm9jdXNDeWNsZWFibGVJdGVtcygpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlld0ZvY3VzYWJsZXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5ncm91cGVkSXRlbXMubWFwKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmlld0ZvY3VzYWJsZXMuYWRkKHQpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmdyb3VwZWRJdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZpZXdGb2N1c2FibGVzLmFkZCh0aGlzLmdyb3VwZWRJdGVtc0Ryb3Bkb3duKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBpdyh0KSB7XHJcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge2l0ZW1zOiB0fVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtpdGVtczogW119XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oe2l0ZW1zOiBbXX0sIHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBudyA9IFpwKFwicHhcIik7XHJcblxyXG4gICAgICAgIGNsYXNzIG93IGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJCYWxsb29uVG9vbGJhclwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2tiXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhbGxvb25Db25maWcgPSBpdyh0LmNvbmZpZy5nZXQoXCJiYWxsb29uVG9vbGJhclwiKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2xiYXJWaWV3ID0gdGhpcy5fY3JlYXRlVG9vbGJhclZpZXcoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNUcmFja2VyID0gbmV3IGZiO1xyXG4gICAgICAgICAgICAgICAgdC51aS5vbmNlKFwicmVhZHlcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNUcmFja2VyLmFkZCh0LnVpLmdldEVkaXRhYmxlRWxlbWVudCgpKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhY2tlci5hZGQodGhpcy50b29sYmFyVmlldy5lbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNpemVPYnNlcnZlciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iYWxsb29uID0gdC5wbHVnaW5zLmdldChrYik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlU2VsZWN0aW9uQ2hhbmdlRGVib3VuY2VkID0gdWgoKCkgPT4gdGhpcy5maXJlKFwiX3NlbGVjdGlvbkNoYW5nZURlYm91bmNlZFwiKSwgMjAwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoXCJzaG93XCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMuZm9jdXNUcmFja2VyLCBcImNoYW5nZTppc0ZvY3VzZWRcIiwgKHQsIGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5fYmFsbG9vbi52aXNpYmxlVmlldyA9PT0gdGhpcy50b29sYmFyVmlldztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWkgJiYgbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmhpZGUoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNob3coKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhlLCBcImNoYW5nZTpyYW5nZVwiLCAodCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpLmRpcmVjdENoYW5nZSB8fCBlLmlzQ29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaGlkZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpcmVTZWxlY3Rpb25DaGFuZ2VEZWJvdW5jZWQoKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMsIFwiX3NlbGVjdGlvbkNoYW5nZURlYm91bmNlZFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuZWRpdG9yLmVkaXRpbmcudmlldy5kb2N1bWVudC5pc0ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zaG93KClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fYmFsbG9vbkNvbmZpZy5zaG91bGROb3RHcm91cFdoZW5GdWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0LCBcInJlYWR5XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQudWkudmlldy5lZGl0YWJsZS5lbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXNpemVPYnNlcnZlciA9IG5ldyBUYihlLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRvb2xiYXJWaWV3Lm1heFdpZHRoID0gbncobmV3IHZoKGUpLndpZHRoICogLjkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWZ0ZXJJbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLnVpLmNvbXBvbmVudEZhY3Rvcnk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvb2xiYXJWaWV3LmZpbGxGcm9tQ29uZmlnKHRoaXMuX2JhbGxvb25Db25maWcuaXRlbXMsIHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVUb29sYmFyVmlldygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSAhdGhpcy5fYmFsbG9vbkNvbmZpZy5zaG91bGROb3RHcm91cFdoZW5GdWxsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBYYih0aGlzLmVkaXRvci5sb2NhbGUsIHtzaG91bGRHcm91cFdoZW5GdWxsOiB0fSk7XHJcbiAgICAgICAgICAgICAgICBlLmV4dGVuZFRlbXBsYXRlKHthdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrLXRvb2xiYXJfZmxvYXRpbmdcIl19fSk7XHJcbiAgICAgICAgICAgICAgICBlLnJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2hvdygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9iYWxsb29uLmhhc1ZpZXcodGhpcy50b29sYmFyVmlldykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0Lm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbi5pc0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmZyb20odGhpcy50b29sYmFyVmlldy5pdGVtcykuZXZlcnkodCA9PiB0LmlzRW5hYmxlZCAhPT0gdW5kZWZpbmVkICYmICF0LmlzRW5hYmxlZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5lZGl0b3IudWksIFwidXBkYXRlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYWxsb29uLnVwZGF0ZVBvc2l0aW9uKHRoaXMuX2dldEJhbGxvb25Qb3NpdGlvbkRhdGEoKSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFsbG9vbi5hZGQoe1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXc6IHRoaXMudG9vbGJhclZpZXcsXHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb246IHRoaXMuX2dldEJhbGxvb25Qb3NpdGlvbkRhdGEoKSxcclxuICAgICAgICAgICAgICAgICAgICBiYWxsb29uQ2xhc3NOYW1lOiBcImNrLXRvb2xiYXItY29udGFpbmVyXCJcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGhpZGUoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYmFsbG9vbi5oYXNWaWV3KHRoaXMudG9vbGJhclZpZXcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKHRoaXMuZWRpdG9yLnVpLCBcInVwZGF0ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYWxsb29uLnJlbW92ZSh0aGlzLnRvb2xiYXJWaWV3KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0QmFsbG9vblBvc2l0aW9uRGF0YSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmVkaXRpbmcudmlldztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGkuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGkuc2VsZWN0aW9uLmlzQmFja3dhcmQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRhcmdldDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gbyA/IG4uZ2V0Rmlyc3RSYW5nZSgpIDogbi5nZXRMYXN0UmFuZ2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHZoLmdldERvbVJhbmdlUmVjdHMoZS5kb21Db252ZXJ0ZXIudmlld1JhbmdlVG9Eb20odCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlbMF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLmxlbmd0aCA+IDEgJiYgaVtpLmxlbmd0aCAtIDFdLndpZHRoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5wb3AoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlbaS5sZW5ndGggLSAxXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgcG9zaXRpb25zOiBydyhvKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maXJlU2VsZWN0aW9uQ2hhbmdlRGVib3VuY2VkLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50b29sYmFyVmlldy5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhY2tlci5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fcmVzaXplT2JzZXJ2ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXNpemVPYnNlcnZlci5kZXN0cm95KClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcncodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gbmIuZGVmYXVsdFBvc2l0aW9ucztcclxuICAgICAgICAgICAgcmV0dXJuIHQgPyBbZS5ub3J0aFdlc3RBcnJvd1NvdXRoLCBlLm5vcnRoV2VzdEFycm93U291dGhXZXN0LCBlLm5vcnRoV2VzdEFycm93U291dGhFYXN0LCBlLm5vcnRoV2VzdEFycm93U291dGhNaWRkbGVFYXN0LCBlLm5vcnRoV2VzdEFycm93U291dGhNaWRkbGVXZXN0LCBlLnNvdXRoV2VzdEFycm93Tm9ydGgsIGUuc291dGhXZXN0QXJyb3dOb3J0aFdlc3QsIGUuc291dGhXZXN0QXJyb3dOb3J0aEVhc3QsIGUuc291dGhXZXN0QXJyb3dOb3J0aE1pZGRsZVdlc3QsIGUuc291dGhXZXN0QXJyb3dOb3J0aE1pZGRsZUVhc3RdIDogW2Uuc291dGhFYXN0QXJyb3dOb3J0aCwgZS5zb3V0aEVhc3RBcnJvd05vcnRoRWFzdCwgZS5zb3V0aEVhc3RBcnJvd05vcnRoV2VzdCwgZS5zb3V0aEVhc3RBcnJvd05vcnRoTWlkZGxlRWFzdCwgZS5zb3V0aEVhc3RBcnJvd05vcnRoTWlkZGxlV2VzdCwgZS5ub3J0aEVhc3RBcnJvd1NvdXRoLCBlLm5vcnRoRWFzdEFycm93U291dGhFYXN0LCBlLm5vcnRoRWFzdEFycm93U291dGhXZXN0LCBlLm5vcnRoRWFzdEFycm93U291dGhNaWRkbGVFYXN0LCBlLm5vcnRoRWFzdEFycm93U291dGhNaWRkbGVXZXN0XVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3Mgc3cge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvciA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb21wb25lbnRzID0gbmV3IE1hcFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIG5hbWVzKCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMuX2NvbXBvbmVudHMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB5aWVsZCB0Lm9yaWdpbmFsTmFtZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZGQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaGFzKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcImNvbXBvbmVudGZhY3RvcnktaXRlbS1leGlzdHM6IFRoZSBpdGVtIGFscmVhZHkgZXhpc3RzIGluIHRoZSBjb21wb25lbnQgZmFjdG9yeS5cIiwgdGhpcywge25hbWU6IHR9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29tcG9uZW50cy5zZXQoYXcodCksIHtjYWxsYmFjazogZSwgb3JpZ2luYWxOYW1lOiB0fSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5oYXModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiY29tcG9uZW50ZmFjdG9yeS1pdGVtLW1pc3Npbmc6IFRoZSByZXF1aXJlZCBjb21wb25lbnQgaXMgbm90IHJlZ2lzdGVyZWQgaW4gdGhlIGZhY3RvcnkuXCIsIHRoaXMsIHtuYW1lOiB0fSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb21wb25lbnRzLmdldChhdyh0KSkuY2FsbGJhY2sodGhpcy5lZGl0b3IubG9jYWxlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBoYXModCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbXBvbmVudHMuaGFzKGF3KHQpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhdyh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcodCkudG9Mb3dlckNhc2UoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgY3cge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvciA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBvbmVudEZhY3RvcnkgPSBuZXcgc3codCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhY2tlciA9IG5ldyBmYjtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VkaXRhYmxlRWxlbWVudHNNYXAgPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0LmVkaXRpbmcudmlldy5kb2N1bWVudCwgXCJsYXlvdXRDaGFuZ2VkXCIsICgpID0+IHRoaXMudXBkYXRlKCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBlbGVtZW50KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdXBkYXRlKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5maXJlKFwidXBkYXRlXCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNUcmFja2VyLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLl9lZGl0YWJsZUVsZW1lbnRzTWFwLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5ja2VkaXRvckluc3RhbmNlID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZWRpdGFibGVFbGVtZW50c01hcCA9IG5ldyBNYXBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0RWRpdGFibGVFbGVtZW50KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VkaXRhYmxlRWxlbWVudHNNYXAuc2V0KHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlLmNrZWRpdG9ySW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLmNrZWRpdG9ySW5zdGFuY2UgPSB0aGlzLmVkaXRvclxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRFZGl0YWJsZUVsZW1lbnQodCA9IFwibWFpblwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZWRpdGFibGVFbGVtZW50c01hcC5nZXQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0RWRpdGFibGVFbGVtZW50c05hbWVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VkaXRhYmxlRWxlbWVudHNNYXAua2V5cygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBfZWRpdGFibGVFbGVtZW50cygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcImVkaXRvci11aS1kZXByZWNhdGVkLWVkaXRhYmxlLWVsZW1lbnRzOiBcIiArIFwiVGhlIEVkaXRvclVJI19lZGl0YWJsZUVsZW1lbnRzIHByb3BlcnR5IGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmVhciBmdXR1cmUuXCIsIHtlZGl0b3JVSTogdGhpc30pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2VkaXRhYmxlRWxlbWVudHNNYXBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMoY3csIGRzKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbHcoe29yaWdpbjogdCwgb3JpZ2luS2V5c3Ryb2tlSGFuZGxlcjogZSwgb3JpZ2luRm9jdXNUcmFja2VyOiBpLCB0b29sYmFyOiBuLCBiZWZvcmVGb2N1czogbywgYWZ0ZXJCbHVyOiByfSkge1xyXG4gICAgICAgICAgICBpLmFkZChuLmVsZW1lbnQpO1xyXG4gICAgICAgICAgICBlLnNldChcIkFsdCtGMTBcIiwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChpLmlzRm9jdXNlZCAmJiAhbi5mb2N1c1RyYWNrZXIuaXNGb2N1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbygpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG4uZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBlKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG4ua2V5c3Ryb2tlcy5zZXQoXCJFc2NcIiwgKGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmIChuLmZvY3VzVHJhY2tlci5pc0ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcigpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGkoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGR3ID0gaSg0MSk7XHJcbiAgICAgICAgY29uc3QgdXcgPSBuZXcgV2Vha01hcDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaHcodCkge1xyXG4gICAgICAgICAgICBjb25zdCB7dmlldzogZSwgZWxlbWVudDogaSwgdGV4dDogbiwgaXNEaXJlY3RIb3N0OiBvID0gdHJ1ZX0gPSB0O1xyXG4gICAgICAgICAgICBjb25zdCByID0gZS5kb2N1bWVudDtcclxuICAgICAgICAgICAgaWYgKCF1dy5oYXMocikpIHtcclxuICAgICAgICAgICAgICAgIHV3LnNldChyLCBuZXcgTWFwKTtcclxuICAgICAgICAgICAgICAgIHIucmVnaXN0ZXJQb3N0Rml4ZXIodCA9PiBidyhyLCB0KSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB1dy5nZXQocikuc2V0KGksIHt0ZXh0OiBuLCBpc0RpcmVjdEhvc3Q6IG99KTtcclxuICAgICAgICAgICAgZS5jaGFuZ2UodCA9PiBidyhyLCB0KSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGZ3KHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IGUuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgIHQuY2hhbmdlKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF1dy5oYXMoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB1dy5nZXQoaSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gbi5nZXQoZSk7XHJcbiAgICAgICAgICAgICAgICB0LnJlbW92ZUF0dHJpYnV0ZShcImRhdGEtcGxhY2Vob2xkZXJcIiwgby5ob3N0RWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICBtdyh0LCBvLmhvc3RFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIG4uZGVsZXRlKGUpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBndyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGlmICghZS5oYXNDbGFzcyhcImNrLXBsYWNlaG9sZGVyXCIpKSB7XHJcbiAgICAgICAgICAgICAgICB0LmFkZENsYXNzKFwiY2stcGxhY2Vob2xkZXJcIiwgZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbXcodCwgZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5oYXNDbGFzcyhcImNrLXBsYWNlaG9sZGVyXCIpKSB7XHJcbiAgICAgICAgICAgICAgICB0LnJlbW92ZUNsYXNzKFwiY2stcGxhY2Vob2xkZXJcIiwgZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcHcodCkge1xyXG4gICAgICAgICAgICBpZiAoIXQuaXNBdHRhY2hlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBlID0gIUFycmF5LmZyb20odC5nZXRDaGlsZHJlbigpKS5zb21lKHQgPT4gIXQuaXMoXCJ1aUVsZW1lbnRcIikpO1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5kb2N1bWVudDtcclxuICAgICAgICAgICAgaWYgKCFpLmlzRm9jdXNlZCAmJiBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBpLnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgY29uc3QgbyA9IG4uYW5jaG9yO1xyXG4gICAgICAgICAgICBpZiAoZSAmJiBvICYmIG8ucGFyZW50ICE9PSB0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYncodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdXcuZ2V0KHQpO1xyXG4gICAgICAgICAgICBsZXQgbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFt0LCBvXSBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAod3coZSwgdCwgbykpIHtcclxuICAgICAgICAgICAgICAgICAgICBuID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB3dyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHt0ZXh0OiBuLCBpc0RpcmVjdEhvc3Q6IG99ID0gaTtcclxuICAgICAgICAgICAgY29uc3QgciA9IG8gPyBlIDoga3coZSk7XHJcbiAgICAgICAgICAgIGxldCBzID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICghcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaS5ob3N0RWxlbWVudCA9IHI7XHJcbiAgICAgICAgICAgIGlmIChyLmdldEF0dHJpYnV0ZShcImRhdGEtcGxhY2Vob2xkZXJcIikgIT09IG4pIHtcclxuICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKFwiZGF0YS1wbGFjZWhvbGRlclwiLCBuLCByKTtcclxuICAgICAgICAgICAgICAgIHMgPSB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHB3KHIpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZ3codCwgcikpIHtcclxuICAgICAgICAgICAgICAgICAgICBzID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKG13KHQsIHIpKSB7XHJcbiAgICAgICAgICAgICAgICBzID0gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBrdyh0KSB7XHJcbiAgICAgICAgICAgIGlmICh0LmNoaWxkQ291bnQgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmdldENoaWxkKDApO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuaXMoXCJlbGVtZW50XCIpICYmICFlLmlzKFwidWlFbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgX3cgZXh0ZW5kcyBjdyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3ID0gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgZWxlbWVudCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnZpZXcuZWRpdGFibGUuZWxlbWVudFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMudmlldztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnBsdWdpbnMuZ2V0KFwiQmFsbG9vblRvb2xiYXJcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5lZGl0aW5nLnZpZXc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gZS5lZGl0YWJsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuLmRvY3VtZW50LmdldFJvb3QoKTtcclxuICAgICAgICAgICAgICAgIG8ubmFtZSA9IHIucm9vdE5hbWU7XHJcbiAgICAgICAgICAgICAgICBlLnJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG8uZWxlbWVudDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0RWRpdGFibGVFbGVtZW50KG8ubmFtZSwgcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhY2tlci5hZGQocyk7XHJcbiAgICAgICAgICAgICAgICBvLmJpbmQoXCJpc0ZvY3VzZWRcIikudG8odGhpcy5mb2N1c1RyYWNrZXIpO1xyXG4gICAgICAgICAgICAgICAgbi5hdHRhY2hEb21Sb290KHMpO1xyXG4gICAgICAgICAgICAgICAgbHcoe1xyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbjogbixcclxuICAgICAgICAgICAgICAgICAgICBvcmlnaW5Gb2N1c1RyYWNrZXI6IHRoaXMuZm9jdXNUcmFja2VyLFxyXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbktleXN0cm9rZUhhbmRsZXI6IHQua2V5c3Ryb2tlcyxcclxuICAgICAgICAgICAgICAgICAgICB0b29sYmFyOiBpLnRvb2xiYXJWaWV3LFxyXG4gICAgICAgICAgICAgICAgICAgIGJlZm9yZUZvY3VzKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNob3coKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJCbHVyKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLmhpZGUoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5pdFBsYWNlaG9sZGVyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJyZWFkeVwiKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMudmlldztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5lZGl0aW5nLnZpZXc7XHJcbiAgICAgICAgICAgICAgICBlLmRldGFjaERvbVJvb3QodC5lZGl0YWJsZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgIHQuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgc3VwZXIuZGVzdHJveSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9pbml0UGxhY2Vob2xkZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5lZGl0aW5nLnZpZXc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5kb2N1bWVudC5nZXRSb290KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5zb3VyY2VFbGVtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHQuY29uZmlnLmdldChcInBsYWNlaG9sZGVyXCIpIHx8IG4gJiYgbi50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidGV4dGFyZWFcIiAmJiBuLmdldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICBodyh7dmlldzogZSwgZWxlbWVudDogaSwgdGV4dDogbywgaXNEaXJlY3RIb3N0OiBmYWxzZX0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB2dyA9IFwiW29iamVjdCBTdHJpbmddXCI7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHl3KHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiB0ID09IFwic3RyaW5nXCIgfHwgIUplKHQpICYmIFQodCkgJiYgXyh0KSA9PSB2d1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHh3ID0geXc7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEN3KHQsIGUsIGkgPSB7fSwgbiA9IFtdKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBpICYmIGkueG1sbnM7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBvID8gdC5jcmVhdGVFbGVtZW50TlMobywgZSkgOiB0LmNyZWF0ZUVsZW1lbnQoZSk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBpbiBpKSB7XHJcbiAgICAgICAgICAgICAgICByLnNldEF0dHJpYnV0ZSh0LCBpW3RdKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh4dyhuKSB8fCAhanMobikpIHtcclxuICAgICAgICAgICAgICAgIG4gPSBbbl1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGxldCBlIG9mIG4pIHtcclxuICAgICAgICAgICAgICAgIGlmICh4dyhlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0LmNyZWF0ZVRleHROb2RlKGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByLmFwcGVuZENoaWxkKGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIEF3IGV4dGVuZHMgYnAge1xyXG4gICAgICAgICAgICBhdHRhY2hUb0RvbSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JvZHlDb2xsZWN0aW9uQ29udGFpbmVyID0gbmV3IF9wKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogW1wiY2tcIiwgXCJjay1yZXNldF9hbGxcIiwgXCJjay1ib2R5XCIsIFwiY2stcm91bmRlZC1jb3JuZXJzXCJdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkaXI6IHRoaXMubG9jYWxlLnVpTGFuZ3VhZ2VEaXJlY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzXHJcbiAgICAgICAgICAgICAgICB9KS5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIGxldCB0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIi5jay1ib2R5LXdyYXBwZXJcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0ID0gQ3coZG9jdW1lbnQsIFwiZGl2XCIsIHtjbGFzczogXCJjay1ib2R5LXdyYXBwZXJcIn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHQuYXBwZW5kQ2hpbGQodGhpcy5fYm9keUNvbGxlY3Rpb25Db250YWluZXIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRldGFjaEZyb21Eb20oKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYm9keUNvbGxlY3Rpb25Db250YWluZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9ib2R5Q29sbGVjdGlvbkNvbnRhaW5lci5yZW1vdmUoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIuY2stYm9keS13cmFwcGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQgJiYgdC5jaGlsZEVsZW1lbnRDb3VudCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmUoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgVHcgPSBpKDQzKTtcclxuXHJcbiAgICAgICAgY2xhc3MgUHcgZXh0ZW5kcyBHcCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ib2R5ID0gbmV3IEF3KHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbmRlcigpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyLnJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ib2R5LmF0dGFjaFRvRG9tKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9keS5kZXRhY2hGcm9tRG9tKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VwZXIuZGVzdHJveSgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIFN3IGV4dGVuZHMgR3Age1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGVtcGxhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZzogXCJkaXZcIixcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBbXCJja1wiLCBcImNrLWNvbnRlbnRcIiwgXCJjay1lZGl0b3JfX2VkaXRhYmxlXCIsIFwiY2stcm91bmRlZC1jb3JuZXJzXCJdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYW5nOiB0LmNvbnRlbnRMYW5ndWFnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGlyOiB0LmNvbnRlbnRMYW5ndWFnZURpcmVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5uYW1lID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaXNGb2N1c2VkXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VkaXRhYmxlRWxlbWVudCA9IGk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9oYXNFeHRlcm5hbEVsZW1lbnQgPSAhIXRoaXMuX2VkaXRhYmxlRWxlbWVudDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VkaXRpbmdWaWV3ID0gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9oYXNFeHRlcm5hbEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRlbXBsYXRlLmFwcGx5KHRoaXMuZWxlbWVudCA9IHRoaXMuX2VkaXRhYmxlRWxlbWVudClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZWRpdGFibGVFbGVtZW50ID0gdGhpcy5lbGVtZW50XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwiY2hhbmdlOmlzRm9jdXNlZFwiLCAoKSA9PiB0aGlzLl91cGRhdGVJc0ZvY3VzZWRDbGFzc2VzKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlSXNGb2N1c2VkQ2xhc3NlcygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faGFzRXh0ZXJuYWxFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZS5yZXZlcnQodGhpcy5fZWRpdGFibGVFbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc3VwZXIuZGVzdHJveSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF91cGRhdGVJc0ZvY3VzZWRDbGFzc2VzKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuX2VkaXRpbmdWaWV3O1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuaXNSZW5kZXJpbmdJblByb2dyZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSh0aGlzKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlKHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZShlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5jaGFuZ2UoaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LmRvY3VtZW50LmdldFJvb3QoZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5hZGRDbGFzcyhlLmlzRm9jdXNlZCA/IFwiY2stZm9jdXNlZFwiIDogXCJjay1ibHVycmVkXCIsIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnJlbW92ZUNsYXNzKGUuaXNGb2N1c2VkID8gXCJjay1ibHVycmVkXCIgOiBcImNrLWZvY3VzZWRcIiwgbilcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGkobikge1xyXG4gICAgICAgICAgICAgICAgICAgIHQub25jZShcImNoYW5nZTppc1JlbmRlcmluZ0luUHJvZ3Jlc3NcIiwgKHQsIG8sIHIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlKG4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpKG4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBFdyBleHRlbmRzIFN3IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCwgZSwgaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV4dGVuZFRlbXBsYXRlKHthdHRyaWJ1dGVzOiB7cm9sZTogXCJ0ZXh0Ym94XCIsIGNsYXNzOiBcImNrLWVkaXRvcl9fZWRpdGFibGVfaW5saW5lXCJ9fSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVuZGVyKCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIucmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5fZWRpdGluZ1ZpZXc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy50O1xyXG4gICAgICAgICAgICAgICAgdC5jaGFuZ2UoaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuZG9jdW1lbnQuZ2V0Um9vdCh0aGlzLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0QXR0cmlidXRlKFwiYXJpYS1sYWJlbFwiLCBlKFwib2ZcIiwgW3RoaXMubmFtZV0pLCBuKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgUncgZXh0ZW5kcyBQdyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0YWJsZSA9IG5ldyBFdyh0LCBlLCBpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVnaXN0ZXJDaGlsZCh0aGlzLmVkaXRhYmxlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBPdyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGlmICh0IGluc3RhbmNlb2YgSFRNTFRleHRBcmVhRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgdC52YWx1ZSA9IGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0LmlubmVySFRNTCA9IGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEl3KHQpIHtcclxuICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBIVE1MVGV4dEFyZWFFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdC52YWx1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0LmlubmVySFRNTFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgVncgPSB7XHJcbiAgICAgICAgICAgIHNldERhdGEodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhLnNldCh0KVxyXG4gICAgICAgICAgICB9LCBnZXREYXRhKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRhdGEuZ2V0KHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHZhciBOdyA9IFZ3O1xyXG4gICAgICAgIGNvbnN0IE13ID0ge1xyXG4gICAgICAgICAgICB1cGRhdGVTb3VyY2VFbGVtZW50KCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnNvdXJjZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiZWRpdG9yLW1pc3Npbmctc291cmNlZWxlbWVudDogQ2Fubm90IHVwZGF0ZSB0aGUgc291cmNlIGVsZW1lbnQgb2YgYSBkZXRhY2hlZCBlZGl0b3IuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBPdyh0aGlzLnNvdXJjZUVsZW1lbnQsIHRoaXMuZGF0YS5nZXQoKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgdmFyIEJ3ID0gTXc7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHp3KHQpIHtcclxuICAgICAgICAgICAgaWYgKCFndCh0LnVwZGF0ZVNvdXJjZUVsZW1lbnQpKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwiYXR0YWNodG9mb3JtLW1pc3NpbmctZWxlbWVudGFwaS1pbnRlcmZhY2U6IEVkaXRvciBwYXNzZWQgdG8gYXR0YWNoVG9Gb3JtKCkgbXVzdCBpbXBsZW1lbnQgRWxlbWVudEFwaS5cIiwgdClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5zb3VyY2VFbGVtZW50O1xyXG4gICAgICAgICAgICBpZiAoZSAmJiBlLnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0YXJlYVwiICYmIGUuZm9ybSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5mb3JtO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9ICgpID0+IHQudXBkYXRlU291cmNlRWxlbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGd0KG4uc3VibWl0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBuLnN1Ym1pdDtcclxuICAgICAgICAgICAgICAgICAgICBuLnN1Ym1pdCA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLmFwcGx5KG4pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbi5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIG8pO1xyXG4gICAgICAgICAgICAgICAgdC5vbihcImRlc3Ryb3lcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG4ucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBvKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLnN1Ym1pdCA9IGlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBMdyh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LnNvdXJjZUVsZW1lbnQ7XHJcbiAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGUuY2tlZGl0b3JJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcImVkaXRvci1zb3VyY2UtZWxlbWVudC1hbHJlYWR5LXVzZWQ6IFwiICsgXCJUaGUgRE9NIGVsZW1lbnQgY2Fubm90IGJlIHVzZWQgdG8gY3JlYXRlIG11bHRpcGxlIGVkaXRvciBpbnN0YW5jZXMuXCIsIHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZS5ja2VkaXRvckluc3RhbmNlID0gdDtcclxuICAgICAgICAgICAgdC5vbmNlKFwiZGVzdHJveVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgZS5ja2VkaXRvckluc3RhbmNlXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBGdyBleHRlbmRzIGhwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIoZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoS3IodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNvdXJjZUVsZW1lbnQgPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgIEx3KHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5jb25maWcuZ2V0KFwicGx1Z2luc1wiKTtcclxuICAgICAgICAgICAgICAgIGkucHVzaChvdyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbmZpZy5zZXQoXCJwbHVnaW5zXCIsIGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb25maWcuZGVmaW5lKFwiYmFsbG9vblRvb2xiYXJcIiwgdGhpcy5jb25maWcuZ2V0KFwidG9vbGJhclwiKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGEucHJvY2Vzc29yID0gbmV3IGdwKHRoaXMuZGF0YS52aWV3RG9jdW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5kb2N1bWVudC5jcmVhdGVSb290KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IFJ3KHRoaXMubG9jYWxlLCB0aGlzLmVkaXRpbmcudmlldywgdGhpcy5zb3VyY2VFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHRoaXMudWkgPSBuZXcgX3codGhpcywgbik7XHJcbiAgICAgICAgICAgICAgICB6dyh0aGlzKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZ2V0RGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51aS5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VwZXIuZGVzdHJveSgpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNvdXJjZUVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgT3codGhpcy5zb3VyY2VFbGVtZW50LCB0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBjcmVhdGUodCwgZSA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IEtyKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuICYmIHQudGFnTmFtZSA9PT0gXCJURVhUQVJFQVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJlZGl0b3Itd3JvbmctZWxlbWVudDogVGhpcyB0eXBlIG9mIGVkaXRvciBjYW5ub3QgYmUgaW5pdGlhbGl6ZWQgaW5zaWRlIDx0ZXh0YXJlYT4gZWxlbWVudC5cIiwgbnVsbClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IG5ldyB0aGlzKHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkoby5pbml0UGx1Z2lucygpLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvLnVpLmluaXQoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW4gJiYgZS5pbml0aWFsRGF0YSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcImVkaXRvci1jcmVhdGUtaW5pdGlhbC1kYXRhOiBcIiArIFwiVGhlIGNvbmZpZy5pbml0aWFsRGF0YSBvcHRpb24gY2Fubm90IGJlIHVzZWQgdG9nZXRoZXIgd2l0aCBpbml0aWFsIGRhdGEgcGFzc2VkIGluIEVkaXRvci5jcmVhdGUoKS5cIiwgbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5pbml0aWFsRGF0YSB8fCBEdyh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8uZGF0YS5pbml0KGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfSkudGhlbigoKSA9PiBvLmZpcmUoXCJyZWFkeVwiKSkudGhlbigoKSA9PiBvKSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKEZ3LCBOdyk7XHJcbiAgICAgICAgdnMoRncsIEJ3KTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRHcodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gS3IodCkgPyBJdyh0KSA6IHRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGp3IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJ2YWx1ZVwiLCB1bmRlZmluZWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJpc0VuYWJsZWRcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlzYWJsZVN0YWNrID0gbmV3IFNldDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoXCJleGVjdXRlXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLmVkaXRvci5tb2RlbC5kb2N1bWVudCwgXCJjaGFuZ2VcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub24oXCJleGVjdXRlXCIsIHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGtiYWxhc2hldiAoaW1hZ2UgdXBsb2FkIGJ1dHRvbiBmaXgpXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgKCF0aGlzLmlzRW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB0LnN0b3AoKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIH1cclxuICAgICAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJoaWdoXCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odCwgXCJjaGFuZ2U6aXNSZWFkT25seVwiLCAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZm9yY2VEaXNhYmxlZChcInJlYWRPbmx5TW9kZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xlYXJGb3JjZURpc2FibGVkKFwicmVhZE9ubHlNb2RlXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVmcmVzaCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVkID0gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb3JjZURpc2FibGVkKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Rpc2FibGVTdGFjay5hZGQodCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZGlzYWJsZVN0YWNrLnNpemUgPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub24oXCJzZXQ6aXNFbmFibGVkXCIsIEh3LCB7cHJpb3JpdHk6IFwiaGlnaGVzdFwifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjbGVhckZvcmNlRGlzYWJsZWQodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGlzYWJsZVN0YWNrLmRlbGV0ZSh0KTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9kaXNhYmxlU3RhY2suc2l6ZSA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vZmYoXCJzZXQ6aXNFbmFibGVkXCIsIEh3KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBleGVjdXRlKCkge1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBkZXN0cm95KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMoancsIEpjKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSHcodCkge1xyXG4gICAgICAgICAgICB0LnJldHVybiA9IGZhbHNlO1xyXG4gICAgICAgICAgICB0LnN0b3AoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gV3codCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5uZXh0KCk7XHJcbiAgICAgICAgICAgIGlmIChlLmRvbmUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGUudmFsdWVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHF3ID0gW1wibGVmdFwiLCBcInJpZ2h0XCIsIFwiY2VudGVyXCIsIFwianVzdGlmeVwiXTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVXcodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gcXcuaW5jbHVkZXModClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uICR3KHQsIGUpIHtcclxuICAgICAgICAgICAgaWYgKGUuY29udGVudExhbmd1YWdlRGlyZWN0aW9uID09IFwicnRsXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ID09PSBcInJpZ2h0XCJcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0ID09PSBcImxlZnRcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBHdyA9IFwiYWxpZ25tZW50XCI7XHJcblxyXG4gICAgICAgIGNsYXNzIEt3IGV4dGVuZHMgancge1xyXG4gICAgICAgICAgICByZWZyZXNoKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubG9jYWxlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IFd3KHRoaXMuZWRpdG9yLm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbi5nZXRTZWxlY3RlZEJsb2NrcygpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVkID0gISFpICYmIHRoaXMuX2NhbkJlQWxpZ25lZChpKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRW5hYmxlZCAmJiBpLmhhc0F0dHJpYnV0ZShcImFsaWdubWVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBpLmdldEF0dHJpYnV0ZShcImFsaWdubWVudFwiKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gZS5jb250ZW50TGFuZ3VhZ2VEaXJlY3Rpb24gPT09IFwicnRsXCIgPyBcInJpZ2h0XCIgOiBcImxlZnRcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBleGVjdXRlKHQgPSB7fSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUubG9jYWxlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGUubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gbi5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0LnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgbi5jaGFuZ2UodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IEFycmF5LmZyb20oby5zZWxlY3Rpb24uZ2V0U2VsZWN0ZWRCbG9ja3MoKSkuZmlsdGVyKHQgPT4gdGhpcy5fY2FuQmVBbGlnbmVkKHQpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gZVswXS5nZXRBdHRyaWJ1dGUoXCJhbGlnbm1lbnRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9ICR3KHIsIGkpIHx8IG4gPT09IHIgfHwgIXI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSncoZSwgdClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBZdyhlLCB0LCByKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jYW5CZUFsaWduZWQodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWRpdG9yLm1vZGVsLnNjaGVtYS5jaGVja0F0dHJpYnV0ZSh0LCBHdylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSncodCwgZSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgZS5yZW1vdmVBdHRyaWJ1dGUoR3csIGkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFl3KHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIHQpIHtcclxuICAgICAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKEd3LCBpLCBuKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBRdyBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiQWxpZ25tZW50RWRpdGluZ1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdC5jb25maWcuZGVmaW5lKFwiYWxpZ25tZW50XCIsIHtvcHRpb25zOiBbLi4ucXddfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0Lm1vZGVsLnNjaGVtYTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LmNvbmZpZy5nZXQoXCJhbGlnbm1lbnQub3B0aW9uc1wiKS5maWx0ZXIoVXcpO1xyXG4gICAgICAgICAgICAgICAgaS5leHRlbmQoXCIkYmxvY2tcIiwge2FsbG93QXR0cmlidXRlczogXCJhbGlnbm1lbnRcIn0pO1xyXG4gICAgICAgICAgICAgICAgdC5tb2RlbC5zY2hlbWEuc2V0QXR0cmlidXRlUHJvcGVydGllcyhcImFsaWdubWVudFwiLCB7aXNGb3JtYXR0aW5nOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gWHcobi5maWx0ZXIodCA9PiAhJHcodCwgZSkpKTtcclxuICAgICAgICAgICAgICAgIHQuY29udmVyc2lvbi5hdHRyaWJ1dGVUb0F0dHJpYnV0ZShvKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwiYWxpZ25tZW50XCIsIG5ldyBLdyh0KSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWHcodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0ge21vZGVsOiB7a2V5OiBcImFsaWdubWVudFwiLCB2YWx1ZXM6IHQuc2xpY2UoKX0sIHZpZXc6IHt9fTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHQpIHtcclxuICAgICAgICAgICAgICAgIGUudmlld1tpXSA9IHtrZXk6IFwic3R5bGVcIiwgdmFsdWU6IHtcInRleHQtYWxpZ25cIjogaX19XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBadyA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0yIDMuNzVjMCAuNDE0LjMzNi43NS43NS43NWgxNC41YS43NS43NSAwIDEgMCAwLTEuNUgyLjc1YS43NS43NSAwIDAgMC0uNzUuNzV6bTAgOGMwIC40MTQuMzM2Ljc1Ljc1Ljc1aDE0LjVhLjc1Ljc1IDAgMSAwIDAtMS41SDIuNzVhLjc1Ljc1IDAgMCAwLS43NS43NXptMCA0YzAgLjQxNC4zMzYuNzUuNzUuNzVoOS45MjlhLjc1Ljc1IDAgMSAwIDAtMS41SDIuNzVhLjc1Ljc1IDAgMCAwLS43NS43NXptMC04YzAgLjQxNC4zMzYuNzUuNzUuNzVoOS45MjlhLjc1Ljc1IDAgMSAwIDAtMS41SDIuNzVhLjc1Ljc1IDAgMCAwLS43NS43NXpcIi8+PC9zdmc+JztcclxuICAgICAgICB2YXIgdGsgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMTggMy43NWEuNzUuNzUgMCAwIDEtLjc1Ljc1SDIuNzVhLjc1Ljc1IDAgMSAxIDAtMS41aDE0LjVhLjc1Ljc1IDAgMCAxIC43NS43NXptMCA4YS43NS43NSAwIDAgMS0uNzUuNzVIMi43NWEuNzUuNzUgMCAxIDEgMC0xLjVoMTQuNWEuNzUuNzUgMCAwIDEgLjc1Ljc1em0wIDRhLjc1Ljc1IDAgMCAxLS43NS43NUg3LjMyMWEuNzUuNzUgMCAxIDEgMC0xLjVoOS45MjlhLjc1Ljc1IDAgMCAxIC43NS43NXptMC04YS43NS43NSAwIDAgMS0uNzUuNzVINy4zMjFhLjc1Ljc1IDAgMSAxIDAtMS41aDkuOTI5YS43NS43NSAwIDAgMSAuNzUuNzV6XCIvPjwvc3ZnPic7XHJcbiAgICAgICAgdmFyIGVrID0gJzxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTIgMy43NWMwIC40MTQuMzM2Ljc1Ljc1Ljc1aDE0LjVhLjc1Ljc1IDAgMSAwIDAtMS41SDIuNzVhLjc1Ljc1IDAgMCAwLS43NS43NXptMCA4YzAgLjQxNC4zMzYuNzUuNzUuNzVoMTQuNWEuNzUuNzUgMCAxIDAgMC0xLjVIMi43NWEuNzUuNzUgMCAwIDAtLjc1Ljc1em0yLjI4NiA0YzAgLjQxNC4zMzYuNzUuNzUuNzVoOS45MjhhLjc1Ljc1IDAgMSAwIDAtMS41SDUuMDM2YS43NS43NSAwIDAgMC0uNzUuNzV6bTAtOGMwIC40MTQuMzM2Ljc1Ljc1Ljc1aDkuOTI4YS43NS43NSAwIDEgMCAwLTEuNUg1LjAzNmEuNzUuNzUgMCAwIDAtLjc1Ljc1elwiLz48L3N2Zz4nO1xyXG4gICAgICAgIHZhciBpayA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0yIDMuNzVjMCAuNDE0LjMzNi43NS43NS43NWgxNC41YS43NS43NSAwIDEgMCAwLTEuNUgyLjc1YS43NS43NSAwIDAgMC0uNzUuNzV6bTAgOGMwIC40MTQuMzM2Ljc1Ljc1Ljc1aDE0LjVhLjc1Ljc1IDAgMSAwIDAtMS41SDIuNzVhLjc1Ljc1IDAgMCAwLS43NS43NXptMCA0YzAgLjQxNC4zMzYuNzUuNzUuNzVoOS45MjlhLjc1Ljc1IDAgMSAwIDAtMS41SDIuNzVhLjc1Ljc1IDAgMCAwLS43NS43NXptMC04YzAgLjQxNC4zMzYuNzUuNzUuNzVoMTQuNWEuNzUuNzUgMCAxIDAgMC0xLjVIMi43NWEuNzUuNzUgMCAwIDAtLjc1Ljc1elwiLz48L3N2Zz4nO1xyXG4gICAgICAgIGNvbnN0IG5rID0gbmV3IE1hcChbW1wibGVmdFwiLCBad10sIFtcInJpZ2h0XCIsIHRrXSwgW1wiY2VudGVyXCIsIGVrXSwgW1wianVzdGlmeVwiLCBpa11dKTtcclxuXHJcbiAgICAgICAgY2xhc3Mgb2sgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIGdldCBsb2NhbGl6ZWRPcHRpb25UaXRsZXMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IudDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7bGVmdDogdChcIml3XCIpLCByaWdodDogdChcIml4XCIpLCBjZW50ZXI6IHQoXCJpeVwiKSwganVzdGlmeTogdChcIml6XCIpfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJBbGlnbm1lbnRVSVwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC51aS5jb21wb25lbnRGYWN0b3J5O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LmNvbmZpZy5nZXQoXCJhbGlnbm1lbnQub3B0aW9uc1wiKTtcclxuICAgICAgICAgICAgICAgIG4uZmlsdGVyKFV3KS5mb3JFYWNoKHQgPT4gdGhpcy5fYWRkQnV0dG9uKHQpKTtcclxuICAgICAgICAgICAgICAgIGUuYWRkKFwiYWxpZ25tZW50XCIsIHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBXYih0KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gbi5tYXAodCA9PiBlLmNyZWF0ZShgYWxpZ25tZW50OiR7dH1gKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcWIobywgcik7XHJcbiAgICAgICAgICAgICAgICAgICAgby5idXR0b25WaWV3LnNldCh7bGFiZWw6IGkoXCJqYVwiKSwgdG9vbHRpcDogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG8udG9vbGJhclZpZXcuaXNWZXJ0aWNhbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgby50b29sYmFyVmlldy5hcmlhTGFiZWwgPSBpKFwiamJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgby5leHRlbmRUZW1wbGF0ZSh7YXR0cmlidXRlczoge2NsYXNzOiBcImNrLWFsaWdubWVudC1kcm9wZG93blwifX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB0LmNvbnRlbnRMYW5ndWFnZURpcmVjdGlvbiA9PT0gXCJydGxcIiA/IHRrIDogWnc7XHJcbiAgICAgICAgICAgICAgICAgICAgby5idXR0b25WaWV3LmJpbmQoXCJpY29uXCIpLnRvTWFueShyLCBcImlzT25cIiwgKC4uLnQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZmluZEluZGV4KHQgPT4gdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcltlXS5pY29uXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5iaW5kKFwiaXNFbmFibGVkXCIpLnRvTWFueShyLCBcImlzRW5hYmxlZFwiLCAoLi4udCkgPT4gdC5zb21lKHQgPT4gdCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfYWRkQnV0dG9uKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGUudWkuY29tcG9uZW50RmFjdG9yeS5hZGQoYGFsaWdubWVudDoke3R9YCwgaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGUuY29tbWFuZHMuZ2V0KFwiYWxpZ25tZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgaGIoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5zZXQoe2xhYmVsOiB0aGlzLmxvY2FsaXplZE9wdGlvblRpdGxlc1t0XSwgaWNvbjogbmsuZ2V0KHQpLCB0b29sdGlwOiB0cnVlLCBpc1RvZ2dsZWFibGU6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgICAgICBvLmJpbmQoXCJpc0VuYWJsZWRcIikudG8obik7XHJcbiAgICAgICAgICAgICAgICAgICAgby5iaW5kKFwiaXNPblwiKS50byhuLCBcInZhbHVlXCIsIGUgPT4gZSA9PT0gdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhvLCBcImV4ZWN1dGVcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmV4ZWN1dGUoXCJhbGlnbm1lbnRcIiwge3ZhbHVlOiB0fSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZWRpdGluZy52aWV3LmZvY3VzKClcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgcmsgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1F3LCBva11cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiQWxpZ25tZW50XCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3Mgc2sge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRleHQgPSB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IGlzQ29udGV4dFBsdWdpbigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKHNrLCBKYyk7XHJcblxyXG4gICAgICAgIGNsYXNzIGFrIGV4dGVuZHMgc2sge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJQZW5kaW5nQWN0aW9uc1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImhhc0FueVwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3Rpb25zID0gbmV3IHlzKHtpZFByb3BlcnR5OiBcIl9pZFwifSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3Rpb25zLmRlbGVnYXRlKFwiYWRkXCIsIFwicmVtb3ZlXCIpLnRvKHRoaXMpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFkZCh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHQgIT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKFwicGVuZGluZ2FjdGlvbnMtYWRkLWludmFsaWQtbWVzc2FnZTogVGhlIG1lc3NhZ2UgbXVzdCBiZSBhIHN0cmluZy5cIiwgdGhpcylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBPYmplY3QuY3JlYXRlKEpjKTtcclxuICAgICAgICAgICAgICAgIGUuc2V0KFwibWVzc2FnZVwiLCB0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGlvbnMuYWRkKGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYXNBbnkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVtb3ZlKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGlvbnMucmVtb3ZlKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5oYXNBbnkgPSAhIXRoaXMuX2FjdGlvbnMubGVuZ3RoXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBmaXJzdCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hY3Rpb25zLmdldCgwKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9hY3Rpb25zW1N5bWJvbC5pdGVyYXRvcl0oKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBjayB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG5ldyB3aW5kb3cuRmlsZVJlYWRlcjtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRlciA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kYXRhID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJsb2FkZWRcIiwgMCk7XHJcbiAgICAgICAgICAgICAgICB0Lm9ucHJvZ3Jlc3MgPSB0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRlZCA9IHQubG9hZGVkXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBlcnJvcigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkZXIuZXJyb3JcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGRhdGEoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZWFkKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLl9yZWFkZXI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvdGFsID0gdC5zaXplO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChpLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLnJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZGF0YSA9IHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkodClcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGUub25lcnJvciA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbihcImVycm9yXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBlLm9uYWJvcnQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4oXCJhYm9ydGVkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkZXIucmVhZEFzRGF0YVVSTCh0KVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWJvcnQoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkZXIuYWJvcnQoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2cyhjaywgSmMpO1xyXG5cclxuICAgICAgICBjbGFzcyBsayBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRmlsZVJlcG9zaXRvcnlcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtha11cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGVycyA9IG5ldyB5cztcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGVycy5vbihcImFkZFwiLCAoKSA9PiB0aGlzLl91cGRhdGVQZW5kaW5nQWN0aW9uKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkZXJzLm9uKFwicmVtb3ZlXCIsICgpID0+IHRoaXMuX3VwZGF0ZVBlbmRpbmdBY3Rpb24oKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkZXJzTWFwID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3BlbmRpbmdBY3Rpb24gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJ1cGxvYWRlZFwiLCAwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwidXBsb2FkVG90YWxcIiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmQoXCJ1cGxvYWRlZFBlcmNlbnRcIikudG8odGhpcywgXCJ1cGxvYWRlZFwiLCB0aGlzLCBcInVwbG9hZFRvdGFsXCIsICh0LCBlKSA9PiBlID8gdCAvIGUgKiAxMDAgOiAwKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRMb2FkZXIodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvYWRlcnNNYXAuZ2V0KHQpIHx8IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlTG9hZGVyKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5jcmVhdGVVcGxvYWRBZGFwdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKE9iamVjdChzc1tcImFcIl0pKFwiZmlsZXJlcG9zaXRvcnktbm8tdXBsb2FkLWFkYXB0ZXI6IFVwbG9hZCBhZGFwdGVyIGlzIG5vdCBkZWZpbmVkLlwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgZGsoUHJvbWlzZS5yZXNvbHZlKHQpLCB0aGlzLmNyZWF0ZVVwbG9hZEFkYXB0ZXIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sb2FkZXJzLmFkZChlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRlcnNNYXAuc2V0KHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5maWxlLnRoZW4odCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2xvYWRlcnNNYXAuc2V0KHQsIGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlLm9uKFwiY2hhbmdlOnVwbG9hZGVkXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHRoaXMubG9hZGVycykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ICs9IGUudXBsb2FkZWRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWRlZCA9IHRcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZS5vbihcImNoYW5nZTp1cGxvYWRUb3RhbFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLmxvYWRlcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUudXBsb2FkVG90YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgKz0gZS51cGxvYWRUb3RhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBsb2FkVG90YWwgPSB0XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3lMb2FkZXIodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQgaW5zdGFuY2VvZiBkayA/IHQgOiB0aGlzLmdldExvYWRlcih0KTtcclxuICAgICAgICAgICAgICAgIGUuX2Rlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGVycy5yZW1vdmUoZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2FkZXJzTWFwLmZvckVhY2goKHQsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9sb2FkZXJzTWFwLmRlbGV0ZShpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF91cGRhdGVQZW5kaW5nQWN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLnBsdWdpbnMuZ2V0KGFrKTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxvYWRlcnMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9wZW5kaW5nQWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gdCA9PiBgJHtlKFwibGJcIil9ICR7cGFyc2VJbnQodCl9JS5gO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nQWN0aW9uID0gdC5hZGQoaSh0aGlzLnVwbG9hZGVkUGVyY2VudCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nQWN0aW9uLmJpbmQoXCJtZXNzYWdlXCIpLnRvKHRoaXMsIFwidXBsb2FkZWRQZXJjZW50XCIsIGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0LnJlbW92ZSh0aGlzLl9wZW5kaW5nQWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wZW5kaW5nQWN0aW9uID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2cyhsaywgSmMpO1xyXG5cclxuICAgICAgICBjbGFzcyBkayB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWQgPSBpcygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsZVByb21pc2VXcmFwcGVyID0gdGhpcy5fY3JlYXRlRmlsZVByb21pc2VXcmFwcGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWRhcHRlciA9IGUodGhpcyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkZXIgPSBuZXcgY2s7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcInN0YXR1c1wiLCBcImlkbGVcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcInVwbG9hZGVkXCIsIDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJ1cGxvYWRUb3RhbFwiLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmluZChcInVwbG9hZGVkUGVyY2VudFwiKS50byh0aGlzLCBcInVwbG9hZGVkXCIsIHRoaXMsIFwidXBsb2FkVG90YWxcIiwgKHQsIGUpID0+IGUgPyB0IC8gZSAqIDEwMCA6IDApO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJ1cGxvYWRSZXNwb25zZVwiLCBudWxsKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgZmlsZSgpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZmlsZVByb21pc2VXcmFwcGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShudWxsKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZmlsZVByb21pc2VXcmFwcGVyLnByb21pc2UudGhlbih0ID0+IHRoaXMuX2ZpbGVQcm9taXNlV3JhcHBlciA/IHQgOiBudWxsKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgZGF0YSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWFkZXIuZGF0YVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZWFkKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzICE9IFwiaWRsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcImZpbGVyZXBvc2l0b3J5LXJlYWQtd3Jvbmctc3RhdHVzOiBZb3UgY2Fubm90IGNhbGwgcmVhZCBpZiB0aGUgc3RhdHVzIGlzIGRpZmZlcmVudCB0aGFuIGlkbGUuXCIsIHRoaXMpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXR1cyA9IFwicmVhZGluZ1wiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsZS50aGVuKHQgPT4gdGhpcy5fcmVhZGVyLnJlYWQodCkpLnRoZW4odCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBcImlkbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPT09IFwiYWJvcnRlZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gXCJhYm9ydGVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93XCJhYm9ydGVkXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBcImVycm9yXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgdGhpcy5fcmVhZGVyLmVycm9yID8gdGhpcy5fcmVhZGVyLmVycm9yIDogdFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdXBsb2FkKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzICE9IFwiaWRsZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IHNzW1wiYlwiXShcImZpbGVyZXBvc2l0b3J5LXVwbG9hZC13cm9uZy1zdGF0dXM6IFlvdSBjYW5ub3QgY2FsbCB1cGxvYWQgaWYgdGhlIHN0YXR1cyBpcyBkaWZmZXJlbnQgdGhhbiBpZGxlLlwiLCB0aGlzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBcInVwbG9hZGluZ1wiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmlsZS50aGVuKCgpID0+IHRoaXMuX2FkYXB0ZXIudXBsb2FkKCkpLnRoZW4odCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51cGxvYWRSZXNwb25zZSA9IHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBcImlkbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICAgICAgfSkuY2F0Y2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdHVzID09PSBcImFib3J0ZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvd1wiYWJvcnRlZFwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RhdHVzID0gXCJlcnJvclwiO1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IHRcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFib3J0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXMgPSBcImFib3J0ZWRcIjtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZmlsZVByb21pc2VXcmFwcGVyLmlzRnVsZmlsbGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlsZVByb21pc2VXcmFwcGVyLnByb21pc2UuY2F0Y2goKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVQcm9taXNlV3JhcHBlci5yZWplY3RlcihcImFib3J0ZWRcIilcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodCA9PSBcInJlYWRpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlYWRlci5hYm9ydCgpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQgPT0gXCJ1cGxvYWRpbmdcIiAmJiB0aGlzLl9hZGFwdGVyLmFib3J0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRhcHRlci5hYm9ydCgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kZXN0cm95KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2Rlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9maWxlUHJvbWlzZVdyYXBwZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWFkZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hZGFwdGVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51cGxvYWRSZXNwb25zZSA9IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlRmlsZVByb21pc2VXcmFwcGVyKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB7fTtcclxuICAgICAgICAgICAgICAgIGUucHJvbWlzZSA9IG5ldyBQcm9taXNlKChpLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5yZWplY3RlciA9IG47XHJcbiAgICAgICAgICAgICAgICAgICAgZS5pc0Z1bGZpbGxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHQudGhlbih0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5pc0Z1bGZpbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkodClcclxuICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5pc0Z1bGZpbGxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4odClcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2cyhkaywgSmMpO1xyXG5cclxuICAgICAgICBjbGFzcyB1ayBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCByZXF1aXJlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbbGtdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkJhc2U2NFVwbG9hZEFkYXB0ZXJcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IucGx1Z2lucy5nZXQobGspLmNyZWF0ZVVwbG9hZEFkYXB0ZXIgPSB0ID0+IG5ldyBoayh0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBoayB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubG9hZGVyID0gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB1cGxvYWQoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5yZWFkZXIgPSBuZXcgd2luZG93LkZpbGVSZWFkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQoe2RlZmF1bHQ6IGkucmVzdWx0fSlcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpLmFkZEV2ZW50TGlzdGVuZXIoXCJlcnJvclwiLCB0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZSh0KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2FkZXIuZmlsZS50aGVuKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnJlYWRBc0RhdGFVUkwodClcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWJvcnQoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlYWRlci5hYm9ydCgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGZrIGV4dGVuZHMgancge1xyXG4gICAgICAgICAgICByZWZyZXNoKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuX2dldFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IHRoaXMuX2NoZWNrRW5hYmxlZCgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV4ZWN1dGUodCA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5zY2hlbWE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gQXJyYXkuZnJvbShuLmdldFNlbGVjdGVkQmxvY2tzKCkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHQuZm9yY2VWYWx1ZSA9PT0gdW5kZWZpbmVkID8gIXRoaXMudmFsdWUgOiB0LmZvcmNlVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBlLmNoYW5nZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlUXVvdGUodCwgby5maWx0ZXIoZ2spKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBvLmZpbHRlcih0ID0+IGdrKHQpIHx8IHBrKGksIHQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXBwbHlRdW90ZSh0LCBlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRWYWx1ZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gV3codC5nZXRTZWxlY3RlZEJsb2NrcygpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhIShlICYmIGdrKGUpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY2hlY2tFbmFibGVkKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5tb2RlbC5zY2hlbWE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gV3codC5nZXRTZWxlY3RlZEJsb2NrcygpKTtcclxuICAgICAgICAgICAgICAgIGlmICghaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBrKGUsIGkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZW1vdmVRdW90ZSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBtayh0LCBlKS5yZXZlcnNlKCkuZm9yRWFjaChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5zdGFydC5pc0F0U3RhcnQgJiYgZS5lbmQuaXNBdEVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnVud3JhcChlLnN0YXJ0LnBhcmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5zdGFydC5pc0F0U3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuY3JlYXRlUG9zaXRpb25CZWZvcmUoZS5zdGFydC5wYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0Lm1vdmUoZSwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWUuZW5kLmlzQXRFbmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5zcGxpdChlLmVuZClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuY3JlYXRlUG9zaXRpb25BZnRlcihlLmVuZC5wYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHQubW92ZShlLCBpKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2FwcGx5UXVvdGUodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbWsodCwgZSkucmV2ZXJzZSgpLmZvckVhY2goZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG4gPSBnayhlLnN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHQuY3JlYXRlRWxlbWVudChcImJsb2NrUXVvdGVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQud3JhcChlLCBuKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpLnB1c2gobilcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaS5yZXZlcnNlKCkucmVkdWNlKChlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUubmV4dFNpYmxpbmcgPT0gaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0Lm1lcmdlKHQuY3JlYXRlUG9zaXRpb25BZnRlcihlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnayh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0LnBhcmVudC5uYW1lID09IFwiYmxvY2tRdW90ZVwiID8gdC5wYXJlbnQgOiBudWxsXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBtayh0LCBlKSB7XHJcbiAgICAgICAgICAgIGxldCBpO1xyXG4gICAgICAgICAgICBsZXQgbiA9IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBbXTtcclxuICAgICAgICAgICAgd2hpbGUgKG4gPCBlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IGVbbl07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gZVtuICsgMV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpID0gdC5jcmVhdGVQb3NpdGlvbkJlZm9yZShyKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFzIHx8IHIubmV4dFNpYmxpbmcgIT0gcykge1xyXG4gICAgICAgICAgICAgICAgICAgIG8ucHVzaCh0LmNyZWF0ZVJhbmdlKGksIHQuY3JlYXRlUG9zaXRpb25BZnRlcihyKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBudWxsXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuKytcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcGsodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5jaGVja0NoaWxkKGUucGFyZW50LCBcImJsb2NrUXVvdGVcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0LmNoZWNrQ2hpbGQoW1wiJHJvb3RcIiwgXCJibG9ja1F1b3RlXCJdLCBlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGkgJiYgblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgYmsgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkJsb2NrUXVvdGVFZGl0aW5nXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm1vZGVsLnNjaGVtYTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwiYmxvY2tRdW90ZVwiLCBuZXcgZmsodCkpO1xyXG4gICAgICAgICAgICAgICAgZS5yZWdpc3RlcihcImJsb2NrUXVvdGVcIiwge2FsbG93V2hlcmU6IFwiJGJsb2NrXCIsIGFsbG93Q29udGVudE9mOiBcIiRyb290XCJ9KTtcclxuICAgICAgICAgICAgICAgIGUuYWRkQ2hpbGRDaGVjaygodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmVuZHNXaXRoKFwiYmxvY2tRdW90ZVwiKSAmJiBlLm5hbWUgPT0gXCJibG9ja1F1b3RlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbnZlcnNpb24uZWxlbWVudFRvRWxlbWVudCh7bW9kZWw6IFwiYmxvY2tRdW90ZVwiLCB2aWV3OiBcImJsb2NrcXVvdGVcIn0pO1xyXG4gICAgICAgICAgICAgICAgdC5tb2RlbC5kb2N1bWVudC5yZWdpc3RlclBvc3RGaXhlcihpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5tb2RlbC5kb2N1bWVudC5kaWZmZXIuZ2V0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnR5cGUgPT0gXCJpbnNlcnRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQucG9zaXRpb24ubm9kZUFmdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuLmlzKFwiYmxvY2tRdW90ZVwiKSAmJiBuLmlzRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnJlbW92ZShuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuLmlzKFwiYmxvY2tRdW90ZVwiKSAmJiAhZS5jaGVja0NoaWxkKHQucG9zaXRpb24sIG4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS51bndyYXAobik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobi5pcyhcImVsZW1lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gaS5jcmVhdGVSYW5nZUluKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiB0LmdldEl0ZW1zKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4uaXMoXCJibG9ja1F1b3RlXCIpICYmICFlLmNoZWNrQ2hpbGQoaS5jcmVhdGVQb3NpdGlvbkJlZm9yZShuKSwgbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkudW53cmFwKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0LnR5cGUgPT0gXCJyZW1vdmVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQucG9zaXRpb24ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuaXMoXCJibG9ja1F1b3RlXCIpICYmIGUuaXNFbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkucmVtb3ZlKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZnRlckluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5jb21tYW5kcy5nZXQoXCJibG9ja1F1b3RlXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLmVkaXRvci5lZGl0aW5nLnZpZXcuZG9jdW1lbnQsIFwiZW50ZXJcIiwgKHQsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5lZGl0b3IubW9kZWwuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IG4uc2VsZWN0aW9uLmdldExhc3RQb3NpdGlvbigpLnBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobi5zZWxlY3Rpb24uaXNDb2xsYXBzZWQgJiYgby5pc0VtcHR5ICYmIGUudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IuZXhlY3V0ZShcImJsb2NrUXVvdGVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmVkaXRpbmcudmlldy5zY3JvbGxUb1RoZVNlbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc3RvcCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHdrID0gJzxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTMgMTAuNDIzYTYuNSA2LjUgMCAwIDEgNi4wNTYtNi40MDhsLjAzOC42N0M2LjQ0OCA1LjQyMyA1LjM1NCA3LjY2MyA1LjIyIDEwSDljLjU1MiAwIC41LjQzMi41Ljk4NnY0LjUxMWMwIC41NTQtLjQ0OC41MDMtMSAuNTAzaC01Yy0uNTUyIDAtLjUtLjQ0OS0uNS0xLjAwM3YtNC41NzR6bTggMGE2LjUgNi41IDAgMCAxIDYuMDU2LTYuNDA4bC4wMzguNjdjLTIuNjQ2LjczOS0zLjc0IDIuOTc5LTMuODczIDUuMzE1SDE3Yy41NTIgMCAuNS40MzIuNS45ODZ2NC41MTFjMCAuNTU0LS40NDguNTAzLTEgLjUwM2gtNWMtLjU1MiAwLS41LS40NDktLjUtMS4wMDN2LTQuNTc0elwiLz48L3N2Zz4nO1xyXG4gICAgICAgIHZhciBrayA9IGkoNDUpO1xyXG5cclxuICAgICAgICBjbGFzcyBfayBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICB0LnVpLmNvbXBvbmVudEZhY3RvcnkuYWRkKFwiYmxvY2tRdW90ZVwiLCBpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5jb21tYW5kcy5nZXQoXCJibG9ja1F1b3RlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgaGIoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5zZXQoe2xhYmVsOiBlKFwiamNcIiksIGljb246IHdrLCB0b29sdGlwOiB0cnVlLCBpc1RvZ2dsZWFibGU6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgICAgICBvLmJpbmQoXCJpc09uXCIsIFwiaXNFbmFibGVkXCIpLnRvKG4sIFwidmFsdWVcIiwgXCJpc0VuYWJsZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhvLCBcImV4ZWN1dGVcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmV4ZWN1dGUoXCJibG9ja1F1b3RlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmVkaXRpbmcudmlldy5mb2N1cygpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHZrIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtiaywgX2tdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkJsb2NrUXVvdGVcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyB5ayBleHRlbmRzIGp3IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZUtleSA9IGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVmcmVzaCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuX2dldFZhbHVlRnJvbUZpcnN0QWxsb3dlZE5vZGUoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVkID0gdC5zY2hlbWEuY2hlY2tBdHRyaWJ1dGVJblNlbGVjdGlvbihlLnNlbGVjdGlvbiwgdGhpcy5hdHRyaWJ1dGVLZXkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV4ZWN1dGUodCA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0LmZvcmNlVmFsdWUgPT09IHVuZGVmaW5lZCA/ICF0aGlzLnZhbHVlIDogdC5mb3JjZVZhbHVlO1xyXG4gICAgICAgICAgICAgICAgZS5jaGFuZ2UodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4uaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0U2VsZWN0aW9uQXR0cmlidXRlKHRoaXMuYXR0cmlidXRlS2V5LCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmVTZWxlY3Rpb25BdHRyaWJ1dGUodGhpcy5hdHRyaWJ1dGVLZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5zY2hlbWEuZ2V0VmFsaWRSYW5nZXMobi5nZXRSYW5nZXMoKSwgdGhpcy5hdHRyaWJ1dGVLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSh0aGlzLmF0dHJpYnV0ZUtleSwgbywgZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5hdHRyaWJ1dGVLZXksIGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0VmFsdWVGcm9tRmlyc3RBbGxvd2VkTm9kZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnNjaGVtYTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LmRvY3VtZW50LnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGlmIChpLmlzQ29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkuaGFzQXR0cmlidXRlKHRoaXMuYXR0cmlidXRlS2V5KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGkuZ2V0UmFuZ2VzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdC5nZXRJdGVtcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLmNoZWNrQXR0cmlidXRlKGksIHRoaXMuYXR0cmlidXRlS2V5KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkuaGFzQXR0cmlidXRlKHRoaXMuYXR0cmlidXRlS2V5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHhrID0gXCJib2xkXCI7XHJcblxyXG4gICAgICAgIGNsYXNzIENrIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJCb2xkRWRpdGluZ1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICB0Lm1vZGVsLnNjaGVtYS5leHRlbmQoXCIkdGV4dFwiLCB7YWxsb3dBdHRyaWJ1dGVzOiB4a30pO1xyXG4gICAgICAgICAgICAgICAgdC5tb2RlbC5zY2hlbWEuc2V0QXR0cmlidXRlUHJvcGVydGllcyh4aywge2lzRm9ybWF0dGluZzogdHJ1ZSwgY29weU9uRW50ZXI6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgIHQuY29udmVyc2lvbi5hdHRyaWJ1dGVUb0VsZW1lbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiB4aywgdmlldzogXCJzdHJvbmdcIiwgdXBjYXN0QWxzbzogW1wiYlwiLCB0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZ2V0U3R5bGUoXCJmb250LXdlaWdodFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlID09IFwiYm9sZFwiIHx8IE51bWJlcihlKSA+PSA2MDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7bmFtZTogdHJ1ZSwgc3R5bGVzOiBbXCJmb250LXdlaWdodFwiXX1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKHhrLCBuZXcgeWsodCwgeGspKTtcclxuICAgICAgICAgICAgICAgIHQua2V5c3Ryb2tlcy5zZXQoXCJDVFJMK0JcIiwgeGspXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBBayA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0xMC4xODcgMTdINS43NzNjLS42MzcgMC0xLjA5Mi0uMTM4LTEuMzY0LS40MTUtLjI3My0uMjc3LS40MDktLjcxOC0uNDA5LTEuMzIzVjQuNzM4YzAtLjYxNy4xNC0xLjA2Mi40MTktMS4zMzIuMjc5LS4yNy43My0uNDA2IDEuMzU0LS40MDZoNC42OGMuNjkgMCAxLjI4OC4wNDEgMS43OTMuMTI0LjUwNi4wODMuOTYuMjQyIDEuMzYuNDc4LjM0MS4xOTcuNjQ0LjQ0Ny45MDYuNzVhMy4yNjIgMy4yNjIgMCAwIDEgLjgwOCAyLjE2MmMwIDEuNDAxLS43MjIgMi40MjYtMi4xNjcgMy4wNzVDMTUuMDUgMTAuMTc1IDE2IDExLjMxNSAxNiAxMy4wMWEzLjc1NiAzLjc1NiAwIDAgMS0yLjI5NiAzLjUwNCA2LjEgNi4xIDAgMCAxLTEuNTE3LjM3N2MtLjU3MS4wNzMtMS4yMzguMTEtMiAuMTF6bS0uMjE3LTYuMjE3SDd2NC4wODdoMy4wNjljMS45NzcgMCAyLjk2NS0uNjkgMi45NjUtMi4wNzIgMC0uNzA3LS4yNTYtMS4yMi0uNzY4LTEuNTM3LS41MTItLjMxOS0xLjI3Ny0uNDc4LTIuMjk2LS40Nzh6TTcgNS4xM3YzLjYxOWgyLjYwNmMuNzI5IDAgMS4yOTItLjA2NyAxLjY5LS4yYTEuNiAxLjYgMCAwIDAgLjkxLS43NjVjLjE2NS0uMjY3LjI0Ny0uNTY2LjI0Ny0uODk3IDAtLjcwNy0uMjYtMS4xNzYtLjc3OC0xLjQwOS0uNTE5LS4yMzItMS4zMS0uMzQ4LTIuMzc1LS4zNDhIN3pcIi8+PC9zdmc+JztcclxuICAgICAgICBjb25zdCBUayA9IFwiYm9sZFwiO1xyXG5cclxuICAgICAgICBjbGFzcyBQayBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICB0LnVpLmNvbXBvbmVudEZhY3RvcnkuYWRkKFRrLCBpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5jb21tYW5kcy5nZXQoVGspO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgaGIoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5zZXQoe2xhYmVsOiBlKFwiamlcIiksIGljb246IEFrLCBrZXlzdHJva2U6IFwiQ1RSTCtCXCIsIHRvb2x0aXA6IHRydWUsIGlzVG9nZ2xlYWJsZTogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG8uYmluZChcImlzT25cIiwgXCJpc0VuYWJsZWRcIikudG8obiwgXCJ2YWx1ZVwiLCBcImlzRW5hYmxlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKG8sIFwiZXhlY3V0ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuZXhlY3V0ZShUayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuZWRpdGluZy52aWV3LmZvY3VzKClcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgU2sgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW0NrLCBQa11cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiQm9sZFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIEVrIGV4dGVuZHMgancge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYXR0cmlidXRlS2V5ID0gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZWZyZXNoKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gZS5zZWxlY3Rpb24uZ2V0QXR0cmlidXRlKHRoaXMuYXR0cmlidXRlS2V5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVkID0gdC5zY2hlbWEuY2hlY2tBdHRyaWJ1dGVJblNlbGVjdGlvbihlLnNlbGVjdGlvbiwgdGhpcy5hdHRyaWJ1dGVLZXkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV4ZWN1dGUodCA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0LnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgZS5jaGFuZ2UodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4uaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0U2VsZWN0aW9uQXR0cmlidXRlKHRoaXMuYXR0cmlidXRlS2V5LCBvKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmVTZWxlY3Rpb25BdHRyaWJ1dGUodGhpcy5hdHRyaWJ1dGVLZXkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5zY2hlbWEuZ2V0VmFsaWRSYW5nZXMobi5nZXRSYW5nZXMoKSwgdGhpcy5hdHRyaWJ1dGVLZXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZSh0aGlzLmF0dHJpYnV0ZUtleSwgbywgZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmVBdHRyaWJ1dGUodGhpcy5hdHRyaWJ1dGVLZXksIGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgUmsgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGNsYXNzPVwiY2staWNvbl9fZmlsbFwiIGQ9XCJNMTYuOTM1IDUuMzI4YTIgMiAwIDAgMSAwIDIuODI5bC03Ljc3OCA3Ljc3OGEyIDIgMCAwIDEtMi44MjkgMEwzLjUgMTMuMTA3YTEuOTk5IDEuOTk5IDAgMSAxIDIuODI4LTIuODI5bC43MDcuNzA3YTEgMSAwIDAgMCAxLjQxNCAwbDUuNjU4LTUuNjU3YTIgMiAwIDAgMSAyLjgyOCAwelwiLz48cGF0aCBkPVwiTTE0LjgxNCA2LjAzNUw4LjQ0OCAxMi40YTEgMSAwIDAgMS0xLjQxNCAwbC0xLjQxMy0xLjQxNUExIDEgMCAxIDAgNC4yMDcgMTIuNGwyLjgyOSAyLjgyOWExIDEgMCAwIDAgMS40MTQgMGw3Ljc3OC03Ljc3OGExIDEgMCAxIDAtMS40MTQtMS40MTV6XCIvPjwvc3ZnPic7XHJcblxyXG4gICAgICAgIGNsYXNzIE9rIGV4dGVuZHMgaGIge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmJpbmRUZW1wbGF0ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiY29sb3JcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImhhc0JvcmRlclwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWNvbiA9IFJrO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5leHRlbmRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZToge2JhY2tncm91bmRDb2xvcjogZS50byhcImNvbG9yXCIpfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFtcImNrXCIsIFwiY2stY29sb3ItZ3JpZF9fdGlsZVwiLCBlLmlmKFwiaGFzQm9yZGVyXCIsIFwiY2stY29sb3ItdGFibGVfX2NvbG9yLXRpbGVfYm9yZGVyZWRcIildXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVuZGVyKCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIucmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmljb25WaWV3LmZpbGxDb2xvciA9IFwiaHNsKDAsIDAlLCAxMDAlKVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBJayA9IGkoNDcpO1xyXG5cclxuICAgICAgICBjbGFzcyBWayBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZSAmJiBlLmNvbG9yRGVmaW5pdGlvbnMgfHwgW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0ge307XHJcbiAgICAgICAgICAgICAgICBpZiAoZSAmJiBlLmNvbHVtbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICBuLmdyaWRUZW1wbGF0ZUNvbHVtbnMgPSBgcmVwZWF0KCAke2UuY29sdW1uc30sIDFmcilgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcInNlbGVjdGVkQ29sb3JcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5jcmVhdGVDb2xsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhY2tlciA9IG5ldyBmYjtcclxuICAgICAgICAgICAgICAgIHRoaXMua2V5c3Ryb2tlcyA9IG5ldyBkcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzQ3ljbGVyID0gbmV3IHliKHtcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c2FibGVzOiB0aGlzLml0ZW1zLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzVHJhY2tlcjogdGhpcy5mb2N1c1RyYWNrZXIsXHJcbiAgICAgICAgICAgICAgICAgICAga2V5c3Ryb2tlSGFuZGxlcjogdGhpcy5rZXlzdHJva2VzLFxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnM6IHtmb2N1c1ByZXZpb3VzOiBcImFycm93bGVmdFwiLCBmb2N1c05leHQ6IFwiYXJyb3dyaWdodFwifVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLm9uKFwiYWRkXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5pc09uID0gZS5jb2xvciA9PT0gdGhpcy5zZWxlY3RlZENvbG9yXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGkuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gbmV3IE9rO1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc2V0KHtjb2xvcjogdC5jb2xvciwgbGFiZWw6IHQubGFiZWwsIHRvb2x0aXA6IHRydWUsIGhhc0JvcmRlcjogdC5vcHRpb25zLmhhc0JvcmRlcn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGUub24oXCJleGVjdXRlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiZXhlY3V0ZVwiLCB7dmFsdWU6IHQuY29sb3IsIGhhc0JvcmRlcjogdC5vcHRpb25zLmhhc0JvcmRlciwgbGFiZWw6IHQubGFiZWx9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuYWRkKGUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGVtcGxhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZzogXCJkaXZcIixcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5pdGVtcyxcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrXCIsIFwiY2stY29sb3ItZ3JpZFwiXSwgc3R5bGU6IG59XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub24oXCJjaGFuZ2U6c2VsZWN0ZWRDb2xvclwiLCAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuaXNPbiA9IHQuY29sb3IgPT09IGlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb2N1cygpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLml0ZW1zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuZmlyc3QuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb2N1c0xhc3QoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5pdGVtcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLmxhc3QuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLml0ZW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIuYWRkKHQuZWxlbWVudClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMub24oXCJhZGRcIiwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhY2tlci5hZGQoZS5lbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLm9uKFwicmVtb3ZlXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIucmVtb3ZlKGUuZWxlbWVudClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzdHJva2VzLmxpc3RlblRvKHRoaXMuZWxlbWVudClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIE5rID0gaSg0OSk7XHJcblxyXG4gICAgICAgIGNsYXNzIE1rIGV4dGVuZHMgR3Age1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwidGV4dFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiZm9yXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pZCA9IGBjay1lZGl0b3JfX2xhYmVsXyR7aXMoKX1gO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuYmluZFRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcImxhYmVsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge2NsYXNzOiBbXCJja1wiLCBcImNrLWxhYmVsXCJdLCBpZDogdGhpcy5pZCwgZm9yOiBlLnRvKFwiZm9yXCIpfSxcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW3t0ZXh0OiBlLnRvKFwidGV4dFwiKX1dXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBCayBleHRlbmRzIHlzIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImlzRW1wdHlcIiwgdHJ1ZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWRkKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmZpbmQoZSA9PiBlLmNvbG9yID09PSB0LmNvbG9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc3VwZXIuYWRkKHQsIGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJpc0VtcHR5XCIsIGZhbHNlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW1vdmUodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHN1cGVyLnJlbW92ZSh0KTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaXNFbXB0eVwiLCB0cnVlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaGFzQ29sb3IodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEhdGhpcy5maW5kKGUgPT4gZS5jb2xvciA9PT0gdClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMoQmssIEpjKTtcclxuICAgICAgICB2YXIgemsgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNOC42MzYgOS41MzFsLTIuNzU4IDMuOTRhLjUuNSAwIDAgMCAuMTIyLjY5NmwzLjIyNCAyLjI4NGgxLjMxNGwyLjYzNi0zLjczNkw4LjYzNiA5LjUzem0uMjg4IDguNDUxTDUuMTQgMTUuMzk2YTIgMiAwIDAgMS0uNDkxLTIuNzg2bDYuNjczLTkuNTNhMiAyIDAgMCAxIDIuNzg1LS40OWwzLjc0MiAyLjYyYTIgMiAwIDAgMSAuNDkxIDIuNzg1bC03LjI2OSAxMC4wNTMtMi4xNDctLjA2NnpcIi8+PHBhdGggZD1cIk00IDE4aDUuNTIzdi0xSDR6bS0yIDBoMXYtMUgyelwiLz48L3N2Zz4nO1xyXG4gICAgICAgIHZhciBMayA9IGkoNTEpO1xyXG5cclxuICAgICAgICBjbGFzcyBGayBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwge2NvbG9yczogZSwgY29sdW1uczogaSwgcmVtb3ZlQnV0dG9uTGFiZWw6IG4sIGRvY3VtZW50Q29sb3JzTGFiZWw6IG8sIGRvY3VtZW50Q29sb3JzQ291bnQ6IHJ9KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMgPSB0aGlzLmNyZWF0ZUNvbGxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3JEZWZpbml0aW9ucyA9IGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhY2tlciA9IG5ldyBmYjtcclxuICAgICAgICAgICAgICAgIHRoaXMua2V5c3Ryb2tlcyA9IG5ldyBkcDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwic2VsZWN0ZWRDb2xvclwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlQnV0dG9uTGFiZWwgPSBuO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2x1bW5zID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRDb2xvcnMgPSBuZXcgQms7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50Q29sb3JzQ291bnQgPSByO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNDeWNsZXIgPSBuZXcgeWIoe1xyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzYWJsZXM6IHRoaXMuaXRlbXMsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNUcmFja2VyOiB0aGlzLmZvY3VzVHJhY2tlcixcclxuICAgICAgICAgICAgICAgICAgICBrZXlzdHJva2VIYW5kbGVyOiB0aGlzLmtleXN0cm9rZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uczoge2ZvY3VzUHJldmlvdXM6IFwiYXJyb3d1cFwiLCBmb2N1c05leHQ6IFwiYXJyb3dkb3duXCJ9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RvY3VtZW50Q29sb3JzTGFiZWwgPSBvO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZW1wbGF0ZSh7dGFnOiBcImRpdlwiLCBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrXCIsIFwiY2stY29sb3ItdGFibGVcIl19LCBjaGlsZHJlbjogdGhpcy5pdGVtc30pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5hZGQodGhpcy5fcmVtb3ZlQ29sb3JCdXR0b24oKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdXBkYXRlRG9jdW1lbnRDb2xvcnModCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5kb2N1bWVudENvbG9yc0NvdW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudENvbG9ycy5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBvIG9mIGkuZ2V0Um9vdE5hbWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gaS5nZXRSb290KG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB0LmNyZWF0ZVJhbmdlSW4ocik7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHMuZ2V0SXRlbXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5pcyhcInRleHRQcm94eVwiKSAmJiB0Lmhhc0F0dHJpYnV0ZShlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkQ29sb3JUb0RvY3VtZW50Q29sb3JzKHQuZ2V0QXR0cmlidXRlKGUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmRvY3VtZW50Q29sb3JzLmxlbmd0aCA+PSBuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHVwZGF0ZVNlbGVjdGVkQ29sb3JzKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZG9jdW1lbnRDb2xvcnNHcmlkO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuc3RhdGljQ29sb3JzR3JpZDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLnNlbGVjdGVkQ29sb3I7XHJcbiAgICAgICAgICAgICAgICBlLnNlbGVjdGVkQ29sb3IgPSBpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LnNlbGVjdGVkQ29sb3IgPSBpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbmRlcigpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyLnJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMuaXRlbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhY2tlci5hZGQodC5lbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzdHJva2VzLmxpc3RlblRvKHRoaXMuZWxlbWVudClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXBwZW5kR3JpZHMoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0aWNDb2xvcnNHcmlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRpY0NvbG9yc0dyaWQgPSB0aGlzLl9jcmVhdGVTdGF0aWNDb2xvcnNHcmlkKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLmFkZCh0aGlzLnN0YXRpY0NvbG9yc0dyaWQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZG9jdW1lbnRDb2xvcnNDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBfcC5iaW5kKHRoaXMuZG9jdW1lbnRDb2xvcnMsIHRoaXMuZG9jdW1lbnRDb2xvcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgTWsodGhpcy5sb2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUudGV4dCA9IHRoaXMuX2RvY3VtZW50Q29sb3JzTGFiZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5leHRlbmRUZW1wbGF0ZSh7YXR0cmlidXRlczoge2NsYXNzOiBbXCJja1wiLCBcImNrLWNvbG9yLWdyaWRfX2xhYmVsXCIsIHQuaWYoXCJpc0VtcHR5XCIsIFwiY2staGlkZGVuXCIpXX19KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLml0ZW1zLmFkZChlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50Q29sb3JzR3JpZCA9IHRoaXMuX2NyZWF0ZURvY3VtZW50Q29sb3JzR3JpZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXRlbXMuYWRkKHRoaXMuZG9jdW1lbnRDb2xvcnNHcmlkKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb2N1cygpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzQ3ljbGVyLmZvY3VzRmlyc3QoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb2N1c0xhc3QoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c0N5Y2xlci5mb2N1c0xhc3QoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVtb3ZlQ29sb3JCdXR0b24oKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbmV3IGhiO1xyXG4gICAgICAgICAgICAgICAgdC5zZXQoe3dpdGhUZXh0OiB0cnVlLCBpY29uOiB6aywgdG9vbHRpcDogdHJ1ZSwgbGFiZWw6IHRoaXMucmVtb3ZlQnV0dG9uTGFiZWx9KTtcclxuICAgICAgICAgICAgICAgIHQuY2xhc3MgPSBcImNrLWNvbG9yLXRhYmxlX19yZW1vdmUtY29sb3JcIjtcclxuICAgICAgICAgICAgICAgIHQub24oXCJleGVjdXRlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJleGVjdXRlXCIsIHt2YWx1ZTogbnVsbH0pXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVTdGF0aWNDb2xvcnNHcmlkKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG5ldyBWayh0aGlzLmxvY2FsZSwge2NvbG9yRGVmaW5pdGlvbnM6IHRoaXMuY29sb3JEZWZpbml0aW9ucywgY29sdW1uczogdGhpcy5jb2x1bW5zfSk7XHJcbiAgICAgICAgICAgICAgICB0LmRlbGVnYXRlKFwiZXhlY3V0ZVwiKS50byh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVEb2N1bWVudENvbG9yc0dyaWQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gX3AuYmluZCh0aGlzLmRvY3VtZW50Q29sb3JzLCB0aGlzLmRvY3VtZW50Q29sb3JzKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgVmsodGhpcy5sb2NhbGUsIHtjb2x1bW5zOiB0aGlzLmNvbHVtbnN9KTtcclxuICAgICAgICAgICAgICAgIGUuZGVsZWdhdGUoXCJleGVjdXRlXCIpLnRvKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgZS5leHRlbmRUZW1wbGF0ZSh7YXR0cmlidXRlczoge2NsYXNzOiB0LmlmKFwiaXNFbXB0eVwiLCBcImNrLWhpZGRlblwiKX19KTtcclxuICAgICAgICAgICAgICAgIGUuaXRlbXMuYmluZFRvKHRoaXMuZG9jdW1lbnRDb2xvcnMpLnVzaW5nKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgT2s7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zZXQoe2NvbG9yOiB0LmNvbG9yLCBoYXNCb3JkZXI6IHQub3B0aW9ucyAmJiB0Lm9wdGlvbnMuaGFzQm9yZGVyfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQubGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zZXQoe2xhYmVsOiB0LmxhYmVsLCB0b29sdGlwOiB0cnVlfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZS5vbihcImV4ZWN1dGVcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJleGVjdXRlXCIsIHt2YWx1ZTogdC5jb2xvcn0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudENvbG9ycy5vbihcImNoYW5nZTppc0VtcHR5XCIsICh0LCBpLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zZWxlY3RlZENvbG9yID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2FkZENvbG9yVG9Eb2N1bWVudENvbG9ycyh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5jb2xvckRlZmluaXRpb25zLmZpbmQoZSA9PiBlLmNvbG9yID09PSB0KTtcclxuICAgICAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRDb2xvcnMuYWRkKHtjb2xvcjogdCwgbGFiZWw6IHQsIG9wdGlvbnM6IHtoYXNCb3JkZXI6IGZhbHNlfX0pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnRDb2xvcnMuYWRkKE9iamVjdC5hc3NpZ24oe30sIGUpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBEayA9IFwiZm9udFNpemVcIjtcclxuICAgICAgICBjb25zdCBqayA9IFwiZm9udEZhbWlseVwiO1xyXG4gICAgICAgIGNvbnN0IEhrID0gXCJmb250Q29sb3JcIjtcclxuICAgICAgICBjb25zdCBXayA9IFwiZm9udEJhY2tncm91bmRDb2xvclwiO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBxayh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB7bW9kZWw6IHtrZXk6IHQsIHZhbHVlczogW119LCB2aWV3OiB7fSwgdXBjYXN0QWxzbzoge319O1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZSkge1xyXG4gICAgICAgICAgICAgICAgaS5tb2RlbC52YWx1ZXMucHVzaCh0Lm1vZGVsKTtcclxuICAgICAgICAgICAgICAgIGkudmlld1t0Lm1vZGVsXSA9IHQudmlldztcclxuICAgICAgICAgICAgICAgIGlmICh0LnVwY2FzdEFsc28pIHtcclxuICAgICAgICAgICAgICAgICAgICBpLnVwY2FzdEFsc29bdC5tb2RlbF0gPSB0LnVwY2FzdEFsc29cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVWsodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZSA9PiBLayhlLmdldFN0eWxlKHQpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gJGsodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGUsIGkpID0+IGkuY3JlYXRlQXR0cmlidXRlRWxlbWVudChcInNwYW5cIiwge3N0eWxlOiBgJHt0fToke2V9YH0sIHtwcmlvcml0eTogN30pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBHayh7ZHJvcGRvd25WaWV3OiB0LCBjb2xvcnM6IGUsIGNvbHVtbnM6IGksIHJlbW92ZUJ1dHRvbkxhYmVsOiBuLCBkb2N1bWVudENvbG9yc0xhYmVsOiBvLCBkb2N1bWVudENvbG9yc0NvdW50OiByfSkge1xyXG4gICAgICAgICAgICBjb25zdCBzID0gdC5sb2NhbGU7XHJcbiAgICAgICAgICAgIGNvbnN0IGEgPSBuZXcgRmsocywge1xyXG4gICAgICAgICAgICAgICAgY29sb3JzOiBlLFxyXG4gICAgICAgICAgICAgICAgY29sdW1uczogaSxcclxuICAgICAgICAgICAgICAgIHJlbW92ZUJ1dHRvbkxhYmVsOiBuLFxyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRDb2xvcnNMYWJlbDogbyxcclxuICAgICAgICAgICAgICAgIGRvY3VtZW50Q29sb3JzQ291bnQ6IHJcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHQuY29sb3JUYWJsZVZpZXcgPSBhO1xyXG4gICAgICAgICAgICB0LnBhbmVsVmlldy5jaGlsZHJlbi5hZGQoYSk7XHJcbiAgICAgICAgICAgIGEuZGVsZWdhdGUoXCJleGVjdXRlXCIpLnRvKHQsIFwiZXhlY3V0ZVwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGFcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEtrKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQucmVwbGFjZSgvXFxzL2csIFwiXCIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBKayBleHRlbmRzIEVrIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCwgamspXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFlrKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQubWFwKFFrKS5maWx0ZXIodCA9PiAhIXQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBRayh0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdCA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodCA9PT0gXCJkZWZhdWx0XCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7dGl0bGU6IFwiRGVmYXVsdFwiLCBtb2RlbDogdW5kZWZpbmVkfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdCAhPT0gXCJzdHJpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFhrKHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBYayh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LnJlcGxhY2UoL1wifCcvZywgXCJcIikuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBpID0gZVswXTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGUubWFwKFprKS5qb2luKFwiLCBcIik7XHJcbiAgICAgICAgICAgIHJldHVybiB7dGl0bGU6IGksIG1vZGVsOiBpLCB2aWV3OiB7bmFtZTogXCJzcGFuXCIsIHN0eWxlczoge1wiZm9udC1mYW1pbHlcIjogbn0sIHByaW9yaXR5OiA3fX1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFprKHQpIHtcclxuICAgICAgICAgICAgdCA9IHQudHJpbSgpO1xyXG4gICAgICAgICAgICBpZiAodC5pbmRleE9mKFwiIFwiKSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHQgPSBgJyR7dH0nYFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyB0XyBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRm9udEZhbWlseUVkaXRpbmdcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHQuY29uZmlnLmRlZmluZShqaywge29wdGlvbnM6IFtcImRlZmF1bHRcIiwgXCJBcmlhbCwgSGVsdmV0aWNhLCBzYW5zLXNlcmlmXCIsIFwiQ291cmllciBOZXcsIENvdXJpZXIsIG1vbm9zcGFjZVwiLCBcIkdlb3JnaWEsIHNlcmlmXCIsIFwiTHVjaWRhIFNhbnMgVW5pY29kZSwgTHVjaWRhIEdyYW5kZSwgc2Fucy1zZXJpZlwiLCBcIlRhaG9tYSwgR2VuZXZhLCBzYW5zLXNlcmlmXCIsIFwiVGltZXMgTmV3IFJvbWFuLCBUaW1lcywgc2VyaWZcIiwgXCJUcmVidWNoZXQgTVMsIEhlbHZldGljYSwgc2Fucy1zZXJpZlwiLCBcIlZlcmRhbmEsIEdlbmV2YSwgc2Fucy1zZXJpZlwiXX0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICB0Lm1vZGVsLnNjaGVtYS5leHRlbmQoXCIkdGV4dFwiLCB7YWxsb3dBdHRyaWJ1dGVzOiBqa30pO1xyXG4gICAgICAgICAgICAgICAgdC5tb2RlbC5zY2hlbWEuc2V0QXR0cmlidXRlUHJvcGVydGllcyhqaywge2lzRm9ybWF0dGluZzogdHJ1ZSwgY29weU9uRW50ZXI6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBZayh0LmNvbmZpZy5nZXQoXCJmb250RmFtaWx5Lm9wdGlvbnNcIikpLmZpbHRlcih0ID0+IHQubW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHFrKGprLCBlKTtcclxuICAgICAgICAgICAgICAgIHQuY29udmVyc2lvbi5hdHRyaWJ1dGVUb0VsZW1lbnQoaSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChqaywgbmV3IEprKHQpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBlXyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcWModGhpcywgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zZXQodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMoZV8sIEpjKTtcclxuICAgICAgICB2YXIgaV8gPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMTEuMDMgM2g2LjE0OWEuNzUuNzUgMCAxIDEgMCAxLjVoLTUuNTE0TDExLjAzIDN6bTEuMjcgM2g0Ljg3OWEuNzUuNzUgMCAxIDEgMCAxLjVoLTQuMjQ0TDEyLjMgNnptMS4yNyAzaDMuNjA5YS43NS43NSAwIDEgMSAwIDEuNWgtMi45NzNMMTMuNTcgOXptLTIuNzU0IDIuNUw4LjAzOCA0Ljc4NSA1LjI2MSAxMS41aDUuNTU1em0uNjIgMS41SDQuNjQxbC0xLjY2NiA0LjAyOEgxLjMxMmw1Ljc4OS0xNGgxLjg3NWw1Ljc4OSAxNGgtMS42NjNMMTEuNDM2IDEzelwiLz48L3N2Zz4nO1xyXG5cclxuICAgICAgICBjbGFzcyBuXyBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5fZ2V0TG9jYWxpemVkT3B0aW9ucygpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuY29tbWFuZHMuZ2V0KGprKTtcclxuICAgICAgICAgICAgICAgIHQudWkuY29tcG9uZW50RmFjdG9yeS5hZGQoamssIG8gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBXYihvKTtcclxuICAgICAgICAgICAgICAgICAgICBVYihyLCBvXyhpLCBuKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgci5idXR0b25WaWV3LnNldCh7bGFiZWw6IGUoXCJqb1wiKSwgaWNvbjogaV8sIHRvb2x0aXA6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgICAgICByLmV4dGVuZFRlbXBsYXRlKHthdHRyaWJ1dGVzOiB7Y2xhc3M6IFwiY2stZm9udC1mYW1pbHktZHJvcGRvd25cIn19KTtcclxuICAgICAgICAgICAgICAgICAgICByLmJpbmQoXCJpc0VuYWJsZWRcIikudG8obik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhyLCBcImV4ZWN1dGVcIiwgZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuZXhlY3V0ZShlLnNvdXJjZS5jb21tYW5kTmFtZSwge3ZhbHVlOiBlLnNvdXJjZS5jb21tYW5kUGFyYW19KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0TG9jYWxpemVkT3B0aW9ucygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gWWsodC5jb25maWcuZ2V0KGprKS5vcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpLm1hcCh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC50aXRsZSA9PT0gXCJEZWZhdWx0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC50aXRsZSA9IGUoXCJqcFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb18odCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gbmV3IHlzO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBuZXcgZV8oe2NvbW1hbmROYW1lOiBqaywgY29tbWFuZFBhcmFtOiBuLm1vZGVsLCBsYWJlbDogbi50aXRsZSwgd2l0aFRleHQ6IHRydWV9KVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHQubW9kZWwuYmluZChcImlzT25cIikudG8oZSwgXCJ2YWx1ZVwiLCB0ID0+IHQgPT09IG4ubW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4udmlldyAmJiBuLnZpZXcuc3R5bGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5tb2RlbC5zZXQoXCJsYWJlbFN0eWxlXCIsIGBmb250LWZhbWlseTogJHtuLnZpZXcuc3R5bGVzW1wiZm9udC1mYW1pbHlcIl19YClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkuYWRkKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHJfIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0Xywgbl9dXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkZvbnRGYW1pbHlcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBzXyBleHRlbmRzIEVrIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCwgRGspXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFfKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQubWFwKGxfKS5maWx0ZXIodCA9PiAhIXQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBjXyA9IHtcclxuICAgICAgICAgICAgdGlueToge3RpdGxlOiBcIlRpbnlcIiwgbW9kZWw6IFwidGlueVwiLCB2aWV3OiB7bmFtZTogXCJzcGFuXCIsIGNsYXNzZXM6IFwidGV4dC10aW55XCIsIHByaW9yaXR5OiA3fX0sXHJcbiAgICAgICAgICAgIHNtYWxsOiB7dGl0bGU6IFwiU21hbGxcIiwgbW9kZWw6IFwic21hbGxcIiwgdmlldzoge25hbWU6IFwic3BhblwiLCBjbGFzc2VzOiBcInRleHQtc21hbGxcIiwgcHJpb3JpdHk6IDd9fSxcclxuICAgICAgICAgICAgYmlnOiB7dGl0bGU6IFwiQmlnXCIsIG1vZGVsOiBcImJpZ1wiLCB2aWV3OiB7bmFtZTogXCJzcGFuXCIsIGNsYXNzZXM6IFwidGV4dC1iaWdcIiwgcHJpb3JpdHk6IDd9fSxcclxuICAgICAgICAgICAgaHVnZToge3RpdGxlOiBcIkh1Z2VcIiwgbW9kZWw6IFwiaHVnZVwiLCB2aWV3OiB7bmFtZTogXCJzcGFuXCIsIGNsYXNzZXM6IFwidGV4dC1odWdlXCIsIHByaW9yaXR5OiA3fX1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBsXyh0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdCA9PT0gXCJvYmplY3RcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY19bdF0pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjX1t0XVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0ID09PSBcImRlZmF1bHRcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHttb2RlbDogdW5kZWZpbmVkLCB0aXRsZTogXCJEZWZhdWx0XCJ9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgZSA9IHBhcnNlRmxvYXQodCk7XHJcbiAgICAgICAgICAgIGlmIChpc05hTihlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRfKGUpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkXyh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSBTdHJpbmcodCk7XHJcbiAgICAgICAgICAgIHJldHVybiB7dGl0bGU6IGUsIG1vZGVsOiB0LCB2aWV3OiB7bmFtZTogXCJzcGFuXCIsIHN0eWxlczoge1wiZm9udC1zaXplXCI6IGAke3R9cHhgfSwgcHJpb3JpdHk6IDd9fVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgdV8gZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkZvbnRTaXplRWRpdGluZ1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdC5jb25maWcuZGVmaW5lKERrLCB7b3B0aW9uczogW1widGlueVwiLCBcInNtYWxsXCIsIFwiZGVmYXVsdFwiLCBcImJpZ1wiLCBcImh1Z2VcIl19KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBhXyh0aGlzLmVkaXRvci5jb25maWcuZ2V0KFwiZm9udFNpemUub3B0aW9uc1wiKSkuZmlsdGVyKHQgPT4gdC5tb2RlbCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gcWsoRGssIGUpO1xyXG4gICAgICAgICAgICAgICAgdC5jb252ZXJzaW9uLmF0dHJpYnV0ZVRvRWxlbWVudChpKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKERrLCBuZXcgc18odCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICB0Lm1vZGVsLnNjaGVtYS5leHRlbmQoXCIkdGV4dFwiLCB7YWxsb3dBdHRyaWJ1dGVzOiBEa30pO1xyXG4gICAgICAgICAgICAgICAgdC5tb2RlbC5zY2hlbWEuc2V0QXR0cmlidXRlUHJvcGVydGllcyhEaywge2lzRm9ybWF0dGluZzogdHJ1ZSwgY29weU9uRW50ZXI6IHRydWV9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaF8gPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNOS44MTYgMTEuNUw3LjAzOCA0Ljc4NSA0LjI2MSAxMS41aDUuNTU1em0uNjIgMS41SDMuNjQxbC0xLjY2NiA0LjAyOEguMzEybDUuNzg5LTE0aDEuODc1bDUuNzg5IDE0aC0xLjY2M0wxMC40MzYgMTN6bTcuNTUgMi4yNzlsLjc3OS0uNzc5LjcwNy43MDctMi4yNjUgMi4yNjUtMi4xOTMtMi4yNjUuNzA3LS43MDcuNzY1Ljc2NVY0LjgyNWMwLS4wNDIgMC0uMDgzLjAwMi0uMTIzbC0uNzcuNzctLjcwNy0uNzA3TDE3LjIwNyAyLjVsMi4yNjUgMi4yNjUtLjcwNy43MDctLjc4Mi0uNzgyYy4wMDIuMDQzLjAwMy4wODkuMDAzLjEzNXYxMC40NTR6XCIvPjwvc3ZnPic7XHJcbiAgICAgICAgdmFyIGZfID0gaSg1Myk7XHJcblxyXG4gICAgICAgIGNsYXNzIGdfIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9nZXRMb2NhbGl6ZWRPcHRpb25zKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5jb21tYW5kcy5nZXQoRGspO1xyXG4gICAgICAgICAgICAgICAgdC51aS5jb21wb25lbnRGYWN0b3J5LmFkZChEaywgbyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IFdiKG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIFViKHIsIG1fKGksIG4pKTtcclxuICAgICAgICAgICAgICAgICAgICByLmJ1dHRvblZpZXcuc2V0KHtsYWJlbDogZShcImpxXCIpLCBpY29uOiBoXywgdG9vbHRpcDogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHIuZXh0ZW5kVGVtcGxhdGUoe2F0dHJpYnV0ZXM6IHtjbGFzczogW1wiY2stZm9udC1zaXplLWRyb3Bkb3duXCJdfX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHIuYmluZChcImlzRW5hYmxlZFwiKS50byhuKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHIsIFwiZXhlY3V0ZVwiLCBlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlKGUuc291cmNlLmNvbW1hbmROYW1lLCB7dmFsdWU6IGUuc291cmNlLmNvbW1hbmRQYXJhbX0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmVkaXRpbmcudmlldy5mb2N1cygpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRMb2NhbGl6ZWRPcHRpb25zKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB7RGVmYXVsdDogZShcImpwXCIpLCBUaW55OiBlKFwianJcIiksIFNtYWxsOiBlKFwianNcIiksIEJpZzogZShcImp0XCIpLCBIdWdlOiBlKFwianVcIil9O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGFfKHQuY29uZmlnLmdldChEaykub3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbi5tYXAodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IGlbdC50aXRsZV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUgJiYgZSAhPSB0LnRpdGxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBPYmplY3QuYXNzaWduKHt9LCB0LCB7dGl0bGU6IGV9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbV8odCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gbmV3IHlzO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IG4gb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBuZXcgZV8oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21tYW5kTmFtZTogRGssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbW1hbmRQYXJhbTogbi5tb2RlbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IG4udGl0bGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBcImNrLWZvbnRzaXplLW9wdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aXRoVGV4dDogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgaWYgKG4udmlldyAmJiBuLnZpZXcuc3R5bGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5tb2RlbC5zZXQoXCJsYWJlbFN0eWxlXCIsIGBmb250LXNpemU6JHtuLnZpZXcuc3R5bGVzW1wiZm9udC1zaXplXCJdfWApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobi52aWV3ICYmIG4udmlldy5jbGFzc2VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5tb2RlbC5zZXQoXCJjbGFzc1wiLCBgJHt0Lm1vZGVsLmNsYXNzfSAke24udmlldy5jbGFzc2VzfWApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0Lm1vZGVsLmJpbmQoXCJpc09uXCIpLnRvKGUsIFwidmFsdWVcIiwgdCA9PiB0ID09PSBuLm1vZGVsKTtcclxuICAgICAgICAgICAgICAgIGkuYWRkKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHBfIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFt1XywgZ19dXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkZvbnRTaXplXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgYl8gZXh0ZW5kcyBFayB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQsIEhrKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyB3XyBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRm9udENvbG9yRWRpdGluZ1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdC5jb25maWcuZGVmaW5lKEhrLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBbe2NvbG9yOiBcImhzbCgwLCAwJSwgMCUpXCIsIGxhYmVsOiBcIkJsYWNrXCJ9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImhzbCgwLCAwJSwgMzAlKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJEaW0gZ3JleVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge2NvbG9yOiBcImhzbCgwLCAwJSwgNjAlKVwiLCBsYWJlbDogXCJHcmV5XCJ9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImhzbCgwLCAwJSwgOTAlKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJMaWdodCBncmV5XCJcclxuICAgICAgICAgICAgICAgICAgICB9LCB7Y29sb3I6IFwiaHNsKDAsIDAlLCAxMDAlKVwiLCBsYWJlbDogXCJXaGl0ZVwiLCBoYXNCb3JkZXI6IHRydWV9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImhzbCgwLCA3NSUsIDYwJSlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiUmVkXCJcclxuICAgICAgICAgICAgICAgICAgICB9LCB7Y29sb3I6IFwiaHNsKDMwLCA3NSUsIDYwJSlcIiwgbGFiZWw6IFwiT3JhbmdlXCJ9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImhzbCg2MCwgNzUlLCA2MCUpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIlllbGxvd1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge2NvbG9yOiBcImhzbCg5MCwgNzUlLCA2MCUpXCIsIGxhYmVsOiBcIkxpZ2h0IGdyZWVuXCJ9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImhzbCgxMjAsIDc1JSwgNjAlKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJHcmVlblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge2NvbG9yOiBcImhzbCgxNTAsIDc1JSwgNjAlKVwiLCBsYWJlbDogXCJBcXVhbWFyaW5lXCJ9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImhzbCgxODAsIDc1JSwgNjAlKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJUdXJxdW9pc2VcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtjb2xvcjogXCJoc2woMjEwLCA3NSUsIDYwJSlcIiwgbGFiZWw6IFwiTGlnaHQgYmx1ZVwifSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCJoc2woMjQwLCA3NSUsIDYwJSlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiQmx1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge2NvbG9yOiBcImhzbCgyNzAsIDc1JSwgNjAlKVwiLCBsYWJlbDogXCJQdXJwbGVcIn1dLCBjb2x1bW5zOiA1XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQuY29udmVyc2lvbi5mb3IoXCJ1cGNhc3RcIikuZWxlbWVudFRvQXR0cmlidXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3OiB7bmFtZTogXCJzcGFuXCIsIHN0eWxlczoge2NvbG9yOiAvW1xcc1xcU10rL319LFxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7a2V5OiBIaywgdmFsdWU6IFVrKFwiY29sb3JcIil9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQuY29udmVyc2lvbi5mb3IoXCJkb3duY2FzdFwiKS5hdHRyaWJ1dGVUb0VsZW1lbnQoe21vZGVsOiBIaywgdmlldzogJGsoXCJjb2xvclwiKX0pO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoSGssIG5ldyBiXyh0KSk7XHJcbiAgICAgICAgICAgICAgICB0Lm1vZGVsLnNjaGVtYS5leHRlbmQoXCIkdGV4dFwiLCB7YWxsb3dBdHRyaWJ1dGVzOiBIa30pO1xyXG4gICAgICAgICAgICAgICAgdC5tb2RlbC5zY2hlbWEuc2V0QXR0cmlidXRlUHJvcGVydGllcyhIaywge2lzRm9ybWF0dGluZzogdHJ1ZSwgY29weU9uRW50ZXI6IHRydWV9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBrXyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSB7XHJcbiAgICAgICAgICAgICAgICBCbGFjazogaShcImx4XCIpLFxyXG4gICAgICAgICAgICAgICAgXCJEaW0gZ3JleVwiOiBpKFwibHlcIiksXHJcbiAgICAgICAgICAgICAgICBHcmV5OiBpKFwibHpcIiksXHJcbiAgICAgICAgICAgICAgICBcIkxpZ2h0IGdyZXlcIjogaShcIm1hXCIpLFxyXG4gICAgICAgICAgICAgICAgV2hpdGU6IGkoXCJtYlwiKSxcclxuICAgICAgICAgICAgICAgIFJlZDogaShcIm1jXCIpLFxyXG4gICAgICAgICAgICAgICAgT3JhbmdlOiBpKFwibWRcIiksXHJcbiAgICAgICAgICAgICAgICBZZWxsb3c6IGkoXCJtZVwiKSxcclxuICAgICAgICAgICAgICAgIFwiTGlnaHQgZ3JlZW5cIjogaShcIm1mXCIpLFxyXG4gICAgICAgICAgICAgICAgR3JlZW46IGkoXCJtZ1wiKSxcclxuICAgICAgICAgICAgICAgIEFxdWFtYXJpbmU6IGkoXCJtaFwiKSxcclxuICAgICAgICAgICAgICAgIFR1cnF1b2lzZTogaShcIm1pXCIpLFxyXG4gICAgICAgICAgICAgICAgXCJMaWdodCBibHVlXCI6IGkoXCJtalwiKSxcclxuICAgICAgICAgICAgICAgIEJsdWU6IGkoXCJta1wiKSxcclxuICAgICAgICAgICAgICAgIFB1cnBsZTogaShcIm1sXCIpXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHJldHVybiBlLm1hcCh0ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuW3QubGFiZWxdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUgJiYgZSAhPSB0LmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5sYWJlbCA9IGVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfXyh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0Lm1hcCh2XykuZmlsdGVyKHQgPT4gISF0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdl8odCkge1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQgPT09IFwic3RyaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHQucmVwbGFjZSgvIC9nLCBcIlwiKSxcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbDogdCxcclxuICAgICAgICAgICAgICAgICAgICBoYXNCb3JkZXI6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHZpZXc6IHtuYW1lOiBcInNwYW5cIiwgc3R5bGVzOiB7Y29sb3I6IHR9fVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogdC5jb2xvci5yZXBsYWNlKC8gL2csIFwiXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiB0LmxhYmVsIHx8IHQuY29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgaGFzQm9yZGVyOiB0Lmhhc0JvcmRlciA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiB0Lmhhc0JvcmRlcixcclxuICAgICAgICAgICAgICAgICAgICB2aWV3OiB7bmFtZTogXCJzcGFuXCIsIHN0eWxlczoge2NvbG9yOiBgJHt0LmNvbG9yfWB9fVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyB5XyBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwge2NvbW1hbmROYW1lOiBlLCBpY29uOiBpLCBjb21wb25lbnROYW1lOiBuLCBkcm9wZG93bkxhYmVsOiBvfSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbW1hbmROYW1lID0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tcG9uZW50TmFtZSA9IG47XHJcbiAgICAgICAgICAgICAgICB0aGlzLmljb24gPSBpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kcm9wZG93bkxhYmVsID0gbztcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sdW1ucyA9IHQuY29uZmlnLmdldChgJHt0aGlzLmNvbXBvbmVudE5hbWV9LmNvbHVtbnNgKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3JUYWJsZVZpZXdcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5jb21tYW5kcy5nZXQodGhpcy5jb21tYW5kTmFtZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gX18odC5jb25maWcuZ2V0KHRoaXMuY29tcG9uZW50TmFtZSkuY29sb3JzKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBrXyhlLCBvKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB0LmNvbmZpZy5nZXQoYCR7dGhpcy5jb21wb25lbnROYW1lfS5kb2N1bWVudENvbG9yc2ApO1xyXG4gICAgICAgICAgICAgICAgdC51aS5jb21wb25lbnRGYWN0b3J5LmFkZCh0aGlzLmNvbXBvbmVudE5hbWUsIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBXYihlKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbG9yVGFibGVWaWV3ID0gR2soe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkcm9wZG93blZpZXc6IG8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yczogci5tYXAodCA9PiAoe2xhYmVsOiB0LmxhYmVsLCBjb2xvcjogdC5tb2RlbCwgb3B0aW9uczoge2hhc0JvcmRlcjogdC5oYXNCb3JkZXJ9fSkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW5zOiB0aGlzLmNvbHVtbnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUJ1dHRvbkxhYmVsOiBpKFwibGlcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Q29sb3JzTGFiZWw6IHMgIT09IDAgPyBpKFwibGpcIikgOiB1bmRlZmluZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Q29sb3JzQ291bnQ6IHMgPT09IHVuZGVmaW5lZCA/IHRoaXMuY29sdW1ucyA6IHNcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbG9yVGFibGVWaWV3LmJpbmQoXCJzZWxlY3RlZENvbG9yXCIpLnRvKG4sIFwidmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgby5idXR0b25WaWV3LnNldCh7bGFiZWw6IHRoaXMuZHJvcGRvd25MYWJlbCwgaWNvbjogdGhpcy5pY29uLCB0b29sdGlwOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5leHRlbmRUZW1wbGF0ZSh7YXR0cmlidXRlczoge2NsYXNzOiBcImNrLWNvbG9yLXVpLWRyb3Bkb3duXCJ9fSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5iaW5kKFwiaXNFbmFibGVkXCIpLnRvKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIG8ub24oXCJleGVjdXRlXCIsIChlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuZXhlY3V0ZSh0aGlzLmNvbW1hbmROYW1lLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG8ub24oXCJjaGFuZ2U6aXNPcGVuXCIsIChlLCBpLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uY29sb3JUYWJsZVZpZXcuYXBwZW5kR3JpZHMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb2xvclRhYmxlVmlldy51cGRhdGVEb2N1bWVudENvbG9ycyh0Lm1vZGVsLCB0aGlzLmNvbXBvbmVudE5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbG9yVGFibGVWaWV3LnVwZGF0ZVNlbGVjdGVkQ29sb3JzKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgeF8gPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMTIuNCAxMC4zTDEwIDQuNWwtMi40IDUuOGg0Ljh6bS41IDEuMkg3LjFMNS43IDE1SDQuMmw1LTEyaDEuNmw1IDEyaC0xLjVMMTMgMTEuNXptMy4xIDdINGExIDEgMCAwIDEgMC0yaDEyYTEgMSAwIDAgMSAwIDJ6XCIvPjwvc3ZnPic7XHJcblxyXG4gICAgICAgIGNsYXNzIENfIGV4dGVuZHMgeV8ge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5sb2NhbGUudDtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQsIHtjb21tYW5kTmFtZTogSGssIGNvbXBvbmVudE5hbWU6IEhrLCBpY29uOiB4XywgZHJvcGRvd25MYWJlbDogZShcImp2XCIpfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRm9udENvbG9yVUlcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBBXyBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCByZXF1aXJlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbd18sIENfXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJGb250Q29sb3JcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBUXyBleHRlbmRzIEVrIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCwgV2spXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIFBfIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJGb250QmFja2dyb3VuZENvbG9yRWRpdGluZ1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdC5jb25maWcuZGVmaW5lKFdrLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3JzOiBbe2NvbG9yOiBcImhzbCgwLCAwJSwgMCUpXCIsIGxhYmVsOiBcIkJsYWNrXCJ9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImhzbCgwLCAwJSwgMzAlKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJEaW0gZ3JleVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge2NvbG9yOiBcImhzbCgwLCAwJSwgNjAlKVwiLCBsYWJlbDogXCJHcmV5XCJ9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImhzbCgwLCAwJSwgOTAlKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJMaWdodCBncmV5XCJcclxuICAgICAgICAgICAgICAgICAgICB9LCB7Y29sb3I6IFwiaHNsKDAsIDAlLCAxMDAlKVwiLCBsYWJlbDogXCJXaGl0ZVwiLCBoYXNCb3JkZXI6IHRydWV9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImhzbCgwLCA3NSUsIDYwJSlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiUmVkXCJcclxuICAgICAgICAgICAgICAgICAgICB9LCB7Y29sb3I6IFwiaHNsKDMwLCA3NSUsIDYwJSlcIiwgbGFiZWw6IFwiT3JhbmdlXCJ9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImhzbCg2MCwgNzUlLCA2MCUpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiBcIlllbGxvd1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge2NvbG9yOiBcImhzbCg5MCwgNzUlLCA2MCUpXCIsIGxhYmVsOiBcIkxpZ2h0IGdyZWVuXCJ9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImhzbCgxMjAsIDc1JSwgNjAlKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJHcmVlblwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge2NvbG9yOiBcImhzbCgxNTAsIDc1JSwgNjAlKVwiLCBsYWJlbDogXCJBcXVhbWFyaW5lXCJ9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiBcImhzbCgxODAsIDc1JSwgNjAlKVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYWJlbDogXCJUdXJxdW9pc2VcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtjb2xvcjogXCJoc2woMjEwLCA3NSUsIDYwJSlcIiwgbGFiZWw6IFwiTGlnaHQgYmx1ZVwifSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogXCJoc2woMjQwLCA3NSUsIDYwJSlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWw6IFwiQmx1ZVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge2NvbG9yOiBcImhzbCgyNzAsIDc1JSwgNjAlKVwiLCBsYWJlbDogXCJQdXJwbGVcIn1dLCBjb2x1bW5zOiA1XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQuY29udmVyc2lvbi5mb3IoXCJ1cGNhc3RcIikuZWxlbWVudFRvQXR0cmlidXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwic3BhblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdHlsZXM6IHtcImJhY2tncm91bmQtY29sb3JcIjogL1tcXHNcXFNdKy99XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgbW9kZWw6IHtrZXk6IFdrLCB2YWx1ZTogVWsoXCJiYWNrZ3JvdW5kLWNvbG9yXCIpfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbnZlcnNpb24uZm9yKFwiZG93bmNhc3RcIikuYXR0cmlidXRlVG9FbGVtZW50KHttb2RlbDogV2ssIHZpZXc6ICRrKFwiYmFja2dyb3VuZC1jb2xvclwiKX0pO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoV2ssIG5ldyBUXyh0KSk7XHJcbiAgICAgICAgICAgICAgICB0Lm1vZGVsLnNjaGVtYS5leHRlbmQoXCIkdGV4dFwiLCB7YWxsb3dBdHRyaWJ1dGVzOiBXa30pO1xyXG4gICAgICAgICAgICAgICAgdC5tb2RlbC5zY2hlbWEuc2V0QXR0cmlidXRlUHJvcGVydGllcyhXaywge2lzRm9ybWF0dGluZzogdHJ1ZSwgY29weU9uRW50ZXI6IHRydWV9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgU18gPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNNCAyaDEyYTIgMiAwIDAgMSAyIDJ2MTJhMiAyIDAgMCAxLTIgMkg0YTIgMiAwIDAgMS0yLTJWNGEyIDIgMCAwIDEgMi0yem04LjM4IDkuMjYySDcuNjJMMTAgNS41MDZsMi4zOCA1Ljc1NnptLjUzMiAxLjI4NUwxNC4zNCAxNmgxLjQyNkwxMC44MDQgNEg5LjE5Nkw0LjIzNCAxNkg1LjY2bDEuNDI4LTMuNDUzaDUuODI0elwiLz48L3N2Zz4nO1xyXG5cclxuICAgICAgICBjbGFzcyBFXyBleHRlbmRzIHlfIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubG9jYWxlLnQ7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0LCB7Y29tbWFuZE5hbWU6IFdrLCBjb21wb25lbnROYW1lOiBXaywgaWNvbjogU18sIGRyb3Bkb3duTGFiZWw6IGUoXCJqd1wiKX0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkZvbnRCYWNrZ3JvdW5kQ29sb3JVSVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIFJfIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtQXywgRV9dXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkZvbnRCYWNrZ3JvdW5kQ29sb3JcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBPXyBleHRlbmRzIGp3IHtcclxuICAgICAgICAgICAgcmVmcmVzaCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IFd3KGUuc2VsZWN0aW9uLmdldFNlbGVjdGVkQmxvY2tzKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9ICEhaSAmJiBpLmlzKFwicGFyYWdyYXBoXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSAhIWkgJiYgSV8oaSwgdC5zY2hlbWEpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV4ZWN1dGUodCA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGUuY2hhbmdlKG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSAodC5zZWxlY3Rpb24gfHwgaS5zZWxlY3Rpb24pLmdldFNlbGVjdGVkQmxvY2tzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0LmlzKFwicGFyYWdyYXBoXCIpICYmIElfKHQsIGUuc2NoZW1hKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5yZW5hbWUodCwgXCJwYXJhZ3JhcGhcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIElfKHQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGUuY2hlY2tDaGlsZCh0LnBhcmVudCwgXCJwYXJhZ3JhcGhcIikgJiYgIWUuaXNPYmplY3QodClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIFZfIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJQYXJhZ3JhcGhcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5kYXRhO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJwYXJhZ3JhcGhcIiwgbmV3IE9fKHQpKTtcclxuICAgICAgICAgICAgICAgIGUuc2NoZW1hLnJlZ2lzdGVyKFwicGFyYWdyYXBoXCIsIHtpbmhlcml0QWxsRnJvbTogXCIkYmxvY2tcIn0pO1xyXG4gICAgICAgICAgICAgICAgdC5jb252ZXJzaW9uLmVsZW1lbnRUb0VsZW1lbnQoe21vZGVsOiBcInBhcmFncmFwaFwiLCB2aWV3OiBcInBcIn0pO1xyXG4gICAgICAgICAgICAgICAgdC5jb252ZXJzaW9uLmZvcihcInVwY2FzdFwiKS5lbGVtZW50VG9FbGVtZW50KHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFWXy5wYXJhZ3JhcGhMaWtlRWxlbWVudHMuaGFzKHQubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuaXNFbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5jcmVhdGVFbGVtZW50KFwicGFyYWdyYXBoXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgY29udmVydGVyUHJpb3JpdHk6IFwibG93XCJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaS51cGNhc3REaXNwYXRjaGVyLm9uKFwiZWxlbWVudFwiLCAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaS5jb25zdW1hYmxlLnRlc3QoZS52aWV3SXRlbSwge25hbWU6IGUudmlld0l0ZW0ubmFtZX0pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoTV8oZS52aWV3SXRlbSwgZS5tb2RlbEN1cnNvciwgaS5zY2hlbWEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oZSwgTl8oZS52aWV3SXRlbSwgZS5tb2RlbEN1cnNvciwgaSkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImxvd1wifSk7XHJcbiAgICAgICAgICAgICAgICBpLnVwY2FzdERpc3BhdGNoZXIub24oXCJ0ZXh0XCIsICh0LCBlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUubW9kZWxSYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKE1fKGUudmlld0l0ZW0sIGUubW9kZWxDdXJzb3IsIGkuc2NoZW1hKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGUsIE5fKGUudmlld0l0ZW0sIGUubW9kZWxDdXJzb3IsIGkpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJsb3dlc3RcIn0pO1xyXG4gICAgICAgICAgICAgICAgZS5kb2N1bWVudC5yZWdpc3RlclBvc3RGaXhlcih0ID0+IHRoaXMuX2F1dG9wYXJhZ3JhcGhFbXB0eVJvb3RzKHQpKTtcclxuICAgICAgICAgICAgICAgIHQuZGF0YS5vbihcInJlYWR5XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlLmVucXVldWVDaGFuZ2UoXCJ0cmFuc3BhcmVudFwiLCB0ID0+IHRoaXMuX2F1dG9wYXJhZ3JhcGhFbXB0eVJvb3RzKHQpKVxyXG4gICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImxvd2VzdFwifSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2F1dG9wYXJhZ3JhcGhFbXB0eVJvb3RzKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiBlLmRvY3VtZW50LmdldFJvb3ROYW1lcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGUuZG9jdW1lbnQuZ2V0Um9vdChpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobi5pc0VtcHR5ICYmIG4ucm9vdE5hbWUgIT0gXCIkZ3JhdmV5YXJkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUuc2NoZW1hLmNoZWNrQ2hpbGQobiwgXCJwYXJhZ3JhcGhcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuaW5zZXJ0RWxlbWVudChcInBhcmFncmFwaFwiLCBuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFZfLnBhcmFncmFwaExpa2VFbGVtZW50cyA9IG5ldyBTZXQoW1wiYmxvY2txdW90ZVwiLCBcImRkXCIsIFwiZGl2XCIsIFwiZHRcIiwgXCJoMVwiLCBcImgyXCIsIFwiaDNcIiwgXCJoNFwiLCBcImg1XCIsIFwiaDZcIiwgXCJsaVwiLCBcInBcIiwgXCJ0ZFwiXSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE5fKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGkud3JpdGVyLmNyZWF0ZUVsZW1lbnQoXCJwYXJhZ3JhcGhcIik7XHJcbiAgICAgICAgICAgIGkud3JpdGVyLmluc2VydChuLCBlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGkuY29udmVydEl0ZW0odCwgaS53cml0ZXIuY3JlYXRlUG9zaXRpb25BdChuLCAwKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE1fKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGkuY3JlYXRlQ29udGV4dChlKTtcclxuICAgICAgICAgICAgaWYgKCFpLmNoZWNrQ2hpbGQobiwgXCJwYXJhZ3JhcGhcIikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghaS5jaGVja0NoaWxkKG4ucHVzaChcInBhcmFncmFwaFwiKSwgdCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBCXyBleHRlbmRzIGp3IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsRWxlbWVudHMgPSBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gV3codGhpcy5lZGl0b3IubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uLmdldFNlbGVjdGVkQmxvY2tzKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9ICEhdCAmJiB0aGlzLm1vZGVsRWxlbWVudHMuaW5jbHVkZXModC5uYW1lKSAmJiB0Lm5hbWU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9ICEhdCAmJiB0aGlzLm1vZGVsRWxlbWVudHMuc29tZShlID0+IHpfKHQsIGUsIHRoaXMuZWRpdG9yLm1vZGVsLnNjaGVtYSkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV4ZWN1dGUodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZWRpdG9yLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGUuY2hhbmdlKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBBcnJheS5mcm9tKGkuc2VsZWN0aW9uLmdldFNlbGVjdGVkQmxvY2tzKCkpLmZpbHRlcih0ID0+IHpfKHQsIG4sIGUuc2NoZW1hKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlLmlzKG4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnJlbmFtZShlLCBuKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gel8odCwgZSwgaSkge1xyXG4gICAgICAgICAgICByZXR1cm4gaS5jaGVja0NoaWxkKHQucGFyZW50LCBlKSAmJiAhaS5pc09iamVjdCh0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgTF8gPSBcInBhcmFncmFwaFwiO1xyXG5cclxuICAgICAgICBjbGFzcyBGXyBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSGVhZGluZ0VkaXRpbmdcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHQuY29uZmlnLmRlZmluZShcImhlYWRpbmdcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiBcInBhcmFncmFwaFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJQYXJhZ3JhcGhcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFwiY2staGVhZGluZ19wYXJhZ3JhcGhcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IFwiaGVhZGluZzFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlldzogXCJoMlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJIZWFkaW5nIDFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFwiY2staGVhZGluZ19oZWFkaW5nMVwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbDogXCJoZWFkaW5nMlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3OiBcImgzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIkhlYWRpbmcgMlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogXCJjay1oZWFkaW5nX2hlYWRpbmcyXCJcclxuICAgICAgICAgICAgICAgICAgICB9LCB7bW9kZWw6IFwiaGVhZGluZzNcIiwgdmlldzogXCJoNFwiLCB0aXRsZTogXCJIZWFkaW5nIDNcIiwgY2xhc3M6IFwiY2staGVhZGluZ19oZWFkaW5nM1wifV1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1ZfXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuY29uZmlnLmdldChcImhlYWRpbmcub3B0aW9uc1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4ubW9kZWwgIT09IExfKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQubW9kZWwuc2NoZW1hLnJlZ2lzdGVyKG4ubW9kZWwsIHtpbmhlcml0QWxsRnJvbTogXCIkYmxvY2tcIn0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmNvbnZlcnNpb24uZWxlbWVudFRvRWxlbWVudChuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5wdXNoKG4ubW9kZWwpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkRGVmYXVsdEgxQ29udmVyc2lvbih0KTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwiaGVhZGluZ1wiLCBuZXcgQl8odCwgaSkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFmdGVySW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmNvbW1hbmRzLmdldChcImVudGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuY29uZmlnLmdldChcImhlYWRpbmcub3B0aW9uc1wiKTtcclxuICAgICAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhlLCBcImFmdGVyRXhlY3V0ZVwiLCAoZSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gdC5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24uZ2V0Rmlyc3RQb3NpdGlvbigpLnBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IGkuc29tZSh0ID0+IG8uaXModC5tb2RlbCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAociAmJiAhby5pcyhMXykgJiYgby5jaGlsZENvdW50ID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLndyaXRlci5yZW5hbWUobywgTF8pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfYWRkRGVmYXVsdEgxQ29udmVyc2lvbih0KSB7XHJcbiAgICAgICAgICAgICAgICB0LmNvbnZlcnNpb24uZm9yKFwidXBjYXN0XCIpLmVsZW1lbnRUb0VsZW1lbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBcImhlYWRpbmcxXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlldzogXCJoMVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnZlcnRlclByaW9yaXR5OiBvcy5nZXQoXCJsb3dcIikgKyAxXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBEXyh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB7XHJcbiAgICAgICAgICAgICAgICBQYXJhZ3JhcGg6IGUoXCJueVwiKSxcclxuICAgICAgICAgICAgICAgIFwiSGVhZGluZyAxXCI6IGUoXCJuelwiKSxcclxuICAgICAgICAgICAgICAgIFwiSGVhZGluZyAyXCI6IGUoXCJvYVwiKSxcclxuICAgICAgICAgICAgICAgIFwiSGVhZGluZyAzXCI6IGUoXCJvYlwiKSxcclxuICAgICAgICAgICAgICAgIFwiSGVhZGluZyA0XCI6IGUoXCJvY1wiKSxcclxuICAgICAgICAgICAgICAgIFwiSGVhZGluZyA1XCI6IGUoXCJvZFwiKSxcclxuICAgICAgICAgICAgICAgIFwiSGVhZGluZyA2XCI6IGUoXCJvZVwiKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICByZXR1cm4gdC5jb25maWcuZ2V0KFwiaGVhZGluZy5vcHRpb25zXCIpLm1hcCh0ID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBpW3QudGl0bGVdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUgJiYgZSAhPSB0LnRpdGxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC50aXRsZSA9IGVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgal8gPSBpKDExKTtcclxuXHJcbiAgICAgICAgY2xhc3MgSF8gZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IERfKHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGUoXCJqZFwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBlKFwiamVcIik7XHJcbiAgICAgICAgICAgICAgICB0LnVpLmNvbXBvbmVudEZhY3RvcnkuYWRkKFwiaGVhZGluZ1wiLCBlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyB5cztcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gdC5jb21tYW5kcy5nZXQoXCJoZWFkaW5nXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSB0LmNvbW1hbmRzLmdldChcInBhcmFncmFwaFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsID0gW2FdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB7dHlwZTogXCJidXR0b25cIiwgbW9kZWw6IG5ldyBlXyh7bGFiZWw6IHQudGl0bGUsIGNsYXNzOiB0LmNsYXNzLCB3aXRoVGV4dDogdHJ1ZX0pfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQubW9kZWwgPT09IFwicGFyYWdyYXBoXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUubW9kZWwuYmluZChcImlzT25cIikudG8oYywgXCJ2YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUubW9kZWwuc2V0KFwiY29tbWFuZE5hbWVcIiwgXCJwYXJhZ3JhcGhcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsLnB1c2goYylcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUubW9kZWwuYmluZChcImlzT25cIikudG8oYSwgXCJ2YWx1ZVwiLCBlID0+IGUgPT09IHQubW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5tb2RlbC5zZXQoe2NvbW1hbmROYW1lOiBcImhlYWRpbmdcIiwgY29tbWFuZFZhbHVlOiB0Lm1vZGVsfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzLmFkZChlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgclt0Lm1vZGVsXSA9IHQudGl0bGVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZCA9IFdiKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIFViKGQsIHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGQuYnV0dG9uVmlldy5zZXQoe2lzT246IGZhbHNlLCB3aXRoVGV4dDogdHJ1ZSwgdG9vbHRpcDogb30pO1xyXG4gICAgICAgICAgICAgICAgICAgIGQuZXh0ZW5kVGVtcGxhdGUoe2F0dHJpYnV0ZXM6IHtjbGFzczogW1wiY2staGVhZGluZy1kcm9wZG93blwiXX19KTtcclxuICAgICAgICAgICAgICAgICAgICBkLmJpbmQoXCJpc0VuYWJsZWRcIikudG9NYW55KGwsIFwiaXNFbmFibGVkXCIsICguLi50KSA9PiB0LnNvbWUodCA9PiB0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZC5idXR0b25WaWV3LmJpbmQoXCJsYWJlbFwiKS50byhhLCBcInZhbHVlXCIsIGMsIFwidmFsdWVcIiwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQgfHwgZSAmJiBcInBhcmFncmFwaFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcltpXSA/IHJbaV0gOiBuXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhkLCBcImV4ZWN1dGVcIiwgZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuZXhlY3V0ZShlLnNvdXJjZS5jb21tYW5kTmFtZSwgZS5zb3VyY2UuY29tbWFuZFZhbHVlID8ge3ZhbHVlOiBlLnNvdXJjZS5jb21tYW5kVmFsdWV9IDogdW5kZWZpbmVkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBXXyBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCByZXF1aXJlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbRl8sIEhfXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJIZWFkaW5nXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgcV8ge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0YWNrID0gW11cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWRkKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9zdGFjaztcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpWzBdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5zZXJ0RGVzY3JpcHRvcih0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBpWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4gIT09IG8gJiYgIVVfKG4sIG8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiY2hhbmdlOnRvcFwiLCB7b2xkRGVzY3JpcHRvcjogbiwgbmV3RGVzY3JpcHRvcjogbywgd3JpdGVyOiBlfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVtb3ZlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9zdGFjaztcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpWzBdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlRGVzY3JpcHRvcih0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBpWzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4gIT09IG8gJiYgIVVfKG4sIG8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiY2hhbmdlOnRvcFwiLCB7b2xkRGVzY3JpcHRvcjogbiwgbmV3RGVzY3JpcHRvcjogbywgd3JpdGVyOiBlfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2luc2VydERlc2NyaXB0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuX3N0YWNrO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuZmluZEluZGV4KGUgPT4gZS5pZCA9PT0gdC5pZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoVV8odCwgZVtpXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnNwbGljZShpLCAxKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbGV0IG4gPSAwO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKGVbbl0gJiYgJF8oZVtuXSwgdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBuKytcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGUuc3BsaWNlKG4sIDAsIHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZW1vdmVEZXNjcmlwdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLl9zdGFjaztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmZpbmRJbmRleChlID0+IGUuaWQgPT09IHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc3BsaWNlKGksIDEpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKHFfLCBkcyk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFVfKHQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQgJiYgZSAmJiB0LnByaW9yaXR5ID09IGUucHJpb3JpdHkgJiYgR18odC5jbGFzc2VzKSA9PSBHXyhlLmNsYXNzZXMpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiAkXyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGlmICh0LnByaW9yaXR5ID4gZS5wcmlvcml0eSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0LnByaW9yaXR5IDwgZS5wcmlvcml0eSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIEdfKHQuY2xhc3NlcykgPiBHXyhlLmNsYXNzZXMpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBHXyh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHQpID8gdC5zb3J0KCkuam9pbihcIixcIikgOiB0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgS18gPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDE2IDE2XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNNCAwdjFIMXYzSDBWLjVBLjUuNSAwIDAgMSAuNSAwSDR6bTggMGgzLjVhLjUuNSAwIDAgMSAuNS41VjRoLTFWMWgtM1Ywek00IDE2SC41YS41LjUgMCAwIDEtLjUtLjVWMTJoMXYzaDN2MXptOCAwdi0xaDN2LTNoMXYzLjVhLjUuNSAwIDAgMS0uNS41SDEyelwiLz48cGF0aCBmaWxsLW9wYWNpdHk9XCIuMjU2XCIgZD1cIk0xIDFoMTR2MTRIMXpcIi8+PGcgY2xhc3M9XCJjay1pY29uX19zZWxlY3RlZC1pbmRpY2F0b3JcIj48cGF0aCBkPVwiTTcgMGgydjFIN1Ywek0wIDdoMXYySDBWN3ptMTUgMGgxdjJoLTFWN3ptLTggOGgydjFIN3YtMXpcIi8+PHBhdGggZmlsbC1vcGFjaXR5PVwiLjI1NFwiIGQ9XCJNMSAxaDE0djE0SDF6XCIvPjwvZz48L3N2Zz4nO1xyXG4gICAgICAgIGNvbnN0IEpfID0gXCJjay13aWRnZXRcIjtcclxuICAgICAgICBjb25zdCBZXyA9IFwiY2std2lkZ2V0X3NlbGVjdGVkXCI7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFFfKHQpIHtcclxuICAgICAgICAgICAgaWYgKCF0LmlzKFwiZWxlbWVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICEhdC5nZXRDdXN0b21Qcm9wZXJ0eShcIndpZGdldFwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWF8odCwgZSwgaSA9IHt9KSB7XHJcbiAgICAgICAgICAgIGlmICghQWwuaXNFZGdlKSB7XHJcbiAgICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZShcImNvbnRlbnRlZGl0YWJsZVwiLCBcImZhbHNlXCIsIHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZS5hZGRDbGFzcyhKXywgdCk7XHJcbiAgICAgICAgICAgIGUuc2V0Q3VzdG9tUHJvcGVydHkoXCJ3aWRnZXRcIiwgdHJ1ZSwgdCk7XHJcbiAgICAgICAgICAgIHQuZ2V0RmlsbGVyT2Zmc2V0ID0gcnY7XHJcbiAgICAgICAgICAgIGlmIChpLmxhYmVsKSB7XHJcbiAgICAgICAgICAgICAgICB0dih0LCBpLmxhYmVsLCBlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpLmhhc1NlbGVjdGlvbkhhbmRsZSkge1xyXG4gICAgICAgICAgICAgICAgc3YodCwgZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBaXyh0LCBlLCAodCwgZSwgaSkgPT4gaS5hZGRDbGFzcyhuKGUuY2xhc3NlcyksIHQpLCAodCwgZSwgaSkgPT4gaS5yZW1vdmVDbGFzcyhuKGUuY2xhc3NlcyksIHQpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHQ7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBuKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHQpID8gdCA6IFt0XVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBaXyh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgcV87XHJcbiAgICAgICAgICAgIG8ub24oXCJjaGFuZ2U6dG9wXCIsIChlLCBvKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoby5vbGREZXNjcmlwdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbih0LCBvLm9sZERlc2NyaXB0b3IsIG8ud3JpdGVyKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG8ubmV3RGVzY3JpcHRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGkodCwgby5uZXdEZXNjcmlwdG9yLCBvLndyaXRlcilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGUuc2V0Q3VzdG9tUHJvcGVydHkoXCJhZGRIaWdobGlnaHRcIiwgKHQsIGUsIGkpID0+IG8uYWRkKGUsIGkpLCB0KTtcclxuICAgICAgICAgICAgZS5zZXRDdXN0b21Qcm9wZXJ0eShcInJlbW92ZUhpZ2hsaWdodFwiLCAodCwgZSwgaSkgPT4gby5yZW1vdmUoZSwgaSksIHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB0dih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGkuc2V0Q3VzdG9tUHJvcGVydHkoXCJ3aWRnZXRMYWJlbFwiLCBlLCB0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZXYodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5nZXRDdXN0b21Qcm9wZXJ0eShcIndpZGdldExhYmVsXCIpO1xyXG4gICAgICAgICAgICBpZiAoIWUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHR5cGVvZiBlID09IFwiZnVuY3Rpb25cIiA/IGUoKSA6IGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGl2KHQsIGUpIHtcclxuICAgICAgICAgICAgZS5hZGRDbGFzcyhbXCJjay1lZGl0b3JfX2VkaXRhYmxlXCIsIFwiY2stZWRpdG9yX19uZXN0ZWQtZWRpdGFibGVcIl0sIHQpO1xyXG4gICAgICAgICAgICBpZiAoIUFsLmlzRWRnZSkge1xyXG4gICAgICAgICAgICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJjb250ZW50ZWRpdGFibGVcIiwgdC5pc1JlYWRPbmx5ID8gXCJmYWxzZVwiIDogXCJ0cnVlXCIsIHQpO1xyXG4gICAgICAgICAgICAgICAgdC5vbihcImNoYW5nZTppc1JlYWRPbmx5XCIsIChpLCBuLCBvKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJjb250ZW50ZWRpdGFibGVcIiwgbyA/IFwiZmFsc2VcIiA6IFwidHJ1ZVwiLCB0KVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0Lm9uKFwiY2hhbmdlOmlzRm9jdXNlZFwiLCAoaSwgbiwgbykgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICBlLmFkZENsYXNzKFwiY2stZWRpdG9yX19uZXN0ZWQtZWRpdGFibGVfZm9jdXNlZFwiLCB0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnJlbW92ZUNsYXNzKFwiY2stZWRpdG9yX19uZXN0ZWQtZWRpdGFibGVfZm9jdXNlZFwiLCB0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG52KHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHQuZ2V0U2VsZWN0ZWRFbGVtZW50KCk7XHJcbiAgICAgICAgICAgIGlmIChpICYmIGUuc2NoZW1hLmlzQmxvY2soaSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlLmNyZWF0ZVBvc2l0aW9uQWZ0ZXIoaSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBuID0gdC5nZXRTZWxlY3RlZEJsb2NrcygpLm5leHQoKS52YWx1ZTtcclxuICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgIGlmIChuLmlzRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5jcmVhdGVQb3NpdGlvbkF0KG4sIDApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5jcmVhdGVQb3NpdGlvbkFmdGVyKG4pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuZm9jdXMuaXNUb3VjaGluZyhpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5jcmVhdGVQb3NpdGlvbkJlZm9yZShuKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0LmZvY3VzXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBvdih0LCBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qge21hcHBlcjogbywgdmlld1Bvc2l0aW9uOiByfSA9IG47XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gby5maW5kTWFwcGVkVmlld0FuY2VzdG9yKHIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gby50b01vZGVsRWxlbWVudChzKTtcclxuICAgICAgICAgICAgICAgIG4ubW9kZWxQb3NpdGlvbiA9IHQuY3JlYXRlUG9zaXRpb25BdChhLCByLmlzQXRTdGFydCA/IFwiYmVmb3JlXCIgOiBcImFmdGVyXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJ2KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gc3YodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gZS5jcmVhdGVVSUVsZW1lbnQoXCJkaXZcIiwge2NsYXNzOiBcImNrIGNrLXdpZGdldF9fc2VsZWN0aW9uLWhhbmRsZVwifSwgKGZ1bmN0aW9uICh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy50b0RvbUVsZW1lbnQodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gbmV3IGNiO1xyXG4gICAgICAgICAgICAgICAgaS5zZXQoXCJjb250ZW50XCIsIEtfKTtcclxuICAgICAgICAgICAgICAgIGkucmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBlLmFwcGVuZENoaWxkKGkuZWxlbWVudCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIGUuaW5zZXJ0KGUuY3JlYXRlUG9zaXRpb25BdCh0LCAwKSwgaSk7XHJcbiAgICAgICAgICAgIGUuYWRkQ2xhc3MoW1wiY2std2lkZ2V0X3dpdGgtc2VsZWN0aW9uLWhhbmRsZVwiXSwgdClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGF2IGV4dGVuZHMgancge1xyXG4gICAgICAgICAgICByZWZyZXNoKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSBjdih0aGlzLmVkaXRvci5tb2RlbClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXhlY3V0ZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIHQuY2hhbmdlKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmNyZWF0ZUVsZW1lbnQoXCJob3Jpem9udGFsTGluZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0Lmluc2VydENvbnRlbnQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG4gPSBpLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuICYmIHQuc2NoZW1hLmNoZWNrQ2hpbGQobiwgXCIkdGV4dFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW8gJiYgdC5zY2hlbWEuY2hlY2tDaGlsZChpLnBhcmVudCwgXCJwYXJhZ3JhcGhcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IGUuY3JlYXRlRWxlbWVudChcInBhcmFncmFwaFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5pbnNlcnRDb250ZW50KG4sIGUuY3JlYXRlUG9zaXRpb25BZnRlcihpKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zZXRTZWxlY3Rpb24obiwgMClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBjdih0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LnNjaGVtYTtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHQuZG9jdW1lbnQuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICByZXR1cm4gbHYoaSwgZSwgdCkgJiYgIWR2KGksIGUpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBsdih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSB1dih0LCBpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGUuY2hlY2tDaGlsZChuLCBcImhvcml6b250YWxMaW5lXCIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkdih0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LmdldFNlbGVjdGVkRWxlbWVudCgpO1xyXG4gICAgICAgICAgICByZXR1cm4gaSAmJiBlLmlzT2JqZWN0KGkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB1dih0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBudih0LCBlKTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGkucGFyZW50O1xyXG4gICAgICAgICAgICBpZiAobi5pc0VtcHR5ICYmICFuLmlzKFwiJHJvb3RcIikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuLnBhcmVudFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgaHYgPSBpKDU2KTtcclxuXHJcbiAgICAgICAgY2xhc3MgZnYgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkhvcml6b250YWxMaW5lRWRpdGluZ1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5tb2RlbC5zY2hlbWE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuY29udmVyc2lvbjtcclxuICAgICAgICAgICAgICAgIGUucmVnaXN0ZXIoXCJob3Jpem9udGFsTGluZVwiLCB7aXNPYmplY3Q6IHRydWUsIGFsbG93V2hlcmU6IFwiJGJsb2NrXCJ9KTtcclxuICAgICAgICAgICAgICAgIG4uZm9yKFwiZGF0YURvd25jYXN0XCIpLmVsZW1lbnRUb0VsZW1lbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiBcImhvcml6b250YWxMaW5lXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlldzogKHQsIGUpID0+IGUuY3JlYXRlRW1wdHlFbGVtZW50KFwiaHJcIilcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbi5mb3IoXCJlZGl0aW5nRG93bmNhc3RcIikuZWxlbWVudFRvRWxlbWVudCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IFwiaG9yaXpvbnRhbExpbmVcIiwgdmlldzogKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGkoXCJqZlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IGUuY3JlYXRlQ29udGFpbmVyRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IGUuY3JlYXRlRW1wdHlFbGVtZW50KFwiaHJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuYWRkQ2xhc3MoXCJjay1ob3Jpem9udGFsLWxpbmVcIiwgbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0Q3VzdG9tUHJvcGVydHkoXCJoclwiLCB0cnVlLCBvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5pbnNlcnQoZS5jcmVhdGVQb3NpdGlvbkF0KG8sIDApLCByKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGd2KG8sIGUsIG4pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBuLmZvcihcInVwY2FzdFwiKS5lbGVtZW50VG9FbGVtZW50KHt2aWV3OiBcImhyXCIsIG1vZGVsOiBcImhvcml6b250YWxMaW5lXCJ9KTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwiaG9yaXpvbnRhbExpbmVcIiwgbmV3IGF2KHQpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBndih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGUuc2V0Q3VzdG9tUHJvcGVydHkoXCJob3Jpem9udGFsTGluZVwiLCB0cnVlLCB0KTtcclxuICAgICAgICAgICAgcmV0dXJuIFhfKHQsIGUsIHtsYWJlbDogaX0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbXYgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMiA5aDE2djJIMnpcIi8+PC9zdmc+JztcclxuXHJcbiAgICAgICAgY2xhc3MgcHYgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC50O1xyXG4gICAgICAgICAgICAgICAgdC51aS5jb21wb25lbnRGYWN0b3J5LmFkZChcImhvcml6b250YWxMaW5lXCIsIGkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LmNvbW1hbmRzLmdldChcImhvcml6b250YWxMaW5lXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgaGIoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5zZXQoe2xhYmVsOiBlKFwiamZcIiksIGljb246IG12LCB0b29sdGlwOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5iaW5kKFwiaXNFbmFibGVkXCIpLnRvKG4sIFwiaXNFbmFibGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8obywgXCJleGVjdXRlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlKFwiaG9yaXpvbnRhbExpbmVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuZWRpdGluZy52aWV3LmZvY3VzKClcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgYnYgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2Z2LCBwdl1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSG9yaXpvbnRhbExpbmVcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyB3diBleHRlbmRzIEdkIHtcclxuICAgICAgICAgICAgb2JzZXJ2ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHQsIFwibG9hZFwiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLnRhcmdldDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaS50YWdOYW1lID09IFwiSU1HXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZmlyZUV2ZW50cyhlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHt1c2VDYXB0dXJlOiB0cnVlfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2ZpcmVFdmVudHModCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb2N1bWVudC5maXJlKFwibGF5b3V0Q2hhbmdlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRvY3VtZW50LmZpcmUoXCJpbWFnZUxvYWRlZFwiLCB0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBrdih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGUuc2V0Q3VzdG9tUHJvcGVydHkoXCJpbWFnZVwiLCB0cnVlLCB0KTtcclxuICAgICAgICAgICAgcmV0dXJuIFhfKHQsIGUsIHtsYWJlbDogbn0pO1xyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBBdih0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLmdldEF0dHJpYnV0ZShcImFsdFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuID8gYCR7bn0gJHtpfWAgOiBpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF92KHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICEhdC5nZXRDdXN0b21Qcm9wZXJ0eShcImltYWdlXCIpICYmIFFfKHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB2dih0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmdldFNlbGVjdGVkRWxlbWVudCgpO1xyXG4gICAgICAgICAgICBpZiAoZSAmJiBfdihlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geXYodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gISF0ICYmIHQuaXMoXCJpbWFnZVwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geHYodCwgZSwgaSA9IHt9KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0LmNyZWF0ZUVsZW1lbnQoXCJpbWFnZVwiLCBpKTtcclxuICAgICAgICAgICAgY29uc3QgbyA9IG52KGUuZG9jdW1lbnQuc2VsZWN0aW9uLCBlKTtcclxuICAgICAgICAgICAgZS5pbnNlcnRDb250ZW50KG4sIG8pO1xyXG4gICAgICAgICAgICBpZiAobi5wYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHQuc2V0U2VsZWN0aW9uKG4sIFwib25cIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQ3YodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5zY2hlbWE7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LmRvY3VtZW50LnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgcmV0dXJuIFR2KGksIGUsIHQpICYmICFQdihpLCBlKSAmJiBTdihpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQXYodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0LmdldENoaWxkcmVuKCkpLmZpbmQodCA9PiB0LmlzKFwiaW1nXCIpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVHYodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBjb25zdCBuID0gRXYodCwgaSk7XHJcbiAgICAgICAgICAgIHJldHVybiBlLmNoZWNrQ2hpbGQobiwgXCJpbWFnZVwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gUHYodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5nZXRTZWxlY3RlZEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGkgJiYgZS5pc09iamVjdChpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gU3YodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gWy4uLnQuZm9jdXMuZ2V0QW5jZXN0b3JzKCldLmV2ZXJ5KHQgPT4gIXQuaXMoXCJpbWFnZVwiKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEV2KHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IG52KHQsIGUpO1xyXG4gICAgICAgICAgICBjb25zdCBuID0gaS5wYXJlbnQ7XHJcbiAgICAgICAgICAgIGlmIChuLmlzRW1wdHkgJiYgIW4uaXMoXCIkcm9vdFwiKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG4ucGFyZW50XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFJ2KCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlLm9uKFwiZWxlbWVudDpmaWd1cmVcIiwgdClcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHQodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpLmNvbnN1bWFibGUudGVzdChlLnZpZXdJdGVtLCB7bmFtZTogdHJ1ZSwgY2xhc3NlczogXCJpbWFnZVwifSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBBdihlLnZpZXdJdGVtKTtcclxuICAgICAgICAgICAgICAgIGlmICghbiB8fCAhbi5oYXNBdHRyaWJ1dGUoXCJzcmNcIikgfHwgIWkuY29uc3VtYWJsZS50ZXN0KG4sIHtuYW1lOiB0cnVlfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBpLmNvbnZlcnRJdGVtKG4sIGUubW9kZWxDdXJzb3IpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IFd3KG8ubW9kZWxSYW5nZS5nZXRJdGVtcygpKTtcclxuICAgICAgICAgICAgICAgIGlmICghcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaS5jb252ZXJ0Q2hpbGRyZW4oZS52aWV3SXRlbSwgaS53cml0ZXIuY3JlYXRlUG9zaXRpb25BdChyLCAwKSk7XHJcbiAgICAgICAgICAgICAgICBlLm1vZGVsUmFuZ2UgPSBvLm1vZGVsUmFuZ2U7XHJcbiAgICAgICAgICAgICAgICBlLm1vZGVsQ3Vyc29yID0gby5tb2RlbEN1cnNvclxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBPdigpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgZS5vbihcImF0dHJpYnV0ZTpzcmNzZXQ6aW1hZ2VcIiwgdClcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHQodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpLmNvbnN1bWFibGUuY29uc3VtZShlLml0ZW0sIHQubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLndyaXRlcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBpLm1hcHBlci50b1ZpZXdFbGVtZW50KGUuaXRlbSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gQXYobyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5hdHRyaWJ1dGVOZXdWYWx1ZSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLmF0dHJpYnV0ZU9sZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbi5yZW1vdmVBdHRyaWJ1dGUoXCJzcmNzZXRcIiwgcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ucmVtb3ZlQXR0cmlidXRlKFwic2l6ZXNcIiwgcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LndpZHRoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLnJlbW92ZUF0dHJpYnV0ZShcIndpZHRoXCIsIHIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLmF0dHJpYnV0ZU5ld1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbi5zZXRBdHRyaWJ1dGUoXCJzcmNzZXRcIiwgdC5kYXRhLCByKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbi5zZXRBdHRyaWJ1dGUoXCJzaXplc1wiLCBcIjEwMHZ3XCIsIHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodC53aWR0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5zZXRBdHRyaWJ1dGUoXCJ3aWR0aFwiLCB0LndpZHRoLCByKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBJdih0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpID0+IHtcclxuICAgICAgICAgICAgICAgIGkub24oYGF0dHJpYnV0ZToke3R9OmltYWdlYCwgZSlcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGUodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpLmNvbnN1bWFibGUuY29uc3VtZShlLml0ZW0sIHQubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLndyaXRlcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBpLm1hcHBlci50b1ZpZXdFbGVtZW50KGUuaXRlbSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gQXYobyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5hdHRyaWJ1dGVOZXdWYWx1ZSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG4uc2V0QXR0cmlidXRlKGUuYXR0cmlidXRlS2V5LCBlLmF0dHJpYnV0ZU5ld1ZhbHVlLCByKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuLnJlbW92ZUF0dHJpYnV0ZShlLmF0dHJpYnV0ZUtleSwgcilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgVnYgZXh0ZW5kcyBqdyB7XHJcbiAgICAgICAgICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IEN2KHRoaXMuZWRpdG9yLm1vZGVsKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBleGVjdXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGUuY2hhbmdlKGkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBBcnJheS5pc0FycmF5KHQuc291cmNlKSA/IHQuc291cmNlIDogW3Quc291cmNlXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4dihpLCBlLCB7c3JjOiB0fSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBOdiBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSW1hZ2VFZGl0aW5nXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm1vZGVsLnNjaGVtYTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5jb252ZXJzaW9uO1xyXG4gICAgICAgICAgICAgICAgdC5lZGl0aW5nLnZpZXcuYWRkT2JzZXJ2ZXIod3YpO1xyXG4gICAgICAgICAgICAgICAgZS5yZWdpc3RlcihcImltYWdlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICBpc09iamVjdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBpc0Jsb2NrOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93V2hlcmU6IFwiJGJsb2NrXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dBdHRyaWJ1dGVzOiBbXCJhbHRcIiwgXCJzcmNcIiwgXCJzcmNzZXRcIl1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbi5mb3IoXCJkYXRhRG93bmNhc3RcIikuZWxlbWVudFRvRWxlbWVudCh7bW9kZWw6IFwiaW1hZ2VcIiwgdmlldzogKHQsIGUpID0+IE12KGUpfSk7XHJcbiAgICAgICAgICAgICAgICBuLmZvcihcImVkaXRpbmdEb3duY2FzdFwiKS5lbGVtZW50VG9FbGVtZW50KHttb2RlbDogXCJpbWFnZVwiLCB2aWV3OiAodCwgZSkgPT4ga3YoTXYoZSksIGUsIGkoXCJqeFwiKSl9KTtcclxuICAgICAgICAgICAgICAgIG4uZm9yKFwiZG93bmNhc3RcIikuYWRkKEl2KFwic3JjXCIpKS5hZGQoSXYoXCJhbHRcIikpLmFkZChPdigpKTtcclxuICAgICAgICAgICAgICAgIG4uZm9yKFwidXBjYXN0XCIpLmVsZW1lbnRUb0VsZW1lbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXc6IHtuYW1lOiBcImltZ1wiLCBhdHRyaWJ1dGVzOiB7c3JjOiB0cnVlfX0sXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6ICh0LCBlKSA9PiBlLmNyZWF0ZUVsZW1lbnQoXCJpbWFnZVwiLCB7c3JjOiB0LmdldEF0dHJpYnV0ZShcInNyY1wiKX0pXHJcbiAgICAgICAgICAgICAgICB9KS5hdHRyaWJ1dGVUb0F0dHJpYnV0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlldzoge25hbWU6IFwiaW1nXCIsIGtleTogXCJhbHRcIn0sXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IFwiYWx0XCJcclxuICAgICAgICAgICAgICAgIH0pLmF0dHJpYnV0ZVRvQXR0cmlidXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3OiB7bmFtZTogXCJpbWdcIiwga2V5OiBcInNyY3NldFwifSwgbW9kZWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5OiBcInNyY3NldFwiLCB2YWx1ZTogdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0ge2RhdGE6IHQuZ2V0QXR0cmlidXRlKFwic3Jjc2V0XCIpfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lmhhc0F0dHJpYnV0ZShcIndpZHRoXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS53aWR0aCA9IHQuZ2V0QXR0cmlidXRlKFwid2lkdGhcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KS5hZGQoUnYoKSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcImltYWdlSW5zZXJ0XCIsIG5ldyBWdih0KSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gTXYodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5jcmVhdGVFbXB0eUVsZW1lbnQoXCJpbWdcIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LmNyZWF0ZUNvbnRhaW5lckVsZW1lbnQoXCJmaWd1cmVcIiwge2NsYXNzOiBcImltYWdlXCJ9KTtcclxuICAgICAgICAgICAgdC5pbnNlcnQodC5jcmVhdGVQb3NpdGlvbkF0KGksIDApLCBlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIEJ2IGV4dGVuZHMgSnUge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9tRXZlbnRUeXBlID0gXCJtb3VzZWRvd25cIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvbkRvbUV2ZW50KHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh0LnR5cGUsIHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciB6diA9IGkoNTgpO1xyXG4gICAgICAgIGNvbnN0IEx2ID0gQmwoXCJDdHJsK0FcIik7XHJcblxyXG4gICAgICAgIGNsYXNzIEZ2IGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJXaWRnZXRcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLmVkaXRpbmcudmlldztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNseVNlbGVjdGVkID0gbmV3IFNldDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmVkaXRpbmcuZG93bmNhc3REaXNwYXRjaGVyLm9uKFwic2VsZWN0aW9uXCIsICh0LCBlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2xlYXJQcmV2aW91c2x5U2VsZWN0ZWRXaWRnZXRzKGkud3JpdGVyKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gaS53cml0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IG4uZG9jdW1lbnQuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBvLmdldFNlbGVjdGVkRWxlbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygby5nZXRSYW5nZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGUuaXRlbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChRXyh0KSAmJiAhV3YodCwgcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmFkZENsYXNzKFlfLCB0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcmV2aW91c2x5U2VsZWN0ZWQuYWRkKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0ID09IHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5zZXRTZWxlY3Rpb24oby5nZXRSYW5nZXMoKSwge2Zha2U6IHRydWUsIGxhYmVsOiBldihyKX0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImxvd1wifSk7XHJcbiAgICAgICAgICAgICAgICB0LmFkZE9ic2VydmVyKEJ2KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8oZSwgXCJtb3VzZWRvd25cIiwgKC4uLnQpID0+IHRoaXMuX29uTW91c2Vkb3duKC4uLnQpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8oZSwgXCJrZXlkb3duXCIsICguLi50KSA9PiB0aGlzLl9vbktleWRvd24oLi4udCksIHtwcmlvcml0eTogXCJoaWdoXCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8oZSwgXCJkZWxldGVcIiwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faGFuZGxlRGVsZXRlKGUuZGlyZWN0aW9uID09IFwiZm9yd2FyZFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc3RvcCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImhpZ2hcIn0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9vbk1vdXNlZG93bih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5lZGl0aW5nLnZpZXc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gbi5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGxldCByID0gZS50YXJnZXQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoSHYocikpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoQWwuaXNTYWZhcmkgJiYgZS5kb21FdmVudC5kZXRhaWwgPj0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gaS5lZGl0aW5nLm1hcHBlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQudG9Nb2RlbEVsZW1lbnQocik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLm1vZGVsLmNoYW5nZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0U2VsZWN0aW9uKG4sIFwiaW5cIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIVFfKHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgciA9IHIuZmluZEFuY2VzdG9yKFFfKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFvLmlzRm9jdXNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG4uZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IGkuZWRpdGluZy5tYXBwZXIudG9Nb2RlbEVsZW1lbnQocik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zZXRTZWxlY3Rpb25PdmVyRWxlbWVudChzKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfb25LZXlkb3duKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmtleUNvZGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5lZGl0b3IubG9jYWxlLmNvbnRlbnRMYW5ndWFnZURpcmVjdGlvbiA9PT0gXCJsdHJcIjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBpID09IE5sLmFycm93ZG93biB8fCBpID09IE5sW24gPyBcImFycm93cmlnaHRcIiA6IFwiYXJyb3dsZWZ0XCJdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGlmIChEdihpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLl9oYW5kbGVBcnJvd0tleXMobylcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoanYoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByID0gdGhpcy5fc2VsZWN0QWxsTmVzdGVkRWRpdGFibGVDb250ZW50KCkgfHwgdGhpcy5fc2VsZWN0QWxsQ29udGVudCgpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkgPT09IE5sLmVudGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgciA9IHRoaXMuX2hhbmRsZUVudGVyS2V5KGUuc2hpZnRLZXkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0LnN0b3AoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfaGFuZGxlRGVsZXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmVkaXRvci5pc1JlYWRPbmx5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lZGl0b3IubW9kZWwuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9nZXRPYmplY3RFbGVtZW50TmV4dFRvU2VsZWN0aW9uKHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5tb2RlbC5jaGFuZ2UodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlID0gaS5hbmNob3IucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAoZS5pc0VtcHR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgPSBpLnBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucmVtb3ZlKGkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0U2VsZWN0aW9uT3ZlckVsZW1lbnQobilcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfaGFuZGxlQXJyb3dLZXlzKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLnNjaGVtYTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG4uc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG8uZ2V0U2VsZWN0ZWRFbGVtZW50KCk7XHJcbiAgICAgICAgICAgICAgICBpZiAociAmJiBpLmlzT2JqZWN0KHIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQgPyBvLmdldExhc3RQb3NpdGlvbigpIDogby5nZXRGaXJzdFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IGkuZ2V0TmVhcmVzdFNlbGVjdGlvblJhbmdlKG4sIHQgPyBcImZvcndhcmRcIiA6IFwiYmFja3dhcmRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5jaGFuZ2UodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldFNlbGVjdGlvbihyKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFvLmlzQ29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gdGhpcy5fZ2V0T2JqZWN0RWxlbWVudE5leHRUb1NlbGVjdGlvbih0KTtcclxuICAgICAgICAgICAgICAgIGlmICghIXMgJiYgaS5pc09iamVjdChzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFNlbGVjdGlvbk92ZXJFbGVtZW50KHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9oYW5kbGVFbnRlcktleSh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5nZXRTZWxlY3RlZEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgICAgIGlmIChxdihuLCBlLnNjaGVtYSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLmNoYW5nZShpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG8gPSBpLmNyZWF0ZVBvc2l0aW9uQXQobiwgdCA/IFwiYmVmb3JlXCIgOiBcImFmdGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gaS5jcmVhdGVFbGVtZW50KFwicGFyYWdyYXBoXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5zY2hlbWEuaXNCbG9jayhuLnBhcmVudCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLnNjaGVtYS5maW5kQWxsb3dlZFBhcmVudChvLCByKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBpLnNwbGl0KG8sIHQpLnBvc2l0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5pbnNlcnQociwgbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0U2VsZWN0aW9uKHIsIFwiaW5cIilcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2VsZWN0QWxsTmVzdGVkRWRpdGFibGVDb250ZW50KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZG9jdW1lbnQuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuc2NoZW1hLmdldExpbWl0RWxlbWVudChlKTtcclxuICAgICAgICAgICAgICAgIGlmIChlLmdldEZpcnN0UmFuZ2UoKS5yb290ID09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHQuY2hhbmdlKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0U2VsZWN0aW9uKHQuY3JlYXRlUmFuZ2VJbihpKSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3NlbGVjdEFsbENvbnRlbnQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lZGl0b3IuZWRpdGluZztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLnZpZXc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuLnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBvLmdldFNlbGVjdGVkRWxlbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHIgJiYgUV8ocikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5tYXBwZXIudG9Nb2RlbEVsZW1lbnQoci5wYXJlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHQuY2hhbmdlKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnNldFNlbGVjdGlvbih0LmNyZWF0ZVJhbmdlSW4oaSkpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2V0U2VsZWN0aW9uT3ZlckVsZW1lbnQodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IubW9kZWwuY2hhbmdlKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc2V0U2VsZWN0aW9uKGUuY3JlYXRlUmFuZ2VPbih0KSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRPYmplY3RFbGVtZW50TmV4dFRvU2VsZWN0aW9uKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLnNjaGVtYTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLmRvY3VtZW50LnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBlLmNyZWF0ZVNlbGVjdGlvbihuKTtcclxuICAgICAgICAgICAgICAgIGUubW9kaWZ5U2VsZWN0aW9uKG8sIHtkaXJlY3Rpb246IHQgPyBcImZvcndhcmRcIiA6IFwiYmFja3dhcmRcIn0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHQgPyBvLmZvY3VzLm5vZGVCZWZvcmUgOiBvLmZvY3VzLm5vZGVBZnRlcjtcclxuICAgICAgICAgICAgICAgIGlmICghIXIgJiYgaS5pc09iamVjdChyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY2xlYXJQcmV2aW91c2x5U2VsZWN0ZWRXaWRnZXRzKHQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLl9wcmV2aW91c2x5U2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LnJlbW92ZUNsYXNzKFlfLCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJldmlvdXNseVNlbGVjdGVkLmNsZWFyKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRHYodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdCA9PSBObC5hcnJvd3JpZ2h0IHx8IHQgPT0gTmwuYXJyb3dsZWZ0IHx8IHQgPT0gTmwuYXJyb3d1cCB8fCB0ID09IE5sLmFycm93ZG93blxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24ganYodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWwodCkgPT0gTHZcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEh2KHQpIHtcclxuICAgICAgICAgICAgd2hpbGUgKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0LmlzKFwiZWRpdGFibGVFbGVtZW50XCIpICYmICF0LmlzKFwicm9vdEVsZW1lbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKFFfKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0ID0gdC5wYXJlbnRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFd2KHQsIGUpIHtcclxuICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0LmdldEFuY2VzdG9ycygpKS5pbmNsdWRlcyhlKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcXYodCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdCAmJiBlLmlzT2JqZWN0KHQpICYmICFlLmlzSW5saW5lKHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBVdiBleHRlbmRzIGp3IHtcclxuICAgICAgICAgICAgcmVmcmVzaCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24uZ2V0U2VsZWN0ZWRFbGVtZW50KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IHl2KHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHl2KHQpICYmIHQuaGFzQXR0cmlidXRlKFwiYWx0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHQuZ2V0QXR0cmlidXRlKFwiYWx0XCIpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBleGVjdXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmRvY3VtZW50LnNlbGVjdGlvbi5nZXRTZWxlY3RlZEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgICAgIGUuY2hhbmdlKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKFwiYWx0XCIsIHQubmV3VmFsdWUsIGkpXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyAkdiBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSW1hZ2VUZXh0QWx0ZXJuYXRpdmVFZGl0aW5nXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmNvbW1hbmRzLmFkZChcImltYWdlVGV4dEFsdGVybmF0aXZlXCIsIG5ldyBVdih0aGlzLmVkaXRvcikpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBHdiA9IGkoNjApO1xyXG5cclxuICAgICAgICBjbGFzcyBLdiBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gYGNrLWlucHV0LSR7aXMoKX1gO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGBjay1zdGF0dXMtJHtpcygpfWA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImxhYmVsXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJ2YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaXNSZWFkT25seVwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImVycm9yVGV4dFwiLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaW5mb1RleHRcIiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVsVmlldyA9IHRoaXMuX2NyZWF0ZUxhYmVsVmlldyhpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRWaWV3ID0gdGhpcy5fY3JlYXRlSW5wdXRWaWV3KGUsIGksIG4pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXNWaWV3ID0gdGhpcy5fY3JlYXRlU3RhdHVzVmlldyhuKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmluZChcIl9zdGF0dXNUZXh0XCIpLnRvKHRoaXMsIFwiZXJyb3JUZXh0XCIsIHRoaXMsIFwiaW5mb1RleHRcIiwgKHQsIGUpID0+IHQgfHwgZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gdGhpcy5iaW5kVGVtcGxhdGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge2NsYXNzOiBbXCJja1wiLCBcImNrLWxhYmVsZWQtaW5wdXRcIiwgby5pZihcImlzUmVhZE9ubHlcIiwgXCJjay1kaXNhYmxlZFwiKV19LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbdGhpcy5sYWJlbFZpZXcsIHRoaXMuaW5wdXRWaWV3LCB0aGlzLnN0YXR1c1ZpZXddXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlTGFiZWxWaWV3KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgTWsodGhpcy5sb2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgZS5mb3IgPSB0O1xyXG4gICAgICAgICAgICAgICAgZS5iaW5kKFwidGV4dFwiKS50byh0aGlzLCBcImxhYmVsXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUlucHV0Vmlldyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IHQodGhpcy5sb2NhbGUsIGkpO1xyXG4gICAgICAgICAgICAgICAgbi5pZCA9IGU7XHJcbiAgICAgICAgICAgICAgICBuLmFyaWFEZXNjcmliZWRCeUlkID0gaTtcclxuICAgICAgICAgICAgICAgIG4uYmluZChcInZhbHVlXCIpLnRvKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgbi5iaW5kKFwiaXNSZWFkT25seVwiKS50byh0aGlzKTtcclxuICAgICAgICAgICAgICAgIG4uYmluZChcImhhc0Vycm9yXCIpLnRvKHRoaXMsIFwiZXJyb3JUZXh0XCIsIHQgPT4gISF0KTtcclxuICAgICAgICAgICAgICAgIG4ub24oXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lcnJvclRleHQgPSBudWxsXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVTdGF0dXNWaWV3KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgR3AodGhpcy5sb2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuYmluZFRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgZS5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcImRpdlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFtcImNrXCIsIFwiY2stbGFiZWxlZC1pbnB1dF9fc3RhdHVzXCIsIGkuaWYoXCJlcnJvclRleHRcIiwgXCJjay1sYWJlbGVkLWlucHV0X19zdGF0dXNfZXJyb3JcIiksIGkuaWYoXCJfc3RhdHVzVGV4dFwiLCBcImNrLWhpZGRlblwiLCB0ID0+ICF0KV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiB0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb2xlOiBpLmlmKFwiZXJyb3JUZXh0XCIsIFwiYWxlcnRcIilcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbe3RleHQ6IGkudG8oXCJfc3RhdHVzVGV4dFwiKX1dXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGVjdCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRWaWV3LnNlbGVjdCgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvY3VzKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pbnB1dFZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgSnYgPSBpKDYyKTtcclxuXHJcbiAgICAgICAgY2xhc3MgWXYgZXh0ZW5kcyBHcCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJ2YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaWRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcInBsYWNlaG9sZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJpc1JlYWRPbmx5XCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaGFzRXJyb3JcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJhcmlhRGVzY3JpYmVkQnlJZFwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmJpbmRUZW1wbGF0ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGVtcGxhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZzogXCJpbnB1dFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJ0ZXh0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBbXCJja1wiLCBcImNrLWlucHV0XCIsIFwiY2staW5wdXQtdGV4dFwiLCBlLmlmKFwiaGFzRXJyb3JcIiwgXCJjay1lcnJvclwiKV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBlLnRvKFwiaWRcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBlLnRvKFwicGxhY2Vob2xkZXJcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRvbmx5OiBlLnRvKFwiaXNSZWFkT25seVwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmlhLWludmFsaWRcIjogZS5pZihcImhhc0Vycm9yXCIsIHRydWUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtZGVzY3JpYmVkYnlcIjogZS50byhcImFyaWFEZXNjcmliZWRCeUlkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvbjoge2lucHV0OiBlLnRvKFwiaW5wdXRcIil9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQudmFsdWUgPSAhdCAmJiB0ICE9PSAwID8gXCJcIiA6IHRcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0KHRoaXMudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbihcImNoYW5nZTp2YWx1ZVwiLCAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHQobilcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNlbGVjdCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5zZWxlY3QoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb2N1cygpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5mb2N1cygpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFF2KHt2aWV3OiB0fSkge1xyXG4gICAgICAgICAgICB0Lmxpc3RlblRvKHQuZWxlbWVudCwgXCJzdWJtaXRcIiwgKGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGkucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIHQuZmlyZShcInN1Ym1pdFwiKVxyXG4gICAgICAgICAgICB9LCB7dXNlQ2FwdHVyZTogdHJ1ZX0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgWHYgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNNi45NzIgMTYuNjE1YS45OTcuOTk3IDAgMCAxLS43NDQtLjI5MmwtNC41OTYtNC41OTZhMSAxIDAgMSAxIDEuNDE0LTEuNDE0bDMuOTI2IDMuOTI2IDkuOTM3LTkuOTM3YTEgMSAwIDAgMSAxLjQxNCAxLjQxNUw3LjcxNyAxNi4zMjNhLjk5Ny45OTcgMCAwIDEtLjc0NS4yOTJ6XCIvPjwvc3ZnPic7XHJcbiAgICAgICAgdmFyIFp2ID0gJzxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTExLjU5MSAxMC4xNzdsNC4yNDMgNC4yNDJhMSAxIDAgMCAxLTEuNDE1IDEuNDE1bC00LjI0Mi00LjI0My00LjI0MyA0LjI0M2ExIDEgMCAwIDEtMS40MTQtMS40MTVsNC4yNDMtNC4yNDJMNC41MiA1LjkzNEExIDEgMCAwIDEgNS45MzQgNC41Mmw0LjI0MyA0LjI0MyA0LjI0Mi00LjI0M2ExIDEgMCAxIDEgMS40MTUgMS40MTRsLTQuMjQzIDQuMjQzelwiLz48L3N2Zz4nO1xyXG4gICAgICAgIHZhciB0eSA9IGkoNjQpO1xyXG5cclxuICAgICAgICBjbGFzcyBleSBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5sb2NhbGUudDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNUcmFja2VyID0gbmV3IGZiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzdHJva2VzID0gbmV3IGRwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbGVkSW5wdXQgPSB0aGlzLl9jcmVhdGVMYWJlbGVkSW5wdXRWaWV3KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVCdXR0b25WaWV3ID0gdGhpcy5fY3JlYXRlQnV0dG9uKGUoXCJsb1wiKSwgWHYsIFwiY2stYnV0dG9uLXNhdmVcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNhdmVCdXR0b25WaWV3LnR5cGUgPSBcInN1Ym1pdFwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxCdXR0b25WaWV3ID0gdGhpcy5fY3JlYXRlQnV0dG9uKGUoXCJscFwiKSwgWnYsIFwiY2stYnV0dG9uLWNhbmNlbFwiLCBcImNhbmNlbFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzYWJsZXMgPSBuZXcgYnA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c0N5Y2xlciA9IG5ldyB5Yih7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNhYmxlczogdGhpcy5fZm9jdXNhYmxlcyxcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c1RyYWNrZXI6IHRoaXMuZm9jdXNUcmFja2VyLFxyXG4gICAgICAgICAgICAgICAgICAgIGtleXN0cm9rZUhhbmRsZXI6IHRoaXMua2V5c3Ryb2tlcyxcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25zOiB7Zm9jdXNQcmV2aW91czogXCJzaGlmdCArIHRhYlwiLCBmb2N1c05leHQ6IFwidGFiXCJ9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGVtcGxhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZzogXCJmb3JtXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge2NsYXNzOiBbXCJja1wiLCBcImNrLXRleHQtYWx0ZXJuYXRpdmUtZm9ybVwiXSwgdGFiaW5kZXg6IFwiLTFcIn0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFt0aGlzLmxhYmVsZWRJbnB1dCwgdGhpcy5zYXZlQnV0dG9uVmlldywgdGhpcy5jYW5jZWxCdXR0b25WaWV3XVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVuZGVyKCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIucmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmtleXN0cm9rZXMubGlzdGVuVG8odGhpcy5lbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIFF2KHt2aWV3OiB0aGlzfSk7XHJcbiAgICAgICAgICAgICAgICBbdGhpcy5sYWJlbGVkSW5wdXQsIHRoaXMuc2F2ZUJ1dHRvblZpZXcsIHRoaXMuY2FuY2VsQnV0dG9uVmlld10uZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c2FibGVzLmFkZCh0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhY2tlci5hZGQodC5lbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUJ1dHRvbih0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gbmV3IGhiKHRoaXMubG9jYWxlKTtcclxuICAgICAgICAgICAgICAgIG8uc2V0KHtsYWJlbDogdCwgaWNvbjogZSwgdG9vbHRpcDogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgby5leHRlbmRUZW1wbGF0ZSh7YXR0cmlidXRlczoge2NsYXNzOiBpfX0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBvLmRlbGVnYXRlKFwiZXhlY3V0ZVwiKS50byh0aGlzLCBuKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUxhYmVsZWRJbnB1dFZpZXcoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5sb2NhbGUudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgS3YodGhpcy5sb2NhbGUsIFl2KTtcclxuICAgICAgICAgICAgICAgIGUubGFiZWwgPSB0KFwibHRcIik7XHJcbiAgICAgICAgICAgICAgICBlLmlucHV0Vmlldy5wbGFjZWhvbGRlciA9IHQoXCJsdFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBpeSA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk01LjA4NSA2LjIyTDIuOTQzIDQuMDc4YS43NS43NSAwIDEgMSAxLjA2LTEuMDZsMi41OTIgMi41OUExMS4wOTQgMTEuMDk0IDAgMCAxIDEwIDUuMDY4YzQuNzM4IDAgOC41NzggMy4xMDEgOC41NzggNS4wODMgMCAxLjE5Ny0xLjQwMSAyLjgwMy0zLjU1NSAzLjg4N2wxLjcxNCAxLjcxM2EuNzUuNzUgMCAwIDEtLjA5IDEuMTM4LjQ4OC40ODggMCAwIDEtLjE1LjA4NC43NS43NSAwIDAgMS0uODIxLS4xNkw2LjE3IDcuMzA0Yy0uMjU4LjExLS41MS4yMzMtLjc1Ny4zNjVsNi4yMzkgNi4yNC0uMDA2LjAwNS43OC43OGMtLjM4OC4wOTQtLjc4LjE2Ni0xLjE3NC4yMTVsLTEuMTEtMS4xMWguMDExTDQuNTUgOC4xOTdhNy4yIDcuMiAwIDAgMC0uNjY1LjUxNGwtLjExMi4wOTggNC44OTcgNC44OTctLjAwNS4wMDYgMS4yNzYgMS4yNzZhMTAuMTY0IDEwLjE2NCAwIDAgMS0xLjQ3Ny0uMTE3bC0uNDc5LS40NzktLjAwOS4wMDktNC44NjMtNC44NjMtLjAyMi4wMzFhMi41NjMgMi41NjMgMCAwIDAtLjEyNC4yYy0uMDQzLjA3Ny0uMDguMTU4LS4xMDguMjQxYS41MzQuNTM0IDAgMCAwLS4wMjguMTMzLjI5LjI5IDAgMCAwIC4wMDguMDcyLjkyNy45MjcgMCAwIDAgLjA4Mi4yMjZjLjA2Ny4xMzMuMTQ1LjI2LjIzNC4zNzlsMy4yNDIgMy4zNjUuMDI1LjAxLjU5LjYyM2MtMy4yNjUtLjkxOC01LjU5LTMuMTU1LTUuNTktNC42NjggMC0xLjE5NCAxLjQ0OC0yLjgzOCAzLjY2My0zLjkzem03LjA3LjUzMWE0LjYzMiA0LjYzMiAwIDAgMSAxLjEwOCA1Ljk5MmwuMzQ1LjM0NC4wNDYtLjAxOGE5LjMxMyA5LjMxMyAwIDAgMCAyLTEuMTEyYy4yNTYtLjE4Ny41LS4zOTIuNzI3LS42MTMuMTM3LS4xMzQuMjctLjI3Ny4zOTItLjQzMS4wNzItLjA5MS4xNDEtLjE4NS4yMDMtLjI4Ni4wNTctLjA5My4xMDctLjE5LjE0OC0uMjkyYS43Mi43MiAwIDAgMCAuMDM2LS4xMi4yOS4yOSAwIDAgMCAuMDA4LS4wNzIuNDkyLjQ5MiAwIDAgMC0uMDI4LS4xMzMuOTk5Ljk5OSAwIDAgMC0uMDM2LS4wOTYgMi4xNjUgMi4xNjUgMCAwIDAtLjA3MS0uMTQ1IDIuOTE3IDIuOTE3IDAgMCAwLS4xMjUtLjIgMy41OTIgMy41OTIgMCAwIDAtLjI2My0uMzM1IDUuNDQ0IDUuNDQ0IDAgMCAwLS41My0uNTIzIDcuOTU1IDcuOTU1IDAgMCAwLTEuMDU0LS43NjggOS43NjYgOS43NjYgMCAwIDAtMS44NzktLjg5MWMtLjMzNy0uMTE4LS42OC0uMjE5LTEuMDI3LS4zMDF6bS0yLjg1LjIxbC0uMDY5LjAwMmEuNTA4LjUwOCAwIDAgMC0uMjU0LjA5Ny40OTYuNDk2IDAgMCAwLS4xMDQuNjc5LjQ5OC40OTggMCAwIDAgLjMyNi4xOTlsLjA0NS4wMDVjLjA5MS4wMDMuMTgxLjAwMy4yNzIuMDEyYTIuNDUgMi40NSAwIDAgMSAyLjAxNyAxLjUxM2MuMDI0LjA2MS4wNDMuMTI1LjA2OS4xODVhLjQ5NC40OTQgMCAwIDAgLjQ1LjI4N2guMDA4YS40OTYuNDk2IDAgMCAwIC4zNS0uMTU4LjQ4Mi40ODIgMCAwIDAgLjEzLS4zMzUuNjM4LjYzOCAwIDAgMC0uMDQ4LS4yMTkgMy4zNzkgMy4zNzkgMCAwIDAtLjM2LS43MjMgMy40MzggMy40MzggMCAwIDAtMi43OTEtMS41NDNsLS4wMjgtLjAwMWgtLjAxM3pcIi8+PC9zdmc+JztcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbnkodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5wbHVnaW5zLmdldChcIkNvbnRleHR1YWxCYWxsb29uXCIpO1xyXG4gICAgICAgICAgICBpZiAodnYodC5lZGl0aW5nLnZpZXcuZG9jdW1lbnQuc2VsZWN0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG95KHQpO1xyXG4gICAgICAgICAgICAgICAgZS51cGRhdGVQb3NpdGlvbihpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBveSh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmVkaXRpbmcudmlldztcclxuICAgICAgICAgICAgY29uc3QgaSA9IG5iLmRlZmF1bHRQb3NpdGlvbnM7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IGUuZG9tQ29udmVydGVyLnZpZXdUb0RvbShlLmRvY3VtZW50LnNlbGVjdGlvbi5nZXRTZWxlY3RlZEVsZW1lbnQoKSksXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbnM6IFtpLm5vcnRoQXJyb3dTb3V0aCwgaS5ub3J0aEFycm93U291dGhXZXN0LCBpLm5vcnRoQXJyb3dTb3V0aEVhc3QsIGkuc291dGhBcnJvd05vcnRoLCBpLnNvdXRoQXJyb3dOb3J0aFdlc3QsIGkuc291dGhBcnJvd05vcnRoRWFzdF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgcnkgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2tiXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJJbWFnZVRleHRBbHRlcm5hdGl2ZVVJXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZUJ1dHRvbigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3JlYXRlRm9ybSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb3JtLmRlc3Ryb3koKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlQnV0dG9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQudDtcclxuICAgICAgICAgICAgICAgIHQudWkuY29tcG9uZW50RmFjdG9yeS5hZGQoXCJpbWFnZVRleHRBbHRlcm5hdGl2ZVwiLCBpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5jb21tYW5kcy5nZXQoXCJpbWFnZVRleHRBbHRlcm5hdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gbmV3IGhiKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG8uc2V0KHtsYWJlbDogZShcImxoXCIpLCBpY29uOiBpeSwgdG9vbHRpcDogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG8uYmluZChcImlzRW5hYmxlZFwiKS50byhuLCBcImlzRW5hYmxlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKG8sIFwiZXhlY3V0ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Nob3dGb3JtKClcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUZvcm0oKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5lZGl0aW5nLnZpZXc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhbGxvb24gPSB0aGlzLmVkaXRvci5wbHVnaW5zLmdldChcIkNvbnRleHR1YWxCYWxsb29uXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9ybSA9IG5ldyBleSh0LmxvY2FsZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb3JtLnJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0aGlzLl9mb3JtLCBcInN1Ym1pdFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlKFwiaW1hZ2VUZXh0QWx0ZXJuYXRpdmVcIiwge25ld1ZhbHVlOiB0aGlzLl9mb3JtLmxhYmVsZWRJbnB1dC5pbnB1dFZpZXcuZWxlbWVudC52YWx1ZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpZGVGb3JtKHRydWUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odGhpcy5fZm9ybSwgXCJjYW5jZWxcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpZGVGb3JtKHRydWUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Zvcm0ua2V5c3Ryb2tlcy5zZXQoXCJFc2NcIiwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWRlRm9ybSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICBlKClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0LnVpLCBcInVwZGF0ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2dihpLnNlbGVjdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGlkZUZvcm0odHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2lzVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBueSh0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgRGIoe1xyXG4gICAgICAgICAgICAgICAgICAgIGVtaXR0ZXI6IHRoaXMuX2Zvcm0sXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZhdG9yOiAoKSA9PiB0aGlzLl9pc1Zpc2libGUsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dEVsZW1lbnRzOiBbdGhpcy5fYmFsbG9vbi52aWV3LmVsZW1lbnRdLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB0aGlzLl9oaWRlRm9ybSgpXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2hvd0Zvcm0oKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5jb21tYW5kcy5nZXQoXCJpbWFnZVRleHRBbHRlcm5hdGl2ZVwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9mb3JtLmxhYmVsZWRJbnB1dDtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNJbkJhbGxvb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYWxsb29uLmFkZCh7dmlldzogdGhpcy5fZm9ybSwgcG9zaXRpb246IG95KHQpfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkudmFsdWUgPSBpLmlucHV0Vmlldy5lbGVtZW50LnZhbHVlID0gZS52YWx1ZSB8fCBcIlwiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9ybS5sYWJlbGVkSW5wdXQuc2VsZWN0KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2hpZGVGb3JtKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNJbkJhbGxvb24pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9mb3JtLmZvY3VzVHJhY2tlci5pc0ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mb3JtLnNhdmVCdXR0b25WaWV3LmZvY3VzKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhbGxvb24ucmVtb3ZlKHRoaXMuX2Zvcm0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgX2lzVmlzaWJsZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iYWxsb29uLnZpc2libGVWaWV3ID09PSB0aGlzLl9mb3JtXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBfaXNJbkJhbGxvb24oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmFsbG9vbi5oYXNWaWV3KHRoaXMuX2Zvcm0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHN5IGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFskdiwgcnldXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkltYWdlVGV4dEFsdGVybmF0aXZlXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGF5ID0gaSg2Nik7XHJcblxyXG4gICAgICAgIGNsYXNzIGN5IGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtOdiwgRnYsIHN5XVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJJbWFnZVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGx5IGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtrYl1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiV2lkZ2V0VG9vbGJhclJlcG9zaXRvcnlcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQucGx1Z2lucy5oYXMoXCJCYWxsb29uVG9vbGJhclwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnBsdWdpbnMuZ2V0KFwiQmFsbG9vblRvb2xiYXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhlLCBcInNob3dcIiwgZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChoeSh0LmVkaXRpbmcudmlldy5kb2N1bWVudC5zZWxlY3Rpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnN0b3AoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImhpZ2hcIn0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90b29sYmFyRGVmaW5pdGlvbnMgPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFsbG9vbiA9IHRoaXMuZWRpdG9yLnBsdWdpbnMuZ2V0KFwiQ29udGV4dHVhbEJhbGxvb25cIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9uKFwiY2hhbmdlOmlzRW5hYmxlZFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlVG9vbGJhcnNWaXNpYmlsaXR5KClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0LnVpLCBcInVwZGF0ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlVG9vbGJhcnNWaXNpYmlsaXR5KClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0LnVpLmZvY3VzVHJhY2tlciwgXCJjaGFuZ2U6aXNGb2N1c2VkXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVUb29sYmFyc1Zpc2liaWxpdHkoKVxyXG4gICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImxvd1wifSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLl90b29sYmFyRGVmaW5pdGlvbnMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LnZpZXcuZGVzdHJveSgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlZ2lzdGVyKHQsIHthcmlhTGFiZWw6IGUsIGl0ZW1zOiBpLCBnZXRSZWxhdGVkRWxlbWVudDogbiwgYmFsbG9vbkNsYXNzTmFtZTogbyA9IFwiY2stdG9vbGJhci1jb250YWluZXJcIn0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSByLnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gbmV3IFhiKHIubG9jYWxlKTtcclxuICAgICAgICAgICAgICAgIGEuYXJpYUxhYmVsID0gZSB8fCBzKFwia2ZcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdG9vbGJhckRlZmluaXRpb25zLmhhcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBzc1tcImJcIl0oXCJ3aWRnZXQtdG9vbGJhci1kdXBsaWNhdGVkOiBUb29sYmFyIHdpdGggdGhlIGdpdmVuIGlkIHdhcyBhbHJlYWR5IGFkZGVkLlwiLCB0aGlzLCB7dG9vbGJhcklkOiB0fSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGEuZmlsbEZyb21Db25maWcoaSwgci51aS5jb21wb25lbnRGYWN0b3J5KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Rvb2xiYXJEZWZpbml0aW9ucy5zZXQodCwge3ZpZXc6IGEsIGdldFJlbGF0ZWRFbGVtZW50OiBuLCBiYWxsb29uQ2xhc3NOYW1lOiBvfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3VwZGF0ZVRvb2xiYXJzVmlzaWJpbGl0eSgpIHtcclxuICAgICAgICAgICAgICAgIGxldCB0ID0gMDtcclxuICAgICAgICAgICAgICAgIGxldCBlID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGxldCBpID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiB0aGlzLl90b29sYmFyRGVmaW5pdGlvbnMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gbi5nZXRSZWxhdGVkRWxlbWVudCh0aGlzLmVkaXRvci5lZGl0aW5nLnZpZXcuZG9jdW1lbnQuc2VsZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNFbmFibGVkIHx8ICFvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc1Rvb2xiYXJJbkJhbGxvb24obikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpZGVUb29sYmFyKG4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF0aGlzLmVkaXRvci51aS5mb2N1c1RyYWNrZXIuaXNGb2N1c2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc1Rvb2xiYXJWaXNpYmxlKG4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWRlVG9vbGJhcihuKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IG8uZ2V0QW5jZXN0b3JzKCkubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAociA+IHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSByO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IG87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaG93VG9vbGJhcihpLCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfaGlkZVRvb2xiYXIodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFsbG9vbi5yZW1vdmUodC52aWV3KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RvcExpc3RlbmluZyh0aGlzLl9iYWxsb29uLCBcImNoYW5nZTp2aXNpYmxlVmlld1wiKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2hvd1Rvb2xiYXIodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzVG9vbGJhclZpc2libGUodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBkeSh0aGlzLmVkaXRvciwgZSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2lzVG9vbGJhckluQmFsbG9vbih0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JhbGxvb24uYWRkKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmlldzogdC52aWV3LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbjogdXkodGhpcy5lZGl0b3IsIGUpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWxsb29uQ2xhc3NOYW1lOiB0LmJhbGxvb25DbGFzc05hbWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMuX2JhbGxvb24sIFwiY2hhbmdlOnZpc2libGVWaWV3XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMuX3Rvb2xiYXJEZWZpbml0aW9ucy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2lzVG9vbGJhclZpc2libGUodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5nZXRSZWxhdGVkRWxlbWVudCh0aGlzLmVkaXRvci5lZGl0aW5nLnZpZXcuZG9jdW1lbnQuc2VsZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkeSh0aGlzLmVkaXRvciwgZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9pc1Rvb2xiYXJWaXNpYmxlKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iYWxsb29uLnZpc2libGVWaWV3ID09PSB0LnZpZXdcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2lzVG9vbGJhckluQmFsbG9vbih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmFsbG9vbi5oYXNWaWV3KHQudmlldylcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZHkodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5wbHVnaW5zLmdldChcIkNvbnRleHR1YWxCYWxsb29uXCIpO1xyXG4gICAgICAgICAgICBjb25zdCBuID0gdXkodCwgZSk7XHJcbiAgICAgICAgICAgIGkudXBkYXRlUG9zaXRpb24obilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHV5KHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHQuZWRpdGluZy52aWV3O1xyXG4gICAgICAgICAgICBjb25zdCBuID0gbmIuZGVmYXVsdFBvc2l0aW9ucztcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldDogaS5kb21Db252ZXJ0ZXIubWFwVmlld1RvRG9tKGUpLFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25zOiBbbi5ub3J0aEFycm93U291dGgsIG4ubm9ydGhBcnJvd1NvdXRoV2VzdCwgbi5ub3J0aEFycm93U291dGhFYXN0LCBuLnNvdXRoQXJyb3dOb3J0aCwgbi5zb3V0aEFycm93Tm9ydGhXZXN0LCBuLnNvdXRoQXJyb3dOb3J0aEVhc3RdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGh5KHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHQuZ2V0U2VsZWN0ZWRFbGVtZW50KCk7XHJcbiAgICAgICAgICAgIHJldHVybiAhIShlICYmIFFfKGUpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgZnkgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2x5XVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJJbWFnZVRvb2xiYXJcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZnRlckluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQucGx1Z2lucy5nZXQobHkpO1xyXG4gICAgICAgICAgICAgICAgaS5yZWdpc3RlcihcImltYWdlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICBhcmlhTGFiZWw6IGUoXCJhXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIGl0ZW1zOiB0LmNvbmZpZy5nZXQoXCJpbWFnZS50b29sYmFyXCIpIHx8IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIGdldFJlbGF0ZWRFbGVtZW50OiB2dlxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgZ3kgZXh0ZW5kcyBqdyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0U3R5bGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3R5bGVzID0gZS5yZWR1Y2UoKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0W2UubmFtZV0gPSBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmlzRGVmYXVsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRTdHlsZSA9IGUubmFtZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICAgICAgfSwge30pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uLmdldFNlbGVjdGVkRWxlbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSB5dih0KTtcclxuICAgICAgICAgICAgICAgIGlmICghdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0Lmhhc0F0dHJpYnV0ZShcImltYWdlU3R5bGVcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5nZXRBdHRyaWJ1dGUoXCJpbWFnZVN0eWxlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnN0eWxlc1tlXSA/IGUgOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5kZWZhdWx0U3R5bGVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXhlY3V0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLmRvY3VtZW50LnNlbGVjdGlvbi5nZXRTZWxlY3RlZEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgICAgIGkuY2hhbmdlKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0eWxlc1tlXS5pc0RlZmF1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmVBdHRyaWJ1dGUoXCJpbWFnZVN0eWxlXCIsIG4pXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoXCJpbWFnZVN0eWxlXCIsIGUsIG4pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbXkodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGUsIGksIG4pID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghbi5jb25zdW1hYmxlLmNvbnN1bWUoaS5pdGVtLCBlLm5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gYnkoaS5hdHRyaWJ1dGVOZXdWYWx1ZSwgdCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gYnkoaS5hdHRyaWJ1dGVPbGRWYWx1ZSwgdCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gbi5tYXBwZXIudG9WaWV3RWxlbWVudChpLml0ZW0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IG4ud3JpdGVyO1xyXG4gICAgICAgICAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhLnJlbW92ZUNsYXNzKHIuY2xhc3NOYW1lLCBzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICBhLmFkZENsYXNzKG8uY2xhc3NOYW1lLCBzKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBweSh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmZpbHRlcih0ID0+ICF0LmlzRGVmYXVsdCk7XHJcbiAgICAgICAgICAgIHJldHVybiAodCwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpLm1vZGVsUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBpLnZpZXdJdGVtO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IFd3KGkubW9kZWxSYW5nZS5nZXRJdGVtcygpKTtcclxuICAgICAgICAgICAgICAgIGlmICghbi5zY2hlbWEuY2hlY2tBdHRyaWJ1dGUociwgXCJpbWFnZVN0eWxlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuLmNvbnN1bWFibGUuY29uc3VtZShvLCB7Y2xhc3NlczogdC5jbGFzc05hbWV9KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLndyaXRlci5zZXRBdHRyaWJ1dGUoXCJpbWFnZVN0eWxlXCIsIHQubmFtZSwgcilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGJ5KHQsIGUpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpLm5hbWUgPT09IHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgd3kgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMiA0LjVWM2gxNnYxLjV6bTIuNSAzVjEyaDExVjcuNWgtMTF6TTQuMDYxIDZIMTUuOTRjLjU4NiAwIDEuMDYxLjQwNyAxLjA2MS45MXY1LjY4YzAgLjUwMy0uNDc1LjkxLTEuMDYxLjkxSDQuMDZjLS41ODUgMC0xLjA2LS40MDctMS4wNi0uOTFWNi45MUMzIDYuNDA2IDMuNDc1IDYgNC4wNjEgNnpNMiAxNi41VjE1aDE2djEuNXpcIi8+PC9zdmc+JztcclxuICAgICAgICB2YXIga3kgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIGNsaXAtcnVsZT1cImV2ZW5vZGRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiIHN0cm9rZS1taXRlcmxpbWl0PVwiMS40MTRcIj48cGF0aCBkPVwiTTE4IDQuNVYzSDJ2MS41aDE2em0wIDNWNmgtNS42NzR2MS41SDE4em0wIDNWOWgtNS42NzR2MS41SDE4em0wIDNWMTJoLTUuNjc0djEuNUgxOHptLTguNS02VjEyaC02VjcuNWg2em0uODE4LTEuNUgyLjY4MkMyLjMwNSA2IDIgNi40MDcgMiA2LjkxdjUuNjhjMCAuNTAzLjMwNS45MS42ODIuOTFoNy42MzZjLjM3NyAwIC42ODItLjQwNy42ODItLjkxVjYuOTFjMC0uNTAzLS4zMDUtLjkxLS42ODItLjkxek0xOCAxNi41VjE1SDJ2MS41aDE2elwiLz48L3N2Zz4nO1xyXG4gICAgICAgIHZhciBfeSA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0yIDQuNVYzaDE2djEuNXptNC41IDNWMTJoN1Y3LjVoLTd6TTUuNzU4IDZoOC40ODRjLjQxOSAwIC43NTguNDA3Ljc1OC45MXY1LjY4MWMwIC41MDItLjM0LjkwOS0uNzU4LjkwOUg1Ljc1OGMtLjQxOSAwLS43NTgtLjQwNy0uNzU4LS45MVY2LjkxYzAtLjUwMy4zNC0uOTEuNzU4LS45MXpNMiAxNi41VjE1aDE2djEuNXpcIi8+PC9zdmc+JztcclxuICAgICAgICB2YXIgdnkgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMiA0LjVWM2gxNnYxLjV6bTAgM1Y2aDUuNjc0djEuNXptMCAzVjloNS42NzR2MS41em0wIDNWMTJoNS42NzR2MS41em04LjUtNlYxMmg2VjcuNWgtNnpNOS42ODIgNmg3LjYzNmMuMzc3IDAgLjY4Mi40MDcuNjgyLjkxdjUuNjhjMCAuNTAzLS4zMDUuOTEtLjY4Mi45MUg5LjY4MmMtLjM3NyAwLS42ODItLjQwNy0uNjgyLS45MVY2LjkxYzAtLjUwMy4zMDUtLjkxLjY4Mi0uOTF6TTIgMTYuNVYxNWgxNnYxLjV6XCIvPjwvc3ZnPic7XHJcbiAgICAgICAgY29uc3QgeXkgPSB7XHJcbiAgICAgICAgICAgIGZ1bGw6IHtuYW1lOiBcImZ1bGxcIiwgdGl0bGU6IFwiRnVsbCBzaXplIGltYWdlXCIsIGljb246IHd5LCBpc0RlZmF1bHQ6IHRydWV9LFxyXG4gICAgICAgICAgICBzaWRlOiB7bmFtZTogXCJzaWRlXCIsIHRpdGxlOiBcIlNpZGUgaW1hZ2VcIiwgaWNvbjogdnksIGNsYXNzTmFtZTogXCJpbWFnZS1zdHlsZS1zaWRlXCJ9LFxyXG4gICAgICAgICAgICBhbGlnbkxlZnQ6IHtuYW1lOiBcImFsaWduTGVmdFwiLCB0aXRsZTogXCJMZWZ0IGFsaWduZWQgaW1hZ2VcIiwgaWNvbjoga3ksIGNsYXNzTmFtZTogXCJpbWFnZS1zdHlsZS1hbGlnbi1sZWZ0XCJ9LFxyXG4gICAgICAgICAgICBhbGlnbkNlbnRlcjoge1xyXG4gICAgICAgICAgICAgICAgbmFtZTogXCJhbGlnbkNlbnRlclwiLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiQ2VudGVyZWQgaW1hZ2VcIixcclxuICAgICAgICAgICAgICAgIGljb246IF95LFxyXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lOiBcImltYWdlLXN0eWxlLWFsaWduLWNlbnRlclwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFsaWduUmlnaHQ6IHtcclxuICAgICAgICAgICAgICAgIG5hbWU6IFwiYWxpZ25SaWdodFwiLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IFwiUmlnaHQgYWxpZ25lZCBpbWFnZVwiLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogdnksXHJcbiAgICAgICAgICAgICAgICBjbGFzc05hbWU6IFwiaW1hZ2Utc3R5bGUtYWxpZ24tcmlnaHRcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCB4eSA9IHtmdWxsOiB3eSwgbGVmdDoga3ksIHJpZ2h0OiB2eSwgY2VudGVyOiBfeX07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEN5KHQgPSBbXSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdC5tYXAoQXkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBBeSh0KSB7XHJcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdCA9PSBcInN0cmluZ1wiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdDtcclxuICAgICAgICAgICAgICAgIGlmICh5eVtlXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQgPSBPYmplY3QuYXNzaWduKHt9LCB5eVtlXSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKE9iamVjdChzc1tcImFcIl0pKFwiaW1hZ2Utc3R5bGUtbm90LWZvdW5kOiBUaGVyZSBpcyBubyBzdWNoIGltYWdlIHN0eWxlIG9mIGdpdmVuIG5hbWUuXCIpLCB7bmFtZTogZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHQgPSB7bmFtZTogZX1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIGlmICh5eVt0Lm5hbWVdKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0geXlbdC5uYW1lXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBPYmplY3QuYXNzaWduKHt9LCB0KTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBpbiBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0Lmhhc093blByb3BlcnR5KG4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlbbl0gPSBlW25dXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdCA9IGlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQuaWNvbiA9PSBcInN0cmluZ1wiICYmIHh5W3QuaWNvbl0pIHtcclxuICAgICAgICAgICAgICAgIHQuaWNvbiA9IHh5W3QuaWNvbl1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgVHkgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkltYWdlU3R5bGVFZGl0aW5nXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm1vZGVsLnNjaGVtYTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LmRhdGE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5lZGl0aW5nO1xyXG4gICAgICAgICAgICAgICAgdC5jb25maWcuZGVmaW5lKFwiaW1hZ2Uuc3R5bGVzXCIsIFtcImZ1bGxcIiwgXCJzaWRlXCJdKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBDeSh0LmNvbmZpZy5nZXQoXCJpbWFnZS5zdHlsZXNcIikpO1xyXG4gICAgICAgICAgICAgICAgZS5leHRlbmQoXCJpbWFnZVwiLCB7YWxsb3dBdHRyaWJ1dGVzOiBcImltYWdlU3R5bGVcIn0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG15KG8pO1xyXG4gICAgICAgICAgICAgICAgbi5kb3duY2FzdERpc3BhdGNoZXIub24oXCJhdHRyaWJ1dGU6aW1hZ2VTdHlsZTppbWFnZVwiLCByKTtcclxuICAgICAgICAgICAgICAgIGkuZG93bmNhc3REaXNwYXRjaGVyLm9uKFwiYXR0cmlidXRlOmltYWdlU3R5bGU6aW1hZ2VcIiwgcik7XHJcbiAgICAgICAgICAgICAgICBpLnVwY2FzdERpc3BhdGNoZXIub24oXCJlbGVtZW50OmZpZ3VyZVwiLCBweShvKSwge3ByaW9yaXR5OiBcImxvd1wifSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcImltYWdlU3R5bGVcIiwgbmV3IGd5KHQsIG8pKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgUHkgPSBpKDY4KTtcclxuXHJcbiAgICAgICAgY2xhc3MgU3kgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkltYWdlU3R5bGVVSVwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBsb2NhbGl6ZWREZWZhdWx0U3R5bGVzVGl0bGVzKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLnQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwiRnVsbCBzaXplIGltYWdlXCI6IHQoXCJqeVwiKSxcclxuICAgICAgICAgICAgICAgICAgICBcIlNpZGUgaW1hZ2VcIjogdChcImp6XCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIFwiTGVmdCBhbGlnbmVkIGltYWdlXCI6IHQoXCJrYVwiKSxcclxuICAgICAgICAgICAgICAgICAgICBcIkNlbnRlcmVkIGltYWdlXCI6IHQoXCJrYlwiKSxcclxuICAgICAgICAgICAgICAgICAgICBcIlJpZ2h0IGFsaWduZWQgaW1hZ2VcIjogdChcImtjXCIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5jb25maWcuZ2V0KFwiaW1hZ2Uuc3R5bGVzXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IEV5KEN5KGUpLCB0aGlzLmxvY2FsaXplZERlZmF1bHRTdHlsZXNUaXRsZXMpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jcmVhdGVCdXR0b24odClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUJ1dHRvbih0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gYGltYWdlU3R5bGU6JHt0Lm5hbWV9YDtcclxuICAgICAgICAgICAgICAgIGUudWkuY29tcG9uZW50RmFjdG9yeS5hZGQoaSwgaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGUuY29tbWFuZHMuZ2V0KFwiaW1hZ2VTdHlsZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gbmV3IGhiKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG8uc2V0KHtsYWJlbDogdC50aXRsZSwgaWNvbjogdC5pY29uLCB0b29sdGlwOiB0cnVlLCBpc1RvZ2dsZWFibGU6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgICAgICBvLmJpbmQoXCJpc0VuYWJsZWRcIikudG8obiwgXCJpc0VuYWJsZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgby5iaW5kKFwiaXNPblwiKS50byhuLCBcInZhbHVlXCIsIGUgPT4gZSA9PT0gdC5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKG8sIFwiZXhlY3V0ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuZXhlY3V0ZShcImltYWdlU3R5bGVcIiwge3ZhbHVlOiB0Lm5hbWV9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBFeSh0LCBlKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZVtpLnRpdGxlXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGkudGl0bGUgPSBlW2kudGl0bGVdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIFJ5IGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtUeSwgU3ldXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkltYWdlU3R5bGVcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBPeSB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiYWN0aXZlSGFuZGxlUG9zaXRpb25cIiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcInByb3Bvc2VkV2lkdGhQZXJjZW50c1wiLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwicHJvcG9zZWRXaWR0aFwiLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwicHJvcG9zZWRIZWlnaHRcIiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcInByb3Bvc2VkSGFuZGxlSG9zdFdpZHRoXCIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJwcm9wb3NlZEhhbmRsZUhvc3RIZWlnaHRcIiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vcHRpb25zID0gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlZmVyZW5jZUNvb3JkaW5hdGVzID0gbnVsbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBiZWdpbih0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IHZoKGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVIYW5kbGVQb3NpdGlvbiA9IE15KHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVmZXJlbmNlQ29vcmRpbmF0ZXMgPSBWeShlLCBCeSh0aGlzLmFjdGl2ZUhhbmRsZVBvc2l0aW9uKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbmFsV2lkdGggPSBuLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcmlnaW5hbEhlaWdodCA9IG4uaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hc3BlY3RSYXRpbyA9IG4ud2lkdGggLyBuLmhlaWdodDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBpLnN0eWxlLndpZHRoO1xyXG4gICAgICAgICAgICAgICAgaWYgKG8gJiYgby5tYXRjaCgvXlxcZCtcXC4/XFxkKiUkLykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbmFsV2lkdGhQZXJjZW50cyA9IHBhcnNlRmxvYXQobylcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vcmlnaW5hbFdpZHRoUGVyY2VudHMgPSBJeShpLCBuKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB1cGRhdGUodCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wb3NlZFdpZHRoID0gdC53aWR0aDtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcG9zZWRIZWlnaHQgPSB0LmhlaWdodDtcclxuICAgICAgICAgICAgICAgIHRoaXMucHJvcG9zZWRXaWR0aFBlcmNlbnRzID0gdC53aWR0aFBlcmNlbnRzO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wb3NlZEhhbmRsZUhvc3RXaWR0aCA9IHQuaGFuZGxlSG9zdFdpZHRoO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wb3NlZEhhbmRsZUhvc3RIZWlnaHQgPSB0LmhhbmRsZUhvc3RIZWlnaHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMoT3ksIEpjKTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSXkodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgICAgICBjb25zdCBuID0gcGFyc2VGbG9hdChpLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShpKS53aWR0aCk7XHJcbiAgICAgICAgICAgIHJldHVybiBlLndpZHRoIC8gbiAqIDEwMFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVnkodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gbmV3IHZoKHQpO1xyXG4gICAgICAgICAgICBjb25zdCBuID0gZS5zcGxpdChcIi1cIik7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSB7eDogblsxXSA9PSBcInJpZ2h0XCIgPyBpLnJpZ2h0IDogaS5sZWZ0LCB5OiBuWzBdID09IFwiYm90dG9tXCIgPyBpLmJvdHRvbSA6IGkudG9wfTtcclxuICAgICAgICAgICAgby54ICs9IHQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5zY3JvbGxYO1xyXG4gICAgICAgICAgICBvLnkgKz0gdC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LnNjcm9sbFk7XHJcbiAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBOeSh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgY2std2lkZ2V0X19yZXNpemVyX19oYW5kbGUtJHt0fWBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE15KHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IFtcInRvcC1sZWZ0XCIsIFwidG9wLXJpZ2h0XCIsIFwiYm90dG9tLXJpZ2h0XCIsIFwiYm90dG9tLWxlZnRcIl07XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5jbGFzc0xpc3QuY29udGFpbnMoTnkoaSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQnkodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5zcGxpdChcIi1cIik7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB7dG9wOiBcImJvdHRvbVwiLCBib3R0b206IFwidG9wXCIsIGxlZnQ6IFwicmlnaHRcIiwgcmlnaHQ6IFwibGVmdFwifTtcclxuICAgICAgICAgICAgcmV0dXJuIGAke2lbZVswXV19LSR7aVtlWzFdXX1gXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyB6eSB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZG9tUmVzaXplcldyYXBwZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdmlld1Jlc2l6ZXJXcmFwcGVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaXNFbmFibGVkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWNvcmF0ZShcImJlZ2luXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWNvcmF0ZShcImNhbmNlbFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGVjb3JhdGUoXCJjb21taXRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRlY29yYXRlKFwidXBkYXRlU2l6ZVwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub24oXCJjb21taXRcIiwgdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnByb3Bvc2VkV2lkdGggJiYgIXRoaXMuc3RhdGUucHJvcG9zZWRXaWR0aFBlcmNlbnRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NsZWFudXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5zdG9wKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwiaGlnaFwifSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYXR0YWNoKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5fb3B0aW9ucy52aWV3RWxlbWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9vcHRpb25zLmVkaXRvci5lZGl0aW5nLnZpZXc7XHJcbiAgICAgICAgICAgICAgICBpLmNoYW5nZShpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5jcmVhdGVVSUVsZW1lbnQoXCJkaXZcIiwge2NsYXNzOiBcImNrIGNrLXJlc2V0X2FsbCBjay13aWRnZXRfX3Jlc2l6ZXJcIn0sIChmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy50b0RvbUVsZW1lbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuX2FwcGVuZEhhbmRsZXMoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuX2FwcGVuZFNpemVVSShpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5fZG9tUmVzaXplcldyYXBwZXIgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0Lm9uKFwiY2hhbmdlOmlzRW5hYmxlZFwiLCAodCwgZSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zdHlsZS5kaXNwbGF5ID0gbiA/IFwiXCIgOiBcIm5vbmVcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zdHlsZS5kaXNwbGF5ID0gdC5pc0VuYWJsZWQgPyBcIlwiIDogXCJub25lXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuaW5zZXJ0KGkuY3JlYXRlUG9zaXRpb25BdChlLCBcImVuZFwiKSwgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5hZGRDbGFzcyhcImNrLXdpZGdldF93aXRoLXJlc2l6ZXJcIiwgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdmlld1Jlc2l6ZXJXcmFwcGVyID0gblxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYmVnaW4odCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IG5ldyBPeSh0aGlzLl9vcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NpemVVSS5iaW5kVG9TdGF0ZSh0aGlzLl9vcHRpb25zLCB0aGlzLnN0YXRlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUuYmVnaW4odCwgdGhpcy5fZ2V0SGFuZGxlSG9zdCgpLCB0aGlzLl9nZXRSZXNpemVIb3N0KCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHVwZGF0ZVNpemUodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuX3Byb3Bvc2VOZXdTaXplKHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX29wdGlvbnMuZWRpdG9yLmVkaXRpbmcudmlldztcclxuICAgICAgICAgICAgICAgIGkuY2hhbmdlKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9vcHRpb25zLnVuaXQgfHwgXCIlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IChpID09PSBcIiVcIiA/IGUud2lkdGhQZXJjZW50cyA6IGUud2lkdGgpICsgaTtcclxuICAgICAgICAgICAgICAgICAgICB0LnNldFN0eWxlKFwid2lkdGhcIiwgbiwgdGhpcy5fb3B0aW9ucy52aWV3RWxlbWVudClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuX2dldEhhbmRsZUhvc3QoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgdmgobik7XHJcbiAgICAgICAgICAgICAgICBlLmhhbmRsZUhvc3RXaWR0aCA9IE1hdGgucm91bmQoby53aWR0aCk7XHJcbiAgICAgICAgICAgICAgICBlLmhhbmRsZUhvc3RIZWlnaHQgPSBNYXRoLnJvdW5kKG8uaGVpZ2h0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuZXcgdmgobik7XHJcbiAgICAgICAgICAgICAgICBlLndpZHRoID0gTWF0aC5yb3VuZChyLndpZHRoKTtcclxuICAgICAgICAgICAgICAgIGUuaGVpZ2h0ID0gTWF0aC5yb3VuZChyLmhlaWdodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZHJhdyhvKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUudXBkYXRlKGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbW1pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9vcHRpb25zLnVuaXQgfHwgXCIlXCI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gKHQgPT09IFwiJVwiID8gdGhpcy5zdGF0ZS5wcm9wb3NlZFdpZHRoUGVyY2VudHMgOiB0aGlzLnN0YXRlLnByb3Bvc2VkV2lkdGgpICsgdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMub25Db21taXQoZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jbGVhbnVwKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2FuY2VsKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY2xlYW51cCgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbCgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlZHJhdyh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5fZG9tUmVzaXplcldyYXBwZXI7XHJcbiAgICAgICAgICAgICAgICBpZiAoaShlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX29wdGlvbnMuZWRpdG9yLmVkaXRpbmcudmlldy5jaGFuZ2UoaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLnBhcmVudEVsZW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0aGlzLl9nZXRIYW5kbGVIb3N0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0IHx8IG5ldyB2aChvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRTdHlsZShcIndpZHRoXCIsIHIud2lkdGggKyBcInB4XCIsIHRoaXMuX3ZpZXdSZXNpemVyV3JhcHBlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0U3R5bGUoXCJoZWlnaHRcIiwgci5oZWlnaHQgKyBcInB4XCIsIHRoaXMuX3ZpZXdSZXNpemVyV3JhcHBlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB7bGVmdDogby5vZmZzZXRMZWZ0LCB0b3A6IG8ub2Zmc2V0VG9wLCBoZWlnaHQ6IG8ub2Zmc2V0SGVpZ2h0LCB3aWR0aDogby5vZmZzZXRXaWR0aH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbi5pc1NhbWVOb2RlKG8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFN0eWxlKFwibGVmdFwiLCBzLmxlZnQgKyBcInB4XCIsIHRoaXMuX3ZpZXdSZXNpemVyV3JhcHBlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFN0eWxlKFwidG9wXCIsIHMudG9wICsgXCJweFwiLCB0aGlzLl92aWV3UmVzaXplcldyYXBwZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRTdHlsZShcImhlaWdodFwiLCBzLmhlaWdodCArIFwicHhcIiwgdGhpcy5fdmlld1Jlc2l6ZXJXcmFwcGVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0U3R5bGUoXCJ3aWR0aFwiLCBzLndpZHRoICsgXCJweFwiLCB0aGlzLl92aWV3UmVzaXplcldyYXBwZXIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGkodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ICYmIHQub3duZXJEb2N1bWVudCAmJiB0Lm93bmVyRG9jdW1lbnQuY29udGFpbnModClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29udGFpbnNIYW5kbGUodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RvbVJlc2l6ZXJXcmFwcGVyLmNvbnRhaW5zKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBpc1Jlc2l6ZUhhbmRsZSh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5jbGFzc0xpc3QuY29udGFpbnMoXCJjay13aWRnZXRfX3Jlc2l6ZXJfX2hhbmRsZVwiKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY2xlYW51cCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NpemVVSS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zaXplVUkuaXNWaXNpYmxlID0gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3Byb3Bvc2VOZXdTaXplKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLnN0YXRlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IER5KHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuX29wdGlvbnMuaXNDZW50ZXJlZCA/IHRoaXMuX29wdGlvbnMuaXNDZW50ZXJlZCh0aGlzKSA6IHRydWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHg6IGUuX3JlZmVyZW5jZUNvb3JkaW5hdGVzLnggLSAoaS54ICsgZS5vcmlnaW5hbFdpZHRoKSxcclxuICAgICAgICAgICAgICAgICAgICB5OiBpLnkgLSBlLm9yaWdpbmFsSGVpZ2h0IC0gZS5fcmVmZXJlbmNlQ29vcmRpbmF0ZXMueVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGlmIChuICYmIGUuYWN0aXZlSGFuZGxlUG9zaXRpb24uZW5kc1dpdGgoXCItcmlnaHRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBvLnggPSBpLnggLSAoZS5fcmVmZXJlbmNlQ29vcmRpbmF0ZXMueCArIGUub3JpZ2luYWxXaWR0aClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgby54ICo9IDJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB7d2lkdGg6IE1hdGguYWJzKGUub3JpZ2luYWxXaWR0aCArIG8ueCksIGhlaWdodDogTWF0aC5hYnMoZS5vcmlnaW5hbEhlaWdodCArIG8ueSl9O1xyXG4gICAgICAgICAgICAgICAgci5kb21pbmFudCA9IHIud2lkdGggLyBlLmFzcGVjdFJhdGlvID4gci5oZWlnaHQgPyBcIndpZHRoXCIgOiBcImhlaWdodFwiO1xyXG4gICAgICAgICAgICAgICAgci5tYXggPSByW3IuZG9taW5hbnRdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IHt3aWR0aDogci53aWR0aCwgaGVpZ2h0OiByLmhlaWdodH07XHJcbiAgICAgICAgICAgICAgICBpZiAoci5kb21pbmFudCA9PSBcIndpZHRoXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzLmhlaWdodCA9IHMud2lkdGggLyBlLmFzcGVjdFJhdGlvXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHMud2lkdGggPSBzLmhlaWdodCAqIGUuYXNwZWN0UmF0aW9cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IE1hdGgucm91bmQocy53aWR0aCksXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBNYXRoLnJvdW5kKHMuaGVpZ2h0KSxcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aFBlcmNlbnRzOiBNYXRoLm1pbihNYXRoLnJvdW5kKGUub3JpZ2luYWxXaWR0aFBlcmNlbnRzIC8gZS5vcmlnaW5hbFdpZHRoICogcy53aWR0aCAqIDEwMCkgLyAxMDAsIDEwMClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldFJlc2l6ZUhvc3QoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5fZG9tUmVzaXplcldyYXBwZXIucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zLmdldFJlc2l6ZUhvc3QodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldEhhbmRsZUhvc3QoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5fZG9tUmVzaXplcldyYXBwZXIucGFyZW50RWxlbWVudDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9vcHRpb25zLmdldEhhbmRsZUhvc3QodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2FwcGVuZEhhbmRsZXModCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFtcInRvcC1sZWZ0XCIsIFwidG9wLXJpZ2h0XCIsIFwiYm90dG9tLXJpZ2h0XCIsIFwiYm90dG9tLWxlZnRcIl07XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuYXBwZW5kQ2hpbGQobmV3IF9wKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiBcImRpdlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7Y2xhc3M6IGBjay13aWRnZXRfX3Jlc2l6ZXJfX2hhbmRsZSAke0Z5KGkpfWB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSkucmVuZGVyKCkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9hcHBlbmRTaXplVUkodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBMeTtcclxuICAgICAgICAgICAgICAgIGUucmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zaXplVUkgPSBlO1xyXG4gICAgICAgICAgICAgICAgdC5hcHBlbmRDaGlsZChlLmVsZW1lbnQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZzKHp5LCBKYyk7XHJcblxyXG4gICAgICAgIGNsYXNzIEx5IGV4dGVuZHMgR3Age1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5iaW5kVGVtcGxhdGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogW1wiY2tcIiwgXCJjay1zaXplLXZpZXdcIiwgdC50byhcImFjdGl2ZUhhbmRsZVBvc2l0aW9uXCIsIHQgPT4gdCA/IGBjay1vcmllbnRhdGlvbi0ke3R9YCA6IFwiXCIpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtkaXNwbGF5OiB0LmlmKFwiaXNWaXNpYmxlXCIsIFwibm9uZVwiLCB0ID0+ICF0KX1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbe3RleHQ6IHQudG8oXCJsYWJlbFwiKX1dXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBiaW5kVG9TdGF0ZSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmQoXCJpc1Zpc2libGVcIikudG8oZSwgXCJwcm9wb3NlZFdpZHRoXCIsIGUsIFwicHJvcG9zZWRIZWlnaHRcIiwgKHQsIGUpID0+IHQgIT09IG51bGwgJiYgZSAhPT0gbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmQoXCJsYWJlbFwiKS50byhlLCBcInByb3Bvc2VkSGFuZGxlSG9zdFdpZHRoXCIsIGUsIFwicHJvcG9zZWRIYW5kbGVIb3N0SGVpZ2h0XCIsIGUsIFwicHJvcG9zZWRXaWR0aFBlcmNlbnRzXCIsIChlLCBpLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQudW5pdCA9PT0gXCJweFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBgJHtlfcOXJHtpfWBcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYCR7bn0lYFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iaW5kKFwiYWN0aXZlSGFuZGxlUG9zaXRpb25cIikudG8oZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGlzbWlzcygpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudW5iaW5kKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzVmlzaWJsZSA9IGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEZ5KHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGBjay13aWRnZXRfX3Jlc2l6ZXJfX2hhbmRsZS0ke3R9YFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRHkodCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge3g6IHQucGFnZVgsIHk6IHQucGFnZVl9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgankgPSBcIkV4cGVjdGVkIGEgZnVuY3Rpb25cIjtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSHkodCwgZSwgaSkge1xyXG4gICAgICAgICAgICB2YXIgbiA9IHRydWUsIG8gPSB0cnVlO1xyXG4gICAgICAgICAgICBpZiAodHlwZW9mIHQgIT0gXCJmdW5jdGlvblwiKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGp5KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChjdChpKSkge1xyXG4gICAgICAgICAgICAgICAgbiA9IFwibGVhZGluZ1wiIGluIGkgPyAhIWkubGVhZGluZyA6IG47XHJcbiAgICAgICAgICAgICAgICBvID0gXCJ0cmFpbGluZ1wiIGluIGkgPyAhIWkudHJhaWxpbmcgOiBvXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHVoKHQsIGUsIHtsZWFkaW5nOiBuLCBtYXhXYWl0OiBlLCB0cmFpbGluZzogb30pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgV3kgPSBIeTtcclxuICAgICAgICB2YXIgcXkgPSBpKDcwKTtcclxuXHJcbiAgICAgICAgY2xhc3MgVXkgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIldpZGdldFJlc2l6ZVwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcIl92aXNpYmxlUmVzaXplclwiLCBudWxsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiX2FjdGl2ZVJlc2l6ZXJcIiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNpemVycyA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gSWQud2luZG93LmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IubW9kZWwuc2NoZW1hLnNldEF0dHJpYnV0ZVByb3BlcnRpZXMoXCJ3aWR0aFwiLCB7aXNGb3JtYXR0aW5nOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vYnNlcnZlciA9IE9iamVjdC5jcmVhdGUocWQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb2JzZXJ2ZXIubGlzdGVuVG8odCwgXCJtb3VzZWRvd25cIiwgdGhpcy5fbW91c2VEb3duTGlzdGVuZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vYnNlcnZlci5saXN0ZW5Ubyh0LCBcIm1vdXNlbW92ZVwiLCB0aGlzLl9tb3VzZU1vdmVMaXN0ZW5lci5iaW5kKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX29ic2VydmVyLmxpc3RlblRvKHQsIFwibW91c2V1cFwiLCB0aGlzLl9tb3VzZVVwTGlzdGVuZXIuYmluZCh0aGlzKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl92aXNpYmxlUmVzaXplcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl92aXNpYmxlUmVzaXplci5yZWRyYXcoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gV3koZSwgMjAwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMub24oXCJjaGFuZ2U6X3Zpc2libGVSZXNpemVyXCIsIGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IudWkub24oXCJ1cGRhdGVcIiwgaSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vYnNlcnZlci5saXN0ZW5UbyhJZC53aW5kb3csIFwicmVzaXplXCIsIGkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuZWRpdG9yLmVkaXRpbmcudmlldy5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBuLm9uKFwiY2hhbmdlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gbi5nZXRTZWxlY3RlZEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl92aXNpYmxlUmVzaXplciA9IHRoaXMuX2dldFJlc2l6ZXJCeVZpZXdFbGVtZW50KHQpIHx8IG51bGxcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vYnNlcnZlci5zdG9wTGlzdGVuaW5nKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5fcmVzaXplcnMudmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LmRlc3Ryb3koKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhdHRhY2hUbyh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gbmV3IHp5KHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZWRpdG9yLnBsdWdpbnM7XHJcbiAgICAgICAgICAgICAgICBlLmF0dGFjaCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkuaGFzKFwiV2lkZ2V0VG9vbGJhclJlcG9zaXRvcnlcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gaS5nZXQoXCJXaWRnZXRUb29sYmFyUmVwb3NpdG9yeVwiKTtcclxuICAgICAgICAgICAgICAgICAgICBlLm9uKFwiYmVnaW5cIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmZvcmNlRGlzYWJsZWQoXCJyZXNpemVcIilcclxuICAgICAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwibG93ZXN0XCJ9KTtcclxuICAgICAgICAgICAgICAgICAgICBlLm9uKFwiY2FuY2VsXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5jbGVhckZvcmNlRGlzYWJsZWQoXCJyZXNpemVcIilcclxuICAgICAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwiaGlnaGVzdFwifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5vbihcImNvbW1pdFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuY2xlYXJGb3JjZURpc2FibGVkKFwicmVzaXplXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImhpZ2hlc3RcIn0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZXNpemVycy5zZXQodC52aWV3RWxlbWVudCwgZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0UmVzaXplckJ5SGFuZGxlKHQpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0aGlzLl9yZXNpemVycy52YWx1ZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmNvbnRhaW5zSGFuZGxlKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0UmVzaXplckJ5Vmlld0VsZW1lbnQodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3Jlc2l6ZXJzLmdldCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfbW91c2VEb3duTGlzdGVuZXIodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF6eS5pc1Jlc2l6ZUhhbmRsZShlLnRhcmdldCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLnRhcmdldDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZVJlc2l6ZXIgPSB0aGlzLl9nZXRSZXNpemVyQnlIYW5kbGUoaSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlUmVzaXplcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZVJlc2l6ZXIuYmVnaW4oaSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX21vdXNlTW92ZUxpc3RlbmVyKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hY3RpdmVSZXNpemVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlUmVzaXplci51cGRhdGVTaXplKGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9tb3VzZVVwTGlzdGVuZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYWN0aXZlUmVzaXplcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2ZVJlc2l6ZXIuY29tbWl0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZlUmVzaXplciA9IG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdnMoVXksIEpjKTtcclxuXHJcbiAgICAgICAgY2xhc3MgJHkgZXh0ZW5kcyBqdyB7XHJcbiAgICAgICAgICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uLmdldFNlbGVjdGVkRWxlbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSB5dih0KTtcclxuICAgICAgICAgICAgICAgIGlmICghdCB8fCAhdC5oYXNBdHRyaWJ1dGUoXCJ3aWR0aFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBudWxsXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSB7d2lkdGg6IHQuZ2V0QXR0cmlidXRlKFwid2lkdGhcIiksIGhlaWdodDogbnVsbH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXhlY3V0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5kb2N1bWVudC5zZWxlY3Rpb24uZ2V0U2VsZWN0ZWRFbGVtZW50KCk7XHJcbiAgICAgICAgICAgICAgICBlLmNoYW5nZShlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsIHQud2lkdGgsIGkpXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgR3kgPSBpKDcyKTtcclxuXHJcbiAgICAgICAgY2xhc3MgS3kgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1V5XVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJJbWFnZVJlc2l6ZVwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gbmV3ICR5KHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVnaXN0ZXJTY2hlbWEoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlZ2lzdGVyQ29udmVydGVycygpO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJpbWFnZVJlc2l6ZVwiLCBlKTtcclxuICAgICAgICAgICAgICAgIHQuZWRpdGluZy5kb3duY2FzdERpc3BhdGNoZXIub24oXCJpbnNlcnQ6aW1hZ2VcIiwgKGksIG4sIG8pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gby5tYXBwZXIudG9WaWV3RWxlbWVudChuLml0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB0LnBsdWdpbnMuZ2V0KFV5KS5hdHRhY2hUbyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXQ6IHQuY29uZmlnLmdldChcImltYWdlLnJlc2l6ZVVuaXRcIikgfHwgXCIlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsRWxlbWVudDogbi5pdGVtLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3RWxlbWVudDogcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yOiB0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRIYW5kbGVIb3N0KHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnF1ZXJ5U2VsZWN0b3IoXCJpbWdcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UmVzaXplSG9zdCh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc0NlbnRlcmVkKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IG4uaXRlbS5nZXRBdHRyaWJ1dGUoXCJpbWFnZVN0eWxlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF0IHx8IHQgPT0gXCJmdWxsXCIgfHwgdCA9PSBcImFsaWduQ2VudGVyXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb25Db21taXQoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlKFwiaW1hZ2VSZXNpemVcIiwge3dpZHRoOiBlfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHMub24oXCJ1cGRhdGVTaXplXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyLmhhc0NsYXNzKFwiaW1hZ2VfcmVzaXplZFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5lZGl0aW5nLnZpZXcuY2hhbmdlKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuYWRkQ2xhc3MoXCJpbWFnZV9yZXNpemVkXCIsIHIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcy5iaW5kKFwiaXNFbmFibGVkXCIpLnRvKGUpXHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwibG93XCJ9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVnaXN0ZXJTY2hlbWEoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5tb2RlbC5zY2hlbWEuZXh0ZW5kKFwiaW1hZ2VcIiwge2FsbG93QXR0cmlidXRlczogXCJ3aWR0aFwifSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3JlZ2lzdGVyQ29udmVydGVycygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIHQuY29udmVyc2lvbi5mb3IoXCJkb3duY2FzdFwiKS5hZGQodCA9PiB0Lm9uKFwiYXR0cmlidXRlOndpZHRoOmltYWdlXCIsICh0LCBlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpLmNvbnN1bWFibGUuY29uc3VtZShlLml0ZW0sIHQubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLndyaXRlcjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gaS5tYXBwZXIudG9WaWV3RWxlbWVudChlLml0ZW0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmF0dHJpYnV0ZU5ld1ZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4uc2V0U3R5bGUoXCJ3aWR0aFwiLCBlLmF0dHJpYnV0ZU5ld1ZhbHVlLCBvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbi5hZGRDbGFzcyhcImltYWdlX3Jlc2l6ZWRcIiwgbylcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLnJlbW92ZVN0eWxlKFwid2lkdGhcIiwgbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4ucmVtb3ZlQ2xhc3MoXCJpbWFnZV9yZXNpemVkXCIsIG8pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgdC5jb252ZXJzaW9uLmZvcihcInVwY2FzdFwiKS5hdHRyaWJ1dGVUb0F0dHJpYnV0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlldzoge25hbWU6IFwiZmlndXJlXCIsIHN0eWxlczoge3dpZHRoOiAvLisvfX0sXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHtrZXk6IFwid2lkdGhcIiwgdmFsdWU6IHQgPT4gdC5nZXRTdHlsZShcIndpZHRoXCIpfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgSnkgZXh0ZW5kcyBHcCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b25WaWV3ID0gbmV3IGhiKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsZUlucHV0VmlldyA9IG5ldyBZeSh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVJbnB1dFZpZXcuYmluZChcImFjY2VwdGVkVHlwZVwiKS50byh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVJbnB1dFZpZXcuYmluZChcImFsbG93TXVsdGlwbGVGaWxlc1wiKS50byh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZpbGVJbnB1dFZpZXcuZGVsZWdhdGUoXCJkb25lXCIpLnRvKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcInNwYW5cIixcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFwiY2stZmlsZS1kaWFsb2ctYnV0dG9uXCJ9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbdGhpcy5idXR0b25WaWV3LCB0aGlzLl9maWxlSW5wdXRWaWV3XVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvblZpZXcub24oXCJleGVjdXRlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9maWxlSW5wdXRWaWV3Lm9wZW4oKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9jdXMoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1dHRvblZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBZeSBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImFjY2VwdGVkVHlwZVwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiYWxsb3dNdWx0aXBsZUZpbGVzXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmJpbmRUZW1wbGF0ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGVtcGxhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZzogXCJpbnB1dFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFtcImNrLWhpZGRlblwiXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJmaWxlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmluZGV4OiBcIi0xXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2VwdDogZS50byhcImFjY2VwdGVkVHlwZVwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXVsdGlwbGU6IGUudG8oXCJhbGxvd011bHRpcGxlRmlsZXNcIilcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoYW5nZTogZS50bygoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5lbGVtZW50ICYmIHRoaXMuZWxlbWVudC5maWxlcyAmJiB0aGlzLmVsZW1lbnQuZmlsZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiZG9uZVwiLCB0aGlzLmVsZW1lbnQuZmlsZXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVsZW1lbnQudmFsdWUgPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb3BlbigpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWxlbWVudC5jbGljaygpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBReSA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk02LjkxIDEwLjU0Yy4yNi0uMjMuNjQtLjIxLjg4LjAzbDMuMzYgMy4xNCAyLjIzLTIuMDZhLjY0LjY0IDAgMCAxIC44NyAwbDIuNTIgMi45N1Y0LjVIMy4ydjEwLjEybDMuNzEtNC4wOHptMTAuMjctNy41MWMuNiAwIDEuMDkuNDcgMS4wOSAxLjA1djExLjg0YzAgLjU5LS40OSAxLjA2LTEuMDkgMS4wNkgyLjc5Yy0uNiAwLTEuMDktLjQ3LTEuMDktMS4wNlY0LjA4YzAtLjU4LjQ5LTEuMDUgMS4xLTEuMDVoMTQuMzh6bS01LjIyIDUuNTZhMS45NiAxLjk2IDAgMSAxIDMuNC0xLjk2IDEuOTYgMS45NiAwIDAgMS0zLjQgMS45NnpcIi8+PC9zdmc+JztcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWHkodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5tYXAodCA9PiB0LnJlcGxhY2UoXCIrXCIsIFwiXFxcXCtcIikpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChgXmltYWdlXFxcXC8oJHtlLmpvaW4oXCJ8XCIpfSkkYClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFp5KHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIik7XHJcbiAgICAgICAgICAgICAgICBmZXRjaChuKS50aGVuKHQgPT4gdC5ibG9iKCkpLnRoZW4odCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IGV4KHQsIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBvLnJlcGxhY2UoXCJpbWFnZS9cIiwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IGBpbWFnZS4ke3J9YDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gaXgodCwgcywgbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgYSA/IGUoYSkgOiBpKClcclxuICAgICAgICAgICAgICAgIH0pLmNhdGNoKGkpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB0eCh0KSB7XHJcbiAgICAgICAgICAgIGlmICghdC5pcyhcImVsZW1lbnRcIiwgXCJpbWdcIikgfHwgIXQuZ2V0QXR0cmlidXRlKFwic3JjXCIpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdC5nZXRBdHRyaWJ1dGUoXCJzcmNcIikubWF0Y2goL15kYXRhOmltYWdlXFwvXFx3KztiYXNlNjQsL2cpIHx8IHQuZ2V0QXR0cmlidXRlKFwic3JjXCIpLm1hdGNoKC9eYmxvYjovZylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGV4KHQsIGUpIHtcclxuICAgICAgICAgICAgaWYgKHQudHlwZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQudHlwZVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUubWF0Y2goL2RhdGE6KGltYWdlXFwvXFx3Kyk7YmFzZTY0LykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlLm1hdGNoKC9kYXRhOihpbWFnZVxcL1xcdyspO2Jhc2U2NC8pWzFdLnRvTG93ZXJDYXNlKClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcImltYWdlL2pwZWdcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBpeCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEZpbGUoW3RdLCBlLCB7dHlwZTogaX0pXHJcbiAgICAgICAgICAgIH0gY2F0Y2ggKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIG54IGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQudDtcclxuICAgICAgICAgICAgICAgIHQudWkuY29tcG9uZW50RmFjdG9yeS5hZGQoXCJpbWFnZVVwbG9hZFwiLCBpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IEp5KGkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBrYmFsYXNoZXYgIChpbWFnZSB1cGxvYWQgYnV0dG9uIGZpeClcclxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobi5idXR0b25WaWV3LCAnaXNFbmFibGVkJywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQ6ICgpID0+IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IHQuY29tbWFuZHMuZ2V0KFwiaW1hZ2VVcGxvYWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IHQuY29uZmlnLmdldChcImltYWdlLnVwbG9hZC50eXBlc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gWHkocik7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5zZXQoe2FjY2VwdGVkVHlwZTogci5tYXAodCA9PiBgaW1hZ2UvJHt0fWApLmpvaW4oXCIsXCIpLCBhbGxvd011bHRpcGxlRmlsZXM6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgICAgICBuLmJ1dHRvblZpZXcuc2V0KHtsYWJlbDogZShcImtkXCIpLCBpY29uOiBReSwgdG9vbHRpcDogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG4uYnV0dG9uVmlldy5iaW5kKFwiaXNFbmFibGVkXCIpLnRvKG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIG4ub24oXCJkb25lXCIsIChlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBBcnJheS5mcm9tKGkpLmZpbHRlcih0ID0+IHMudGVzdCh0LnR5cGUpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4ubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LmV4ZWN1dGUoXCJpbWFnZVVwbG9hZFwiLCB7ZmlsZTogbn0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG94ID0gJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgNzAwIDI1MFwiPjxyZWN0IHJ4PVwiNFwiLz48L3N2Zz4nO1xyXG4gICAgICAgIHZhciByeCA9IGkoNzQpO1xyXG4gICAgICAgIHZhciBzeCA9IGkoNzYpO1xyXG4gICAgICAgIHZhciBheCA9IGkoNzgpO1xyXG5cclxuICAgICAgICBjbGFzcyBjeCBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnBsYWNlaG9sZGVyID0gXCJkYXRhOmltYWdlL3N2Zyt4bWw7dXRmOCxcIiArIGVuY29kZVVSSUNvbXBvbmVudChveClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIHQuZWRpdGluZy5kb3duY2FzdERpc3BhdGNoZXIub24oXCJhdHRyaWJ1dGU6dXBsb2FkU3RhdHVzOmltYWdlXCIsICguLi50KSA9PiB0aGlzLnVwbG9hZFN0YXR1c0NoYW5nZSguLi50KSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdXBsb2FkU3RhdHVzQ2hhbmdlKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBlLml0ZW07XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gby5nZXRBdHRyaWJ1dGUoXCJ1cGxvYWRJZFwiKTtcclxuICAgICAgICAgICAgICAgIGlmICghaS5jb25zdW1hYmxlLmNvbnN1bWUoZS5pdGVtLCB0Lm5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gbi5wbHVnaW5zLmdldChsayk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gciA/IGUuYXR0cmlidXRlTmV3VmFsdWUgOiBudWxsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHRoaXMucGxhY2Vob2xkZXI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsID0gbi5lZGl0aW5nLm1hcHBlci50b1ZpZXdFbGVtZW50KG8pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IGkud3JpdGVyO1xyXG4gICAgICAgICAgICAgICAgaWYgKGEgPT0gXCJyZWFkaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBseChsLCBkKTtcclxuICAgICAgICAgICAgICAgICAgICB1eChjLCBsLCBkKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhID09IFwidXBsb2FkaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gcy5sb2FkZXJzLmdldChyKTtcclxuICAgICAgICAgICAgICAgICAgICBseChsLCBkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXgoYywgbCwgZClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoeChsLCBkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZngobCwgZCwgdCwgbi5lZGl0aW5nLnZpZXcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfeChsLCBkLCB0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChhID09IFwiY29tcGxldGVcIiAmJiBzLmxvYWRlcnMuZ2V0KHIpICYmICFBbC5pc0VkZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBteChsLCBkLCBuLmVkaXRpbmcudmlldylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGd4KGwsIGQpO1xyXG4gICAgICAgICAgICAgICAgaHgobCwgZCk7XHJcbiAgICAgICAgICAgICAgICBkeChsLCBkKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBseCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGlmICghdC5oYXNDbGFzcyhcImNrLWFwcGVhclwiKSkge1xyXG4gICAgICAgICAgICAgICAgZS5hZGRDbGFzcyhcImNrLWFwcGVhclwiLCB0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkeCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGUucmVtb3ZlQ2xhc3MoXCJjay1hcHBlYXJcIiwgdClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHV4KHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgaWYgKCFlLmhhc0NsYXNzKFwiY2staW1hZ2UtdXBsb2FkLXBsYWNlaG9sZGVyXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBpLmFkZENsYXNzKFwiY2staW1hZ2UtdXBsb2FkLXBsYWNlaG9sZGVyXCIsIGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbiA9IEF2KGUpO1xyXG4gICAgICAgICAgICBpZiAobi5nZXRBdHRyaWJ1dGUoXCJzcmNcIikgIT09IHQpIHtcclxuICAgICAgICAgICAgICAgIGkuc2V0QXR0cmlidXRlKFwic3JjXCIsIHQsIG4pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF3eChlLCBcInBsYWNlaG9sZGVyXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBpLmluc2VydChpLmNyZWF0ZVBvc2l0aW9uQWZ0ZXIobiksIGJ4KGkpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBoeCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGlmICh0Lmhhc0NsYXNzKFwiY2staW1hZ2UtdXBsb2FkLXBsYWNlaG9sZGVyXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBlLnJlbW92ZUNsYXNzKFwiY2staW1hZ2UtdXBsb2FkLXBsYWNlaG9sZGVyXCIsIHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAga3godCwgZSwgXCJwbGFjZWhvbGRlclwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZngodCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICBjb25zdCBvID0gcHgoZSk7XHJcbiAgICAgICAgICAgIGUuaW5zZXJ0KGUuY3JlYXRlUG9zaXRpb25BdCh0LCBcImVuZFwiKSwgbyk7XHJcbiAgICAgICAgICAgIGkub24oXCJjaGFuZ2U6dXBsb2FkZWRQZXJjZW50XCIsICh0LCBlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBuLmNoYW5nZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0LnNldFN0eWxlKFwid2lkdGhcIiwgaSArIFwiJVwiLCBvKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGd4KHQsIGUpIHtcclxuICAgICAgICAgICAga3godCwgZSwgXCJwcm9ncmVzc0JhclwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbXgodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBjb25zdCBuID0gZS5jcmVhdGVVSUVsZW1lbnQoXCJkaXZcIiwge2NsYXNzOiBcImNrLWltYWdlLXVwbG9hZC1jb21wbGV0ZS1pY29uXCJ9KTtcclxuICAgICAgICAgICAgZS5pbnNlcnQoZS5jcmVhdGVQb3NpdGlvbkF0KHQsIFwiZW5kXCIpLCBuKTtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpLmNoYW5nZSh0ID0+IHQucmVtb3ZlKHQuY3JlYXRlUmFuZ2VPbihuKSkpXHJcbiAgICAgICAgICAgIH0sIDNlMylcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHB4KHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHQuY3JlYXRlVUlFbGVtZW50KFwiZGl2XCIsIHtjbGFzczogXCJjay1wcm9ncmVzcy1iYXJcIn0pO1xyXG4gICAgICAgICAgICB0LnNldEN1c3RvbVByb3BlcnR5KFwicHJvZ3Jlc3NCYXJcIiwgdHJ1ZSwgZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBieCh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmNyZWF0ZVVJRWxlbWVudChcImRpdlwiLCB7Y2xhc3M6IFwiY2stdXBsb2FkLXBsYWNlaG9sZGVyLWxvYWRlclwifSk7XHJcbiAgICAgICAgICAgIHQuc2V0Q3VzdG9tUHJvcGVydHkoXCJwbGFjZWhvbGRlclwiLCB0cnVlLCBlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHd4KHQsIGUpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHQuZ2V0Q2hpbGRyZW4oKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkuZ2V0Q3VzdG9tUHJvcGVydHkoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBreCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSB3eCh0LCBpKTtcclxuICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgIGUucmVtb3ZlKGUuY3JlYXRlUmFuZ2VPbihuKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gX3godCwgZSwgaSkge1xyXG4gICAgICAgICAgICBpZiAoaS5kYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gQXYodCk7XHJcbiAgICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZShcInNyY1wiLCBpLmRhdGEsIG4pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHZ4IGV4dGVuZHMgc2sge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJOb3RpZmljYXRpb25cIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbihcInNob3c6d2FybmluZ1wiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvdy5hbGVydChlLm1lc3NhZ2UpXHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwibG93ZXN0XCJ9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzaG93U3VjY2Vzcyh0LCBlID0ge30pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3dOb3RpZmljYXRpb24oe21lc3NhZ2U6IHQsIHR5cGU6IFwic3VjY2Vzc1wiLCBuYW1lc3BhY2U6IGUubmFtZXNwYWNlLCB0aXRsZTogZS50aXRsZX0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNob3dJbmZvKHQsIGUgPSB7fSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2hvd05vdGlmaWNhdGlvbih7bWVzc2FnZTogdCwgdHlwZTogXCJpbmZvXCIsIG5hbWVzcGFjZTogZS5uYW1lc3BhY2UsIHRpdGxlOiBlLnRpdGxlfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2hvd1dhcm5pbmcodCwgZSA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG93Tm90aWZpY2F0aW9uKHttZXNzYWdlOiB0LCB0eXBlOiBcIndhcm5pbmdcIiwgbmFtZXNwYWNlOiBlLm5hbWVzcGFjZSwgdGl0bGU6IGUudGl0bGV9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2hvd05vdGlmaWNhdGlvbih0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gYHNob3c6JHt0LnR5cGV9YCArICh0Lm5hbWVzcGFjZSA/IGA6JHt0Lm5hbWVzcGFjZX1gIDogXCJcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUoZSwge21lc3NhZ2U6IHQubWVzc2FnZSwgdHlwZTogdC50eXBlLCB0aXRsZTogdC50aXRsZSB8fCBcIlwifSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgeXgge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpbGVzID0geHgodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9uYXRpdmUgPSB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCB0eXBlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9uYXRpdmUudHlwZXNcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0RGF0YSh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbmF0aXZlLmdldERhdGEodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0RGF0YSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9uYXRpdmUuc2V0RGF0YSh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB4eCh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmZpbGVzID8gQXJyYXkuZnJvbSh0LmZpbGVzKSA6IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5pdGVtcyA/IEFycmF5LmZyb20odC5pdGVtcykgOiBbXTtcclxuICAgICAgICAgICAgaWYgKGUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpLmZpbHRlcih0ID0+IHQua2luZCA9PT0gXCJmaWxlXCIpLm1hcCh0ID0+IHQuZ2V0QXNGaWxlKCkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBDeCBleHRlbmRzIEp1IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9tRXZlbnRUeXBlID0gW1wicGFzdGVcIiwgXCJjb3B5XCIsIFwiY3V0XCIsIFwiZHJvcFwiLCBcImRyYWdvdmVyXCJdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhlLCBcInBhc3RlXCIsIGksIHtwcmlvcml0eTogXCJsb3dcIn0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhlLCBcImRyb3BcIiwgaSwge3ByaW9yaXR5OiBcImxvd1wifSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaSh0LCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLmRyb3BSYW5nZSA/IFtpLmRyb3BSYW5nZV0gOiBBcnJheS5mcm9tKGUuc2VsZWN0aW9uLmdldFJhbmdlcygpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gbmV3IHRzKGUsIFwiY2xpcGJvYXJkSW5wdXRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5maXJlKG8sIHtkYXRhVHJhbnNmZXI6IGkuZGF0YVRyYW5zZmVyLCB0YXJnZXRSYW5nZXM6IG59KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5zdG9wLmNhbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnN0b3BQcm9wYWdhdGlvbigpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvbkRvbUV2ZW50KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB7ZGF0YVRyYW5zZmVyOiBuZXcgeXgodC5jbGlwYm9hcmREYXRhID8gdC5jbGlwYm9hcmREYXRhIDogdC5kYXRhVHJhbnNmZXIpfTtcclxuICAgICAgICAgICAgICAgIGlmICh0LnR5cGUgPT0gXCJkcm9wXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLmRyb3BSYW5nZSA9IEF4KHRoaXMudmlldywgdClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh0LnR5cGUsIHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEF4KHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IGUudGFyZ2V0Lm93bmVyRG9jdW1lbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLmNsaWVudFg7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBlLmNsaWVudFk7XHJcbiAgICAgICAgICAgIGxldCByO1xyXG4gICAgICAgICAgICBpZiAoaS5jYXJldFJhbmdlRnJvbVBvaW50ICYmIGkuY2FyZXRSYW5nZUZyb21Qb2ludChuLCBvKSkge1xyXG4gICAgICAgICAgICAgICAgciA9IGkuY2FyZXRSYW5nZUZyb21Qb2ludChuLCBvKVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGUucmFuZ2VQYXJlbnQpIHtcclxuICAgICAgICAgICAgICAgIHIgPSBpLmNyZWF0ZVJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICByLnNldFN0YXJ0KGUucmFuZ2VQYXJlbnQsIGUucmFuZ2VPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgci5jb2xsYXBzZSh0cnVlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5kb21Db252ZXJ0ZXIuZG9tUmFuZ2VUb1ZpZXcocilcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0LmRvY3VtZW50LnNlbGVjdGlvbi5nZXRGaXJzdFJhbmdlKClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVHgodCkge1xyXG4gICAgICAgICAgICB0ID0gdC5yZXBsYWNlKC88L2csIFwiJmx0O1wiKS5yZXBsYWNlKC8+L2csIFwiJmd0O1wiKS5yZXBsYWNlKC9cXG4vZywgXCI8L3A+PHA+XCIpLnJlcGxhY2UoL15cXHMvLCBcIiZuYnNwO1wiKS5yZXBsYWNlKC9cXHMkLywgXCImbmJzcDtcIikucmVwbGFjZSgvXFxzXFxzL2csIFwiICZuYnNwO1wiKTtcclxuICAgICAgICAgICAgaWYgKHQuaW5kZXhPZihcIjwvcD48cD5cIikgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgdCA9IGA8cD4ke3R9PC9wPmBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gUHgodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdC5yZXBsYWNlKC88c3Bhbig/OiBjbGFzcz1cIkFwcGxlLWNvbnZlcnRlZC1zcGFjZVwifCk+KFxccyspPFxcL3NwYW4+L2csICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIiBcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IFN4ID0gW1wiZmlnY2FwdGlvblwiLCBcImxpXCJdO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBFeCh0KSB7XHJcbiAgICAgICAgICAgIGxldCBlID0gXCJcIjtcclxuICAgICAgICAgICAgaWYgKHQuaXMoXCJ0ZXh0XCIpIHx8IHQuaXMoXCJ0ZXh0UHJveHlcIikpIHtcclxuICAgICAgICAgICAgICAgIGUgPSB0LmRhdGFcclxuICAgICAgICAgICAgfSBlbHNlIGlmICh0LmlzKFwiaW1nXCIpICYmIHQuaGFzQXR0cmlidXRlKFwiYWx0XCIpKSB7XHJcbiAgICAgICAgICAgICAgICBlID0gdC5nZXRBdHRyaWJ1dGUoXCJhbHRcIilcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxldCBpID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiB0LmdldENoaWxkcmVuKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gRXgobik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgJiYgKGkuaXMoXCJjb250YWluZXJFbGVtZW50XCIpIHx8IG4uaXMoXCJjb250YWluZXJFbGVtZW50XCIpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoU3guaW5jbHVkZXMoaS5uYW1lKSB8fCBTeC5pbmNsdWRlcyhuLm5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlICs9IFwiXFxuXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUgKz0gXCJcXG5cXG5cIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGUgKz0gdDtcclxuICAgICAgICAgICAgICAgICAgICBpID0gblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBSeCBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiQ2xpcGJvYXJkXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm1vZGVsLmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuZWRpdGluZy52aWV3O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGkuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9odG1sRGF0YVByb2Nlc3NvciA9IG5ldyBncChuKTtcclxuICAgICAgICAgICAgICAgIGkuYWRkT2JzZXJ2ZXIoQ3gpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhuLCBcImNsaXBib2FyZElucHV0XCIsIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmlzUmVhZE9ubHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwiaGlnaGVzdFwifSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKG4sIFwiY2xpcGJvYXJkSW5wdXRcIiwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5kYXRhVHJhbnNmZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG8gPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuLmdldERhdGEoXCJ0ZXh0L2h0bWxcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IFB4KG4uZ2V0RGF0YShcInRleHQvaHRtbFwiKSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG4uZ2V0RGF0YShcInRleHQvcGxhaW5cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IFR4KG4uZ2V0RGF0YShcInRleHQvcGxhaW5cIikpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG8gPSB0aGlzLl9odG1sRGF0YVByb2Nlc3Nvci50b1ZpZXcobyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiaW5wdXRUcmFuc2Zvcm1hdGlvblwiLCB7Y29udGVudDogbywgZGF0YVRyYW5zZmVyOiBufSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zY3JvbGxUb1RoZVNlbGVjdGlvbigpXHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwibG93XCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odGhpcywgXCJpbnB1dFRyYW5zZm9ybWF0aW9uXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlLmNvbnRlbnQuaXNFbXB0eSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IuZGF0YTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZWRpdG9yLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdC50b01vZGVsKGUuY29udGVudCwgXCIkY2xpcGJvYXJkSG9sZGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobi5jaGlsZENvdW50ID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuaW5zZXJ0Q29udGVudChuKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJsb3dcIn0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG8oaSwgbykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBvLmRhdGFUcmFuc2ZlcjtcclxuICAgICAgICAgICAgICAgICAgICBvLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IHQuZGF0YS50b1ZpZXcodC5tb2RlbC5nZXRTZWxlY3RlZENvbnRlbnQoZS5zZWxlY3Rpb24pKTtcclxuICAgICAgICAgICAgICAgICAgICBuLmZpcmUoXCJjbGlwYm9hcmRPdXRwdXRcIiwge2RhdGFUcmFuc2ZlcjogciwgY29udGVudDogcywgbWV0aG9kOiBpLm5hbWV9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8obiwgXCJjb3B5XCIsIG8sIHtwcmlvcml0eTogXCJsb3dcIn0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhuLCBcImN1dFwiLCAoZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmlzUmVhZE9ubHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbyhlLCBpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJsb3dcIn0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhuLCBcImNsaXBib2FyZE91dHB1dFwiLCAoaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbi5jb250ZW50LmlzRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbi5kYXRhVHJhbnNmZXIuc2V0RGF0YShcInRleHQvaHRtbFwiLCB0aGlzLl9odG1sRGF0YVByb2Nlc3Nvci50b0RhdGEobi5jb250ZW50KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4uZGF0YVRyYW5zZmVyLnNldERhdGEoXCJ0ZXh0L3BsYWluXCIsIEV4KG4uY29udGVudCkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuLm1ldGhvZCA9PSBcImN1dFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQubW9kZWwuZGVsZXRlQ29udGVudChlLnNlbGVjdGlvbilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwibG93XCJ9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBPeCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9jdW1lbnQgPSB0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZURvY3VtZW50RnJhZ21lbnQodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBxbCh0aGlzLmRvY3VtZW50LCB0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVFbGVtZW50KHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgemModGhpcy5kb2N1bWVudCwgdCwgZSwgaSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlVGV4dCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IExzKHRoaXMuZG9jdW1lbnQsIHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNsb25lKHQsIGUgPSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuX2Nsb25lKGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFwcGVuZENoaWxkKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlLl9hcHBlbmRDaGlsZCh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbnNlcnRDaGlsZCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaS5faW5zZXJ0Q2hpbGQodCwgZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVtb3ZlQ2hpbGRyZW4odCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkuX3JlbW92ZUNoaWxkcmVuKHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbW92ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlbW92ZUNoaWxkcmVuKGUuZ2V0Q2hpbGRJbmRleCh0KSwgMSwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXBsYWNlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGlmIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGkuZ2V0Q2hpbGRJbmRleCh0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUNoaWxkcmVuKG4sIDEsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5zZXJ0Q2hpbGQobiwgZSwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB1bndyYXBFbGVtZW50KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuZ2V0Q2hpbGRJbmRleCh0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZSh0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmluc2VydENoaWxkKGksIHQuZ2V0Q2hpbGRyZW4oKSwgZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVuYW1lKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgemModGhpcy5kb2N1bWVudCwgdCwgZS5nZXRBdHRyaWJ1dGVzKCksIGUuZ2V0Q2hpbGRyZW4oKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZXBsYWNlKGUsIGkpID8gaSA6IG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0QXR0cmlidXRlKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGkuX3NldEF0dHJpYnV0ZSh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW1vdmVBdHRyaWJ1dGUodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgZS5fcmVtb3ZlQXR0cmlidXRlKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFkZENsYXNzKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGUuX2FkZENsYXNzKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGUuX3JlbW92ZUNsYXNzKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNldFN0eWxlKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChOKHQpICYmIGkgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpLl9zZXRTdHlsZSh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW1vdmVTdHlsZSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBlLl9yZW1vdmVTdHlsZSh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzZXRDdXN0b21Qcm9wZXJ0eSh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICBpLl9zZXRDdXN0b21Qcm9wZXJ0eSh0LCBlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW1vdmVDdXN0b21Qcm9wZXJ0eSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5fcmVtb3ZlQ3VzdG9tUHJvcGVydHkodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlUG9zaXRpb25BdCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGwuX2NyZWF0ZUF0KHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZVBvc2l0aW9uQWZ0ZXIodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRsLl9jcmVhdGVBZnRlcih0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVQb3NpdGlvbkJlZm9yZSh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGwuX2NyZWF0ZUJlZm9yZSh0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVSYW5nZSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IHVsKHQsIGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNyZWF0ZVJhbmdlT24odCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVsLl9jcmVhdGVPbih0KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVSYW5nZUluKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB1bC5fY3JlYXRlSW4odClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlU2VsZWN0aW9uKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgZ2wodCwgZSwgaSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgSXggZXh0ZW5kcyBqdyB7XHJcbiAgICAgICAgICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IEN2KHRoaXMuZWRpdG9yLm1vZGVsKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBleGVjdXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvcjtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBrYmFsYXNoZXYgIChpbWFnZSB1cGxvYWQgYnV0dG9uIGZpeClcclxuICAgICAgICAgICAgICAgIGUubW9kZWwuZGVsZXRlQ29udGVudChlLm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbiAgICk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5wbHVnaW5zLmdldChsayk7XHJcbiAgICAgICAgICAgICAgICBpLmNoYW5nZShlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gQXJyYXkuaXNBcnJheSh0LmZpbGUpID8gdC5maWxlIDogW3QuZmlsZV07XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVngoZSwgaSwgbiwgdClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBWeCh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBpLmNyZWF0ZUxvYWRlcihuKTtcclxuICAgICAgICAgICAgaWYgKCFvKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB4dih0LCBlLCB7dXBsb2FkSWQ6IG8uaWR9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgTnggZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2xrLCB2eCwgUnhdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkltYWdlVXBsb2FkRWRpdGluZ1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdC5jb25maWcuZGVmaW5lKFwiaW1hZ2VcIiwge3VwbG9hZDoge3R5cGVzOiBbXCJqcGVnXCIsIFwicG5nXCIsIFwiZ2lmXCIsIFwiYm1wXCIsIFwid2VicFwiLCBcInRpZmZcIl19fSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm1vZGVsLmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQubW9kZWwuc2NoZW1hO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuY29udmVyc2lvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0LnBsdWdpbnMuZ2V0KGxrKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBYeSh0LmNvbmZpZy5nZXQoXCJpbWFnZS51cGxvYWQudHlwZXNcIikpO1xyXG4gICAgICAgICAgICAgICAgaS5leHRlbmQoXCJpbWFnZVwiLCB7YWxsb3dBdHRyaWJ1dGVzOiBbXCJ1cGxvYWRJZFwiLCBcInVwbG9hZFN0YXR1c1wiXX0pO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJpbWFnZVVwbG9hZFwiLCBuZXcgSXgodCkpO1xyXG4gICAgICAgICAgICAgICAgbi5mb3IoXCJ1cGNhc3RcIikuYXR0cmlidXRlVG9BdHRyaWJ1dGUoe3ZpZXc6IHtuYW1lOiBcImltZ1wiLCBrZXk6IFwidXBsb2FkSWRcIn0sIG1vZGVsOiBcInVwbG9hZElkXCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odC5lZGl0aW5nLnZpZXcuZG9jdW1lbnQsIFwiY2xpcGJvYXJkSW5wdXRcIiwgKGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoTXgoaS5kYXRhVHJhbnNmZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gQXJyYXkuZnJvbShpLmRhdGFUcmFuc2Zlci5maWxlcykuZmlsdGVyKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLnRlc3QodC50eXBlKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBpLnRhcmdldFJhbmdlcy5tYXAoZSA9PiB0LmVkaXRpbmcubWFwcGVyLnRvTW9kZWxSYW5nZShlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5tb2RlbC5jaGFuZ2UoaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0U2VsZWN0aW9uKG8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc3RvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5tb2RlbC5lbnF1ZXVlQ2hhbmdlKFwiZGVmYXVsdFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlKFwiaW1hZ2VVcGxvYWRcIiwge2ZpbGU6IG59KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odC5wbHVnaW5zLmdldChSeCksIFwiaW5wdXRUcmFuc2Zvcm1hdGlvblwiLCAoZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBBcnJheS5mcm9tKHQuZWRpdGluZy52aWV3LmNyZWF0ZVJhbmdlSW4oaS5jb250ZW50KSkuZmlsdGVyKHQgPT4gdHgodC5pdGVtKSAmJiAhdC5pdGVtLmdldEF0dHJpYnV0ZShcInVwbG9hZFByb2Nlc3NlZFwiKSkubWFwKHQgPT4gKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZTogWnkodC5pdGVtKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VFbGVtZW50OiB0Lml0ZW1cclxuICAgICAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IG5ldyBPeCh0LmVkaXRpbmcudmlldy5kb2N1bWVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgci5zZXRBdHRyaWJ1dGUoXCJ1cGxvYWRQcm9jZXNzZWRcIiwgdHJ1ZSwgdC5pbWFnZUVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gby5jcmVhdGVMb2FkZXIodC5wcm9taXNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuc2V0QXR0cmlidXRlKFwic3JjXCIsIFwiXCIsIHQuaW1hZ2VFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuc2V0QXR0cmlidXRlKFwidXBsb2FkSWRcIiwgZS5pZCwgdC5pbWFnZUVsZW1lbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQuZWRpdGluZy52aWV3LmRvY3VtZW50Lm9uKFwiZHJhZ292ZXJcIiwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZS5vbihcImNoYW5nZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuZGlmZmVyLmdldENoYW5nZXMoe2luY2x1ZGVDaGFuZ2VzSW5HcmF2ZXlhcmQ6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS50eXBlID09IFwiaW5zZXJ0XCIgJiYgZS5uYW1lICE9IFwiJHRleHRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IGUucG9zaXRpb24ubm9kZUFmdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGUucG9zaXRpb24ucm9vdC5yb290TmFtZSA9PSBcIiRncmF2ZXlhcmRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBCeCh0LCBpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLmdldEF0dHJpYnV0ZShcInVwbG9hZElkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gby5sb2FkZXJzLmdldCh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5hYm9ydCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChpLnN0YXR1cyA9PSBcImlkbGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZWFkQW5kVXBsb2FkKGksIGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3JlYWRBbmRVcGxvYWQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGkubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gaS5sb2NhbGUudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBpLnBsdWdpbnMuZ2V0KGxrKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBpLnBsdWdpbnMuZ2V0KHZ4KTtcclxuICAgICAgICAgICAgICAgIG4uZW5xdWV1ZUNoYW5nZShcInRyYW5zcGFyZW50XCIsIHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKFwidXBsb2FkU3RhdHVzXCIsIFwicmVhZGluZ1wiLCBlKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5yZWFkKCkudGhlbigoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IHQudXBsb2FkKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEFsLmlzU2FmYXJpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBpLmVkaXRpbmcubWFwcGVyLnRvVmlld0VsZW1lbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBBdih0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5lZGl0aW5nLnZpZXcub25jZShcInJlbmRlclwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW4ucGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gaS5lZGl0aW5nLnZpZXcuZG9tQ29udmVydGVyLm1hcFZpZXdUb0RvbShuLnBhcmVudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnN0eWxlLmRpc3BsYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnN0eWxlLmRpc3BsYXkgPSBcIm5vbmVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuX2NrSGFjayA9IHQub2Zmc2V0SGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zdHlsZS5kaXNwbGF5ID0gZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBuLmVucXVldWVDaGFuZ2UoXCJ0cmFuc3BhcmVudFwiLCB0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoXCJ1cGxvYWRTdGF0dXNcIiwgXCJ1cGxvYWRpbmdcIiwgZSlcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgICAgICAgICAgfSkudGhlbih0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBuLmVucXVldWVDaGFuZ2UoXCJ0cmFuc3BhcmVudFwiLCBpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRBdHRyaWJ1dGVzKHt1cGxvYWRTdGF0dXM6IFwiY29tcGxldGVcIiwgc3JjOiB0LmRlZmF1bHR9LCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcGFyc2VBbmRTZXRTcmNzZXRBdHRyaWJ1dGVPbkltYWdlKHQsIGUsIGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYSgpXHJcbiAgICAgICAgICAgICAgICB9KS5jYXRjaChpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5zdGF0dXMgIT09IFwiZXJyb3JcIiAmJiB0LnN0YXR1cyAhPT0gXCJhYm9ydGVkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgaVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5zdGF0dXMgPT0gXCJlcnJvclwiICYmIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcy5zaG93V2FybmluZyhpLCB7dGl0bGU6IG8oXCJrZVwiKSwgbmFtZXNwYWNlOiBcInVwbG9hZFwifSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIG4uZW5xdWV1ZUNoYW5nZShcInRyYW5zcGFyZW50XCIsIHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnJlbW92ZShlKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBhKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG4uZW5xdWV1ZUNoYW5nZShcInRyYW5zcGFyZW50XCIsIHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnJlbW92ZUF0dHJpYnV0ZShcInVwbG9hZElkXCIsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnJlbW92ZUF0dHJpYnV0ZShcInVwbG9hZFN0YXR1c1wiLCBlKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHIuZGVzdHJveUxvYWRlcih0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcGFyc2VBbmRTZXRTcmNzZXRBdHRyaWJ1dGVPbkltYWdlKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGxldCBuID0gMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBPYmplY3Qua2V5cyh0KS5maWx0ZXIodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHBhcnNlSW50KHQsIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWlzTmFOKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBNYXRoLm1heChuLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KS5tYXAoZSA9PiBgJHt0W2VdfSAke2V9d2ApLmpvaW4oXCIsIFwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChvICE9IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldEF0dHJpYnV0ZShcInNyY3NldFwiLCB7ZGF0YTogbywgd2lkdGg6IG59LCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBNeCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBBcnJheS5mcm9tKHQudHlwZXMpLmluY2x1ZGVzKFwidGV4dC9odG1sXCIpICYmIHQuZ2V0RGF0YShcInRleHQvaHRtbFwiKSAhPT0gXCJcIlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQngodCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0Lm1vZGVsLmNyZWF0ZVJhbmdlT24oZSkpLmZpbHRlcih0ID0+IHQuaXRlbS5pcyhcImltYWdlXCIpKS5tYXAodCA9PiB0Lml0ZW0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyB6eCBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSW1hZ2VVcGxvYWRcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtOeCwgbngsIGN4XVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBMeCBleHRlbmRzIGp3IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGlsZENvbW1hbmRzID0gW11cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVmcmVzaCgpIHtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXhlY3V0ZSguLi50KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5fZ2V0Rmlyc3RFbmFibGVkQ29tbWFuZCgpO1xyXG4gICAgICAgICAgICAgICAgZS5leGVjdXRlKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlZ2lzdGVyQ2hpbGRDb21tYW5kKHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoaWxkQ29tbWFuZHMucHVzaCh0KTtcclxuICAgICAgICAgICAgICAgIHQub24oXCJjaGFuZ2U6aXNFbmFibGVkXCIsICgpID0+IHRoaXMuX2NoZWNrRW5hYmxlZCgpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoZWNrRW5hYmxlZCgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jaGVja0VuYWJsZWQoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9ICEhdGhpcy5fZ2V0Rmlyc3RFbmFibGVkQ29tbWFuZCgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRGaXJzdEVuYWJsZWRDb21tYW5kKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NoaWxkQ29tbWFuZHMuZmluZCh0ID0+IHQuaXNFbmFibGVkKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBGeCBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSW5kZW50RWRpdGluZ1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcImluZGVudFwiLCBuZXcgTHgodCkpO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJvdXRkZW50XCIsIG5ldyBMeCh0KSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIER4ID0gJzxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTIgMy43NWMwIC40MTQuMzM2Ljc1Ljc1Ljc1aDE0LjVhLjc1Ljc1IDAgMSAwIDAtMS41SDIuNzVhLjc1Ljc1IDAgMCAwLS43NS43NXptNSA2YzAgLjQxNC4zMzYuNzUuNzUuNzVoOS41YS43NS43NSAwIDEgMCAwLTEuNWgtOS41YS43NS43NSAwIDAgMC0uNzUuNzV6TTIuNzUgMTYuNWgxNC41YS43NS43NSAwIDEgMCAwLTEuNUgyLjc1YS43NS43NSAwIDEgMCAwIDEuNXpNMS42MzIgNi45NUw1LjAyIDkuMzU4YS40LjQgMCAwIDEtLjAxMy42NjFsLTMuMzkgMi4yMDdBLjQuNCAwIDAgMSAxIDExLjg5MlY3LjI3NWEuNC40IDAgMCAxIC42MzItLjMyNnpcIi8+PC9zdmc+JztcclxuICAgICAgICB2YXIganggPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMiAzLjc1YzAgLjQxNC4zMzYuNzUuNzUuNzVoMTQuNWEuNzUuNzUgMCAxIDAgMC0xLjVIMi43NWEuNzUuNzUgMCAwIDAtLjc1Ljc1em01IDZjMCAuNDE0LjMzNi43NS43NS43NWg5LjVhLjc1Ljc1IDAgMSAwIDAtMS41aC05LjVhLjc1Ljc1IDAgMCAwLS43NS43NXpNMi43NSAxNi41aDE0LjVhLjc1Ljc1IDAgMSAwIDAtMS41SDIuNzVhLjc1Ljc1IDAgMSAwIDAgMS41em0xLjYxOC05LjU1TC45OCA5LjM1OGEuNC40IDAgMCAwIC4wMTMuNjYxbDMuMzkgMi4yMDdBLjQuNCAwIDAgMCA1IDExLjg5MlY3LjI3NWEuNC40IDAgMCAwLS42MzItLjMyNnpcIi8+PC9zdmc+JztcclxuXHJcbiAgICAgICAgY2xhc3MgSHggZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkluZGVudFVJXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZS51aUxhbmd1YWdlRGlyZWN0aW9uID09IFwibHRyXCIgPyBEeCA6IGp4O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGUudWlMYW5ndWFnZURpcmVjdGlvbiA9PSBcImx0clwiID8ganggOiBEeDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RlZmluZUJ1dHRvbihcImluZGVudFwiLCBpKFwiamdcIiksIG4pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmaW5lQnV0dG9uKFwib3V0ZGVudFwiLCBpKFwiamhcIiksIG8pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9kZWZpbmVCdXR0b24odCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgbi51aS5jb21wb25lbnRGYWN0b3J5LmFkZCh0LCBvID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gbi5jb21tYW5kcy5nZXQodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyBoYihvKTtcclxuICAgICAgICAgICAgICAgICAgICBzLnNldCh7bGFiZWw6IGUsIGljb246IGksIHRvb2x0aXA6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgICAgICBzLmJpbmQoXCJpc09uXCIsIFwiaXNFbmFibGVkXCIpLnRvKHIsIFwidmFsdWVcIiwgXCJpc0VuYWJsZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhzLCBcImV4ZWN1dGVcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLmV4ZWN1dGUodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4uZWRpdGluZy52aWV3LmZvY3VzKClcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgV3ggZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkluZGVudFwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW0Z4LCBIeF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgcXggZXh0ZW5kcyBqdyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5kZW50QmVoYXZpb3IgPSBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBXdyhlLmRvY3VtZW50LnNlbGVjdGlvbi5nZXRTZWxlY3RlZEJsb2NrcygpKTtcclxuICAgICAgICAgICAgICAgIGlmICghaSB8fCAhZS5zY2hlbWEuY2hlY2tBdHRyaWJ1dGUoaSwgXCJibG9ja0luZGVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IHRoaXMuX2luZGVudEJlaGF2aW9yLmNoZWNrRW5hYmxlZChpLmdldEF0dHJpYnV0ZShcImJsb2NrSW5kZW50XCIpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBleGVjdXRlKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFV4KHQpO1xyXG4gICAgICAgICAgICAgICAgdC5jaGFuZ2UodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IGkuZ2V0QXR0cmlidXRlKFwiYmxvY2tJbmRlbnRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9pbmRlbnRCZWhhdmlvci5nZXROZXh0SW5kZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRBdHRyaWJ1dGUoXCJibG9ja0luZGVudFwiLCBuLCBpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmVBdHRyaWJ1dGUoXCJibG9ja0luZGVudFwiLCBpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVXgodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LnNjaGVtYTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IEFycmF5LmZyb20oZS5nZXRTZWxlY3RlZEJsb2NrcygpKTtcclxuICAgICAgICAgICAgcmV0dXJuIG4uZmlsdGVyKHQgPT4gaS5jaGVja0F0dHJpYnV0ZSh0LCBcImJsb2NrSW5kZW50XCIpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgJHgge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRm9yd2FyZCA9IHQuZGlyZWN0aW9uID09PSBcImZvcndhcmRcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gdC5vZmZzZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnVuaXQgPSB0LnVuaXRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY2hlY2tFbmFibGVkKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBwYXJzZUZsb2F0KHQgfHwgMCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pc0ZvcndhcmQgfHwgZSA+IDBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0TmV4dEluZGVudCh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gcGFyc2VGbG9hdCh0IHx8IDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9ICF0IHx8IHQuZW5kc1dpdGgodGhpcy51bml0KTtcclxuICAgICAgICAgICAgICAgIGlmICghaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmlzRm9yd2FyZCA/IHRoaXMub2Zmc2V0ICsgdGhpcy51bml0IDogdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5pc0ZvcndhcmQgPyB0aGlzLm9mZnNldCA6IC10aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBlICsgbjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBvID4gMCA/IG8gKyB0aGlzLnVuaXQgOiB1bmRlZmluZWRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgR3gge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRm9yd2FyZCA9IHQuZGlyZWN0aW9uID09PSBcImZvcndhcmRcIjtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2xhc3NlcyA9IHQuY2xhc3Nlc1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjaGVja0VuYWJsZWQodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuY2xhc3Nlcy5pbmRleE9mKHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNGb3J3YXJkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUgPCB0aGlzLmNsYXNzZXMubGVuZ3RoIC0gMVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZSA+PSAwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldE5leHRJbmRlbnQodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuY2xhc3Nlcy5pbmRleE9mKHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuaXNGb3J3YXJkID8gMSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xhc3Nlc1tlICsgaV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgS3ggPSAvXiMoWzAtOWEtZl17Myw0fXxbMC05YS1mXXs2fXxbMC05YS1mXXs4fSkkL2k7XHJcbiAgICAgICAgY29uc3QgSnggPSAvXnJnYlxcKFsgXT8oWzAtOV17MSwzfVsgJV0/LFsgXT8pezIsM31bMC05XXsxLDN9WyAlXT9cXCkkL2k7XHJcbiAgICAgICAgY29uc3QgWXggPSAvXnJnYmFcXChbIF0/KFswLTldezEsM31bICVdPyxbIF0/KXszfSgxfFswLTldKyV8WzBdP1xcLj9bMC05XSspXFwpJC9pO1xyXG4gICAgICAgIGNvbnN0IFF4ID0gL15oc2xcXChbIF0/KFswLTldezEsM31bICVdP1ssXT9bIF0qKXszfSgxfFswLTldKyV8WzBdP1xcLj9bMC05XSspP1xcKSQvaTtcclxuICAgICAgICBjb25zdCBYeCA9IC9eaHNsYVxcKFsgXT8oWzAtOV17MSwzfVsgJV0/LFsgXT8pezIsM30oMXxbMC05XSslfFswXT9cXC4/WzAtOV0rKVxcKSQvaTtcclxuICAgICAgICBjb25zdCBaeCA9IG5ldyBTZXQoW1wiYmxhY2tcIiwgXCJzaWx2ZXJcIiwgXCJncmF5XCIsIFwid2hpdGVcIiwgXCJtYXJvb25cIiwgXCJyZWRcIiwgXCJwdXJwbGVcIiwgXCJmdWNoc2lhXCIsIFwiZ3JlZW5cIiwgXCJsaW1lXCIsIFwib2xpdmVcIiwgXCJ5ZWxsb3dcIiwgXCJuYXZ5XCIsIFwiYmx1ZVwiLCBcInRlYWxcIiwgXCJhcXVhXCIsIFwib3JhbmdlXCIsIFwiYWxpY2VibHVlXCIsIFwiYW50aXF1ZXdoaXRlXCIsIFwiYXF1YW1hcmluZVwiLCBcImF6dXJlXCIsIFwiYmVpZ2VcIiwgXCJiaXNxdWVcIiwgXCJibGFuY2hlZGFsbW9uZFwiLCBcImJsdWV2aW9sZXRcIiwgXCJicm93blwiLCBcImJ1cmx5d29vZFwiLCBcImNhZGV0Ymx1ZVwiLCBcImNoYXJ0cmV1c2VcIiwgXCJjaG9jb2xhdGVcIiwgXCJjb3JhbFwiLCBcImNvcm5mbG93ZXJibHVlXCIsIFwiY29ybnNpbGtcIiwgXCJjcmltc29uXCIsIFwiY3lhblwiLCBcImRhcmtibHVlXCIsIFwiZGFya2N5YW5cIiwgXCJkYXJrZ29sZGVucm9kXCIsIFwiZGFya2dyYXlcIiwgXCJkYXJrZ3JlZW5cIiwgXCJkYXJrZ3JleVwiLCBcImRhcmtraGFraVwiLCBcImRhcmttYWdlbnRhXCIsIFwiZGFya29saXZlZ3JlZW5cIiwgXCJkYXJrb3JhbmdlXCIsIFwiZGFya29yY2hpZFwiLCBcImRhcmtyZWRcIiwgXCJkYXJrc2FsbW9uXCIsIFwiZGFya3NlYWdyZWVuXCIsIFwiZGFya3NsYXRlYmx1ZVwiLCBcImRhcmtzbGF0ZWdyYXlcIiwgXCJkYXJrc2xhdGVncmV5XCIsIFwiZGFya3R1cnF1b2lzZVwiLCBcImRhcmt2aW9sZXRcIiwgXCJkZWVwcGlua1wiLCBcImRlZXBza3libHVlXCIsIFwiZGltZ3JheVwiLCBcImRpbWdyZXlcIiwgXCJkb2RnZXJibHVlXCIsIFwiZmlyZWJyaWNrXCIsIFwiZmxvcmFsd2hpdGVcIiwgXCJmb3Jlc3RncmVlblwiLCBcImdhaW5zYm9yb1wiLCBcImdob3N0d2hpdGVcIiwgXCJnb2xkXCIsIFwiZ29sZGVucm9kXCIsIFwiZ3JlZW55ZWxsb3dcIiwgXCJncmV5XCIsIFwiaG9uZXlkZXdcIiwgXCJob3RwaW5rXCIsIFwiaW5kaWFucmVkXCIsIFwiaW5kaWdvXCIsIFwiaXZvcnlcIiwgXCJraGFraVwiLCBcImxhdmVuZGVyXCIsIFwibGF2ZW5kZXJibHVzaFwiLCBcImxhd25ncmVlblwiLCBcImxlbW9uY2hpZmZvblwiLCBcImxpZ2h0Ymx1ZVwiLCBcImxpZ2h0Y29yYWxcIiwgXCJsaWdodGN5YW5cIiwgXCJsaWdodGdvbGRlbnJvZHllbGxvd1wiLCBcImxpZ2h0Z3JheVwiLCBcImxpZ2h0Z3JlZW5cIiwgXCJsaWdodGdyZXlcIiwgXCJsaWdodHBpbmtcIiwgXCJsaWdodHNhbG1vblwiLCBcImxpZ2h0c2VhZ3JlZW5cIiwgXCJsaWdodHNreWJsdWVcIiwgXCJsaWdodHNsYXRlZ3JheVwiLCBcImxpZ2h0c2xhdGVncmV5XCIsIFwibGlnaHRzdGVlbGJsdWVcIiwgXCJsaWdodHllbGxvd1wiLCBcImxpbWVncmVlblwiLCBcImxpbmVuXCIsIFwibWFnZW50YVwiLCBcIm1lZGl1bWFxdWFtYXJpbmVcIiwgXCJtZWRpdW1ibHVlXCIsIFwibWVkaXVtb3JjaGlkXCIsIFwibWVkaXVtcHVycGxlXCIsIFwibWVkaXVtc2VhZ3JlZW5cIiwgXCJtZWRpdW1zbGF0ZWJsdWVcIiwgXCJtZWRpdW1zcHJpbmdncmVlblwiLCBcIm1lZGl1bXR1cnF1b2lzZVwiLCBcIm1lZGl1bXZpb2xldHJlZFwiLCBcIm1pZG5pZ2h0Ymx1ZVwiLCBcIm1pbnRjcmVhbVwiLCBcIm1pc3R5cm9zZVwiLCBcIm1vY2Nhc2luXCIsIFwibmF2YWpvd2hpdGVcIiwgXCJvbGRsYWNlXCIsIFwib2xpdmVkcmFiXCIsIFwib3JhbmdlcmVkXCIsIFwib3JjaGlkXCIsIFwicGFsZWdvbGRlbnJvZFwiLCBcInBhbGVncmVlblwiLCBcInBhbGV0dXJxdW9pc2VcIiwgXCJwYWxldmlvbGV0cmVkXCIsIFwicGFwYXlhd2hpcFwiLCBcInBlYWNocHVmZlwiLCBcInBlcnVcIiwgXCJwaW5rXCIsIFwicGx1bVwiLCBcInBvd2RlcmJsdWVcIiwgXCJyb3N5YnJvd25cIiwgXCJyb3lhbGJsdWVcIiwgXCJzYWRkbGVicm93blwiLCBcInNhbG1vblwiLCBcInNhbmR5YnJvd25cIiwgXCJzZWFncmVlblwiLCBcInNlYXNoZWxsXCIsIFwic2llbm5hXCIsIFwic2t5Ymx1ZVwiLCBcInNsYXRlYmx1ZVwiLCBcInNsYXRlZ3JheVwiLCBcInNsYXRlZ3JleVwiLCBcInNub3dcIiwgXCJzcHJpbmdncmVlblwiLCBcInN0ZWVsYmx1ZVwiLCBcInRhblwiLCBcInRoaXN0bGVcIiwgXCJ0b21hdG9cIiwgXCJ0dXJxdW9pc2VcIiwgXCJ2aW9sZXRcIiwgXCJ3aGVhdFwiLCBcIndoaXRlc21va2VcIiwgXCJ5ZWxsb3dncmVlblwiLCBcInJlYmVjY2FwdXJwbGVcIiwgXCJjdXJyZW50Y29sb3JcIiwgXCJ0cmFuc3BhcmVudFwiXSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHRDKHQpIHtcclxuICAgICAgICAgICAgaWYgKHQuc3RhcnRzV2l0aChcIiNcIikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBLeC50ZXN0KHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQuc3RhcnRzV2l0aChcInJnYlwiKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEp4LnRlc3QodCkgfHwgWXgudGVzdCh0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0LnN0YXJ0c1dpdGgoXCJoc2xcIikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBReC50ZXN0KHQpIHx8IFh4LnRlc3QodClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gWnguaGFzKHQudG9Mb3dlckNhc2UoKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGVDID0gW1wibm9uZVwiLCBcImhpZGRlblwiLCBcImRvdHRlZFwiLCBcImRhc2hlZFwiLCBcInNvbGlkXCIsIFwiZG91YmxlXCIsIFwiZ3Jvb3ZlXCIsIFwicmlkZ2VcIiwgXCJpbnNldFwiLCBcIm91dHNldFwiXTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaUModCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZUMuaW5jbHVkZXModClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG5DID0gL14oWystXT9bMC05XSpbLl0/WzAtOV0rKHB4fGNtfG1tfGlufHBjfHB0fGNofGVtfGV4fHJlbXx2aHx2d3x2bWlufHZtYXgpfDApJC87XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9DKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG5DLnRlc3QodClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHJDID0gL15bKy1dP1swLTldKlsuXT9bMC05XSslJC87XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNDKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHJDLnRlc3QodClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGFDID0gW1wicmVwZWF0LXhcIiwgXCJyZXBlYXQteVwiLCBcInJlcGVhdFwiLCBcInNwYWNlXCIsIFwicm91bmRcIiwgXCJuby1yZXBlYXRcIl07XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNDKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGFDLmluY2x1ZGVzKHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBsQyA9IFtcImNlbnRlclwiLCBcInRvcFwiLCBcImJvdHRvbVwiLCBcImxlZnRcIiwgXCJyaWdodFwiXTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZEModCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbEMuaW5jbHVkZXModClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHVDID0gW1wiZml4ZWRcIiwgXCJzY3JvbGxcIiwgXCJsb2NhbFwiXTtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaEModCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdUMuaW5jbHVkZXModClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGZDID0gL151cmxcXCgvO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBnQyh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmQy50ZXN0KHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBtQyh0ID0gXCJcIikge1xyXG4gICAgICAgICAgICBpZiAodCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHt0b3A6IHVuZGVmaW5lZCwgcmlnaHQ6IHVuZGVmaW5lZCwgYm90dG9tOiB1bmRlZmluZWQsIGxlZnQ6IHVuZGVmaW5lZH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBlID0ga0ModCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBlWzBdO1xyXG4gICAgICAgICAgICBjb25zdCBuID0gZVsyXSB8fCBpO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gZVsxXSB8fCBpO1xyXG4gICAgICAgICAgICBjb25zdCByID0gZVszXSB8fCBvO1xyXG4gICAgICAgICAgICByZXR1cm4ge3RvcDogaSwgYm90dG9tOiBuLCByaWdodDogbywgbGVmdDogcn1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHBDKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3Qge3RvcDogaSwgcmlnaHQ6IG4sIGJvdHRvbTogbywgbGVmdDogcn0gPSBlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFbaSwgbiwgciwgb10uZXZlcnkodCA9PiAhIXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcy5wdXNoKFt0ICsgXCItdG9wXCIsIGldKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzLnB1c2goW3QgKyBcIi1yaWdodFwiLCBuXSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcy5wdXNoKFt0ICsgXCItYm90dG9tXCIsIG9dKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzLnB1c2goW3QgKyBcIi1sZWZ0XCIsIHJdKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcy5wdXNoKFt0LCBiQyhlKV0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBiQyh7dG9wOiB0LCByaWdodDogZSwgYm90dG9tOiBpLCBsZWZ0OiBufSkge1xyXG4gICAgICAgICAgICBjb25zdCBvID0gW107XHJcbiAgICAgICAgICAgIGlmIChuICE9PSBlKSB7XHJcbiAgICAgICAgICAgICAgICBvLnB1c2godCwgZSwgaSwgbilcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChpICE9PSB0KSB7XHJcbiAgICAgICAgICAgICAgICBvLnB1c2godCwgZSwgaSlcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChlICE9PSB0KSB7XHJcbiAgICAgICAgICAgICAgICBvLnB1c2godCwgZSlcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG8ucHVzaCh0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBvLmpvaW4oXCIgXCIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB3Qyh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlID0+ICh7cGF0aDogdCwgdmFsdWU6IG1DKGUpfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGtDKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQucmVwbGFjZSgvLCAvZywgXCIsXCIpLnNwbGl0KFwiIFwiKS5tYXAodCA9PiB0LnJlcGxhY2UoLywvZywgXCIsIFwiKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9DKHQpIHtcclxuICAgICAgICAgICAgdC5zZXROb3JtYWxpemVyKFwibWFyZ2luXCIsIHdDKFwibWFyZ2luXCIpKTtcclxuICAgICAgICAgICAgdC5zZXROb3JtYWxpemVyKFwibWFyZ2luLXRvcFwiLCB0ID0+ICh7cGF0aDogXCJtYXJnaW4udG9wXCIsIHZhbHVlOiB0fSkpO1xyXG4gICAgICAgICAgICB0LnNldE5vcm1hbGl6ZXIoXCJtYXJnaW4tcmlnaHRcIiwgdCA9PiAoe3BhdGg6IFwibWFyZ2luLnJpZ2h0XCIsIHZhbHVlOiB0fSkpO1xyXG4gICAgICAgICAgICB0LnNldE5vcm1hbGl6ZXIoXCJtYXJnaW4tYm90dG9tXCIsIHQgPT4gKHtwYXRoOiBcIm1hcmdpbi5ib3R0b21cIiwgdmFsdWU6IHR9KSk7XHJcbiAgICAgICAgICAgIHQuc2V0Tm9ybWFsaXplcihcIm1hcmdpbi1sZWZ0XCIsIHQgPT4gKHtwYXRoOiBcIm1hcmdpbi5sZWZ0XCIsIHZhbHVlOiB0fSkpO1xyXG4gICAgICAgICAgICB0LnNldFJlZHVjZXIoXCJtYXJnaW5cIiwgcEMoXCJtYXJnaW5cIikpO1xyXG4gICAgICAgICAgICB0LnNldFN0eWxlUmVsYXRpb24oXCJtYXJnaW5cIiwgW1wibWFyZ2luLXRvcFwiLCBcIm1hcmdpbi1yaWdodFwiLCBcIm1hcmdpbi1ib3R0b21cIiwgXCJtYXJnaW4tbGVmdFwiXSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHZDIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHQuY29uZmlnLmRlZmluZShcImluZGVudEJsb2NrXCIsIHtvZmZzZXQ6IDQwLCB1bml0OiBcInB4XCJ9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJJbmRlbnRCbG9ja1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5jb25maWcuZ2V0KFwiaW5kZW50QmxvY2tcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gIWUuY2xhc3NlcyB8fCAhZS5jbGFzc2VzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBPYmplY3QuYXNzaWduKHtkaXJlY3Rpb246IFwiZm9yd2FyZFwifSwgZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gT2JqZWN0LmFzc2lnbih7ZGlyZWN0aW9uOiBcImJhY2t3YXJkXCJ9LCBlKTtcclxuICAgICAgICAgICAgICAgIGlmIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5kYXRhLmFkZFN0eWxlUHJvY2Vzc29yUnVsZXMoX0MpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldHVwQ29udmVyc2lvblVzaW5nT2Zmc2V0KHQuY29udmVyc2lvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJpbmRlbnRCbG9ja1wiLCBuZXcgcXgodCwgbmV3ICR4KG4pKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJvdXRkZW50QmxvY2tcIiwgbmV3IHF4KHQsIG5ldyAkeChvKSkpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldHVwQ29udmVyc2lvblVzaW5nQ2xhc3NlcyhlLmNsYXNzZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwiaW5kZW50QmxvY2tcIiwgbmV3IHF4KHQsIG5ldyBHeChuKSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwib3V0ZGVudEJsb2NrXCIsIG5ldyBxeCh0LCBuZXcgR3gobykpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZnRlckluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5tb2RlbC5zY2hlbWE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5jb21tYW5kcy5nZXQoXCJpbmRlbnRcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5jb21tYW5kcy5nZXQoXCJvdXRkZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IFtcInBhcmFncmFwaFwiLCBcImhlYWRpbmcxXCIsIFwiaGVhZGluZzJcIiwgXCJoZWFkaW5nM1wiLCBcImhlYWRpbmc0XCIsIFwiaGVhZGluZzVcIiwgXCJoZWFkaW5nNlwiXTtcclxuICAgICAgICAgICAgICAgIG8uZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZS5pc1JlZ2lzdGVyZWQodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5leHRlbmQodCwge2FsbG93QXR0cmlidXRlczogXCJibG9ja0luZGVudFwifSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGkucmVnaXN0ZXJDaGlsZENvbW1hbmQodC5jb21tYW5kcy5nZXQoXCJpbmRlbnRCbG9ja1wiKSk7XHJcbiAgICAgICAgICAgICAgICBuLnJlZ2lzdGVyQ2hpbGRDb21tYW5kKHQuY29tbWFuZHMuZ2V0KFwib3V0ZGVudEJsb2NrXCIpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2V0dXBDb252ZXJzaW9uVXNpbmdPZmZzZXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IuY29udmVyc2lvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5sb2NhbGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5jb250ZW50TGFuZ3VhZ2VEaXJlY3Rpb24gPT09IFwicnRsXCIgPyBcIm1hcmdpbi1yaWdodFwiIDogXCJtYXJnaW4tbGVmdFwiO1xyXG4gICAgICAgICAgICAgICAgdC5mb3IoXCJ1cGNhc3RcIikuYXR0cmlidXRlVG9BdHRyaWJ1dGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXc6IHtzdHlsZXM6IHtbaV06IC9bXFxzXFxTXSsvfX0sXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHtrZXk6IFwiYmxvY2tJbmRlbnRcIiwgdmFsdWU6IHQgPT4gdC5nZXRTdHlsZShpKX1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdC5mb3IoXCJkb3duY2FzdFwiKS5hdHRyaWJ1dGVUb0F0dHJpYnV0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IFwiYmxvY2tJbmRlbnRcIixcclxuICAgICAgICAgICAgICAgICAgICB2aWV3OiB0ID0+ICh7a2V5OiBcInN0eWxlXCIsIHZhbHVlOiB7W2ldOiB0fX0pXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2V0dXBDb252ZXJzaW9uVXNpbmdDbGFzc2VzKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB7bW9kZWw6IHtrZXk6IFwiYmxvY2tJbmRlbnRcIiwgdmFsdWVzOiBbXX0sIHZpZXc6IHt9fTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5tb2RlbC52YWx1ZXMucHVzaChpKTtcclxuICAgICAgICAgICAgICAgICAgICBlLnZpZXdbaV0gPSB7a2V5OiBcImNsYXNzXCIsIHZhbHVlOiBbaV19XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5jb252ZXJzaW9uLmF0dHJpYnV0ZVRvQXR0cmlidXRlKGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IHlDID0gXCJpdGFsaWNcIjtcclxuXHJcbiAgICAgICAgY2xhc3MgeEMgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkl0YWxpY0VkaXRpbmdcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgdC5tb2RlbC5zY2hlbWEuZXh0ZW5kKFwiJHRleHRcIiwge2FsbG93QXR0cmlidXRlczogeUN9KTtcclxuICAgICAgICAgICAgICAgIHQubW9kZWwuc2NoZW1hLnNldEF0dHJpYnV0ZVByb3BlcnRpZXMoeUMsIHtpc0Zvcm1hdHRpbmc6IHRydWUsIGNvcHlPbkVudGVyOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbnZlcnNpb24uYXR0cmlidXRlVG9FbGVtZW50KHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogeUMsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlldzogXCJpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBjYXN0QWxzbzogW1wiZW1cIiwge3N0eWxlczoge1wiZm9udC1zdHlsZVwiOiBcIml0YWxpY1wifX1dXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKHlDLCBuZXcgeWsodCwgeUMpKTtcclxuICAgICAgICAgICAgICAgIHQua2V5c3Ryb2tlcy5zZXQoXCJDVFJMK0lcIiwgeUMpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBDQyA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk05LjU4NiAxNC42MzNsLjAyMS4wMDRjLS4wMzYuMzM1LjA5NS42NTUuMzkzLjk2Mi4wODIuMDgzLjE3My4xNS4yNzQuMjAxaDEuNDc0YS42LjYgMCAxIDEgMCAxLjJINS4zMDRhLjYuNiAwIDAgMSAwLTEuMmgxLjE1Yy40NzQtLjA3LjgwOS0uMTgyIDEuMDA1LS4zMzQuMTU3LS4xMjIuMjkxLS4zMi40MDQtLjU5N2wyLjQxNi05LjU1YTEuMDUzIDEuMDUzIDAgMCAwLS4yODEtLjgyMyAxLjEyIDEuMTIgMCAwIDAtLjQ0Mi0uMjk2SDguMTVhLjYuNiAwIDAgMSAwLTEuMmg2LjQ0M2EuNi42IDAgMSAxIDAgMS4yaC0xLjE5NWMtLjM3Ni4wNTYtLjY1LjE1NS0uODIzLjI5Ni0uMjE1LjE3NS0uNDIzLjQzOS0uNjIzLjc5bC0yLjM2NiA5LjM0N3pcIi8+PC9zdmc+JztcclxuICAgICAgICBjb25zdCBBQyA9IFwiaXRhbGljXCI7XHJcblxyXG4gICAgICAgIGNsYXNzIFRDIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQudDtcclxuICAgICAgICAgICAgICAgIHQudWkuY29tcG9uZW50RmFjdG9yeS5hZGQoQUMsIGkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LmNvbW1hbmRzLmdldChBQyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IG5ldyBoYihpKTtcclxuICAgICAgICAgICAgICAgICAgICBvLnNldCh7bGFiZWw6IGUoXCJqalwiKSwgaWNvbjogQ0MsIGtleXN0cm9rZTogXCJDVFJMK0lcIiwgdG9vbHRpcDogdHJ1ZSwgaXNUb2dnbGVhYmxlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5iaW5kKFwiaXNPblwiLCBcImlzRW5hYmxlZFwiKS50byhuLCBcInZhbHVlXCIsIFwiaXNFbmFibGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8obywgXCJleGVjdXRlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlKEFDKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBQQyBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCByZXF1aXJlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbeEMsIFRDXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJJdGFsaWNcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBTQyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpLmNyZWF0ZVJhbmdlKEVDKHQsIGUsIHRydWUsIGkpLCBFQyh0LCBlLCBmYWxzZSwgaSkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBFQyh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIGxldCBvID0gdC50ZXh0Tm9kZSB8fCAoaSA/IHQubm9kZUJlZm9yZSA6IHQubm9kZUFmdGVyKTtcclxuICAgICAgICAgICAgbGV0IHIgPSBudWxsO1xyXG4gICAgICAgICAgICB3aGlsZSAobyAmJiBvLmdldEF0dHJpYnV0ZShcImxpbmtIcmVmXCIpID09IGUpIHtcclxuICAgICAgICAgICAgICAgIHIgPSBvO1xyXG4gICAgICAgICAgICAgICAgbyA9IGkgPyBvLnByZXZpb3VzU2libGluZyA6IG8ubmV4dFNpYmxpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gciA/IG4uY3JlYXRlUG9zaXRpb25BdChyLCBpID8gXCJiZWZvcmVcIiA6IFwiYWZ0ZXJcIikgOiB0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBSQyBleHRlbmRzIGp3IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hbnVhbERlY29yYXRvcnMgPSBuZXcgeXNcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVzdG9yZU1hbnVhbERlY29yYXRvclN0YXRlcygpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiB0aGlzLm1hbnVhbERlY29yYXRvcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LnZhbHVlID0gdGhpcy5fZ2V0RGVjb3JhdG9yU3RhdGVGcm9tTW9kZWwodC5pZClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVmcmVzaCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IGUuc2VsZWN0aW9uLmdldEF0dHJpYnV0ZShcImxpbmtIcmVmXCIpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMubWFudWFsRGVjb3JhdG9ycykge1xyXG4gICAgICAgICAgICAgICAgICAgIHQudmFsdWUgPSB0aGlzLl9nZXREZWNvcmF0b3JTdGF0ZUZyb21Nb2RlbCh0LmlkKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSB0LnNjaGVtYS5jaGVja0F0dHJpYnV0ZUluU2VsZWN0aW9uKGUuc2VsZWN0aW9uLCBcImxpbmtIcmVmXCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV4ZWN1dGUodCwgZSA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gW107XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgaW4gZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlW3RdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8ucHVzaCh0KVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIucHVzaCh0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkuY2hhbmdlKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuLmlzQ29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuLmdldEZpcnN0UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4uaGFzQXR0cmlidXRlKFwibGlua0hyZWZcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBTQyhzLCBuLmdldEF0dHJpYnV0ZShcImxpbmtIcmVmXCIpLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKFwibGlua0hyZWZcIiwgdCwgYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zZXRBdHRyaWJ1dGUodCwgdHJ1ZSwgYSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgci5mb3JFYWNoKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUucmVtb3ZlQXR0cmlidXRlKHQsIGEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0U2VsZWN0aW9uKGEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodCAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IEhzKG4uZ2V0QXR0cmlidXRlcygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuc2V0KFwibGlua0hyZWZcIiwgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgci5zZXQodCwgdHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IGUuY3JlYXRlVGV4dCh0LCByKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuaW5zZXJ0Q29udGVudChhLCBzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0U2VsZWN0aW9uKGUuY3JlYXRlUmFuZ2VPbihhKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBpLnNjaGVtYS5nZXRWYWxpZFJhbmdlcyhuLmdldFJhbmdlcygpLCBcImxpbmtIcmVmXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2Ygcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zZXRBdHRyaWJ1dGUoXCJsaW5rSHJlZlwiLCB0LCBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZSh0LCB0cnVlLCBpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5yZW1vdmVBdHRyaWJ1dGUodCwgaSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0RGVjb3JhdG9yU3RhdGVGcm9tTW9kZWwodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZWRpdG9yLm1vZGVsLmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUuc2VsZWN0aW9uLmdldEF0dHJpYnV0ZSh0KSB8fCBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBPQyBleHRlbmRzIGp3IHtcclxuICAgICAgICAgICAgcmVmcmVzaCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVkID0gdGhpcy5lZGl0b3IubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uLmhhc0F0dHJpYnV0ZShcImxpbmtIcmVmXCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV4ZWN1dGUoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5jb21tYW5kcy5nZXQoXCJsaW5rXCIpO1xyXG4gICAgICAgICAgICAgICAgZS5jaGFuZ2UodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IGkuaXNDb2xsYXBzZWQgPyBbU0MoaS5nZXRGaXJzdFBvc2l0aW9uKCksIGkuZ2V0QXR0cmlidXRlKFwibGlua0hyZWZcIiksIGUpXSA6IGkuZ2V0UmFuZ2VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmVBdHRyaWJ1dGUoXCJsaW5rSHJlZlwiLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiBuLm1hbnVhbERlY29yYXRvcnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnJlbW92ZUF0dHJpYnV0ZShpLmlkLCBlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSUModCwgZSwgaSkge1xyXG4gICAgICAgICAgICB2YXIgbiA9IHQubGVuZ3RoO1xyXG4gICAgICAgICAgICBpID0gaSA9PT0gdW5kZWZpbmVkID8gbiA6IGk7XHJcbiAgICAgICAgICAgIHJldHVybiAhZSAmJiBpID49IG4gPyB0IDogT2EodCwgZSwgaSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBWQyA9IElDO1xyXG4gICAgICAgIHZhciBOQyA9IFwiXFxcXHVkODAwLVxcXFx1ZGZmZlwiLCBNQyA9IFwiXFxcXHUwMzAwLVxcXFx1MDM2ZlwiLCBCQyA9IFwiXFxcXHVmZTIwLVxcXFx1ZmUyZlwiLCB6QyA9IFwiXFxcXHUyMGQwLVxcXFx1MjBmZlwiLFxyXG4gICAgICAgICAgICBMQyA9IE1DICsgQkMgKyB6QywgRkMgPSBcIlxcXFx1ZmUwZVxcXFx1ZmUwZlwiO1xyXG4gICAgICAgIHZhciBEQyA9IFwiXFxcXHUyMDBkXCI7XHJcbiAgICAgICAgdmFyIGpDID0gUmVnRXhwKFwiW1wiICsgREMgKyBOQyArIExDICsgRkMgKyBcIl1cIik7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEhDKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGpDLnRlc3QodClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBXQyA9IEhDO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBxQyh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0LnNwbGl0KFwiXCIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgVUMgPSBxQztcclxuICAgICAgICB2YXIgJEMgPSBcIlxcXFx1ZDgwMC1cXFxcdWRmZmZcIiwgR0MgPSBcIlxcXFx1MDMwMC1cXFxcdTAzNmZcIiwgS0MgPSBcIlxcXFx1ZmUyMC1cXFxcdWZlMmZcIiwgSkMgPSBcIlxcXFx1MjBkMC1cXFxcdTIwZmZcIixcclxuICAgICAgICAgICAgWUMgPSBHQyArIEtDICsgSkMsIFFDID0gXCJcXFxcdWZlMGVcXFxcdWZlMGZcIjtcclxuICAgICAgICB2YXIgWEMgPSBcIltcIiArICRDICsgXCJdXCIsIFpDID0gXCJbXCIgKyBZQyArIFwiXVwiLCB0QSA9IFwiXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdXCIsIGVBID0gXCIoPzpcIiArIFpDICsgXCJ8XCIgKyB0QSArIFwiKVwiLFxyXG4gICAgICAgICAgICBpQSA9IFwiW15cIiArICRDICsgXCJdXCIsIG5BID0gXCIoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9XCIsIG9BID0gXCJbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl1cIixcclxuICAgICAgICAgICAgckEgPSBcIlxcXFx1MjAwZFwiO1xyXG4gICAgICAgIHZhciBzQSA9IGVBICsgXCI/XCIsIGFBID0gXCJbXCIgKyBRQyArIFwiXT9cIixcclxuICAgICAgICAgICAgY0EgPSBcIig/OlwiICsgckEgKyBcIig/OlwiICsgW2lBLCBuQSwgb0FdLmpvaW4oXCJ8XCIpICsgXCIpXCIgKyBhQSArIHNBICsgXCIpKlwiLCBsQSA9IGFBICsgc0EgKyBjQSxcclxuICAgICAgICAgICAgZEEgPSBcIig/OlwiICsgW2lBICsgWkMgKyBcIj9cIiwgWkMsIG5BLCBvQSwgWENdLmpvaW4oXCJ8XCIpICsgXCIpXCI7XHJcbiAgICAgICAgdmFyIHVBID0gUmVnRXhwKHRBICsgXCIoPz1cIiArIHRBICsgXCIpfFwiICsgZEEgKyBsQSwgXCJnXCIpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBoQSh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0Lm1hdGNoKHVBKSB8fCBbXVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGZBID0gaEE7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGdBKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFdDKHQpID8gZkEodCkgOiBVQyh0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG1BID0gZ0E7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHBBKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICBlID0gX2EoZSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IFdDKGUpID8gbUEoZSkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgbiA9IGkgPyBpWzBdIDogZS5jaGFyQXQoMCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbyA9IGkgPyBWQyhpLCAxKS5qb2luKFwiXCIpIDogZS5zbGljZSgxKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuW3RdKCkgKyBvXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBiQSA9IHBBO1xyXG4gICAgICAgIHZhciB3QSA9IGJBKFwidG9VcHBlckNhc2VcIik7XHJcbiAgICAgICAgdmFyIGtBID0gd0E7XHJcbiAgICAgICAgY29uc3QgX0EgPSAvW1xcdTAwMDAtXFx1MDAyMFxcdTAwQTBcXHUxNjgwXFx1MTgwRVxcdTIwMDAtXFx1MjAyOVxcdTIwNWZcXHUzMDAwXS9nO1xyXG4gICAgICAgIGNvbnN0IHZBID0gL14oPzooPzpodHRwcz98ZnRwcz98bWFpbHRvKTp8W15hLXpdfFthLXorLi1dKyg/OlteYS16Ky46LV18JCkpL2k7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHlBKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQuaXMoXCJhdHRyaWJ1dGVFbGVtZW50XCIpICYmICEhdC5nZXRDdXN0b21Qcm9wZXJ0eShcImxpbmtcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHhBKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IGUuY3JlYXRlQXR0cmlidXRlRWxlbWVudChcImFcIiwge2hyZWY6IHR9LCB7cHJpb3JpdHk6IDV9KTtcclxuICAgICAgICAgICAgZS5zZXRDdXN0b21Qcm9wZXJ0eShcImxpbmtcIiwgdHJ1ZSwgaSk7XHJcbiAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBDQSh0KSB7XHJcbiAgICAgICAgICAgIHQgPSBTdHJpbmcodCk7XHJcbiAgICAgICAgICAgIHJldHVybiBBQSh0KSA/IHQgOiBcIiNcIlxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQUEodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5yZXBsYWNlKF9BLCBcIlwiKTtcclxuICAgICAgICAgICAgcmV0dXJuIGUubWF0Y2godkEpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBUQSh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB7XCJPcGVuIGluIGEgbmV3IHRhYlwiOiB0KFwibW1cIiksIERvd25sb2FkYWJsZTogdChcIm1uXCIpfTtcclxuICAgICAgICAgICAgZS5mb3JFYWNoKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQubGFiZWwgJiYgaVt0LmxhYmVsXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHQubGFiZWwgPSBpW3QubGFiZWxdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFBBKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IFtdO1xyXG4gICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbaSwgbl0gb2YgT2JqZWN0LmVudHJpZXModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gT2JqZWN0LmFzc2lnbih7fSwgbiwge2lkOiBgbGluayR7a0EoaSl9YH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHVzaCh0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBTQSB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmaW5pdGlvbnMgPSBuZXcgU2V0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBsZW5ndGgoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZGVmaW5pdGlvbnMuc2l6ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZGQodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LmZvckVhY2godCA9PiB0aGlzLl9kZWZpbml0aW9ucy5hZGQodCkpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2RlZmluaXRpb25zLmFkZCh0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXREaXNwYXRjaGVyKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHQub24oXCJhdHRyaWJ1dGU6bGlua0hyZWZcIiwgKHQsIGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpLmNvbnN1bWFibGUudGVzdChlLml0ZW0sIFwiYXR0cmlidXRlOmxpbmtIcmVmXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gaS53cml0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuLmRvY3VtZW50LnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHRoaXMuX2RlZmluaXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gbi5jcmVhdGVBdHRyaWJ1dGVFbGVtZW50KFwiYVwiLCB0LmF0dHJpYnV0ZXMsIHtwcmlvcml0eTogNX0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5zZXRDdXN0b21Qcm9wZXJ0eShcImxpbmtcIiwgdHJ1ZSwgcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5jYWxsYmFjayhlLmF0dHJpYnV0ZU5ld1ZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLml0ZW0uaXMoXCJzZWxlY3Rpb25cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbi53cmFwKG8uZ2V0Rmlyc3RSYW5nZSgpLCByKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ud3JhcChpLm1hcHBlci50b1ZpZXdSYW5nZShlLnJhbmdlKSwgcilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4udW53cmFwKGkubWFwcGVyLnRvVmlld1JhbmdlKGUucmFuZ2UpLCByKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImhpZ2hcIn0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIEVBIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3Ioe2lkOiB0LCBsYWJlbDogZSwgYXR0cmlidXRlczogaX0pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaWQgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJ2YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFiZWwgPSBlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVzID0gaVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2cyhFQSwgSmMpO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBSQSh7dmlldzogdCwgbW9kZWw6IGUsIGVtaXR0ZXI6IGksIGF0dHJpYnV0ZTogbiwgbG9jYWxlOiBvfSkge1xyXG4gICAgICAgICAgICBjb25zdCByID0gbmV3IE9BKGUsIGksIG4pO1xyXG4gICAgICAgICAgICBjb25zdCBzID0gZS5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgIGkubGlzdGVuVG8odC5kb2N1bWVudCwgXCJrZXlkb3duXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXMuaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlLnNoaWZ0S2V5IHx8IGUuYWx0S2V5IHx8IGUuY3RybEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUua2V5Q29kZSA9PSBObC5hcnJvd3JpZ2h0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGUua2V5Q29kZSA9PSBObC5hcnJvd2xlZnQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkgJiYgIW4pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBzLmdldEZpcnN0UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBvLmNvbnRlbnRMYW5ndWFnZURpcmVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGxldCBsO1xyXG4gICAgICAgICAgICAgICAgaWYgKGMgPT09IFwibHRyXCIgJiYgaSB8fCBjID09PSBcInJ0bFwiICYmIG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBsID0gci5oYW5kbGVGb3J3YXJkTW92ZW1lbnQoYSwgZSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbCA9IHIuaGFuZGxlQmFja3dhcmRNb3ZlbWVudChhLCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LnN0b3AoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LCB7cHJpb3JpdHk6IG9zLmdldChcImhpZ2hcIikgKyAxfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIE9BIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbCA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZSA9IGk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RlbFNlbGVjdGlvbiA9IHQuZG9jdW1lbnQuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fb3ZlcnJpZGVVaWQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faXNOZXh0R3Jhdml0eVJlc3RvcmF0aW9uU2tpcHBlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZS5saXN0ZW5Ubyh0aGlzLl9tb2RlbFNlbGVjdGlvbiwgXCJjaGFuZ2U6cmFuZ2VcIiwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNOZXh0R3Jhdml0eVJlc3RvcmF0aW9uU2tpcHBlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pc05leHRHcmF2aXR5UmVzdG9yYXRpb25Ta2lwcGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2lzR3Jhdml0eU92ZXJyaWRkZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZS5kaXJlY3RDaGFuZ2UgJiYgSUEodGhpcy5fbW9kZWxTZWxlY3Rpb24uZ2V0Rmlyc3RQb3NpdGlvbigpLCBpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVzdG9yZUdyYXZpdHkoKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaGFuZGxlRm9yd2FyZE1vdmVtZW50KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmF0dHJpYnV0ZTtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0dyYXZpdHlPdmVycmlkZGVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodC5pc0F0U3RhcnQgJiYgdGhpcy5faGFzU2VsZWN0aW9uQXR0cmlidXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoTUEodCwgaSkgJiYgdGhpcy5faGFzU2VsZWN0aW9uQXR0cmlidXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJldmVudENhcmV0TW92ZW1lbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlU2VsZWN0aW9uQXR0cmlidXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChWQSh0LCBpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZlbnRDYXJldE1vdmVtZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX292ZXJyaWRlR3Jhdml0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoTkEodCwgaSkgJiYgdGhpcy5faGFzU2VsZWN0aW9uQXR0cmlidXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJldmVudENhcmV0TW92ZW1lbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3ZlcnJpZGVHcmF2aXR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaGFuZGxlQmFja3dhcmRNb3ZlbWVudCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5hdHRyaWJ1dGU7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNHcmF2aXR5T3ZlcnJpZGRlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChNQSh0LCBpKSAmJiB0aGlzLl9oYXNTZWxlY3Rpb25BdHRyaWJ1dGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJldmVudENhcmV0TW92ZW1lbnQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc3RvcmVHcmF2aXR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVNlbGVjdGlvbkF0dHJpYnV0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZlbnRDYXJldE1vdmVtZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXN0b3JlR3Jhdml0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodC5pc0F0U3RhcnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVNlbGVjdGlvbkF0dHJpYnV0ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChNQSh0LCBpKSAmJiAhdGhpcy5faGFzU2VsZWN0aW9uQXR0cmlidXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZlbnRDYXJldE1vdmVtZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRTZWxlY3Rpb25BdHRyaWJ1dGVGcm9tVGhlTm9kZUJlZm9yZSh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQuaXNBdEVuZCAmJiBOQSh0LCBpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faGFzU2VsZWN0aW9uQXR0cmlidXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQkEodCwgaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9za2lwTmV4dEF1dG9tYXRpY0dyYXZpdHlSZXN0b3JhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX292ZXJyaWRlR3Jhdml0eSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZlbnRDYXJldE1vdmVtZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0U2VsZWN0aW9uQXR0cmlidXRlRnJvbVRoZU5vZGVCZWZvcmUodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmlzQXRTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faGFzU2VsZWN0aW9uQXR0cmlidXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVTZWxlY3Rpb25BdHRyaWJ1dGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3ByZXZlbnRDYXJldE1vdmVtZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKEJBKHQsIGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NraXBOZXh0QXV0b21hdGljR3Jhdml0eVJlc3RvcmF0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX292ZXJyaWRlR3Jhdml0eSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgX2lzR3Jhdml0eU92ZXJyaWRkZW4oKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0aGlzLl9vdmVycmlkZVVpZFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgX2hhc1NlbGVjdGlvbkF0dHJpYnV0ZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tb2RlbFNlbGVjdGlvbi5oYXNBdHRyaWJ1dGUodGhpcy5hdHRyaWJ1dGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9vdmVycmlkZUdyYXZpdHkoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vdmVycmlkZVVpZCA9IHRoaXMubW9kZWwuY2hhbmdlKHQgPT4gdC5vdmVycmlkZVNlbGVjdGlvbkdyYXZpdHkoKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3Jlc3RvcmVHcmF2aXR5KCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5jaGFuZ2UodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5yZXN0b3JlU2VsZWN0aW9uR3Jhdml0eSh0aGlzLl9vdmVycmlkZVVpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fb3ZlcnJpZGVVaWQgPSBudWxsXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcHJldmVudENhcmV0TW92ZW1lbnQodCkge1xyXG4gICAgICAgICAgICAgICAgdC5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZW1vdmVTZWxlY3Rpb25BdHRyaWJ1dGUoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmNoYW5nZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0LnJlbW92ZVNlbGVjdGlvbkF0dHJpYnV0ZSh0aGlzLmF0dHJpYnV0ZSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9zZXRTZWxlY3Rpb25BdHRyaWJ1dGVGcm9tVGhlTm9kZUJlZm9yZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5hdHRyaWJ1dGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmNoYW5nZShpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldFNlbGVjdGlvbkF0dHJpYnV0ZSh0aGlzLmF0dHJpYnV0ZSwgdC5ub2RlQmVmb3JlLmdldEF0dHJpYnV0ZShlKSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9za2lwTmV4dEF1dG9tYXRpY0dyYXZpdHlSZXN0b3JhdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lzTmV4dEdyYXZpdHlSZXN0b3JhdGlvblNraXBwZWQgPSB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIElBKHQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFZBKHQsIGUpIHx8IE5BKHQsIGUpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBWQSh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHtub2RlQmVmb3JlOiBpLCBub2RlQWZ0ZXI6IG59ID0gdDtcclxuICAgICAgICAgICAgY29uc3QgbyA9IGkgPyBpLmhhc0F0dHJpYnV0ZShlKSA6IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCByID0gbiA/IG4uaGFzQXR0cmlidXRlKGUpIDogZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiByICYmICghbyB8fCBpLmdldEF0dHJpYnV0ZShlKSAhPT0gbi5nZXRBdHRyaWJ1dGUoZSkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBOQSh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHtub2RlQmVmb3JlOiBpLCBub2RlQWZ0ZXI6IG59ID0gdDtcclxuICAgICAgICAgICAgY29uc3QgbyA9IGkgPyBpLmhhc0F0dHJpYnV0ZShlKSA6IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCByID0gbiA/IG4uaGFzQXR0cmlidXRlKGUpIDogZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybiBvICYmICghciB8fCBpLmdldEF0dHJpYnV0ZShlKSAhPT0gbi5nZXRBdHRyaWJ1dGUoZSkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBNQSh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHtub2RlQmVmb3JlOiBpLCBub2RlQWZ0ZXI6IG59ID0gdDtcclxuICAgICAgICAgICAgY29uc3QgbyA9IGkgPyBpLmhhc0F0dHJpYnV0ZShlKSA6IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCByID0gbiA/IG4uaGFzQXR0cmlidXRlKGUpIDogZmFsc2U7XHJcbiAgICAgICAgICAgIGlmICghciB8fCAhbykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG4uZ2V0QXR0cmlidXRlKGUpICE9PSBpLmdldEF0dHJpYnV0ZShlKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQkEodCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gSUEodC5nZXRTaGlmdGVkQnkoLTEpLCBlKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHpBID0gaSg4MCk7XHJcbiAgICAgICAgY29uc3QgTEEgPSBcImNrLWxpbmtfc2VsZWN0ZWRcIjtcclxuICAgICAgICBjb25zdCBGQSA9IFwiYXV0b21hdGljXCI7XHJcbiAgICAgICAgY29uc3QgREEgPSBcIm1hbnVhbFwiO1xyXG4gICAgICAgIGNvbnN0IGpBID0gL14oaHR0cHM/Oik/XFwvXFwvLztcclxuXHJcbiAgICAgICAgY2xhc3MgSEEgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkxpbmtFZGl0aW5nXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbmZpZy5kZWZpbmUoXCJsaW5rXCIsIHthZGRUYXJnZXRUb0V4dGVybmFsTGlua3M6IGZhbHNlfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIHQubW9kZWwuc2NoZW1hLmV4dGVuZChcIiR0ZXh0XCIsIHthbGxvd0F0dHJpYnV0ZXM6IFwibGlua0hyZWZcIn0pO1xyXG4gICAgICAgICAgICAgICAgdC5jb252ZXJzaW9uLmZvcihcImRhdGFEb3duY2FzdFwiKS5hdHRyaWJ1dGVUb0VsZW1lbnQoe21vZGVsOiBcImxpbmtIcmVmXCIsIHZpZXc6IHhBfSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbnZlcnNpb24uZm9yKFwiZWRpdGluZ0Rvd25jYXN0XCIpLmF0dHJpYnV0ZVRvRWxlbWVudCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IFwibGlua0hyZWZcIixcclxuICAgICAgICAgICAgICAgICAgICB2aWV3OiAodCwgZSkgPT4geEEoQ0EodCksIGUpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQuY29udmVyc2lvbi5mb3IoXCJ1cGNhc3RcIikuZWxlbWVudFRvQXR0cmlidXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3OiB7bmFtZTogXCJhXCIsIGF0dHJpYnV0ZXM6IHtocmVmOiB0cnVlfX0sXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHtrZXk6IFwibGlua0hyZWZcIiwgdmFsdWU6IHQgPT4gdC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcImxpbmtcIiwgbmV3IFJDKHQpKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwidW5saW5rXCIsIG5ldyBPQyh0KSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gVEEodC50LCBQQSh0LmNvbmZpZy5nZXQoXCJsaW5rLmRlY29yYXRvcnNcIikpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VuYWJsZUF1dG9tYXRpY0RlY29yYXRvcnMoaS5maWx0ZXIodCA9PiB0Lm1vZGUgPT09IEZBKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbmFibGVNYW51YWxEZWNvcmF0b3JzKGkuZmlsdGVyKHQgPT4gdC5tb2RlID09PSBEQSkpO1xyXG4gICAgICAgICAgICAgICAgUkEoe3ZpZXc6IHQuZWRpdGluZy52aWV3LCBtb2RlbDogdC5tb2RlbCwgZW1pdHRlcjogdGhpcywgYXR0cmlidXRlOiBcImxpbmtIcmVmXCIsIGxvY2FsZTogZX0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2V0dXBMaW5rSGlnaGxpZ2h0KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2VuYWJsZUF1dG9tYXRpY0RlY29yYXRvcnModCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBTQTtcclxuICAgICAgICAgICAgICAgIGlmIChlLmNvbmZpZy5nZXQoXCJsaW5rLmFkZFRhcmdldFRvRXh0ZXJuYWxMaW5rc1wiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGkuYWRkKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IFwibGlua0lzRXh0ZXJuYWxcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZTogRkEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiB0ID0+IGpBLnRlc3QodCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHt0YXJnZXQ6IFwiX2JsYW5rXCIsIHJlbDogXCJub29wZW5lciBub3JlZmVycmVyXCJ9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkuYWRkKHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5jb252ZXJzaW9uLmZvcihcImRvd25jYXN0XCIpLmFkZChpLmdldERpc3BhdGNoZXIoKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2VuYWJsZU1hbnVhbERlY29yYXRvcnModCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuY29tbWFuZHMuZ2V0KFwibGlua1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLm1hbnVhbERlY29yYXRvcnM7XHJcbiAgICAgICAgICAgICAgICB0LmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5tb2RlbC5zY2hlbWEuZXh0ZW5kKFwiJHRleHRcIiwge2FsbG93QXR0cmlidXRlczogdC5pZH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG4uYWRkKG5ldyBFQSh0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5jb252ZXJzaW9uLmZvcihcImRvd25jYXN0XCIpLmF0dHJpYnV0ZVRvRWxlbWVudCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiB0LmlkLCB2aWV3OiAoZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gbi5nZXQodC5pZCkuYXR0cmlidXRlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gaS5jcmVhdGVBdHRyaWJ1dGVFbGVtZW50KFwiYVwiLCBlLCB7cHJpb3JpdHk6IDV9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldEN1c3RvbVByb3BlcnR5KFwibGlua1wiLCB0cnVlLCBvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5jb252ZXJzaW9uLmZvcihcInVwY2FzdFwiKS5lbGVtZW50VG9BdHRyaWJ1dGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2aWV3OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcImFcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IG4uZ2V0KHQuaWQpLmF0dHJpYnV0ZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgbW9kZWw6IHtrZXk6IHQuaWR9XHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9zZXR1cExpbmtIaWdobGlnaHQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5lZGl0aW5nLnZpZXc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gbmV3IFNldDtcclxuICAgICAgICAgICAgICAgIGUuZG9jdW1lbnQucmVnaXN0ZXJQb3N0Rml4ZXIoZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBvID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4uaGFzQXR0cmlidXRlKFwibGlua0hyZWZcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IFNDKG4uZ2V0Rmlyc3RQb3NpdGlvbigpLCBuLmdldEF0dHJpYnV0ZShcImxpbmtIcmVmXCIpLCB0Lm1vZGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IHQuZWRpdGluZy5tYXBwZXIudG9WaWV3UmFuZ2Uocik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBzLmdldEl0ZW1zKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmlzKFwiYVwiKSAmJiAhdC5oYXNDbGFzcyhMQSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmFkZENsYXNzKExBLCB0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLmFkZCh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQuY29udmVyc2lvbi5mb3IoXCJlZGl0aW5nRG93bmNhc3RcIikuYWRkKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHQub24oXCJpbnNlcnRcIiwgbiwge3ByaW9yaXR5OiBcImhpZ2hlc3RcIn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHQub24oXCJyZW1vdmVcIiwgbiwge3ByaW9yaXR5OiBcImhpZ2hlc3RcIn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHQub24oXCJhdHRyaWJ1dGVcIiwgbiwge3ByaW9yaXR5OiBcImhpZ2hlc3RcIn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHQub24oXCJzZWxlY3Rpb25cIiwgbiwge3ByaW9yaXR5OiBcImhpZ2hlc3RcIn0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBuKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmNoYW5nZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBpLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5yZW1vdmVDbGFzcyhMQSwgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5kZWxldGUoZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBXQSBleHRlbmRzIEp1IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRvbUV2ZW50VHlwZSA9IFwiY2xpY2tcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvbkRvbUV2ZW50KHQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZmlyZSh0LnR5cGUsIHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBxQSA9IGkoODIpO1xyXG5cclxuICAgICAgICBjbGFzcyBVQSBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSA9IFtdKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhY2tlciA9IG5ldyBmYjtcclxuICAgICAgICAgICAgICAgIHRoaXMua2V5c3Ryb2tlcyA9IG5ldyBkcDtcclxuICAgICAgICAgICAgICAgIHRoaXMudXJsSW5wdXRWaWV3ID0gdGhpcy5fY3JlYXRlVXJsSW5wdXQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUJ1dHRvblZpZXcgPSB0aGlzLl9jcmVhdGVCdXR0b24oaShcImxvXCIpLCBYdiwgXCJjay1idXR0b24tc2F2ZVwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUJ1dHRvblZpZXcudHlwZSA9IFwic3VibWl0XCI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbEJ1dHRvblZpZXcgPSB0aGlzLl9jcmVhdGVCdXR0b24oaShcImxwXCIpLCBadiwgXCJjay1idXR0b24tY2FuY2VsXCIsIFwiY2FuY2VsXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbWFudWFsRGVjb3JhdG9yU3dpdGNoZXMgPSB0aGlzLl9jcmVhdGVNYW51YWxEZWNvcmF0b3JTd2l0Y2hlcyhlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSB0aGlzLl9jcmVhdGVGb3JtQ2hpbGRyZW4oZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c2FibGVzID0gbmV3IGJwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNDeWNsZXIgPSBuZXcgeWIoe1xyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzYWJsZXM6IHRoaXMuX2ZvY3VzYWJsZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNUcmFja2VyOiB0aGlzLmZvY3VzVHJhY2tlcixcclxuICAgICAgICAgICAgICAgICAgICBrZXlzdHJva2VIYW5kbGVyOiB0aGlzLmtleXN0cm9rZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uczoge2ZvY3VzUHJldmlvdXM6IFwic2hpZnQgKyB0YWJcIiwgZm9jdXNOZXh0OiBcInRhYlwifVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gW1wiY2tcIiwgXCJjay1saW5rLWZvcm1cIl07XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBuLnB1c2goXCJjay1saW5rLWZvcm1fbGF5b3V0LXZlcnRpY2FsXCIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKHt0YWc6IFwiZm9ybVwiLCBhdHRyaWJ1dGVzOiB7Y2xhc3M6IG4sIHRhYmluZGV4OiBcIi0xXCJ9LCBjaGlsZHJlbjogdGhpcy5jaGlsZHJlbn0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldERlY29yYXRvclN3aXRjaGVzU3RhdGUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLl9tYW51YWxEZWNvcmF0b3JTd2l0Y2hlcykucmVkdWNlKCh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdFtlLm5hbWVdID0gZS5pc09uO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgICAgICB9LCB7fSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVuZGVyKCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIucmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICBRdih7dmlldzogdGhpc30pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IFt0aGlzLnVybElucHV0VmlldywgLi4udGhpcy5fbWFudWFsRGVjb3JhdG9yU3dpdGNoZXMsIHRoaXMuc2F2ZUJ1dHRvblZpZXcsIHRoaXMuY2FuY2VsQnV0dG9uVmlld107XHJcbiAgICAgICAgICAgICAgICB0LmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNhYmxlcy5hZGQodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIuYWRkKHQuZWxlbWVudClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzdHJva2VzLmxpc3RlblRvKHRoaXMuZWxlbWVudClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9jdXMoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c0N5Y2xlci5mb2N1c0ZpcnN0KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZVVybElucHV0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMubG9jYWxlLnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gbmV3IEt2KHRoaXMubG9jYWxlLCBZdik7XHJcbiAgICAgICAgICAgICAgICBlLmxhYmVsID0gdChcImxxXCIpO1xyXG4gICAgICAgICAgICAgICAgZS5pbnB1dFZpZXcucGxhY2Vob2xkZXIgPSBcImh0dHBzOi8vZXhhbXBsZS5jb21cIjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVCdXR0b24odCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG5ldyBoYih0aGlzLmxvY2FsZSk7XHJcbiAgICAgICAgICAgICAgICBvLnNldCh7bGFiZWw6IHQsIGljb246IGUsIHRvb2x0aXA6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgIG8uZXh0ZW5kVGVtcGxhdGUoe2F0dHJpYnV0ZXM6IHtjbGFzczogaX19KTtcclxuICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgby5kZWxlZ2F0ZShcImV4ZWN1dGVcIikudG8odGhpcywgbilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVNYW51YWxEZWNvcmF0b3JTd2l0Y2hlcyh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5jcmVhdGVDb2xsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBuZXcgRmIodGhpcy5sb2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0KHtuYW1lOiBpLmlkLCBsYWJlbDogaS5sYWJlbCwgd2l0aFRleHQ6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgICAgICB0LmJpbmQoXCJpc09uXCIpLnRvKGksIFwidmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5vbihcImV4ZWN1dGVcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnNldChcInZhbHVlXCIsICF0LmlzT24pXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5hZGQodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVGb3JtQ2hpbGRyZW4odCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuY3JlYXRlQ29sbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgZS5hZGQodGhpcy51cmxJbnB1dFZpZXcpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IG5ldyBHcDtcclxuICAgICAgICAgICAgICAgICAgICB0LnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiBcInVsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLl9tYW51YWxEZWNvcmF0b3JTd2l0Y2hlcy5tYXAodCA9PiAoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiBcImxpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW3RdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge2NsYXNzOiBbXCJja1wiLCBcImNrLWxpc3RfX2l0ZW1cIl19XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge2NsYXNzOiBbXCJja1wiLCBcImNrLXJlc2V0XCIsIFwiY2stbGlzdFwiXX1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBlLmFkZCh0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZS5hZGQodGhpcy5zYXZlQnV0dG9uVmlldyk7XHJcbiAgICAgICAgICAgICAgICBlLmFkZCh0aGlzLmNhbmNlbEJ1dHRvblZpZXcpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyICRBID0gJzxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTExLjA3NyAxNWwuOTkxLTEuNDE2YS43NS43NSAwIDEgMSAxLjIyOS44NmwtMS4xNDggMS42NGEuNzQ4Ljc0OCAwIDAgMS0uMjE3LjIwNiA1LjI1MSA1LjI1MSAwIDAgMS04LjUwMy01Ljk1NS43NDEuNzQxIDAgMCAxIC4xMi0uMjc0bDEuMTQ3LTEuNjM5YS43NS43NSAwIDEgMSAxLjIyOC44Nkw0LjkzMyAxMC43bC4wMDYuMDAzYTMuNzUgMy43NSAwIDAgMCA2LjEzMiA0LjI5NGwuMDA2LjAwNHptNS40OTQtNS4zMzVhLjc0OC43NDggMCAwIDEtLjEyLjI3NGwtMS4xNDcgMS42MzlhLjc1Ljc1IDAgMSAxLTEuMjI4LS44NmwuODYtMS4yM2EzLjc1IDMuNzUgMCAwIDAtNi4xNDQtNC4zMDFsLS44NiAxLjIyOWEuNzUuNzUgMCAwIDEtMS4yMjktLjg2bDEuMTQ4LTEuNjRhLjc0OC43NDggMCAwIDEgLjIxNy0uMjA2IDUuMjUxIDUuMjUxIDAgMCAxIDguNTAzIDUuOTU1em0tNC41NjMtMi41MzJhLjc1Ljc1IDAgMCAxIC4xODQgMS4wNDVsLTMuMTU1IDQuNTA1YS43NS43NSAwIDEgMS0xLjIyOS0uODZsMy4xNTUtNC41MDZhLjc1Ljc1IDAgMCAxIDEuMDQ1LS4xODR6bTQuOTE5IDEwLjU2MmwtMS40MTQgMS40MTRhLjc1Ljc1IDAgMSAxLTEuMDYtMS4wNmwxLjQxNC0xLjQxNS0xLjQxNS0xLjQxNGEuNzUuNzUgMCAwIDEgMS4wNjEtMS4wNmwxLjQxNCAxLjQxNCAxLjQxNC0xLjQxNWEuNzUuNzUgMCAwIDEgMS4wNjEgMS4wNjFsLTEuNDE0IDEuNDE0IDEuNDE0IDEuNDE1YS43NS43NSAwIDAgMS0xLjA2IDEuMDZsLTEuNDE1LTEuNDE0elwiLz48L3N2Zz4nO1xyXG4gICAgICAgIHZhciBHQSA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk03LjMgMTcuMzdsLS4wNjEuMDg4YTEuNTE4IDEuNTE4IDAgMCAxLS45MzQuNTM1bC00LjE3OC42NjMtLjgwNi00LjE1M2ExLjQ5NSAxLjQ5NSAwIDAgMSAuMTg3LTEuMDU4bC4wNTYtLjA4Nkw4Ljc3IDIuNjM5Yy45NTgtMS4zNTEgMi44MDMtMS4wNzYgNC4yOTYtLjAzIDEuNDk3IDEuMDQ3IDIuMzg3IDIuNjkzIDEuNDMzIDQuMDU1TDcuMyAxNy4zN3pNOS4xNCA0LjcyOGwtNS41NDUgOC4zNDYgMy4yNzcgMi4yOTQgNS41NDQtOC4zNDZMOS4xNCA0LjcyOHpNNi4wNyAxNi41MTJsLTMuMjc2LTIuMjk1LjUzIDIuNzMgMi43NDYtLjQzNXpNOS45OTQgMy41MDZMMTMuMjcxIDUuOGMuMzE2LS40NTItLjE2LTEuMzMzLTEuMDY1LTEuOTY2LS45MDUtLjYzNC0xLjg5NS0uNzgtMi4yMTItLjMyOHpNOCAxOC41TDkuMzc1IDE3SDE5djEuNUg4elwiLz48L3N2Zz4nO1xyXG4gICAgICAgIHZhciBLQSA9IGkoODQpO1xyXG5cclxuICAgICAgICBjbGFzcyBKQSBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIgPSBuZXcgZmI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmtleXN0cm9rZXMgPSBuZXcgZHA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnByZXZpZXdCdXR0b25WaWV3ID0gdGhpcy5fY3JlYXRlUHJldmlld0J1dHRvbigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy51bmxpbmtCdXR0b25WaWV3ID0gdGhpcy5fY3JlYXRlQnV0dG9uKGUoXCJsa1wiKSwgJEEsIFwidW5saW5rXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0QnV0dG9uVmlldyA9IHRoaXMuX2NyZWF0ZUJ1dHRvbihlKFwibGxcIiksIEdBLCBcImVkaXRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImhyZWZcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c2FibGVzID0gbmV3IGJwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNDeWNsZXIgPSBuZXcgeWIoe1xyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzYWJsZXM6IHRoaXMuX2ZvY3VzYWJsZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNUcmFja2VyOiB0aGlzLmZvY3VzVHJhY2tlcixcclxuICAgICAgICAgICAgICAgICAgICBrZXlzdHJva2VIYW5kbGVyOiB0aGlzLmtleXN0cm9rZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uczoge2ZvY3VzUHJldmlvdXM6IFwic2hpZnQgKyB0YWJcIiwgZm9jdXNOZXh0OiBcInRhYlwifVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge2NsYXNzOiBbXCJja1wiLCBcImNrLWxpbmstYWN0aW9uc1wiXSwgdGFiaW5kZXg6IFwiLTFcIn0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFt0aGlzLnByZXZpZXdCdXR0b25WaWV3LCB0aGlzLmVkaXRCdXR0b25WaWV3LCB0aGlzLnVubGlua0J1dHRvblZpZXddXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBbdGhpcy5wcmV2aWV3QnV0dG9uVmlldywgdGhpcy5lZGl0QnV0dG9uVmlldywgdGhpcy51bmxpbmtCdXR0b25WaWV3XTtcclxuICAgICAgICAgICAgICAgIHQuZm9yRWFjaCh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c2FibGVzLmFkZCh0KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZvY3VzVHJhY2tlci5hZGQodC5lbGVtZW50KVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmtleXN0cm9rZXMubGlzdGVuVG8odGhpcy5lbGVtZW50KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb2N1cygpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzQ3ljbGVyLmZvY3VzRmlyc3QoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlQnV0dG9uKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgaGIodGhpcy5sb2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgbi5zZXQoe2xhYmVsOiB0LCBpY29uOiBlLCB0b29sdGlwOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICBuLmRlbGVnYXRlKFwiZXhlY3V0ZVwiKS50byh0aGlzLCBpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVQcmV2aWV3QnV0dG9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IG5ldyBoYih0aGlzLmxvY2FsZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5iaW5kVGVtcGxhdGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy50O1xyXG4gICAgICAgICAgICAgICAgdC5zZXQoe3dpdGhUZXh0OiB0cnVlLCB0b29sdGlwOiBpKFwibG1cIil9KTtcclxuICAgICAgICAgICAgICAgIHQuZXh0ZW5kVGVtcGxhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFtcImNrXCIsIFwiY2stbGluay1hY3Rpb25zX19wcmV2aWV3XCJdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBocmVmOiBlLnRvKFwiaHJlZlwiLCB0ID0+IHQgJiYgQ0EodCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbDogXCJub29wZW5lciBub3JlZmVycmVyXCJcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQuYmluZChcImxhYmVsXCIpLnRvKHRoaXMsIFwiaHJlZlwiLCB0ID0+IHQgfHwgaShcImxuXCIpKTtcclxuICAgICAgICAgICAgICAgIHQuYmluZChcImlzRW5hYmxlZFwiKS50byh0aGlzLCBcImhyZWZcIiwgdCA9PiAhIXQpO1xyXG4gICAgICAgICAgICAgICAgdC50ZW1wbGF0ZS50YWcgPSBcImFcIjtcclxuICAgICAgICAgICAgICAgIHQudGVtcGxhdGUuZXZlbnRMaXN0ZW5lcnMgPSB7fTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBZQSA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0xMS4wNzcgMTVsLjk5MS0xLjQxNmEuNzUuNzUgMCAxIDEgMS4yMjkuODZsLTEuMTQ4IDEuNjRhLjc0OC43NDggMCAwIDEtLjIxNy4yMDYgNS4yNTEgNS4yNTEgMCAwIDEtOC41MDMtNS45NTUuNzQxLjc0MSAwIDAgMSAuMTItLjI3NGwxLjE0Ny0xLjYzOWEuNzUuNzUgMCAxIDEgMS4yMjguODZMNC45MzMgMTAuN2wuMDA2LjAwM2EzLjc1IDMuNzUgMCAwIDAgNi4xMzIgNC4yOTRsLjAwNi4wMDR6bTUuNDk0LTUuMzM1YS43NDguNzQ4IDAgMCAxLS4xMi4yNzRsLTEuMTQ3IDEuNjM5YS43NS43NSAwIDEgMS0xLjIyOC0uODZsLjg2LTEuMjNhMy43NSAzLjc1IDAgMCAwLTYuMTQ0LTQuMzAxbC0uODYgMS4yMjlhLjc1Ljc1IDAgMCAxLTEuMjI5LS44NmwxLjE0OC0xLjY0YS43NDguNzQ4IDAgMCAxIC4yMTctLjIwNiA1LjI1MSA1LjI1MSAwIDAgMSA4LjUwMyA1Ljk1NXptLTQuNTYzLTIuNTMyYS43NS43NSAwIDAgMSAuMTg0IDEuMDQ1bC0zLjE1NSA0LjUwNWEuNzUuNzUgMCAxIDEtMS4yMjktLjg2bDMuMTU1LTQuNTA2YS43NS43NSAwIDAgMSAxLjA0NS0uMTg0elwiLz48L3N2Zz4nO1xyXG4gICAgICAgIGNvbnN0IFFBID0gXCJDdHJsK0tcIjtcclxuXHJcbiAgICAgICAgY2xhc3MgWEEgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2tiXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJMaW5rVUlcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgdC5lZGl0aW5nLnZpZXcuYWRkT2JzZXJ2ZXIoV0EpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zVmlldyA9IHRoaXMuX2NyZWF0ZUFjdGlvbnNWaWV3KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1WaWV3ID0gdGhpcy5fY3JlYXRlRm9ybVZpZXcoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhbGxvb24gPSB0LnBsdWdpbnMuZ2V0KGtiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZVRvb2xiYXJMaW5rQnV0dG9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbmFibGVVc2VyQmFsbG9vbkludGVyYWN0aW9ucygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1WaWV3LmRlc3Ryb3koKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlQWN0aW9uc1ZpZXcoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gbmV3IEpBKHQubG9jYWxlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LmNvbW1hbmRzLmdldChcImxpbmtcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5jb21tYW5kcy5nZXQoXCJ1bmxpbmtcIik7XHJcbiAgICAgICAgICAgICAgICBlLmJpbmQoXCJocmVmXCIpLnRvKGksIFwidmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICBlLmVkaXRCdXR0b25WaWV3LmJpbmQoXCJpc0VuYWJsZWRcIikudG8oaSk7XHJcbiAgICAgICAgICAgICAgICBlLnVubGlua0J1dHRvblZpZXcuYmluZChcImlzRW5hYmxlZFwiKS50byhuKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8oZSwgXCJlZGl0XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRGb3JtVmlldygpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8oZSwgXCJ1bmxpbmtcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuZXhlY3V0ZShcInVubGlua1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWRlVUkoKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBlLmtleXN0cm9rZXMuc2V0KFwiRXNjXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGlkZVVJKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZSgpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGUua2V5c3Ryb2tlcy5zZXQoUUEsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkRm9ybVZpZXcoKTtcclxuICAgICAgICAgICAgICAgICAgICBlKClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUZvcm1WaWV3KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuY29tbWFuZHMuZ2V0KFwibGlua1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgVUEodC5sb2NhbGUsIGUubWFudWFsRGVjb3JhdG9ycyk7XHJcbiAgICAgICAgICAgICAgICBpLnVybElucHV0Vmlldy5iaW5kKFwidmFsdWVcIikudG8oZSwgXCJ2YWx1ZVwiKTtcclxuICAgICAgICAgICAgICAgIGkudXJsSW5wdXRWaWV3LmJpbmQoXCJpc1JlYWRPbmx5XCIpLnRvKGUsIFwiaXNFbmFibGVkXCIsIHQgPT4gIXQpO1xyXG4gICAgICAgICAgICAgICAgaS5zYXZlQnV0dG9uVmlldy5iaW5kKFwiaXNFbmFibGVkXCIpLnRvKGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhpLCBcInN1Ym1pdFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlKFwibGlua1wiLCBpLnVybElucHV0Vmlldy5pbnB1dFZpZXcuZWxlbWVudC52YWx1ZSwgaS5nZXREZWNvcmF0b3JTd2l0Y2hlc1N0YXRlKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nsb3NlRm9ybVZpZXcoKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKGksIFwiY2FuY2VsXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9jbG9zZUZvcm1WaWV3KClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaS5rZXlzdHJva2VzLnNldChcIkVzY1wiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Nsb3NlRm9ybVZpZXcoKTtcclxuICAgICAgICAgICAgICAgICAgICBlKClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZVRvb2xiYXJMaW5rQnV0dG9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuY29tbWFuZHMuZ2V0KFwibGlua1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICB0LmtleXN0cm9rZXMuc2V0KFFBLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zaG93VUkodHJ1ZSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdC51aS5jb21wb25lbnRGYWN0b3J5LmFkZChcImxpbmtcIiwgdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBoYih0KTtcclxuICAgICAgICAgICAgICAgICAgICBuLmlzRW5hYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5sYWJlbCA9IGkoXCJsZlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBuLmljb24gPSBZQTtcclxuICAgICAgICAgICAgICAgICAgICBuLmtleXN0cm9rZSA9IFFBO1xyXG4gICAgICAgICAgICAgICAgICAgIG4udG9vbHRpcCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5pc1RvZ2dsZWFibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIG4uYmluZChcImlzRW5hYmxlZFwiKS50byhlLCBcImlzRW5hYmxlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBuLmJpbmQoXCJpc09uXCIpLnRvKGUsIFwidmFsdWVcIiwgdCA9PiAhIXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8obiwgXCJleGVjdXRlXCIsICgpID0+IHRoaXMuX3Nob3dVSSh0cnVlKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9lbmFibGVVc2VyQmFsbG9vbkludGVyYWN0aW9ucygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5lZGl0aW5nLnZpZXcuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHQsIFwiY2xpY2tcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9nZXRTZWxlY3RlZExpbmtFbGVtZW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2hvd1VJKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmtleXN0cm9rZXMuc2V0KFwiVGFiXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuX2FyZUFjdGlvbnNWaXNpYmxlICYmICF0aGlzLmFjdGlvbnNWaWV3LmZvY3VzVHJhY2tlci5pc0ZvY3VzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25zVmlldy5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwiaGlnaFwifSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5rZXlzdHJva2VzLnNldChcIkVzY1wiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc1VJVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWRlVUkoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBEYih7XHJcbiAgICAgICAgICAgICAgICAgICAgZW1pdHRlcjogdGhpcy5mb3JtVmlldyxcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmF0b3I6ICgpID0+IHRoaXMuX2lzVUlJblBhbmVsLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRFbGVtZW50czogW3RoaXMuX2JhbGxvb24udmlldy5lbGVtZW50XSxcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogKCkgPT4gdGhpcy5faGlkZVVJKClcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9hZGRBY3Rpb25zVmlldygpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hcmVBY3Rpb25zSW5QYW5lbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFsbG9vbi5hZGQoe3ZpZXc6IHRoaXMuYWN0aW9uc1ZpZXcsIHBvc2l0aW9uOiB0aGlzLl9nZXRCYWxsb29uUG9zaXRpb25EYXRhKCl9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfYWRkRm9ybVZpZXcoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNGb3JtSW5QYW5lbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuY29tbWFuZHMuZ2V0KFwibGlua1wiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhbGxvb24uYWRkKHt2aWV3OiB0aGlzLmZvcm1WaWV3LCBwb3NpdGlvbjogdGhpcy5fZ2V0QmFsbG9vblBvc2l0aW9uRGF0YSgpfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fYmFsbG9vbi52aXNpYmxlVmlldyA9PT0gdGhpcy5mb3JtVmlldykge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybVZpZXcudXJsSW5wdXRWaWV3LnNlbGVjdCgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZvcm1WaWV3LnVybElucHV0Vmlldy5pbnB1dFZpZXcuZWxlbWVudC52YWx1ZSA9IGUudmFsdWUgfHwgXCJcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY2xvc2VGb3JtVmlldygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5jb21tYW5kcy5nZXQoXCJsaW5rXCIpO1xyXG4gICAgICAgICAgICAgICAgdC5yZXN0b3JlTWFudWFsRGVjb3JhdG9yU3RhdGVzKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodC52YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlRm9ybVZpZXcoKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWRlVUkoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVtb3ZlRm9ybVZpZXcoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5faXNGb3JtSW5QYW5lbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZm9ybVZpZXcuc2F2ZUJ1dHRvblZpZXcuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYWxsb29uLnJlbW92ZSh0aGlzLmZvcm1WaWV3KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2hvd1VJKHQgPSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9nZXRTZWxlY3RlZExpbmtFbGVtZW50KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRBY3Rpb25zVmlldygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JhbGxvb24uc2hvd1N0YWNrKFwibWFpblwiKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRGb3JtVmlldygpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9hcmVBY3Rpb25zVmlzaWJsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9hZGRGb3JtVmlldygpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkQWN0aW9uc1ZpZXcoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYWxsb29uLnNob3dTdGFjayhcIm1haW5cIilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFydFVwZGF0aW5nVUkoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfaGlkZVVJKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1VJSW5QYW5lbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKHQudWksIFwidXBkYXRlXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdG9wTGlzdGVuaW5nKHRoaXMuX2JhbGxvb24sIFwiY2hhbmdlOnZpc2libGVWaWV3XCIpO1xyXG4gICAgICAgICAgICAgICAgdC5lZGl0aW5nLnZpZXcuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZUZvcm1WaWV3KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iYWxsb29uLnJlbW92ZSh0aGlzLmFjdGlvbnNWaWV3KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc3RhcnRVcGRhdGluZ1VJKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZWRpdGluZy52aWV3LmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSB0aGlzLl9nZXRTZWxlY3RlZExpbmtFbGVtZW50KCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbiA9IHIoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuX2dldFNlbGVjdGVkTGlua0VsZW1lbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpICYmICF0IHx8ICFpICYmIGUgIT09IG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGlkZVVJKClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2lzVUlWaXNpYmxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2JhbGxvb24udXBkYXRlUG9zaXRpb24odGhpcy5fZ2V0QmFsbG9vblBvc2l0aW9uRGF0YSgpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpID0gdDtcclxuICAgICAgICAgICAgICAgICAgICBuID0gZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnNlbGVjdGlvbi5mb2N1cy5nZXRBbmNlc3RvcnMoKS5yZXZlcnNlKCkuZmluZCh0ID0+IHQuaXMoXCJlbGVtZW50XCIpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odC51aSwgXCJ1cGRhdGVcIiwgbyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMuX2JhbGxvb24sIFwiY2hhbmdlOnZpc2libGVWaWV3XCIsIG8pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBfaXNGb3JtSW5QYW5lbCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iYWxsb29uLmhhc1ZpZXcodGhpcy5mb3JtVmlldylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IF9hcmVBY3Rpb25zSW5QYW5lbCgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iYWxsb29uLmhhc1ZpZXcodGhpcy5hY3Rpb25zVmlldylcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IF9hcmVBY3Rpb25zVmlzaWJsZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iYWxsb29uLnZpc2libGVWaWV3ID09PSB0aGlzLmFjdGlvbnNWaWV3XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBfaXNVSUluUGFuZWwoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5faXNGb3JtSW5QYW5lbCB8fCB0aGlzLl9hcmVBY3Rpb25zSW5QYW5lbFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgX2lzVUlWaXNpYmxlKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuX2JhbGxvb24udmlzaWJsZVZpZXc7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCA9PSB0aGlzLmZvcm1WaWV3IHx8IHRoaXMuX2FyZUFjdGlvbnNWaXNpYmxlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRCYWxsb29uUG9zaXRpb25EYXRhKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLmVkaXRpbmcudmlldztcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuX2dldFNlbGVjdGVkTGlua0VsZW1lbnQoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpID8gdC5kb21Db252ZXJ0ZXIubWFwVmlld1RvRG9tKGkpIDogdC5kb21Db252ZXJ0ZXIudmlld1JhbmdlVG9Eb20oZS5zZWxlY3Rpb24uZ2V0Rmlyc3RSYW5nZSgpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7dGFyZ2V0OiBufVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0U2VsZWN0ZWRMaW5rRWxlbWVudCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5lZGl0aW5nLnZpZXc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5pc0NvbGxhcHNlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBaQShlLmdldEZpcnN0UG9zaXRpb24oKSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuZ2V0Rmlyc3RSYW5nZSgpLmdldFRyaW1tZWQoKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gWkEoaS5zdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IFpBKGkuZW5kKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW4gfHwgbiAhPSBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0LmNyZWF0ZVJhbmdlSW4obikuZ2V0VHJpbW1lZCgpLmlzRXF1YWwoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWkEodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdC5nZXRBbmNlc3RvcnMoKS5maW5kKHQgPT4geUEodCkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyB0VCBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCByZXF1aXJlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbSEEsIFhBXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJMaW5rXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgZVQgZXh0ZW5kcyBqdyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID0gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZWZyZXNoKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuX2dldFZhbHVlKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IHRoaXMuX2NoZWNrRW5hYmxlZCgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV4ZWN1dGUoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBBcnJheS5mcm9tKGUuc2VsZWN0aW9uLmdldFNlbGVjdGVkQmxvY2tzKCkpLmZpbHRlcihlID0+IG5UKGUsIHQuc2NoZW1hKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy52YWx1ZSA9PT0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHQuY2hhbmdlKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBlID0gaVtpLmxlbmd0aCAtIDFdLm5leHRTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG8gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGUgJiYgZS5uYW1lID09IFwibGlzdEl0ZW1cIiAmJiBlLmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIikgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA8IG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQgLSBuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgby5wdXNoKHtlbGVtZW50OiBlLCBsaXN0SW5kZW50OiBpfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gZS5uZXh0U2libGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBvLnJldmVyc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKFwibGlzdEluZGVudFwiLCBlLmxpc3RJbmRlbnQsIGUuZWxlbWVudClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZS5pcyhcImxpc3RJdGVtXCIpICYmIGUuZ2V0QXR0cmlidXRlKFwibGlzdEluZGVudFwiKSA8IHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ID0gZS5nZXRBdHRyaWJ1dGUoXCJsaXN0SW5kZW50XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHQgPT09IDAgPyAxIDogdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaVQoaSwgdHJ1ZSwgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlUKGksIGZhbHNlLCB0KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgaS5yZXZlcnNlKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gJiYgZS5uYW1lID09IFwibGlzdEl0ZW1cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5yZW5hbWUoZSwgXCJwYXJhZ3JhcGhcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghbiAmJiBlLm5hbWUgIT0gXCJsaXN0SXRlbVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZXMoe2xpc3RUeXBlOiB0aGlzLnR5cGUsIGxpc3RJbmRlbnQ6IDB9LCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucmVuYW1lKGUsIFwibGlzdEl0ZW1cIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghbiAmJiBlLm5hbWUgPT0gXCJsaXN0SXRlbVwiICYmIGUuZ2V0QXR0cmlidXRlKFwibGlzdFR5cGVcIikgIT0gdGhpcy50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZShcImxpc3RUeXBlXCIsIHRoaXMudHlwZSwgZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRWYWx1ZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBXdyh0aGlzLmVkaXRvci5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24uZ2V0U2VsZWN0ZWRCbG9ja3MoKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gISF0ICYmIHQuaXMoXCJsaXN0SXRlbVwiKSAmJiB0LmdldEF0dHJpYnV0ZShcImxpc3RUeXBlXCIpID09IHRoaXMudHlwZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY2hlY2tFbmFibGVkKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5tb2RlbC5zY2hlbWE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gV3codC5nZXRTZWxlY3RlZEJsb2NrcygpKTtcclxuICAgICAgICAgICAgICAgIGlmICghaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5UKGksIGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGlUKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGUgPyB0WzBdIDogdFt0Lmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAobi5pcyhcImxpc3RJdGVtXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbyA9IG5bZSA/IFwicHJldmlvdXNTaWJsaW5nXCIgOiBcIm5leHRTaWJsaW5nXCJdO1xyXG4gICAgICAgICAgICAgICAgbGV0IHIgPSBuLmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIik7XHJcbiAgICAgICAgICAgICAgICB3aGlsZSAobyAmJiBvLmlzKFwibGlzdEl0ZW1cIikgJiYgby5nZXRBdHRyaWJ1dGUoXCJsaXN0SW5kZW50XCIpID49IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAociA+IG8uZ2V0QXR0cmlidXRlKFwibGlzdEluZGVudFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gby5nZXRBdHRyaWJ1dGUoXCJsaXN0SW5kZW50XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIikgPT0gcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0W2UgPyBcInVuc2hpZnRcIiA6IFwicHVzaFwiXShvKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBvID0gb1tlID8gXCJwcmV2aW91c1NpYmxpbmdcIiA6IFwibmV4dFNpYmxpbmdcIl1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gblQodCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZS5jaGVja0NoaWxkKHQucGFyZW50LCBcImxpc3RJdGVtXCIpICYmICFlLmlzT2JqZWN0KHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBvVCBleHRlbmRzIGp3IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmRlbnRCeSA9IGUgPT0gXCJmb3J3YXJkXCIgPyAxIDogLTFcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVmcmVzaCgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVkID0gdGhpcy5fY2hlY2tFbmFibGVkKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXhlY3V0ZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSBBcnJheS5mcm9tKGUuc2VsZWN0aW9uLmdldFNlbGVjdGVkQmxvY2tzKCkpO1xyXG4gICAgICAgICAgICAgICAgdC5jaGFuZ2UodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IGlbaS5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IGUubmV4dFNpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKG4gJiYgbi5uYW1lID09IFwibGlzdEl0ZW1cIiAmJiBuLmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIikgPiBlLmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5wdXNoKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gbi5uZXh0U2libGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faW5kZW50QnkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBpLnJldmVyc2UoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5nZXRBdHRyaWJ1dGUoXCJsaXN0SW5kZW50XCIpICsgdGhpcy5faW5kZW50Qnk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5yZW5hbWUoZSwgXCJwYXJhZ3JhcGhcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKFwibGlzdEluZGVudFwiLCBpLCBlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NoZWNrRW5hYmxlZCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBXdyh0aGlzLmVkaXRvci5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24uZ2V0U2VsZWN0ZWRCbG9ja3MoKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQgfHwgIXQuaXMoXCJsaXN0SXRlbVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2luZGVudEJ5ID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuZ2V0QXR0cmlidXRlKFwibGlzdFR5cGVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG4gPSB0LnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAobiAmJiBuLmlzKFwibGlzdEl0ZW1cIikgJiYgbi5nZXRBdHRyaWJ1dGUoXCJsaXN0SW5kZW50XCIpID49IGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4uZ2V0QXR0cmlidXRlKFwibGlzdEluZGVudFwiKSA9PSBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbi5nZXRBdHRyaWJ1dGUoXCJsaXN0VHlwZVwiKSA9PSBpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbiA9IG4ucHJldmlvdXNTaWJsaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gclQodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5jcmVhdGVDb250YWluZXJFbGVtZW50KFwibGlcIik7XHJcbiAgICAgICAgICAgIGUuZ2V0RmlsbGVyT2Zmc2V0ID0gaFQ7XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzVCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBlLm1hcHBlcjtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGUud3JpdGVyO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gdC5nZXRBdHRyaWJ1dGUoXCJsaXN0VHlwZVwiKSA9PSBcIm51bWJlcmVkXCIgPyBcIm9sXCIgOiBcInVsXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSByVChuKTtcclxuICAgICAgICAgICAgY29uc3QgcyA9IG4uY3JlYXRlQ29udGFpbmVyRWxlbWVudChvLCBudWxsKTtcclxuICAgICAgICAgICAgbi5pbnNlcnQobi5jcmVhdGVQb3NpdGlvbkF0KHMsIDApLCByKTtcclxuICAgICAgICAgICAgaS5iaW5kRWxlbWVudHModCwgcik7XHJcbiAgICAgICAgICAgIHJldHVybiByXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhVCh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBlLnBhcmVudDtcclxuICAgICAgICAgICAgY29uc3QgciA9IGkubWFwcGVyO1xyXG4gICAgICAgICAgICBjb25zdCBzID0gaS53cml0ZXI7XHJcbiAgICAgICAgICAgIGxldCBhID0gci50b1ZpZXdQb3NpdGlvbihuLmNyZWF0ZVBvc2l0aW9uQmVmb3JlKHQpKTtcclxuICAgICAgICAgICAgY29uc3QgYyA9IGRUKHQucHJldmlvdXNTaWJsaW5nLCB7XHJcbiAgICAgICAgICAgICAgICBzYW1lSW5kZW50OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc21hbGxlckluZGVudDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGxpc3RJbmRlbnQ6IHQuZ2V0QXR0cmlidXRlKFwibGlzdEluZGVudFwiKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY29uc3QgbCA9IHQucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICBpZiAoYyAmJiBjLmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIikgPT0gdC5nZXRBdHRyaWJ1dGUoXCJsaXN0SW5kZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gci50b1ZpZXdFbGVtZW50KGMpO1xyXG4gICAgICAgICAgICAgICAgYSA9IHMuYnJlYWtDb250YWluZXIocy5jcmVhdGVQb3NpdGlvbkFmdGVyKHQpKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGwgJiYgbC5uYW1lID09IFwibGlzdEl0ZW1cIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGEgPSByLnRvVmlld1Bvc2l0aW9uKG4uY3JlYXRlUG9zaXRpb25BdChsLCBcImVuZFwiKSlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYSA9IHIudG9WaWV3UG9zaXRpb24obi5jcmVhdGVQb3NpdGlvbkJlZm9yZSh0KSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBhID0gbFQoYSk7XHJcbiAgICAgICAgICAgIHMuaW5zZXJ0KGEsIG8pO1xyXG4gICAgICAgICAgICBpZiAobCAmJiBsLm5hbWUgPT0gXCJsaXN0SXRlbVwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gci50b1ZpZXdFbGVtZW50KGwpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHMuY3JlYXRlUmFuZ2Uocy5jcmVhdGVQb3NpdGlvbkF0KHQsIDApLCBhKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLmdldFdhbGtlcih7aWdub3JlRWxlbWVudEVuZDogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5pdGVtLmlzKFwibGlcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHMuYnJlYWtDb250YWluZXIocy5jcmVhdGVQb3NpdGlvbkJlZm9yZSh0Lml0ZW0pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IHQuaXRlbS5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBzLmNyZWF0ZVBvc2l0aW9uQXQoZSwgXCJlbmRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNUKHMsIHIubm9kZUJlZm9yZSwgci5ub2RlQWZ0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzLm1vdmUocy5jcmVhdGVSYW5nZU9uKG8pLCByKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbi5wb3NpdGlvbiA9IGlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gby5uZXh0U2libGluZztcclxuICAgICAgICAgICAgICAgIGlmIChpICYmIChpLmlzKFwidWxcIikgfHwgaS5pcyhcIm9sXCIpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgaS5nZXRDaGlsZHJlbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSByLnRvTW9kZWxFbGVtZW50KGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaSAmJiBpLmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIikgPiB0LmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHMuYnJlYWtDb250YWluZXIocy5jcmVhdGVQb3NpdGlvbkFmdGVyKG4pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcy5tb3ZlKHMuY3JlYXRlUmFuZ2VPbihuLnBhcmVudCksIHMuY3JlYXRlUG9zaXRpb25BdChlLCBcImVuZFwiKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY1Qocywgbywgby5uZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgIGNUKHMsIG8ucHJldmlvdXNTaWJsaW5nLCBvKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY1QodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBpZiAoIWUgfHwgIWkgfHwgZS5uYW1lICE9IFwidWxcIiAmJiBlLm5hbWUgIT0gXCJvbFwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChlLm5hbWUgIT0gaS5uYW1lIHx8IGUuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgIT09IGkuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHQubWVyZ2VDb250YWluZXJzKHQuY3JlYXRlUG9zaXRpb25BZnRlcihlKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxUKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQuZ2V0TGFzdE1hdGNoaW5nUG9zaXRpb24odCA9PiB0Lml0ZW0uaXMoXCJ1aUVsZW1lbnRcIikpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkVCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSAhIWUuc2FtZUluZGVudDtcclxuICAgICAgICAgICAgY29uc3QgbiA9ICEhZS5zbWFsbGVySW5kZW50O1xyXG4gICAgICAgICAgICBjb25zdCBvID0gZS5saXN0SW5kZW50O1xyXG4gICAgICAgICAgICBsZXQgciA9IHQ7XHJcbiAgICAgICAgICAgIHdoaWxlIChyICYmIHIubmFtZSA9PSBcImxpc3RJdGVtXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSByLmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSAmJiBvID09IHQgfHwgbiAmJiBvID4gdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByID0gci5wcmV2aW91c1NpYmxpbmdcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdVQodCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICB0LnVpLmNvbXBvbmVudEZhY3RvcnkuYWRkKGUsIG8gPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHQuY29tbWFuZHMuZ2V0KGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyBoYihvKTtcclxuICAgICAgICAgICAgICAgIHMuc2V0KHtsYWJlbDogaSwgaWNvbjogbiwgdG9vbHRpcDogdHJ1ZSwgaXNUb2dnbGVhYmxlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICBzLmJpbmQoXCJpc09uXCIsIFwiaXNFbmFibGVkXCIpLnRvKHIsIFwidmFsdWVcIiwgXCJpc0VuYWJsZWRcIik7XHJcbiAgICAgICAgICAgICAgICBzLm9uKFwiZXhlY3V0ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHQuZWRpdGluZy52aWV3LmZvY3VzKClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGhUKCkge1xyXG4gICAgICAgICAgICBjb25zdCB0ID0gIXRoaXMuaXNFbXB0eSAmJiAodGhpcy5nZXRDaGlsZCgwKS5uYW1lID09IFwidWxcIiB8fCB0aGlzLmdldENoaWxkKDApLm5hbWUgPT0gXCJvbFwiKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNFbXB0eSB8fCB0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gMFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBIYy5jYWxsKHRoaXMpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBmVCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG4uY29uc3VtYWJsZTtcclxuICAgICAgICAgICAgICAgIGlmICghby50ZXN0KGkuaXRlbSwgXCJpbnNlcnRcIikgfHwgIW8udGVzdChpLml0ZW0sIFwiYXR0cmlidXRlOmxpc3RUeXBlXCIpIHx8ICFvLnRlc3QoaS5pdGVtLCBcImF0dHJpYnV0ZTpsaXN0SW5kZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvLmNvbnN1bWUoaS5pdGVtLCBcImluc2VydFwiKTtcclxuICAgICAgICAgICAgICAgIG8uY29uc3VtZShpLml0ZW0sIFwiYXR0cmlidXRlOmxpc3RUeXBlXCIpO1xyXG4gICAgICAgICAgICAgICAgby5jb25zdW1lKGkuaXRlbSwgXCJhdHRyaWJ1dGU6bGlzdEluZGVudFwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBpLml0ZW07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gc1Qociwgbik7XHJcbiAgICAgICAgICAgICAgICBhVChyLCBzLCBuLCB0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnVCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG4ubWFwcGVyLnRvVmlld1Bvc2l0aW9uKGkucG9zaXRpb24pLmdldExhc3RNYXRjaGluZ1Bvc2l0aW9uKHQgPT4gIXQuaXRlbS5pcyhcImxpXCIpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBvLm5vZGVBZnRlcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuLndyaXRlcjtcclxuICAgICAgICAgICAgICAgIHMuYnJlYWtDb250YWluZXIocy5jcmVhdGVQb3NpdGlvbkJlZm9yZShyKSk7XHJcbiAgICAgICAgICAgICAgICBzLmJyZWFrQ29udGFpbmVyKHMuY3JlYXRlUG9zaXRpb25BZnRlcihyKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gci5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gYS5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsID0gcy5jcmVhdGVSYW5nZU9uKGEpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IHMucmVtb3ZlKGwpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGMgJiYgYy5uZXh0U2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNUKHMsIGMsIGMubmV4dFNpYmxpbmcpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1ID0gbi5tYXBwZXIudG9Nb2RlbEVsZW1lbnQocik7XHJcbiAgICAgICAgICAgICAgICBFVCh1LmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIikgKyAxLCBpLnBvc2l0aW9uLCBsLnN0YXJ0LCByLCBuLCB0KTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBzLmNyZWF0ZVJhbmdlSW4oZCkuZ2V0SXRlbXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG4ubWFwcGVyLnVuYmluZFZpZXdFbGVtZW50KHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlLnN0b3AoKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBtVCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGlmICghaS5jb25zdW1hYmxlLmNvbnN1bWUoZS5pdGVtLCBcImF0dHJpYnV0ZTpsaXN0VHlwZVwiKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbiA9IGkubWFwcGVyLnRvVmlld0VsZW1lbnQoZS5pdGVtKTtcclxuICAgICAgICAgICAgY29uc3QgbyA9IGkud3JpdGVyO1xyXG4gICAgICAgICAgICBvLmJyZWFrQ29udGFpbmVyKG8uY3JlYXRlUG9zaXRpb25CZWZvcmUobikpO1xyXG4gICAgICAgICAgICBvLmJyZWFrQ29udGFpbmVyKG8uY3JlYXRlUG9zaXRpb25BZnRlcihuKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBuLnBhcmVudDtcclxuICAgICAgICAgICAgY29uc3QgcyA9IGUuYXR0cmlidXRlTmV3VmFsdWUgPT0gXCJudW1iZXJlZFwiID8gXCJvbFwiIDogXCJ1bFwiO1xyXG4gICAgICAgICAgICBvLnJlbmFtZShzLCByKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcFQodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBjb25zdCBuID0gaS5tYXBwZXIudG9WaWV3RWxlbWVudChlLml0ZW0pO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gbi5wYXJlbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBpLndyaXRlcjtcclxuICAgICAgICAgICAgY1Qociwgbywgby5uZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgIGNUKHIsIG8ucHJldmlvdXNTaWJsaW5nLCBvKTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGUuaXRlbS5nZXRDaGlsZHJlbigpKSB7XHJcbiAgICAgICAgICAgICAgICBpLmNvbnN1bWFibGUuY29uc3VtZSh0LCBcImluc2VydFwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBiVCh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFuLmNvbnN1bWFibGUuY29uc3VtZShpLml0ZW0sIFwiYXR0cmlidXRlOmxpc3RJbmRlbnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuLm1hcHBlci50b1ZpZXdFbGVtZW50KGkuaXRlbSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbi53cml0ZXI7XHJcbiAgICAgICAgICAgICAgICByLmJyZWFrQ29udGFpbmVyKHIuY3JlYXRlUG9zaXRpb25CZWZvcmUobykpO1xyXG4gICAgICAgICAgICAgICAgci5icmVha0NvbnRhaW5lcihyLmNyZWF0ZVBvc2l0aW9uQWZ0ZXIobykpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG8ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IHMucHJldmlvdXNTaWJsaW5nO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHIuY3JlYXRlUmFuZ2VPbihzKTtcclxuICAgICAgICAgICAgICAgIHIucmVtb3ZlKGMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGEgJiYgYS5uZXh0U2libGluZykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNUKHIsIGEsIGEubmV4dFNpYmxpbmcpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBFVChpLmF0dHJpYnV0ZU9sZFZhbHVlICsgMSwgaS5yYW5nZS5zdGFydCwgYy5zdGFydCwgbywgbiwgdCk7XHJcbiAgICAgICAgICAgICAgICBhVChpLml0ZW0sIG8sIG4sIHQpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGkuaXRlbS5nZXRDaGlsZHJlbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5jb25zdW1hYmxlLmNvbnN1bWUodCwgXCJpbnNlcnRcIilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gd1QodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBpZiAoZS5pdGVtLm5hbWUgIT0gXCJsaXN0SXRlbVwiKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgdCA9IGkubWFwcGVyLnRvVmlld1Bvc2l0aW9uKGUucmFuZ2Uuc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGkud3JpdGVyO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHQucGFyZW50Lm5hbWUgPT0gXCJ1bFwiIHx8IHQucGFyZW50Lm5hbWUgPT0gXCJvbFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IG4uYnJlYWtDb250YWluZXIodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQucGFyZW50Lm5hbWUgIT0gXCJsaVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuLmNyZWF0ZVBvc2l0aW9uQXQodC5wYXJlbnQsIFwiZW5kXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghZS5pc0VxdWFsKGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBuLnJlbW92ZShuLmNyZWF0ZVJhbmdlKGUsIGkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgby5wdXNoKHQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHQgPSBuLmNyZWF0ZVBvc2l0aW9uQWZ0ZXIodC5wYXJlbnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoby5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCBvLmxlbmd0aDsgZSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0Lm5vZGVCZWZvcmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuLmluc2VydCh0LCBvW2VdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHIuZW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBjVChuLCBpLCBpLm5leHRTaWJsaW5nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlICYmIGUucGFyZW50ID09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0Lm9mZnNldC0tXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY1QobiwgdC5ub2RlQmVmb3JlLCB0Lm5vZGVBZnRlcilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24ga1QodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBjb25zdCBuID0gaS5tYXBwZXIudG9WaWV3UG9zaXRpb24oZS5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBuLm5vZGVCZWZvcmU7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBuLm5vZGVBZnRlcjtcclxuICAgICAgICAgICAgY1QoaS53cml0ZXIsIG8sIHIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBfVCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGlmIChpLmNvbnN1bWFibGUuY29uc3VtZShlLnZpZXdJdGVtLCB7bmFtZTogdHJ1ZX0pKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gaS53cml0ZXI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5jcmVhdGVFbGVtZW50KFwibGlzdEl0ZW1cIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gT1QoZS52aWV3SXRlbSk7XHJcbiAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIiwgbywgbik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gZS52aWV3SXRlbS5wYXJlbnQgJiYgZS52aWV3SXRlbS5wYXJlbnQubmFtZSA9PSBcIm9sXCIgPyBcIm51bWJlcmVkXCIgOiBcImJ1bGxldGVkXCI7XHJcbiAgICAgICAgICAgICAgICB0LnNldEF0dHJpYnV0ZShcImxpc3RUeXBlXCIsIHIsIG4pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IGkuc3BsaXRUb0FsbG93ZWRQYXJlbnQobiwgZS5tb2RlbEN1cnNvcik7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHQuaW5zZXJ0KG4sIHMucG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IFBUKG4sIGUudmlld0l0ZW0uZ2V0Q2hpbGRyZW4oKSwgaSk7XHJcbiAgICAgICAgICAgICAgICBlLm1vZGVsUmFuZ2UgPSB0LmNyZWF0ZVJhbmdlKGUubW9kZWxDdXJzb3IsIGEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHMuY3Vyc29yUGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5tb2RlbEN1cnNvciA9IHQuY3JlYXRlUG9zaXRpb25BdChzLmN1cnNvclBhcmVudCwgMClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5tb2RlbEN1cnNvciA9IGUubW9kZWxSYW5nZS5lbmRcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdlQodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBpZiAoaS5jb25zdW1hYmxlLnRlc3QoZS52aWV3SXRlbSwge25hbWU6IHRydWV9KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IEFycmF5LmZyb20oZS52aWV3SXRlbS5nZXRDaGlsZHJlbigpKTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9ICEoZS5pcyhcImxpXCIpIHx8IFJUKGUpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLl9yZW1vdmUoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geVQodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBpZiAoaS5jb25zdW1hYmxlLnRlc3QoZS52aWV3SXRlbSwge25hbWU6IHRydWV9KSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUudmlld0l0ZW0uY2hpbGRDb3VudCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IFsuLi5lLnZpZXdJdGVtLmdldENoaWxkcmVuKCldO1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGxldCBuID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgJiYgIVJUKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuX3JlbW92ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmlzKFwidGV4dFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5fZGF0YSA9IGUuZGF0YS5yZXBsYWNlKC9eXFxzKy8sIFwiXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFlLm5leHRTaWJsaW5nIHx8IFJUKGUubmV4dFNpYmxpbmcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLl9kYXRhID0gZS5kYXRhLnJlcGxhY2UoL1xccyskLywgXCJcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoUlQoZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbiA9IGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHhUKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIChlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaS5pc1BoYW50b20pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLm1vZGVsUG9zaXRpb24ubm9kZUJlZm9yZTtcclxuICAgICAgICAgICAgICAgIGlmIChuICYmIG4uaXMoXCJsaXN0SXRlbVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBpLm1hcHBlci50b1ZpZXdFbGVtZW50KG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBlLmdldEFuY2VzdG9ycygpLmZpbmQoUlQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0LmNyZWF0ZVBvc2l0aW9uQXQoZSwgMCkuZ2V0V2Fsa2VyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQudHlwZSA9PSBcImVsZW1lbnRTdGFydFwiICYmIHQuaXRlbS5pcyhcImxpXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnZpZXdQb3NpdGlvbiA9IHQucHJldmlvdXNQb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC50eXBlID09IFwiZWxlbWVudEVuZFwiICYmIHQuaXRlbSA9PSBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnZpZXdQb3NpdGlvbiA9IHQubmV4dFBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQ1QodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gKGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLnZpZXdQb3NpdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBpLm1hcHBlcjtcclxuICAgICAgICAgICAgICAgIGlmIChvLm5hbWUgPT0gXCJ1bFwiIHx8IG8ubmFtZSA9PSBcIm9sXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW4uaXNBdEVuZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gci50b01vZGVsRWxlbWVudChuLm5vZGVBZnRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkubW9kZWxQb3NpdGlvbiA9IHQuY3JlYXRlUG9zaXRpb25CZWZvcmUoZSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gci50b01vZGVsRWxlbWVudChuLm5vZGVCZWZvcmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gci5nZXRNb2RlbExlbmd0aChuLm5vZGVCZWZvcmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLm1vZGVsUG9zaXRpb24gPSB0LmNyZWF0ZVBvc2l0aW9uQmVmb3JlKGUpLmdldFNoaWZ0ZWRCeShvKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlLnN0b3AoKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChvLm5hbWUgPT0gXCJsaVwiICYmIG4ubm9kZUJlZm9yZSAmJiAobi5ub2RlQmVmb3JlLm5hbWUgPT0gXCJ1bFwiIHx8IG4ubm9kZUJlZm9yZS5uYW1lID09IFwib2xcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gci50b01vZGVsRWxlbWVudChvKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgYSA9IDE7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGMgPSBuLm5vZGVCZWZvcmU7XHJcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGMgJiYgUlQoYykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYSArPSByLmdldE1vZGVsTGVuZ3RoKGMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjID0gYy5wcmV2aW91c1NpYmxpbmdcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaS5tb2RlbFBvc2l0aW9uID0gdC5jcmVhdGVQb3NpdGlvbkJlZm9yZShzKS5nZXRTaGlmdGVkQnkoYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zdG9wKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQVQodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5kb2N1bWVudC5kaWZmZXIuZ2V0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICBjb25zdCBuID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgbGV0IG8gPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChuLnR5cGUgPT0gXCJpbnNlcnRcIiAmJiBuLm5hbWUgPT0gXCJsaXN0SXRlbVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcihuLnBvc2l0aW9uKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuLnR5cGUgPT0gXCJpbnNlcnRcIiAmJiBuLm5hbWUgIT0gXCJsaXN0SXRlbVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4ubmFtZSAhPSBcIiR0ZXh0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IG4ucG9zaXRpb24ubm9kZUFmdGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaS5oYXNBdHRyaWJ1dGUoXCJsaXN0SW5kZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnJlbW92ZUF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIiwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLmhhc0F0dHJpYnV0ZShcImxpc3RUeXBlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnJlbW92ZUF0dHJpYnV0ZShcImxpc3RUeXBlXCIsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgQXJyYXkuZnJvbSh0LmNyZWF0ZVJhbmdlSW4oaSkpLmZpbHRlcih0ID0+IHQuaXRlbS5pcyhcImxpc3RJdGVtXCIpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcihlLnByZXZpb3VzUG9zaXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IG4ucG9zaXRpb24uZ2V0U2hpZnRlZEJ5KG4ubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgICAgICByKGkpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG4udHlwZSA9PSBcInJlbW92ZVwiICYmIG4ubmFtZSA9PSBcImxpc3RJdGVtXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByKG4ucG9zaXRpb24pXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG4udHlwZSA9PSBcImF0dHJpYnV0ZVwiICYmIG4uYXR0cmlidXRlS2V5ID09IFwibGlzdEluZGVudFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcihuLnJhbmdlLnN0YXJ0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChuLnR5cGUgPT0gXCJhdHRyaWJ1dGVcIiAmJiBuLmF0dHJpYnV0ZUtleSA9PSBcImxpc3RUeXBlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByKG4ucmFuZ2Uuc3RhcnQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG4udmFsdWVzKCkpIHtcclxuICAgICAgICAgICAgICAgIHModCk7XHJcbiAgICAgICAgICAgICAgICBhKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG87XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiByKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm5vZGVCZWZvcmU7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUgfHwgIWUuaXMoXCJsaXN0SXRlbVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm5vZGVBZnRlcjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZSAmJiBlLmlzKFwibGlzdEl0ZW1cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbi5zZXQoZSwgZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBpID0gZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobi5oYXMoaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChpLnByZXZpb3VzU2libGluZyAmJiBpLnByZXZpb3VzU2libGluZy5pcyhcImxpc3RJdGVtXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBpLnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4uaGFzKGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBuLnNldCh0Lm5vZGVCZWZvcmUsIGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHModCkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGkgPSAwO1xyXG4gICAgICAgICAgICAgICAgbGV0IG4gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHQgJiYgdC5pcyhcImxpc3RJdGVtXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IHQuZ2V0QXR0cmlidXRlKFwibGlzdEluZGVudFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAociA+IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuID0gciAtIGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzID0gaVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gPiByKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbiA9IHJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMgPSByIC0gblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKFwibGlzdEluZGVudFwiLCBzLCB0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbyA9IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHQuZ2V0QXR0cmlidXRlKFwibGlzdEluZGVudFwiKSArIDFcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdCA9IHQubmV4dFNpYmxpbmdcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gYSh0KSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgaSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgbGV0IG4gPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgd2hpbGUgKHQgJiYgdC5pcyhcImxpc3RJdGVtXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IHQuZ2V0QXR0cmlidXRlKFwibGlzdEluZGVudFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobiAmJiBuLmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIikgPiByKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSBpLnNsaWNlKDAsIHIgKyAxKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAociAhPSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpW3JdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gaVtyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LmdldEF0dHJpYnV0ZShcImxpc3RUeXBlXCIpICE9IG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZShcImxpc3RUeXBlXCIsIG4sIHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpW3JdID0gdC5nZXRBdHRyaWJ1dGUoXCJsaXN0VHlwZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgIHQgPSB0Lm5leHRTaWJsaW5nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFRUKHQsIFtlLCBpXSkge1xyXG4gICAgICAgICAgICBsZXQgbiA9IGUuaXMoXCJkb2N1bWVudEZyYWdtZW50XCIpID8gZS5nZXRDaGlsZCgwKSA6IGU7XHJcbiAgICAgICAgICAgIGxldCBvO1xyXG4gICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgIG8gPSB0aGlzLmRvY3VtZW50LnNlbGVjdGlvblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbyA9IHRoaXMuY3JlYXRlU2VsZWN0aW9uKGkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG4gJiYgbi5pcyhcImxpc3RJdGVtXCIpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gby5nZXRGaXJzdFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5wYXJlbnQuaXMoXCJsaXN0SXRlbVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0LnBhcmVudFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0Lm5vZGVCZWZvcmUgJiYgdC5ub2RlQmVmb3JlLmlzKFwibGlzdEl0ZW1cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBlID0gdC5ub2RlQmVmb3JlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChuICYmIG4uaXMoXCJsaXN0SXRlbVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5fc2V0QXR0cmlidXRlKFwibGlzdEluZGVudFwiLCBuLmdldEF0dHJpYnV0ZShcImxpc3RJbmRlbnRcIikgKyB0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBuLm5leHRTaWJsaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFBUKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgY29uc3Qge3dyaXRlcjogbiwgc2NoZW1hOiBvfSA9IGk7XHJcbiAgICAgICAgICAgIGxldCByID0gbi5jcmVhdGVQb3NpdGlvbkFmdGVyKHQpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHMgb2YgZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHMubmFtZSA9PSBcInVsXCIgfHwgcy5uYW1lID09IFwib2xcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHIgPSBpLmNvbnZlcnRJdGVtKHMsIHIpLm1vZGVsQ3Vyc29yXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBpLmNvbnZlcnRJdGVtKHMsIG4uY3JlYXRlUG9zaXRpb25BdCh0LCBcImVuZFwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IGUubW9kZWxSYW5nZS5zdGFydC5ub2RlQWZ0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IGEgJiYgYS5pcyhcImVsZW1lbnRcIikgJiYgIW8uY2hlY2tDaGlsZCh0LCBhLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlLm1vZGVsQ3Vyc29yLnBhcmVudC5pcyhcImxpc3RJdGVtXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ID0gZS5tb2RlbEN1cnNvci5wYXJlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQgPSBTVChlLm1vZGVsQ3Vyc29yKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBuLmNyZWF0ZVBvc2l0aW9uQWZ0ZXIodClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFNUKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBXaCh7c3RhcnRQb3NpdGlvbjogdH0pO1xyXG4gICAgICAgICAgICBsZXQgaTtcclxuICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgaSA9IGUubmV4dCgpXHJcbiAgICAgICAgICAgIH0gd2hpbGUgKCFpLnZhbHVlLml0ZW0uaXMoXCJsaXN0SXRlbVwiKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBpLnZhbHVlLml0ZW1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEVUKHQsIGUsIGksIG4sIG8sIHIpIHtcclxuICAgICAgICAgICAgY29uc3QgcyA9IGRUKGUubm9kZUJlZm9yZSwge3NhbWVJbmRlbnQ6IHRydWUsIHNtYWxsZXJJbmRlbnQ6IHRydWUsIGxpc3RJbmRlbnQ6IHQsIGZvbzogXCJiXCJ9KTtcclxuICAgICAgICAgICAgY29uc3QgYSA9IG8ubWFwcGVyO1xyXG4gICAgICAgICAgICBjb25zdCBjID0gby53cml0ZXI7XHJcbiAgICAgICAgICAgIGNvbnN0IGwgPSBzID8gcy5nZXRBdHRyaWJ1dGUoXCJsaXN0SW5kZW50XCIpIDogbnVsbDtcclxuICAgICAgICAgICAgbGV0IGQ7XHJcbiAgICAgICAgICAgIGlmICghcykge1xyXG4gICAgICAgICAgICAgICAgZCA9IGlcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChsID09IHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBhLnRvVmlld0VsZW1lbnQocykucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgZCA9IGMuY3JlYXRlUG9zaXRpb25BZnRlcih0KVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHIuY3JlYXRlUG9zaXRpb25BdChzLCBcImVuZFwiKTtcclxuICAgICAgICAgICAgICAgIGQgPSBhLnRvVmlld1Bvc2l0aW9uKHQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZCA9IGxUKGQpO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgWy4uLm4uZ2V0Q2hpbGRyZW4oKV0pIHtcclxuICAgICAgICAgICAgICAgIGlmIChSVCh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGQgPSBjLm1vdmUoYy5jcmVhdGVSYW5nZU9uKHQpLCBkKS5lbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY1QoYywgdCwgdC5uZXh0U2libGluZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY1QoYywgdC5wcmV2aW91c1NpYmxpbmcsIHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFJUKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQuaXMoXCJvbFwiKSB8fCB0LmlzKFwidWxcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE9UKHQpIHtcclxuICAgICAgICAgICAgbGV0IGUgPSAwO1xyXG4gICAgICAgICAgICBsZXQgaSA9IHQucGFyZW50O1xyXG4gICAgICAgICAgICB3aGlsZSAoaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkuaXMoXCJsaVwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUrK1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gaS5wcmV2aW91c1NpYmxpbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgdC5pcyhcImxpXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUrK1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkgPSBpLnBhcmVudFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBJVCBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiTGlzdEVkaXRpbmdcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtWX11cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIHQubW9kZWwuc2NoZW1hLnJlZ2lzdGVyKFwibGlzdEl0ZW1cIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIGluaGVyaXRBbGxGcm9tOiBcIiRibG9ja1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGFsbG93QXR0cmlidXRlczogW1wibGlzdFR5cGVcIiwgXCJsaXN0SW5kZW50XCJdXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmRhdGE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5lZGl0aW5nO1xyXG4gICAgICAgICAgICAgICAgdC5tb2RlbC5kb2N1bWVudC5yZWdpc3RlclBvc3RGaXhlcihlID0+IEFUKHQubW9kZWwsIGUpKTtcclxuICAgICAgICAgICAgICAgIGkubWFwcGVyLnJlZ2lzdGVyVmlld1RvTW9kZWxMZW5ndGgoXCJsaVwiLCBWVCk7XHJcbiAgICAgICAgICAgICAgICBlLm1hcHBlci5yZWdpc3RlclZpZXdUb01vZGVsTGVuZ3RoKFwibGlcIiwgVlQpO1xyXG4gICAgICAgICAgICAgICAgaS5tYXBwZXIub24oXCJtb2RlbFRvVmlld1Bvc2l0aW9uXCIsIHhUKGkudmlldykpO1xyXG4gICAgICAgICAgICAgICAgaS5tYXBwZXIub24oXCJ2aWV3VG9Nb2RlbFBvc2l0aW9uXCIsIENUKHQubW9kZWwpKTtcclxuICAgICAgICAgICAgICAgIGUubWFwcGVyLm9uKFwibW9kZWxUb1ZpZXdQb3NpdGlvblwiLCB4VChpLnZpZXcpKTtcclxuICAgICAgICAgICAgICAgIHQuY29udmVyc2lvbi5mb3IoXCJlZGl0aW5nRG93bmNhc3RcIikuYWRkKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGUub24oXCJpbnNlcnRcIiwgd1QsIHtwcmlvcml0eTogXCJoaWdoXCJ9KTtcclxuICAgICAgICAgICAgICAgICAgICBlLm9uKFwiaW5zZXJ0Omxpc3RJdGVtXCIsIGZUKHQubW9kZWwpKTtcclxuICAgICAgICAgICAgICAgICAgICBlLm9uKFwiYXR0cmlidXRlOmxpc3RUeXBlOmxpc3RJdGVtXCIsIG1ULCB7cHJpb3JpdHk6IFwiaGlnaFwifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5vbihcImF0dHJpYnV0ZTpsaXN0VHlwZTpsaXN0SXRlbVwiLCBwVCwge3ByaW9yaXR5OiBcImxvd1wifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5vbihcImF0dHJpYnV0ZTpsaXN0SW5kZW50Omxpc3RJdGVtXCIsIGJUKHQubW9kZWwpKTtcclxuICAgICAgICAgICAgICAgICAgICBlLm9uKFwicmVtb3ZlOmxpc3RJdGVtXCIsIGdUKHQubW9kZWwpKTtcclxuICAgICAgICAgICAgICAgICAgICBlLm9uKFwicmVtb3ZlXCIsIGtULCB7cHJpb3JpdHk6IFwibG93XCJ9KVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbnZlcnNpb24uZm9yKFwiZGF0YURvd25jYXN0XCIpLmFkZChlID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBlLm9uKFwiaW5zZXJ0XCIsIHdULCB7cHJpb3JpdHk6IFwiaGlnaFwifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5vbihcImluc2VydDpsaXN0SXRlbVwiLCBmVCh0Lm1vZGVsKSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdC5jb252ZXJzaW9uLmZvcihcInVwY2FzdFwiKS5hZGQodCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5vbihcImVsZW1lbnQ6dWxcIiwgdlQsIHtwcmlvcml0eTogXCJoaWdoXCJ9KTtcclxuICAgICAgICAgICAgICAgICAgICB0Lm9uKFwiZWxlbWVudDpvbFwiLCB2VCwge3ByaW9yaXR5OiBcImhpZ2hcIn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHQub24oXCJlbGVtZW50OmxpXCIsIHlULCB7cHJpb3JpdHk6IFwiaGlnaFwifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5vbihcImVsZW1lbnQ6bGlcIiwgX1QpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQubW9kZWwub24oXCJpbnNlcnRDb250ZW50XCIsIFRULCB7cHJpb3JpdHk6IFwiaGlnaFwifSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcIm51bWJlcmVkTGlzdFwiLCBuZXcgZVQodCwgXCJudW1iZXJlZFwiKSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcImJ1bGxldGVkTGlzdFwiLCBuZXcgZVQodCwgXCJidWxsZXRlZFwiKSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcImluZGVudExpc3RcIiwgbmV3IG9UKHQsIFwiZm9yd2FyZFwiKSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcIm91dGRlbnRMaXN0XCIsIG5ldyBvVCh0LCBcImJhY2t3YXJkXCIpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLnZpZXcuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKG4sIFwiZW50ZXJcIiwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5lZGl0b3IubW9kZWwuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGkuc2VsZWN0aW9uLmdldExhc3RQb3NpdGlvbigpLnBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaS5zZWxlY3Rpb24uaXNDb2xsYXBzZWQgJiYgbi5uYW1lID09IFwibGlzdEl0ZW1cIiAmJiBuLmlzRW1wdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IuZXhlY3V0ZShcIm91dGRlbnRMaXN0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc3RvcCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKG4sIFwiZGVsZXRlXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuZGlyZWN0aW9uICE9PSBcImJhY2t3YXJkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmVkaXRvci5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpLmlzQ29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5nZXRGaXJzdFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuLmlzQXRTdGFydCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IG4ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLm5hbWUgIT09IFwibGlzdEl0ZW1cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IG8ucHJldmlvdXNTaWJsaW5nICYmIG8ucHJldmlvdXNTaWJsaW5nLm5hbWUgPT09IFwibGlzdEl0ZW1cIjtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IuZXhlY3V0ZShcIm91dGRlbnRMaXN0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0LnN0b3AoKVxyXG4gICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImhpZ2hcIn0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHQgPT4gKGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5lZGl0b3IuY29tbWFuZHMuZ2V0KHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuLmlzRW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5leGVjdXRlKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdC5rZXlzdHJva2VzLnNldChcIlRhYlwiLCBvKFwiaW5kZW50TGlzdFwiKSk7XHJcbiAgICAgICAgICAgICAgICB0LmtleXN0cm9rZXMuc2V0KFwiU2hpZnQrVGFiXCIsIG8oXCJvdXRkZW50TGlzdFwiKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgYWZ0ZXJJbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLmNvbW1hbmRzO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZ2V0KFwiaW5kZW50XCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuZ2V0KFwib3V0ZGVudFwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5yZWdpc3RlckNoaWxkQ29tbWFuZCh0LmdldChcImluZGVudExpc3RcIikpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGkucmVnaXN0ZXJDaGlsZENvbW1hbmQodC5nZXQoXCJvdXRkZW50TGlzdFwiKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVlQodCkge1xyXG4gICAgICAgICAgICBsZXQgZSA9IDE7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0LmdldENoaWxkcmVuKCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpLm5hbWUgPT0gXCJ1bFwiIHx8IGkubmFtZSA9PSBcIm9sXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgaS5nZXRDaGlsZHJlbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUgKz0gVlQodClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBOVCA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk03IDUuNzVjMCAuNDE0LjMzNi43NS43NS43NWg5LjVhLjc1Ljc1IDAgMSAwIDAtMS41aC05LjVhLjc1Ljc1IDAgMCAwLS43NS43NXpNMy41IDN2NUgyVjMuN0gxdi0xaDIuNVYzek0uMzQzIDE3Ljg1N2wyLjU5LTMuMjU3SDIuOTJhLjYuNiAwIDEgMC0xLjA0IDBILjMwMmEyIDIgMCAxIDEgMy45OTUgMGgtLjAwMWMtLjA0OC40MDUtLjE2LjczNC0uMzMzLjk4OC0uMTc1LjI1NC0uNTkuNjkyLTEuMjQ0IDEuMzEySDQuM3YxaC00bC4wNDMtLjA0M3pNNyAxNC43NWEuNzUuNzUgMCAwIDEgLjc1LS43NWg5LjVhLjc1Ljc1IDAgMSAxIDAgMS41aC05LjVhLjc1Ljc1IDAgMCAxLS43NS0uNzV6XCIvPjwvc3ZnPic7XHJcbiAgICAgICAgdmFyIE1UID0gJzxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTcgNS43NWMwIC40MTQuMzM2Ljc1Ljc1Ljc1aDkuNWEuNzUuNzUgMCAxIDAgMC0xLjVoLTkuNWEuNzUuNzUgMCAwIDAtLjc1Ljc1em0tNiAwQzEgNC43ODQgMS43NzcgNCAyLjc1IDRjLjk2NiAwIDEuNzUuNzc3IDEuNzUgMS43NSAwIC45NjYtLjc3NyAxLjc1LTEuNzUgMS43NUMxLjc4NCA3LjUgMSA2LjcyMyAxIDUuNzV6bTYgOWMwIC40MTQuMzM2Ljc1Ljc1Ljc1aDkuNWEuNzUuNzUgMCAxIDAgMC0xLjVoLTkuNWEuNzUuNzUgMCAwIDAtLjc1Ljc1em0tNiAwYzAtLjk2Ni43NzctMS43NSAxLjc1LTEuNzUuOTY2IDAgMS43NS43NzcgMS43NSAxLjc1IDAgLjk2Ni0uNzc3IDEuNzUtMS43NSAxLjc1LS45NjYgMC0xLjc1LS43NzctMS43NS0xLjc1elwiLz48L3N2Zz4nO1xyXG5cclxuICAgICAgICBjbGFzcyBCVCBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci50O1xyXG4gICAgICAgICAgICAgICAgdVQodGhpcy5lZGl0b3IsIFwibnVtYmVyZWRMaXN0XCIsIHQoXCJsY1wiKSwgTlQpO1xyXG4gICAgICAgICAgICAgICAgdVQodGhpcy5lZGl0b3IsIFwiYnVsbGV0ZWRMaXN0XCIsIHQoXCJsZFwiKSwgTVQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHpUIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtJVCwgQlRdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkxpc3RcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgTFQgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNOC42OSAxNC45MTVjLjA1My4wNTIuMTczLjA4My4zNi4wOTNhLjM2Ni4zNjYgMCAwIDEgLjM0NS40ODVsLS4wMDMuMDFhLjczOC43MzggMCAwIDEtLjY5Ny40OTdoLTIuNjdhLjM3NC4zNzQgMCAwIDEtLjM1My0uNDk2bC4wMTMtLjAzOGEuNjgxLjY4MSAwIDAgMSAuNjQ0LS40NThjLjE5Ny0uMDEyLjMyNS0uMDQzLjM4Ni0uMDkzYS4yOC4yOCAwIDAgMCAuMDcyLS4xMUw5LjU5MiA0LjVINi4yNjljLS4zNTktLjAxNy0uNjA5LjAxMy0uNzUuMDktLjE0Mi4wNzgtLjI4OS4yNjUtLjQ0Mi41NjMtLjE5Mi4yOS0uNTE2LjQ2NC0uODY0LjQ2NEg0LjE3YS40My40MyAwIDAgMS0uNDA3LS41NjlMNC40NiAzaDEzLjA4bC0uNjIgMi4wNDNhLjgxLjgxIDAgMCAxLS43NzUuNTc0aC0uMTE0YS40ODYuNDg2IDAgMCAxLS40ODYtLjQ4NmMuMDAxLS4yODQtLjA1NC0uNDY0LS4xNjctLjU0LS4xMTItLjA3Ni0uMzY3LS4xMDYtLjc2Ni0uMDkxaC0zLjI4bC0yLjY4IDEwLjI1N2MtLjAwNi4wNzQuMDA3LjEyNy4wMzguMTU4ek0zIDE3aDhhLjUuNSAwIDEgMSAwIDFIM2EuNS41IDAgMSAxIDAtMXptMTEuMjk5IDEuMTdhLjc1Ljc1IDAgMSAxLTEuMDYtMS4wNmwxLjQxNC0xLjQxNS0xLjQxNS0xLjQxNGEuNzUuNzUgMCAwIDEgMS4wNi0xLjA2bDEuNDE1IDEuNDE0IDEuNDE0LTEuNDE1YS43NS43NSAwIDEgMSAxLjA2IDEuMDZsLTEuNDEzIDEuNDE1IDEuNDE0IDEuNDE1YS43NS43NSAwIDAgMS0xLjA2IDEuMDZsLTEuNDE1LTEuNDE0LTEuNDE0IDEuNDE0elwiLz48L3N2Zz4nO1xyXG4gICAgICAgIGNvbnN0IEZUID0gXCJyZW1vdmVGb3JtYXRcIjtcclxuXHJcbiAgICAgICAgY2xhc3MgRFQgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlJlbW92ZUZvcm1hdFVJXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICB0LnVpLmNvbXBvbmVudEZhY3RvcnkuYWRkKEZULCBpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5jb21tYW5kcy5nZXQoRlQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgaGIoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5zZXQoe2xhYmVsOiBlKFwibGFcIiksIGljb246IExULCB0b29sdGlwOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5iaW5kKFwiaXNPblwiLCBcImlzRW5hYmxlZFwiKS50byhuLCBcInZhbHVlXCIsIFwiaXNFbmFibGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8obywgXCJleGVjdXRlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlKEZUKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBqVCBleHRlbmRzIGp3IHtcclxuICAgICAgICAgICAgcmVmcmVzaCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVkID0gISFXdyh0aGlzLl9nZXRGb3JtYXR0aW5nSXRlbXModC5kb2N1bWVudC5zZWxlY3Rpb24sIHQuc2NoZW1hKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXhlY3V0ZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnNjaGVtYTtcclxuICAgICAgICAgICAgICAgIHQuY2hhbmdlKGkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiB0aGlzLl9nZXRGb3JtYXR0aW5nSXRlbXModC5kb2N1bWVudC5zZWxlY3Rpb24sIGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuLmlzKFwic2VsZWN0aW9uXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2YgdGhpcy5fZ2V0Rm9ybWF0dGluZ0F0dHJpYnV0ZXMobiwgZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnJlbW92ZVNlbGVjdGlvbkF0dHJpYnV0ZSh0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGkuY3JlYXRlUmFuZ2VPbihuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiB0aGlzLl9nZXRGb3JtYXR0aW5nQXR0cmlidXRlcyhuLCBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkucmVtb3ZlQXR0cmlidXRlKG8sIHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIF9nZXRGb3JtYXR0aW5nSXRlbXModCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQgPT4gISFXdyh0aGlzLl9nZXRGb3JtYXR0aW5nQXR0cmlidXRlcyh0LCBlKSk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdC5nZXRSYW5nZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBlLmdldEl0ZW1zKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHlpZWxkIHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgeWllbGQgdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAqIF9nZXRGb3JtYXR0aW5nQXR0cmlidXRlcyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtpXSBvZiB0LmdldEF0dHJpYnV0ZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLmdldEF0dHJpYnV0ZVByb3BlcnRpZXMoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgdC5pc0Zvcm1hdHRpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeWllbGQgaVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgSFQgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlJlbW92ZUZvcm1hdEVkaXRpbmdcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJyZW1vdmVGb3JtYXRcIiwgbmV3IGpUKHQpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBXVCBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCByZXF1aXJlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbSFQsIERUXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJSZW1vdmVGb3JtYXRcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBxVCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUgPSAyMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbCA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpemUgPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saW1pdCA9IGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTG9ja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jaGFuZ2VDYWxsYmFjayA9ICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUudHlwZSAhPSBcInRyYW5zcGFyZW50XCIgJiYgZSAhPT0gdGhpcy5fYmF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVzZXQodHJ1ZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2VsZWN0aW9uQ2hhbmdlQ2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVzZXQoKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuZG9jdW1lbnQub24oXCJjaGFuZ2VcIiwgdGhpcy5fY2hhbmdlQ2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24ub24oXCJjaGFuZ2U6cmFuZ2VcIiwgdGhpcy5fc2VsZWN0aW9uQ2hhbmdlQ2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24ub24oXCJjaGFuZ2U6YXR0cmlidXRlXCIsIHRoaXMuX3NlbGVjdGlvbkNoYW5nZUNhbGxiYWNrKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgYmF0Y2goKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX2JhdGNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmF0Y2ggPSB0aGlzLm1vZGVsLmNyZWF0ZUJhdGNoKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iYXRjaFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbnB1dCh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNpemUgKz0gdDtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNpemUgPj0gdGhpcy5saW1pdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3Jlc2V0KHRydWUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxvY2soKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTG9ja2VkID0gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB1bmxvY2soKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzTG9ja2VkID0gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuZG9jdW1lbnQub2ZmKFwiY2hhbmdlXCIsIHRoaXMuX2NoYW5nZUNhbGxiYWNrKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uLm9mZihcImNoYW5nZTpyYW5nZVwiLCB0aGlzLl9zZWxlY3Rpb25DaGFuZ2VDYWxsYmFjayk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbi5vZmYoXCJjaGFuZ2U6YXR0cmlidXRlXCIsIHRoaXMuX3NlbGVjdGlvbkNoYW5nZUNhbGxiYWNrKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVzZXQodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzTG9ja2VkIHx8IHQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9iYXRjaCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zaXplID0gMFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBVVCBleHRlbmRzIGp3IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9idWZmZXIgPSBuZXcgcVQodC5tb2RlbCwgZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iYXRjaGVzID0gbmV3IFdlYWtTZXRcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGJ1ZmZlcigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlci5kZXN0cm95KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXhlY3V0ZSh0ID0ge30pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQudGV4dCB8fCBcIlwiO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG4ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHQucmFuZ2UgPyBlLmNyZWF0ZVNlbGVjdGlvbih0LnJhbmdlKSA6IGkuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IHQucmVzdWx0UmFuZ2U7XHJcbiAgICAgICAgICAgICAgICBlLmVucXVldWVDaGFuZ2UodGhpcy5fYnVmZmVyLmJhdGNoLCB0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9idWZmZXIubG9jaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUuZGVsZXRlQ29udGVudChyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmluc2VydENvbnRlbnQodC5jcmVhdGVUZXh0KG4sIGkuc2VsZWN0aW9uLmdldEF0dHJpYnV0ZXMoKSksIHIpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0U2VsZWN0aW9uKHMpXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghci5pcyhcImRvY3VtZW50U2VsZWN0aW9uXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0U2VsZWN0aW9uKHIpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlci51bmxvY2soKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9idWZmZXIuaW5wdXQobyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYmF0Y2hlcy5hZGQodGhpcy5fYnVmZmVyLmJhdGNoKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gJFQodCkge1xyXG4gICAgICAgICAgICBsZXQgZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0Lm1vZGVsO1xyXG4gICAgICAgICAgICBjb25zdCBuID0gdC5lZGl0aW5nLnZpZXc7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSB0LmNvbW1hbmRzLmdldChcImlucHV0XCIpO1xyXG4gICAgICAgICAgICBpZiAoQWwuaXNBbmRyb2lkKSB7XHJcbiAgICAgICAgICAgICAgICBuLmRvY3VtZW50Lm9uKFwiYmVmb3JlaW5wdXRcIiwgKHQsIGUpID0+IHIoZSksIHtwcmlvcml0eTogXCJsb3dlc3RcIn0pXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuLmRvY3VtZW50Lm9uKFwia2V5ZG93blwiLCAodCwgZSkgPT4gcihlKSwge3ByaW9yaXR5OiBcImxvd2VzdFwifSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBuLmRvY3VtZW50Lm9uKFwiY29tcG9zaXRpb25zdGFydFwiLCBzLCB7cHJpb3JpdHk6IFwibG93ZXN0XCJ9KTtcclxuICAgICAgICAgICAgbi5kb2N1bWVudC5vbihcImNvbXBvc2l0aW9uZW5kXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGUgPSBpLmNyZWF0ZVNlbGVjdGlvbihpLmRvY3VtZW50LnNlbGVjdGlvbilcclxuICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImxvd2VzdFwifSk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiByKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBpLmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG4uZG9jdW1lbnQuaXNDb21wb3Npbmc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gZSAmJiBlLmlzRXF1YWwoci5zZWxlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW8uaXNFbmFibGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoS1QodCkgfHwgci5zZWxlY3Rpb24uaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChzICYmIHQua2V5Q29kZSA9PT0gMjI5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXMgJiYgdC5rZXlDb2RlID09PSAyMjkgJiYgYykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gaS5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnNlbGVjdGlvbi5yYW5nZUNvdW50ID09PSAxID8gdC5zZWxlY3Rpb24uZ2V0Rmlyc3RSYW5nZSgpLmlzRmxhdCA6IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5zZWxlY3Rpb24uaXNDb2xsYXBzZWQgfHwgZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgYSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGEoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gby5idWZmZXI7XHJcbiAgICAgICAgICAgICAgICB0LmxvY2soKTtcclxuICAgICAgICAgICAgICAgIGkuZW5xdWV1ZUNoYW5nZSh0LmJhdGNoLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5kZWxldGVDb250ZW50KGkuZG9jdW1lbnQuc2VsZWN0aW9uKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0LnVubG9jaygpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IEdUID0gW01sKFwiYXJyb3dVcFwiKSwgTWwoXCJhcnJvd1JpZ2h0XCIpLCBNbChcImFycm93RG93blwiKSwgTWwoXCJhcnJvd0xlZnRcIiksIDksIDE2LCAxNywgMTgsIDE5LCAyMCwgMjcsIDMzLCAzNCwgMzUsIDM2LCA0NSwgOTEsIDkzLCAxNDQsIDE0NSwgMTczLCAxNzQsIDE3NSwgMTc2LCAxNzcsIDE3OCwgMTc5LCAyNTVdO1xyXG4gICAgICAgIGZvciAobGV0IHQgPSAxMTI7IHQgPD0gMTM1OyB0KyspIHtcclxuICAgICAgICAgICAgR1QucHVzaCh0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gS1QodCkge1xyXG4gICAgICAgICAgICBpZiAodC5jdHJsS2V5KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBHVC5pbmNsdWRlcyh0LmtleUNvZGUpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBKVCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBbXTtcclxuICAgICAgICAgICAgbGV0IG4gPSAwO1xyXG4gICAgICAgICAgICBsZXQgbztcclxuICAgICAgICAgICAgdC5mb3JFYWNoKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQgPT0gXCJlcXVhbFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIG4rK1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0ID09IFwiaW5zZXJ0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocyhcImluc2VydFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvLnZhbHVlcy5wdXNoKGVbbl0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0ge3R5cGU6IFwiaW5zZXJ0XCIsIGluZGV4OiBuLCB2YWx1ZXM6IFtlW25dXX1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbisrXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzKFwiZGVsZXRlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uaG93TWFueSsrXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0ge3R5cGU6IFwiZGVsZXRlXCIsIGluZGV4OiBuLCBob3dNYW55OiAxfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHIoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiByKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpLnB1c2gobyk7XHJcbiAgICAgICAgICAgICAgICAgICAgbyA9IG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gcyh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbyAmJiBvLnR5cGUgPT0gdFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBZVCh0KSB7XHJcbiAgICAgICAgICAgIGlmICh0Lmxlbmd0aCA9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PT0gXCJjaGlsZHJlblwiICYmICFRVChlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBRVCh0KSB7XHJcbiAgICAgICAgICAgIGlmICh0Lm5ld0NoaWxkcmVuLmxlbmd0aCAtIHQub2xkQ2hpbGRyZW4ubGVuZ3RoICE9IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSBfZCh0Lm9sZENoaWxkcmVuLCB0Lm5ld0NoaWxkcmVuLCBYVCk7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBKVChlLCB0Lm5ld0NoaWxkcmVuKTtcclxuICAgICAgICAgICAgaWYgKGkubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbiA9IGlbMF07XHJcbiAgICAgICAgICAgIGlmICghKCEhbi52YWx1ZXNbMF0gJiYgbi52YWx1ZXNbMF0uaXMoXCJ0ZXh0XCIpKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFhUKHQsIGUpIHtcclxuICAgICAgICAgICAgaWYgKCEhdCAmJiB0LmlzKFwidGV4dFwiKSAmJiAhIWUgJiYgZS5pcyhcInRleHRcIikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0LmRhdGEgPT09IGUuZGF0YVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQgPT09IGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWlQodCkge1xyXG4gICAgICAgICAgICB0LmVkaXRpbmcudmlldy5kb2N1bWVudC5vbihcIm11dGF0aW9uc1wiLCAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgbmV3IHRQKHQpLmhhbmRsZShpLCBuKVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgdFAge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvciA9IHQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRpbmcgPSB0aGlzLmVkaXRvci5lZGl0aW5nXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGhhbmRsZSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoWVQodCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVDb250YWluZXJDaGlsZHJlbk11dGF0aW9ucyh0LCBlKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oYW5kbGVUZXh0TXV0YXRpb24oaSwgZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hhbmRsZVRleHROb2RlSW5zZXJ0aW9uKGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfaGFuZGxlQ29udGFpbmVyQ2hpbGRyZW5NdXRhdGlvbnModCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGVQKHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5lZGl0b3IuZWRpdGluZy52aWV3LmRvbUNvbnZlcnRlcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuLm1hcFZpZXdUb0RvbShpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuZXcgemQodGhpcy5lZGl0b3IuZWRpdGluZy52aWV3LmRvY3VtZW50KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB0aGlzLmVkaXRvci5kYXRhLnRvTW9kZWwoci5kb21Ub1ZpZXcobykpLmdldENoaWxkKDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IHRoaXMuZWRpdG9yLmVkaXRpbmcubWFwcGVyLnRvTW9kZWxFbGVtZW50KGkpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gQXJyYXkuZnJvbShzLmdldENoaWxkcmVuKCkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbCA9IEFycmF5LmZyb20oYS5nZXRDaGlsZHJlbigpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBjW2MubGVuZ3RoIC0gMV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1ID0gbFtsLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGQgJiYgZC5pcyhcInNvZnRCcmVha1wiKSAmJiB1ICYmICF1LmlzKFwic29mdEJyZWFrXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYy5wb3AoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgaCA9IHRoaXMuZWRpdG9yLm1vZGVsLnNjaGVtYTtcclxuICAgICAgICAgICAgICAgIGlmICghaVAoYywgaCkgfHwgIWlQKGwsIGgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBmID0gYy5tYXAodCA9PiB0LmlzKFwidGV4dFwiKSA/IHQuZGF0YSA6IFwiQFwiKS5qb2luKFwiXCIpLnJlcGxhY2UoL1xcdTAwQTAvZywgXCIgXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZyA9IGwubWFwKHQgPT4gdC5pcyhcInRleHRcIikgPyB0LmRhdGEgOiBcIkBcIikuam9pbihcIlwiKS5yZXBsYWNlKC9cXHUwMEEwL2csIFwiIFwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChnID09PSBmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBtID0gX2QoZywgZik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7Zmlyc3RDaGFuZ2VBdDogcCwgaW5zZXJ0aW9uczogYiwgZGVsZXRpb25zOiB3fSA9IG5QKG0pO1xyXG4gICAgICAgICAgICAgICAgbGV0IGsgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBrID0gdGhpcy5lZGl0aW5nLm1hcHBlci50b01vZGVsUmFuZ2UoZS5nZXRGaXJzdFJhbmdlKCkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBfID0gZi5zdWJzdHIocCwgYik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2ID0gdGhpcy5lZGl0b3IubW9kZWwuY3JlYXRlUmFuZ2UodGhpcy5lZGl0b3IubW9kZWwuY3JlYXRlUG9zaXRpb25BdChhLCBwKSwgdGhpcy5lZGl0b3IubW9kZWwuY3JlYXRlUG9zaXRpb25BdChhLCBwICsgdykpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IuZXhlY3V0ZShcImlucHV0XCIsIHt0ZXh0OiBfLCByYW5nZTogdiwgcmVzdWx0UmFuZ2U6IGt9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfaGFuZGxlVGV4dE11dGF0aW9uKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0LnR5cGUgIT0gXCJ0ZXh0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0Lm5ld1RleHQucmVwbGFjZSgvXFx1MDBBMC9nLCBcIiBcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5vbGRUZXh0LnJlcGxhY2UoL1xcdTAwQTAvZywgXCIgXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4gPT09IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBfZChuLCBpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHtmaXJzdENoYW5nZUF0OiByLCBpbnNlcnRpb25zOiBzLCBkZWxldGlvbnM6IGF9ID0gblAobyk7XHJcbiAgICAgICAgICAgICAgICBsZXQgYyA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGMgPSB0aGlzLmVkaXRpbmcubWFwcGVyLnRvTW9kZWxSYW5nZShlLmdldEZpcnN0UmFuZ2UoKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGwgPSB0aGlzLmVkaXRpbmcudmlldy5jcmVhdGVQb3NpdGlvbkF0KHQubm9kZSwgcik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBkID0gdGhpcy5lZGl0aW5nLm1hcHBlci50b01vZGVsUG9zaXRpb24obCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1ID0gdGhpcy5lZGl0b3IubW9kZWwuY3JlYXRlUmFuZ2UoZCwgZC5nZXRTaGlmdGVkQnkoYSkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaCA9IGkuc3Vic3RyKHIsIHMpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IuZXhlY3V0ZShcImlucHV0XCIsIHt0ZXh0OiBoLCByYW5nZTogdSwgcmVzdWx0UmFuZ2U6IGN9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfaGFuZGxlVGV4dE5vZGVJbnNlcnRpb24odCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQudHlwZSAhPSBcImNoaWxkcmVuXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBRVCh0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmVkaXRpbmcudmlldy5jcmVhdGVQb3NpdGlvbkF0KHQubm9kZSwgZS5pbmRleCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5lZGl0aW5nLm1hcHBlci50b01vZGVsUG9zaXRpb24oaSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gZS52YWx1ZXNbMF0uZGF0YTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmV4ZWN1dGUoXCJpbnB1dFwiLCB7dGV4dDogby5yZXBsYWNlKC9cXHUwMEEwL2csIFwiIFwiKSwgcmFuZ2U6IHRoaXMuZWRpdG9yLm1vZGVsLmNyZWF0ZVJhbmdlKG4pfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZVAodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5tYXAodCA9PiB0Lm5vZGUpLnJlZHVjZSgodCwgZSkgPT4gdC5nZXRDb21tb25BbmNlc3RvcihlLCB7aW5jbHVkZVNlbGY6IHRydWV9KSk7XHJcbiAgICAgICAgICAgIGlmICghZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGUuZ2V0QW5jZXN0b3JzKHtcclxuICAgICAgICAgICAgICAgIGluY2x1ZGVTZWxmOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgcGFyZW50Rmlyc3Q6IHRydWVcclxuICAgICAgICAgICAgfSkuZmluZCh0ID0+IHQuaXMoXCJjb250YWluZXJFbGVtZW50XCIpIHx8IHQuaXMoXCJyb290RWxlbWVudFwiKSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGlQKHQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQuZXZlcnkodCA9PiBlLmlzSW5saW5lKHQpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gblAodCkge1xyXG4gICAgICAgICAgICBsZXQgZSA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBpID0gbnVsbDtcclxuICAgICAgICAgICAgZm9yIChsZXQgbiA9IDA7IG4gPCB0Lmxlbmd0aDsgbisrKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gdFtuXTtcclxuICAgICAgICAgICAgICAgIGlmIChvICE9IFwiZXF1YWxcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSBlID09PSBudWxsID8gbiA6IGU7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBsZXQgbiA9IDA7XHJcbiAgICAgICAgICAgIGxldCBvID0gMDtcclxuICAgICAgICAgICAgZm9yIChsZXQgciA9IGU7IHIgPD0gaTsgcisrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodFtyXSAhPSBcImluc2VydFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbisrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodFtyXSAhPSBcImRlbGV0ZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbysrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHtpbnNlcnRpb25zOiBvLCBkZWxldGlvbnM6IG4sIGZpcnN0Q2hhbmdlQXQ6IGV9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBvUCBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiSW5wdXRcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBVVCh0LCB0LmNvbmZpZy5nZXQoXCJ0eXBpbmcudW5kb1N0ZXBcIikgfHwgMjApO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJpbnB1dFwiLCBlKTtcclxuICAgICAgICAgICAgICAgICRUKHQpO1xyXG4gICAgICAgICAgICAgICAgWlQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaXNJbnB1dCh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lZGl0b3IuY29tbWFuZHMuZ2V0KFwiaW5wdXRcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZS5fYmF0Y2hlcy5oYXModClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgclAgZXh0ZW5kcyBqdyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSBlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYnVmZmVyID0gbmV3IHFUKHQubW9kZWwsIHQuY29uZmlnLmdldChcInR5cGluZy51bmRvU3RlcFwiKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IGJ1ZmZlcigpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9idWZmZXJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXhlY3V0ZSh0ID0ge30pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgZS5lbnF1ZXVlQ2hhbmdlKHRoaXMuX2J1ZmZlci5iYXRjaCwgbiA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYnVmZmVyLmxvY2soKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gbi5jcmVhdGVTZWxlY3Rpb24odC5zZWxlY3Rpb24gfHwgaS5zZWxlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBvLmlzQ29sbGFwc2VkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLmlzQ29sbGFwc2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUubW9kaWZ5U2VsZWN0aW9uKG8sIHtkaXJlY3Rpb246IHRoaXMuZGlyZWN0aW9uLCB1bml0OiB0LnVuaXR9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fc2hvdWxkRW50aXJlQ29udGVudEJlUmVwbGFjZWRXaXRoUGFyYWdyYXBoKHQuc2VxdWVuY2UgfHwgMSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVwbGFjZUVudGlyZUNvbnRlbnRXaXRoUGFyYWdyYXBoKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8uaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBvLmdldEZpcnN0UmFuZ2UoKS5nZXRNaW5pbWFsRmxhdFJhbmdlcygpLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHMgKz0gZmwodC5nZXRXYWxrZXIoe3NpbmdsZUNoYXJhY3RlcnM6IHRydWUsIGlnbm9yZUVsZW1lbnRFbmQ6IHRydWUsIHNoYWxsb3c6IHRydWV9KSlcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBlLmRlbGV0ZUNvbnRlbnQobywge2RvTm90UmVzZXRFbnRpcmVDb250ZW50OiByLCBkaXJlY3Rpb246IHRoaXMuZGlyZWN0aW9ufSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYnVmZmVyLmlucHV0KHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIG4uc2V0U2VsZWN0aW9uKG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2J1ZmZlci51bmxvY2soKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3Nob3VsZEVudGlyZUNvbnRlbnRCZVJlcGxhY2VkV2l0aFBhcmFncmFwaCh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGkuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGUuc2NoZW1hLmdldExpbWl0RWxlbWVudChuKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuLmlzQ29sbGFwc2VkICYmIG4uY29udGFpbnNFbnRpcmVDb250ZW50KG8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWUuc2NoZW1hLmNoZWNrQ2hpbGQobywgXCJwYXJhZ3JhcGhcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBvLmdldENoaWxkKDApO1xyXG4gICAgICAgICAgICAgICAgaWYgKHMgJiYgcy5uYW1lID09PSBcInBhcmFncmFwaFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVwbGFjZUVudGlyZUNvbnRlbnRXaXRoUGFyYWdyYXBoKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGkuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGUuc2NoZW1hLmdldExpbWl0RWxlbWVudChuKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0LmNyZWF0ZUVsZW1lbnQoXCJwYXJhZ3JhcGhcIik7XHJcbiAgICAgICAgICAgICAgICB0LnJlbW92ZSh0LmNyZWF0ZVJhbmdlSW4obykpO1xyXG4gICAgICAgICAgICAgICAgdC5pbnNlcnQociwgbyk7XHJcbiAgICAgICAgICAgICAgICB0LnNldFNlbGVjdGlvbihyLCAwKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBzUCBleHRlbmRzIEdkIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGxldCBpID0gMDtcclxuICAgICAgICAgICAgICAgIGUub24oXCJrZXl1cFwiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gTmwuZGVsZXRlIHx8IGUua2V5Q29kZSA9PSBObC5iYWNrc3BhY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IDBcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGUub24oXCJrZXlkb3duXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gTmwuZGVsZXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uZGlyZWN0aW9uID0gXCJmb3J3YXJkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8udW5pdCA9IFwiY2hhcmFjdGVyXCJcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGUua2V5Q29kZSA9PSBObC5iYWNrc3BhY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgby5kaXJlY3Rpb24gPSBcImJhY2t3YXJkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8udW5pdCA9IFwiY29kZVBvaW50XCJcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IEFsLmlzTWFjID8gZS5hbHRLZXkgOiBlLmN0cmxLZXk7XHJcbiAgICAgICAgICAgICAgICAgICAgby51bml0ID0gciA/IFwid29yZFwiIDogby51bml0O1xyXG4gICAgICAgICAgICAgICAgICAgIG8uc2VxdWVuY2UgPSArK2k7XHJcbiAgICAgICAgICAgICAgICAgICAgbih0LCBlLmRvbUV2ZW50LCBvKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoQWwuaXNBbmRyb2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5vbihcImJlZm9yZWlucHV0XCIsIChlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLmRvbUV2ZW50LmlucHV0VHlwZSAhPSBcImRlbGV0ZUNvbnRlbnRCYWNrd2FyZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0ge3VuaXQ6IFwiY29kZXBvaW50XCIsIGRpcmVjdGlvbjogXCJiYWNrd2FyZFwiLCBzZXF1ZW5jZTogMX07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBpLmRvbVRhcmdldC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3LmdldFNlbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoci5hbmNob3JOb2RlID09IHIuZm9jdXNOb2RlICYmIHIuYW5jaG9yT2Zmc2V0ICsgMSAhPSByLmZvY3VzT2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLnNlbGVjdGlvblRvUmVtb3ZlID0gdC5kb21Db252ZXJ0ZXIuZG9tU2VsZWN0aW9uVG9WaWV3KHIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbihlLCBpLmRvbUV2ZW50LCBvKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbih0LCBpLCBuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IG87XHJcbiAgICAgICAgICAgICAgICAgICAgZS5vbmNlKFwiZGVsZXRlXCIsIHQgPT4gbyA9IHQsIHtwcmlvcml0eTogTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5maXJlKFwiZGVsZXRlXCIsIG5ldyBLdShlLCBpLCBuKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8gJiYgby5zdG9wLmNhbGxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnN0b3AoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb2JzZXJ2ZSgpIHtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgYVAgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIkRlbGV0ZVwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5lZGl0aW5nLnZpZXc7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGUuYWRkT2JzZXJ2ZXIoc1ApO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJmb3J3YXJkRGVsZXRlXCIsIG5ldyByUCh0LCBcImZvcndhcmRcIikpO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJkZWxldGVcIiwgbmV3IHJQKHQsIFwiYmFja3dhcmRcIikpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhpLCBcImRlbGV0ZVwiLCAoaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB7dW5pdDogbi51bml0LCBzZXF1ZW5jZTogbi5zZXF1ZW5jZX07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4uc2VsZWN0aW9uVG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubW9kZWwuY3JlYXRlU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIG4uc2VsZWN0aW9uVG9SZW1vdmUuZ2V0UmFuZ2VzKCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkucHVzaCh0LmVkaXRpbmcubWFwcGVyLnRvTW9kZWxSYW5nZShlKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLnNldFRvKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvLnNlbGVjdGlvbiA9IGVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlKG4uZGlyZWN0aW9uID09IFwiZm9yd2FyZFwiID8gXCJmb3J3YXJkRGVsZXRlXCIgOiBcImRlbGV0ZVwiLCBvKTtcclxuICAgICAgICAgICAgICAgICAgICBuLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5zY3JvbGxUb1RoZVNlbGVjdGlvbigpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGlmIChBbC5pc0FuZHJvaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhpLCBcImRlbGV0ZVwiLCAoZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5kb21UYXJnZXQub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlldy5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck5vZGU6IG4uYW5jaG9yTm9kZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuY2hvck9mZnNldDogbi5hbmNob3JPZmZzZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb2N1c05vZGU6IG4uZm9jdXNOb2RlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXNPZmZzZXQ6IG4uZm9jdXNPZmZzZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJsb3dlc3RcIn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8oaSwgXCJrZXl1cFwiLCAoZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IGkuZG9tVGFyZ2V0Lm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmNvbGxhcHNlKHQuYW5jaG9yTm9kZSwgdC5hbmNob3JPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5leHRlbmQodC5mb2N1c05vZGUsIHQuZm9jdXNPZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdCA9IG51bGxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGNQIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtvUCwgYVBdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlR5cGluZ1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGxQIGV4dGVuZHMgR3Age1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVsVmlldyA9IG5ldyBNayh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFiZWxWaWV3LnRleHQgPSBpKFwiYlwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZ3JvdXBEcm9wZG93blZpZXcgPSB0aGlzLl9jcmVhdGVHcm91cERyb3Bkb3duKGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ncm91cERyb3Bkb3duVmlldy5wYW5lbFBvc2l0aW9uID0gdC51aUxhbmd1YWdlRGlyZWN0aW9uID09PSBcInJ0bFwiID8gXCJzZVwiIDogXCJzd1wiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcImRpdlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtjbGFzczogW1wiY2tcIiwgXCJjay1zcGVjaWFsLWNoYXJhY3RlcnMtbmF2aWdhdGlvblwiXX0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFt0aGlzLmxhYmVsVmlldywgdGhpcy5ncm91cERyb3Bkb3duVmlld11cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBjdXJyZW50R3JvdXBOYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ3JvdXBEcm9wZG93blZpZXcudmFsdWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUdyb3VwRHJvcGRvd24odCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMubG9jYWxlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBXYihlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0aGlzLl9nZXRDaGFyYWN0ZXJHcm91cExpc3RJdGVtRGVmaW5pdGlvbnMobiwgdCk7XHJcbiAgICAgICAgICAgICAgICBuLnNldChcInZhbHVlXCIsIG8uZmlyc3QubW9kZWwubGFiZWwpO1xyXG4gICAgICAgICAgICAgICAgbi5idXR0b25WaWV3LmJpbmQoXCJsYWJlbFwiKS50byhuLCBcInZhbHVlXCIpO1xyXG4gICAgICAgICAgICAgICAgbi5idXR0b25WaWV3LnNldCh7aXNPbjogZmFsc2UsIHdpdGhUZXh0OiB0cnVlLCB0b29sdGlwOiBpKFwibGVcIil9KTtcclxuICAgICAgICAgICAgICAgIG4ub24oXCJleGVjdXRlXCIsIHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG4udmFsdWUgPSB0LnNvdXJjZS5sYWJlbFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBuLmRlbGVnYXRlKFwiZXhlY3V0ZVwiKS50byh0aGlzKTtcclxuICAgICAgICAgICAgICAgIFViKG4sIG8pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldENoYXJhY3Rlckdyb3VwTGlzdEl0ZW1EZWZpbml0aW9ucyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gbmV3IHlzO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0ge3R5cGU6IFwiYnV0dG9uXCIsIG1vZGVsOiBuZXcgZV8oe2xhYmVsOiBuLCB3aXRoVGV4dDogdHJ1ZX0pfTtcclxuICAgICAgICAgICAgICAgICAgICBlLm1vZGVsLmJpbmQoXCJpc09uXCIpLnRvKHQsIFwidmFsdWVcIiwgdCA9PiB0ID09PSBlLm1vZGVsLmxhYmVsKTtcclxuICAgICAgICAgICAgICAgICAgICBpLmFkZChlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGRQID0gaSg4Nik7XHJcblxyXG4gICAgICAgIGNsYXNzIHVQIGV4dGVuZHMgR3Age1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMudGlsZXMgPSB0aGlzLmNyZWF0ZUNvbGxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGVtcGxhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZzogXCJkaXZcIixcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiBcImRpdlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrXCIsIFwiY2stY2hhcmFjdGVyLWdyaWRfX3RpbGVzXCJdfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IHRoaXMudGlsZXNcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrXCIsIFwiY2stY2hhcmFjdGVyLWdyaWRcIl19XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjcmVhdGVUaWxlKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgaGIodGhpcy5sb2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgaS5zZXQoe2xhYmVsOiB0LCB3aXRoVGV4dDogdHJ1ZSwgY2xhc3M6IFwiY2stY2hhcmFjdGVyLWdyaWRfX3RpbGVcIn0pO1xyXG4gICAgICAgICAgICAgICAgaS5leHRlbmRUZW1wbGF0ZSh7YXR0cmlidXRlczoge3RpdGxlOiBlfSwgb246IHttb3VzZW92ZXI6IGkuYmluZFRlbXBsYXRlLnRvKFwibW91c2VvdmVyXCIpfX0pO1xyXG4gICAgICAgICAgICAgICAgaS5vbihcIm1vdXNlb3ZlclwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwidGlsZUhvdmVyXCIsIHtuYW1lOiBlLCBjaGFyYWN0ZXI6IHR9KVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpLm9uKFwiZXhlY3V0ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiZXhlY3V0ZVwiLCB7bmFtZTogZSwgY2hhcmFjdGVyOiB0fSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGhQID0gaSg4OCk7XHJcblxyXG4gICAgICAgIGNsYXNzIGZQIGV4dGVuZHMgR3Age1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmJpbmRUZW1wbGF0ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiY2hhcmFjdGVyXCIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJuYW1lXCIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iaW5kKFwiY29kZVwiKS50byh0aGlzLCBcImNoYXJhY3RlclwiLCBnUCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogXCJzcGFuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtjbGFzczogW1wiY2stY2hhcmFjdGVyLWluZm9fX25hbWVcIl19LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW3t0ZXh0OiBlLnRvKFwibmFtZVwiLCB0ID0+IHQgPyB0IDogXCLigItcIil9XVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiBcInNwYW5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge2NsYXNzOiBbXCJjay1jaGFyYWN0ZXItaW5mb19fY29kZVwiXX0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbe3RleHQ6IGUudG8oXCJjb2RlXCIpfV1cclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrXCIsIFwiY2stY2hhcmFjdGVyLWluZm9cIl19XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnUCh0KSB7XHJcbiAgICAgICAgICAgIGlmICh0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmNvZGVQb2ludEF0KDApLnRvU3RyaW5nKDE2KTtcclxuICAgICAgICAgICAgcmV0dXJuIFwiVStcIiArIChcIjAwMDBcIiArIGUpLnNsaWNlKC00KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIG1QID0gJzxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTEwIDIuNWE3LjQ3IDcuNDcgMCAwIDEgNC4yMzEgMS4zMSA3LjI2OCA3LjI2OCAwIDAgMSAyLjcwMyAzLjQ1NCA3LjEyOCA3LjEyOCAwIDAgMSAuMTk5IDQuMzUzYy0uMzkgMS40MzYtMS40NzUgMi43Mi0yLjYzMyAzLjY3N2gyLjAxM2MwLS4yMjYuMDkyLS40NDMuMjU0LS42MDNhLjg3Ni44NzYgMCAwIDEgMS4yMjkgMGMuMTYzLjE2LjI1NC4zNzcuMjU0LjYwM3YuODUzYzAgLjIwOS0uMDc4LjQxLS4yMi41NjdhLjg3My44NzMgMCAwIDEtLjU0Ny4yOGwtLjEwMS4wMDZoLTQuNjk1YS41MTcuNTE3IDAgMCAxLS41MTYtLjUxOHYtMS4yNjVjMC0uMjEuMTI4LS4zOTguMzE3LS40ODlhNS42MDEgNS42MDEgMCAwIDAgMi40OTItMi4zNzEgNS40NTkgNS40NTkgMCAwIDAgLjU1Mi0zLjY5MyA1LjUzIDUuNTMgMCAwIDAtMS45NTUtMy4yQTUuNzEgNS43MSAwIDAgMCAxMCA0LjIwNiA1LjcwOCA1LjcwOCAwIDAgMCA2LjQxOSA1LjQ2IDUuNTI3IDUuNTI3IDAgMCAwIDQuNDYgOC42NjNhNS40NTcgNS40NTcgMCAwIDAgLjU1NCAzLjY5NSA1LjYgNS42IDAgMCAwIDIuNDk3IDIuMzcuNTUuNTUgMCAwIDEgLjMxNy40OXYxLjI2NGMwIC4yODYtLjIzLjUxOC0uNTE2LjUxOEgyLjYxOGEuODc3Ljg3NyAwIDAgMS0uNjE0LS4yNS44NDUuODQ1IDAgMCAxLS4yNTQtLjYwM3YtLjg1M2MwLS4yMjYuMDkxLS40NDMuMjU0LS42MDNhLjg3Ni44NzYgMCAwIDEgMS4yMjggMGMuMTYzLjE2LjI1NS4zNzcuMjU1LjYwM2gxLjkyNWMtMS4xNTgtLjk1OC0yLjE1NS0yLjI0MS0yLjU0NS0zLjY3OGE3LjEyOCA3LjEyOCAwIDAgMSAuMTk5LTQuMzUyIDcuMjY4IDcuMjY4IDAgMCAxIDIuNzAzLTMuNDU1QTcuNDc1IDcuNDc1IDAgMCAxIDEwIDIuNXpcIi8+PC9zdmc+JztcclxuICAgICAgICB2YXIgcFAgPSBpKDkwKTtcclxuICAgICAgICBjb25zdCBiUCA9IFwi0JLRgdC1XCI7XHJcblxyXG4gICAgICAgIGNsYXNzIHdQIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtjUF1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiU3BlY2lhbENoYXJhY3RlcnNcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NoYXJhY3RlcnMgPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZ3JvdXBzID0gbmV3IE1hcFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LmNvbW1hbmRzLmdldChcImlucHV0XCIpO1xyXG4gICAgICAgICAgICAgICAgdC51aS5jb21wb25lbnRGYWN0b3J5LmFkZChcInNwZWNpYWxDaGFyYWN0ZXJzXCIsIG4gPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBXYihuKTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgcjtcclxuICAgICAgICAgICAgICAgICAgICBvLmJ1dHRvblZpZXcuc2V0KHtsYWJlbDogZShcImJcIiksIGljb246IG1QLCB0b29sdGlwOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5iaW5kKFwiaXNFbmFibGVkXCIpLnRvKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG8ub24oXCJleGVjdXRlXCIsIChlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuZXhlY3V0ZShcImlucHV0XCIsIHt0ZXh0OiBpLmNoYXJhY3Rlcn0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmVkaXRpbmcudmlldy5mb2N1cygpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5vbihcImNoYW5nZTppc09wZW5cIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB0aGlzLl9jcmVhdGVEcm9wZG93blBhbmVsQ29udGVudChuLCBvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8ucGFuZWxWaWV3LmNoaWxkcmVuLmFkZChyLm5hdmlnYXRpb25WaWV3KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8ucGFuZWxWaWV3LmNoaWxkcmVuLmFkZChyLmdyaWRWaWV3KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8ucGFuZWxWaWV3LmNoaWxkcmVuLmFkZChyLmluZm9WaWV3KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIuaW5mb1ZpZXcuc2V0KHtjaGFyYWN0ZXI6IG51bGwsIG5hbWU6IG51bGx9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZGRJdGVtcyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodCA9PT0gYlApIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgc3NbXCJiXCJdKGBzcGVjaWFsLWNoYXJhY3Rlci1pbnZhbGlkLWdyb3VwLW5hbWU6IFRoZSBuYW1lIFwiJHtiUH1cIiBpcyByZXNlcnZlZCBhbmQgY2Fubm90IGJlIHVzZWQuYClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9nZXRHcm91cCh0KTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5hZGQodC50aXRsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhcmFjdGVycy5zZXQodC50aXRsZSwgdC5jaGFyYWN0ZXIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldEdyb3VwcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ncm91cHMua2V5cygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENoYXJhY3RlcnNGb3JHcm91cCh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodCA9PT0gYlApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFNldCh0aGlzLl9jaGFyYWN0ZXJzLmtleXMoKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ncm91cHMuZ2V0KHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENoYXJhY3Rlcih0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fY2hhcmFjdGVycy5nZXQodClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldEdyb3VwKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fZ3JvdXBzLmhhcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2dyb3Vwcy5zZXQodCwgbmV3IFNldClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9ncm91cHMuZ2V0KHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF91cGRhdGVHcmlkKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGUudGlsZXMuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmdldENoYXJhY3RlcnNGb3JHcm91cCh0KTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZ2V0Q2hhcmFjdGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUudGlsZXMuYWRkKGUuY3JlYXRlVGlsZShpLCB0KSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZURyb3Bkb3duUGFuZWxDb250ZW50KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBbLi4udGhpcy5nZXRHcm91cHMoKV07XHJcbiAgICAgICAgICAgICAgICBpLnVuc2hpZnQoYlApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBsUCh0LCBpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgdVAodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbmV3IGZQKHQpO1xyXG4gICAgICAgICAgICAgICAgby5kZWxlZ2F0ZShcImV4ZWN1dGVcIikudG8oZSk7XHJcbiAgICAgICAgICAgICAgICBvLm9uKFwidGlsZUhvdmVyXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgci5zZXQoZSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbi5vbihcImV4ZWN1dGVcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUdyaWQobi5jdXJyZW50R3JvdXBOYW1lLCBvKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91cGRhdGVHcmlkKG4uY3VycmVudEdyb3VwTmFtZSwgbyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge25hdmlnYXRpb25WaWV3OiBuLCBncmlkVmlldzogbywgaW5mb1ZpZXc6IHJ9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGtQIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQudDtcclxuICAgICAgICAgICAgICAgIHQucGx1Z2lucy5nZXQoXCJTcGVjaWFsQ2hhcmFjdGVyc1wiKS5hZGRJdGVtcyhcItCS0LDQu9GO0YLQsFwiLCBbe2NoYXJhY3RlcjogXCIkXCIsIHRpdGxlOiBlKFwidVwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwi4oKsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJ2XCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsKlXCIsIHRpdGxlOiBlKFwid1wiKX0sIHtjaGFyYWN0ZXI6IFwiwqNcIiwgdGl0bGU6IGUoXCJ4XCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLColwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwieVwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLigqBcIiwgdGl0bGU6IGUoXCJ6XCIpfSwge2NoYXJhY3RlcjogXCLigqFcIiwgdGl0bGU6IGUoXCJhYVwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwi4oKiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJhYlwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLigqNcIiwgdGl0bGU6IGUoXCJhY1wiKX0sIHtjaGFyYWN0ZXI6IFwi4oKkXCIsIHRpdGxlOiBlKFwiYWRcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsKkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJhZVwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLigr9cIiwgdGl0bGU6IGUoXCJhZlwiKX0sIHtjaGFyYWN0ZXI6IFwi4oKlXCIsIHRpdGxlOiBlKFwiYWdcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIuKCplwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiYWhcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwi4oKnXCIsIHRpdGxlOiBlKFwiYWlcIil9LCB7Y2hhcmFjdGVyOiBcIuKCqFwiLCB0aXRsZTogZShcImFqXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLigqlcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImFrXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIuKCqlwiLCB0aXRsZTogZShcImFsXCIpfSwge2NoYXJhY3RlcjogXCLigqtcIiwgdGl0bGU6IGUoXCJhbVwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwi4oKtXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJhblwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLigq5cIiwgdGl0bGU6IGUoXCJhb1wiKX0sIHtjaGFyYWN0ZXI6IFwi4oKvXCIsIHRpdGxlOiBlKFwiYXBcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIuKCsFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiYXFcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwi4oKxXCIsIHRpdGxlOiBlKFwiYXJcIil9LCB7Y2hhcmFjdGVyOiBcIuKCslwiLCB0aXRsZTogZShcImFzXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLigrNcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImF0XCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIuKCtFwiLCB0aXRsZTogZShcImF1XCIpfSwge2NoYXJhY3RlcjogXCLigrVcIiwgdGl0bGU6IGUoXCJhdlwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwi4oK2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJhd1wiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLigrdcIiwgdGl0bGU6IGUoXCJheFwiKX0sIHtjaGFyYWN0ZXI6IFwi4oK4XCIsIHRpdGxlOiBlKFwiYXlcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIuKCuVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiYXpcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwi4oK6XCIsIHRpdGxlOiBlKFwiYmFcIil9LCB7Y2hhcmFjdGVyOiBcIuKCu1wiLCB0aXRsZTogZShcImJiXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLigrxcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImJjXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIuKCvVwiLCB0aXRsZTogZShcImJkXCIpfV0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIF9QIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQudDtcclxuICAgICAgICAgICAgICAgIHQucGx1Z2lucy5nZXQoXCJTcGVjaWFsQ2hhcmFjdGVyc1wiKS5hZGRJdGVtcyhcItCc0LDRgtC10LzQsNGC0LjRh9C10YHQutC40LVcIiwgW3tcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwiPFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiZ2NcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwiPlwiLCB0aXRsZTogZShcImdkXCIpfSwge2NoYXJhY3RlcjogXCLiiaRcIiwgdGl0bGU6IGUoXCJnZVwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwi4omlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJnZlwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLigJNcIiwgdGl0bGU6IGUoXCJnZ1wiKX0sIHtjaGFyYWN0ZXI6IFwi4oCUXCIsIHRpdGxlOiBlKFwiZ2hcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsKvXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJnaVwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLigL5cIiwgdGl0bGU6IGUoXCJnalwiKX0sIHtjaGFyYWN0ZXI6IFwiwrBcIiwgdGl0bGU6IGUoXCJna1wiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwi4oiSXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJnbFwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLCsVwiLCB0aXRsZTogZShcImdtXCIpfSwge2NoYXJhY3RlcjogXCLDt1wiLCB0aXRsZTogZShcImduXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLigYRcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImdvXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsOXXCIsIHRpdGxlOiBlKFwiZ3BcIil9LCB7Y2hhcmFjdGVyOiBcIsaSXCIsIHRpdGxlOiBlKFwiZ3FcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIuKIq1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiZ3JcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwi4oiRXCIsIHRpdGxlOiBlKFwiZ3NcIil9LCB7Y2hhcmFjdGVyOiBcIuKInlwiLCB0aXRsZTogZShcImd0XCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLiiJpcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImd1XCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIuKIvFwiLCB0aXRsZTogZShcImd2XCIpfSwge2NoYXJhY3RlcjogXCLiiYVcIiwgdGl0bGU6IGUoXCJnd1wiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwi4omIXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJneFwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLiiaBcIiwgdGl0bGU6IGUoXCJneVwiKX0sIHtjaGFyYWN0ZXI6IFwi4omhXCIsIHRpdGxlOiBlKFwiZ3pcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIuKIiFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiaGFcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwi4oiJXCIsIHRpdGxlOiBlKFwiaGJcIil9LCB7Y2hhcmFjdGVyOiBcIuKIi1wiLCB0aXRsZTogZShcImhjXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLiiI9cIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImhkXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIuKIp1wiLCB0aXRsZTogZShcImhlXCIpfSwge2NoYXJhY3RlcjogXCLiiKhcIiwgdGl0bGU6IGUoXCJoZlwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwiwqxcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImhnXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIuKIqVwiLCB0aXRsZTogZShcImhoXCIpfSwge2NoYXJhY3RlcjogXCLiiKpcIiwgdGl0bGU6IGUoXCJoaVwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwi4oiCXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJoalwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLiiIBcIiwgdGl0bGU6IGUoXCJoa1wiKX0sIHtjaGFyYWN0ZXI6IFwi4oiDXCIsIHRpdGxlOiBlKFwiaGxcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIuKIhVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiaG1cIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwi4oiHXCIsIHRpdGxlOiBlKFwiaG5cIil9LCB7Y2hhcmFjdGVyOiBcIuKIl1wiLCB0aXRsZTogZShcImhvXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLiiJ1cIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImhwXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIuKIoFwiLCB0aXRsZTogZShcImhxXCIpfSwge2NoYXJhY3RlcjogXCLCvFwiLCB0aXRsZTogZShcImhyXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLCvVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiaHNcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwiwr5cIiwgdGl0bGU6IGUoXCJodFwiKX1dKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyB2UCBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICB0LnBsdWdpbnMuZ2V0KFwiU3BlY2lhbENoYXJhY3RlcnNcIikuYWRkSXRlbXMoXCLQodGC0YDQtdC70LrQuFwiLCBbe3RpdGxlOiBlKFwiY1wiKSwgY2hhcmFjdGVyOiBcIuKHkFwifSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiZFwiKSxcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwi4oeSXCJcclxuICAgICAgICAgICAgICAgIH0sIHt0aXRsZTogZShcImVcIiksIGNoYXJhY3RlcjogXCLih5FcIn0sIHt0aXRsZTogZShcImZcIiksIGNoYXJhY3RlcjogXCLih5NcIn0sIHtcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImdcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIuKHoFwiXHJcbiAgICAgICAgICAgICAgICB9LCB7dGl0bGU6IGUoXCJoXCIpLCBjaGFyYWN0ZXI6IFwi4oeiXCJ9LCB7dGl0bGU6IGUoXCJpXCIpLCBjaGFyYWN0ZXI6IFwi4oehXCJ9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJqXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLih6NcIlxyXG4gICAgICAgICAgICAgICAgfSwge3RpdGxlOiBlKFwia1wiKSwgY2hhcmFjdGVyOiBcIuKHpFwifSwge3RpdGxlOiBlKFwibFwiKSwgY2hhcmFjdGVyOiBcIuKHpVwifSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwibVwiKSxcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwi4qSSXCJcclxuICAgICAgICAgICAgICAgIH0sIHt0aXRsZTogZShcIm5cIiksIGNoYXJhY3RlcjogXCLipJNcIn0sIHt0aXRsZTogZShcIm9cIiksIGNoYXJhY3RlcjogXCLihqhcIn0sIHtcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcInBcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIvCflJlcIlxyXG4gICAgICAgICAgICAgICAgfSwge3RpdGxlOiBlKFwicVwiKSwgY2hhcmFjdGVyOiBcIvCflJpcIn0sIHt0aXRsZTogZShcInJcIiksIGNoYXJhY3RlcjogXCLwn5SbXCJ9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJzXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLwn5ScXCJcclxuICAgICAgICAgICAgICAgIH0sIHt0aXRsZTogZShcInRcIiksIGNoYXJhY3RlcjogXCLwn5SdXCJ9XSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgeVAgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC50O1xyXG4gICAgICAgICAgICAgICAgdC5wbHVnaW5zLmdldChcIlNwZWNpYWxDaGFyYWN0ZXJzXCIpLmFkZEl0ZW1zKFwi0JvQsNGC0LjQvdGB0LrQuNC1INGB0LjQvNCy0L7Qu9GLXCIsIFt7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsSAXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJiZVwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLEgVwiLCB0aXRsZTogZShcImJmXCIpfSwge2NoYXJhY3RlcjogXCLEglwiLCB0aXRsZTogZShcImJnXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLEg1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiYmhcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwixIRcIiwgdGl0bGU6IGUoXCJiaVwiKX0sIHtjaGFyYWN0ZXI6IFwixIVcIiwgdGl0bGU6IGUoXCJialwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwixIZcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImJrXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsSHXCIsIHRpdGxlOiBlKFwiYmxcIil9LCB7Y2hhcmFjdGVyOiBcIsSIXCIsIHRpdGxlOiBlKFwiYm1cIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsSJXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJiblwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLEilwiLCB0aXRsZTogZShcImJvXCIpfSwge2NoYXJhY3RlcjogXCLEi1wiLCB0aXRsZTogZShcImJwXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLEjFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiYnFcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwixI1cIiwgdGl0bGU6IGUoXCJiclwiKX0sIHtjaGFyYWN0ZXI6IFwixI5cIiwgdGl0bGU6IGUoXCJic1wiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwixI9cIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImJ0XCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsSQXCIsIHRpdGxlOiBlKFwiYnVcIil9LCB7Y2hhcmFjdGVyOiBcIsSRXCIsIHRpdGxlOiBlKFwiYnZcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsSSXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJid1wiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLEk1wiLCB0aXRsZTogZShcImJ4XCIpfSwge2NoYXJhY3RlcjogXCLElFwiLCB0aXRsZTogZShcImJ5XCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLElVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiYnpcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwixJZcIiwgdGl0bGU6IGUoXCJjYVwiKX0sIHtjaGFyYWN0ZXI6IFwixJdcIiwgdGl0bGU6IGUoXCJjYlwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwixJhcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImNjXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsSZXCIsIHRpdGxlOiBlKFwiY2RcIil9LCB7Y2hhcmFjdGVyOiBcIsSaXCIsIHRpdGxlOiBlKFwiY2VcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsSbXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJjZlwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLEnFwiLCB0aXRsZTogZShcImNnXCIpfSwge2NoYXJhY3RlcjogXCLEnVwiLCB0aXRsZTogZShcImNoXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLEnlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiY2lcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwixJ9cIiwgdGl0bGU6IGUoXCJjalwiKX0sIHtjaGFyYWN0ZXI6IFwixKBcIiwgdGl0bGU6IGUoXCJja1wiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwixKFcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImNsXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsSiXCIsIHRpdGxlOiBlKFwiY21cIil9LCB7Y2hhcmFjdGVyOiBcIsSjXCIsIHRpdGxlOiBlKFwiY25cIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsSkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJjb1wiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLEpVwiLCB0aXRsZTogZShcImNwXCIpfSwge2NoYXJhY3RlcjogXCLEplwiLCB0aXRsZTogZShcImNxXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLEp1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiY3JcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwixKhcIiwgdGl0bGU6IGUoXCJjc1wiKX0sIHtjaGFyYWN0ZXI6IFwixKlcIiwgdGl0bGU6IGUoXCJjdFwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwixKpcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImN1XCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsSrXCIsIHRpdGxlOiBlKFwiY3ZcIil9LCB7Y2hhcmFjdGVyOiBcIsSsXCIsIHRpdGxlOiBlKFwiY3dcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsStXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJjeFwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLErlwiLCB0aXRsZTogZShcImN5XCIpfSwge2NoYXJhY3RlcjogXCLEr1wiLCB0aXRsZTogZShcImN6XCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLEsFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiZGFcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwixLFcIiwgdGl0bGU6IGUoXCJkYlwiKX0sIHtjaGFyYWN0ZXI6IFwixLJcIiwgdGl0bGU6IGUoXCJkY1wiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwixLNcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImRkXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsS0XCIsIHRpdGxlOiBlKFwiZGVcIil9LCB7Y2hhcmFjdGVyOiBcIsS1XCIsIHRpdGxlOiBlKFwiZGZcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsS2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJkZ1wiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLEt1wiLCB0aXRsZTogZShcImRoXCIpfSwge2NoYXJhY3RlcjogXCLEuFwiLCB0aXRsZTogZShcImRpXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLEuVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiZGpcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwixLpcIiwgdGl0bGU6IGUoXCJka1wiKX0sIHtjaGFyYWN0ZXI6IFwixLtcIiwgdGl0bGU6IGUoXCJkbFwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwixLxcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImRtXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsS9XCIsIHRpdGxlOiBlKFwiZG5cIil9LCB7Y2hhcmFjdGVyOiBcIsS+XCIsIHRpdGxlOiBlKFwiZG9cIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsS/XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJkcFwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLFgFwiLCB0aXRsZTogZShcImRxXCIpfSwge2NoYXJhY3RlcjogXCLFgVwiLCB0aXRsZTogZShcImRyXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLFglwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiZHNcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwixYNcIiwgdGl0bGU6IGUoXCJkdFwiKX0sIHtjaGFyYWN0ZXI6IFwixYRcIiwgdGl0bGU6IGUoXCJkdVwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwixYVcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImR2XCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsWGXCIsIHRpdGxlOiBlKFwiZHdcIil9LCB7Y2hhcmFjdGVyOiBcIsWHXCIsIHRpdGxlOiBlKFwiZHhcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsWIXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJkeVwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLFiVwiLCB0aXRsZTogZShcImR6XCIpfSwge2NoYXJhY3RlcjogXCLFilwiLCB0aXRsZTogZShcImVhXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLFi1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiZWJcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwixYxcIiwgdGl0bGU6IGUoXCJlY1wiKX0sIHtjaGFyYWN0ZXI6IFwixY1cIiwgdGl0bGU6IGUoXCJlZFwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwixY5cIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImVlXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsWPXCIsIHRpdGxlOiBlKFwiZWZcIil9LCB7Y2hhcmFjdGVyOiBcIsWQXCIsIHRpdGxlOiBlKFwiZWdcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsWRXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJlaFwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLFklwiLCB0aXRsZTogZShcImVpXCIpfSwge2NoYXJhY3RlcjogXCLFk1wiLCB0aXRsZTogZShcImVqXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLFlFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiZWtcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwixZVcIiwgdGl0bGU6IGUoXCJlbFwiKX0sIHtjaGFyYWN0ZXI6IFwixZZcIiwgdGl0bGU6IGUoXCJlbVwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwixZdcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImVuXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsWYXCIsIHRpdGxlOiBlKFwiZW9cIil9LCB7Y2hhcmFjdGVyOiBcIsWZXCIsIHRpdGxlOiBlKFwiZXBcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsWaXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJlcVwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLFm1wiLCB0aXRsZTogZShcImVyXCIpfSwge2NoYXJhY3RlcjogXCLFnFwiLCB0aXRsZTogZShcImVzXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLFnVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiZXRcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwixZ5cIiwgdGl0bGU6IGUoXCJldVwiKX0sIHtjaGFyYWN0ZXI6IFwixZ9cIiwgdGl0bGU6IGUoXCJldlwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwixaBcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImV3XCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsWhXCIsIHRpdGxlOiBlKFwiZXhcIil9LCB7Y2hhcmFjdGVyOiBcIsWiXCIsIHRpdGxlOiBlKFwiZXlcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsWjXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJlelwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLFpFwiLCB0aXRsZTogZShcImZhXCIpfSwge2NoYXJhY3RlcjogXCLFpVwiLCB0aXRsZTogZShcImZiXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLFplwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiZmNcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwixadcIiwgdGl0bGU6IGUoXCJmZFwiKX0sIHtjaGFyYWN0ZXI6IFwixahcIiwgdGl0bGU6IGUoXCJmZVwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwixalcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImZmXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsWqXCIsIHRpdGxlOiBlKFwiZmdcIil9LCB7Y2hhcmFjdGVyOiBcIsWrXCIsIHRpdGxlOiBlKFwiZmhcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsWsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJmaVwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLFrVwiLCB0aXRsZTogZShcImZqXCIpfSwge2NoYXJhY3RlcjogXCLFrlwiLCB0aXRsZTogZShcImZrXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLFr1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiZmxcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwixbBcIiwgdGl0bGU6IGUoXCJmbVwiKX0sIHtjaGFyYWN0ZXI6IFwixbFcIiwgdGl0bGU6IGUoXCJmblwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwixbJcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImZvXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsWzXCIsIHRpdGxlOiBlKFwiZnBcIil9LCB7Y2hhcmFjdGVyOiBcIsW0XCIsIHRpdGxlOiBlKFwiZnFcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsW1XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJmclwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLFtlwiLCB0aXRsZTogZShcImZzXCIpfSwge2NoYXJhY3RlcjogXCLFt1wiLCB0aXRsZTogZShcImZ0XCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLFuFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiZnVcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwixblcIiwgdGl0bGU6IGUoXCJmdlwiKX0sIHtjaGFyYWN0ZXI6IFwixbpcIiwgdGl0bGU6IGUoXCJmd1wiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwixbtcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImZ4XCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIsW8XCIsIHRpdGxlOiBlKFwiZnlcIil9LCB7Y2hhcmFjdGVyOiBcIsW9XCIsIHRpdGxlOiBlKFwiZnpcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsW+XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJnYVwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLFv1wiLCB0aXRsZTogZShcImdiXCIpfV0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHhQIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQudDtcclxuICAgICAgICAgICAgICAgIHQucGx1Z2lucy5nZXQoXCJTcGVjaWFsQ2hhcmFjdGVyc1wiKS5hZGRJdGVtcyhcItCi0LXQutGB0YLQvtCy0YvQtSDRgdC40LzQstC+0LvRi1wiLCBbe1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLigLlcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImh1XCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIuKAulwiLCB0aXRsZTogZShcImh2XCIpfSwge2NoYXJhY3RlcjogXCLCq1wiLCB0aXRsZTogZShcImh3XCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLCu1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiaHhcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwi4oCYXCIsIHRpdGxlOiBlKFwiaHlcIil9LCB7Y2hhcmFjdGVyOiBcIuKAmVwiLCB0aXRsZTogZShcImh6XCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLigJxcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImlhXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIuKAnVwiLCB0aXRsZTogZShcImliXCIpfSwge2NoYXJhY3RlcjogXCLigJpcIiwgdGl0bGU6IGUoXCJpY1wiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwi4oCeXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJpZFwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLCoVwiLCB0aXRsZTogZShcImllXCIpfSwge2NoYXJhY3RlcjogXCLCv1wiLCB0aXRsZTogZShcImlmXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLigKVcIixcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogZShcImlnXCIpXHJcbiAgICAgICAgICAgICAgICB9LCB7Y2hhcmFjdGVyOiBcIuKAplwiLCB0aXRsZTogZShcImloXCIpfSwge2NoYXJhY3RlcjogXCLigKFcIiwgdGl0bGU6IGUoXCJpaVwiKX0sIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFyYWN0ZXI6IFwi4oCwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJpalwiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLigLFcIiwgdGl0bGU6IGUoXCJpa1wiKX0sIHtjaGFyYWN0ZXI6IFwi4oC8XCIsIHRpdGxlOiBlKFwiaWxcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIuKBiFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiaW1cIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwi4oGJXCIsIHRpdGxlOiBlKFwiaW5cIil9LCB7Y2hhcmFjdGVyOiBcIuKBh1wiLCB0aXRsZTogZShcImlvXCIpfSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJhY3RlcjogXCLCqVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBlKFwiaXBcIilcclxuICAgICAgICAgICAgICAgIH0sIHtjaGFyYWN0ZXI6IFwiwq5cIiwgdGl0bGU6IGUoXCJpcVwiKX0sIHtjaGFyYWN0ZXI6IFwi4oSiXCIsIHRpdGxlOiBlKFwiaXJcIil9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyOiBcIsKnXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGUoXCJpc1wiKVxyXG4gICAgICAgICAgICAgICAgfSwge2NoYXJhY3RlcjogXCLCtlwiLCB0aXRsZTogZShcIml0XCIpfSwge2NoYXJhY3RlcjogXCLigYtcIiwgdGl0bGU6IGUoXCJpdVwiKX1dKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBDUCBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCByZXF1aXJlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBba1AsIHhQLCBfUCwgdlAsIHlQXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBBUCA9IFwic3RyaWtldGhyb3VnaFwiO1xyXG5cclxuICAgICAgICBjbGFzcyBUUCBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiU3RyaWtldGhyb3VnaEVkaXRpbmdcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgdC5tb2RlbC5zY2hlbWEuZXh0ZW5kKFwiJHRleHRcIiwge2FsbG93QXR0cmlidXRlczogQVB9KTtcclxuICAgICAgICAgICAgICAgIHQubW9kZWwuc2NoZW1hLnNldEF0dHJpYnV0ZVByb3BlcnRpZXMoQVAsIHtpc0Zvcm1hdHRpbmc6IHRydWUsIGNvcHlPbkVudGVyOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbnZlcnNpb24uYXR0cmlidXRlVG9FbGVtZW50KHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogQVAsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlldzogXCJzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBjYXN0QWxzbzogW1wiZGVsXCIsIFwic3RyaWtlXCIsIHtzdHlsZXM6IHtcInRleHQtZGVjb3JhdGlvblwiOiBcImxpbmUtdGhyb3VnaFwifX1dXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKEFQLCBuZXcgeWsodCwgQVApKTtcclxuICAgICAgICAgICAgICAgIHQua2V5c3Ryb2tlcy5zZXQoXCJDVFJMK1NISUZUK1hcIiwgXCJzdHJpa2V0aHJvdWdoXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBQUCA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk03IDE2LjRjLS44LS40LTEuNS0uOS0yLjItMS41YS42LjYgMCAwIDEtLjItLjVsLjMtLjZoMWMxIDEuMiAyLjEgMS43IDMuNyAxLjcgMSAwIDEuOC0uMyAyLjMtLjYuNi0uNC42LTEuMi42LTEuMy4yLTEuMi0uOS0yLjEtLjktMi4xaDIuMWMuMy43LjQgMS4yLjQgMS43di44bC0uNiAxLjJjLS42LjgtMS4xIDEtMS42IDEuMmE2IDYgMCAwIDEtMi40LjZjLTEgMC0xLjgtLjMtMi41LS42ek02LjggOUw2IDguM2MtLjQtLjUtLjUtLjgtLjUtMS42IDAtLjcuMS0xLjMuNS0xLjguNC0uNiAxLTEgMS42LTEuM2E2LjMgNi4zIDAgMCAxIDQuNyAwIDQgNCAwIDAgMSAxLjcgMWwuMy43YzAgLjEuMi40LS4yLjctLjQuMi0uOS4xLTEgMGEzIDMgMCAwIDAtMS4yLTFjLS40LS4yLTEtLjMtMi0uNC0uNyAwLTEuNC4yLTIgLjYtLjguNi0xIC44LTEgMS41IDAgLjguNSAxIDEuMiAxLjUuNi40IDEuMS43IDEuOSAxSDYuOHpcIi8+PHBhdGggZD1cIk0zIDEwLjVWOWgxNHYxLjV6XCIvPjwvc3ZnPic7XHJcbiAgICAgICAgY29uc3QgU1AgPSBcInN0cmlrZXRocm91Z2hcIjtcclxuXHJcbiAgICAgICAgY2xhc3MgRVAgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC50O1xyXG4gICAgICAgICAgICAgICAgdC51aS5jb21wb25lbnRGYWN0b3J5LmFkZChTUCwgaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuY29tbWFuZHMuZ2V0KFNQKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gbmV3IGhiKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG8uc2V0KHtsYWJlbDogZShcImprXCIpLCBpY29uOiBQUCwga2V5c3Ryb2tlOiBcIkNUUkwrU0hJRlQrWFwiLCB0b29sdGlwOiB0cnVlLCBpc1RvZ2dsZWFibGU6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgICAgICBvLmJpbmQoXCJpc09uXCIsIFwiaXNFbmFibGVkXCIpLnRvKG4sIFwidmFsdWVcIiwgXCJpc0VuYWJsZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhvLCBcImV4ZWN1dGVcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmV4ZWN1dGUoU1ApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmVkaXRpbmcudmlldy5mb2N1cygpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIFJQIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtUUCwgRVBdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlN0cmlrZXRocm91Z2hcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBPUCA9IFwic3Vic2NyaXB0XCI7XHJcblxyXG4gICAgICAgIGNsYXNzIElQIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJTdWJzY3JpcHRFZGl0aW5nXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIHQubW9kZWwuc2NoZW1hLmV4dGVuZChcIiR0ZXh0XCIsIHthbGxvd0F0dHJpYnV0ZXM6IE9QfSk7XHJcbiAgICAgICAgICAgICAgICB0Lm1vZGVsLnNjaGVtYS5zZXRBdHRyaWJ1dGVQcm9wZXJ0aWVzKE9QLCB7aXNGb3JtYXR0aW5nOiB0cnVlLCBjb3B5T25FbnRlcjogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgdC5jb252ZXJzaW9uLmF0dHJpYnV0ZVRvRWxlbWVudCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IE9QLFxyXG4gICAgICAgICAgICAgICAgICAgIHZpZXc6IFwic3ViXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBjYXN0QWxzbzogW3tzdHlsZXM6IHtcInZlcnRpY2FsLWFsaWduXCI6IFwic3ViXCJ9fV1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoT1AsIG5ldyB5ayh0LCBPUCkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBWUCA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk03LjAzIDEwLjM0OWwzLjgxOC0zLjgxOWEuOC44IDAgMSAxIDEuMTMyIDEuMTMyTDguMTYgMTEuNDhsMy44MTkgMy44MThhLjguOCAwIDEgMS0xLjEzMiAxLjEzMkw3LjAzIDEyLjYxbC0zLjgxOCAzLjgyYS44LjggMCAxIDEtMS4xMzItMS4xMzJMNS45IDExLjQ4IDIuMDggNy42NjJBLjguOCAwIDEgMSAzLjIxMiA2LjUzbDMuODE4IDMuODJ6bTguMTQ3IDcuODI5aDIuNTQ5Yy4yNTQgMCAuNDQ3LjA1LjU4LjE1MmEuNDkuNDkgMCAwIDEgLjIwMS40MTMuNTQuNTQgMCAwIDEtLjE1OS4zOTNjLS4xMDUuMTA4LS4yNjYuMTYyLS40OC4xNjJoLTMuNTk0Yy0uMjQ1IDAtLjQzNS0uMDY2LS41NzItLjE5N2EuNjIxLjYyMSAwIDAgMS0uMjA1LS40NjNjMC0uMTE0LjA0NC0uMjY1LjEzMi0uNDUzYTEuNjIgMS42MiAwIDAgMSAuMjg4LS40NDRjLjQzMy0uNDM2LjgyNC0uODEgMS4xNzItMS4xMjIuMzQ4LS4zMTIuNTk3LS41MTcuNzQ3LS42MTUuMjY3LS4xODMuNDktLjM2OC42NjctLjU1My4xNzctLjE4NS4zMTItLjM3NS40MDUtLjU3LjA5My0uMTk0LjEzOS0uMzg0LjEzOS0uNTdhMS4wMDggMS4wMDggMCAwIDAtLjU1NC0uOTE3IDEuMTk3IDEuMTk3IDAgMCAwLS41Ni0uMTMzYy0uNDI2IDAtLjc2MS4xODItMS4wMDUuNTQ2YTIuMzMyIDIuMzMyIDAgMCAwLS4xNjQuMzkgMS42MDkgMS42MDkgMCAwIDEtLjI1OC40ODhjLS4wOTYuMTE0LS4yMzcuMTctLjQyMy4xN2EuNTU4LjU1OCAwIDAgMS0uNDA1LS4xNTYuNTY4LjU2OCAwIDAgMS0uMTYxLS40MjdjMC0uMjE4LjA1LS40NDYuMTUxLS42ODMuMTAxLS4yMzguMjUyLS40NTMuNDUyLS42NDZzLjQ1NC0uMzQ5Ljc2Mi0uNDY3YTIuOTk4IDIuOTk4IDAgMCAxIDEuMDgxLS4xNzhjLjQ5OCAwIC45MjMuMDc2IDEuMjc0LjIyOGExLjkxNiAxLjkxNiAwIDAgMSAxLjAwNCAxLjAzMiAxLjk4NCAxLjk4NCAwIDAgMS0uMTU2IDEuNzk0Yy0uMi4zMi0uNDA1LjU3Mi0uNjEzLjc1NC0uMjA4LjE4Mi0uNTU4LjQ2OC0xLjA0OC44NTctLjQ5LjM5LS44MjYuNjkxLTEuMDA4LjkwNmEyLjcwMyAyLjcwMyAwIDAgMC0uMjQuMzA5elwiLz48L3N2Zz4nO1xyXG4gICAgICAgIGNvbnN0IE5QID0gXCJzdWJzY3JpcHRcIjtcclxuXHJcbiAgICAgICAgY2xhc3MgTVAgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC50O1xyXG4gICAgICAgICAgICAgICAgdC51aS5jb21wb25lbnRGYWN0b3J5LmFkZChOUCwgaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuY29tbWFuZHMuZ2V0KE5QKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gbmV3IGhiKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG8uc2V0KHtsYWJlbDogZShcImpsXCIpLCBpY29uOiBWUCwgdG9vbHRpcDogdHJ1ZSwgaXNUb2dnbGVhYmxlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5iaW5kKFwiaXNPblwiLCBcImlzRW5hYmxlZFwiKS50byhuLCBcInZhbHVlXCIsIFwiaXNFbmFibGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8obywgXCJleGVjdXRlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlKE5QKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBCUCBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCByZXF1aXJlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbSVAsIE1QXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJTdWJzY3JpcHRcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCB6UCA9IFwic3VwZXJzY3JpcHRcIjtcclxuXHJcbiAgICAgICAgY2xhc3MgTFAgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlN1cGVyc2NyaXB0RWRpdGluZ1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICB0Lm1vZGVsLnNjaGVtYS5leHRlbmQoXCIkdGV4dFwiLCB7YWxsb3dBdHRyaWJ1dGVzOiB6UH0pO1xyXG4gICAgICAgICAgICAgICAgdC5tb2RlbC5zY2hlbWEuc2V0QXR0cmlidXRlUHJvcGVydGllcyh6UCwge2lzRm9ybWF0dGluZzogdHJ1ZSwgY29weU9uRW50ZXI6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgIHQuY29udmVyc2lvbi5hdHRyaWJ1dGVUb0VsZW1lbnQoe1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVsOiB6UCxcclxuICAgICAgICAgICAgICAgICAgICB2aWV3OiBcInN1cFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHVwY2FzdEFsc286IFt7c3R5bGVzOiB7XCJ2ZXJ0aWNhbC1hbGlnblwiOiBcInN1cGVyXCJ9fV1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoelAsIG5ldyB5ayh0LCB6UCkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBGUCA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0xNS42NzcgOC42NzhoMi41NDljLjI1NCAwIC40NDcuMDUuNTguMTUyYS40OS40OSAwIDAgMSAuMjAxLjQxMy41NC41NCAwIDAgMS0uMTU5LjM5M2MtLjEwNS4xMDgtLjI2Ni4xNjItLjQ4LjE2MmgtMy41OTRjLS4yNDUgMC0uNDM1LS4wNjYtLjU3Mi0uMTk3YS42MjEuNjIxIDAgMCAxLS4yMDUtLjQ2M2MwLS4xMTQuMDQ0LS4yNjUuMTMyLS40NTNhMS42MiAxLjYyIDAgMCAxIC4yODgtLjQ0NGMuNDMzLS40MzYuODI0LS44MSAxLjE3Mi0xLjEyMi4zNDgtLjMxMi41OTctLjUxNy43NDctLjYxNS4yNjctLjE4My40OS0uMzY4LjY2Ny0uNTUzLjE3Ny0uMTg1LjMxMi0uMzc1LjQwNS0uNTcuMDkzLS4xOTQuMTM5LS4zODQuMTM5LS41N2ExLjAwOCAxLjAwOCAwIDAgMC0uNTU0LS45MTcgMS4xOTcgMS4xOTcgMCAwIDAtLjU2LS4xMzNjLS40MjYgMC0uNzYxLjE4Mi0xLjAwNS41NDZhMi4zMzIgMi4zMzIgMCAwIDAtLjE2NC4zOSAxLjYwOSAxLjYwOSAwIDAgMS0uMjU4LjQ4OGMtLjA5Ni4xMTQtLjIzNy4xNy0uNDIzLjE3YS41NTguNTU4IDAgMCAxLS40MDUtLjE1Ni41NjguNTY4IDAgMCAxLS4xNjEtLjQyN2MwLS4yMTguMDUtLjQ0Ni4xNTEtLjY4My4xMDEtLjIzOC4yNTItLjQ1My40NTItLjY0NnMuNDU0LS4zNDkuNzYyLS40NjdhMi45OTggMi45OTggMCAwIDEgMS4wODEtLjE3OGMuNDk4IDAgLjkyMy4wNzYgMS4yNzQuMjI4YTEuOTE2IDEuOTE2IDAgMCAxIDEuMDA0IDEuMDMyIDEuOTg0IDEuOTg0IDAgMCAxLS4xNTYgMS43OTRjLS4yLjMyLS40MDUuNTcyLS42MTMuNzU0LS4yMDguMTgyLS41NTguNDY4LTEuMDQ4Ljg1Ny0uNDkuMzktLjgyNi42OTEtMS4wMDguOTA2YTIuNzAzIDIuNzAzIDAgMCAwLS4yNC4zMDl6TTcuMDMgMTAuMzQ5bDMuODE4LTMuODE5YS44LjggMCAxIDEgMS4xMzIgMS4xMzJMOC4xNiAxMS40OGwzLjgxOSAzLjgxOGEuOC44IDAgMSAxLTEuMTMyIDEuMTMyTDcuMDMgMTIuNjFsLTMuODE4IDMuODJhLjguOCAwIDEgMS0xLjEzMi0xLjEzMkw1LjkgMTEuNDggMi4wOCA3LjY2MkEuOC44IDAgMSAxIDMuMjEyIDYuNTNsMy44MTggMy44MnpcIi8+PC9zdmc+JztcclxuICAgICAgICBjb25zdCBEUCA9IFwic3VwZXJzY3JpcHRcIjtcclxuXHJcbiAgICAgICAgY2xhc3MgalAgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC50O1xyXG4gICAgICAgICAgICAgICAgdC51aS5jb21wb25lbnRGYWN0b3J5LmFkZChEUCwgaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuY29tbWFuZHMuZ2V0KERQKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gbmV3IGhiKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG8uc2V0KHtsYWJlbDogZShcImptXCIpLCBpY29uOiBGUCwgdG9vbHRpcDogdHJ1ZSwgaXNUb2dnbGVhYmxlOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgby5iaW5kKFwiaXNPblwiLCBcImlzRW5hYmxlZFwiKS50byhuLCBcInZhbHVlXCIsIFwiaXNFbmFibGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8obywgXCJleGVjdXRlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlKERQKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBIUCBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCByZXF1aXJlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbTFAsIGpQXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJTdXBlcnNjcmlwdFwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFdQKHQsIGUpIHtcclxuICAgICAgICAgICAgbGV0IGkgPSBlLnBhcmVudDtcclxuICAgICAgICAgICAgd2hpbGUgKGkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpLm5hbWUgPT09IHQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaSA9IGkucGFyZW50XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHFQKHQsIGUsIGksIG4sIG8gPSAxKSB7XHJcbiAgICAgICAgICAgIGlmIChlID4gbykge1xyXG4gICAgICAgICAgICAgICAgbi5zZXRBdHRyaWJ1dGUodCwgZSwgaSlcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG4ucmVtb3ZlQXR0cmlidXRlKHQsIGkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFVQKHQsIGUsIGkgPSB7fSkge1xyXG4gICAgICAgICAgICBjb25zdCBuID0gdC5jcmVhdGVFbGVtZW50KFwidGFibGVDZWxsXCIsIGkpO1xyXG4gICAgICAgICAgICB0Lmluc2VydEVsZW1lbnQoXCJwYXJhZ3JhcGhcIiwgbik7XHJcbiAgICAgICAgICAgIHQuaW5zZXJ0KG4sIGUpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiAkUCh0KSB7XHJcbiAgICAgICAgICAgIGlmICghdCB8fCAhY3QodCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3Qge3RvcDogZSwgcmlnaHQ6IGksIGJvdHRvbTogbiwgbGVmdDogb30gPSB0O1xyXG4gICAgICAgICAgICBpZiAoZSA9PSBpICYmIGkgPT0gbiAmJiBuID09IG8pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEdQKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHBhcnNlRmxvYXQodCk7XHJcbiAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4oaSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKFN0cmluZyhpKSAhPT0gU3RyaW5nKHQpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBgJHtpfSR7ZX1gXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBLUCh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBlLnBhcmVudC5wYXJlbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBwYXJzZUludChpLmdldEF0dHJpYnV0ZShcImhlYWRpbmdDb2x1bW5zXCIpIHx8IDApO1xyXG4gICAgICAgICAgICBjb25zdCB7Y29sdW1uOiBvfSA9IHQuZ2V0Q2VsbExvY2F0aW9uKGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gISFuICYmIG8gPCBuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBKUCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgdC5vbihcImVsZW1lbnQ6dGFibGVcIiwgKHQsIGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gZS52aWV3SXRlbTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWkuY29uc3VtYWJsZS50ZXN0KG4sIHtuYW1lOiB0cnVlfSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHtyb3dzOiBvLCBoZWFkaW5nUm93czogciwgaGVhZGluZ0NvbHVtbnM6IHN9ID0gUVAobik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuaGVhZGluZ0NvbHVtbnMgPSBzXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGEuaGVhZGluZ1Jvd3MgPSByXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBpLndyaXRlci5jcmVhdGVFbGVtZW50KFwidGFibGVcIiwgYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbCA9IGkuc3BsaXRUb0FsbG93ZWRQYXJlbnQoYywgZS5tb2RlbEN1cnNvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpLndyaXRlci5pbnNlcnQoYywgbC5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5jb25zdW1hYmxlLmNvbnN1bWUobiwge25hbWU6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoby5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgby5mb3JFYWNoKHQgPT4gaS5jb252ZXJ0SXRlbSh0LCBpLndyaXRlci5jcmVhdGVQb3NpdGlvbkF0KGMsIFwiZW5kXCIpKSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gaS53cml0ZXIuY3JlYXRlRWxlbWVudChcInRhYmxlUm93XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLndyaXRlci5pbnNlcnQodCwgaS53cml0ZXIuY3JlYXRlUG9zaXRpb25BdChjLCBcImVuZFwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVQKGkud3JpdGVyLCBpLndyaXRlci5jcmVhdGVQb3NpdGlvbkF0KHQsIFwiZW5kXCIpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlLm1vZGVsUmFuZ2UgPSBpLndyaXRlci5jcmVhdGVSYW5nZShpLndyaXRlci5jcmVhdGVQb3NpdGlvbkJlZm9yZShjKSwgaS53cml0ZXIuY3JlYXRlUG9zaXRpb25BZnRlcihjKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGwuY3Vyc29yUGFyZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUubW9kZWxDdXJzb3IgPSBpLndyaXRlci5jcmVhdGVQb3NpdGlvbkF0KGwuY3Vyc29yUGFyZW50LCAwKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUubW9kZWxDdXJzb3IgPSBlLm1vZGVsUmFuZ2UuZW5kXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWVAodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBlLm9uKGBlbGVtZW50OiR7dH1gLCAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLnZpZXdJdGVtO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghaS5jb25zdW1hYmxlLnRlc3Qobiwge25hbWU6IHRydWV9KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IGkud3JpdGVyLmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZUNlbGxcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IGkuc3BsaXRUb0FsbG93ZWRQYXJlbnQobywgZS5tb2RlbEN1cnNvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpLndyaXRlci5pbnNlcnQobywgci5wb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5jb25zdW1hYmxlLmNvbnN1bWUobiwge25hbWU6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gaS53cml0ZXIuY3JlYXRlUG9zaXRpb25BdChvLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBpLmNvbnZlcnRDaGlsZHJlbihuLCBzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW8uY2hpbGRDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLndyaXRlci5pbnNlcnRFbGVtZW50KFwicGFyYWdyYXBoXCIsIHMpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGUubW9kZWxSYW5nZSA9IGkud3JpdGVyLmNyZWF0ZVJhbmdlKGkud3JpdGVyLmNyZWF0ZVBvc2l0aW9uQmVmb3JlKG8pLCBpLndyaXRlci5jcmVhdGVQb3NpdGlvbkFmdGVyKG8pKTtcclxuICAgICAgICAgICAgICAgICAgICBlLm1vZGVsQ3Vyc29yID0gZS5tb2RlbFJhbmdlLmVuZFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gUVAodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0ge2hlYWRpbmdSb3dzOiAwLCBoZWFkaW5nQ29sdW1uczogMH07XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBbXTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IFtdO1xyXG4gICAgICAgICAgICBsZXQgbztcclxuICAgICAgICAgICAgZm9yIChjb25zdCByIG9mIEFycmF5LmZyb20odC5nZXRDaGlsZHJlbigpKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHIubmFtZSA9PT0gXCJ0Ym9keVwiIHx8IHIubmFtZSA9PT0gXCJ0aGVhZFwiIHx8IHIubmFtZSA9PT0gXCJ0Zm9vdFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIubmFtZSA9PT0gXCJ0aGVhZFwiICYmICFvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8gPSByXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBBcnJheS5mcm9tKHIuZ2V0Q2hpbGRyZW4oKSkuZmlsdGVyKHQgPT4gdC5pcyhcImVsZW1lbnRcIiwgXCJ0clwiKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCByIG9mIHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIucGFyZW50Lm5hbWUgPT09IFwidGhlYWRcIiAmJiByLnBhcmVudCA9PT0gbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5oZWFkaW5nUm93cysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5wdXNoKHIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLnB1c2gocik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gWFAociwgZSwgbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA+IGUuaGVhZGluZ0NvbHVtbnMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLmhlYWRpbmdDb2x1bW5zID0gdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGUucm93cyA9IFsuLi5pLCAuLi5uXTtcclxuICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFhQKHQpIHtcclxuICAgICAgICAgICAgbGV0IGUgPSAwO1xyXG4gICAgICAgICAgICBsZXQgaSA9IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBBcnJheS5mcm9tKHQuZ2V0Q2hpbGRyZW4oKSkuZmlsdGVyKHQgPT4gdC5uYW1lID09PSBcInRoXCIgfHwgdC5uYW1lID09PSBcInRkXCIpO1xyXG4gICAgICAgICAgICB3aGlsZSAoaSA8IG4ubGVuZ3RoICYmIG5baV0ubmFtZSA9PT0gXCJ0aFwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gbltpXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBwYXJzZUludCh0LmdldEF0dHJpYnV0ZShcImNvbHNwYW5cIikgfHwgMSk7XHJcbiAgICAgICAgICAgICAgICBlID0gZSArIG87XHJcbiAgICAgICAgICAgICAgICBpKytcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgWlAge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlID0ge30pIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGFibGUgPSB0O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGFydFJvdyA9IGUuc3RhcnRSb3cgfHwgMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuZW5kUm93ID0gdHlwZW9mIGUuZW5kUm93ID09IFwibnVtYmVyXCIgPyBlLmVuZFJvdyA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5jbHVkZVNwYW5uZWQgPSAhIWUuaW5jbHVkZVNwYW5uZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbHVtbiA9IHR5cGVvZiBlLmNvbHVtbiA9PSBcIm51bWJlclwiID8gZS5jb2x1bW4gOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9za2lwUm93cyA9IG5ldyBTZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yb3cgPSAwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY29sdW1uID0gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NlbGxJbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zcGFubmVkQ2VsbHMgPSBuZXcgTWFwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbmV4dENlbGxBdENvbHVtbiA9IC0xXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgbmV4dCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnRhYmxlLmdldENoaWxkKHRoaXMuX3Jvdyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQgfHwgdGhpcy5faXNPdmVyRW5kUm93KCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge2RvbmU6IHRydWV9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBsZXQgZSwgaSwgbjtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc1NwYW5uZWQodGhpcy5fcm93LCB0aGlzLl9jb2x1bW4pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IHRoaXMuX2dldFNwYW5uZWQodGhpcy5fcm93LCB0aGlzLl9jb2x1bW4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSAhdGhpcy5pbmNsdWRlU3Bhbm5lZCB8fCB0aGlzLl9zaG91bGRTa2lwUm93KCkgfHwgdGhpcy5fc2hvdWxkU2tpcENvbHVtbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIG4gPSB0aGlzLl9mb3JtYXRPdXRWYWx1ZShlLCB0aGlzLl9jb2x1bW4sIHRydWUpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSB0LmdldENoaWxkKHRoaXMuX2NlbGxJbmRleCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JvdysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jb2x1bW4gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9jZWxsSW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9uZXh0Q2VsbEF0Q29sdW1uID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLm5leHQoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gcGFyc2VJbnQoZS5nZXRBdHRyaWJ1dGUoXCJjb2xzcGFuXCIpIHx8IDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBwYXJzZUludChlLmdldEF0dHJpYnV0ZShcInJvd3NwYW5cIikgfHwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8gPiAxIHx8IHIgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlY29yZFNwYW5zKHRoaXMuX3JvdywgdGhpcy5fY29sdW1uLCByLCBvLCBlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9uZXh0Q2VsbEF0Q29sdW1uID0gdGhpcy5fY29sdW1uICsgbztcclxuICAgICAgICAgICAgICAgICAgICBpID0gdGhpcy5fc2hvdWxkU2tpcFJvdygpIHx8IHRoaXMuX3Nob3VsZFNraXBDb2x1bW4oKTtcclxuICAgICAgICAgICAgICAgICAgICBuID0gdGhpcy5fZm9ybWF0T3V0VmFsdWUoZSwgdGhpcy5fY29sdW1uLCBmYWxzZSwgciwgbylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMuX2NvbHVtbisrO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2NvbHVtbiA9PSB0aGlzLl9uZXh0Q2VsbEF0Q29sdW1uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2VsbEluZGV4KytcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBpID8gdGhpcy5uZXh0KCkgOiBuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNraXBSb3codCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc2tpcFJvd3MuYWRkKHQpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9pc092ZXJFbmRSb3coKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbmRSb3cgIT09IHVuZGVmaW5lZCAmJiB0aGlzLl9yb3cgPiB0aGlzLmVuZFJvd1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZm9ybWF0T3V0VmFsdWUodCwgZSwgaSwgbiA9IDEsIG8gPSAxKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbGw6IHQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJvdzogdGhpcy5fcm93LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2x1bW46IGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU3Bhbm5lZDogaSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93c3BhbjogbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sc3BhbjogbyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VsbEluZGV4OiB0aGlzLl9jZWxsSW5kZXhcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9zaG91bGRTa2lwUm93KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuX3JvdyA8IHRoaXMuc3RhcnRSb3c7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5fc2tpcFJvd3MuaGFzKHRoaXMuX3Jvdyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdCB8fCBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9zaG91bGRTa2lwQ29sdW1uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY29sdW1uID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbHVtbiAhPSB0aGlzLl9jb2x1bW5cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2lzU3Bhbm5lZCh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuX3NwYW5uZWRDZWxscy5oYXModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9zcGFubmVkQ2VsbHMuZ2V0KHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGkuaGFzKGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRTcGFubmVkKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9zcGFubmVkQ2VsbHMuZ2V0KHQpLmdldChlKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfcmVjb3JkU3BhbnModCwgZSwgaSwgbiwgbykge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IGUgKyAxOyBpIDw9IGUgKyBuIC0gMTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFya1NwYW5uZWRDZWxsKHQsIGksIG8pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCByID0gdCArIDE7IHIgPCB0ICsgaTsgcisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdCA9IGU7IHQgPD0gZSArIG4gLSAxOyB0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFya1NwYW5uZWRDZWxsKHIsIHQsIG8pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfbWFya1NwYW5uZWRDZWxsKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5fc3Bhbm5lZENlbGxzLmhhcyh0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NwYW5uZWRDZWxscy5zZXQodCwgbmV3IE1hcClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLl9zcGFubmVkQ2VsbHMuZ2V0KHQpO1xyXG4gICAgICAgICAgICAgICAgbi5zZXQoZSwgaSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdFModCwgZSkge1xyXG4gICAgICAgICAgICBlLnNldEN1c3RvbVByb3BlcnR5KFwidGFibGVcIiwgdHJ1ZSwgdCk7XHJcbiAgICAgICAgICAgIHJldHVybiBYXyh0LCBlLCB7aGFzU2VsZWN0aW9uSGFuZGxlOiB0cnVlfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGVTKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICEhdC5nZXRDdXN0b21Qcm9wZXJ0eShcInRhYmxlXCIpICYmIFFfKHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBpUyh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmdldFNlbGVjdGVkRWxlbWVudCgpO1xyXG4gICAgICAgICAgICBpZiAoZSAmJiBlUyhlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gblModCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gV1AoXCJ0YWJsZVwiLCB0LmdldEZpcnN0UG9zaXRpb24oKSk7XHJcbiAgICAgICAgICAgIGlmIChlICYmIGVTKGUucGFyZW50KSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUucGFyZW50XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9TKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgYVModC5nZXRSYW5nZXMoKSkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBpLmdldENvbnRhaW5lZEVsZW1lbnQoKTtcclxuICAgICAgICAgICAgICAgIGlmICh0ICYmIHQuaXMoXCJ0YWJsZUNlbGxcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnB1c2godClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gclModCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gW107XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiB0LmdldFJhbmdlcygpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gV1AoXCJ0YWJsZUNlbGxcIiwgaS5zdGFydCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGUucHVzaCh0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzUyh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSBvUyh0KTtcclxuICAgICAgICAgICAgaWYgKGUubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByUyh0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYVModCkge1xyXG4gICAgICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0KS5zb3J0KGNTKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY1ModCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5zdGFydDtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGUuc3RhcnQ7XHJcbiAgICAgICAgICAgIGlmIChpLmlzRXF1YWwobikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAwXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGkuaXNCZWZvcmUobikgPyAtMSA6IDFcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGxTKHQgPSB7fSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZSA9PiBlLm9uKFwiaW5zZXJ0OnRhYmxlXCIsIChlLCBpLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gaS5pdGVtO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFuLmNvbnN1bWFibGUuY29uc3VtZShvLCBcImluc2VydFwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbi5jb25zdW1hYmxlLmNvbnN1bWUobywgXCJhdHRyaWJ1dGU6aGVhZGluZ1Jvd3M6dGFibGVcIik7XHJcbiAgICAgICAgICAgICAgICBuLmNvbnN1bWFibGUuY29uc3VtZShvLCBcImF0dHJpYnV0ZTpoZWFkaW5nQ29sdW1uczp0YWJsZVwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0ICYmIHQuYXNXaWRnZXQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gbi53cml0ZXIuY3JlYXRlQ29udGFpbmVyRWxlbWVudChcImZpZ3VyZVwiLCB7Y2xhc3M6IFwidGFibGVcIn0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IG4ud3JpdGVyLmNyZWF0ZUNvbnRhaW5lckVsZW1lbnQoXCJ0YWJsZVwiKTtcclxuICAgICAgICAgICAgICAgIG4ud3JpdGVyLmluc2VydChuLndyaXRlci5jcmVhdGVQb3NpdGlvbkF0KHMsIDApLCBhKTtcclxuICAgICAgICAgICAgICAgIGxldCBjO1xyXG4gICAgICAgICAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBjID0gdFMocywgbi53cml0ZXIpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsID0gbmV3IFpQKG8pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBoZWFkaW5nUm93czogby5nZXRBdHRyaWJ1dGUoXCJoZWFkaW5nUm93c1wiKSB8fCAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRpbmdDb2x1bW5zOiBvLmdldEF0dHJpYnV0ZShcImhlYWRpbmdDb2x1bW5zXCIpIHx8IDBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1ID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qge3JvdzogaSwgY2VsbDogcn0gPSBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB2UyhfUyhpLCBkKSwgYSwgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IG8uZ2V0Q2hpbGQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbCA9IHUuZ2V0KGkpIHx8IHdTKGMsIGksIHMsIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHUuc2V0KGksIGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIG4uY29uc3VtYWJsZS5jb25zdW1lKHIsIFwiaW5zZXJ0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGggPSBuLndyaXRlci5jcmVhdGVQb3NpdGlvbkF0KGwsIFwiZW5kXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJTKGUsIGQsIGgsIG4sIHQpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCBoID0gbi5tYXBwZXIudG9WaWV3UG9zaXRpb24oaS5yYW5nZS5zdGFydCk7XHJcbiAgICAgICAgICAgICAgICBuLm1hcHBlci5iaW5kRWxlbWVudHMobywgciA/IGMgOiBzKTtcclxuICAgICAgICAgICAgICAgIG4ud3JpdGVyLmluc2VydChoLCByID8gYyA6IHMpXHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkUyh0ID0ge30pIHtcclxuICAgICAgICAgICAgcmV0dXJuIGUgPT4gZS5vbihcImluc2VydDp0YWJsZVJvd1wiLCAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGkuaXRlbTtcclxuICAgICAgICAgICAgICAgIGlmICghbi5jb25zdW1hYmxlLmNvbnN1bWUobywgXCJpbnNlcnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBvLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuLm1hcHBlci50b1ZpZXdFbGVtZW50KHIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IFRTKHMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHIuZ2V0Q2hpbGRJbmRleChvKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGwgPSBuZXcgWlAociwge3N0YXJ0Um93OiBjLCBlbmRSb3c6IGN9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGluZ1Jvd3M6IHIuZ2V0QXR0cmlidXRlKFwiaGVhZGluZ1Jvd3NcIikgfHwgMCxcclxuICAgICAgICAgICAgICAgICAgICBoZWFkaW5nQ29sdW1uczogci5nZXRBdHRyaWJ1dGUoXCJoZWFkaW5nQ29sdW1uc1wiKSB8fCAwXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdSA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB2UyhfUyhjLCBkKSwgYSwgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IHUuZ2V0KGMpIHx8IHdTKG8sIGMsIGksIG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIHUuc2V0KGMsIHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIG4uY29uc3VtYWJsZS5jb25zdW1lKGUuY2VsbCwgXCJpbnNlcnRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG4ud3JpdGVyLmNyZWF0ZVBvc2l0aW9uQXQociwgXCJlbmRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgYlMoZSwgZCwgcywgbiwgdClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHVTKHQgPSB7fSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZSA9PiBlLm9uKFwiaW5zZXJ0OnRhYmxlQ2VsbFwiLCAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGkuaXRlbTtcclxuICAgICAgICAgICAgICAgIGlmICghbi5jb25zdW1hYmxlLmNvbnN1bWUobywgXCJpbnNlcnRcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBvLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSByLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBzLmdldENoaWxkSW5kZXgocik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gbmV3IFpQKHMsIHtzdGFydFJvdzogYSwgZW5kUm93OiBhfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRpbmdSb3dzOiBzLmdldEF0dHJpYnV0ZShcImhlYWRpbmdSb3dzXCIpIHx8IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGluZ0NvbHVtbnM6IHMuZ2V0QXR0cmlidXRlKFwiaGVhZGluZ0NvbHVtbnNcIikgfHwgMFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUuY2VsbCA9PT0gbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gbi5tYXBwZXIudG9WaWV3RWxlbWVudChyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG4ud3JpdGVyLmNyZWF0ZVBvc2l0aW9uQXQoaSwgci5nZXRDaGlsZEluZGV4KG8pKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYlMoZSwgbCwgcywgbiwgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGhTKHQgPSB7fSkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gISF0LmFzV2lkZ2V0O1xyXG4gICAgICAgICAgICByZXR1cm4gdCA9PiB0Lm9uKFwiYXR0cmlidXRlOmhlYWRpbmdSb3dzOnRhYmxlXCIsICh0LCBpLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gaS5pdGVtO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFuLmNvbnN1bWFibGUuY29uc3VtZShpLml0ZW0sIHQubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuLm1hcHBlci50b1ZpZXdFbGVtZW50KG8pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IFRTKHIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IGkuYXR0cmlidXRlT2xkVmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gaS5hdHRyaWJ1dGVOZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChjID4gYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBBcnJheS5mcm9tKG8uZ2V0Q2hpbGRyZW4oKSkuZmlsdGVyKCh7aW5kZXg6IHR9KSA9PiBsKHQsIGEgLSAxLCBjKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHZTKFwidGhlYWRcIiwgcywgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgQVModCwgaSwgbiwgXCJlbmRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGkuZ2V0Q2hpbGRyZW4oKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbVModCwgXCJ0aFwiLCBuLCBlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIENTKFwidGJvZHlcIiwgcywgbilcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IEFycmF5LmZyb20oby5nZXRDaGlsZHJlbigpKS5maWx0ZXIoKHtpbmRleDogdH0pID0+IGwodCwgYyAtIDEsIGEpKS5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHZTKFwidGJvZHlcIiwgcywgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgQVModCwgaSwgbiwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IG5ldyBaUChvLCB7c3RhcnRSb3c6IGMgPyBjIC0gMSA6IGMsIGVuZFJvdzogYSAtIDF9KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkaW5nUm93czogby5nZXRBdHRyaWJ1dGUoXCJoZWFkaW5nUm93c1wiKSB8fCAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkaW5nQ29sdW1uczogby5nZXRBdHRyaWJ1dGUoXCJoZWFkaW5nQ29sdW1uc1wiKSB8fCAwXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwUyh0LCBkLCBuLCBlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBDUyhcInRoZWFkXCIsIHMsIG4pXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gbCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHQgPiBlICYmIHQgPCBpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBmUyh0ID0ge30pIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9ICEhdC5hc1dpZGdldDtcclxuICAgICAgICAgICAgcmV0dXJuIHQgPT4gdC5vbihcImF0dHJpYnV0ZTpoZWFkaW5nQ29sdW1uczp0YWJsZVwiLCAodCwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGkuaXRlbTtcclxuICAgICAgICAgICAgICAgIGlmICghbi5jb25zdW1hYmxlLmNvbnN1bWUoaS5pdGVtLCB0Lm5hbWUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGhlYWRpbmdSb3dzOiBvLmdldEF0dHJpYnV0ZShcImhlYWRpbmdSb3dzXCIpIHx8IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVhZGluZ0NvbHVtbnM6IG8uZ2V0QXR0cmlidXRlKFwiaGVhZGluZ0NvbHVtbnNcIikgfHwgMFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBpLmF0dHJpYnV0ZU9sZFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IGkuYXR0cmlidXRlTmV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gKHMgPiBhID8gcyA6IGEpIC0gMTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBuZXcgWlAobykpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5jb2x1bW4gPiBjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHBTKHQsIHIsIG4sIGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnUygpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQgPT4gdC5vbihcInJlbW92ZTp0YWJsZVJvd1wiLCAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdC5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS53cml0ZXI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gaS5tYXBwZXI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gby50b1ZpZXdQb3NpdGlvbihlLnBvc2l0aW9uKS5nZXRMYXN0TWF0Y2hpbmdQb3NpdGlvbih0ID0+ICF0Lml0ZW0uaXMoXCJ0clwiKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gci5ub2RlQWZ0ZXI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gcy5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gbi5jcmVhdGVSYW5nZU9uKHMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbCA9IG4ucmVtb3ZlKGMpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG4uY3JlYXRlUmFuZ2VJbihsKS5nZXRJdGVtcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgby51bmJpbmRWaWV3RWxlbWVudCh0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFhLmNoaWxkQ291bnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBuLnJlbW92ZShuLmNyZWF0ZVJhbmdlT24oYSkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJoaWdoZXJcIn0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBtUyh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBpLndyaXRlcjtcclxuICAgICAgICAgICAgY29uc3QgciA9IGkubWFwcGVyLnRvVmlld0VsZW1lbnQodCk7XHJcbiAgICAgICAgICAgIGlmICghcikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IHM7XHJcbiAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gby5jcmVhdGVFZGl0YWJsZUVsZW1lbnQoZSwgci5nZXRBdHRyaWJ1dGVzKCkpO1xyXG4gICAgICAgICAgICAgICAgcyA9IGl2KHQsIG8pO1xyXG4gICAgICAgICAgICAgICAgby5pbnNlcnQoby5jcmVhdGVQb3NpdGlvbkFmdGVyKHIpLCBzKTtcclxuICAgICAgICAgICAgICAgIG8ubW92ZShvLmNyZWF0ZVJhbmdlSW4ociksIG8uY3JlYXRlUG9zaXRpb25BdChzLCAwKSk7XHJcbiAgICAgICAgICAgICAgICBvLnJlbW92ZShvLmNyZWF0ZVJhbmdlT24ocikpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBzID0gby5yZW5hbWUoZSwgcilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpLm1hcHBlci51bmJpbmRWaWV3RWxlbWVudChyKTtcclxuICAgICAgICAgICAgaS5tYXBwZXIuYmluZEVsZW1lbnRzKHQsIHMpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBwUyh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHtjZWxsOiBvfSA9IHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBrUyh0LCBlKTtcclxuICAgICAgICAgICAgY29uc3QgcyA9IGkubWFwcGVyLnRvVmlld0VsZW1lbnQobyk7XHJcbiAgICAgICAgICAgIGlmIChzICYmIHMubmFtZSAhPT0gcikge1xyXG4gICAgICAgICAgICAgICAgbVMobywgciwgaSwgbilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gYlModCwgZSwgaSwgbiwgbykge1xyXG4gICAgICAgICAgICBjb25zdCByID0gbyAmJiBvLmFzV2lkZ2V0O1xyXG4gICAgICAgICAgICBjb25zdCBzID0ga1ModCwgZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGEgPSByID8gaXYobi53cml0ZXIuY3JlYXRlRWRpdGFibGVFbGVtZW50KHMpLCBuLndyaXRlcikgOiBuLndyaXRlci5jcmVhdGVDb250YWluZXJFbGVtZW50KHMpO1xyXG4gICAgICAgICAgICBjb25zdCBjID0gdC5jZWxsO1xyXG4gICAgICAgICAgICBjb25zdCBsID0gYy5nZXRDaGlsZCgwKTtcclxuICAgICAgICAgICAgY29uc3QgZCA9IGMuY2hpbGRDb3VudCA9PT0gMSAmJiBsLm5hbWUgPT09IFwicGFyYWdyYXBoXCI7XHJcbiAgICAgICAgICAgIG4ud3JpdGVyLmluc2VydChpLCBhKTtcclxuICAgICAgICAgICAgaWYgKGQgJiYgIVBTKGwpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gYy5nZXRDaGlsZCgwKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuLndyaXRlci5jcmVhdGVQb3NpdGlvbkF0KGEsIFwiZW5kXCIpO1xyXG4gICAgICAgICAgICAgICAgbi5jb25zdW1hYmxlLmNvbnN1bWUodCwgXCJpbnNlcnRcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoby5hc1dpZGdldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuLndyaXRlci5jcmVhdGVDb250YWluZXJFbGVtZW50KFwic3BhblwiLCB7c3R5bGU6IFwiZGlzcGxheTppbmxpbmUtYmxvY2tcIn0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG4ubWFwcGVyLmJpbmRFbGVtZW50cyh0LCBpKTtcclxuICAgICAgICAgICAgICAgICAgICBuLndyaXRlci5pbnNlcnQoZSwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5tYXBwZXIuYmluZEVsZW1lbnRzKGMsIGEpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG4ubWFwcGVyLmJpbmRFbGVtZW50cyhjLCBhKTtcclxuICAgICAgICAgICAgICAgICAgICBuLm1hcHBlci5iaW5kRWxlbWVudHModCwgYSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG4ubWFwcGVyLmJpbmRFbGVtZW50cyhjLCBhKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB3Uyh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIG4uY29uc3VtYWJsZS5jb25zdW1lKHQsIFwiaW5zZXJ0XCIpO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gbi53cml0ZXIuY3JlYXRlQ29udGFpbmVyRWxlbWVudChcInRyXCIpO1xyXG4gICAgICAgICAgICBuLm1hcHBlci5iaW5kRWxlbWVudHModCwgbyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSB0LnBhcmVudC5nZXRBdHRyaWJ1dGUoXCJoZWFkaW5nUm93c1wiKSB8fCAwO1xyXG4gICAgICAgICAgICBjb25zdCBzID0gciA+IDAgJiYgZSA+PSByID8gZSAtIHIgOiBlO1xyXG4gICAgICAgICAgICBjb25zdCBhID0gbi53cml0ZXIuY3JlYXRlUG9zaXRpb25BdChpLCBzKTtcclxuICAgICAgICAgICAgbi53cml0ZXIuaW5zZXJ0KGEsIG8pO1xyXG4gICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24ga1ModCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCB7cm93OiBpLCBjb2x1bW46IG59ID0gdDtcclxuICAgICAgICAgICAgY29uc3Qge2hlYWRpbmdDb2x1bW5zOiBvLCBoZWFkaW5nUm93czogcn0gPSBlO1xyXG4gICAgICAgICAgICBjb25zdCBzID0gciAmJiByID4gaTtcclxuICAgICAgICAgICAgaWYgKHMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcInRoXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBhID0gbyAmJiBvID4gbjtcclxuICAgICAgICAgICAgcmV0dXJuIGEgPyBcInRoXCIgOiBcInRkXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIF9TKHQsIGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQgPCBlLmhlYWRpbmdSb3dzID8gXCJ0aGVhZFwiIDogXCJ0Ym9keVwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB2Uyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSB5Uyh0LCBlKTtcclxuICAgICAgICAgICAgcmV0dXJuIG4gPyBuIDogeFModCwgZSwgaSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHlTKHQsIGUpIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBpIG9mIGUuZ2V0Q2hpbGRyZW4oKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkubmFtZSA9PSB0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geFModCwgZSwgaSkge1xyXG4gICAgICAgICAgICBjb25zdCBuID0gaS53cml0ZXIuY3JlYXRlQ29udGFpbmVyRWxlbWVudCh0KTtcclxuICAgICAgICAgICAgY29uc3QgbyA9IGkud3JpdGVyLmNyZWF0ZVBvc2l0aW9uQXQoZSwgdCA9PSBcInRib2R5XCIgPyBcImVuZFwiIDogMCk7XHJcbiAgICAgICAgICAgIGkud3JpdGVyLmluc2VydChvLCBuKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIENTKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgY29uc3QgbiA9IHlTKHQsIGUpO1xyXG4gICAgICAgICAgICBpZiAobiAmJiBuLmNoaWxkQ291bnQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGkud3JpdGVyLnJlbW92ZShpLndyaXRlci5jcmVhdGVSYW5nZU9uKG4pKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBBUyh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbyBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gaS5tYXBwZXIudG9WaWV3RWxlbWVudChvKTtcclxuICAgICAgICAgICAgICAgIGlmICh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS53cml0ZXIubW92ZShpLndyaXRlci5jcmVhdGVSYW5nZU9uKHQpLCBpLndyaXRlci5jcmVhdGVQb3NpdGlvbkF0KGUsIG4pKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBUUyh0KSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0LmdldENoaWxkcmVuKCkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlLm5hbWUgPT09IFwidGFibGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFBTKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuICEhWy4uLnQuZ2V0QXR0cmlidXRlS2V5cygpXS5sZW5ndGhcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIFNTIGV4dGVuZHMgancge1xyXG4gICAgICAgICAgICByZWZyZXNoKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZG9jdW1lbnQuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuc2NoZW1hO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IEVTKGUuZ2V0Rmlyc3RQb3NpdGlvbigpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVkID0gaS5jaGVja0NoaWxkKG4sIFwidGFibGVcIilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXhlY3V0ZSh0ID0ge30pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmRvY3VtZW50LnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLmVkaXRvci5wbHVnaW5zLmdldChcIlRhYmxlVXRpbHNcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gcGFyc2VJbnQodC5yb3dzKSB8fCAyO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHBhcnNlSW50KHQuY29sdW1ucykgfHwgMjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBudihpLCBlKTtcclxuICAgICAgICAgICAgICAgIGUuY2hhbmdlKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuLmNyZWF0ZVRhYmxlKHQsIG8sIHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUuaW5zZXJ0Q29udGVudChpLCBzKTtcclxuICAgICAgICAgICAgICAgICAgICB0LnNldFNlbGVjdGlvbih0LmNyZWF0ZVBvc2l0aW9uQXQoaS5nZXROb2RlQnlQYXRoKFswLCAwLCAwXSksIDApKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRVModCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5wYXJlbnQ7XHJcbiAgICAgICAgICAgIHJldHVybiBlID09PSBlLnJvb3QgPyBlIDogZS5wYXJlbnRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIFJTIGV4dGVuZHMgancge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlID0ge30pIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcmRlciA9IGUub3JkZXIgfHwgXCJiZWxvd1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFdQKFwidGFibGVcIiwgdC5nZXRGaXJzdFBvc2l0aW9uKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSAhIWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXhlY3V0ZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnBsdWdpbnMuZ2V0KFwiVGFibGVVdGlsc1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLm9yZGVyID09PSBcImFib3ZlXCI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gbiA/IGUuZ2V0Rmlyc3RQb3NpdGlvbigpIDogZS5nZXRMYXN0UG9zaXRpb24oKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuID8gZS5nZXRGaXJzdFJhbmdlKCkgOiBlLmdldExhc3RSYW5nZSgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IHIuZ2V0Q29udGFpbmVkRWxlbWVudCgpIHx8IFdQKFwidGFibGVDZWxsXCIsIG8pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IHMucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IGEucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbCA9IGMuZ2V0Q2hpbGRJbmRleChhKTtcclxuICAgICAgICAgICAgICAgIGkuaW5zZXJ0Um93cyhjLCB7cm93czogMSwgYXQ6IHRoaXMub3JkZXIgPT09IFwiYmVsb3dcIiA/IGwgKyAxIDogbH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIE9TIGV4dGVuZHMgancge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0LCBlID0ge30pIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcmRlciA9IGUub3JkZXIgfHwgXCJyaWdodFwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFdQKFwidGFibGVcIiwgdC5nZXRGaXJzdFBvc2l0aW9uKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSAhIWVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXhlY3V0ZSgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnBsdWdpbnMuZ2V0KFwiVGFibGVVdGlsc1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLm9yZGVyID09PSBcImxlZnRcIjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuID8gZS5nZXRGaXJzdFBvc2l0aW9uKCkgOiBlLmdldExhc3RQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG4gPyBlLmdldEZpcnN0UmFuZ2UoKSA6IGUuZ2V0TGFzdFJhbmdlKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gci5nZXRDb250YWluZWRFbGVtZW50KCkgfHwgV1AoXCJ0YWJsZUNlbGxcIiwgbyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gcy5wYXJlbnQucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3Qge2NvbHVtbjogY30gPSBpLmdldENlbGxMb2NhdGlvbihzKTtcclxuICAgICAgICAgICAgICAgIGkuaW5zZXJ0Q29sdW1ucyhhLCB7Y29sdW1uczogMSwgYXQ6IG4gPyBjIDogYyArIDF9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBJUyBleHRlbmRzIGp3IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlyZWN0aW9uID0gZS5kaXJlY3Rpb24gfHwgXCJob3Jpem9udGFsbHlcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZWZyZXNoKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHNTKHRoaXMuZWRpdG9yLm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IHQubGVuZ3RoID09PSAxXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV4ZWN1dGUoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gc1ModGhpcy5lZGl0b3IubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uKVswXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmRpcmVjdGlvbiA9PT0gXCJob3Jpem9udGFsbHlcIjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmVkaXRvci5wbHVnaW5zLmdldChcIlRhYmxlVXRpbHNcIik7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc3BsaXRDZWxsSG9yaXpvbnRhbGx5KHQsIDIpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc3BsaXRDZWxsVmVydGljYWxseSh0LCAyKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBWUyBleHRlbmRzIGp3IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IGUuZGlyZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0hvcml6b250YWwgPSB0aGlzLmRpcmVjdGlvbiA9PSBcInJpZ2h0XCIgfHwgdGhpcy5kaXJlY3Rpb24gPT0gXCJsZWZ0XCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgcmVmcmVzaCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLl9nZXRNZXJnZWFibGVDZWxsKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVkID0gISF0XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV4ZWN1dGUoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSByUyhlLnNlbGVjdGlvbilbMF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0aGlzLmRpcmVjdGlvbjtcclxuICAgICAgICAgICAgICAgIHQuY2hhbmdlKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBvID09IFwicmlnaHRcIiB8fCBvID09IFwiZG93blwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBlID8gaSA6IG47XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IGUgPyBuIDogaTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gcy5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgelMocywgciwgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IHRoaXMuaXNIb3Jpem9udGFsID8gXCJjb2xzcGFuXCIgOiBcInJvd3NwYW5cIjtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsID0gcGFyc2VJbnQoaS5nZXRBdHRyaWJ1dGUoYykgfHwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZCA9IHBhcnNlSW50KG4uZ2V0QXR0cmlidXRlKGMpIHx8IDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKGMsIGwgKyBkLCByKTtcclxuICAgICAgICAgICAgICAgICAgICB0LnNldFNlbGVjdGlvbih0LmNyZWF0ZVJhbmdlSW4ocikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYS5jaGlsZENvdW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEJTKGEsIHQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldE1lcmdlYWJsZUNlbGwoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSByUyhlLnNlbGVjdGlvbilbMF07XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLmVkaXRvci5wbHVnaW5zLmdldChcIlRhYmxlVXRpbHNcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gdGhpcy5pc0hvcml6b250YWwgPyBOUyhpLCB0aGlzLmRpcmVjdGlvbiwgbikgOiBNUyhpLCB0aGlzLmRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW8pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLmlzSG9yaXpvbnRhbCA/IFwicm93c3BhblwiIDogXCJjb2xzcGFuXCI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gcGFyc2VJbnQoaS5nZXRBdHRyaWJ1dGUocikgfHwgMSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gcGFyc2VJbnQoby5nZXRBdHRyaWJ1dGUocikgfHwgMSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYSA9PT0gcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE5TKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgY29uc3QgbiA9IHQucGFyZW50O1xyXG4gICAgICAgICAgICBjb25zdCBvID0gbi5wYXJlbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBlID09IFwicmlnaHRcIiA/IHQubmV4dFNpYmxpbmcgOiB0LnByZXZpb3VzU2libGluZztcclxuICAgICAgICAgICAgY29uc3QgcyA9IChvLmdldEF0dHJpYnV0ZShcImhlYWRpbmdDb2x1bW5zXCIpIHx8IDApID4gMDtcclxuICAgICAgICAgICAgaWYgKCFyKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBhID0gZSA9PSBcInJpZ2h0XCIgPyB0IDogcjtcclxuICAgICAgICAgICAgY29uc3QgYyA9IGUgPT0gXCJyaWdodFwiID8gciA6IHQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHtjb2x1bW46IGx9ID0gaS5nZXRDZWxsTG9jYXRpb24oYSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHtjb2x1bW46IGR9ID0gaS5nZXRDZWxsTG9jYXRpb24oYyk7XHJcbiAgICAgICAgICAgIGNvbnN0IHUgPSBwYXJzZUludChhLmdldEF0dHJpYnV0ZShcImNvbHNwYW5cIikgfHwgMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGggPSBLUChpLCBhLCBvKTtcclxuICAgICAgICAgICAgY29uc3QgZiA9IEtQKGksIGMsIG8pO1xyXG4gICAgICAgICAgICBpZiAocyAmJiBoICE9IGYpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGcgPSBsICsgdSA9PT0gZDtcclxuICAgICAgICAgICAgcmV0dXJuIGcgPyByIDogdW5kZWZpbmVkXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBNUyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LnBhcmVudDtcclxuICAgICAgICAgICAgY29uc3QgbiA9IGkucGFyZW50O1xyXG4gICAgICAgICAgICBjb25zdCBvID0gbi5nZXRDaGlsZEluZGV4KGkpO1xyXG4gICAgICAgICAgICBpZiAoZSA9PSBcImRvd25cIiAmJiBvID09PSBuLmNoaWxkQ291bnQgLSAxIHx8IGUgPT0gXCJ1cFwiICYmIG8gPT09IDApIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBwYXJzZUludCh0LmdldEF0dHJpYnV0ZShcInJvd3NwYW5cIikgfHwgMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHMgPSBuLmdldEF0dHJpYnV0ZShcImhlYWRpbmdSb3dzXCIpIHx8IDA7XHJcbiAgICAgICAgICAgIGNvbnN0IGEgPSBlID09IFwiZG93blwiICYmIG8gKyByID09PSBzO1xyXG4gICAgICAgICAgICBjb25zdCBjID0gZSA9PSBcInVwXCIgJiYgbyA9PT0gcztcclxuICAgICAgICAgICAgaWYgKHMgJiYgKGEgfHwgYykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGwgPSBwYXJzZUludCh0LmdldEF0dHJpYnV0ZShcInJvd3NwYW5cIikgfHwgMSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGQgPSBlID09IFwiZG93blwiID8gbyArIGwgOiBvO1xyXG4gICAgICAgICAgICBjb25zdCB1ID0gWy4uLm5ldyBaUChuLCB7ZW5kUm93OiBkfSldO1xyXG4gICAgICAgICAgICBjb25zdCBoID0gdS5maW5kKGUgPT4gZS5jZWxsID09PSB0KTtcclxuICAgICAgICAgICAgY29uc3QgZiA9IGguY29sdW1uO1xyXG4gICAgICAgICAgICBjb25zdCBnID0gdS5maW5kKCh7cm93OiB0LCByb3dzcGFuOiBpLCBjb2x1bW46IG59KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAobiAhPT0gZikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGUgPT0gXCJkb3duXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCA9PT0gZFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZCA9PT0gdCArIGlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiBnICYmIGcuY2VsbFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQlModCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5wYXJlbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBpLmdldENoaWxkSW5kZXgodCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qge2NlbGw6IHQsIHJvdzogbywgcm93c3Bhbjogcn0gb2YgbmV3IFpQKGksIHtlbmRSb3c6IG59KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG8gKyByIC0gMSA+PSBuO1xyXG4gICAgICAgICAgICAgICAgaWYgKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICBxUChcInJvd3NwYW5cIiwgciAtIDEsIHQsIGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZS5yZW1vdmUodClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHpTKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgaWYgKCFMUyh0KSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKExTKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5yZW1vdmUoaS5jcmVhdGVSYW5nZUluKGUpKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaS5tb3ZlKGkuY3JlYXRlUmFuZ2VJbih0KSwgaS5jcmVhdGVQb3NpdGlvbkF0KGUsIFwiZW5kXCIpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGkucmVtb3ZlKHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBMUyh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0LmNoaWxkQ291bnQgPT0gMSAmJiB0LmdldENoaWxkKDApLmlzKFwicGFyYWdyYXBoXCIpICYmIHQuZ2V0Q2hpbGQoMCkuaXNFbXB0eVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgRlMgZXh0ZW5kcyBqdyB7XHJcbiAgICAgICAgICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gc1ModGhpcy5lZGl0b3IubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0WzBdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5wYXJlbnQucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLmVkaXRvci5wbHVnaW5zLmdldChcIlRhYmxlVXRpbHNcIikuZ2V0Um93cyhpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gWy4uLm5ldyBaUChpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IG8uZmlsdGVyKGUgPT4gdC5pbmNsdWRlcyhlLmNlbGwpKS5tYXAodCA9PiB0LnJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IHJbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IHJbci5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IGEgLSBzIDwgbiAtIDFcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBleGVjdXRlKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHNTKHRoaXMuZWRpdG9yLm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gRFModCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdFswXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLnBhcmVudC5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gWy4uLm5ldyBaUChuLCB7ZW5kUm93OiBlLmxhc3R9KV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gdGhpcy5lZGl0b3IubW9kZWwuY3JlYXRlQmF0Y2goKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBIUyhvLCBpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLm1vZGVsLmVucXVldWVDaGFuZ2UociwgdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5zZXRTZWxlY3Rpb24odC5jcmVhdGVTZWxlY3Rpb24obiwgXCJvblwiKSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbGV0IGE7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCB0ID0gZS5sYXN0OyB0ID49IGUuZmlyc3Q7IHQtLSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLm1vZGVsLmVucXVldWVDaGFuZ2UociwgZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVSb3coaSwgbiwgZSwgbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGEgPSBqUyhuLCBpLCBzKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5tb2RlbC5lbnF1ZXVlQ2hhbmdlKHIsIHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0U2VsZWN0aW9uKHQuY3JlYXRlUG9zaXRpb25BdChhLCAwKSlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9yZW1vdmVSb3codCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gZS5nZXRDaGlsZCh0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBlLmdldEF0dHJpYnV0ZShcImhlYWRpbmdSb3dzXCIpIHx8IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAocyAmJiB0IDwgcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHFQKFwiaGVhZGluZ1Jvd3NcIiwgcyAtIDEsIGUsIGksIDApXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBuLmZpbHRlcigoe3JvdzogZSwgcm93c3BhbjogaX0pID0+IGUgPT09IHQgJiYgaSA+IDEpLmZvckVhY2goKHtjb2x1bW46IHQsIGNlbGw6IGUsIHJvd3NwYW46IGl9KSA9PiBvLnNldCh0LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2VsbDogZSxcclxuICAgICAgICAgICAgICAgICAgICByb3dzcGFuVG9TZXQ6IGkgLSAxXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICBuLmZpbHRlcigoe3JvdzogZSwgcm93c3BhbjogaX0pID0+IGUgPD0gdCAtIDEgJiYgZSArIGkgPiB0KS5mb3JFYWNoKCh7Y2VsbDogdCwgcm93c3BhbjogZX0pID0+IHFQKFwicm93c3BhblwiLCBlIC0gMSwgdCwgaSkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IHQgKyAxO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IG5ldyBaUChlLCB7aW5jbHVkZVNwYW5uZWQ6IHRydWUsIHN0YXJ0Um93OiBhLCBlbmRSb3c6IGF9KTtcclxuICAgICAgICAgICAgICAgIGxldCBsO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB7cm93OiB0LCBjb2x1bW46IG4sIGNlbGw6IHJ9IG9mIFsuLi5jXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLmhhcyhuKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7Y2VsbDogciwgcm93c3BhblRvU2V0OiBzfSA9IG8uZ2V0KG4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gbCA/IGkuY3JlYXRlUG9zaXRpb25BZnRlcihsKSA6IGkuY3JlYXRlUG9zaXRpb25BdChlLmdldENoaWxkKHQpLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5tb3ZlKGkuY3JlYXRlUmFuZ2VPbihyKSwgYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHFQKFwicm93c3BhblwiLCBzLCByLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbCA9IHJcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsID0gclxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkucmVtb3ZlKHIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIERTKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHQubWFwKHQgPT4gdC5wYXJlbnQuaW5kZXgpLnNvcnQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtmaXJzdDogZVswXSwgbGFzdDogZVtlLmxlbmd0aCAtIDFdfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24galModCwgZSwgaSkge1xyXG4gICAgICAgICAgICBjb25zdCBuID0gdC5nZXRDaGlsZChlKSB8fCB0LmdldENoaWxkKHQuY2hpbGRDb3VudCAtIDEpO1xyXG4gICAgICAgICAgICBsZXQgbyA9IG4uZ2V0Q2hpbGQoMCk7XHJcbiAgICAgICAgICAgIGxldCByID0gMDtcclxuICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG4uZ2V0Q2hpbGRyZW4oKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHIgPiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG8gPSB0O1xyXG4gICAgICAgICAgICAgICAgciArPSBwYXJzZUludCh0LmdldEF0dHJpYnV0ZShcImNvbHNwYW5cIikgfHwgMSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSFModCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5maW5kKHQgPT4gdC5jZWxsID09PSBlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGkuY29sdW1uXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBXUyBleHRlbmRzIGp3IHtcclxuICAgICAgICAgICAgcmVmcmVzaCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBzUyh0aGlzLmVkaXRvci5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRbMF07XHJcbiAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLnBhcmVudC5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuZWRpdG9yLnBsdWdpbnMuZ2V0KFwiVGFibGVVdGlsc1wiKS5nZXRDb2x1bW5zKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBbLi4ubmV3IFpQKGkpXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gby5maWx0ZXIoZSA9PiB0LmluY2x1ZGVzKGUuY2VsbCkpLm1hcCh0ID0+IHQuY29sdW1uKS5zb3J0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IHJbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IHJbci5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IGEgLSBzIDwgbiAtIDFcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBleGVjdXRlKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW3QsIGVdID0gJFModGhpcy5lZGl0b3IubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LnBhcmVudC5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gWy4uLm5ldyBaUChpKV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0ge2ZpcnN0OiBuLmZpbmQoZSA9PiBlLmNlbGwgPT09IHQpLmNvbHVtbiwgbGFzdDogbi5maW5kKHQgPT4gdC5jZWxsID09PSBlKS5jb2x1bW59O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IFVTKG4sIHQsIGUsIG8pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3IubW9kZWwuY2hhbmdlKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuc2V0U2VsZWN0aW9uKHQuY3JlYXRlUmFuZ2VPbihpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcVMoaSwgbywgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZSA9IG8ubGFzdDsgZSA+PSBvLmZpcnN0OyBlLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB7Y2VsbDogaSwgY29sdW1uOiBvLCBjb2xzcGFuOiByfSBvZiBuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobyA8PSBlICYmIHIgPiAxICYmIG8gKyByID4gZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHFQKFwiY29sc3BhblwiLCByIC0gMSwgaSwgdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobyA9PT0gZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBpLnBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnJlbW92ZShpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWUuY2hpbGRDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0LnJlbW92ZShlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0LnNldFNlbGVjdGlvbih0LmNyZWF0ZVBvc2l0aW9uQXQociwgMCkpXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBxUyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0LmdldEF0dHJpYnV0ZShcImhlYWRpbmdDb2x1bW5zXCIpIHx8IDA7XHJcbiAgICAgICAgICAgIGlmIChuICYmIGUuZmlyc3QgPD0gbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IE1hdGgubWluKG4gLSAxLCBlLmxhc3QpIC0gZS5maXJzdCArIDE7XHJcbiAgICAgICAgICAgICAgICBpLnNldEF0dHJpYnV0ZShcImhlYWRpbmdDb2x1bW5zXCIsIG4gLSBvLCB0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBVUyh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBwYXJzZUludChpLmdldEF0dHJpYnV0ZShcImNvbHNwYW5cIikgfHwgMSk7XHJcbiAgICAgICAgICAgIGlmIChvID4gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfSBlbHNlIGlmIChlLnByZXZpb3VzU2libGluZyB8fCBpLm5leHRTaWJsaW5nKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaS5uZXh0U2libGluZyB8fCBlLnByZXZpb3VzU2libGluZ1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKG4uZmlyc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdC5yZXZlcnNlKCkuZmluZCgoe2NvbHVtbjogdH0pID0+IHQgPCBuLmZpcnN0KS5jZWxsXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0LnJldmVyc2UoKS5maW5kKCh7Y29sdW1uOiB0fSkgPT4gdCA+IG4ubGFzdCkuY2VsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiAkUyh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSBzUyh0KTtcclxuICAgICAgICAgICAgY29uc3QgaSA9IGVbMF07XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLnBvcCgpO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gW2ksIG5dO1xyXG4gICAgICAgICAgICByZXR1cm4gaS5pc0JlZm9yZShuKSA/IG8gOiBvLnJldmVyc2UoKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgR1MgZXh0ZW5kcyBqdyB7XHJcbiAgICAgICAgICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gc1ModC5kb2N1bWVudC5zZWxlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUubGVuZ3RoID4gMDtcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNFbmFibGVkID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBpICYmIGUuZXZlcnkodCA9PiB0aGlzLl9pc0luSGVhZGluZyh0LCB0LnBhcmVudC5wYXJlbnQpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBleGVjdXRlKHQgPSB7fSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZWRpdG9yLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHNTKGUuZG9jdW1lbnQuc2VsZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpWzBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGlbaS5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuLnBhcmVudC5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gci5nZXRBdHRyaWJ1dGUoXCJoZWFkaW5nUm93c1wiKSB8fCAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW2EsIGNdID0gW24ucGFyZW50LmluZGV4LCBvLnBhcmVudC5pbmRleF0uc29ydCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuZm9yY2VWYWx1ZSA9PT0gdGhpcy52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbCA9IHRoaXMudmFsdWUgPyBhIDogYyArIDE7XHJcbiAgICAgICAgICAgICAgICBlLmNoYW5nZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gS1MociwgbCwgcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBKUyhpLCBsLCB0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHFQKFwiaGVhZGluZ1Jvd3NcIiwgbCwgciwgdCwgMClcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9pc0luSGVhZGluZyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gcGFyc2VJbnQoZS5nZXRBdHRyaWJ1dGUoXCJoZWFkaW5nUm93c1wiKSB8fCAwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAhIWkgJiYgdC5wYXJlbnQuaW5kZXggPCBpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEtTKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgY29uc3QgbiA9IFtdO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gZSA+IGkgPyBpIDogMDtcclxuICAgICAgICAgICAgY29uc3QgciA9IGUgLSAxO1xyXG4gICAgICAgICAgICBjb25zdCBzID0gbmV3IFpQKHQsIHtzdGFydFJvdzogbywgZW5kUm93OiByfSk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3Qge3JvdzogdCwgcm93c3BhbjogaSwgY2VsbDogb30gb2Ygcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkgPiAxICYmIHQgKyBpID4gZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG4ucHVzaChvKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBKUyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSB0LnBhcmVudDtcclxuICAgICAgICAgICAgY29uc3QgbyA9IG4ucGFyZW50O1xyXG4gICAgICAgICAgICBjb25zdCByID0gbi5pbmRleDtcclxuICAgICAgICAgICAgY29uc3QgcyA9IHBhcnNlSW50KHQuZ2V0QXR0cmlidXRlKFwicm93c3BhblwiKSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGEgPSBlIC0gcjtcclxuICAgICAgICAgICAgY29uc3QgYyA9IHt9O1xyXG4gICAgICAgICAgICBjb25zdCBsID0gcyAtIGE7XHJcbiAgICAgICAgICAgIGlmIChsID4gMSkge1xyXG4gICAgICAgICAgICAgICAgYy5yb3dzcGFuID0gbFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGQgPSBwYXJzZUludCh0LmdldEF0dHJpYnV0ZShcImNvbHNwYW5cIikgfHwgMSk7XHJcbiAgICAgICAgICAgIGlmIChkID4gMSkge1xyXG4gICAgICAgICAgICAgICAgYy5jb2xzcGFuID0gZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHUgPSBvLmdldENoaWxkSW5kZXgobik7XHJcbiAgICAgICAgICAgIGNvbnN0IGggPSB1ICsgYTtcclxuICAgICAgICAgICAgY29uc3QgZiA9IFsuLi5uZXcgWlAobywge3N0YXJ0Um93OiB1LCBlbmRSb3c6IGgsIGluY2x1ZGVTcGFubmVkOiB0cnVlfSldO1xyXG4gICAgICAgICAgICBsZXQgZztcclxuICAgICAgICAgICAgZm9yIChjb25zdCB7cm93OiBlLCBjb2x1bW46IG4sIGNlbGw6IHIsIGNlbGxJbmRleDogc30gb2YgZikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHIgPT09IHQgJiYgZyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZyA9IG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChnICE9PSB1bmRlZmluZWQgJiYgZyA9PT0gbiAmJiBlID09PSBoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IG8uZ2V0Q2hpbGQoZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGkuY3JlYXRlUG9zaXRpb25BdCh0LCBzKTtcclxuICAgICAgICAgICAgICAgICAgICBVUChpLCBuLCBjKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHFQKFwicm93c3BhblwiLCBhLCB0LCBpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgWVMgZXh0ZW5kcyBqdyB7XHJcbiAgICAgICAgICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gc1ModC5kb2N1bWVudC5zZWxlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZWRpdG9yLnBsdWdpbnMuZ2V0KFwiVGFibGVVdGlsc1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9IG47XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gbiAmJiBlLmV2ZXJ5KHQgPT4gS1AoaSwgdCkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV4ZWN1dGUodCA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5lZGl0b3IucGx1Z2lucy5nZXQoXCJUYWJsZVV0aWxzXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHNTKGUuZG9jdW1lbnQuc2VsZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuWzBdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG5bbi5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBvLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBzLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IFtjLCBsXSA9IFtpLmdldENlbGxMb2NhdGlvbihvKS5jb2x1bW4sIGkuZ2V0Q2VsbExvY2F0aW9uKHIpLmNvbHVtbl0uc29ydCgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuZm9yY2VWYWx1ZSA9PT0gdGhpcy52YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IHRoaXMudmFsdWUgPyBjIDogbCArIDE7XHJcbiAgICAgICAgICAgICAgICBlLmNoYW5nZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBxUChcImhlYWRpbmdDb2x1bW5zXCIsIGQsIGEsIHQsIDApXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBRUyBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiVGFibGVVdGlsc1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENlbGxMb2NhdGlvbih0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5nZXRDaGlsZEluZGV4KGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG5ldyBaUChpLCB7c3RhcnRSb3c6IG4sIGVuZFJvdzogbn0pO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB7Y2VsbDogZSwgcm93OiBpLCBjb2x1bW46IG59IG9mIG8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZSA9PT0gdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge3JvdzogaSwgY29sdW1uOiBufVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY3JlYXRlVGFibGUodCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpO1xyXG4gICAgICAgICAgICAgICAgWFModCwgbiwgMCwgZSwgaSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbnNlcnRSb3dzKHQsIGUgPSB7fSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZWRpdG9yLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGUuYXQgfHwgMDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBlLnJvd3MgfHwgMTtcclxuICAgICAgICAgICAgICAgIGkuY2hhbmdlKGUgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LmdldEF0dHJpYnV0ZShcImhlYWRpbmdSb3dzXCIpIHx8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkgPiBuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKFwiaGVhZGluZ1Jvd3NcIiwgaSArIG8sIHQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuID09PSAwIHx8IG4gPT09IHQuY2hpbGRDb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBYUyhlLCB0LCBuLCBvLCB0aGlzLmdldENvbHVtbnModCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IG5ldyBaUCh0LCB7ZW5kUm93OiBufSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qge3JvdzogdCwgcm93c3BhbjogaSwgY29sc3BhbjogYSwgY2VsbDogY30gb2Ygcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gdCA8IG47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGwgPSB0ICsgaSA+IG47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyICYmIGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKFwicm93c3BhblwiLCBpICsgbywgYylcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodCA9PT0gbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcyArPSBhXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgWFMoZSwgdCwgbiwgbywgcylcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluc2VydENvbHVtbnModCwgZSA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5hdCB8fCAwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGUuY29sdW1ucyB8fCAxO1xyXG4gICAgICAgICAgICAgICAgaS5jaGFuZ2UoZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuZ2V0QXR0cmlidXRlKFwiaGVhZGluZ0NvbHVtbnNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4gPCBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0QXR0cmlidXRlKFwiaGVhZGluZ0NvbHVtbnNcIiwgaSArIG8sIHQpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLmdldENvbHVtbnModCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4gPT09IDAgfHwgciA9PT0gbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdC5nZXRDaGlsZHJlbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBaUyhvLCBlLCBlLmNyZWF0ZVBvc2l0aW9uQXQoaSwgbiA/IFwiZW5kXCIgOiAwKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyBaUCh0LCB7Y29sdW1uOiBuLCBpbmNsdWRlU3Bhbm5lZDogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qge3JvdzogaSwgY2VsbDogciwgY2VsbEluZGV4OiBhfSBvZiBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBwYXJzZUludChyLmdldEF0dHJpYnV0ZShcInJvd3NwYW5cIikgfHwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGwgPSBwYXJzZUludChyLmdldEF0dHJpYnV0ZShcImNvbHNwYW5cIikgfHwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyLmluZGV4ICE9PSBuICYmIGwgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlLnNldEF0dHJpYnV0ZShcImNvbHNwYW5cIiwgbCArIG8sIHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcy5za2lwUm93KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGMgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgdCA9IGkgKyAxOyB0IDwgaSArIGM7IHQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzLnNraXBSb3codClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5jcmVhdGVQb3NpdGlvbkF0KHQuZ2V0Q2hpbGQoaSksIGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgWlMobywgZSwgbilcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNwbGl0Q2VsbFZlcnRpY2FsbHkodCwgZSA9IDIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBwYXJzZUludCh0LmdldEF0dHJpYnV0ZShcInJvd3NwYW5cIikgfHwgMSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gcGFyc2VJbnQodC5nZXRBdHRyaWJ1dGUoXCJjb2xzcGFuXCIpIHx8IDEpO1xyXG4gICAgICAgICAgICAgICAgaS5jaGFuZ2UoaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtuZXdDZWxsc1NwYW46IG4sIHVwZGF0ZWRTcGFuOiBvfSA9IHRFKHMsIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBxUChcImNvbHNwYW5cIiwgbywgdCwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGEgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG4gPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmNvbHNwYW4gPSBuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnJvd3NwYW4gPSByXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IHMgPiBlID8gZSAtIDEgOiBzIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgWlMoYywgaSwgaS5jcmVhdGVQb3NpdGlvbkFmdGVyKHQpLCBhKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAocyA8IGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGUgLSBzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gWy4uLm5ldyBaUChvKV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHtjb2x1bW46IGN9ID0gYS5maW5kKCh7Y2VsbDogZX0pID0+IGUgPT09IHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBsID0gYS5maWx0ZXIoKHtjZWxsOiBlLCBjb2xzcGFuOiBpLCBjb2x1bW46IG59KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gZSAhPT0gdCAmJiBuID09PSBjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IG4gPCBjICYmIG4gKyBpID4gYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvIHx8IHJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qge2NlbGw6IHQsIGNvbHNwYW46IGV9IG9mIGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGkuc2V0QXR0cmlidXRlKFwiY29sc3BhblwiLCBlICsgbiwgdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZC5yb3dzcGFuID0gclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFpTKG4sIGksIGkuY3JlYXRlUG9zaXRpb25BZnRlcih0KSwgZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHUgPSBvLmdldEF0dHJpYnV0ZShcImhlYWRpbmdDb2x1bW5zXCIpIHx8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1ID4gYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcVAoXCJoZWFkaW5nQ29sdW1uc1wiLCB1ICsgbiwgbywgaSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHNwbGl0Q2VsbEhvcml6b250YWxseSh0LCBlID0gMikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZWRpdG9yLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG4ucGFyZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG8uZ2V0Q2hpbGRJbmRleChuKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBwYXJzZUludCh0LmdldEF0dHJpYnV0ZShcInJvd3NwYW5cIikgfHwgMSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gcGFyc2VJbnQodC5nZXRBdHRyaWJ1dGUoXCJjb2xzcGFuXCIpIHx8IDEpO1xyXG4gICAgICAgICAgICAgICAgaS5jaGFuZ2UoaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBbLi4ubmV3IFpQKG8sIHtzdGFydFJvdzogciwgZW5kUm93OiByICsgcyAtIDEsIGluY2x1ZGVTcGFubmVkOiB0cnVlfSldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7bmV3Q2VsbHNTcGFuOiBjLCB1cGRhdGVkU3BhbjogbH0gPSB0RShzLCBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcVAoXCJyb3dzcGFuXCIsIGwsIHQsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB7Y29sdW1uOiBkfSA9IG4uZmluZCgoe2NlbGw6IGV9KSA9PiBlID09PSB0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYyA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUucm93c3BhbiA9IGNcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHUuY29sc3BhbiA9IGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHtjb2x1bW46IHQsIHJvdzogZSwgY2VsbEluZGV4OiBzfSBvZiBuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gZSA+PSByICsgbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGEgPSB0ID09PSBkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaCA9IChlICsgciArIGwpICUgYyA9PT0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuICYmIGEgJiYgaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBpLmNyZWF0ZVBvc2l0aW9uQXQoby5nZXRDaGlsZChlKSwgcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgWlMoMSwgaSwgdCwgdSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAocyA8IGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IGUgLSBzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBjID0gWy4uLm5ldyBaUChvLCB7c3RhcnRSb3c6IDAsIGVuZFJvdzogcn0pXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCB7Y2VsbDogZSwgcm93c3Bhbjogbywgcm93OiBzfSBvZiBjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSAhPT0gdCAmJiBzICsgbyA+IHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gbyArIG47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaS5zZXRBdHRyaWJ1dGUoXCJyb3dzcGFuXCIsIHQsIGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGwuY29sc3BhbiA9IGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBYUyhpLCBvLCByICsgMSwgbiwgMSwgbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBvLmdldEF0dHJpYnV0ZShcImhlYWRpbmdSb3dzXCIpIHx8IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkID4gcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcVAoXCJoZWFkaW5nUm93c1wiLCBkICsgbiwgbywgaSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldENvbHVtbnModCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZ2V0Q2hpbGQoMCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gWy4uLmUuZ2V0Q2hpbGRyZW4oKV0ucmVkdWNlKCh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHBhcnNlSW50KGUuZ2V0QXR0cmlidXRlKFwiY29sc3BhblwiKSB8fCAxKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdCArIGlcclxuICAgICAgICAgICAgICAgIH0sIDApXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldFJvd3ModCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuY2hpbGRDb3VudFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBYUyh0LCBlLCBpLCBuLCBvLCByID0ge30pIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgcyA9IDA7IHMgPCBuOyBzKyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LmNyZWF0ZUVsZW1lbnQoXCJ0YWJsZVJvd1wiKTtcclxuICAgICAgICAgICAgICAgIHQuaW5zZXJ0KG4sIGUsIGkpO1xyXG4gICAgICAgICAgICAgICAgWlMobywgdCwgdC5jcmVhdGVQb3NpdGlvbkF0KG4sIFwiZW5kXCIpLCByKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBaUyh0LCBlLCBpLCBuID0ge30pIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgbyA9IDA7IG8gPCB0OyBvKyspIHtcclxuICAgICAgICAgICAgICAgIFVQKGUsIGksIG4pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHRFKHQsIGUpIHtcclxuICAgICAgICAgICAgaWYgKHQgPCBlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge25ld0NlbGxzU3BhbjogMSwgdXBkYXRlZFNwYW46IDF9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgaSA9IE1hdGguZmxvb3IodCAvIGUpO1xyXG4gICAgICAgICAgICBjb25zdCBuID0gdCAtIGkgKiBlICsgaTtcclxuICAgICAgICAgICAgcmV0dXJuIHtuZXdDZWxsc1NwYW46IGksIHVwZGF0ZWRTcGFuOiBufVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZUUodCkge1xyXG4gICAgICAgICAgICB0LmRvY3VtZW50LnJlZ2lzdGVyUG9zdEZpeGVyKGUgPT4gaUUoZSwgdCkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBpRSh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBlLmRvY3VtZW50LmRpZmZlci5nZXRDaGFuZ2VzKCk7XHJcbiAgICAgICAgICAgIGxldCBuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgU2V0O1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgaSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IGk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5uYW1lID09IFwidGFibGVcIiAmJiBlLnR5cGUgPT0gXCJpbnNlcnRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIGkgPSBlLnBvc2l0aW9uLm5vZGVBZnRlclxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGUubmFtZSA9PSBcInRhYmxlUm93XCIgfHwgZS5uYW1lID09IFwidGFibGVDZWxsXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpID0gV1AoXCJ0YWJsZVwiLCBlLnBvc2l0aW9uKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGFFKGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IFdQKFwidGFibGVcIiwgZS5yYW5nZS5zdGFydClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpICYmICFvLmhhcyhpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG4gPSBuRShpLCB0KSB8fCBuO1xyXG4gICAgICAgICAgICAgICAgICAgIG4gPSBvRShpLCB0KSB8fCBuO1xyXG4gICAgICAgICAgICAgICAgICAgIG8uYWRkKGkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG5FKHQsIGUpIHtcclxuICAgICAgICAgICAgbGV0IGkgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IHJFKHQpO1xyXG4gICAgICAgICAgICBpZiAobi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIGkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBxUChcInJvd3NwYW5cIiwgdC5yb3dzcGFuLCB0LmNlbGwsIGUsIDEpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9FKHQsIGUpIHtcclxuICAgICAgICAgICAgbGV0IGkgPSBmYWxzZTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IHNFKHQpO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gblswXTtcclxuICAgICAgICAgICAgY29uc3QgciA9IE9iamVjdC52YWx1ZXMobikuZXZlcnkodCA9PiB0ID09PSBvKTtcclxuICAgICAgICAgICAgaWYgKCFyKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gT2JqZWN0LnZhbHVlcyhuKS5yZWR1Y2UoKHQsIGUpID0+IGUgPiB0ID8gZSA6IHQsIDApO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbciwgc10gb2YgT2JqZWN0LmVudHJpZXMobikpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gbyAtIHM7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFVQKGUsIGUuY3JlYXRlUG9zaXRpb25BdCh0LmdldENoaWxkKHIpLCBcImVuZFwiKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gckUodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gcGFyc2VJbnQodC5nZXRBdHRyaWJ1dGUoXCJoZWFkaW5nUm93c1wiKSB8fCAwKTtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHQuY2hpbGRDb3VudDtcclxuICAgICAgICAgICAgY29uc3QgbiA9IFtdO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHtyb3c6IG8sIHJvd3NwYW46IHIsIGNlbGw6IHN9IG9mIG5ldyBaUCh0KSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHIgPCAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBvIDwgZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSB0ID8gZSA6IGk7XHJcbiAgICAgICAgICAgICAgICBpZiAobyArIHIgPiBhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IGEgLSBvO1xyXG4gICAgICAgICAgICAgICAgICAgIG4ucHVzaCh7Y2VsbDogcywgcm93c3BhbjogdH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNFKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHt9O1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHtyb3c6IGl9IG9mIG5ldyBaUCh0LCB7aW5jbHVkZVNwYW5uZWQ6IHRydWV9KSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlW2ldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZVtpXSA9IDBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVbaV0gKz0gMVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhRSh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LnR5cGUgPT09IFwiYXR0cmlidXRlXCI7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LmF0dHJpYnV0ZUtleTtcclxuICAgICAgICAgICAgcmV0dXJuIGUgJiYgKGkgPT09IFwiaGVhZGluZ1Jvd3NcIiB8fCBpID09PSBcImNvbHNwYW5cIiB8fCBpID09PSBcInJvd3NwYW5cIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGNFKHQpIHtcclxuICAgICAgICAgICAgdC5kb2N1bWVudC5yZWdpc3RlclBvc3RGaXhlcihlID0+IGxFKGUsIHQpKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbEUodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gZS5kb2N1bWVudC5kaWZmZXIuZ2V0Q2hhbmdlcygpO1xyXG4gICAgICAgICAgICBsZXQgbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgaSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGUudHlwZSA9PSBcImluc2VydFwiICYmIGUubmFtZSA9PSBcInRhYmxlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBuID0gZEUoZS5wb3NpdGlvbi5ub2RlQWZ0ZXIsIHQpIHx8IG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChlLnR5cGUgPT0gXCJpbnNlcnRcIiAmJiBlLm5hbWUgPT0gXCJ0YWJsZVJvd1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbiA9IHVFKGUucG9zaXRpb24ubm9kZUFmdGVyLCB0KSB8fCBuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZS50eXBlID09IFwiaW5zZXJ0XCIgJiYgZS5uYW1lID09IFwidGFibGVDZWxsXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBuID0gaEUoZS5wb3NpdGlvbi5ub2RlQWZ0ZXIsIHQpIHx8IG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChmRShlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG4gPSBoRShlLnBvc2l0aW9uLnBhcmVudCwgdCkgfHwgblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBkRSh0LCBlKSB7XHJcbiAgICAgICAgICAgIGxldCBpID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbiBvZiB0LmdldENoaWxkcmVuKCkpIHtcclxuICAgICAgICAgICAgICAgIGkgPSB1RShuLCBlKSB8fCBpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHVFKHQsIGUpIHtcclxuICAgICAgICAgICAgbGV0IGkgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBuIG9mIHQuZ2V0Q2hpbGRyZW4oKSkge1xyXG4gICAgICAgICAgICAgICAgaSA9IGhFKG4sIGUpIHx8IGlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gaEUodCwgZSkge1xyXG4gICAgICAgICAgICBpZiAodC5jaGlsZENvdW50ID09IDApIHtcclxuICAgICAgICAgICAgICAgIGUuaW5zZXJ0RWxlbWVudChcInBhcmFncmFwaFwiLCB0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgaSA9IEFycmF5LmZyb20odC5nZXRDaGlsZHJlbigpKS5maWx0ZXIodCA9PiB0LmlzKFwidGV4dFwiKSk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICBlLndyYXAoZS5jcmVhdGVSYW5nZU9uKHQpLCBcInBhcmFncmFwaFwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAhIWkubGVuZ3RoXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBmRSh0KSB7XHJcbiAgICAgICAgICAgIGlmICghdC5wb3NpdGlvbiB8fCAhdC5wb3NpdGlvbi5wYXJlbnQuaXMoXCJ0YWJsZUNlbGxcIikpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0LnR5cGUgPT0gXCJpbnNlcnRcIiAmJiB0Lm5hbWUgPT0gXCIkdGV4dFwiIHx8IHQudHlwZSA9PSBcInJlbW92ZVwiXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBnRSh0KSB7XHJcbiAgICAgICAgICAgIHQuZG9jdW1lbnQucmVnaXN0ZXJQb3N0Rml4ZXIoKCkgPT4gbUUodCkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBtRSh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB0LmRvY3VtZW50LmRpZmZlcjtcclxuICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBTZXQ7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBlLmdldENoYW5nZXMoKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQudHlwZSA9PSBcImluc2VydFwiIHx8IHQudHlwZSA9PSBcInJlbW92ZVwiID8gdC5wb3NpdGlvbi5wYXJlbnQgOiB0LnJhbmdlLnN0YXJ0LnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGlmIChlLmlzKFwidGFibGVDZWxsXCIpICYmIHBFKGUsIHQudHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpLmFkZChlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpLnNpemUpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBpLnZhbHVlcygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5yZWZyZXNoSXRlbSh0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHBFKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IEFycmF5LmZyb20odC5nZXRDaGlsZHJlbigpKS5zb21lKHQgPT4gdC5pcyhcInBhcmFncmFwaFwiKSk7XHJcbiAgICAgICAgICAgIGlmICghaSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGUgPT0gXCJhdHRyaWJ1dGVcIikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IEFycmF5LmZyb20odC5nZXRDaGlsZCgwKS5nZXRBdHRyaWJ1dGVLZXlzKCkpLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0LmNoaWxkQ291bnQgPT09IDEgJiYgZSA8IDJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdC5jaGlsZENvdW50IDw9IChlID09IFwiaW5zZXJ0XCIgPyAyIDogMSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBiRSA9IGkoOTIpO1xyXG5cclxuICAgICAgICBjbGFzcyB3RSBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiVGFibGVFZGl0aW5nXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0Lm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuc2NoZW1hO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuY29udmVyc2lvbjtcclxuICAgICAgICAgICAgICAgIGkucmVnaXN0ZXIoXCJ0YWJsZVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dXaGVyZTogXCIkYmxvY2tcIixcclxuICAgICAgICAgICAgICAgICAgICBhbGxvd0F0dHJpYnV0ZXM6IFtcImhlYWRpbmdSb3dzXCIsIFwiaGVhZGluZ0NvbHVtbnNcIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgaXNMaW1pdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBpc09iamVjdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBpc0Jsb2NrOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGkucmVnaXN0ZXIoXCJ0YWJsZVJvd1wiLCB7YWxsb3dJbjogXCJ0YWJsZVwiLCBpc0xpbWl0OiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICBpLnJlZ2lzdGVyKFwidGFibGVDZWxsXCIsIHthbGxvd0luOiBcInRhYmxlUm93XCIsIGFsbG93QXR0cmlidXRlczogW1wiY29sc3BhblwiLCBcInJvd3NwYW5cIl0sIGlzT2JqZWN0OiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICBpLmV4dGVuZChcIiRibG9ja1wiLCB7YWxsb3dJbjogXCJ0YWJsZUNlbGxcIn0pO1xyXG4gICAgICAgICAgICAgICAgaS5hZGRDaGlsZENoZWNrKCh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGUubmFtZSA9PSBcInRhYmxlXCIgJiYgQXJyYXkuZnJvbSh0LmdldE5hbWVzKCkpLmluY2x1ZGVzKFwidGFibGVcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBuLmZvcihcInVwY2FzdFwiKS5hZGQoSlAoKSk7XHJcbiAgICAgICAgICAgICAgICBuLmZvcihcImVkaXRpbmdEb3duY2FzdFwiKS5hZGQobFMoe2FzV2lkZ2V0OiB0cnVlfSkpO1xyXG4gICAgICAgICAgICAgICAgbi5mb3IoXCJkYXRhRG93bmNhc3RcIikuYWRkKGxTKCkpO1xyXG4gICAgICAgICAgICAgICAgbi5mb3IoXCJ1cGNhc3RcIikuZWxlbWVudFRvRWxlbWVudCh7bW9kZWw6IFwidGFibGVSb3dcIiwgdmlldzogXCJ0clwifSk7XHJcbiAgICAgICAgICAgICAgICBuLmZvcihcImVkaXRpbmdEb3duY2FzdFwiKS5hZGQoZFMoe2FzV2lkZ2V0OiB0cnVlfSkpO1xyXG4gICAgICAgICAgICAgICAgbi5mb3IoXCJkYXRhRG93bmNhc3RcIikuYWRkKGRTKCkpO1xyXG4gICAgICAgICAgICAgICAgbi5mb3IoXCJkb3duY2FzdFwiKS5hZGQoZ1MoKSk7XHJcbiAgICAgICAgICAgICAgICBuLmZvcihcInVwY2FzdFwiKS5hZGQoWVAoXCJ0ZFwiKSk7XHJcbiAgICAgICAgICAgICAgICBuLmZvcihcInVwY2FzdFwiKS5hZGQoWVAoXCJ0aFwiKSk7XHJcbiAgICAgICAgICAgICAgICBuLmZvcihcImVkaXRpbmdEb3duY2FzdFwiKS5hZGQodVMoe2FzV2lkZ2V0OiB0cnVlfSkpO1xyXG4gICAgICAgICAgICAgICAgbi5mb3IoXCJkYXRhRG93bmNhc3RcIikuYWRkKHVTKCkpO1xyXG4gICAgICAgICAgICAgICAgbi5hdHRyaWJ1dGVUb0F0dHJpYnV0ZSh7bW9kZWw6IFwiY29sc3BhblwiLCB2aWV3OiBcImNvbHNwYW5cIn0pO1xyXG4gICAgICAgICAgICAgICAgbi5hdHRyaWJ1dGVUb0F0dHJpYnV0ZSh7bW9kZWw6IFwicm93c3BhblwiLCB2aWV3OiBcInJvd3NwYW5cIn0pO1xyXG4gICAgICAgICAgICAgICAgbi5mb3IoXCJlZGl0aW5nRG93bmNhc3RcIikuYWRkKGZTKHthc1dpZGdldDogdHJ1ZX0pKTtcclxuICAgICAgICAgICAgICAgIG4uZm9yKFwiZGF0YURvd25jYXN0XCIpLmFkZChmUygpKTtcclxuICAgICAgICAgICAgICAgIG4uZm9yKFwiZWRpdGluZ0Rvd25jYXN0XCIpLmFkZChoUyh7YXNXaWRnZXQ6IHRydWV9KSk7XHJcbiAgICAgICAgICAgICAgICBuLmZvcihcImRhdGFEb3duY2FzdFwiKS5hZGQoaFMoKSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcImluc2VydFRhYmxlXCIsIG5ldyBTUyh0KSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcImluc2VydFRhYmxlUm93QWJvdmVcIiwgbmV3IFJTKHQsIHtvcmRlcjogXCJhYm92ZVwifSkpO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJpbnNlcnRUYWJsZVJvd0JlbG93XCIsIG5ldyBSUyh0LCB7b3JkZXI6IFwiYmVsb3dcIn0pKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwiaW5zZXJ0VGFibGVDb2x1bW5MZWZ0XCIsIG5ldyBPUyh0LCB7b3JkZXI6IFwibGVmdFwifSkpO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJpbnNlcnRUYWJsZUNvbHVtblJpZ2h0XCIsIG5ldyBPUyh0LCB7b3JkZXI6IFwicmlnaHRcIn0pKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwicmVtb3ZlVGFibGVSb3dcIiwgbmV3IEZTKHQpKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwicmVtb3ZlVGFibGVDb2x1bW5cIiwgbmV3IFdTKHQpKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwic3BsaXRUYWJsZUNlbGxWZXJ0aWNhbGx5XCIsIG5ldyBJUyh0LCB7ZGlyZWN0aW9uOiBcInZlcnRpY2FsbHlcIn0pKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwic3BsaXRUYWJsZUNlbGxIb3Jpem9udGFsbHlcIiwgbmV3IElTKHQsIHtkaXJlY3Rpb246IFwiaG9yaXpvbnRhbGx5XCJ9KSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcIm1lcmdlVGFibGVDZWxsUmlnaHRcIiwgbmV3IFZTKHQsIHtkaXJlY3Rpb246IFwicmlnaHRcIn0pKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwibWVyZ2VUYWJsZUNlbGxMZWZ0XCIsIG5ldyBWUyh0LCB7ZGlyZWN0aW9uOiBcImxlZnRcIn0pKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwibWVyZ2VUYWJsZUNlbGxEb3duXCIsIG5ldyBWUyh0LCB7ZGlyZWN0aW9uOiBcImRvd25cIn0pKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwibWVyZ2VUYWJsZUNlbGxVcFwiLCBuZXcgVlModCwge2RpcmVjdGlvbjogXCJ1cFwifSkpO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJzZXRUYWJsZUNvbHVtbkhlYWRlclwiLCBuZXcgWVModCkpO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJzZXRUYWJsZVJvd0hlYWRlclwiLCBuZXcgR1ModCkpO1xyXG4gICAgICAgICAgICAgICAgZUUoZSk7XHJcbiAgICAgICAgICAgICAgICBnRShlKTtcclxuICAgICAgICAgICAgICAgIGNFKGUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5lZGl0b3Iua2V5c3Ryb2tlcy5zZXQoXCJUYWJcIiwgKC4uLnQpID0+IHRoaXMuX2hhbmRsZVRhYk9uU2VsZWN0ZWRUYWJsZSguLi50KSwge3ByaW9yaXR5OiBcImxvd1wifSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5rZXlzdHJva2VzLnNldChcIlRhYlwiLCB0aGlzLl9nZXRUYWJIYW5kbGVyKHRydWUpLCB7cHJpb3JpdHk6IFwibG93XCJ9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmtleXN0cm9rZXMuc2V0KFwiU2hpZnQrVGFiXCIsIHRoaXMuX2dldFRhYkhhbmRsZXIoZmFsc2UpLCB7cHJpb3JpdHk6IFwibG93XCJ9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtRU11cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2hhbmRsZVRhYk9uU2VsZWN0ZWRUYWJsZSh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBpZiAoIW4uaXNDb2xsYXBzZWQgJiYgbi5yYW5nZUNvdW50ID09PSAxICYmIG4uZ2V0Rmlyc3RSYW5nZSgpLmlzRmxhdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBuLmdldFNlbGVjdGVkRWxlbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdCB8fCAhdC5pcyhcInRhYmxlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5tb2RlbC5jaGFuZ2UoZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0U2VsZWN0aW9uKGUuY3JlYXRlUmFuZ2VJbih0LmdldENoaWxkKDApLmdldENoaWxkKDApKSlcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0VGFiSGFuZGxlcih0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGksIG4pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gZS5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IHJTKG8pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSByLnBhcmVudDtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gcy5wYXJlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IGEuZ2V0Q2hpbGRJbmRleChzKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBsID0gcy5nZXRDaGlsZEluZGV4KHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBsID09PSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdCAmJiBkICYmIGMgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHUgPSBsID09PSBzLmNoaWxkQ291bnQgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGggPSBjID09PSBhLmNoaWxkQ291bnQgLSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIGggJiYgdSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmV4ZWN1dGUoXCJpbnNlcnRUYWJsZVJvd0JlbG93XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYyA9PT0gYS5jaGlsZENvdW50IC0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGY7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQgJiYgdSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ID0gYS5nZXRDaGlsZChjICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGYgPSB0LmdldENoaWxkKDApXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdCAmJiBkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBhLmdldENoaWxkKGMgLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZiA9IHQuZ2V0Q2hpbGQodC5jaGlsZENvdW50IC0gMSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmID0gcy5nZXRDaGlsZChsICsgKHQgPyAxIDogLTEpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlLm1vZGVsLmNoYW5nZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRTZWxlY3Rpb24odC5jcmVhdGVSYW5nZUluKGYpKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBrRSA9IGkoOTQpO1xyXG5cclxuICAgICAgICBjbGFzcyBfRSBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5iaW5kVGVtcGxhdGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zID0gdGhpcy5jcmVhdGVDb2xsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcInJvd3NcIiwgMCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImNvbHVtbnNcIiwgMCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJpbmQoXCJsYWJlbFwiKS50byh0aGlzLCBcImNvbHVtbnNcIiwgdGhpcywgXCJyb3dzXCIsICh0LCBlKSA9PiBgJHtlfSDDlyAke3R9YCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge2NsYXNzOiBbXCJja1wiXX0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZzogXCJkaXZcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge2NsYXNzOiBbXCJjay1pbnNlcnQtdGFibGUtZHJvcGRvd25fX2dyaWRcIl19LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5pdGVtc1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiBcImRpdlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrLWluc2VydC10YWJsZS1kcm9wZG93bl9fbGFiZWxcIl19LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW3t0ZXh0OiBlLnRvKFwibGFiZWxcIil9XVxyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIG9uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vdXNlZG93bjogZS50byh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgY2xpY2s6IGUudG8oKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwiZXhlY3V0ZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdCA9IDA7IHQgPCAxMDA7IHQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgdkU7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5vbihcIm92ZXJcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gTWF0aC5mbG9vcih0IC8gMTApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gdCAlIDEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldChcInJvd3NcIiwgZSArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldChcImNvbHVtbnNcIiwgaSArIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5hZGQoZSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRoaXMub24oXCJjaGFuZ2U6Y29sdW1uc1wiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGlnaGxpZ2h0R3JpZEJveGVzKClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbihcImNoYW5nZTpyb3dzXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaWdobGlnaHRHcmlkQm94ZXMoKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9jdXMoKSB7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvY3VzTGFzdCgpIHtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2hpZ2hsaWdodEdyaWRCb3hlcygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLnJvd3M7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5jb2x1bW5zO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtcy5tYXAoKGksIG4pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gTWF0aC5mbG9vcihuIC8gMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuICUgMTA7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IG8gPCB0ICYmIHIgPCBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc2V0KFwiaXNPblwiLCBzKVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgdkUgZXh0ZW5kcyBHcCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuYmluZFRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJpc09uXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGVtcGxhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZzogXCJkaXZcIixcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrLWluc2VydC10YWJsZS1kcm9wZG93bi1ncmlkLWJveFwiLCBlLmlmKFwiaXNPblwiLCBcImNrLW9uXCIpXX0sXHJcbiAgICAgICAgICAgICAgICAgICAgb246IHttb3VzZW92ZXI6IGUudG8oXCJvdmVyXCIpfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHlFID0gJzxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTMgNnYzaDRWNkgzem0wIDR2M2g0di0zSDN6bTAgNHYzaDR2LTNIM3ptNSAzaDR2LTNIOHYzem01IDBoNHYtM2gtNHYzem00LTR2LTNoLTR2M2g0em0wLTRWNmgtNHYzaDR6bTEuNSA4YTEuNSAxLjUgMCAwIDEtMS41IDEuNUgzQTEuNSAxLjUgMCAwIDEgMS41IDE3VjRjLjIyMi0uODYzIDEuMDY4LTEuNSAyLTEuNWgxM2MuOTMyIDAgMS43NzguNjM3IDIgMS41djEzek0xMiAxM3YtM0g4djNoNHptMC00VjZIOHYzaDR6XCIvPjwvc3ZnPic7XHJcbiAgICAgICAgdmFyIHhFID0gJzxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTIuNSAxaDE1QTEuNSAxLjUgMCAwIDEgMTkgMi41djE1YTEuNSAxLjUgMCAwIDEtMS41IDEuNWgtMTVBMS41IDEuNSAwIDAgMSAxIDE3LjV2LTE1QTEuNSAxLjUgMCAwIDEgMi41IDF6TTIgMnYxNmgxNlYySDJ6XCIgb3BhY2l0eT1cIi42XCIvPjxwYXRoIGQ9XCJNMTggN3YxSDJWN2gxNnptMCA1djFIMnYtMWgxNnpcIiBvcGFjaXR5PVwiLjZcIi8+PHBhdGggZD1cIk0xNCAxdjE4YTEgMSAwIDAgMS0xIDFIN2ExIDEgMCAwIDEtMS0xVjFhMSAxIDAgMCAxIDEtMWg2YTEgMSAwIDAgMSAxIDF6bS0yIDFIOHY0aDRWMnptMCA2SDh2NGg0Vjh6bTAgNkg4djRoNHYtNHpcIi8+PC9zdmc+JztcclxuICAgICAgICB2YXIgQ0UgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMi41IDFoMTVBMS41IDEuNSAwIDAgMSAxOSAyLjV2MTVhMS41IDEuNSAwIDAgMS0xLjUgMS41aC0xNUExLjUgMS41IDAgMCAxIDEgMTcuNXYtMTVBMS41IDEuNSAwIDAgMSAyLjUgMXpNMiAydjE2aDE2VjJIMnpcIiBvcGFjaXR5PVwiLjZcIi8+PHBhdGggZD1cIk03IDJoMXYxNkg3VjJ6bTUgMGgxdjE2aC0xVjJ6XCIgb3BhY2l0eT1cIi42XCIvPjxwYXRoIGQ9XCJNMSA2aDE4YTEgMSAwIDAgMSAxIDF2NmExIDEgMCAwIDEtMSAxSDFhMSAxIDAgMCAxLTEtMVY3YTEgMSAwIDAgMSAxLTF6bTEgMnY0aDRWOEgyem02IDB2NGg0VjhIOHptNiAwdjRoNFY4aC00elwiLz48L3N2Zz4nO1xyXG4gICAgICAgIHZhciBBRSA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0yLjUgMWgxNUExLjUgMS41IDAgMCAxIDE5IDIuNXYxNWExLjUgMS41IDAgMCAxLTEuNSAxLjVoLTE1QTEuNSAxLjUgMCAwIDEgMSAxNy41di0xNUExLjUgMS41IDAgMCAxIDIuNSAxek0yIDJ2MTZoMTZWMkgyelwiIG9wYWNpdHk9XCIuNlwiLz48cGF0aCBkPVwiTTcgMmgxdjE2SDdWMnptNSAwaDF2N2gtMVYyem02IDV2MUgyVjdoMTZ6TTggMTJ2MUgydi0xaDZ6XCIgb3BhY2l0eT1cIi42XCIvPjxwYXRoIGQ9XCJNNyA3aDEyYTEgMSAwIDAgMSAxIDF2MTFhMSAxIDAgMCAxLTEgMUg3YTEgMSAwIDAgMS0xLTFWOGExIDEgMCAwIDEgMS0xem0xIDJ2OWgxMFY5SDh6XCIvPjwvc3ZnPic7XHJcblxyXG4gICAgICAgIGNsYXNzIFRFIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZWRpdG9yLnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5sb2NhbGUuY29udGVudExhbmd1YWdlRGlyZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGkgPT09IFwibHRyXCI7XHJcbiAgICAgICAgICAgICAgICB0LnVpLmNvbXBvbmVudEZhY3RvcnkuYWRkKFwiaW5zZXJ0VGFibGVcIiwgaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuY29tbWFuZHMuZ2V0KFwiaW5zZXJ0VGFibGVcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IFdiKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG8uYmluZChcImlzRW5hYmxlZFwiKS50byhuKTtcclxuICAgICAgICAgICAgICAgICAgICBvLmJ1dHRvblZpZXcuc2V0KHtpY29uOiB5RSwgbGFiZWw6IGUoXCJraVwiKSwgdG9vbHRpcDogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByO1xyXG4gICAgICAgICAgICAgICAgICAgIG8ub24oXCJjaGFuZ2U6aXNPcGVuXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBuZXcgX0UoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8ucGFuZWxWaWV3LmNoaWxkcmVuLmFkZChyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgci5kZWxlZ2F0ZShcImV4ZWN1dGVcIikudG8obyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uYnV0dG9uVmlldy5vbihcIm9wZW5cIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgci5yb3dzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHIuY29sdW1ucyA9IDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8ub24oXCJleGVjdXRlXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuZXhlY3V0ZShcImluc2VydFRhYmxlXCIsIHtyb3dzOiByLnJvd3MsIGNvbHVtbnM6IHIuY29sdW1uc30pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQudWkuY29tcG9uZW50RmFjdG9yeS5hZGQoXCJ0YWJsZUNvbHVtblwiLCB0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzd2l0Y2hidXR0b25cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHtjb21tYW5kTmFtZTogXCJzZXRUYWJsZUNvbHVtbkhlYWRlclwiLCBsYWJlbDogZShcImtqXCIpLCBiaW5kSXNPbjogdHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgICB9LCB7dHlwZTogXCJzZXBhcmF0b3JcIn0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHtjb21tYW5kTmFtZTogbiA/IFwiaW5zZXJ0VGFibGVDb2x1bW5MZWZ0XCIgOiBcImluc2VydFRhYmxlQ29sdW1uUmlnaHRcIiwgbGFiZWw6IGUoXCJra1wiKX1cclxuICAgICAgICAgICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7Y29tbWFuZE5hbWU6IG4gPyBcImluc2VydFRhYmxlQ29sdW1uUmlnaHRcIiA6IFwiaW5zZXJ0VGFibGVDb2x1bW5MZWZ0XCIsIGxhYmVsOiBlKFwia2xcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwge3R5cGU6IFwiYnV0dG9uXCIsIG1vZGVsOiB7Y29tbWFuZE5hbWU6IFwicmVtb3ZlVGFibGVDb2x1bW5cIiwgbGFiZWw6IGUoXCJrbVwiKX19XTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fcHJlcGFyZURyb3Bkb3duKGUoXCJrblwiKSwgeEUsIGksIHQpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQudWkuY29tcG9uZW50RmFjdG9yeS5hZGQoXCJ0YWJsZVJvd1wiLCB0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzd2l0Y2hidXR0b25cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHtjb21tYW5kTmFtZTogXCJzZXRUYWJsZVJvd0hlYWRlclwiLCBsYWJlbDogZShcImtvXCIpLCBiaW5kSXNPbjogdHJ1ZX1cclxuICAgICAgICAgICAgICAgICAgICB9LCB7dHlwZTogXCJzZXBhcmF0b3JcIn0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHtjb21tYW5kTmFtZTogXCJpbnNlcnRUYWJsZVJvd0JlbG93XCIsIGxhYmVsOiBlKFwia3BcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwge3R5cGU6IFwiYnV0dG9uXCIsIG1vZGVsOiB7Y29tbWFuZE5hbWU6IFwiaW5zZXJ0VGFibGVSb3dBYm92ZVwiLCBsYWJlbDogZShcImtxXCIpfX0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHtjb21tYW5kTmFtZTogXCJyZW1vdmVUYWJsZVJvd1wiLCBsYWJlbDogZShcImtyXCIpfVxyXG4gICAgICAgICAgICAgICAgICAgIH1dO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcmVwYXJlRHJvcGRvd24oZShcImtzXCIpLCBDRSwgaSwgdClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdC51aS5jb21wb25lbnRGYWN0b3J5LmFkZChcIm1lcmdlVGFibGVDZWxsc1wiLCB0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHtjb21tYW5kTmFtZTogXCJtZXJnZVRhYmxlQ2VsbFVwXCIsIGxhYmVsOiBlKFwia3RcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImJ1dHRvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbDoge2NvbW1hbmROYW1lOiBuID8gXCJtZXJnZVRhYmxlQ2VsbFJpZ2h0XCIgOiBcIm1lcmdlVGFibGVDZWxsTGVmdFwiLCBsYWJlbDogZShcImt1XCIpfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHt0eXBlOiBcImJ1dHRvblwiLCBtb2RlbDoge2NvbW1hbmROYW1lOiBcIm1lcmdlVGFibGVDZWxsRG93blwiLCBsYWJlbDogZShcImt2XCIpfX0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHtjb21tYW5kTmFtZTogbiA/IFwibWVyZ2VUYWJsZUNlbGxMZWZ0XCIgOiBcIm1lcmdlVGFibGVDZWxsUmlnaHRcIiwgbGFiZWw6IGUoXCJrd1wiKX1cclxuICAgICAgICAgICAgICAgICAgICB9LCB7dHlwZTogXCJzZXBhcmF0b3JcIn0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJidXR0b25cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHtjb21tYW5kTmFtZTogXCJzcGxpdFRhYmxlQ2VsbFZlcnRpY2FsbHlcIiwgbGFiZWw6IGUoXCJreFwiKX1cclxuICAgICAgICAgICAgICAgICAgICB9LCB7dHlwZTogXCJidXR0b25cIiwgbW9kZWw6IHtjb21tYW5kTmFtZTogXCJzcGxpdFRhYmxlQ2VsbEhvcml6b250YWxseVwiLCBsYWJlbDogZShcImt5XCIpfX1dO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcmVwYXJlRHJvcGRvd24oZShcImt6XCIpLCBBRSwgaSwgdClcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9wcmVwYXJlRHJvcGRvd24odCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IFdiKG4pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IG5ldyB5cztcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgUEUodCwgbywgcywgYSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFViKHIsIGEsIG8udWkuY29tcG9uZW50RmFjdG9yeSk7XHJcbiAgICAgICAgICAgICAgICByLmJ1dHRvblZpZXcuc2V0KHtsYWJlbDogdCwgaWNvbjogZSwgdG9vbHRpcDogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgci5iaW5kKFwiaXNFbmFibGVkXCIpLnRvTWFueShzLCBcImlzRW5hYmxlZFwiLCAoLi4udCkgPT4gdC5zb21lKHQgPT4gdCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhyLCBcImV4ZWN1dGVcIiwgdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgby5leGVjdXRlKHQuc291cmNlLmNvbW1hbmROYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICBvLmVkaXRpbmcudmlldy5mb2N1cygpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFBFKHQsIGUsIGksIG4pIHtcclxuICAgICAgICAgICAgY29uc3QgbyA9IHQubW9kZWwgPSBuZXcgZV8odC5tb2RlbCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHtjb21tYW5kTmFtZTogciwgYmluZElzT246IHN9ID0gdC5tb2RlbDtcclxuICAgICAgICAgICAgaWYgKHQudHlwZSA9PT0gXCJidXR0b25cIiB8fCB0LnR5cGUgPT09IFwic3dpdGNoYnV0dG9uXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBlLmNvbW1hbmRzLmdldChyKTtcclxuICAgICAgICAgICAgICAgIGkucHVzaCh0KTtcclxuICAgICAgICAgICAgICAgIG8uc2V0KHtjb21tYW5kTmFtZTogcn0pO1xyXG4gICAgICAgICAgICAgICAgby5iaW5kKFwiaXNFbmFibGVkXCIpLnRvKHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICBvLmJpbmQoXCJpc09uXCIpLnRvKHQsIFwidmFsdWVcIilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvLnNldCh7d2l0aFRleHQ6IHRydWV9KTtcclxuICAgICAgICAgICAgbi5hZGQodClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIFNFIGV4dGVuZHMgSnUge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZG9tRXZlbnRUeXBlID0gW1wibW91c2Vtb3ZlXCIsIFwibW91c2V1cFwiLCBcIm1vdXNlbGVhdmVcIl1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb25Eb21FdmVudCh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmZpcmUodC50eXBlLCB0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBFRSh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBBcnJheS5mcm9tKHQpO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gblswXTtcclxuICAgICAgICAgICAgY29uc3QgciA9IG5bbi5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgY29uc3Qge3JvdzogcywgY29sdW1uOiBhfSA9IGUuZ2V0Q2VsbExvY2F0aW9uKG8pO1xyXG4gICAgICAgICAgICBjb25zdCBjID0gUkUobiwgYSwgaSwgZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHtyb3c6IGwsIGNvbHVtbjogZH0gPSBlLmdldENlbGxMb2NhdGlvbihyKTtcclxuICAgICAgICAgICAgY29uc3QgdSA9IGQgLSBhICsgMTtcclxuICAgICAgICAgICAgY29uc3QgaCA9IGwgLSBzICsgMTtcclxuICAgICAgICAgICAgSUUoYywgdSwgaCwgaSwgZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IGYgPSBXUChcInRhYmxlXCIsIG8pO1xyXG4gICAgICAgICAgICBWRShjLCBmLCBzLCBhLCBpKTtcclxuICAgICAgICAgICAgcmV0dXJuIGNcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFJFKHQsIGUsIGksIG4pIHtcclxuICAgICAgICAgICAgY29uc3QgbyA9IGkuY3JlYXRlRWxlbWVudChcInRhYmxlXCIpO1xyXG4gICAgICAgICAgICBjb25zdCByID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgY29uc3QgcyA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gV1AoXCJ0YWJsZVJvd1wiLCBlKTtcclxuICAgICAgICAgICAgICAgIGlmICghci5oYXModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5fY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpLmFwcGVuZChlLCBvKTtcclxuICAgICAgICAgICAgICAgICAgICByLnNldCh0LCBlKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IGUuX2Nsb25lKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qge2NvbHVtbjogY30gPSBuLmdldENlbGxMb2NhdGlvbihlKTtcclxuICAgICAgICAgICAgICAgIHMuc2V0KGEsIGMpO1xyXG4gICAgICAgICAgICAgICAgaS5hcHBlbmQoYSwgci5nZXQodCkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgT0UobywgZSwgcywgaSwgbik7XHJcbiAgICAgICAgICAgIHJldHVybiBvXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBPRSh0LCBlLCBpLCBuLCBvKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgciBvZiB0LmdldENoaWxkcmVuKCkpIHtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBBcnJheS5mcm9tKHIuZ2V0Q2hpbGRyZW4oKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7Y29sdW1uOiByfSA9IG8uZ2V0Q2VsbExvY2F0aW9uKHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBpLmdldCh0KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gcyAtIGU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIgIT09IGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgZSA9IDA7IGUgPCBhIC0gcjsgZSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBlID0gbi5jcmVhdGVFbGVtZW50KFwidGFibGVDZWxsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5pbnNlcnQoZSwgbi5jcmVhdGVQb3NpdGlvbkJlZm9yZSh0KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gbi5jcmVhdGVFbGVtZW50KFwicGFyYWdyYXBoXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5pbnNlcnQoaSwgZSwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLmluc2VydFRleHQoXCJcIiwgaSwgMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSUUodCwgZSwgaSwgbiwgbykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHIgb2YgdC5nZXRDaGlsZHJlbigpKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygci5nZXRDaGlsZHJlbigpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IHBhcnNlSW50KHQuZ2V0QXR0cmlidXRlKFwiY29sc3BhblwiKSB8fCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gcGFyc2VJbnQodC5nZXRBdHRyaWJ1dGUoXCJyb3dzcGFuXCIpIHx8IDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHtyb3c6IGEsIGNvbHVtbjogY30gPSBvLmdldENlbGxMb2NhdGlvbih0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYyArIHIgPiBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlIC0gYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuLnNldEF0dHJpYnV0ZShcImNvbHNwYW5cIiwgaSwgdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4ucmVtb3ZlQXR0cmlidXRlKFwiY29sc3BhblwiLCB0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhICsgcyA+IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZSA9IGkgLSBhO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZSA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4uc2V0QXR0cmlidXRlKFwicm93c3BhblwiLCBlLCB0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbi5yZW1vdmVBdHRyaWJ1dGUoXCJyb3dzcGFuXCIsIHQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFZFKHQsIGUsIGksIG4sIG8pIHtcclxuICAgICAgICAgICAgY29uc3QgciA9IHBhcnNlSW50KGUuZ2V0QXR0cmlidXRlKFwiaGVhZGluZ1Jvd3NcIikgfHwgMCk7XHJcbiAgICAgICAgICAgIGlmIChyID4gMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHIgLSBpO1xyXG4gICAgICAgICAgICAgICAgby5zZXRBdHRyaWJ1dGUoXCJoZWFkaW5nUm93c1wiLCBlLCB0KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHMgPSBwYXJzZUludChlLmdldEF0dHJpYnV0ZShcImhlYWRpbmdDb2x1bW5zXCIpIHx8IDApO1xyXG4gICAgICAgICAgICBpZiAocyA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBzIC0gbjtcclxuICAgICAgICAgICAgICAgIG8uc2V0QXR0cmlidXRlKFwiaGVhZGluZ0NvbHVtbnNcIiwgZSwgdClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIE5FID0gaSg5Nik7XHJcblxyXG4gICAgICAgIGNsYXNzIE1FIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJUYWJsZVNlbGVjdGlvblwiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1FTXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubW9kZWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKGUsIFwiZGVsZXRlQ29udGVudFwiLCAodCwgZSkgPT4gdGhpcy5faGFuZGxlRGVsZXRlQ29udGVudCh0LCBlKSwge3ByaW9yaXR5OiBcImhpZ2hcIn0pO1xyXG4gICAgICAgICAgICAgICAgdC5lZGl0aW5nLnZpZXcuYWRkT2JzZXJ2ZXIoU0UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZGVmaW5lU2VsZWN0aW9uQ29udmVydGVyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbmFibGVTaGlmdENsaWNrU2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbmFibGVNb3VzZURyYWdTZWxlY3Rpb24oKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXRTZWxlY3RlZFRhYmxlQ2VsbHMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG9TKHQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUubGVuZ3RoID09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0U2VsZWN0aW9uQXNGcmFnbWVudCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmdldFNlbGVjdGVkVGFibGVDZWxscygpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVkaXRvci5tb2RlbC5jaGFuZ2UoZSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBFRSh0LCB0aGlzLmVkaXRvci5wbHVnaW5zLmdldChcIlRhYmxlVXRpbHNcIiksIGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUuaW5zZXJ0KG4sIGksIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZGVmaW5lU2VsZWN0aW9uQ29udmVydGVyKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBTZXQ7XHJcbiAgICAgICAgICAgICAgICB0LmNvbnZlcnNpb24uZm9yKFwiZWRpdGluZ0Rvd25jYXN0XCIpLmFkZCh0ID0+IHQub24oXCJzZWxlY3Rpb25cIiwgKHQsIG4sIG8pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gby53cml0ZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgaShyKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gdGhpcy5nZXRTZWxlY3RlZFRhYmxlQ2VsbHMoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBvLm1hcHBlci50b1ZpZXdFbGVtZW50KHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByLmFkZENsYXNzKFwiY2stZWRpdG9yX19lZGl0YWJsZV9zZWxlY3RlZFwiLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5hZGQoaSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IG8ubWFwcGVyLnRvVmlld0VsZW1lbnQoc1tzLmxlbmd0aCAtIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICByLnNldFNlbGVjdGlvbihhLCAwKVxyXG4gICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImxvd2VzdFwifSkpO1xyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGkodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQucmVtb3ZlQ2xhc3MoXCJjay1lZGl0b3JfX2VkaXRhYmxlX3NlbGVjdGVkXCIsIGkpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGUuY2xlYXIoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZW5hYmxlU2hpZnRDbGlja1NlbGVjdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGxldCBlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHQuZWRpdGluZy52aWV3LmRvY3VtZW50LCBcIm1vdXNlZG93blwiLCAoaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5pc0VuYWJsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICghbi5kb21FdmVudC5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IHJTKHQubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uKVswXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIW8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLl9nZXRNb2RlbFRhYmxlQ2VsbEZyb21Eb21FdmVudChuKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAociAmJiB6RShvLCByKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0Q2VsbFNlbGVjdGlvbihvLCByKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbi5wcmV2ZW50RGVmYXVsdCgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHQuZWRpdGluZy52aWV3LmRvY3VtZW50LCBcIm1vdXNldXBcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGUgPSBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHQuZWRpdGluZy52aWV3LmRvY3VtZW50LCBcInNlbGVjdGlvbkNoYW5nZVwiLCB0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnN0b3AoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJoaWdoZXN0XCJ9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZW5hYmxlTW91c2VEcmFnU2VsZWN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgbGV0IGUsIGk7XHJcbiAgICAgICAgICAgICAgICBsZXQgbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgbGV0IG8gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odC5lZGl0aW5nLnZpZXcuZG9jdW1lbnQsIFwibW91c2Vkb3duXCIsICh0LCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0aGlzLmlzRW5hYmxlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGkuZG9tRXZlbnQuc2hpZnRLZXkgfHwgaS5kb21FdmVudC5jdHJsS2V5IHx8IGkuZG9tRXZlbnQuYWx0S2V5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlID0gdGhpcy5fZ2V0TW9kZWxUYWJsZUNlbGxGcm9tRG9tRXZlbnQoaSlcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0LmVkaXRpbmcudmlldy5kb2N1bWVudCwgXCJtb3VzZW1vdmVcIiwgKHQsIHIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXIuZG9tRXZlbnQuYnV0dG9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gdGhpcy5fZ2V0TW9kZWxUYWJsZUNlbGxGcm9tRG9tRXZlbnQocik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMgJiYgekUoZSwgcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9IHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbiAmJiBpICE9IGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBvID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRDZWxsU2VsZWN0aW9uKGUsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHIucHJldmVudERlZmF1bHQoKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHQuZWRpdGluZy52aWV3LmRvY3VtZW50LCBcIm1vdXNldXBcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBvID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgaSA9IG51bGxcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0LmVkaXRpbmcudmlldy5kb2N1bWVudCwgXCJzZWxlY3Rpb25DaGFuZ2VcIiwgdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5zdG9wKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwiaGlnaGVzdFwifSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2hhbmRsZURlbGV0ZUNvbnRlbnQodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgW2ksIG5dID0gZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSAhbiB8fCBuLmRpcmVjdGlvbiA9PSBcImJhY2t3YXJkXCI7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBzID0gb1MoaSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0LnN0b3AoKTtcclxuICAgICAgICAgICAgICAgIG8uY2hhbmdlKHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBzW3IgPyBzLmxlbmd0aCAtIDEgOiAwXTtcclxuICAgICAgICAgICAgICAgICAgICBvLmNoYW5nZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlIG9mIHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uZGVsZXRlQ29udGVudCh0LmNyZWF0ZVNlbGVjdGlvbihlLCBcImluXCIpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IG8uc2NoZW1hLmdldE5lYXJlc3RTZWxlY3Rpb25SYW5nZSh0LmNyZWF0ZVBvc2l0aW9uQXQoZSwgMCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpLmlzKFwiZG9jdW1lbnRTZWxlY3Rpb25cIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0U2VsZWN0aW9uKG4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnNldFRvKG4pXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfc2V0Q2VsbFNlbGVjdGlvbih0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5fZ2V0Q2VsbHNUb1NlbGVjdCh0LCBlKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLm1vZGVsLmNoYW5nZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0LnNldFNlbGVjdGlvbihpLmNlbGxzLm1hcChlID0+IHQuY3JlYXRlUmFuZ2VPbihlKSksIHtiYWNrd2FyZDogaS5iYWNrd2FyZH0pXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0TW9kZWxUYWJsZUNlbGxGcm9tRG9tRXZlbnQodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQudGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuZWRpdG9yLmVkaXRpbmcudmlldy5jcmVhdGVQb3NpdGlvbkF0KGUsIDApO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuZWRpdG9yLmVkaXRpbmcubWFwcGVyLnRvTW9kZWxQb3NpdGlvbihpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuLnBhcmVudDtcclxuICAgICAgICAgICAgICAgIGlmICghbykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG8uaXMoXCJ0YWJsZUNlbGxcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFdQKFwidGFibGVDZWxsXCIsIG8pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRDZWxsc1RvU2VsZWN0KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmVkaXRvci5wbHVnaW5zLmdldChcIlRhYmxlVXRpbHNcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5nZXRDZWxsTG9jYXRpb24odCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gaS5nZXRDZWxsTG9jYXRpb24oZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gTWF0aC5taW4obi5yb3csIG8ucm93KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBNYXRoLm1heChuLnJvdywgby5yb3cpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IE1hdGgubWluKG4uY29sdW1uLCBvLmNvbHVtbik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gTWF0aC5tYXgobi5jb2x1bW4sIG8uY29sdW1uKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGwgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiBuZXcgWlAoV1AoXCJ0YWJsZVwiLCB0KSwge3N0YXJ0Um93OiByLCBlbmRSb3c6IHN9KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmNvbHVtbiA+PSBhICYmIGUuY29sdW1uIDw9IGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbC5wdXNoKGUuY2VsbClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoQkUobiwgbykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge2NlbGxzOiBsLnJldmVyc2UoKSwgYmFja3dhcmQ6IHRydWV9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge2NlbGxzOiBsLCBiYWNrd2FyZDogZmFsc2V9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEJFKHQsIGUpIHtcclxuICAgICAgICAgICAgaWYgKHQucm93ID4gZS5yb3cpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQucm93ID09IGUucm93ICYmIHQuY29sdW1uID4gZS5jb2x1bW4pIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB6RSh0LCBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0LnBhcmVudC5wYXJlbnQgPT0gZS5wYXJlbnQucGFyZW50XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBMRSBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiVGFibGVDbGlwYm9hcmRcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtNRV1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmVkaXRpbmcudmlldy5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8oZSwgXCJjb3B5XCIsICh0LCBlKSA9PiB0aGlzLl9vbkNvcHlDdXQodCwgZSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhlLCBcImN1dFwiLCAodCwgZSkgPT4gdGhpcy5fb25Db3B5Q3V0KHQsIGUpKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfb25Db3B5Q3V0KHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmVkaXRvci5wbHVnaW5zLmdldChcIlRhYmxlU2VsZWN0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpLmdldFNlbGVjdGVkVGFibGVDZWxscygpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodC5uYW1lID09IFwiY3V0XCIgJiYgdGhpcy5lZGl0b3IuaXNSZWFkT25seSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgdC5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5lZGl0b3IuZGF0YTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0aGlzLmVkaXRvci5lZGl0aW5nLnZpZXcuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbi50b1ZpZXcoaS5nZXRTZWxlY3Rpb25Bc0ZyYWdtZW50KCkpO1xyXG4gICAgICAgICAgICAgICAgby5maXJlKFwiY2xpcGJvYXJkT3V0cHV0XCIsIHtkYXRhVHJhbnNmZXI6IGUuZGF0YVRyYW5zZmVyLCBjb250ZW50OiByLCBtZXRob2Q6IHQubmFtZX0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBGRSA9IGkoOTgpO1xyXG5cclxuICAgICAgICBjbGFzcyBERSBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCByZXF1aXJlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbd0UsIFRFLCBNRSwgTEUsIEZ2XVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJUYWJsZVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBqRSA9IGkoMTAwKTtcclxuXHJcbiAgICAgICAgY2xhc3MgSEUgZXh0ZW5kcyBHcCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGBjay1sYWJlbGVkLXZpZXctJHtpcygpfWA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gYGNrLWxhYmVsZWQtdmlldy1zdGF0dXMtJHtpcygpfWA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcgPSBlKHRoaXMsIGksIG4pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJsYWJlbFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaXNFbmFibGVkXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJlcnJvclRleHRcIiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImluZm9UZXh0XCIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJjbGFzc1wiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGFiZWxWaWV3ID0gdGhpcy5fY3JlYXRlTGFiZWxWaWV3KGkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0dXNWaWV3ID0gdGhpcy5fY3JlYXRlU3RhdHVzVmlldyhuKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmluZChcIl9zdGF0dXNUZXh0XCIpLnRvKHRoaXMsIFwiZXJyb3JUZXh0XCIsIHRoaXMsIFwiaW5mb1RleHRcIiwgKHQsIGUpID0+IHQgfHwgZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gdGhpcy5iaW5kVGVtcGxhdGU7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge2NsYXNzOiBbXCJja1wiLCBcImNrLWxhYmVsZWQtdmlld1wiLCBvLnRvKFwiY2xhc3NcIiksIG8uaWYoXCJpc0VuYWJsZWRcIiwgXCJjay1kaXNhYmxlZFwiLCB0ID0+ICF0KV19LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbdGhpcy5sYWJlbFZpZXcsIHRoaXMudmlldywgdGhpcy5zdGF0dXNWaWV3XVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUxhYmVsVmlldyh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gbmV3IE1rKHRoaXMubG9jYWxlKTtcclxuICAgICAgICAgICAgICAgIGUuZm9yID0gdDtcclxuICAgICAgICAgICAgICAgIGUuYmluZChcInRleHRcIikudG8odGhpcywgXCJsYWJlbFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVTdGF0dXNWaWV3KHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgR3AodGhpcy5sb2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuYmluZFRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgZS5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcImRpdlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFtcImNrXCIsIFwiY2stbGFiZWxlZC12aWV3X19zdGF0dXNcIiwgaS5pZihcImVycm9yVGV4dFwiLCBcImNrLWxhYmVsZWQtdmlld19fc3RhdHVzX2Vycm9yXCIpLCBpLmlmKFwiX3N0YXR1c1RleHRcIiwgXCJjay1oaWRkZW5cIiwgdCA9PiAhdCldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogdCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogaS5pZihcImVycm9yVGV4dFwiLCBcImFsZXJ0XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW3t0ZXh0OiBpLnRvKFwiX3N0YXR1c1RleHRcIil9XVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmb2N1cygpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5mb2N1cygpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFdFKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBZdih0LmxvY2FsZSk7XHJcbiAgICAgICAgICAgIG4uc2V0KHtpZDogZSwgYXJpYURlc2NyaWJlZEJ5SWQ6IGl9KTtcclxuICAgICAgICAgICAgbi5iaW5kKFwiaXNSZWFkT25seVwiKS50byh0LCBcImlzRW5hYmxlZFwiLCB0ID0+ICF0KTtcclxuICAgICAgICAgICAgbi5iaW5kKFwiaGFzRXJyb3JcIikudG8odCwgXCJlcnJvclRleHRcIiwgdCA9PiAhIXQpO1xyXG4gICAgICAgICAgICBuLm9uKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdC5lcnJvclRleHQgPSBudWxsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcUUodCwgZSwgaSkge1xyXG4gICAgICAgICAgICBjb25zdCBuID0gV2IodC5sb2NhbGUpO1xyXG4gICAgICAgICAgICBuLnNldCh7aWQ6IGUsIGFyaWFEZXNjcmliZWRCeUlkOiBpfSk7XHJcbiAgICAgICAgICAgIG4uYmluZChcImlzRW5hYmxlZFwiKS50byh0KTtcclxuICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBVRSA9IGkoMTAyKTtcclxuXHJcbiAgICAgICAgY2xhc3MgJEUgZXh0ZW5kcyBHcCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRoaXMuYmluZFRlbXBsYXRlO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJ2YWx1ZVwiLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiaWRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImlzUmVhZE9ubHlcIiwgZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJoYXNFcnJvclwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcImFyaWFEZXNjcmliZWRCeUlkXCIpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3Bkb3duVmlldyA9IHRoaXMuX2NyZWF0ZURyb3Bkb3duVmlldyh0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2lucHV0VmlldyA9IHRoaXMuX2NyZWF0ZUlucHV0VGV4dFZpZXcodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogW1wiY2tcIiwgXCJjay1pbnB1dC1jb2xvclwiLCBpLmlmKFwiaGFzRXJyb3JcIiwgXCJjay1lcnJvclwiKV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBpLnRvKFwiaWRcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYXJpYS1pbnZhbGlkXCI6IGkuaWYoXCJoYXNFcnJvclwiLCB0cnVlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhcmlhLWRlc2NyaWJlZGJ5XCI6IGkudG8oXCJhcmlhRGVzY3JpYmVkQnlJZFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFt0aGlzLl9pbnB1dFZpZXcsIHRoaXMuX2Ryb3Bkb3duVmlld11cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZvY3VzKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5wdXRWaWV3LmZvY3VzKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZURyb3Bkb3duVmlldygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmJpbmRUZW1wbGF0ZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9jcmVhdGVDb2xvckdyaWQodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gV2IodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gbmV3IEdwO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHRoaXMuX2NyZWF0ZVJlbW92ZUNvbG9yQnV0dG9uKHQpO1xyXG4gICAgICAgICAgICAgICAgby5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcInNwYW5cIixcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBbXCJja1wiLCBcImNrLWlucHV0LWNvbG9yX19idXR0b25fX3ByZXZpZXdcIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7YmFja2dyb3VuZENvbG9yOiBlLnRvKFwidmFsdWVcIil9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiBcInNwYW5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge2NsYXNzOiBbXCJja1wiLCBcImNrLWlucHV0LWNvbG9yX19idXR0b25fX3ByZXZpZXdfX25vLWNvbG9yLWluZGljYXRvclwiLCBlLmlmKFwidmFsdWVcIiwgXCJjay1oaWRkZW5cIiwgdCA9PiB0ICE9IFwiXCIpXX1cclxuICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBuLmJ1dHRvblZpZXcuZXh0ZW5kVGVtcGxhdGUoe2F0dHJpYnV0ZXM6IHtjbGFzczogXCJjay1pbnB1dC1jb2xvcl9fYnV0dG9uXCJ9fSk7XHJcbiAgICAgICAgICAgICAgICBuLmJ1dHRvblZpZXcuY2hpbGRyZW4uYWRkKG8pO1xyXG4gICAgICAgICAgICAgICAgbi5wYW5lbFBvc2l0aW9uID0gdC51aUxhbmd1YWdlRGlyZWN0aW9uID09PSBcInJ0bFwiID8gXCJzZVwiIDogXCJzd1wiO1xyXG4gICAgICAgICAgICAgICAgbi5wYW5lbFZpZXcuY2hpbGRyZW4uYWRkKHIpO1xyXG4gICAgICAgICAgICAgICAgbi5wYW5lbFZpZXcuY2hpbGRyZW4uYWRkKGkpO1xyXG4gICAgICAgICAgICAgICAgbi5iaW5kKFwiaXNFbmFibGVkXCIpLnRvKHRoaXMsIFwiaXNSZWFkT25seVwiLCB0ID0+ICF0KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVJbnB1dFRleHRWaWV3KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMubG9jYWxlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBZdih0KTtcclxuICAgICAgICAgICAgICAgIGUuYmluZChcInZhbHVlXCIpLnRvKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgZS5iaW5kKFwiaXNSZWFkT25seVwiKS50byh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGUuYmluZChcImhhc0Vycm9yXCIpLnRvKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgZS5vbihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gZS5lbGVtZW50LnZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGUuZGVsZWdhdGUoXCJpbnB1dFwiKS50byh0aGlzKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVSZW1vdmVDb2xvckJ1dHRvbigpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gbmV3IGhiKHQpO1xyXG4gICAgICAgICAgICAgICAgaS5jbGFzcyA9IFwiY2staW5wdXQtY29sb3JfX3JlbW92ZS1jb2xvclwiO1xyXG4gICAgICAgICAgICAgICAgaS53aXRoVGV4dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpLmljb24gPSB6aztcclxuICAgICAgICAgICAgICAgIGkubGFiZWwgPSBlKFwibGlcIik7XHJcbiAgICAgICAgICAgICAgICBpLm9uKFwiZXhlY3V0ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZHJvcGRvd25WaWV3LmlzT3BlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZmlyZShcImlucHV0XCIpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVDb2xvckdyaWQodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IG5ldyBWayh0LCB7Y29sb3JEZWZpbml0aW9uczogdGhpcy5vcHRpb25zLmNvbG9yRGVmaW5pdGlvbnMsIGNvbHVtbnM6IHRoaXMub3B0aW9ucy5jb2x1bW5zfSk7XHJcbiAgICAgICAgICAgICAgICBlLm9uKFwiZXhlY3V0ZVwiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudmFsdWUgPSBlLnZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2Ryb3Bkb3duVmlldy5pc09wZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJpbnB1dFwiKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBlLmJpbmQoXCJzZWxlY3RlZENvbG9yXCIpLnRvKHRoaXMsIFwidmFsdWVcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBHRSA9IG5iLmRlZmF1bHRQb3NpdGlvbnM7XHJcbiAgICAgICAgY29uc3QgS0UgPSBbR0Uubm9ydGhBcnJvd1NvdXRoLCBHRS5ub3J0aEFycm93U291dGhXZXN0LCBHRS5ub3J0aEFycm93U291dGhFYXN0LCBHRS5zb3V0aEFycm93Tm9ydGgsIEdFLnNvdXRoQXJyb3dOb3J0aFdlc3QsIEdFLnNvdXRoQXJyb3dOb3J0aEVhc3RdO1xyXG4gICAgICAgIGNvbnN0IEpFID0gdCA9PiB0ID09PSBcIlwiO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBZRSh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LnBsdWdpbnMuZ2V0KFwiQ29udGV4dHVhbEJhbGxvb25cIik7XHJcbiAgICAgICAgICAgIGlmIChuUyh0LmVkaXRpbmcudmlldy5kb2N1bWVudC5zZWxlY3Rpb24pKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbjtcclxuICAgICAgICAgICAgICAgIGlmIChlID09PSBcImNlbGxcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIG4gPSBYRSh0KVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBuID0gUUUodClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGkudXBkYXRlUG9zaXRpb24obilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gUUUodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24uZ2V0Rmlyc3RQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICBjb25zdCBpID0gV1AoXCJ0YWJsZVwiLCBlKTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IHQuZWRpdGluZy5tYXBwZXIudG9WaWV3RWxlbWVudChpKTtcclxuICAgICAgICAgICAgcmV0dXJuIHt0YXJnZXQ6IHQuZWRpdGluZy52aWV3LmRvbUNvbnZlcnRlci52aWV3VG9Eb20obiksIHBvc2l0aW9uczogS0V9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBYRSh0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSB1Uih0Lm1vZGVsLmRvY3VtZW50LnNlbGVjdGlvbi5nZXRGaXJzdFBvc2l0aW9uKCkpO1xyXG4gICAgICAgICAgICBjb25zdCBpID0gdC5lZGl0aW5nLm1hcHBlci50b1ZpZXdFbGVtZW50KGUpO1xyXG4gICAgICAgICAgICByZXR1cm4ge3RhcmdldDogdC5lZGl0aW5nLnZpZXcuZG9tQ29udmVydGVyLnZpZXdUb0RvbShpKSwgcG9zaXRpb25zOiBLRX1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFpFKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIG5vbmU6IHQoXCJtcVwiKSxcclxuICAgICAgICAgICAgICAgIHNvbGlkOiB0KFwibXJcIiksXHJcbiAgICAgICAgICAgICAgICBkb3R0ZWQ6IHQoXCJtc1wiKSxcclxuICAgICAgICAgICAgICAgIGRhc2hlZDogdChcIm10XCIpLFxyXG4gICAgICAgICAgICAgICAgZG91YmxlOiB0KFwibXVcIiksXHJcbiAgICAgICAgICAgICAgICBncm9vdmU6IHQoXCJtdlwiKSxcclxuICAgICAgICAgICAgICAgIHJpZGdlOiB0KFwibXdcIiksXHJcbiAgICAgICAgICAgICAgICBpbnNldDogdChcIm14XCIpLFxyXG4gICAgICAgICAgICAgICAgb3V0c2V0OiB0KFwibXlcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdFIodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdChcIm16XCIpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBlUih0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0KFwibmFcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGlSKHQpIHtcclxuICAgICAgICAgICAgdCA9IHQudHJpbSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gSkUodCkgfHwgdEModClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG5SKHQpIHtcclxuICAgICAgICAgICAgdCA9IHQudHJpbSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gSkUodCkgfHwgbFIodCkgfHwgb0ModCkgfHwgc0ModClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9SKHQpIHtcclxuICAgICAgICAgICAgdCA9IHQudHJpbSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gSkUodCkgfHwgbFIodCkgfHwgb0ModClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJSKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IG5ldyB5cztcclxuICAgICAgICAgICAgY29uc3QgaSA9IFpFKHQudCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbiBpbiBpKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYnV0dG9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IG5ldyBlXyh7X2JvcmRlclN0eWxlVmFsdWU6IG4gPT09IFwibm9uZVwiID8gXCJcIiA6IG4sIGxhYmVsOiBpW25dLCB3aXRoVGV4dDogdHJ1ZX0pXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgaWYgKG4gPT09IFwibm9uZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgby5tb2RlbC5iaW5kKFwiaXNPblwiKS50byh0LCBcImJvcmRlclN0eWxlXCIsIHQgPT4gIXQpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIG8ubW9kZWwuYmluZChcImlzT25cIikudG8odCwgXCJib3JkZXJTdHlsZVwiLCB0ID0+IHQgPT09IG4pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlLmFkZChvKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBzUih7dmlldzogdCwgaWNvbnM6IGUsIHRvb2xiYXI6IGksIGxhYmVsczogbiwgcHJvcGVydHlOYW1lOiBvLCBuYW1lVG9WYWx1ZTogcn0pIHtcclxuICAgICAgICAgICAgZm9yIChjb25zdCBzIGluIG4pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBuZXcgaGIodC5sb2NhbGUpO1xyXG4gICAgICAgICAgICAgICAgYS5zZXQoe2xhYmVsOiBuW3NdLCBpY29uOiBlW3NdfSk7XHJcbiAgICAgICAgICAgICAgICBhLmJpbmQoXCJpc09uXCIpLnRvKHQsIG8sIHQgPT4gdCA9PT0gcihzKSk7XHJcbiAgICAgICAgICAgICAgICBhLm9uKFwiZXhlY3V0ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdFtvXSA9IHIocylcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaS5pdGVtcy5hZGQoYSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgYVIgPSBbe2NvbG9yOiBcImhzbCgwLCAwJSwgMCUpXCIsIGxhYmVsOiBcIkJsYWNrXCJ9LCB7XHJcbiAgICAgICAgICAgIGNvbG9yOiBcImhzbCgwLCAwJSwgMzAlKVwiLFxyXG4gICAgICAgICAgICBsYWJlbDogXCJEaW0gZ3JleVwiXHJcbiAgICAgICAgfSwge2NvbG9yOiBcImhzbCgwLCAwJSwgNjAlKVwiLCBsYWJlbDogXCJHcmV5XCJ9LCB7XHJcbiAgICAgICAgICAgIGNvbG9yOiBcImhzbCgwLCAwJSwgOTAlKVwiLFxyXG4gICAgICAgICAgICBsYWJlbDogXCJMaWdodCBncmV5XCJcclxuICAgICAgICB9LCB7Y29sb3I6IFwiaHNsKDAsIDAlLCAxMDAlKVwiLCBsYWJlbDogXCJXaGl0ZVwiLCBoYXNCb3JkZXI6IHRydWV9LCB7XHJcbiAgICAgICAgICAgIGNvbG9yOiBcImhzbCgwLCA3NSUsIDYwJSlcIixcclxuICAgICAgICAgICAgbGFiZWw6IFwiUmVkXCJcclxuICAgICAgICB9LCB7Y29sb3I6IFwiaHNsKDMwLCA3NSUsIDYwJSlcIiwgbGFiZWw6IFwiT3JhbmdlXCJ9LCB7XHJcbiAgICAgICAgICAgIGNvbG9yOiBcImhzbCg2MCwgNzUlLCA2MCUpXCIsXHJcbiAgICAgICAgICAgIGxhYmVsOiBcIlllbGxvd1wiXHJcbiAgICAgICAgfSwge2NvbG9yOiBcImhzbCg5MCwgNzUlLCA2MCUpXCIsIGxhYmVsOiBcIkxpZ2h0IGdyZWVuXCJ9LCB7XHJcbiAgICAgICAgICAgIGNvbG9yOiBcImhzbCgxMjAsIDc1JSwgNjAlKVwiLFxyXG4gICAgICAgICAgICBsYWJlbDogXCJHcmVlblwiXHJcbiAgICAgICAgfSwge2NvbG9yOiBcImhzbCgxNTAsIDc1JSwgNjAlKVwiLCBsYWJlbDogXCJBcXVhbWFyaW5lXCJ9LCB7XHJcbiAgICAgICAgICAgIGNvbG9yOiBcImhzbCgxODAsIDc1JSwgNjAlKVwiLFxyXG4gICAgICAgICAgICBsYWJlbDogXCJUdXJxdW9pc2VcIlxyXG4gICAgICAgIH0sIHtjb2xvcjogXCJoc2woMjEwLCA3NSUsIDYwJSlcIiwgbGFiZWw6IFwiTGlnaHQgYmx1ZVwifSwge1xyXG4gICAgICAgICAgICBjb2xvcjogXCJoc2woMjQwLCA3NSUsIDYwJSlcIixcclxuICAgICAgICAgICAgbGFiZWw6IFwiQmx1ZVwiXHJcbiAgICAgICAgfSwge2NvbG9yOiBcImhzbCgyNzAsIDc1JSwgNjAlKVwiLCBsYWJlbDogXCJQdXJwbGVcIn1dO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBjUih0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG5ldyAkRShlLmxvY2FsZSwge2NvbG9yRGVmaW5pdGlvbnM6IGRSKHQuY29sb3JDb25maWcpLCBjb2x1bW5zOiB0LmNvbHVtbnN9KTtcclxuICAgICAgICAgICAgICAgIG8uc2V0KHtpZDogaSwgYXJpYURlc2NyaWJlZEJ5SWQ6IG59KTtcclxuICAgICAgICAgICAgICAgIG8uYmluZChcImlzUmVhZE9ubHlcIikudG8oZSwgXCJpc0VuYWJsZWRcIiwgdCA9PiAhdCk7XHJcbiAgICAgICAgICAgICAgICBvLmJpbmQoXCJlcnJvclRleHRcIikudG8oZSk7XHJcbiAgICAgICAgICAgICAgICBvLm9uKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGUuZXJyb3JUZXh0ID0gbnVsbFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gb1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBsUih0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSBwYXJzZUZsb2F0KHQpO1xyXG4gICAgICAgICAgICByZXR1cm4gIU51bWJlci5pc05hTihlKSAmJiB0ID09PSBTdHJpbmcoZSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGRSKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHQubWFwKHQgPT4gKHtjb2xvcjogdC5tb2RlbCwgbGFiZWw6IHQubGFiZWwsIG9wdGlvbnM6IHtoYXNCb3JkZXI6IHQuaGFzQm9yZGVyfX0pKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gdVIodCkge1xyXG4gICAgICAgICAgICBjb25zdCBlID0gdC5ub2RlQWZ0ZXIgJiYgdC5ub2RlQWZ0ZXIuaXMoXCJ0YWJsZUNlbGxcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBlID8gdC5ub2RlQWZ0ZXIgOiBXUChcInRhYmxlQ2VsbFwiLCB0KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGhSID0gaSgxMDQpO1xyXG5cclxuICAgICAgICBjbGFzcyBmUiBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmJpbmRUZW1wbGF0ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiY2xhc3NcIiwgZS5jbGFzcyB8fCBudWxsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSB0aGlzLmNyZWF0ZUNvbGxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIGlmIChlLmNoaWxkcmVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5jaGlsZHJlbi5mb3JFYWNoKHQgPT4gdGhpcy5jaGlsZHJlbi5hZGQodCkpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldChcIl9yb2xlXCIsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoXCJfYXJpYUxhYmVsbGVkQnlcIiwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5sYWJlbFZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNldCh7X3JvbGU6IFwiZ3JvdXBcIiwgX2FyaWFMYWJlbGxlZEJ5OiBlLmxhYmVsVmlldy5pZH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwiZGl2XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogW1wiY2tcIiwgXCJjay1mb3JtX19yb3dcIiwgaS50byhcImNsYXNzXCIpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm9sZTogaS50byhcIl9yb2xlXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFyaWEtbGFiZWxsZWRieVwiOiBpLnRvKFwiX2FyaWFMYWJlbGxlZEJ5XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogdGhpcy5jaGlsZHJlblxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIGdSID0gaSgxMDYpO1xyXG5cclxuICAgICAgICBjbGFzcyBtUiBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLmJpbmRUZW1wbGF0ZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4gPSB0aGlzLmNyZWF0ZUNvbGxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwiY2xhc3NcIiwgZS5jbGFzcyB8fCBudWxsKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KFwibGFiZWxcIiwgZS5sYWJlbCB8fCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgR3AodCk7XHJcbiAgICAgICAgICAgICAgICBuLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwic3BhblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtjbGFzczogW1wiY2tcIiwgXCJjay1mb3JtX19oZWFkZXJfX2xhYmVsXCJdfSxcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW3t0ZXh0OiBpLnRvKFwibGFiZWxcIil9XVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmFkZChuKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VGVtcGxhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIHRhZzogXCJkaXZcIixcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrXCIsIFwiY2stZm9ybV9faGVhZGVyXCIsIGkudG8oXCJjbGFzc1wiKV19LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgcFIgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMTAuMjYxIDcuMDYybDIuODggMS42NjNhLjc1Ljc1IDAgMCAxLS43NSAxLjNMMTAuNSA4LjkzM3Y3LjMxN2EuNzUuNzUgMCAxIDEtMS41IDBWOC45MzJsLTEuODkgMS4wOTNhLjc1Ljc1IDAgMCAxLS43NS0xLjNsMi44NzktMS42NjNhLjc1Mi43NTIgMCAwIDEgLjUxMS0uMTg3Ljc1Mi43NTIgMCAwIDEgLjUxMS4xODd6TTE1LjI1IDRhLjc1Ljc1IDAgMSAxIDAgMS41SDQuNzVhLjc1Ljc1IDAgMCAxIDAtMS41aDEwLjV6XCIvPjwvc3ZnPic7XHJcbiAgICAgICAgdmFyIGJSID0gJzxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTkuNzUgMTEuODc1YS43NTIuNzUyIDAgMCAxIC41MDguMTg0bDIuODgzIDEuNjY2YS43NS43NSAwIDAgMS0uNjU5IDEuMzQ0bC0uMDkxLS4wNDQtMS44OTItMS4wOTMuMDAxIDQuMzE4YS43NS43NSAwIDEgMS0xLjUgMHYtNC4zMTdsLTEuODkgMS4wOTJhLjc1Ljc1IDAgMCAxLS43NS0xLjNsMi44NzktMS42NjNhLjc1Mi43NTIgMCAwIDEgLjUxLS4xODd6TTE1LjI1IDlhLjc1Ljc1IDAgMSAxIDAgMS41SDQuNzVhLjc1Ljc1IDAgMSAxIDAtMS41aDEwLjV6TTkuNzUuMzc1YS43NS43NSAwIDAgMSAuNzUuNzV2NC4zMThsMS44OS0xLjA5My4wOTItLjA0NWEuNzUuNzUgMCAwIDEgLjY1OSAxLjM0NGwtMi44ODMgMS42NjdhLjc1Mi43NTIgMCAwIDEtLjUwOC4xODQuNzUyLjc1MiAwIDAgMS0uNTExLS4xODdMNi4zNTkgNS42NWEuNzUuNzUgMCAwIDEgLjc1LTEuMjk5TDkgNS40NDJWMS4xMjVhLjc1Ljc1IDAgMCAxIC43NS0uNzV6XCIvPjwvc3ZnPic7XHJcbiAgICAgICAgdmFyIHdSID0gJzxzdmcgdmlld0JveD1cIjAgMCAyMCAyMFwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48cGF0aCBkPVwiTTkuMjM5IDEzLjkzOGwtMi44OC0xLjY2M2EuNzUuNzUgMCAwIDEgLjc1LTEuM0w5IDEyLjA2N1Y0Ljc1YS43NS43NSAwIDEgMSAxLjUgMHY3LjMxOGwxLjg5LTEuMDkzYS43NS43NSAwIDAgMSAuNzUgMS4zbC0yLjg3OSAxLjY2M2EuNzUyLjc1MiAwIDAgMS0uNTExLjE4Ny43NTIuNzUyIDAgMCAxLS41MTEtLjE4N3pNNC4yNSAxN2EuNzUuNzUgMCAxIDEgMC0xLjVoMTAuNWEuNzUuNzUgMCAwIDEgMCAxLjVINC4yNXpcIi8+PC9zdmc+JztcclxuICAgICAgICB2YXIga1IgPSBpKDEyKTtcclxuICAgICAgICB2YXIgX1IgPSBpKDEzKTtcclxuICAgICAgICB2YXIgdlIgPSBpKDExMCk7XHJcbiAgICAgICAgY29uc3QgeVIgPSB7bGVmdDogWncsIGNlbnRlcjogZWssIHJpZ2h0OiB0aywganVzdGlmeTogaWssIHRvcDogcFIsIG1pZGRsZTogYlIsIGJvdHRvbTogd1J9O1xyXG5cclxuICAgICAgICBjbGFzcyB4UiBleHRlbmRzIEdwIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldCh7XHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyU3R5bGU6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFkZGluZzogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgd2lkdGg6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGhvcml6b250YWxBbGlnbm1lbnQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdmVydGljYWxBbGlnbm1lbnQ6IFwiXCJcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vcHRpb25zID0gZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHtib3JkZXJTdHlsZURyb3Bkb3duOiBpLCBib3JkZXJXaWR0aElucHV0OiBuLCBib3JkZXJDb2xvcklucHV0OiBvLCBib3JkZXJSb3dMYWJlbDogcn0gPSB0aGlzLl9jcmVhdGVCb3JkZXJGaWVsZHMoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHt3aWR0aElucHV0OiBzLCBvcGVyYXRvckxhYmVsOiBhLCBoZWlnaHRJbnB1dDogYywgZGltZW5zaW9uc0xhYmVsOiBsfSA9IHRoaXMuX2NyZWF0ZURpbWVuc2lvbkZpZWxkcygpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qge2hvcml6b250YWxBbGlnbm1lbnRUb29sYmFyOiBkLCB2ZXJ0aWNhbEFsaWdubWVudFRvb2xiYXI6IHUsIGFsaWdubWVudExhYmVsOiBofSA9IHRoaXMuX2NyZWF0ZUFsaWdubWVudEZpZWxkcygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIgPSBuZXcgZmI7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmtleXN0cm9rZXMgPSBuZXcgZHA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuID0gdGhpcy5jcmVhdGVDb2xsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvcmRlclN0eWxlRHJvcGRvd24gPSBpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ib3JkZXJXaWR0aElucHV0ID0gbjtcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9yZGVyQ29sb3JJbnB1dCA9IG87XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJhY2tncm91bmRJbnB1dCA9IHRoaXMuX2NyZWF0ZUJhY2tncm91bmRGaWVsZCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wYWRkaW5nSW5wdXQgPSB0aGlzLl9jcmVhdGVQYWRkaW5nRmllbGQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMud2lkdGhJbnB1dCA9IHM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhlaWdodElucHV0ID0gYztcclxuICAgICAgICAgICAgICAgIHRoaXMuaG9yaXpvbnRhbEFsaWdubWVudFRvb2xiYXIgPSBkO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52ZXJ0aWNhbEFsaWdubWVudFRvb2xiYXIgPSB1O1xyXG4gICAgICAgICAgICAgICAgY29uc3Qge3NhdmVCdXR0b25WaWV3OiBmLCBjYW5jZWxCdXR0b25WaWV3OiBnfSA9IHRoaXMuX2NyZWF0ZUFjdGlvbkJ1dHRvbnMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2F2ZUJ1dHRvblZpZXcgPSBmO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW5jZWxCdXR0b25WaWV3ID0gZztcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzYWJsZXMgPSBuZXcgYnA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c0N5Y2xlciA9IG5ldyB5Yih7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9jdXNhYmxlczogdGhpcy5fZm9jdXNhYmxlcyxcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c1RyYWNrZXI6IHRoaXMuZm9jdXNUcmFja2VyLFxyXG4gICAgICAgICAgICAgICAgICAgIGtleXN0cm9rZUhhbmRsZXI6IHRoaXMua2V5c3Ryb2tlcyxcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb25zOiB7Zm9jdXNQcmV2aW91czogXCJzaGlmdCArIHRhYlwiLCBmb2N1c05leHQ6IFwidGFiXCJ9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uYWRkKG5ldyBtUih0LCB7bGFiZWw6IHRoaXMudChcItCh0LLQvtC50YHRgtCy0LAg0Y/Rh9C10LnQutC4XCIpfSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5hZGQobmV3IGZSKHQsIHtcclxuICAgICAgICAgICAgICAgICAgICBsYWJlbFZpZXc6IHIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtyLCBpLCBvLCBuXSxcclxuICAgICAgICAgICAgICAgICAgICBjbGFzczogXCJjay10YWJsZS1mb3JtX19ib3JkZXItcm93XCJcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uYWRkKG5ldyBmUih0LCB7Y2hpbGRyZW46IFt0aGlzLmJhY2tncm91bmRJbnB1dF19KSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmFkZChuZXcgZlIodCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbbmV3IGZSKHQsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGFiZWxWaWV3OiBsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW2wsIHMsIGEsIGNdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzczogXCJjay10YWJsZS1mb3JtX19kaW1lbnNpb25zLXJvd1wiXHJcbiAgICAgICAgICAgICAgICAgICAgfSksIG5ldyBmUih0LCB7Y2hpbGRyZW46IFt0aGlzLnBhZGRpbmdJbnB1dF0sIGNsYXNzOiBcImNrLXRhYmxlLWNlbGwtcHJvcGVydGllcy1mb3JtX19wYWRkaW5nLXJvd1wifSldXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmFkZChuZXcgZlIodCwge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsVmlldzogaCxcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW2gsIGQsIHVdLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBcImNrLXRhYmxlLWNlbGwtcHJvcGVydGllcy1mb3JtX19hbGlnbm1lbnQtcm93XCJcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uYWRkKG5ldyBmUih0LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFt0aGlzLnNhdmVCdXR0b25WaWV3LCB0aGlzLmNhbmNlbEJ1dHRvblZpZXddLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBcImNrLXRhYmxlLWZvcm1fX2FjdGlvbi1yb3dcIlxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcImZvcm1cIixcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzOiBbXCJja1wiLCBcImNrLWZvcm1cIiwgXCJjay10YWJsZS1mb3JtXCIsIFwiY2stdGFibGUtY2VsbC1wcm9wZXJ0aWVzLWZvcm1cIl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhYmluZGV4OiBcIi0xXCJcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIFF2KHt2aWV3OiB0aGlzfSk7XHJcbiAgICAgICAgICAgICAgICBbdGhpcy5ib3JkZXJTdHlsZURyb3Bkb3duLCB0aGlzLmJvcmRlckNvbG9ySW5wdXQsIHRoaXMuYm9yZGVyV2lkdGhJbnB1dCwgdGhpcy5iYWNrZ3JvdW5kSW5wdXQsIHRoaXMud2lkdGhJbnB1dCwgdGhpcy5oZWlnaHRJbnB1dCwgdGhpcy5wYWRkaW5nSW5wdXQsIHRoaXMuaG9yaXpvbnRhbEFsaWdubWVudFRvb2xiYXIsIHRoaXMudmVydGljYWxBbGlnbm1lbnRUb29sYmFyLCB0aGlzLnNhdmVCdXR0b25WaWV3LCB0aGlzLmNhbmNlbEJ1dHRvblZpZXddLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNhYmxlcy5hZGQodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIuYWRkKHQuZWxlbWVudClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzdHJva2VzLmxpc3RlblRvKHRoaXMuZWxlbWVudClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9jdXMoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c0N5Y2xlci5mb2N1c0ZpcnN0KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUJvcmRlckZpZWxkcygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBjUih7Y29sb3JDb25maWc6IHRoaXMub3B0aW9ucy5ib3JkZXJDb2xvcnMsIGNvbHVtbnM6IDV9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IE1rKGUpO1xyXG4gICAgICAgICAgICAgICAgbi50ZXh0ID0gaShcIm5iXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IFpFKGkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG5ldyBIRShlLCBxRSk7XHJcbiAgICAgICAgICAgICAgICByLnNldCh7bGFiZWw6IGkoXCJuY1wiKSwgY2xhc3M6IFwiY2stdGFibGUtZm9ybV9fYm9yZGVyLXN0eWxlXCJ9KTtcclxuICAgICAgICAgICAgICAgIHIudmlldy5idXR0b25WaWV3LnNldCh7aXNPbjogZmFsc2UsIHdpdGhUZXh0OiB0cnVlLCB0b29sdGlwOiBpKFwibmNcIil9KTtcclxuICAgICAgICAgICAgICAgIHIudmlldy5idXR0b25WaWV3LmJpbmQoXCJsYWJlbFwiKS50byh0aGlzLCBcImJvcmRlclN0eWxlXCIsIHQgPT4gb1t0ID8gdCA6IFwibm9uZVwiXSk7XHJcbiAgICAgICAgICAgICAgICByLnZpZXcub24oXCJleGVjdXRlXCIsIHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm9yZGVyU3R5bGUgPSB0LnNvdXJjZS5fYm9yZGVyU3R5bGVWYWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBVYihyLnZpZXcsIHJSKHRoaXMpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuZXcgSEUoZSwgV0UpO1xyXG4gICAgICAgICAgICAgICAgcy5zZXQoe2xhYmVsOiBpKFwibmRcIiksIGNsYXNzOiBcImNrLXRhYmxlLWZvcm1fX2JvcmRlci13aWR0aFwifSk7XHJcbiAgICAgICAgICAgICAgICBzLnZpZXcuYmluZChcInZhbHVlXCIpLnRvKHRoaXMsIFwiYm9yZGVyV2lkdGhcIik7XHJcbiAgICAgICAgICAgICAgICBzLmJpbmQoXCJpc0VuYWJsZWRcIikudG8odGhpcywgXCJib3JkZXJTdHlsZVwiLCBDUik7XHJcbiAgICAgICAgICAgICAgICBzLnZpZXcub24oXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib3JkZXJXaWR0aCA9IHMudmlldy5lbGVtZW50LnZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBuZXcgSEUoZSwgdCk7XHJcbiAgICAgICAgICAgICAgICBhLnNldCh7bGFiZWw6IGkoXCJuZVwiKSwgY2xhc3M6IFwiY2stdGFibGUtZm9ybV9fYm9yZGVyLWNvbG9yXCJ9KTtcclxuICAgICAgICAgICAgICAgIGEudmlldy5iaW5kKFwidmFsdWVcIikudG8odGhpcywgXCJib3JkZXJDb2xvclwiKTtcclxuICAgICAgICAgICAgICAgIGEuYmluZChcImlzRW5hYmxlZFwiKS50byh0aGlzLCBcImJvcmRlclN0eWxlXCIsIENSKTtcclxuICAgICAgICAgICAgICAgIGEudmlldy5vbihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvcmRlckNvbG9yID0gYS52aWV3LnZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub24oXCJjaGFuZ2U6Ym9yZGVyU3R5bGVcIiwgKHQsIGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIUNSKGkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYm9yZGVyQ29sb3IgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmJvcmRlcldpZHRoID0gXCJcIlxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtib3JkZXJSb3dMYWJlbDogbiwgYm9yZGVyU3R5bGVEcm9wZG93bjogciwgYm9yZGVyQ29sb3JJbnB1dDogYSwgYm9yZGVyV2lkdGhJbnB1dDogc31cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUJhY2tncm91bmRGaWVsZCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gY1Ioe2NvbG9yQ29uZmlnOiB0aGlzLm9wdGlvbnMuYmFja2dyb3VuZENvbG9ycywgY29sdW1uczogNX0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBIRSh0LCBpKTtcclxuICAgICAgICAgICAgICAgIG4uc2V0KHtsYWJlbDogZShcIm5mXCIpLCBjbGFzczogXCJjay10YWJsZS1jZWxsLXByb3BlcnRpZXMtZm9ybV9fYmFja2dyb3VuZFwifSk7XHJcbiAgICAgICAgICAgICAgICBuLnZpZXcuYmluZChcInZhbHVlXCIpLnRvKHRoaXMsIFwiYmFja2dyb3VuZENvbG9yXCIpO1xyXG4gICAgICAgICAgICAgICAgbi52aWV3Lm9uKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gbi52aWV3LnZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVEaW1lbnNpb25GaWVsZHMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5sb2NhbGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBNayh0KTtcclxuICAgICAgICAgICAgICAgIGkudGV4dCA9IGUoXCJuZ1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgSEUodCwgV0UpO1xyXG4gICAgICAgICAgICAgICAgbi5zZXQoe2xhYmVsOiBlKFwibmRcIiksIGNsYXNzOiBcImNrLXRhYmxlLWZvcm1fX2RpbWVuc2lvbnMtcm93X193aWR0aFwifSk7XHJcbiAgICAgICAgICAgICAgICBuLnZpZXcuYmluZChcInZhbHVlXCIpLnRvKHRoaXMsIFwid2lkdGhcIik7XHJcbiAgICAgICAgICAgICAgICBuLnZpZXcub24oXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IG4udmlldy5lbGVtZW50LnZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgR3AodCk7XHJcbiAgICAgICAgICAgICAgICBvLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwic3BhblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtjbGFzczogW1wiY2stdGFibGUtZm9ybV9fZGltZW5zaW9uLW9wZXJhdG9yXCJdfSxcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW3t0ZXh0OiBcIsOXXCJ9XVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbmV3IEhFKHQsIFdFKTtcclxuICAgICAgICAgICAgICAgIHIuc2V0KHtsYWJlbDogZShcIm5oXCIpLCBjbGFzczogXCJjay10YWJsZS1mb3JtX19kaW1lbnNpb25zLXJvd19faGVpZ2h0XCJ9KTtcclxuICAgICAgICAgICAgICAgIHIudmlldy5iaW5kKFwidmFsdWVcIikudG8odGhpcywgXCJoZWlnaHRcIik7XHJcbiAgICAgICAgICAgICAgICByLnZpZXcub24oXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSByLnZpZXcuZWxlbWVudC52YWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge2RpbWVuc2lvbnNMYWJlbDogaSwgd2lkdGhJbnB1dDogbiwgb3BlcmF0b3JMYWJlbDogbywgaGVpZ2h0SW5wdXQ6IHJ9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVQYWRkaW5nRmllbGQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5sb2NhbGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBIRSh0LCBXRSk7XHJcbiAgICAgICAgICAgICAgICBpLnNldCh7bGFiZWw6IGUoXCJuaVwiKSwgY2xhc3M6IFwiY2stdGFibGUtY2VsbC1wcm9wZXJ0aWVzLWZvcm1fX3BhZGRpbmdcIn0pO1xyXG4gICAgICAgICAgICAgICAgaS52aWV3LmJpbmQoXCJ2YWx1ZVwiKS50byh0aGlzLCBcInBhZGRpbmdcIik7XHJcbiAgICAgICAgICAgICAgICBpLnZpZXcub24oXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wYWRkaW5nID0gaS52aWV3LmVsZW1lbnQudmFsdWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUFsaWdubWVudEZpZWxkcygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gbmV3IE1rKHQpO1xyXG4gICAgICAgICAgICAgICAgaS50ZXh0ID0gZShcIm5qXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBYYih0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0aGlzLmxvY2FsZS5jb250ZW50TGFuZ3VhZ2VEaXJlY3Rpb24gPT09IFwicnRsXCI7XHJcbiAgICAgICAgICAgICAgICBuLnNldCh7aXNDb21wYWN0OiB0cnVlLCBhcmlhTGFiZWw6IGUoXCJua1wiKX0pO1xyXG4gICAgICAgICAgICAgICAgc1Ioe1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXc6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbnM6IHlSLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvb2xiYXI6IG4sXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxzOiB0aGlzLl9ob3Jpem9udGFsQWxpZ25tZW50TGFiZWxzLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5TmFtZTogXCJob3Jpem9udGFsQWxpZ25tZW50XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZVRvVmFsdWU6IHQgPT4gdCA9PT0gKG8gPyBcInJpZ2h0XCIgOiBcImxlZnRcIikgPyBcIlwiIDogdFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbmV3IFhiKHQpO1xyXG4gICAgICAgICAgICAgICAgci5zZXQoe2lzQ29tcGFjdDogdHJ1ZSwgYXJpYUxhYmVsOiBlKFwibmxcIil9KTtcclxuICAgICAgICAgICAgICAgIHNSKHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3OiB0aGlzLFxyXG4gICAgICAgICAgICAgICAgICAgIGljb25zOiB5UixcclxuICAgICAgICAgICAgICAgICAgICB0b29sYmFyOiByLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhYmVsczogdGhpcy5fdmVydGljYWxBbGlnbm1lbnRMYWJlbHMsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiBcInZlcnRpY2FsQWxpZ25tZW50XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZVRvVmFsdWU6IHQgPT4gdCA9PT0gXCJtaWRkbGVcIiA/IFwiXCIgOiB0XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7aG9yaXpvbnRhbEFsaWdubWVudFRvb2xiYXI6IG4sIHZlcnRpY2FsQWxpZ25tZW50VG9vbGJhcjogciwgYWxpZ25tZW50TGFiZWw6IGl9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVBY3Rpb25CdXR0b25zKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMubG9jYWxlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgaGIodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IGhiKHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IFt0aGlzLmJvcmRlcldpZHRoSW5wdXQsIHRoaXMuYm9yZGVyQ29sb3JJbnB1dCwgdGhpcy5iYWNrZ3JvdW5kSW5wdXQsIHRoaXMucGFkZGluZ0lucHV0XTtcclxuICAgICAgICAgICAgICAgIGkuc2V0KHtsYWJlbDogZShcImxvXCIpLCBpY29uOiBYdiwgY2xhc3M6IFwiY2stYnV0dG9uLXNhdmVcIiwgdHlwZTogXCJzdWJtaXRcIiwgd2l0aFRleHQ6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgIGkuYmluZChcImlzRW5hYmxlZFwiKS50b01hbnkobywgXCJlcnJvclRleHRcIiwgKC4uLnQpID0+IHQuZXZlcnkodCA9PiAhdCkpO1xyXG4gICAgICAgICAgICAgICAgbi5zZXQoe2xhYmVsOiBlKFwibHBcIiksIGljb246IFp2LCBjbGFzczogXCJjay1idXR0b24tY2FuY2VsXCIsIHR5cGU6IFwiY2FuY2VsXCIsIHdpdGhUZXh0OiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICBuLmRlbGVnYXRlKFwiZXhlY3V0ZVwiKS50byh0aGlzLCBcImNhbmNlbFwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7c2F2ZUJ1dHRvblZpZXc6IGksIGNhbmNlbEJ1dHRvblZpZXc6IG59XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBfaG9yaXpvbnRhbEFsaWdubWVudExhYmVscygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZShcIm5tXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IGUoXCJublwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBlKFwibm9cIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gZShcIm5wXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQudWlMYW5ndWFnZURpcmVjdGlvbiA9PT0gXCJydGxcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cmlnaHQ6IG8sIGNlbnRlcjogbiwgbGVmdDogaSwganVzdGlmeTogcn1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtsZWZ0OiBpLCBjZW50ZXI6IG4sIHJpZ2h0OiBvLCBqdXN0aWZ5OiByfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgX3ZlcnRpY2FsQWxpZ25tZW50TGFiZWxzKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMudDtcclxuICAgICAgICAgICAgICAgIHJldHVybiB7dG9wOiB0KFwibnFcIiksIG1pZGRsZTogdChcIm5yXCIpLCBib3R0b206IHQoXCJuc1wiKX1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gQ1IodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gISF0XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgQVIgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMTEuMTA1IDE4bC0uMTcgMUgyLjVBMS41IDEuNSAwIDAgMSAxIDE3LjV2LTE1QTEuNSAxLjUgMCAwIDEgMi41IDFoMTVBMS41IDEuNSAwIDAgMSAxOSAyLjV2OS45NzVsLS44NS0uMTI0LS4xNS0uMzAyVjhoLTV2NGguMDIxbC0uMTcyLjM1MS0xLjkxNi4yOC0uMTUxLjAyN2MtLjI4Ny4wNjMtLjU0LjE4Mi0uNzU1LjM0MUw4IDEzdjVoMy4xMDV6TTIgMTJoNVY4SDJ2NHptMTAtNEg4djRoNFY4ek0yIDJ2NWg1VjJIMnptMCAxNmg1di01SDJ2NXpNMTMgN2g1VjJoLTV2NXpNOCAydjVoNFYySDh6XCIgb3BhY2l0eT1cIi42XCIvPjxwYXRoIGQ9XCJNMTUuNSAxMS41bDEuMzIzIDIuNjggMi45NTcuNDMtMi4xNCAyLjA4NS41MDUgMi45NDZMMTUuNSAxOC4yNWwtMi42NDUgMS4zOS41MDUtMi45NDUtMi4xNC0yLjA4NiAyLjk1Ny0uNDNMMTUuNSAxMS41ek0xMyA2YTEgMSAwIDAgMSAxIDF2My4xNzJhMi4wNDcgMi4wNDcgMCAwIDAtLjI5My40NDNsLS44NTggMS43MzYtMS45MTYuMjgtLjE1MS4wMjdBMS45NzYgMS45NzYgMCAwIDAgOS4zMTUgMTRIN2ExIDEgMCAwIDEtMS0xVjdhMSAxIDAgMCAxIDEtMWg2em0tMSAySDh2NGg0Vjh6XCIvPjwvc3ZnPic7XHJcbiAgICAgICAgY29uc3QgVFIgPSA1MDA7XHJcblxyXG4gICAgICAgIGNsYXNzIFBSIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtrYl1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiVGFibGVDZWxsUHJvcGVydGllc1VJXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbmZpZy5kZWZpbmUoXCJ0YWJsZS50YWJsZUNlbGxQcm9wZXJ0aWVzXCIsIHtib3JkZXJDb2xvcnM6IGFSLCBiYWNrZ3JvdW5kQ29sb3JzOiBhUn0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC50O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFsbG9vbiA9IHQucGx1Z2lucy5nZXQoa2IpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52aWV3ID0gdGhpcy5fY3JlYXRlUHJvcGVydGllc1ZpZXcoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VuZG9TdGVwQmF0Y2ggPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgdC51aS5jb21wb25lbnRGYWN0b3J5LmFkZChcInRhYmxlQ2VsbFByb3BlcnRpZXNcIiwgdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBoYih0KTtcclxuICAgICAgICAgICAgICAgICAgICBpLnNldCh7bGFiZWw6IGUoXCJraFwiKSwgaWNvbjogQVIsIHRvb2x0aXA6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKGksIFwiZXhlY3V0ZVwiLCAoKSA9PiB0aGlzLl9zaG93VmlldygpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVzdHJveSgpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyLmRlc3Ryb3koKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5kZXN0cm95KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZVByb3BlcnRpZXNWaWV3KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZWRpdGluZy52aWV3LmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuY29uZmlnLmdldChcInRhYmxlLnRhYmxlQ2VsbFByb3BlcnRpZXNcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gX18oaS5ib3JkZXJDb2xvcnMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGtfKHQubG9jYWxlLCBuKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBfXyhpLmJhY2tncm91bmRDb2xvcnMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IGtfKHQubG9jYWxlLCByKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBuZXcgeFIodC5sb2NhbGUsIHtib3JkZXJDb2xvcnM6IG8sIGJhY2tncm91bmRDb2xvcnM6IHN9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICBhLnJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhhLCBcInN1Ym1pdFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGlkZVZpZXcoKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKGEsIFwiY2FuY2VsXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdW5kb1N0ZXBCYXRjaC5vcGVyYXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmV4ZWN1dGUoXCJ1bmRvXCIsIHRoaXMuX3VuZG9TdGVwQmF0Y2gpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpZGVWaWV3KClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYS5rZXlzdHJva2VzLnNldChcIkVzY1wiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpZGVWaWV3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZSgpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odC51aSwgXCJ1cGRhdGVcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghblMoZS5zZWxlY3Rpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpZGVWaWV3KClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2lzVmlld1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgWUUodCwgXCJjZWxsXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBEYih7XHJcbiAgICAgICAgICAgICAgICAgICAgZW1pdHRlcjogYSxcclxuICAgICAgICAgICAgICAgICAgICBhY3RpdmF0b3I6ICgpID0+IHRoaXMuX2lzVmlld0luQmFsbG9vbixcclxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0RWxlbWVudHM6IFt0aGlzLl9iYWxsb29uLnZpZXcuZWxlbWVudF0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6ICgpID0+IHRoaXMuX2hpZGVWaWV3KClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbCA9IHRSKGMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZCA9IGVSKGMpO1xyXG4gICAgICAgICAgICAgICAgYS5vbihcImNoYW5nZTpib3JkZXJTdHlsZVwiLCB0aGlzLl9nZXRQcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKFwidGFibGVDZWxsQm9yZGVyU3R5bGVcIikpO1xyXG4gICAgICAgICAgICAgICAgYS5vbihcImNoYW5nZTpib3JkZXJDb2xvclwiLCB0aGlzLl9nZXRWYWxpZGF0ZWRQcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3RmllbGQ6IGEuYm9yZGVyQ29sb3JJbnB1dCxcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kTmFtZTogXCJ0YWJsZUNlbGxCb3JkZXJDb2xvclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yVGV4dDogbCxcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGlSXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICBhLm9uKFwiY2hhbmdlOmJvcmRlcldpZHRoXCIsIHRoaXMuX2dldFZhbGlkYXRlZFByb3BlcnR5Q2hhbmdlQ2FsbGJhY2soe1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdGaWVsZDogYS5ib3JkZXJXaWR0aElucHV0LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmROYW1lOiBcInRhYmxlQ2VsbEJvcmRlcldpZHRoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JUZXh0OiBkLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogb1JcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIGEub24oXCJjaGFuZ2U6cGFkZGluZ1wiLCB0aGlzLl9nZXRWYWxpZGF0ZWRQcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3RmllbGQ6IGEucGFkZGluZ0lucHV0LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmROYW1lOiBcInRhYmxlQ2VsbFBhZGRpbmdcIixcclxuICAgICAgICAgICAgICAgICAgICBlcnJvclRleHQ6IGQsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBuUlxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgYS5vbihcImNoYW5nZTp3aWR0aFwiLCB0aGlzLl9nZXRWYWxpZGF0ZWRQcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3RmllbGQ6IGEud2lkdGhJbnB1dCxcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kTmFtZTogXCJ0YWJsZUNlbGxXaWR0aFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yVGV4dDogZCxcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IG5SXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICBhLm9uKFwiY2hhbmdlOmhlaWdodFwiLCB0aGlzLl9nZXRWYWxpZGF0ZWRQcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3RmllbGQ6IGEuaGVpZ2h0SW5wdXQsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZE5hbWU6IFwidGFibGVDZWxsSGVpZ2h0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JUZXh0OiBkLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogblJcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIGEub24oXCJjaGFuZ2U6YmFja2dyb3VuZENvbG9yXCIsIHRoaXMuX2dldFZhbGlkYXRlZFByb3BlcnR5Q2hhbmdlQ2FsbGJhY2soe1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdGaWVsZDogYS5iYWNrZ3JvdW5kSW5wdXQsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZE5hbWU6IFwidGFibGVDZWxsQmFja2dyb3VuZENvbG9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JUZXh0OiBsLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogaVJcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIGEub24oXCJjaGFuZ2U6aG9yaXpvbnRhbEFsaWdubWVudFwiLCB0aGlzLl9nZXRQcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKFwidGFibGVDZWxsSG9yaXpvbnRhbEFsaWdubWVudFwiKSk7XHJcbiAgICAgICAgICAgICAgICBhLm9uKFwiY2hhbmdlOnZlcnRpY2FsQWxpZ25tZW50XCIsIHRoaXMuX2dldFByb3BlcnR5Q2hhbmdlQ2FsbGJhY2soXCJ0YWJsZUNlbGxWZXJ0aWNhbEFsaWdubWVudFwiKSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZmlsbFZpZXdGb3JtRnJvbUNvbW1hbmRWYWx1ZXMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IuY29tbWFuZHM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2V0KHtcclxuICAgICAgICAgICAgICAgICAgICBib3JkZXJTdHlsZTogdC5nZXQoXCJ0YWJsZUNlbGxCb3JkZXJTdHlsZVwiKS52YWx1ZSB8fCBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiB0LmdldChcInRhYmxlQ2VsbEJvcmRlckNvbG9yXCIpLnZhbHVlIHx8IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IHQuZ2V0KFwidGFibGVDZWxsQm9yZGVyV2lkdGhcIikudmFsdWUgfHwgXCJcIixcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogdC5nZXQoXCJ0YWJsZUNlbGxXaWR0aFwiKS52YWx1ZSB8fCBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodDogdC5nZXQoXCJ0YWJsZUNlbGxIZWlnaHRcIikudmFsdWUgfHwgXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiB0LmdldChcInRhYmxlQ2VsbFBhZGRpbmdcIikudmFsdWUgfHwgXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6IHQuZ2V0KFwidGFibGVDZWxsQmFja2dyb3VuZENvbG9yXCIpLnZhbHVlIHx8IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgaG9yaXpvbnRhbEFsaWdubWVudDogdC5nZXQoXCJ0YWJsZUNlbGxIb3Jpem9udGFsQWxpZ25tZW50XCIpLnZhbHVlIHx8IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdmVydGljYWxBbGlnbm1lbnQ6IHQuZ2V0KFwidGFibGVDZWxsVmVydGljYWxBbGlnbm1lbnRcIikudmFsdWUgfHwgXCJcIlxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3Nob3dWaWV3KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFsbG9vbi5hZGQoe3ZpZXc6IHRoaXMudmlldywgcG9zaXRpb246IFhFKHQpfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91bmRvU3RlcEJhdGNoID0gdC5tb2RlbC5jcmVhdGVCYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsbFZpZXdGb3JtRnJvbUNvbW1hbmRWYWx1ZXMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5mb2N1cygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9oaWRlVmlldygpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNWaWV3SW5CYWxsb29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcodC51aSwgXCJ1cGRhdGVcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2F2ZUJ1dHRvblZpZXcuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhbGxvb24ucmVtb3ZlKHRoaXMudmlldyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgX2lzVmlld1Zpc2libGUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmFsbG9vbi52aXNpYmxlVmlldyA9PT0gdGhpcy52aWV3XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBfaXNWaWV3SW5CYWxsb29uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JhbGxvb24uaGFzVmlldyh0aGlzLnZpZXcpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRQcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmV4ZWN1dGUodCwge3ZhbHVlOiBuLCBiYXRjaDogdGhpcy5fdW5kb1N0ZXBCYXRjaH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRWYWxpZGF0ZWRQcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKHtjb21tYW5kTmFtZTogdCwgdmlld0ZpZWxkOiBlLCB2YWxpZGF0b3I6IGksIGVycm9yVGV4dDogbn0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB1aCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5lcnJvclRleHQgPSBuXHJcbiAgICAgICAgICAgICAgICB9LCBUUik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKG4sIHIsIHMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBvLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmV4ZWN1dGUodCwge3ZhbHVlOiBzLCBiYXRjaDogdGhpcy5fdW5kb1N0ZXBCYXRjaH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmVycm9yVGV4dCA9IG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIFNSKHQpIHtcclxuICAgICAgICAgICAgdC5zZXROb3JtYWxpemVyKFwiYm9yZGVyXCIsIEVSKTtcclxuICAgICAgICAgICAgdC5zZXROb3JtYWxpemVyKFwiYm9yZGVyLXRvcFwiLCBSUihcInRvcFwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0Tm9ybWFsaXplcihcImJvcmRlci1yaWdodFwiLCBSUihcInJpZ2h0XCIpKTtcclxuICAgICAgICAgICAgdC5zZXROb3JtYWxpemVyKFwiYm9yZGVyLWJvdHRvbVwiLCBSUihcImJvdHRvbVwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0Tm9ybWFsaXplcihcImJvcmRlci1sZWZ0XCIsIFJSKFwibGVmdFwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0Tm9ybWFsaXplcihcImJvcmRlci1jb2xvclwiLCBPUihcImNvbG9yXCIpKTtcclxuICAgICAgICAgICAgdC5zZXROb3JtYWxpemVyKFwiYm9yZGVyLXdpZHRoXCIsIE9SKFwid2lkdGhcIikpO1xyXG4gICAgICAgICAgICB0LnNldE5vcm1hbGl6ZXIoXCJib3JkZXItc3R5bGVcIiwgT1IoXCJzdHlsZVwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0Tm9ybWFsaXplcihcImJvcmRlci10b3AtY29sb3JcIiwgVlIoXCJjb2xvclwiLCBcInRvcFwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0Tm9ybWFsaXplcihcImJvcmRlci10b3Atc3R5bGVcIiwgVlIoXCJzdHlsZVwiLCBcInRvcFwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0Tm9ybWFsaXplcihcImJvcmRlci10b3Atd2lkdGhcIiwgVlIoXCJ3aWR0aFwiLCBcInRvcFwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0Tm9ybWFsaXplcihcImJvcmRlci1yaWdodC1jb2xvclwiLCBWUihcImNvbG9yXCIsIFwicmlnaHRcIikpO1xyXG4gICAgICAgICAgICB0LnNldE5vcm1hbGl6ZXIoXCJib3JkZXItcmlnaHQtc3R5bGVcIiwgVlIoXCJzdHlsZVwiLCBcInJpZ2h0XCIpKTtcclxuICAgICAgICAgICAgdC5zZXROb3JtYWxpemVyKFwiYm9yZGVyLXJpZ2h0LXdpZHRoXCIsIFZSKFwid2lkdGhcIiwgXCJyaWdodFwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0Tm9ybWFsaXplcihcImJvcmRlci1ib3R0b20tY29sb3JcIiwgVlIoXCJjb2xvclwiLCBcImJvdHRvbVwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0Tm9ybWFsaXplcihcImJvcmRlci1ib3R0b20tc3R5bGVcIiwgVlIoXCJzdHlsZVwiLCBcImJvdHRvbVwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0Tm9ybWFsaXplcihcImJvcmRlci1ib3R0b20td2lkdGhcIiwgVlIoXCJ3aWR0aFwiLCBcImJvdHRvbVwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0Tm9ybWFsaXplcihcImJvcmRlci1sZWZ0LWNvbG9yXCIsIFZSKFwiY29sb3JcIiwgXCJsZWZ0XCIpKTtcclxuICAgICAgICAgICAgdC5zZXROb3JtYWxpemVyKFwiYm9yZGVyLWxlZnQtc3R5bGVcIiwgVlIoXCJzdHlsZVwiLCBcImxlZnRcIikpO1xyXG4gICAgICAgICAgICB0LnNldE5vcm1hbGl6ZXIoXCJib3JkZXItbGVmdC13aWR0aFwiLCBWUihcIndpZHRoXCIsIFwibGVmdFwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0RXh0cmFjdG9yKFwiYm9yZGVyLXRvcFwiLCBOUihcInRvcFwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0RXh0cmFjdG9yKFwiYm9yZGVyLXJpZ2h0XCIsIE5SKFwicmlnaHRcIikpO1xyXG4gICAgICAgICAgICB0LnNldEV4dHJhY3RvcihcImJvcmRlci1ib3R0b21cIiwgTlIoXCJib3R0b21cIikpO1xyXG4gICAgICAgICAgICB0LnNldEV4dHJhY3RvcihcImJvcmRlci1sZWZ0XCIsIE5SKFwibGVmdFwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0RXh0cmFjdG9yKFwiYm9yZGVyLXRvcC1jb2xvclwiLCBcImJvcmRlci5jb2xvci50b3BcIik7XHJcbiAgICAgICAgICAgIHQuc2V0RXh0cmFjdG9yKFwiYm9yZGVyLXJpZ2h0LWNvbG9yXCIsIFwiYm9yZGVyLmNvbG9yLnJpZ2h0XCIpO1xyXG4gICAgICAgICAgICB0LnNldEV4dHJhY3RvcihcImJvcmRlci1ib3R0b20tY29sb3JcIiwgXCJib3JkZXIuY29sb3IuYm90dG9tXCIpO1xyXG4gICAgICAgICAgICB0LnNldEV4dHJhY3RvcihcImJvcmRlci1sZWZ0LWNvbG9yXCIsIFwiYm9yZGVyLmNvbG9yLmxlZnRcIik7XHJcbiAgICAgICAgICAgIHQuc2V0RXh0cmFjdG9yKFwiYm9yZGVyLXRvcC13aWR0aFwiLCBcImJvcmRlci53aWR0aC50b3BcIik7XHJcbiAgICAgICAgICAgIHQuc2V0RXh0cmFjdG9yKFwiYm9yZGVyLXJpZ2h0LXdpZHRoXCIsIFwiYm9yZGVyLndpZHRoLnJpZ2h0XCIpO1xyXG4gICAgICAgICAgICB0LnNldEV4dHJhY3RvcihcImJvcmRlci1ib3R0b20td2lkdGhcIiwgXCJib3JkZXIud2lkdGguYm90dG9tXCIpO1xyXG4gICAgICAgICAgICB0LnNldEV4dHJhY3RvcihcImJvcmRlci1sZWZ0LXdpZHRoXCIsIFwiYm9yZGVyLndpZHRoLmxlZnRcIik7XHJcbiAgICAgICAgICAgIHQuc2V0RXh0cmFjdG9yKFwiYm9yZGVyLXRvcC1zdHlsZVwiLCBcImJvcmRlci5zdHlsZS50b3BcIik7XHJcbiAgICAgICAgICAgIHQuc2V0RXh0cmFjdG9yKFwiYm9yZGVyLXJpZ2h0LXN0eWxlXCIsIFwiYm9yZGVyLnN0eWxlLnJpZ2h0XCIpO1xyXG4gICAgICAgICAgICB0LnNldEV4dHJhY3RvcihcImJvcmRlci1ib3R0b20tc3R5bGVcIiwgXCJib3JkZXIuc3R5bGUuYm90dG9tXCIpO1xyXG4gICAgICAgICAgICB0LnNldEV4dHJhY3RvcihcImJvcmRlci1sZWZ0LXN0eWxlXCIsIFwiYm9yZGVyLnN0eWxlLmxlZnRcIik7XHJcbiAgICAgICAgICAgIHQuc2V0UmVkdWNlcihcImJvcmRlci1jb2xvclwiLCBwQyhcImJvcmRlci1jb2xvclwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0UmVkdWNlcihcImJvcmRlci1zdHlsZVwiLCBwQyhcImJvcmRlci1zdHlsZVwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0UmVkdWNlcihcImJvcmRlci13aWR0aFwiLCBwQyhcImJvcmRlci13aWR0aFwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0UmVkdWNlcihcImJvcmRlci10b3BcIiwgTFIoXCJ0b3BcIikpO1xyXG4gICAgICAgICAgICB0LnNldFJlZHVjZXIoXCJib3JkZXItcmlnaHRcIiwgTFIoXCJyaWdodFwiKSk7XHJcbiAgICAgICAgICAgIHQuc2V0UmVkdWNlcihcImJvcmRlci1ib3R0b21cIiwgTFIoXCJib3R0b21cIikpO1xyXG4gICAgICAgICAgICB0LnNldFJlZHVjZXIoXCJib3JkZXItbGVmdFwiLCBMUihcImxlZnRcIikpO1xyXG4gICAgICAgICAgICB0LnNldFJlZHVjZXIoXCJib3JkZXJcIiwgelIpO1xyXG4gICAgICAgICAgICB0LnNldFN0eWxlUmVsYXRpb24oXCJib3JkZXJcIiwgW1wiYm9yZGVyLWNvbG9yXCIsIFwiYm9yZGVyLXN0eWxlXCIsIFwiYm9yZGVyLXdpZHRoXCIsIFwiYm9yZGVyLXRvcFwiLCBcImJvcmRlci1yaWdodFwiLCBcImJvcmRlci1ib3R0b21cIiwgXCJib3JkZXItbGVmdFwiLCBcImJvcmRlci10b3AtY29sb3JcIiwgXCJib3JkZXItcmlnaHQtY29sb3JcIiwgXCJib3JkZXItYm90dG9tLWNvbG9yXCIsIFwiYm9yZGVyLWxlZnQtY29sb3JcIiwgXCJib3JkZXItdG9wLXN0eWxlXCIsIFwiYm9yZGVyLXJpZ2h0LXN0eWxlXCIsIFwiYm9yZGVyLWJvdHRvbS1zdHlsZVwiLCBcImJvcmRlci1sZWZ0LXN0eWxlXCIsIFwiYm9yZGVyLXRvcC13aWR0aFwiLCBcImJvcmRlci1yaWdodC13aWR0aFwiLCBcImJvcmRlci1ib3R0b20td2lkdGhcIiwgXCJib3JkZXItbGVmdC13aWR0aFwiXSk7XHJcbiAgICAgICAgICAgIHQuc2V0U3R5bGVSZWxhdGlvbihcImJvcmRlci1jb2xvclwiLCBbXCJib3JkZXItdG9wLWNvbG9yXCIsIFwiYm9yZGVyLXJpZ2h0LWNvbG9yXCIsIFwiYm9yZGVyLWJvdHRvbS1jb2xvclwiLCBcImJvcmRlci1sZWZ0LWNvbG9yXCJdKTtcclxuICAgICAgICAgICAgdC5zZXRTdHlsZVJlbGF0aW9uKFwiYm9yZGVyLXN0eWxlXCIsIFtcImJvcmRlci10b3Atc3R5bGVcIiwgXCJib3JkZXItcmlnaHQtc3R5bGVcIiwgXCJib3JkZXItYm90dG9tLXN0eWxlXCIsIFwiYm9yZGVyLWxlZnQtc3R5bGVcIl0pO1xyXG4gICAgICAgICAgICB0LnNldFN0eWxlUmVsYXRpb24oXCJib3JkZXItd2lkdGhcIiwgW1wiYm9yZGVyLXRvcC13aWR0aFwiLCBcImJvcmRlci1yaWdodC13aWR0aFwiLCBcImJvcmRlci1ib3R0b20td2lkdGhcIiwgXCJib3JkZXItbGVmdC13aWR0aFwiXSk7XHJcbiAgICAgICAgICAgIHQuc2V0U3R5bGVSZWxhdGlvbihcImJvcmRlci10b3BcIiwgW1wiYm9yZGVyLXRvcC1jb2xvclwiLCBcImJvcmRlci10b3Atc3R5bGVcIiwgXCJib3JkZXItdG9wLXdpZHRoXCJdKTtcclxuICAgICAgICAgICAgdC5zZXRTdHlsZVJlbGF0aW9uKFwiYm9yZGVyLXJpZ2h0XCIsIFtcImJvcmRlci1yaWdodC1jb2xvclwiLCBcImJvcmRlci1yaWdodC1zdHlsZVwiLCBcImJvcmRlci1yaWdodC13aWR0aFwiXSk7XHJcbiAgICAgICAgICAgIHQuc2V0U3R5bGVSZWxhdGlvbihcImJvcmRlci1ib3R0b21cIiwgW1wiYm9yZGVyLWJvdHRvbS1jb2xvclwiLCBcImJvcmRlci1ib3R0b20tc3R5bGVcIiwgXCJib3JkZXItYm90dG9tLXdpZHRoXCJdKTtcclxuICAgICAgICAgICAgdC5zZXRTdHlsZVJlbGF0aW9uKFwiYm9yZGVyLWxlZnRcIiwgW1wiYm9yZGVyLWxlZnQtY29sb3JcIiwgXCJib3JkZXItbGVmdC1zdHlsZVwiLCBcImJvcmRlci1sZWZ0LXdpZHRoXCJdKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gRVIodCkge1xyXG4gICAgICAgICAgICBjb25zdCB7Y29sb3I6IGUsIHN0eWxlOiBpLCB3aWR0aDogbn0gPSBCUih0KTtcclxuICAgICAgICAgICAgcmV0dXJuIHtwYXRoOiBcImJvcmRlclwiLCB2YWx1ZToge2NvbG9yOiBtQyhlKSwgc3R5bGU6IG1DKGkpLCB3aWR0aDogbUMobil9fVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gUlIodCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7Y29sb3I6IGksIHN0eWxlOiBuLCB3aWR0aDogb30gPSBCUihlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB7fTtcclxuICAgICAgICAgICAgICAgIGlmIChpICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByLmNvbG9yID0ge1t0XTogaX1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChuICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByLnN0eWxlID0ge1t0XTogbn1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChvICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICByLndpZHRoID0ge1t0XTogb31cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB7cGF0aDogXCJib3JkZXJcIiwgdmFsdWU6IHJ9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIE9SKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGUgPT4gKHtwYXRoOiBcImJvcmRlclwiLCB2YWx1ZTogSVIoZSwgdCl9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSVIodCwgZSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1tlXTogbUModCl9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBWUih0LCBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBpID0+ICh7cGF0aDogXCJib3JkZXJcIiwgdmFsdWU6IHtbdF06IHtbZV06IGl9fX0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBOUih0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAoZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkuYm9yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1SKGkuYm9yZGVyLCB0KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBNUih0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB7fTtcclxuICAgICAgICAgICAgaWYgKHQud2lkdGggJiYgdC53aWR0aFtlXSkge1xyXG4gICAgICAgICAgICAgICAgaS53aWR0aCA9IHQud2lkdGhbZV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5zdHlsZSAmJiB0LnN0eWxlW2VdKSB7XHJcbiAgICAgICAgICAgICAgICBpLnN0eWxlID0gdC5zdHlsZVtlXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0LmNvbG9yICYmIHQuY29sb3JbZV0pIHtcclxuICAgICAgICAgICAgICAgIGkuY29sb3IgPSB0LmNvbG9yW2VdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEJSKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHt9O1xyXG4gICAgICAgICAgICBjb25zdCBpID0ga0ModCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob0ModCkgfHwgL3RoaW58bWVkaXVtfHRoaWNrLy50ZXN0KHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS53aWR0aCA9IHRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaUModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnN0eWxlID0gdFxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBlLmNvbG9yID0gdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB6Uih0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGUgPSBbXTtcclxuICAgICAgICAgICAgZS5wdXNoKC4uLkZSKE1SKHQsIFwidG9wXCIpLCBcInRvcFwiKSk7XHJcbiAgICAgICAgICAgIGUucHVzaCguLi5GUihNUih0LCBcInJpZ2h0XCIpLCBcInJpZ2h0XCIpKTtcclxuICAgICAgICAgICAgZS5wdXNoKC4uLkZSKE1SKHQsIFwiYm90dG9tXCIpLCBcImJvdHRvbVwiKSk7XHJcbiAgICAgICAgICAgIGUucHVzaCguLi5GUihNUih0LCBcImxlZnRcIiksIFwibGVmdFwiKSk7XHJcbiAgICAgICAgICAgIHJldHVybiBlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBMUih0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlID0+IEZSKGUsIHQpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBGUih0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBbXTtcclxuICAgICAgICAgICAgaWYgKHQgJiYgdC53aWR0aCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICBpLnB1c2godC53aWR0aClcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodCAmJiB0LnN0eWxlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIGkucHVzaCh0LnN0eWxlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0ICYmIHQuY29sb3IgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgaS5wdXNoKHQuY29sb3IpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1tgYm9yZGVyLSR7ZX1gLCBpLmpvaW4oXCIgXCIpXV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gW11cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIERSKHQpIHtcclxuICAgICAgICAgICAgdC5zZXROb3JtYWxpemVyKFwicGFkZGluZ1wiLCB3QyhcInBhZGRpbmdcIikpO1xyXG4gICAgICAgICAgICB0LnNldE5vcm1hbGl6ZXIoXCJwYWRkaW5nLXRvcFwiLCB0ID0+ICh7cGF0aDogXCJwYWRkaW5nLnRvcFwiLCB2YWx1ZTogdH0pKTtcclxuICAgICAgICAgICAgdC5zZXROb3JtYWxpemVyKFwicGFkZGluZy1yaWdodFwiLCB0ID0+ICh7cGF0aDogXCJwYWRkaW5nLnJpZ2h0XCIsIHZhbHVlOiB0fSkpO1xyXG4gICAgICAgICAgICB0LnNldE5vcm1hbGl6ZXIoXCJwYWRkaW5nLWJvdHRvbVwiLCB0ID0+ICh7cGF0aDogXCJwYWRkaW5nLmJvdHRvbVwiLCB2YWx1ZTogdH0pKTtcclxuICAgICAgICAgICAgdC5zZXROb3JtYWxpemVyKFwicGFkZGluZy1sZWZ0XCIsIHQgPT4gKHtwYXRoOiBcInBhZGRpbmcubGVmdFwiLCB2YWx1ZTogdH0pKTtcclxuICAgICAgICAgICAgdC5zZXRSZWR1Y2VyKFwicGFkZGluZ1wiLCBwQyhcInBhZGRpbmdcIikpO1xyXG4gICAgICAgICAgICB0LnNldFN0eWxlUmVsYXRpb24oXCJwYWRkaW5nXCIsIFtcInBhZGRpbmctdG9wXCIsIFwicGFkZGluZy1yaWdodFwiLCBcInBhZGRpbmctYm90dG9tXCIsIFwicGFkZGluZy1sZWZ0XCJdKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24galIodCkge1xyXG4gICAgICAgICAgICB0LnNldE5vcm1hbGl6ZXIoXCJiYWNrZ3JvdW5kXCIsIEhSKTtcclxuICAgICAgICAgICAgdC5zZXROb3JtYWxpemVyKFwiYmFja2dyb3VuZC1jb2xvclwiLCB0ID0+ICh7cGF0aDogXCJiYWNrZ3JvdW5kLmNvbG9yXCIsIHZhbHVlOiB0fSkpO1xyXG4gICAgICAgICAgICB0LnNldFJlZHVjZXIoXCJiYWNrZ3JvdW5kXCIsIHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZS5wdXNoKFtcImJhY2tncm91bmQtY29sb3JcIiwgdC5jb2xvcl0pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIEhSKHQpIHtcclxuICAgICAgICAgICAgY29uc3QgZSA9IHt9O1xyXG4gICAgICAgICAgICBjb25zdCBpID0ga0ModCk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoY0ModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnJlcGVhdCA9IGUucmVwZWF0IHx8IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGUucmVwZWF0LnB1c2godClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZEModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLnBvc2l0aW9uID0gZS5wb3NpdGlvbiB8fCBbXTtcclxuICAgICAgICAgICAgICAgICAgICBlLnBvc2l0aW9uLnB1c2godClcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoaEModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLmF0dGFjaG1lbnQgPSB0XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRDKHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5jb2xvciA9IHRcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZ0ModCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLmltYWdlID0gdFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB7cGF0aDogXCJiYWNrZ3JvdW5kXCIsIHZhbHVlOiBlfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gV1IodCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICB0LmZvcihcInVwY2FzdFwiKS5hdHRyaWJ1dGVUb0F0dHJpYnV0ZSh7XHJcbiAgICAgICAgICAgICAgICB2aWV3OiB7c3R5bGVzOiB7W25dOiAvW1xcc1xcU10rL319LFxyXG4gICAgICAgICAgICAgICAgbW9kZWw6IHtuYW1lOiBlLCBrZXk6IGksIHZhbHVlOiB0ID0+IHQuZ2V0Tm9ybWFsaXplZFN0eWxlKG4pfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gcVIodCwgZSkge1xyXG4gICAgICAgICAgICB0LmZvcihcInVwY2FzdFwiKS5hZGQodCA9PiB0Lm9uKFwiZWxlbWVudDpcIiArIGUsICh0LCBlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gW1wiYm9yZGVyLXRvcFwiLCBcImJvcmRlci1yaWdodFwiLCBcImJvcmRlci1ib3R0b21cIiwgXCJib3JkZXItbGVmdFwiXS5maWx0ZXIodCA9PiBlLnZpZXdJdGVtLmhhc1N0eWxlKHQpKTtcclxuICAgICAgICAgICAgICAgIGlmICghbi5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB7c3R5bGVzOiBufTtcclxuICAgICAgICAgICAgICAgIGlmICghaS5jb25zdW1hYmxlLnRlc3QoZS52aWV3SXRlbSwgbykpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghZS5tb2RlbFJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZSA9IE9iamVjdC5hc3NpZ24oZSwgaS5jb252ZXJ0Q2hpbGRyZW4oZS52aWV3SXRlbSwgZS5tb2RlbEN1cnNvcikpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gWy4uLmUubW9kZWxSYW5nZS5nZXRJdGVtcyh7c2hhbGxvdzogdHJ1ZX0pXS5wb3AoKTtcclxuICAgICAgICAgICAgICAgIGkuY29uc3VtYWJsZS5jb25zdW1lKGUudmlld0l0ZW0sIG8pO1xyXG4gICAgICAgICAgICAgICAgaS53cml0ZXIuc2V0QXR0cmlidXRlKFwiYm9yZGVyU3R5bGVcIiwgZS52aWV3SXRlbS5nZXROb3JtYWxpemVkU3R5bGUoXCJib3JkZXItc3R5bGVcIiksIHIpO1xyXG4gICAgICAgICAgICAgICAgaS53cml0ZXIuc2V0QXR0cmlidXRlKFwiYm9yZGVyQ29sb3JcIiwgZS52aWV3SXRlbS5nZXROb3JtYWxpemVkU3R5bGUoXCJib3JkZXItY29sb3JcIiksIHIpO1xyXG4gICAgICAgICAgICAgICAgaS53cml0ZXIuc2V0QXR0cmlidXRlKFwiYm9yZGVyV2lkdGhcIiwgZS52aWV3SXRlbS5nZXROb3JtYWxpemVkU3R5bGUoXCJib3JkZXItd2lkdGhcIiksIHIpXHJcbiAgICAgICAgICAgIH0pKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gVVIodCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICB0LmZvcihcImRvd25jYXN0XCIpLmF0dHJpYnV0ZVRvQXR0cmlidXRlKHtcclxuICAgICAgICAgICAgICAgIG1vZGVsOiB7bmFtZTogZSwga2V5OiBpfSxcclxuICAgICAgICAgICAgICAgIHZpZXc6IHQgPT4gKHtrZXk6IFwic3R5bGVcIiwgdmFsdWU6IHtbbl06IHR9fSlcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uICRSKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgdC5mb3IoXCJkb3duY2FzdFwiKS5hZGQodCA9PiB0Lm9uKGBhdHRyaWJ1dGU6JHtlfTp0YWJsZWAsICh0LCBlLCBuKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7aXRlbTogbywgYXR0cmlidXRlTmV3VmFsdWU6IHJ9ID0gZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHttYXBwZXI6IHMsIHdyaXRlcjogYX0gPSBuO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFuLmNvbnN1bWFibGUuY29uc3VtZShlLml0ZW0sIHQubmFtZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSBbLi4ucy50b1ZpZXdFbGVtZW50KG8pLmdldENoaWxkcmVuKCldLmZpbmQodCA9PiB0LmlzKFwidGFibGVcIikpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICBhLnNldFN0eWxlKGksIHIsIGMpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGEucmVtb3ZlU3R5bGUoaSwgYylcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBHUiBleHRlbmRzIGp3IHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmF0dHJpYnV0ZU5hbWUgPSBlXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHJlZnJlc2goKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gc1ModC5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSAhIWUubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuX2dldFNpbmdsZVZhbHVlKGUpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGV4ZWN1dGUodCA9IHt9KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7dmFsdWU6IGUsIGJhdGNoOiBpfSA9IHQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gc1Mobi5kb2N1bWVudC5zZWxlY3Rpb24pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHRoaXMuX2dldFZhbHVlVG9TZXQoZSk7XHJcbiAgICAgICAgICAgICAgICBuLmVucXVldWVDaGFuZ2UoaSB8fCBcImRlZmF1bHRcIiwgdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgby5mb3JFYWNoKGUgPT4gdC5zZXRBdHRyaWJ1dGUodGhpcy5hdHRyaWJ1dGVOYW1lLCByLCBlKSlcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvLmZvckVhY2goZSA9PiB0LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmF0dHJpYnV0ZU5hbWUsIGUpKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRBdHRyaWJ1dGUodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdC5nZXRBdHRyaWJ1dGUodGhpcy5hdHRyaWJ1dGVOYW1lKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0VmFsdWVUb1NldCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0U2luZ2xlVmFsdWUodCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuX2dldEF0dHJpYnV0ZSh0WzBdKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LmV2ZXJ5KHQgPT4gdGhpcy5fZ2V0QXR0cmlidXRlKHQpID09PSBlKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpID8gZSA6IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBLUiBleHRlbmRzIEdSIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCwgXCJwYWRkaW5nXCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRBdHRyaWJ1dGUodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJFAodC5nZXRBdHRyaWJ1dGUodGhpcy5hdHRyaWJ1dGVOYW1lKSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldFZhbHVlVG9TZXQodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEdQKHQsIFwicHhcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgSlIgZXh0ZW5kcyBHUiB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQsIFwid2lkdGhcIilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldFZhbHVlVG9TZXQodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIEdQKHQsIFwicHhcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgWVIgZXh0ZW5kcyBHUiB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQsIFwiaGVpZ2h0XCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRWYWx1ZVRvU2V0KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBHUCh0LCBcInB4XCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIFFSIGV4dGVuZHMgR1Ige1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0LCBcImJhY2tncm91bmRDb2xvclwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBYUiBleHRlbmRzIEdSIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCwgXCJ2ZXJ0aWNhbEFsaWdubWVudFwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBaUiBleHRlbmRzIEdSIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCwgXCJob3Jpem9udGFsQWxpZ25tZW50XCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHRPIGV4dGVuZHMgR1Ige1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0LCBcImJvcmRlclN0eWxlXCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRBdHRyaWJ1dGUodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJFAodC5nZXRBdHRyaWJ1dGUodGhpcy5hdHRyaWJ1dGVOYW1lKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgZU8gZXh0ZW5kcyBHUiB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQsIFwiYm9yZGVyQ29sb3JcIilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldEF0dHJpYnV0ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAkUCh0LmdldEF0dHJpYnV0ZSh0aGlzLmF0dHJpYnV0ZU5hbWUpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBpTyBleHRlbmRzIEdSIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCwgXCJib3JkZXJXaWR0aFwiKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0QXR0cmlidXRlKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICRQKHQuZ2V0QXR0cmlidXRlKHRoaXMuYXR0cmlidXRlTmFtZSkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRWYWx1ZVRvU2V0KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBHUCh0LCBcInB4XCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IG5PID0gL14odG9wfGJvdHRvbSkkLztcclxuXHJcbiAgICAgICAgY2xhc3Mgb08gZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlRhYmxlQ2VsbFByb3BlcnRpZXNFZGl0aW5nXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGdldCByZXF1aXJlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbd0VdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5tb2RlbC5zY2hlbWE7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5jb252ZXJzaW9uO1xyXG4gICAgICAgICAgICAgICAgdC5kYXRhLmFkZFN0eWxlUHJvY2Vzc29yUnVsZXMoU1IpO1xyXG4gICAgICAgICAgICAgICAgck8oZSwgaSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcInRhYmxlQ2VsbEJvcmRlclN0eWxlXCIsIG5ldyB0Tyh0KSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcInRhYmxlQ2VsbEJvcmRlckNvbG9yXCIsIG5ldyBlTyh0KSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcInRhYmxlQ2VsbEJvcmRlcldpZHRoXCIsIG5ldyBpTyh0KSk7XHJcbiAgICAgICAgICAgICAgICBzTyhlLCBpKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwidGFibGVDZWxsSG9yaXpvbnRhbEFsaWdubWVudFwiLCBuZXcgWlIodCkpO1xyXG4gICAgICAgICAgICAgICAgY08oZSwgaSwgXCJ3aWR0aFwiLCBcIndpZHRoXCIpO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJ0YWJsZUNlbGxXaWR0aFwiLCBuZXcgSlIodCkpO1xyXG4gICAgICAgICAgICAgICAgY08oZSwgaSwgXCJoZWlnaHRcIiwgXCJoZWlnaHRcIik7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcInRhYmxlQ2VsbEhlaWdodFwiLCBuZXcgWVIodCkpO1xyXG4gICAgICAgICAgICAgICAgdC5kYXRhLmFkZFN0eWxlUHJvY2Vzc29yUnVsZXMoRFIpO1xyXG4gICAgICAgICAgICAgICAgY08oZSwgaSwgXCJwYWRkaW5nXCIsIFwicGFkZGluZ1wiKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwidGFibGVDZWxsUGFkZGluZ1wiLCBuZXcgS1IodCkpO1xyXG4gICAgICAgICAgICAgICAgdC5kYXRhLmFkZFN0eWxlUHJvY2Vzc29yUnVsZXMoalIpO1xyXG4gICAgICAgICAgICAgICAgY08oZSwgaSwgXCJiYWNrZ3JvdW5kQ29sb3JcIiwgXCJiYWNrZ3JvdW5kLWNvbG9yXCIpO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJ0YWJsZUNlbGxCYWNrZ3JvdW5kQ29sb3JcIiwgbmV3IFFSKHQpKTtcclxuICAgICAgICAgICAgICAgIGFPKGUsIGkpO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJ0YWJsZUNlbGxWZXJ0aWNhbEFsaWdubWVudFwiLCBuZXcgWFIodCkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHJPKHQsIGUpIHtcclxuICAgICAgICAgICAgdC5leHRlbmQoXCJ0YWJsZUNlbGxcIiwge2FsbG93QXR0cmlidXRlczogW1wiYm9yZGVyV2lkdGhcIiwgXCJib3JkZXJDb2xvclwiLCBcImJvcmRlclN0eWxlXCJdfSk7XHJcbiAgICAgICAgICAgIHFSKGUsIFwidGRcIik7XHJcbiAgICAgICAgICAgIHFSKGUsIFwidGhcIik7XHJcbiAgICAgICAgICAgIFVSKGUsIFwidGFibGVDZWxsXCIsIFwiYm9yZGVyU3R5bGVcIiwgXCJib3JkZXItc3R5bGVcIik7XHJcbiAgICAgICAgICAgIFVSKGUsIFwidGFibGVDZWxsXCIsIFwiYm9yZGVyQ29sb3JcIiwgXCJib3JkZXItY29sb3JcIik7XHJcbiAgICAgICAgICAgIFVSKGUsIFwidGFibGVDZWxsXCIsIFwiYm9yZGVyV2lkdGhcIiwgXCJib3JkZXItd2lkdGhcIilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNPKHQsIGUpIHtcclxuICAgICAgICAgICAgdC5leHRlbmQoXCJ0YWJsZUNlbGxcIiwge2FsbG93QXR0cmlidXRlczogW1wiaG9yaXpvbnRhbEFsaWdubWVudFwiXX0pO1xyXG4gICAgICAgICAgICBlLmF0dHJpYnV0ZVRvQXR0cmlidXRlKHtcclxuICAgICAgICAgICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJ0YWJsZUNlbGxcIixcclxuICAgICAgICAgICAgICAgICAgICBrZXk6IFwiaG9yaXpvbnRhbEFsaWdubWVudFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlczogW1wicmlnaHRcIiwgXCJjZW50ZXJcIiwgXCJqdXN0aWZ5XCJdXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdmlldzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHJpZ2h0OiB7a2V5OiBcInN0eWxlXCIsIHZhbHVlOiB7XCJ0ZXh0LWFsaWduXCI6IFwicmlnaHRcIn19LFxyXG4gICAgICAgICAgICAgICAgICAgIGNlbnRlcjoge2tleTogXCJzdHlsZVwiLCB2YWx1ZToge1widGV4dC1hbGlnblwiOiBcImNlbnRlclwifX0sXHJcbiAgICAgICAgICAgICAgICAgICAganVzdGlmeToge2tleTogXCJzdHlsZVwiLCB2YWx1ZToge1widGV4dC1hbGlnblwiOiBcImp1c3RpZnlcIn19XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBhTyh0LCBlKSB7XHJcbiAgICAgICAgICAgIHQuZXh0ZW5kKFwidGFibGVDZWxsXCIsIHthbGxvd0F0dHJpYnV0ZXM6IFtcInZlcnRpY2FsQWxpZ25tZW50XCJdfSk7XHJcbiAgICAgICAgICAgIGUuYXR0cmlidXRlVG9BdHRyaWJ1dGUoe1xyXG4gICAgICAgICAgICAgICAgbW9kZWw6IHtuYW1lOiBcInRhYmxlQ2VsbFwiLCBrZXk6IFwidmVydGljYWxBbGlnbm1lbnRcIiwgdmFsdWVzOiBbXCJ0b3BcIiwgXCJib3R0b21cIl19LFxyXG4gICAgICAgICAgICAgICAgdmlldzoge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvcDoge2tleTogXCJzdHlsZVwiLCB2YWx1ZToge1widmVydGljYWwtYWxpZ25cIjogXCJ0b3BcIn19LFxyXG4gICAgICAgICAgICAgICAgICAgIGJvdHRvbToge2tleTogXCJzdHlsZVwiLCB2YWx1ZToge1widmVydGljYWwtYWxpZ25cIjogXCJib3R0b21cIn19XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBlLmZvcihcInVwY2FzdFwiKS5hdHRyaWJ1dGVUb0F0dHJpYnV0ZSh7XHJcbiAgICAgICAgICAgICAgICB2aWV3OiB7YXR0cmlidXRlczoge3ZhbGlnbjogbk99fSxcclxuICAgICAgICAgICAgICAgIG1vZGVsOiB7bmFtZTogXCJ0YWJsZUNlbGxcIiwga2V5OiBcInZlcnRpY2FsQWxpZ25tZW50XCIsIHZhbHVlOiB0ID0+IHQuZ2V0QXR0cmlidXRlKFwidmFsaWduXCIpfVxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gY08odCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICB0LmV4dGVuZChcInRhYmxlQ2VsbFwiLCB7YWxsb3dBdHRyaWJ1dGVzOiBbaV19KTtcclxuICAgICAgICAgICAgV1IoZSwgXCJ0YWJsZUNlbGxcIiwgaSwgbik7XHJcbiAgICAgICAgICAgIFVSKGUsIFwidGFibGVDZWxsXCIsIGksIG4pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBsTyBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiVGFibGVDZWxsUHJvcGVydGllc1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW29PLCBQUl1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgZE8gZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW2x5XVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJUYWJsZVRvb2xiYXJcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBhZnRlckluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQucGx1Z2lucy5nZXQobHkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuY29uZmlnLmdldChcInRhYmxlLmNvbnRlbnRUb29sYmFyXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHQuY29uZmlnLmdldChcInRhYmxlLnRhYmxlVG9vbGJhclwiKTtcclxuICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5yZWdpc3RlcihcInRhYmxlQ29udGVudFwiLCB7YXJpYUxhYmVsOiBlKFwiaXZcIiksIGl0ZW1zOiBuLCBnZXRSZWxhdGVkRWxlbWVudDogblN9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKG8pIHtcclxuICAgICAgICAgICAgICAgICAgICBpLnJlZ2lzdGVyKFwidGFibGVcIiwge2FyaWFMYWJlbDogZShcIml2XCIpLCBpdGVtczogbywgZ2V0UmVsYXRlZEVsZW1lbnQ6IGlTfSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgdU8gZXh0ZW5kcyBqdyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5hdHRyaWJ1dGVOYW1lID0gZVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZWZyZXNoKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubW9kZWwuZG9jdW1lbnQuc2VsZWN0aW9uO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IFdQKFwidGFibGVcIiwgZS5nZXRGaXJzdFBvc2l0aW9uKCkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSAhIWk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5fZ2V0VmFsdWUoaSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZXhlY3V0ZSh0ID0ge30pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5tb2RlbDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmRvY3VtZW50LnNlbGVjdGlvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHt2YWx1ZTogbiwgYmF0Y2g6IG99ID0gdDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBXUChcInRhYmxlXCIsIGkuZ2V0Rmlyc3RQb3NpdGlvbigpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB0aGlzLl9nZXRWYWx1ZVRvU2V0KG4pO1xyXG4gICAgICAgICAgICAgICAgZS5lbnF1ZXVlQ2hhbmdlKG8gfHwgXCJkZWZhdWx0XCIsIHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQuc2V0QXR0cmlidXRlKHRoaXMuYXR0cmlidXRlTmFtZSwgcywgcilcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLmF0dHJpYnV0ZU5hbWUsIHIpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldFZhbHVlKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHQuZ2V0QXR0cmlidXRlKHRoaXMuYXR0cmlidXRlTmFtZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldFZhbHVlVG9TZXQodCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgaE8gZXh0ZW5kcyB1TyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQsIFwiYmFja2dyb3VuZENvbG9yXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGZPIGV4dGVuZHMgdU8ge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0LCBcImJvcmRlckNvbG9yXCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRWYWx1ZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAkUCh0LmdldEF0dHJpYnV0ZSh0aGlzLmF0dHJpYnV0ZU5hbWUpKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBnTyBleHRlbmRzIHVPIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCwgXCJib3JkZXJTdHlsZVwiKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0VmFsdWUodCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJFAodC5nZXRBdHRyaWJ1dGUodGhpcy5hdHRyaWJ1dGVOYW1lKSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgbU8gZXh0ZW5kcyB1TyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQsIFwiYm9yZGVyV2lkdGhcIilcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldFZhbHVlKHQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICRQKHQuZ2V0QXR0cmlidXRlKHRoaXMuYXR0cmlidXRlTmFtZSkpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRWYWx1ZVRvU2V0KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBHUCh0LCBcInB4XCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIHBPIGV4dGVuZHMgdU8ge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0LCBcIndpZHRoXCIpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRWYWx1ZVRvU2V0KHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBHUCh0LCBcInB4XCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGJPIGV4dGVuZHMgdU8ge1xyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0LCBcImhlaWdodFwiKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfZ2V0VmFsdWVUb1NldCh0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gR1AodCwgXCJweFwiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyB3TyBleHRlbmRzIHVPIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCwgXCJhbGlnbm1lbnRcIilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3Qga08gPSAvXihsZWZ0fHJpZ2h0KSQvO1xyXG5cclxuICAgICAgICBjbGFzcyBfTyBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiVGFibGVQcm9wZXJ0aWVzRWRpdGluZ1wiXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3dFXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubW9kZWwuc2NoZW1hO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuY29udmVyc2lvbjtcclxuICAgICAgICAgICAgICAgIHQuZGF0YS5hZGRTdHlsZVByb2Nlc3NvclJ1bGVzKFNSKTtcclxuICAgICAgICAgICAgICAgIHZPKGUsIGkpO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJ0YWJsZUJvcmRlckNvbG9yXCIsIG5ldyBmTyh0KSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcInRhYmxlQm9yZGVyU3R5bGVcIiwgbmV3IGdPKHQpKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwidGFibGVCb3JkZXJXaWR0aFwiLCBuZXcgbU8odCkpO1xyXG4gICAgICAgICAgICAgICAgeU8oZSwgaSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcInRhYmxlQWxpZ25tZW50XCIsIG5ldyB3Tyh0KSk7XHJcbiAgICAgICAgICAgICAgICBDTyhlLCBpLCBcIndpZHRoXCIsIFwid2lkdGhcIik7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcInRhYmxlV2lkdGhcIiwgbmV3IHBPKHQpKTtcclxuICAgICAgICAgICAgICAgIENPKGUsIGksIFwiaGVpZ2h0XCIsIFwiaGVpZ2h0XCIpO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJ0YWJsZUhlaWdodFwiLCBuZXcgYk8odCkpO1xyXG4gICAgICAgICAgICAgICAgdC5kYXRhLmFkZFN0eWxlUHJvY2Vzc29yUnVsZXMoalIpO1xyXG4gICAgICAgICAgICAgICAgeE8oZSwgaSwgXCJiYWNrZ3JvdW5kQ29sb3JcIiwgXCJiYWNrZ3JvdW5kLWNvbG9yXCIpO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJ0YWJsZUJhY2tncm91bmRDb2xvclwiLCBuZXcgaE8odCkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHZPKHQsIGUpIHtcclxuICAgICAgICAgICAgdC5leHRlbmQoXCJ0YWJsZVwiLCB7YWxsb3dBdHRyaWJ1dGVzOiBbXCJib3JkZXJXaWR0aFwiLCBcImJvcmRlckNvbG9yXCIsIFwiYm9yZGVyU3R5bGVcIl19KTtcclxuICAgICAgICAgICAgcVIoZSwgXCJ0YWJsZVwiKTtcclxuICAgICAgICAgICAgJFIoZSwgXCJib3JkZXJDb2xvclwiLCBcImJvcmRlci1jb2xvclwiKTtcclxuICAgICAgICAgICAgJFIoZSwgXCJib3JkZXJTdHlsZVwiLCBcImJvcmRlci1zdHlsZVwiKTtcclxuICAgICAgICAgICAgJFIoZSwgXCJib3JkZXJXaWR0aFwiLCBcImJvcmRlci13aWR0aFwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24geU8odCwgZSkge1xyXG4gICAgICAgICAgICB0LmV4dGVuZChcInRhYmxlXCIsIHthbGxvd0F0dHJpYnV0ZXM6IFtcImFsaWdubWVudFwiXX0pO1xyXG4gICAgICAgICAgICBlLmF0dHJpYnV0ZVRvQXR0cmlidXRlKHtcclxuICAgICAgICAgICAgICAgIG1vZGVsOiB7bmFtZTogXCJ0YWJsZVwiLCBrZXk6IFwiYWxpZ25tZW50XCIsIHZhbHVlczogW1wibGVmdFwiLCBcInJpZ2h0XCJdfSxcclxuICAgICAgICAgICAgICAgIHZpZXc6IHtsZWZ0OiB7a2V5OiBcInN0eWxlXCIsIHZhbHVlOiB7ZmxvYXQ6IFwibGVmdFwifX0sIHJpZ2h0OiB7a2V5OiBcInN0eWxlXCIsIHZhbHVlOiB7ZmxvYXQ6IFwicmlnaHRcIn19fSxcclxuICAgICAgICAgICAgICAgIGNvbnZlcnRlclByaW9yaXR5OiBcImhpZ2hcIlxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgZS5mb3IoXCJ1cGNhc3RcIikuYXR0cmlidXRlVG9BdHRyaWJ1dGUoe1xyXG4gICAgICAgICAgICAgICAgdmlldzoge2F0dHJpYnV0ZXM6IHthbGlnbjoga099fSxcclxuICAgICAgICAgICAgICAgIG1vZGVsOiB7bmFtZTogXCJ0YWJsZVwiLCBrZXk6IFwiYWxpZ25tZW50XCIsIHZhbHVlOiB0ID0+IHQuZ2V0QXR0cmlidXRlKFwiYWxpZ25cIil9XHJcbiAgICAgICAgICAgIH0pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB4Tyh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIHQuZXh0ZW5kKFwidGFibGVcIiwge2FsbG93QXR0cmlidXRlczogW2ldfSk7XHJcbiAgICAgICAgICAgIFdSKGUsIFwidGFibGVcIiwgaSwgbik7XHJcbiAgICAgICAgICAgICRSKGUsIGksIG4pXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBDTyh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIHQuZXh0ZW5kKFwidGFibGVcIiwge2FsbG93QXR0cmlidXRlczogW2ldfSk7XHJcbiAgICAgICAgICAgIFdSKGUsIFwidGFibGVcIiwgaSwgbik7XHJcbiAgICAgICAgICAgIFVSKGUsIFwidGFibGVcIiwgaSwgbilcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBBTyA9IGkoMTEyKTtcclxuICAgICAgICBjb25zdCBUTyA9IHtsZWZ0OiBreSwgY2VudGVyOiBfeSwgcmlnaHQ6IHZ5fTtcclxuXHJcbiAgICAgICAgY2xhc3MgUE8gZXh0ZW5kcyBHcCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXQoe1xyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlclN0eWxlOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICB3aWR0aDogXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYWxpZ25tZW50OiBcIlwiXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMub3B0aW9ucyA9IGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7Ym9yZGVyU3R5bGVEcm9wZG93bjogaSwgYm9yZGVyV2lkdGhJbnB1dDogbiwgYm9yZGVyQ29sb3JJbnB1dDogbywgYm9yZGVyUm93TGFiZWw6IHJ9ID0gdGhpcy5fY3JlYXRlQm9yZGVyRmllbGRzKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7d2lkdGhJbnB1dDogcywgb3BlcmF0b3JMYWJlbDogYSwgaGVpZ2h0SW5wdXQ6IGMsIGRpbWVuc2lvbnNMYWJlbDogbH0gPSB0aGlzLl9jcmVhdGVEaW1lbnNpb25GaWVsZHMoKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHthbGlnbm1lbnRUb29sYmFyOiBkLCBhbGlnbm1lbnRMYWJlbDogdX0gPSB0aGlzLl9jcmVhdGVBbGlnbm1lbnRGaWVsZHMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNUcmFja2VyID0gbmV3IGZiO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzdHJva2VzID0gbmV3IGRwO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbiA9IHRoaXMuY3JlYXRlQ29sbGVjdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5ib3JkZXJTdHlsZURyb3Bkb3duID0gaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYm9yZGVyV2lkdGhJbnB1dCA9IG47XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJvcmRlckNvbG9ySW5wdXQgPSBvO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5iYWNrZ3JvdW5kSW5wdXQgPSB0aGlzLl9jcmVhdGVCYWNrZ3JvdW5kRmllbGQoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMud2lkdGhJbnB1dCA9IHM7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmhlaWdodElucHV0ID0gYztcclxuICAgICAgICAgICAgICAgIHRoaXMuYWxpZ25tZW50VG9vbGJhciA9IGQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7c2F2ZUJ1dHRvblZpZXc6IGgsIGNhbmNlbEJ1dHRvblZpZXc6IGZ9ID0gdGhpcy5fY3JlYXRlQWN0aW9uQnV0dG9ucygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zYXZlQnV0dG9uVmlldyA9IGg7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbmNlbEJ1dHRvblZpZXcgPSBmO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNhYmxlcyA9IG5ldyBicDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvY3VzQ3ljbGVyID0gbmV3IHliKHtcclxuICAgICAgICAgICAgICAgICAgICBmb2N1c2FibGVzOiB0aGlzLl9mb2N1c2FibGVzLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzVHJhY2tlcjogdGhpcy5mb2N1c1RyYWNrZXIsXHJcbiAgICAgICAgICAgICAgICAgICAga2V5c3Ryb2tlSGFuZGxlcjogdGhpcy5rZXlzdHJva2VzLFxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbnM6IHtmb2N1c1ByZXZpb3VzOiBcInNoaWZ0ICsgdGFiXCIsIGZvY3VzTmV4dDogXCJ0YWJcIn1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5hZGQobmV3IG1SKHQsIHtsYWJlbDogdGhpcy50KFwi0KHQstC+0LnRgdGC0LLQsCDRgtCw0LHQu9C40YbRi1wiKX0pKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uYWRkKG5ldyBmUih0LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxWaWV3OiByLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBbciwgaSwgbywgbl0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFwiY2stdGFibGUtZm9ybV9fYm9yZGVyLXJvd1wiXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNoaWxkcmVuLmFkZChuZXcgZlIodCwge2NoaWxkcmVuOiBbdGhpcy5iYWNrZ3JvdW5kSW5wdXRdfSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jaGlsZHJlbi5hZGQobmV3IGZSKHQsIHtcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW25ldyBmUih0LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsVmlldzogbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFtsLCBzLCBhLCBjXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3M6IFwiY2stdGFibGUtZm9ybV9fZGltZW5zaW9ucy1yb3dcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0pLCBuZXcgZlIodCwge2xhYmVsVmlldzogdSwgY2hpbGRyZW46IFt1LCBkXSwgY2xhc3M6IFwiY2stdGFibGUtcHJvcGVydGllcy1mb3JtX19hbGlnbm1lbnQtcm93XCJ9KV1cclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2hpbGRyZW4uYWRkKG5ldyBmUih0LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IFt0aGlzLnNhdmVCdXR0b25WaWV3LCB0aGlzLmNhbmNlbEJ1dHRvblZpZXddLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzOiBcImNrLXRhYmxlLWZvcm1fX2FjdGlvbi1yb3dcIlxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUZW1wbGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgdGFnOiBcImZvcm1cIixcclxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGVzOiB7Y2xhc3M6IFtcImNrXCIsIFwiY2stZm9ybVwiLCBcImNrLXRhYmxlLWZvcm1cIiwgXCJjay10YWJsZS1wcm9wZXJ0aWVzLWZvcm1cIl0sIHRhYmluZGV4OiBcIi0xXCJ9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiB0aGlzLmNoaWxkcmVuXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZW5kZXIoKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5yZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgIFF2KHt2aWV3OiB0aGlzfSk7XHJcbiAgICAgICAgICAgICAgICBbdGhpcy5ib3JkZXJTdHlsZURyb3Bkb3duLCB0aGlzLmJvcmRlckNvbG9ySW5wdXQsIHRoaXMuYm9yZGVyV2lkdGhJbnB1dCwgdGhpcy5iYWNrZ3JvdW5kSW5wdXQsIHRoaXMud2lkdGhJbnB1dCwgdGhpcy5oZWlnaHRJbnB1dCwgdGhpcy5hbGlnbm1lbnRUb29sYmFyLCB0aGlzLnNhdmVCdXR0b25WaWV3LCB0aGlzLmNhbmNlbEJ1dHRvblZpZXddLmZvckVhY2godCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZm9jdXNhYmxlcy5hZGQodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5mb2N1c1RyYWNrZXIuYWRkKHQuZWxlbWVudClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzdHJva2VzLmxpc3RlblRvKHRoaXMuZWxlbWVudClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9jdXMoKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9mb2N1c0N5Y2xlci5mb2N1c0ZpcnN0KClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2NyZWF0ZUJvcmRlckZpZWxkcygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSBjUih7Y29sb3JDb25maWc6IHRoaXMub3B0aW9ucy5ib3JkZXJDb2xvcnMsIGNvbHVtbnM6IDV9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IE1rKGUpO1xyXG4gICAgICAgICAgICAgICAgbi50ZXh0ID0gaShcIm5iXCIpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IFpFKHRoaXMudCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbmV3IEhFKGUsIHFFKTtcclxuICAgICAgICAgICAgICAgIHIuc2V0KHtsYWJlbDogaShcIm5jXCIpLCBjbGFzczogXCJjay10YWJsZS1mb3JtX19ib3JkZXItc3R5bGVcIn0pO1xyXG4gICAgICAgICAgICAgICAgci52aWV3LmJ1dHRvblZpZXcuc2V0KHtpc09uOiBmYWxzZSwgd2l0aFRleHQ6IHRydWUsIHRvb2x0aXA6IGkoXCJuY1wiKX0pO1xyXG4gICAgICAgICAgICAgICAgci52aWV3LmJ1dHRvblZpZXcuYmluZChcImxhYmVsXCIpLnRvKHRoaXMsIFwiYm9yZGVyU3R5bGVcIiwgdCA9PiBvW3QgPyB0IDogXCJub25lXCJdKTtcclxuICAgICAgICAgICAgICAgIHIudmlldy5vbihcImV4ZWN1dGVcIiwgdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5ib3JkZXJTdHlsZSA9IHQuc291cmNlLl9ib3JkZXJTdHlsZVZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIFViKHIudmlldywgclIodGhpcykpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG5ldyBIRShlLCBXRSk7XHJcbiAgICAgICAgICAgICAgICBzLnNldCh7bGFiZWw6IGkoXCJuZFwiKSwgY2xhc3M6IFwiY2stdGFibGUtZm9ybV9fYm9yZGVyLXdpZHRoXCJ9KTtcclxuICAgICAgICAgICAgICAgIHMudmlldy5iaW5kKFwidmFsdWVcIikudG8odGhpcywgXCJib3JkZXJXaWR0aFwiKTtcclxuICAgICAgICAgICAgICAgIHMuYmluZChcImlzRW5hYmxlZFwiKS50byh0aGlzLCBcImJvcmRlclN0eWxlXCIsIFNPKTtcclxuICAgICAgICAgICAgICAgIHMudmlldy5vbihcImlucHV0XCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvcmRlcldpZHRoID0gcy52aWV3LmVsZW1lbnQudmFsdWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYSA9IG5ldyBIRShlLCB0KTtcclxuICAgICAgICAgICAgICAgIGEuc2V0KHtsYWJlbDogaShcIm5lXCIpLCBjbGFzczogXCJjay10YWJsZS1mb3JtX19ib3JkZXItY29sb3JcIn0pO1xyXG4gICAgICAgICAgICAgICAgYS52aWV3LmJpbmQoXCJ2YWx1ZVwiKS50byh0aGlzLCBcImJvcmRlckNvbG9yXCIpO1xyXG4gICAgICAgICAgICAgICAgYS5iaW5kKFwiaXNFbmFibGVkXCIpLnRvKHRoaXMsIFwiYm9yZGVyU3R5bGVcIiwgU08pO1xyXG4gICAgICAgICAgICAgICAgYS52aWV3Lm9uKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm9yZGVyQ29sb3IgPSBhLnZpZXcudmFsdWVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vbihcImNoYW5nZTpib3JkZXJTdHlsZVwiLCAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghU08oaSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5ib3JkZXJDb2xvciA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYm9yZGVyV2lkdGggPSBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge2JvcmRlclJvd0xhYmVsOiBuLCBib3JkZXJTdHlsZURyb3Bkb3duOiByLCBib3JkZXJDb2xvcklucHV0OiBhLCBib3JkZXJXaWR0aElucHV0OiBzfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlQmFja2dyb3VuZEZpZWxkKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IGNSKHtjb2xvckNvbmZpZzogdGhpcy5vcHRpb25zLmJhY2tncm91bmRDb2xvcnMsIGNvbHVtbnM6IDV9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IEhFKGUsIHQpO1xyXG4gICAgICAgICAgICAgICAgbi5zZXQoe2xhYmVsOiBpKFwibmZcIiksIGNsYXNzOiBcImNrLXRhYmxlLXByb3BlcnRpZXMtZm9ybV9fYmFja2dyb3VuZFwifSk7XHJcbiAgICAgICAgICAgICAgICBuLnZpZXcuYmluZChcInZhbHVlXCIpLnRvKHRoaXMsIFwiYmFja2dyb3VuZENvbG9yXCIpO1xyXG4gICAgICAgICAgICAgICAgbi52aWV3Lm9uKFwiaW5wdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gbi52aWV3LnZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVEaW1lbnNpb25GaWVsZHMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5sb2NhbGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBNayh0KTtcclxuICAgICAgICAgICAgICAgIGkudGV4dCA9IGUoXCJuZ1wiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgSEUodCwgV0UpO1xyXG4gICAgICAgICAgICAgICAgbi5zZXQoe2xhYmVsOiBlKFwibmRcIiksIGNsYXNzOiBcImNrLXRhYmxlLWZvcm1fX2RpbWVuc2lvbnMtcm93X193aWR0aFwifSk7XHJcbiAgICAgICAgICAgICAgICBuLnZpZXcuYmluZChcInZhbHVlXCIpLnRvKHRoaXMsIFwid2lkdGhcIik7XHJcbiAgICAgICAgICAgICAgICBuLnZpZXcub24oXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy53aWR0aCA9IG4udmlldy5lbGVtZW50LnZhbHVlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgR3AodCk7XHJcbiAgICAgICAgICAgICAgICBvLnNldFRlbXBsYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICB0YWc6IFwic3BhblwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHtjbGFzczogW1wiY2stdGFibGUtZm9ybV9fZGltZW5zaW9uLW9wZXJhdG9yXCJdfSxcclxuICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogW3t0ZXh0OiBcIsOXXCJ9XVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbmV3IEhFKHQsIFdFKTtcclxuICAgICAgICAgICAgICAgIHIuc2V0KHtsYWJlbDogZShcIm5oXCIpLCBjbGFzczogXCJjay10YWJsZS1mb3JtX19kaW1lbnNpb25zLXJvd19faGVpZ2h0XCJ9KTtcclxuICAgICAgICAgICAgICAgIHIudmlldy5iaW5kKFwidmFsdWVcIikudG8odGhpcywgXCJoZWlnaHRcIik7XHJcbiAgICAgICAgICAgICAgICByLnZpZXcub24oXCJpbnB1dFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSByLnZpZXcuZWxlbWVudC52YWx1ZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge2RpbWVuc2lvbnNMYWJlbDogaSwgd2lkdGhJbnB1dDogbiwgb3BlcmF0b3JMYWJlbDogbywgaGVpZ2h0SW5wdXQ6IHJ9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVBbGlnbm1lbnRGaWVsZHMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5sb2NhbGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IG5ldyBNayh0KTtcclxuICAgICAgICAgICAgICAgIGkudGV4dCA9IGUoXCJudFwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgWGIodCk7XHJcbiAgICAgICAgICAgICAgICBuLnNldCh7aXNDb21wYWN0OiB0cnVlLCBhcmlhTGFiZWw6IGUoXCJudVwiKX0pO1xyXG4gICAgICAgICAgICAgICAgc1Ioe1xyXG4gICAgICAgICAgICAgICAgICAgIHZpZXc6IHRoaXMsXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvbnM6IFRPLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvb2xiYXI6IG4sXHJcbiAgICAgICAgICAgICAgICAgICAgbGFiZWxzOiB0aGlzLl9hbGlnbm1lbnRMYWJlbHMsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lOiBcImFsaWdubWVudFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIG5hbWVUb1ZhbHVlOiB0ID0+IHQgPT09IFwiY2VudGVyXCIgPyBcIlwiIDogdFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge2FsaWdubWVudExhYmVsOiBpLCBhbGlnbm1lbnRUb29sYmFyOiBufVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfY3JlYXRlQWN0aW9uQnV0dG9ucygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmxvY2FsZTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gbmV3IGhiKHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBoYih0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBbdGhpcy5ib3JkZXJXaWR0aElucHV0LCB0aGlzLmJvcmRlckNvbG9ySW5wdXQsIHRoaXMuYmFja2dyb3VuZElucHV0LCB0aGlzLndpZHRoSW5wdXQsIHRoaXMuaGVpZ2h0SW5wdXRdO1xyXG4gICAgICAgICAgICAgICAgaS5zZXQoe2xhYmVsOiBlKFwibG9cIiksIGljb246IFh2LCBjbGFzczogXCJjay1idXR0b24tc2F2ZVwiLCB0eXBlOiBcInN1Ym1pdFwiLCB3aXRoVGV4dDogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgaS5iaW5kKFwiaXNFbmFibGVkXCIpLnRvTWFueShvLCBcImVycm9yVGV4dFwiLCAoLi4udCkgPT4gdC5ldmVyeSh0ID0+ICF0KSk7XHJcbiAgICAgICAgICAgICAgICBuLnNldCh7bGFiZWw6IGUoXCJscFwiKSwgaWNvbjogWnYsIGNsYXNzOiBcImNrLWJ1dHRvbi1jYW5jZWxcIiwgdHlwZTogXCJjYW5jZWxcIiwgd2l0aFRleHQ6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgIG4uZGVsZWdhdGUoXCJleGVjdXRlXCIpLnRvKHRoaXMsIFwiY2FuY2VsXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtzYXZlQnV0dG9uVmlldzogaSwgY2FuY2VsQnV0dG9uVmlldzogbn1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0IF9hbGlnbm1lbnRMYWJlbHMoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5sb2NhbGU7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy50O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUoXCJudlwiKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlKFwibndcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gZShcIm54XCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQudWlMYW5ndWFnZURpcmVjdGlvbiA9PT0gXCJydGxcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7cmlnaHQ6IG8sIGNlbnRlcjogbiwgbGVmdDogaX1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtsZWZ0OiBpLCBjZW50ZXI6IG4sIHJpZ2h0OiBvfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBTTyh0KSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhIXRcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBFTyA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk04IDJ2NWg0VjJoMXY1aDV2MWgtNXY0aC4wMjFsLS4xNzIuMzUxLTEuOTE2LjI4LS4xNTEuMDI3Yy0uMjg3LjA2My0uNTQuMTgyLS43NTUuMzQxTDggMTN2NUg3di01SDJ2LTFoNVY4SDJWN2g1VjJoMXptNCA2SDh2NGg0Vjh6XCIgb3BhY2l0eT1cIi42XCIvPjxwYXRoIGQ9XCJNMTUuNSAxMS41bDEuMzIzIDIuNjggMi45NTcuNDMtMi4xNCAyLjA4NS41MDUgMi45NDZMMTUuNSAxOC4yNWwtMi42NDUgMS4zOS41MDUtMi45NDUtMi4xNC0yLjA4NiAyLjk1Ny0uNDNMMTUuNSAxMS41ek0xNyAxYTIgMiAwIDAgMSAyIDJ2OS40NzVsLS44NS0uMTI0LS44NTctMS43MzZhMi4wNDggMi4wNDggMCAwIDAtLjI5Mi0uNDRMMTcgM0gzdjE0aDcuODA4bC40MDIuMzkyTDEwLjkzNSAxOUgzYTIgMiAwIDAgMS0yLTJWM2EyIDIgMCAwIDEgMi0yaDE0elwiLz48L3N2Zz4nO1xyXG4gICAgICAgIGNvbnN0IFJPID0gNTAwO1xyXG5cclxuICAgICAgICBjbGFzcyBPTyBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCByZXF1aXJlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBba2JdXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlRhYmxlUHJvcGVydGllc1VJXCJcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXIodCk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbmZpZy5kZWZpbmUoXCJ0YWJsZS50YWJsZVByb3BlcnRpZXNcIiwge2JvcmRlckNvbG9yczogYVIsIGJhY2tncm91bmRDb2xvcnM6IGFSfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaW5pdCgpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9iYWxsb29uID0gdC5wbHVnaW5zLmdldChrYik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcgPSB0aGlzLl9jcmVhdGVQcm9wZXJ0aWVzVmlldygpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdW5kb1N0ZXBCYXRjaCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB0LnVpLmNvbXBvbmVudEZhY3RvcnkuYWRkKFwidGFibGVQcm9wZXJ0aWVzXCIsIHQgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBuZXcgaGIodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5zZXQoe2xhYmVsOiBlKFwia2dcIiksIGljb246IEVPLCB0b29sdGlwOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhpLCBcImV4ZWN1dGVcIiwgKCkgPT4gdGhpcy5fc2hvd1ZpZXcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGRlc3Ryb3koKSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlci5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuZGVzdHJveSgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9jcmVhdGVQcm9wZXJ0aWVzVmlldygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvcjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0LmVkaXRpbmcudmlldy5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0LmNvbmZpZy5nZXQoXCJ0YWJsZS50YWJsZVByb3BlcnRpZXNcIik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gX18oaS5ib3JkZXJDb2xvcnMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGtfKHQubG9jYWxlLCBuKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBfXyhpLmJhY2tncm91bmRDb2xvcnMpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IGtfKHQubG9jYWxlLCByKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGEgPSBuZXcgUE8odC5sb2NhbGUsIHtib3JkZXJDb2xvcnM6IG8sIGJhY2tncm91bmRDb2xvcnM6IHN9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGMgPSB0LnQ7XHJcbiAgICAgICAgICAgICAgICBhLnJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhhLCBcInN1Ym1pdFwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5faGlkZVZpZXcoKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKGEsIFwiY2FuY2VsXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5fdW5kb1N0ZXBCYXRjaC5vcGVyYXRpb25zLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmV4ZWN1dGUoXCJ1bmRvXCIsIHRoaXMuX3VuZG9TdGVwQmF0Y2gpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpZGVWaWV3KClcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYS5rZXlzdHJva2VzLnNldChcIkVzY1wiLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpZGVWaWV3KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZSgpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8odC51aSwgXCJ1cGRhdGVcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghblMoZS5zZWxlY3Rpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2hpZGVWaWV3KClcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2lzVmlld1Zpc2libGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgWUUodCwgXCJ0YWJsZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgRGIoe1xyXG4gICAgICAgICAgICAgICAgICAgIGVtaXR0ZXI6IGEsXHJcbiAgICAgICAgICAgICAgICAgICAgYWN0aXZhdG9yOiAoKSA9PiB0aGlzLl9pc1ZpZXdJbkJhbGxvb24sXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dEVsZW1lbnRzOiBbdGhpcy5fYmFsbG9vbi52aWV3LmVsZW1lbnRdLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAoKSA9PiB0aGlzLl9oaWRlVmlldygpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGwgPSB0UihjKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGQgPSBlUihjKTtcclxuICAgICAgICAgICAgICAgIGEub24oXCJjaGFuZ2U6Ym9yZGVyU3R5bGVcIiwgdGhpcy5fZ2V0UHJvcGVydHlDaGFuZ2VDYWxsYmFjayhcInRhYmxlQm9yZGVyU3R5bGVcIikpO1xyXG4gICAgICAgICAgICAgICAgYS5vbihcImNoYW5nZTpib3JkZXJDb2xvclwiLCB0aGlzLl9nZXRWYWxpZGF0ZWRQcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3RmllbGQ6IGEuYm9yZGVyQ29sb3JJbnB1dCxcclxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kTmFtZTogXCJ0YWJsZUJvcmRlckNvbG9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JUZXh0OiBsLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogaVJcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIGEub24oXCJjaGFuZ2U6Ym9yZGVyV2lkdGhcIiwgdGhpcy5fZ2V0VmFsaWRhdGVkUHJvcGVydHlDaGFuZ2VDYWxsYmFjayh7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlld0ZpZWxkOiBhLmJvcmRlcldpZHRoSW5wdXQsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZE5hbWU6IFwidGFibGVCb3JkZXJXaWR0aFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yVGV4dDogZCxcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IG9SXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICBhLm9uKFwiY2hhbmdlOmJhY2tncm91bmRDb2xvclwiLCB0aGlzLl9nZXRWYWxpZGF0ZWRQcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3RmllbGQ6IGEuYmFja2dyb3VuZElucHV0LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbW1hbmROYW1lOiBcInRhYmxlQmFja2dyb3VuZENvbG9yXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZXJyb3JUZXh0OiBsLFxyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogaVJcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgICAgIGEub24oXCJjaGFuZ2U6d2lkdGhcIiwgdGhpcy5fZ2V0VmFsaWRhdGVkUHJvcGVydHlDaGFuZ2VDYWxsYmFjayh7XHJcbiAgICAgICAgICAgICAgICAgICAgdmlld0ZpZWxkOiBhLndpZHRoSW5wdXQsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZE5hbWU6IFwidGFibGVXaWR0aFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yVGV4dDogZCxcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IG5SXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgICAgICBhLm9uKFwiY2hhbmdlOmhlaWdodFwiLCB0aGlzLl9nZXRWYWxpZGF0ZWRQcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKHtcclxuICAgICAgICAgICAgICAgICAgICB2aWV3RmllbGQ6IGEuaGVpZ2h0SW5wdXQsXHJcbiAgICAgICAgICAgICAgICAgICAgY29tbWFuZE5hbWU6IFwidGFibGVIZWlnaHRcIixcclxuICAgICAgICAgICAgICAgICAgICBlcnJvclRleHQ6IGQsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBuUlxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICAgICAgYS5vbihcImNoYW5nZTphbGlnbm1lbnRcIiwgdGhpcy5fZ2V0UHJvcGVydHlDaGFuZ2VDYWxsYmFjayhcInRhYmxlQWxpZ25tZW50XCIpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9maWxsVmlld0Zvcm1Gcm9tQ29tbWFuZFZhbHVlcygpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB0aGlzLmVkaXRvci5jb21tYW5kcztcclxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5zZXQoe1xyXG4gICAgICAgICAgICAgICAgICAgIGJvcmRlclN0eWxlOiB0LmdldChcInRhYmxlQm9yZGVyU3R5bGVcIikudmFsdWUgfHwgXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogdC5nZXQoXCJ0YWJsZUJvcmRlckNvbG9yXCIpLnZhbHVlIHx8IFwiXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IHQuZ2V0KFwidGFibGVCb3JkZXJXaWR0aFwiKS52YWx1ZSB8fCBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogdC5nZXQoXCJ0YWJsZUJhY2tncm91bmRDb2xvclwiKS52YWx1ZSB8fCBcIlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiB0LmdldChcInRhYmxlV2lkdGhcIikudmFsdWUgfHwgXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IHQuZ2V0KFwidGFibGVIZWlnaHRcIikudmFsdWUgfHwgXCJcIixcclxuICAgICAgICAgICAgICAgICAgICBhbGlnbm1lbnQ6IHQuZ2V0KFwidGFibGVBbGlnbm1lbnRcIikudmFsdWUgfHwgXCJcIlxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3Nob3dWaWV3KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYmFsbG9vbi5hZGQoe3ZpZXc6IHRoaXMudmlldywgcG9zaXRpb246IFFFKHQpfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl91bmRvU3RlcEJhdGNoID0gdC5tb2RlbC5jcmVhdGVCYXRjaCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZmlsbFZpZXdGb3JtRnJvbUNvbW1hbmRWYWx1ZXMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMudmlldy5mb2N1cygpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9oaWRlVmlldygpIHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcy5faXNWaWV3SW5CYWxsb29uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BMaXN0ZW5pbmcodC51aSwgXCJ1cGRhdGVcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZpZXcuc2F2ZUJ1dHRvblZpZXcuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhbGxvb24ucmVtb3ZlKHRoaXMudmlldyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBnZXQgX2lzVmlld1Zpc2libGUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmFsbG9vbi52aXNpYmxlVmlldyA9PT0gdGhpcy52aWV3XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGdldCBfaXNWaWV3SW5CYWxsb29uKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JhbGxvb24uaGFzVmlldyh0aGlzLnZpZXcpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRQcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoZSwgaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmV4ZWN1dGUodCwge3ZhbHVlOiBuLCBiYXRjaDogdGhpcy5fdW5kb1N0ZXBCYXRjaH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9nZXRWYWxpZGF0ZWRQcm9wZXJ0eUNoYW5nZUNhbGxiYWNrKHtjb21tYW5kTmFtZTogdCwgdmlld0ZpZWxkOiBlLCB2YWxpZGF0b3I6IGksIGVycm9yVGV4dDogbn0pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB1aCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZS5lcnJvclRleHQgPSBuXHJcbiAgICAgICAgICAgICAgICB9LCBSTyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKG4sIHIsIHMpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBvLmNhbmNlbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLmV4ZWN1dGUodCwge3ZhbHVlOiBzLCBiYXRjaDogdGhpcy5fdW5kb1N0ZXBCYXRjaH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmVycm9yVGV4dCA9IG51bGxcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvKClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIElPIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJUYWJsZVByb3BlcnRpZXNcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtfTywgT09dXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IFZPID0gXCJ1bmRlcmxpbmVcIjtcclxuXHJcbiAgICAgICAgY2xhc3MgTk8gZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlVuZGVybGluZUVkaXRpbmdcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgdC5tb2RlbC5zY2hlbWEuZXh0ZW5kKFwiJHRleHRcIiwge2FsbG93QXR0cmlidXRlczogVk99KTtcclxuICAgICAgICAgICAgICAgIHQubW9kZWwuc2NoZW1hLnNldEF0dHJpYnV0ZVByb3BlcnRpZXMoVk8sIHtpc0Zvcm1hdHRpbmc6IHRydWUsIGNvcHlPbkVudGVyOiB0cnVlfSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbnZlcnNpb24uYXR0cmlidXRlVG9FbGVtZW50KHtcclxuICAgICAgICAgICAgICAgICAgICBtb2RlbDogVk8sXHJcbiAgICAgICAgICAgICAgICAgICAgdmlldzogXCJ1XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdXBjYXN0QWxzbzoge3N0eWxlczoge1widGV4dC1kZWNvcmF0aW9uXCI6IFwidW5kZXJsaW5lXCJ9fVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChWTywgbmV3IHlrKHQsIFZPKSk7XHJcbiAgICAgICAgICAgICAgICB0LmtleXN0cm9rZXMuc2V0KFwiQ1RSTCtVXCIsIFwidW5kZXJsaW5lXCIpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBNTyA9ICc8c3ZnIHZpZXdCb3g9XCIwIDAgMjAgMjBcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHBhdGggZD1cIk0zIDE4di0xLjVoMTRWMTh6bTIuMi04VjMuNmMwLS40LjQtLjYuOC0uNi4zIDAgLjcuMi43LjZ2Ni4yYzAgMiAxLjMgMi44IDMuMiAyLjggMS45IDAgMy40LS45IDMuNC0yLjlWMy42YzAtLjMuNC0uNS44LS41LjMgMCAuNy4yLjcuNVYxMGMwIDIuNy0yLjIgNC00LjkgNC0yLjYgMC00LjctMS4yLTQuNy00elwiLz48L3N2Zz4nO1xyXG4gICAgICAgIGNvbnN0IEJPID0gXCJ1bmRlcmxpbmVcIjtcclxuXHJcbiAgICAgICAgY2xhc3Mgek8gZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIGluaXQoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3I7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC50O1xyXG4gICAgICAgICAgICAgICAgdC51aS5jb21wb25lbnRGYWN0b3J5LmFkZChCTywgaSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuY29tbWFuZHMuZ2V0KEJPKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gbmV3IGhiKGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIG8uc2V0KHtsYWJlbDogZShcImpuXCIpLCBpY29uOiBNTywga2V5c3Ryb2tlOiBcIkNUUkwrVVwiLCB0b29sdGlwOiB0cnVlLCBpc1RvZ2dsZWFibGU6IHRydWV9KTtcclxuICAgICAgICAgICAgICAgICAgICBvLmJpbmQoXCJpc09uXCIsIFwiaXNFbmFibGVkXCIpLnRvKG4sIFwidmFsdWVcIiwgXCJpc0VuYWJsZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5UbyhvLCBcImV4ZWN1dGVcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmV4ZWN1dGUoQk8pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0LmVkaXRpbmcudmlldy5mb2N1cygpXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIExPIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHJlcXVpcmVzKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtOTywgek9dXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlVuZGVybGluZVwiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uKiBGTyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgaSBvZiBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaSAmJiB0LmdldEF0dHJpYnV0ZVByb3BlcnRpZXMoaVswXSkuY29weU9uRW50ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICB5aWVsZCBpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIERPIGV4dGVuZHMgancge1xyXG4gICAgICAgICAgICBleGVjdXRlKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB0LmNoYW5nZShpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBqTyh0aGlzLmVkaXRvci5tb2RlbCwgaSwgZS5zZWxlY3Rpb24sIHQuc2NoZW1hKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJhZnRlckV4ZWN1dGVcIiwge3dyaXRlcjogaX0pXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBqTyh0LCBlLCBpLCBuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBpLmlzQ29sbGFwc2VkO1xyXG4gICAgICAgICAgICBjb25zdCByID0gaS5nZXRGaXJzdFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHMgPSByLnN0YXJ0LnBhcmVudDtcclxuICAgICAgICAgICAgY29uc3QgYSA9IHIuZW5kLnBhcmVudDtcclxuICAgICAgICAgICAgaWYgKG4uaXNMaW1pdChzKSB8fCBuLmlzTGltaXQoYSkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghbyAmJiBzID09IGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB0LmRlbGV0ZUNvbnRlbnQoaSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChvKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gRk8oZS5tb2RlbC5zY2hlbWEsIGkuZ2V0QXR0cmlidXRlcygpKTtcclxuICAgICAgICAgICAgICAgIEhPKGUsIHIuc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgZS5zZXRTZWxlY3Rpb25BdHRyaWJ1dGUodClcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSAhKHIuc3RhcnQuaXNBdFN0YXJ0ICYmIHIuZW5kLmlzQXRFbmQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHMgPT0gYTtcclxuICAgICAgICAgICAgICAgIHQuZGVsZXRlQ29udGVudChpLCB7bGVhdmVVbm1lcmdlZDogbn0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBITyhlLCBpLmZvY3VzKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0U2VsZWN0aW9uKGEsIDApXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBITyh0LCBlKSB7XHJcbiAgICAgICAgICAgIHQuc3BsaXQoZSk7XHJcbiAgICAgICAgICAgIHQuc2V0U2VsZWN0aW9uKGUucGFyZW50Lm5leHRTaWJsaW5nLCAwKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgV08gZXh0ZW5kcyBHZCB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBlLm9uKFwia2V5ZG93blwiLCAodCwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzRW5hYmxlZCAmJiBpLmtleUNvZGUgPT0gTmwuZW50ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUub25jZShcImVudGVyXCIsIHQgPT4gbiA9IHQsIHtwcmlvcml0eTogXCJoaWdoZXN0XCJ9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZS5maXJlKFwiZW50ZXJcIiwgbmV3IEt1KGUsIGkuZG9tRXZlbnQsIHtpc1NvZnQ6IGkuc2hpZnRLZXl9KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuICYmIG4uc3RvcC5jYWxsZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQuc3RvcCgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBvYnNlcnZlKCkge1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBxTyBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRW50ZXJcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZWRpdGluZy52aWV3O1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBlLmFkZE9ic2VydmVyKFdPKTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwiZW50ZXJcIiwgbmV3IERPKHQpKTtcclxuICAgICAgICAgICAgICAgIHRoaXMubGlzdGVuVG8oaSwgXCJlbnRlclwiLCAoaSwgbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIG4ucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobi5pc1NvZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHQuZXhlY3V0ZShcImVudGVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGUuc2Nyb2xsVG9UaGVTZWxlY3Rpb24oKVxyXG4gICAgICAgICAgICAgICAgfSwge3ByaW9yaXR5OiBcImxvd1wifSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgVU8gZXh0ZW5kcyBqdyB7XHJcbiAgICAgICAgICAgIGV4ZWN1dGUoKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB0ID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdC5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIHQuY2hhbmdlKGkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIEdPKHQsIGksIGUuc2VsZWN0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpcmUoXCJhZnRlckV4ZWN1dGVcIiwge3dyaXRlcjogaX0pXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZWZyZXNoKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQuZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlzRW5hYmxlZCA9ICRPKHQuc2NoZW1hLCBlLnNlbGVjdGlvbilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gJE8odCwgZSkge1xyXG4gICAgICAgICAgICBpZiAoZS5yYW5nZUNvdW50ID4gMSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgaSA9IGUuYW5jaG9yO1xyXG4gICAgICAgICAgICBpZiAoIWkgfHwgIXQuY2hlY2tDaGlsZChpLCBcInNvZnRCcmVha1wiKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbiA9IGUuZ2V0Rmlyc3RSYW5nZSgpO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gbi5zdGFydC5wYXJlbnQ7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBuLmVuZC5wYXJlbnQ7XHJcbiAgICAgICAgICAgIGlmICgoSk8obywgdCkgfHwgSk8ociwgdCkpICYmIG8gIT09IHIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBHTyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBpLmlzQ29sbGFwc2VkO1xyXG4gICAgICAgICAgICBjb25zdCBvID0gaS5nZXRGaXJzdFJhbmdlKCk7XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBvLnN0YXJ0LnBhcmVudDtcclxuICAgICAgICAgICAgY29uc3QgcyA9IG8uZW5kLnBhcmVudDtcclxuICAgICAgICAgICAgY29uc3QgYSA9IHIgPT0gcztcclxuICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBGTyh0LnNjaGVtYSwgaS5nZXRBdHRyaWJ1dGVzKCkpO1xyXG4gICAgICAgICAgICAgICAgS08odCwgZSwgby5lbmQpO1xyXG4gICAgICAgICAgICAgICAgZS5yZW1vdmVTZWxlY3Rpb25BdHRyaWJ1dGUoaS5nZXRBdHRyaWJ1dGVLZXlzKCkpO1xyXG4gICAgICAgICAgICAgICAgZS5zZXRTZWxlY3Rpb25BdHRyaWJ1dGUobilcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSAhKG8uc3RhcnQuaXNBdFN0YXJ0ICYmIG8uZW5kLmlzQXRFbmQpO1xyXG4gICAgICAgICAgICAgICAgdC5kZWxldGVDb250ZW50KGksIHtsZWF2ZVVubWVyZ2VkOiBufSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoYSkge1xyXG4gICAgICAgICAgICAgICAgICAgIEtPKHQsIGUsIGkuZm9jdXMpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGUuc2V0U2VsZWN0aW9uKHMsIDApXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBLTyh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLmNyZWF0ZUVsZW1lbnQoXCJzb2Z0QnJlYWtcIik7XHJcbiAgICAgICAgICAgIHQuaW5zZXJ0Q29udGVudChuLCBpKTtcclxuICAgICAgICAgICAgZS5zZXRTZWxlY3Rpb24obiwgXCJhZnRlclwiKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gSk8odCwgZSkge1xyXG4gICAgICAgICAgICBpZiAodC5pcyhcInJvb3RFbGVtZW50XCIpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZS5pc0xpbWl0KHQpIHx8IEpPKHQucGFyZW50LCBlKVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgWU8gZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcGx1Z2luTmFtZSgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBcIlNoaWZ0RW50ZXJcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubW9kZWwuc2NoZW1hO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuY29udmVyc2lvbjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LmVkaXRpbmcudmlldztcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuLmRvY3VtZW50O1xyXG4gICAgICAgICAgICAgICAgZS5yZWdpc3RlcihcInNvZnRCcmVha1wiLCB7YWxsb3dXaGVyZTogXCIkdGV4dFwiLCBpc0lubGluZTogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgaS5mb3IoXCJ1cGNhc3RcIikuZWxlbWVudFRvRWxlbWVudCh7bW9kZWw6IFwic29mdEJyZWFrXCIsIHZpZXc6IFwiYnJcIn0pO1xyXG4gICAgICAgICAgICAgICAgaS5mb3IoXCJkb3duY2FzdFwiKS5lbGVtZW50VG9FbGVtZW50KHttb2RlbDogXCJzb2Z0QnJlYWtcIiwgdmlldzogKHQsIGUpID0+IGUuY3JlYXRlRW1wdHlFbGVtZW50KFwiYnJcIil9KTtcclxuICAgICAgICAgICAgICAgIG4uYWRkT2JzZXJ2ZXIoV08pO1xyXG4gICAgICAgICAgICAgICAgdC5jb21tYW5kcy5hZGQoXCJzaGlmdEVudGVyXCIsIG5ldyBVTyh0KSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKG8sIFwiZW50ZXJcIiwgKGUsIGkpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpLmlzU29mdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdC5leGVjdXRlKFwic2hpZnRFbnRlclwiKTtcclxuICAgICAgICAgICAgICAgICAgICBuLnNjcm9sbFRvVGhlU2VsZWN0aW9uKClcclxuICAgICAgICAgICAgICAgIH0sIHtwcmlvcml0eTogXCJsb3dcIn0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IFFPID0gbmV3IE1hcDtcclxuXHJcbiAgICAgICAgZnVuY3Rpb24gWE8odCwgZSwgaSkge1xyXG4gICAgICAgICAgICBsZXQgbiA9IFFPLmdldCh0KTtcclxuICAgICAgICAgICAgaWYgKCFuKSB7XHJcbiAgICAgICAgICAgICAgICBuID0gbmV3IE1hcDtcclxuICAgICAgICAgICAgICAgIFFPLnNldCh0LCBuKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG4uc2V0KGUsIGkpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBaTyh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSBRTy5nZXQodCk7XHJcbiAgICAgICAgICAgIGlmIChpICYmIGkuaGFzKGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaS5nZXQoZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdElcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHRJKHQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFt0XVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gZUkodCwgZSwgaSA9IHt9KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBaTyh0LmNvbnN0cnVjdG9yLCBlLmNvbnN0cnVjdG9yKTtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIHQgPSB0LmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbih0LCBlLCBpKVxyXG4gICAgICAgICAgICB9IGNhdGNoICh0KSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyB0XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGlJKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgdCA9IHQuc2xpY2UoKTtcclxuICAgICAgICAgICAgZSA9IGUuc2xpY2UoKTtcclxuICAgICAgICAgICAgY29uc3QgbiA9IG5ldyBuSShpLmRvY3VtZW50LCBpLnVzZVJlbGF0aW9ucywgaS5mb3JjZVdlYWtSZW1vdmUpO1xyXG4gICAgICAgICAgICBuLnNldE9yaWdpbmFsT3BlcmF0aW9ucyh0KTtcclxuICAgICAgICAgICAgbi5zZXRPcmlnaW5hbE9wZXJhdGlvbnMoZSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBuLm9yaWdpbmFsT3BlcmF0aW9ucztcclxuICAgICAgICAgICAgaWYgKHQubGVuZ3RoID09IDAgfHwgZS5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtvcGVyYXRpb25zQTogdCwgb3BlcmF0aW9uc0I6IGUsIG9yaWdpbmFsT3BlcmF0aW9uczogb31cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCByID0gbmV3IFdlYWtNYXA7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgZSBvZiB0KSB7XHJcbiAgICAgICAgICAgICAgICByLnNldChlLCAwKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHMgPSB7XHJcbiAgICAgICAgICAgICAgICBuZXh0QmFzZVZlcnNpb25BOiB0W3QubGVuZ3RoIC0gMV0uYmFzZVZlcnNpb24gKyAxLFxyXG4gICAgICAgICAgICAgICAgbmV4dEJhc2VWZXJzaW9uQjogZVtlLmxlbmd0aCAtIDFdLmJhc2VWZXJzaW9uICsgMSxcclxuICAgICAgICAgICAgICAgIG9yaWdpbmFsT3BlcmF0aW9uc0FDb3VudDogdC5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICBvcmlnaW5hbE9wZXJhdGlvbnNCQ291bnQ6IGUubGVuZ3RoXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGxldCBhID0gMDtcclxuICAgICAgICAgICAgd2hpbGUgKGEgPCB0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHRbYV07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gci5nZXQoaSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobyA9PSBlLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGErKztcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IGVbb107XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjID0gZUkoaSwgcywgbi5nZXRDb250ZXh0KGksIHMsIHRydWUpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGwgPSBlSShzLCBpLCBuLmdldENvbnRleHQocywgaSwgZmFsc2UpKTtcclxuICAgICAgICAgICAgICAgIG4udXBkYXRlUmVsYXRpb24oaSwgcyk7XHJcbiAgICAgICAgICAgICAgICBuLnNldE9yaWdpbmFsT3BlcmF0aW9ucyhjLCBpKTtcclxuICAgICAgICAgICAgICAgIG4uc2V0T3JpZ2luYWxPcGVyYXRpb25zKGwsIHMpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCB0IG9mIGMpIHtcclxuICAgICAgICAgICAgICAgICAgICByLnNldCh0LCBvICsgbC5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0LnNwbGljZShhLCAxLCAuLi5jKTtcclxuICAgICAgICAgICAgICAgIGUuc3BsaWNlKG8sIDEsIC4uLmwpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGkucGFkV2l0aE5vT3BzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5sZW5ndGggLSBzLm9yaWdpbmFsT3BlcmF0aW9uc0FDb3VudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLmxlbmd0aCAtIHMub3JpZ2luYWxPcGVyYXRpb25zQkNvdW50O1xyXG4gICAgICAgICAgICAgICAgckkodCwgbiAtIGkpO1xyXG4gICAgICAgICAgICAgICAgckkoZSwgaSAtIG4pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb0kodCwgcy5uZXh0QmFzZVZlcnNpb25CKTtcclxuICAgICAgICAgICAgb0koZSwgcy5uZXh0QmFzZVZlcnNpb25BKTtcclxuICAgICAgICAgICAgcmV0dXJuIHtvcGVyYXRpb25zQTogdCwgb3BlcmF0aW9uc0I6IGUsIG9yaWdpbmFsT3BlcmF0aW9uczogb31cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIG5JIHtcclxuICAgICAgICAgICAgY29uc3RydWN0b3IodCwgZSwgaSA9IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbmFsT3BlcmF0aW9ucyA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9oaXN0b3J5ID0gdC5oaXN0b3J5O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXNlUmVsYXRpb25zID0gZTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2ZvcmNlV2Vha1JlbW92ZSA9ICEhaTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbGF0aW9ucyA9IG5ldyBNYXBcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc2V0T3JpZ2luYWxPcGVyYXRpb25zKHQsIGUgPSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZSA/IHRoaXMub3JpZ2luYWxPcGVyYXRpb25zLmdldChlKSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3JpZ2luYWxPcGVyYXRpb25zLnNldChlLCBpIHx8IGUpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHVwZGF0ZVJlbGF0aW9uKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIHN3aXRjaCAodC5jb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgWmc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmNvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG9tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQudGFyZ2V0UG9zaXRpb24uaXNFcXVhbChlLnNvdXJjZVBvc2l0aW9uKSB8fCBlLm1vdmVkUmFuZ2UuY29udGFpbnNQb3NpdGlvbih0LnRhcmdldFBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRSZWxhdGlvbih0LCBlLCBcImluc2VydEF0U291cmNlXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh0LnRhcmdldFBvc2l0aW9uLmlzRXF1YWwoZS5kZWxldGlvblBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRSZWxhdGlvbih0LCBlLCBcImluc2VydEJldHdlZW5cIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHQudGFyZ2V0UG9zaXRpb24uaXNBZnRlcihlLnNvdXJjZVBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRSZWxhdGlvbih0LCBlLCBcIm1vdmVUYXJnZXRBZnRlclwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBaZzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnRhcmdldFBvc2l0aW9uLmlzRXF1YWwoZS5zb3VyY2VQb3NpdGlvbikgfHwgdC50YXJnZXRQb3NpdGlvbi5pc0JlZm9yZShlLnNvdXJjZVBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRSZWxhdGlvbih0LCBlLCBcImluc2VydEJlZm9yZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFJlbGF0aW9uKHQsIGUsIFwiaW5zZXJ0QWZ0ZXJcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIHJtOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5jb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBvbToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnNwbGl0UG9zaXRpb24uaXNCZWZvcmUoZS5zb3VyY2VQb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UmVsYXRpb24odCwgZSwgXCJzcGxpdEJlZm9yZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBaZzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnNwbGl0UG9zaXRpb24uaXNFcXVhbChlLnNvdXJjZVBvc2l0aW9uKSB8fCB0LnNwbGl0UG9zaXRpb24uaXNCZWZvcmUoZS5zb3VyY2VQb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UmVsYXRpb24odCwgZSwgXCJzcGxpdEJlZm9yZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2Ugb206IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLmNvbnN0cnVjdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIG9tOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0LnRhcmdldFBvc2l0aW9uLmlzRXF1YWwoZS5zb3VyY2VQb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UmVsYXRpb24odCwgZSwgXCJtZXJnZVRhcmdldE5vdE1vdmVkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnNvdXJjZVBvc2l0aW9uLmlzRXF1YWwoZS50YXJnZXRQb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UmVsYXRpb24odCwgZSwgXCJtZXJnZVNvdXJjZU5vdE1vdmVkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0LnNvdXJjZVBvc2l0aW9uLmlzRXF1YWwoZS5zb3VyY2VQb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc2V0UmVsYXRpb24odCwgZSwgXCJtZXJnZVNhbWVFbGVtZW50XCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHJtOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHQuc291cmNlUG9zaXRpb24uaXNFcXVhbChlLnNwbGl0UG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFJlbGF0aW9uKHQsIGUsIFwic3BsaXRBdFNvdXJjZVwiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBjYXNlIGVtOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0Lm5ld1JhbmdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS5jb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBaZzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSAkaC5fY3JlYXRlRnJvbVBvc2l0aW9uQW5kU2hpZnQoZS5zb3VyY2VQb3NpdGlvbiwgZS5ob3dNYW55KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBvID0gbi5jb250YWluc1Bvc2l0aW9uKGkuc3RhcnQpIHx8IG4uc3RhcnQuaXNFcXVhbChpLnN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gbi5jb250YWluc1Bvc2l0aW9uKGkuZW5kKSB8fCBuLmVuZC5pc0VxdWFsKGkuZW5kKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKG8gfHwgcikgJiYgIW4uY29udGFpbnNSYW5nZShpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9zZXRSZWxhdGlvbih0LCBlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaWRlOiBvID8gXCJsZWZ0XCIgOiBcInJpZ2h0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiBvID8gaS5zdGFydC5wYXRoLnNsaWNlKCkgOiBpLmVuZC5wYXRoLnNsaWNlKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2Ugb206IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5zdGFydC5pc0VxdWFsKGUudGFyZ2V0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBpLnN0YXJ0LmlzRXF1YWwoZS5kZWxldGlvblBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gaS5lbmQuaXNFcXVhbChlLmRlbGV0aW9uUG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBpLmVuZC5pc0VxdWFsKGUuc291cmNlUG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuIHx8IG8gfHwgciB8fCBzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3NldFJlbGF0aW9uKHQsIGUsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdhc0luTGVmdEVsZW1lbnQ6IG4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXNTdGFydEJlZm9yZU1lcmdlZEVsZW1lbnQ6IG8sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YXNFbmRCZWZvcmVNZXJnZWRFbGVtZW50OiByLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2FzSW5SaWdodEVsZW1lbnQ6IHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZ2V0Q29udGV4dCh0LCBlLCBpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGFJc1N0cm9uZzogaSxcclxuICAgICAgICAgICAgICAgICAgICBhV2FzVW5kb25lOiB0aGlzLl93YXNVbmRvbmUodCksXHJcbiAgICAgICAgICAgICAgICAgICAgYldhc1VuZG9uZTogdGhpcy5fd2FzVW5kb25lKGUpLFxyXG4gICAgICAgICAgICAgICAgICAgIGFiUmVsYXRpb246IHRoaXMuX3VzZVJlbGF0aW9ucyA/IHRoaXMuX2dldFJlbGF0aW9uKHQsIGUpIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBiYVJlbGF0aW9uOiB0aGlzLl91c2VSZWxhdGlvbnMgPyB0aGlzLl9nZXRSZWxhdGlvbihlLCB0KSA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yY2VXZWFrUmVtb3ZlOiB0aGlzLl9mb3JjZVdlYWtSZW1vdmVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3dhc1VuZG9uZSh0KSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBlID0gdGhpcy5vcmlnaW5hbE9wZXJhdGlvbnMuZ2V0KHQpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGUud2FzVW5kb25lIHx8IHRoaXMuX2hpc3RvcnkuaXNVbmRvbmVPcGVyYXRpb24oZSlcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX2dldFJlbGF0aW9uKHQsIGUpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLm9yaWdpbmFsT3BlcmF0aW9ucy5nZXQoZSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5faGlzdG9yeS5nZXRVbmRvbmVPcGVyYXRpb24oaSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIW4pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMub3JpZ2luYWxPcGVyYXRpb25zLmdldCh0KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLl9yZWxhdGlvbnMuZ2V0KG8pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5nZXQobikgfHwgbnVsbFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3NldFJlbGF0aW9uKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0aGlzLm9yaWdpbmFsT3BlcmF0aW9ucy5nZXQodCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gdGhpcy5vcmlnaW5hbE9wZXJhdGlvbnMuZ2V0KGUpO1xyXG4gICAgICAgICAgICAgICAgbGV0IHIgPSB0aGlzLl9yZWxhdGlvbnMuZ2V0KG4pO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgciA9IG5ldyBNYXA7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVsYXRpb25zLnNldChuLCByKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgci5zZXQobywgaSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gb0kodCwgZSkge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGkgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgaS5iYXNlVmVyc2lvbiA9IGUrK1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiBySSh0LCBlKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0LnB1c2gobmV3IFNtKDApKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBYTyhRZywgUWcsICh0LCBlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0LmtleSA9PT0gZS5rZXkpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LnJhbmdlLmdldERpZmZlcmVuY2UoZS5yYW5nZSkubWFwKGUgPT4gbmV3IFFnKGUsIHQua2V5LCB0Lm9sZFZhbHVlLCB0Lm5ld1ZhbHVlLCAwKSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gdC5yYW5nZS5nZXRJbnRlcnNlY3Rpb24oZS5yYW5nZSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpLmFJc1N0cm9uZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLnB1c2gobmV3IFFnKG8sIGUua2V5LCBlLm5ld1ZhbHVlLCB0Lm5ld1ZhbHVlLCAwKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAobi5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbmV3IFNtKDApXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFhPKFFnLCB0bSwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgaWYgKHQucmFuZ2Uuc3RhcnQuaGFzU2FtZVBhcmVudEFzKGUucG9zaXRpb24pICYmIHQucmFuZ2UuY29udGFpbnNQb3NpdGlvbihlLnBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQucmFuZ2UuX2dldFRyYW5zZm9ybWVkQnlJbnNlcnRpb24oZS5wb3NpdGlvbiwgZS5ob3dNYW55LCAhZS5zaG91bGRSZWNlaXZlQXR0cmlidXRlcyk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5tYXAoZSA9PiBuZXcgUWcoZSwgdC5rZXksIHQub2xkVmFsdWUsIHQubmV3VmFsdWUsIHQuYmFzZVZlcnNpb24pKTtcclxuICAgICAgICAgICAgICAgIGlmIChlLnNob3VsZFJlY2VpdmVBdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHNJKGUsIHQua2V5LCB0Lm9sZFZhbHVlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuLnVuc2hpZnQoaSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQucmFuZ2UgPSB0LnJhbmdlLl9nZXRUcmFuc2Zvcm1lZEJ5SW5zZXJ0aW9uKGUucG9zaXRpb24sIGUuaG93TWFueSwgZmFsc2UpWzBdO1xyXG4gICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIHNJKHQsIGUsIGkpIHtcclxuICAgICAgICAgICAgY29uc3QgbiA9IHQubm9kZXM7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSBuLmdldE5vZGUoMCkuZ2V0QXR0cmlidXRlKGUpO1xyXG4gICAgICAgICAgICBpZiAobyA9PSBpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IHIgPSBuZXcgJGgodC5wb3NpdGlvbiwgdC5wb3NpdGlvbi5nZXRTaGlmdGVkQnkodC5ob3dNYW55KSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUWcociwgZSwgbywgaSwgMClcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIFhPKFFnLCBvbSwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IFtdO1xyXG4gICAgICAgICAgICBpZiAodC5yYW5nZS5zdGFydC5oYXNTYW1lUGFyZW50QXMoZS5kZWxldGlvblBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHQucmFuZ2UuY29udGFpbnNQb3NpdGlvbihlLmRlbGV0aW9uUG9zaXRpb24pIHx8IHQucmFuZ2Uuc3RhcnQuaXNFcXVhbChlLmRlbGV0aW9uUG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaS5wdXNoKCRoLl9jcmVhdGVGcm9tUG9zaXRpb25BbmRTaGlmdChlLmdyYXZleWFyZFBvc2l0aW9uLCAxKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBuID0gdC5yYW5nZS5fZ2V0VHJhbnNmb3JtZWRCeU1lcmdlT3BlcmF0aW9uKGUpO1xyXG4gICAgICAgICAgICBpZiAoIW4uaXNDb2xsYXBzZWQpIHtcclxuICAgICAgICAgICAgICAgIGkucHVzaChuKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpLm1hcChlID0+IG5ldyBRZyhlLCB0LmtleSwgdC5vbGRWYWx1ZSwgdC5uZXdWYWx1ZSwgdC5iYXNlVmVyc2lvbikpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgWE8oUWcsIFpnLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gYUkodC5yYW5nZSwgZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBpLm1hcChlID0+IG5ldyBRZyhlLCB0LmtleSwgdC5vbGRWYWx1ZSwgdC5uZXdWYWx1ZSwgdC5iYXNlVmVyc2lvbikpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIGFJKHQsIGUpIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9ICRoLl9jcmVhdGVGcm9tUG9zaXRpb25BbmRTaGlmdChlLnNvdXJjZVBvc2l0aW9uLCBlLmhvd01hbnkpO1xyXG4gICAgICAgICAgICBsZXQgbiA9IG51bGw7XHJcbiAgICAgICAgICAgIGxldCBvID0gW107XHJcbiAgICAgICAgICAgIGlmIChpLmNvbnRhaW5zUmFuZ2UodCwgdHJ1ZSkpIHtcclxuICAgICAgICAgICAgICAgIG4gPSB0XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodC5zdGFydC5oYXNTYW1lUGFyZW50QXMoaS5zdGFydCkpIHtcclxuICAgICAgICAgICAgICAgIG8gPSB0LmdldERpZmZlcmVuY2UoaSk7XHJcbiAgICAgICAgICAgICAgICBuID0gdC5nZXRJbnRlcnNlY3Rpb24oaSlcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIG8gPSBbdF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCByID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IHQgb2Ygbykge1xyXG4gICAgICAgICAgICAgICAgdCA9IHQuX2dldFRyYW5zZm9ybWVkQnlEZWxldGlvbihlLnNvdXJjZVBvc2l0aW9uLCBlLmhvd01hbnkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuZ2V0TW92ZWRSYW5nZVN0YXJ0KCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5zdGFydC5oYXNTYW1lUGFyZW50QXMoaSk7XHJcbiAgICAgICAgICAgICAgICB0ID0gdC5fZ2V0VHJhbnNmb3JtZWRCeUluc2VydGlvbihpLCBlLmhvd01hbnksIG4pO1xyXG4gICAgICAgICAgICAgICAgci5wdXNoKC4uLnQpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgIHIucHVzaChuLl9nZXRUcmFuc2Zvcm1lZEJ5TW92ZShlLnNvdXJjZVBvc2l0aW9uLCBlLnRhcmdldFBvc2l0aW9uLCBlLmhvd01hbnksIGZhbHNlKVswXSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gclxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgWE8oUWcsIHJtLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodC5yYW5nZS5lbmQuaXNFcXVhbChlLmluc2VydGlvblBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFlLmdyYXZleWFyZFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5yYW5nZS5lbmQub2Zmc2V0KytcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5yYW5nZS5zdGFydC5oYXNTYW1lUGFyZW50QXMoZS5zcGxpdFBvc2l0aW9uKSAmJiB0LnJhbmdlLmNvbnRhaW5zUG9zaXRpb24oZS5zcGxpdFBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgIGkucmFuZ2UgPSBuZXcgJGgoZS5tb3ZlVGFyZ2V0UG9zaXRpb24uY2xvbmUoKSwgdC5yYW5nZS5lbmQuX2dldENvbWJpbmVkKGUuc3BsaXRQb3NpdGlvbiwgZS5tb3ZlVGFyZ2V0UG9zaXRpb24pKTtcclxuICAgICAgICAgICAgICAgIHQucmFuZ2UuZW5kID0gZS5zcGxpdFBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICB0LnJhbmdlLmVuZC5zdGlja2luZXNzID0gXCJ0b1ByZXZpb3VzXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3QsIGldXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdC5yYW5nZSA9IHQucmFuZ2UuX2dldFRyYW5zZm9ybWVkQnlTcGxpdE9wZXJhdGlvbihlKTtcclxuICAgICAgICAgICAgcmV0dXJuIFt0XVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFhPKHRtLCBRZywgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IFt0XTtcclxuICAgICAgICAgICAgaWYgKHQuc2hvdWxkUmVjZWl2ZUF0dHJpYnV0ZXMgJiYgdC5wb3NpdGlvbi5oYXNTYW1lUGFyZW50QXMoZS5yYW5nZS5zdGFydCkgJiYgZS5yYW5nZS5jb250YWluc1Bvc2l0aW9uKHQucG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gc0kodCwgZS5rZXksIGUubmV3VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG4pIHtcclxuICAgICAgICAgICAgICAgICAgICBpLnB1c2gobilcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFhPKHRtLCB0bSwgKHQsIGUsIGkpID0+IHtcclxuICAgICAgICAgICAgaWYgKHQucG9zaXRpb24uaXNFcXVhbChlLnBvc2l0aW9uKSAmJiBpLmFJc1N0cm9uZykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0XVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQucG9zaXRpb24gPSB0LnBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5SW5zZXJ0T3BlcmF0aW9uKGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgWE8odG0sIFpnLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICB0LnBvc2l0aW9uID0gdC5wb3NpdGlvbi5fZ2V0VHJhbnNmb3JtZWRCeU1vdmVPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICB9KTtcclxuICAgICAgICBYTyh0bSwgcm0sICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgIHQucG9zaXRpb24gPSB0LnBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5U3BsaXRPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICB9KTtcclxuICAgICAgICBYTyh0bSwgb20sICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgIHQucG9zaXRpb24gPSB0LnBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5TWVyZ2VPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICB9KTtcclxuICAgICAgICBYTyhlbSwgdG0sICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0Lm9sZFJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICB0Lm9sZFJhbmdlID0gdC5vbGRSYW5nZS5fZ2V0VHJhbnNmb3JtZWRCeUluc2VydE9wZXJhdGlvbihlKVswXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0Lm5ld1JhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICB0Lm5ld1JhbmdlID0gdC5uZXdSYW5nZS5fZ2V0VHJhbnNmb3JtZWRCeUluc2VydE9wZXJhdGlvbihlKVswXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICB9KTtcclxuICAgICAgICBYTyhlbSwgZW0sICh0LCBlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0Lm5hbWUgPT0gZS5uYW1lKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaS5hSXNTdHJvbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0Lm9sZFJhbmdlID0gZS5uZXdSYW5nZSA/IGUubmV3UmFuZ2UuY2xvbmUoKSA6IG51bGxcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtuZXcgU20oMCldXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFt0XVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFhPKGVtLCBvbSwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgaWYgKHQub2xkUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIHQub2xkUmFuZ2UgPSB0Lm9sZFJhbmdlLl9nZXRUcmFuc2Zvcm1lZEJ5TWVyZ2VPcGVyYXRpb24oZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5uZXdSYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgdC5uZXdSYW5nZSA9IHQubmV3UmFuZ2UuX2dldFRyYW5zZm9ybWVkQnlNZXJnZU9wZXJhdGlvbihlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICB9KTtcclxuICAgICAgICBYTyhlbSwgWmcsICh0LCBlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0Lm9sZFJhbmdlKSB7XHJcbiAgICAgICAgICAgICAgICB0Lm9sZFJhbmdlID0gJGguX2NyZWF0ZUZyb21SYW5nZXModC5vbGRSYW5nZS5fZ2V0VHJhbnNmb3JtZWRCeU1vdmVPcGVyYXRpb24oZSkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQubmV3UmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpLmFiUmVsYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gJGguX2NyZWF0ZUZyb21SYW5nZXModC5uZXdSYW5nZS5fZ2V0VHJhbnNmb3JtZWRCeU1vdmVPcGVyYXRpb24oZSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpLmFiUmVsYXRpb24uc2lkZSA9PSBcImxlZnRcIiAmJiBlLnRhcmdldFBvc2l0aW9uLmlzRXF1YWwodC5uZXdSYW5nZS5zdGFydCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5uZXdSYW5nZS5zdGFydC5wYXRoID0gaS5hYlJlbGF0aW9uLnBhdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQubmV3UmFuZ2UuZW5kID0gbi5lbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGkuYWJSZWxhdGlvbi5zaWRlID09IFwicmlnaHRcIiAmJiBlLnRhcmdldFBvc2l0aW9uLmlzRXF1YWwodC5uZXdSYW5nZS5lbmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQubmV3UmFuZ2Uuc3RhcnQgPSBuLnN0YXJ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0Lm5ld1JhbmdlLmVuZC5wYXRoID0gaS5hYlJlbGF0aW9uLnBhdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0Lm5ld1JhbmdlID0gJGguX2NyZWF0ZUZyb21SYW5nZXModC5uZXdSYW5nZS5fZ2V0VHJhbnNmb3JtZWRCeU1vdmVPcGVyYXRpb24oZSkpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFt0XVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFhPKGVtLCBybSwgKHQsIGUsIGkpID0+IHtcclxuICAgICAgICAgICAgaWYgKHQub2xkUmFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIHQub2xkUmFuZ2UgPSB0Lm9sZFJhbmdlLl9nZXRUcmFuc2Zvcm1lZEJ5U3BsaXRPcGVyYXRpb24oZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5uZXdSYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkuYWJSZWxhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0Lm5ld1JhbmdlLl9nZXRUcmFuc2Zvcm1lZEJ5U3BsaXRPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHQubmV3UmFuZ2Uuc3RhcnQuaXNFcXVhbChlLnNwbGl0UG9zaXRpb24pICYmIGkuYWJSZWxhdGlvbi53YXNTdGFydEJlZm9yZU1lcmdlZEVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5uZXdSYW5nZS5zdGFydCA9IFVoLl9jcmVhdGVBdChlLmluc2VydGlvblBvc2l0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5uZXdSYW5nZS5zdGFydC5pc0VxdWFsKGUuc3BsaXRQb3NpdGlvbikgJiYgIWkuYWJSZWxhdGlvbi53YXNJbkxlZnRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQubmV3UmFuZ2Uuc3RhcnQgPSBVaC5fY3JlYXRlQXQoZS5tb3ZlVGFyZ2V0UG9zaXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0Lm5ld1JhbmdlLmVuZC5pc0VxdWFsKGUuc3BsaXRQb3NpdGlvbikgJiYgaS5hYlJlbGF0aW9uLndhc0luUmlnaHRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQubmV3UmFuZ2UuZW5kID0gVWguX2NyZWF0ZUF0KGUubW92ZVRhcmdldFBvc2l0aW9uKVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodC5uZXdSYW5nZS5lbmQuaXNFcXVhbChlLnNwbGl0UG9zaXRpb24pICYmIGkuYWJSZWxhdGlvbi53YXNFbmRCZWZvcmVNZXJnZWRFbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHQubmV3UmFuZ2UuZW5kID0gVWguX2NyZWF0ZUF0KGUuaW5zZXJ0aW9uUG9zaXRpb24pXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5uZXdSYW5nZS5lbmQgPSBuLmVuZFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0Lm5ld1JhbmdlID0gdC5uZXdSYW5nZS5fZ2V0VHJhbnNmb3JtZWRCeVNwbGl0T3BlcmF0aW9uKGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFt0XVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFhPKG9tLCB0bSwgKHQsIGUpID0+IHtcclxuICAgICAgICAgICAgaWYgKHQuc291cmNlUG9zaXRpb24uaGFzU2FtZVBhcmVudEFzKGUucG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICB0Lmhvd01hbnkgKz0gZS5ob3dNYW55XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdC5zb3VyY2VQb3NpdGlvbiA9IHQuc291cmNlUG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlJbnNlcnRPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgIHQudGFyZ2V0UG9zaXRpb24gPSB0LnRhcmdldFBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5SW5zZXJ0T3BlcmF0aW9uKGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgWE8ob20sIG9tLCAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodC5zb3VyY2VQb3NpdGlvbi5pc0VxdWFsKGUuc291cmNlUG9zaXRpb24pICYmIHQudGFyZ2V0UG9zaXRpb24uaXNFcXVhbChlLnRhcmdldFBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFpLmJXYXNVbmRvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW25ldyBTbSgwKV1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuZ3JhdmV5YXJkUG9zaXRpb24ucGF0aC5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGkucHVzaCgwKTtcclxuICAgICAgICAgICAgICAgICAgICB0LnNvdXJjZVBvc2l0aW9uID0gbmV3IFVoKGUuZ3JhdmV5YXJkUG9zaXRpb24ucm9vdCwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5ob3dNYW55ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQuc291cmNlUG9zaXRpb24uaXNFcXVhbChlLnNvdXJjZVBvc2l0aW9uKSAmJiAhdC50YXJnZXRQb3NpdGlvbi5pc0VxdWFsKGUudGFyZ2V0UG9zaXRpb24pICYmICFpLmJXYXNVbmRvbmUgJiYgaS5hYlJlbGF0aW9uICE9IFwic3BsaXRBdFNvdXJjZVwiKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdC50YXJnZXRQb3NpdGlvbi5yb290LnJvb3ROYW1lID09IFwiJGdyYXZleWFyZFwiO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IGUudGFyZ2V0UG9zaXRpb24ucm9vdC5yb290TmFtZSA9PSBcIiRncmF2ZXlhcmRcIjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuICYmICFvO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG8gJiYgIW47XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gcyB8fCAhciAmJiBpLmFJc1N0cm9uZztcclxuICAgICAgICAgICAgICAgIGlmIChhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IGUudGFyZ2V0UG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlNZXJnZU9wZXJhdGlvbihlKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdC50YXJnZXRQb3NpdGlvbi5fZ2V0VHJhbnNmb3JtZWRCeU1lcmdlT3BlcmF0aW9uKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbmV3IFpnKGksIHQuaG93TWFueSwgbiwgMCldXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbmV3IFNtKDApXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0LnNvdXJjZVBvc2l0aW9uLmhhc1NhbWVQYXJlbnRBcyhlLnRhcmdldFBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgdC5ob3dNYW55ICs9IGUuaG93TWFueVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQuc291cmNlUG9zaXRpb24gPSB0LnNvdXJjZVBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5TWVyZ2VPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgIHQudGFyZ2V0UG9zaXRpb24gPSB0LnRhcmdldFBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5TWVyZ2VPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgIGlmICghdC5ncmF2ZXlhcmRQb3NpdGlvbi5pc0VxdWFsKGUuZ3JhdmV5YXJkUG9zaXRpb24pIHx8ICFpLmFJc1N0cm9uZykge1xyXG4gICAgICAgICAgICAgICAgdC5ncmF2ZXlhcmRQb3NpdGlvbiA9IHQuZ3JhdmV5YXJkUG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlNZXJnZU9wZXJhdGlvbihlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICB9KTtcclxuICAgICAgICBYTyhvbSwgWmcsICh0LCBlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSAkaC5fY3JlYXRlRnJvbVBvc2l0aW9uQW5kU2hpZnQoZS5zb3VyY2VQb3NpdGlvbiwgZS5ob3dNYW55KTtcclxuICAgICAgICAgICAgaWYgKGUudHlwZSA9PSBcInJlbW92ZVwiICYmICFpLmJXYXNVbmRvbmUgJiYgIWkuZm9yY2VXZWFrUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5kZWxldGlvblBvc2l0aW9uLmhhc1NhbWVQYXJlbnRBcyhlLnNvdXJjZVBvc2l0aW9uKSAmJiBuLmNvbnRhaW5zUG9zaXRpb24odC5zb3VyY2VQb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW25ldyBTbSgwKV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5zb3VyY2VQb3NpdGlvbi5oYXNTYW1lUGFyZW50QXMoZS50YXJnZXRQb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIHQuaG93TWFueSArPSBlLmhvd01hbnlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5zb3VyY2VQb3NpdGlvbi5oYXNTYW1lUGFyZW50QXMoZS5zb3VyY2VQb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIHQuaG93TWFueSAtPSBlLmhvd01hbnlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0LnNvdXJjZVBvc2l0aW9uID0gdC5zb3VyY2VQb3NpdGlvbi5fZ2V0VHJhbnNmb3JtZWRCeU1vdmVPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgIHQudGFyZ2V0UG9zaXRpb24gPSB0LnRhcmdldFBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5TW92ZU9wZXJhdGlvbihlKTtcclxuICAgICAgICAgICAgaWYgKCF0LmdyYXZleWFyZFBvc2l0aW9uLmlzRXF1YWwoZS50YXJnZXRQb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIHQuZ3JhdmV5YXJkUG9zaXRpb24gPSB0LmdyYXZleWFyZFBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5TW92ZU9wZXJhdGlvbihlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICB9KTtcclxuICAgICAgICBYTyhvbSwgcm0sICh0LCBlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGlmIChlLmdyYXZleWFyZFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0LmdyYXZleWFyZFBvc2l0aW9uID0gdC5ncmF2ZXlhcmRQb3NpdGlvbi5fZ2V0VHJhbnNmb3JtZWRCeURlbGV0aW9uKGUuZ3JhdmV5YXJkUG9zaXRpb24sIDEpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuZGVsZXRpb25Qb3NpdGlvbi5pc0VxdWFsKGUuZ3JhdmV5YXJkUG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5ob3dNYW55ID0gZS5ob3dNYW55XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQudGFyZ2V0UG9zaXRpb24uaXNFcXVhbChlLnNwbGl0UG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gZS5ob3dNYW55ICE9IDA7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gZS5ncmF2ZXlhcmRQb3NpdGlvbiAmJiB0LmRlbGV0aW9uUG9zaXRpb24uaXNFcXVhbChlLmdyYXZleWFyZFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIGlmIChuIHx8IG8gfHwgaS5hYlJlbGF0aW9uID09IFwibWVyZ2VUYXJnZXROb3RNb3ZlZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5zb3VyY2VQb3NpdGlvbiA9IHQuc291cmNlUG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlTcGxpdE9wZXJhdGlvbihlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQuc291cmNlUG9zaXRpb24uaXNFcXVhbChlLnNwbGl0UG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaS5hYlJlbGF0aW9uID09IFwibWVyZ2VTb3VyY2VOb3RNb3ZlZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5ob3dNYW55ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB0LnRhcmdldFBvc2l0aW9uID0gdC50YXJnZXRQb3NpdGlvbi5fZ2V0VHJhbnNmb3JtZWRCeVNwbGl0T3BlcmF0aW9uKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpLmFiUmVsYXRpb24gPT0gXCJtZXJnZVNhbWVFbGVtZW50XCIgfHwgdC5zb3VyY2VQb3NpdGlvbi5vZmZzZXQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5zb3VyY2VQb3NpdGlvbiA9IGUubW92ZVRhcmdldFBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdC50YXJnZXRQb3NpdGlvbiA9IHQudGFyZ2V0UG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlTcGxpdE9wZXJhdGlvbihlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQuc291cmNlUG9zaXRpb24uaGFzU2FtZVBhcmVudEFzKGUuc3BsaXRQb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIHQuaG93TWFueSA9IGUuc3BsaXRQb3NpdGlvbi5vZmZzZXRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0LnNvdXJjZVBvc2l0aW9uID0gdC5zb3VyY2VQb3NpdGlvbi5fZ2V0VHJhbnNmb3JtZWRCeVNwbGl0T3BlcmF0aW9uKGUpO1xyXG4gICAgICAgICAgICB0LnRhcmdldFBvc2l0aW9uID0gdC50YXJnZXRQb3NpdGlvbi5fZ2V0VHJhbnNmb3JtZWRCeVNwbGl0T3BlcmF0aW9uKGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgWE8oWmcsIHRtLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gJGguX2NyZWF0ZUZyb21Qb3NpdGlvbkFuZFNoaWZ0KHQuc291cmNlUG9zaXRpb24sIHQuaG93TWFueSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBpLl9nZXRUcmFuc2Zvcm1lZEJ5SW5zZXJ0T3BlcmF0aW9uKGUsIGZhbHNlKVswXTtcclxuICAgICAgICAgICAgdC5zb3VyY2VQb3NpdGlvbiA9IG4uc3RhcnQ7XHJcbiAgICAgICAgICAgIHQuaG93TWFueSA9IG4uZW5kLm9mZnNldCAtIG4uc3RhcnQub2Zmc2V0O1xyXG4gICAgICAgICAgICBpZiAoIXQudGFyZ2V0UG9zaXRpb24uaXNFcXVhbChlLnBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgdC50YXJnZXRQb3NpdGlvbiA9IHQudGFyZ2V0UG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlJbnNlcnRPcGVyYXRpb24oZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgWE8oWmcsIFpnLCAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCBuID0gJGguX2NyZWF0ZUZyb21Qb3NpdGlvbkFuZFNoaWZ0KHQuc291cmNlUG9zaXRpb24sIHQuaG93TWFueSk7XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSAkaC5fY3JlYXRlRnJvbVBvc2l0aW9uQW5kU2hpZnQoZS5zb3VyY2VQb3NpdGlvbiwgZS5ob3dNYW55KTtcclxuICAgICAgICAgICAgbGV0IHIgPSBpLmFJc1N0cm9uZztcclxuICAgICAgICAgICAgbGV0IHMgPSAhaS5hSXNTdHJvbmc7XHJcbiAgICAgICAgICAgIGlmIChpLmFiUmVsYXRpb24gPT0gXCJpbnNlcnRCZWZvcmVcIiB8fCBpLmJhUmVsYXRpb24gPT0gXCJpbnNlcnRBZnRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICBzID0gdHJ1ZVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGkuYWJSZWxhdGlvbiA9PSBcImluc2VydEFmdGVyXCIgfHwgaS5iYVJlbGF0aW9uID09IFwiaW5zZXJ0QmVmb3JlXCIpIHtcclxuICAgICAgICAgICAgICAgIHMgPSBmYWxzZVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxldCBhO1xyXG4gICAgICAgICAgICBpZiAodC50YXJnZXRQb3NpdGlvbi5pc0VxdWFsKGUudGFyZ2V0UG9zaXRpb24pICYmIHMpIHtcclxuICAgICAgICAgICAgICAgIGEgPSB0LnRhcmdldFBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5RGVsZXRpb24oZS5zb3VyY2VQb3NpdGlvbiwgZS5ob3dNYW55KVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYSA9IHQudGFyZ2V0UG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlNb3ZlKGUuc291cmNlUG9zaXRpb24sIGUudGFyZ2V0UG9zaXRpb24sIGUuaG93TWFueSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY0kodCwgZSkgJiYgY0koZSwgdCkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbZS5nZXRSZXZlcnNlZCgpXVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGMgPSBuLmNvbnRhaW5zUG9zaXRpb24oZS50YXJnZXRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGlmIChjICYmIG4uY29udGFpbnNSYW5nZShvLCB0cnVlKSkge1xyXG4gICAgICAgICAgICAgICAgbi5zdGFydCA9IG4uc3RhcnQuX2dldFRyYW5zZm9ybWVkQnlNb3ZlKGUuc291cmNlUG9zaXRpb24sIGUudGFyZ2V0UG9zaXRpb24sIGUuaG93TWFueSk7XHJcbiAgICAgICAgICAgICAgICBuLmVuZCA9IG4uZW5kLl9nZXRUcmFuc2Zvcm1lZEJ5TW92ZShlLnNvdXJjZVBvc2l0aW9uLCBlLnRhcmdldFBvc2l0aW9uLCBlLmhvd01hbnkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxJKFtuXSwgYSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBsID0gby5jb250YWluc1Bvc2l0aW9uKHQudGFyZ2V0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICBpZiAobCAmJiBvLmNvbnRhaW5zUmFuZ2UobiwgdHJ1ZSkpIHtcclxuICAgICAgICAgICAgICAgIG4uc3RhcnQgPSBuLnN0YXJ0Ll9nZXRDb21iaW5lZChlLnNvdXJjZVBvc2l0aW9uLCBlLmdldE1vdmVkUmFuZ2VTdGFydCgpKTtcclxuICAgICAgICAgICAgICAgIG4uZW5kID0gbi5lbmQuX2dldENvbWJpbmVkKGUuc291cmNlUG9zaXRpb24sIGUuZ2V0TW92ZWRSYW5nZVN0YXJ0KCkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxJKFtuXSwgYSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBkID0gVnModC5zb3VyY2VQb3NpdGlvbi5nZXRQYXJlbnRQYXRoKCksIGUuc291cmNlUG9zaXRpb24uZ2V0UGFyZW50UGF0aCgpKTtcclxuICAgICAgICAgICAgaWYgKGQgPT0gXCJwcmVmaXhcIiB8fCBkID09IFwiZXh0ZW5zaW9uXCIpIHtcclxuICAgICAgICAgICAgICAgIG4uc3RhcnQgPSBuLnN0YXJ0Ll9nZXRUcmFuc2Zvcm1lZEJ5TW92ZShlLnNvdXJjZVBvc2l0aW9uLCBlLnRhcmdldFBvc2l0aW9uLCBlLmhvd01hbnkpO1xyXG4gICAgICAgICAgICAgICAgbi5lbmQgPSBuLmVuZC5fZ2V0VHJhbnNmb3JtZWRCeU1vdmUoZS5zb3VyY2VQb3NpdGlvbiwgZS50YXJnZXRQb3NpdGlvbiwgZS5ob3dNYW55KTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsSShbbl0sIGEpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQudHlwZSA9PSBcInJlbW92ZVwiICYmIGUudHlwZSAhPSBcInJlbW92ZVwiICYmICFpLmFXYXNVbmRvbmUgJiYgIWkuZm9yY2VXZWFrUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICByID0gdHJ1ZVxyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHQudHlwZSAhPSBcInJlbW92ZVwiICYmIGUudHlwZSA9PSBcInJlbW92ZVwiICYmICFpLmJXYXNVbmRvbmUgJiYgIWkuZm9yY2VXZWFrUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICByID0gZmFsc2VcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCB1ID0gW107XHJcbiAgICAgICAgICAgIGNvbnN0IGggPSBuLmdldERpZmZlcmVuY2Uobyk7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgdCBvZiBoKSB7XHJcbiAgICAgICAgICAgICAgICB0LnN0YXJ0ID0gdC5zdGFydC5fZ2V0VHJhbnNmb3JtZWRCeURlbGV0aW9uKGUuc291cmNlUG9zaXRpb24sIGUuaG93TWFueSk7XHJcbiAgICAgICAgICAgICAgICB0LmVuZCA9IHQuZW5kLl9nZXRUcmFuc2Zvcm1lZEJ5RGVsZXRpb24oZS5zb3VyY2VQb3NpdGlvbiwgZS5ob3dNYW55KTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBWcyh0LnN0YXJ0LmdldFBhcmVudFBhdGgoKSwgZS5nZXRNb3ZlZFJhbmdlU3RhcnQoKS5nZXRQYXJlbnRQYXRoKCkpID09IFwic2FtZVwiO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuX2dldFRyYW5zZm9ybWVkQnlJbnNlcnRpb24oZS5nZXRNb3ZlZFJhbmdlU3RhcnQoKSwgZS5ob3dNYW55LCBpKTtcclxuICAgICAgICAgICAgICAgIHUucHVzaCguLi5uKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IGYgPSBuLmdldEludGVyc2VjdGlvbihvKTtcclxuICAgICAgICAgICAgaWYgKGYgIT09IG51bGwgJiYgcikge1xyXG4gICAgICAgICAgICAgICAgZi5zdGFydCA9IGYuc3RhcnQuX2dldENvbWJpbmVkKGUuc291cmNlUG9zaXRpb24sIGUuZ2V0TW92ZWRSYW5nZVN0YXJ0KCkpO1xyXG4gICAgICAgICAgICAgICAgZi5lbmQgPSBmLmVuZC5fZ2V0Q29tYmluZWQoZS5zb3VyY2VQb3NpdGlvbiwgZS5nZXRNb3ZlZFJhbmdlU3RhcnQoKSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICB1LnB1c2goZilcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAodS5sZW5ndGggPT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvLnN0YXJ0LmlzQmVmb3JlKG4uc3RhcnQpIHx8IG8uc3RhcnQuaXNFcXVhbChuLnN0YXJ0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1LnVuc2hpZnQoZilcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1LnB1c2goZilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHUuc3BsaWNlKDEsIDAsIGYpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW25ldyBTbSh0LmJhc2VWZXJzaW9uKV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbEkodSwgYSlcclxuICAgICAgICB9KTtcclxuICAgICAgICBYTyhaZywgcm0sICh0LCBlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBuID0gdC50YXJnZXRQb3NpdGlvbi5jbG9uZSgpO1xyXG4gICAgICAgICAgICBpZiAoIXQudGFyZ2V0UG9zaXRpb24uaXNFcXVhbChlLmluc2VydGlvblBvc2l0aW9uKSB8fCAhZS5ncmF2ZXlhcmRQb3NpdGlvbiB8fCBpLmFiUmVsYXRpb24gPT0gXCJtb3ZlVGFyZ2V0QWZ0ZXJcIikge1xyXG4gICAgICAgICAgICAgICAgbiA9IHQudGFyZ2V0UG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlTcGxpdE9wZXJhdGlvbihlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGNvbnN0IG8gPSAkaC5fY3JlYXRlRnJvbVBvc2l0aW9uQW5kU2hpZnQodC5zb3VyY2VQb3NpdGlvbiwgdC5ob3dNYW55KTtcclxuICAgICAgICAgICAgaWYgKG8uZW5kLmlzRXF1YWwoZS5pbnNlcnRpb25Qb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIGlmICghZS5ncmF2ZXlhcmRQb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuaG93TWFueSsrXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0LnRhcmdldFBvc2l0aW9uID0gbjtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoby5zdGFydC5oYXNTYW1lUGFyZW50QXMoZS5zcGxpdFBvc2l0aW9uKSAmJiBvLmNvbnRhaW5zUG9zaXRpb24oZS5zcGxpdFBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgbGV0IHQgPSBuZXcgJGgoZS5zcGxpdFBvc2l0aW9uLCBvLmVuZCk7XHJcbiAgICAgICAgICAgICAgICB0ID0gdC5fZ2V0VHJhbnNmb3JtZWRCeVNwbGl0T3BlcmF0aW9uKGUpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IFtuZXcgJGgoby5zdGFydCwgZS5zcGxpdFBvc2l0aW9uKSwgdF07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbEkoaSwgbilcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC50YXJnZXRQb3NpdGlvbi5pc0VxdWFsKGUuc3BsaXRQb3NpdGlvbikgJiYgaS5hYlJlbGF0aW9uID09IFwiaW5zZXJ0QXRTb3VyY2VcIikge1xyXG4gICAgICAgICAgICAgICAgbiA9IGUubW92ZVRhcmdldFBvc2l0aW9uXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQudGFyZ2V0UG9zaXRpb24uaXNFcXVhbChlLmluc2VydGlvblBvc2l0aW9uKSAmJiBpLmFiUmVsYXRpb24gPT0gXCJpbnNlcnRCZXR3ZWVuXCIpIHtcclxuICAgICAgICAgICAgICAgIG4gPSB0LnRhcmdldFBvc2l0aW9uXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgciA9IG8uX2dldFRyYW5zZm9ybWVkQnlTcGxpdE9wZXJhdGlvbihlKTtcclxuICAgICAgICAgICAgY29uc3QgcyA9IFtyXTtcclxuICAgICAgICAgICAgaWYgKGUuZ3JhdmV5YXJkUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBvLnN0YXJ0LmlzRXF1YWwoZS5ncmF2ZXlhcmRQb3NpdGlvbikgfHwgby5jb250YWluc1Bvc2l0aW9uKGUuZ3JhdmV5YXJkUG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHQuaG93TWFueSA+IDEgJiYgbiAmJiAhaS5hV2FzVW5kb25lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcy5wdXNoKCRoLl9jcmVhdGVGcm9tUG9zaXRpb25BbmRTaGlmdChlLmluc2VydGlvblBvc2l0aW9uLCAxKSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbEkocywgbilcclxuICAgICAgICB9KTtcclxuICAgICAgICBYTyhaZywgb20sICh0LCBlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSAkaC5fY3JlYXRlRnJvbVBvc2l0aW9uQW5kU2hpZnQodC5zb3VyY2VQb3NpdGlvbiwgdC5ob3dNYW55KTtcclxuICAgICAgICAgICAgaWYgKGUuZGVsZXRpb25Qb3NpdGlvbi5oYXNTYW1lUGFyZW50QXModC5zb3VyY2VQb3NpdGlvbikgJiYgbi5jb250YWluc1Bvc2l0aW9uKGUuc291cmNlUG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC50eXBlID09IFwicmVtb3ZlXCIgJiYgIWkuZm9yY2VXZWFrUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpLmFXYXNVbmRvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbiA9IGUuZ3JhdmV5YXJkUG9zaXRpb24uY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG8gPSBlLnRhcmdldFBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5TWVyZ2VPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0Lmhvd01hbnkgPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpLnB1c2gobmV3IFpnKHQuc291cmNlUG9zaXRpb24sIHQuaG93TWFueSAtIDEsIHQudGFyZ2V0UG9zaXRpb24sIDApKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG4gPSBuLl9nZXRUcmFuc2Zvcm1lZEJ5TW92ZSh0LnNvdXJjZVBvc2l0aW9uLCB0LnRhcmdldFBvc2l0aW9uLCB0Lmhvd01hbnkgLSAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8gPSBvLl9nZXRUcmFuc2Zvcm1lZEJ5TW92ZSh0LnNvdXJjZVBvc2l0aW9uLCB0LnRhcmdldFBvc2l0aW9uLCB0Lmhvd01hbnkgLSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBlLmRlbGV0aW9uUG9zaXRpb24uX2dldENvbWJpbmVkKHQuc291cmNlUG9zaXRpb24sIHQudGFyZ2V0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gbmV3IFpnKG4sIDEsIHIsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gcy5nZXRNb3ZlZFJhbmdlU3RhcnQoKS5wYXRoLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGEucHVzaCgwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYyA9IG5ldyBVaChzLnRhcmdldFBvc2l0aW9uLnJvb3QsIGEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvID0gby5fZ2V0VHJhbnNmb3JtZWRCeU1vdmUobiwgciwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGwgPSBuZXcgWmcobywgZS5ob3dNYW55LCBjLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5wdXNoKHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLnB1c2gobCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5ob3dNYW55ID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpLmJXYXNVbmRvbmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbbmV3IFNtKDApXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdC5zb3VyY2VQb3NpdGlvbiA9IGUuZ3JhdmV5YXJkUG9zaXRpb24uY2xvbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHQudGFyZ2V0UG9zaXRpb24gPSB0LnRhcmdldFBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5TWVyZ2VPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgbyA9ICRoLl9jcmVhdGVGcm9tUG9zaXRpb25BbmRTaGlmdCh0LnNvdXJjZVBvc2l0aW9uLCB0Lmhvd01hbnkpO1xyXG4gICAgICAgICAgICBjb25zdCByID0gby5fZ2V0VHJhbnNmb3JtZWRCeU1lcmdlT3BlcmF0aW9uKGUpO1xyXG4gICAgICAgICAgICB0LnNvdXJjZVBvc2l0aW9uID0gci5zdGFydDtcclxuICAgICAgICAgICAgdC5ob3dNYW55ID0gci5lbmQub2Zmc2V0IC0gci5zdGFydC5vZmZzZXQ7XHJcbiAgICAgICAgICAgIHQudGFyZ2V0UG9zaXRpb24gPSB0LnRhcmdldFBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5TWVyZ2VPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICB9KTtcclxuICAgICAgICBYTyhpbSwgdG0sICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgIHQucG9zaXRpb24gPSB0LnBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5SW5zZXJ0T3BlcmF0aW9uKGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgWE8oaW0sIG9tLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodC5wb3NpdGlvbi5pc0VxdWFsKGUuZGVsZXRpb25Qb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIHQucG9zaXRpb24gPSBlLmdyYXZleWFyZFBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICB0LnBvc2l0aW9uLnN0aWNraW5lc3MgPSBcInRvTmV4dFwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0XVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQucG9zaXRpb24gPSB0LnBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5TWVyZ2VPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICB9KTtcclxuICAgICAgICBYTyhpbSwgWmcsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgIHQucG9zaXRpb24gPSB0LnBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5TW92ZU9wZXJhdGlvbihlKTtcclxuICAgICAgICAgICAgcmV0dXJuIFt0XVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFhPKGltLCBpbSwgKHQsIGUsIGkpID0+IHtcclxuICAgICAgICAgICAgaWYgKHQucG9zaXRpb24uaXNFcXVhbChlLnBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGkuYUlzU3Ryb25nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5vbGROYW1lID0gZS5uZXdOYW1lXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbmV3IFNtKDApXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICB9KTtcclxuICAgICAgICBYTyhpbSwgcm0sICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LnBvc2l0aW9uLnBhdGg7XHJcbiAgICAgICAgICAgIGNvbnN0IG4gPSBlLnNwbGl0UG9zaXRpb24uZ2V0UGFyZW50UGF0aCgpO1xyXG4gICAgICAgICAgICBpZiAoVnMoaSwgbikgPT0gXCJzYW1lXCIgJiYgIWUuZ3JhdmV5YXJkUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBuZXcgaW0odC5wb3NpdGlvbi5nZXRTaGlmdGVkQnkoMSksIHQub2xkTmFtZSwgdC5uZXdOYW1lLCAwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbdCwgZV1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0LnBvc2l0aW9uID0gdC5wb3NpdGlvbi5fZ2V0VHJhbnNmb3JtZWRCeVNwbGl0T3BlcmF0aW9uKGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgWE8obm0sIG5tLCAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodC5yb290ID09PSBlLnJvb3QgJiYgdC5rZXkgPT09IGUua2V5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkuYUlzU3Ryb25nIHx8IHQubmV3VmFsdWUgPT09IGUubmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW25ldyBTbSgwKV1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5vbGRWYWx1ZSA9IGUubmV3VmFsdWVcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgWE8ocm0sIHRtLCAodCwgZSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAodC5zcGxpdFBvc2l0aW9uLmhhc1NhbWVQYXJlbnRBcyhlLnBvc2l0aW9uKSAmJiB0LnNwbGl0UG9zaXRpb24ub2Zmc2V0IDwgZS5wb3NpdGlvbi5vZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgIHQuaG93TWFueSArPSBlLmhvd01hbnlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0LnNwbGl0UG9zaXRpb24gPSB0LnNwbGl0UG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlJbnNlcnRPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgIHQuaW5zZXJ0aW9uUG9zaXRpb24gPSBybS5nZXRJbnNlcnRpb25Qb3NpdGlvbih0LnNwbGl0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgWE8ocm0sIG9tLCAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXQuZ3JhdmV5YXJkUG9zaXRpb24gJiYgIWkuYldhc1VuZG9uZSAmJiB0LnNwbGl0UG9zaXRpb24uaGFzU2FtZVBhcmVudEFzKGUuc291cmNlUG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gZS5ncmF2ZXlhcmRQb3NpdGlvbi5wYXRoLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgICBpLnB1c2goMCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gbmV3IFVoKGUuZ3JhdmV5YXJkUG9zaXRpb24ucm9vdCwgaSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gcm0uZ2V0SW5zZXJ0aW9uUG9zaXRpb24obmV3IFVoKGUuZ3JhdmV5YXJkUG9zaXRpb24ucm9vdCwgaSkpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IG5ldyBybShuLCAwLCBudWxsLCAwKTtcclxuICAgICAgICAgICAgICAgIHIuaW5zZXJ0aW9uUG9zaXRpb24gPSBvO1xyXG4gICAgICAgICAgICAgICAgdC5zcGxpdFBvc2l0aW9uID0gdC5zcGxpdFBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5TWVyZ2VPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgICAgICB0Lmluc2VydGlvblBvc2l0aW9uID0gcm0uZ2V0SW5zZXJ0aW9uUG9zaXRpb24odC5zcGxpdFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIHQuZ3JhdmV5YXJkUG9zaXRpb24gPSByLmluc2VydGlvblBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICB0LmdyYXZleWFyZFBvc2l0aW9uLnN0aWNraW5lc3MgPSBcInRvTmV4dFwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtyLCB0XVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICh0LnNwbGl0UG9zaXRpb24uaGFzU2FtZVBhcmVudEFzKGUuZGVsZXRpb25Qb3NpdGlvbikgJiYgIXQuc3BsaXRQb3NpdGlvbi5pc0FmdGVyKGUuZGVsZXRpb25Qb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIHQuaG93TWFueS0tXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQuc3BsaXRQb3NpdGlvbi5oYXNTYW1lUGFyZW50QXMoZS50YXJnZXRQb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIHQuaG93TWFueSArPSBlLmhvd01hbnlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0LnNwbGl0UG9zaXRpb24gPSB0LnNwbGl0UG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlNZXJnZU9wZXJhdGlvbihlKTtcclxuICAgICAgICAgICAgdC5pbnNlcnRpb25Qb3NpdGlvbiA9IHJtLmdldEluc2VydGlvblBvc2l0aW9uKHQuc3BsaXRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGlmICh0LmdyYXZleWFyZFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0LmdyYXZleWFyZFBvc2l0aW9uID0gdC5ncmF2ZXlhcmRQb3NpdGlvbi5fZ2V0VHJhbnNmb3JtZWRCeU1lcmdlT3BlcmF0aW9uKGUpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIFt0XVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFhPKHJtLCBaZywgKHQsIGUsIGkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgbiA9ICRoLl9jcmVhdGVGcm9tUG9zaXRpb25BbmRTaGlmdChlLnNvdXJjZVBvc2l0aW9uLCBlLmhvd01hbnkpO1xyXG4gICAgICAgICAgICBpZiAodC5ncmF2ZXlhcmRQb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG4uc3RhcnQuaXNFcXVhbCh0LmdyYXZleWFyZFBvc2l0aW9uKSB8fCBuLmNvbnRhaW5zUG9zaXRpb24odC5ncmF2ZXlhcmRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWkuYldhc1VuZG9uZSAmJiBvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IHQuc3BsaXRQb3NpdGlvbi5fZ2V0VHJhbnNmb3JtZWRCeU1vdmVPcGVyYXRpb24oZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbiA9IHQuZ3JhdmV5YXJkUG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlNb3ZlT3BlcmF0aW9uKGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuLnBhdGguc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBvLnB1c2goMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgciA9IG5ldyBVaChuLnJvb3QsIG8pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSBuZXcgWmcoaSwgdC5ob3dNYW55LCByLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3NdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0LmdyYXZleWFyZFBvc2l0aW9uID0gdC5ncmF2ZXlhcmRQb3NpdGlvbi5fZ2V0VHJhbnNmb3JtZWRCeU1vdmVPcGVyYXRpb24oZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5zcGxpdFBvc2l0aW9uLmhhc1NhbWVQYXJlbnRBcyhlLnNvdXJjZVBvc2l0aW9uKSAmJiBuLmNvbnRhaW5zUG9zaXRpb24odC5zcGxpdFBvc2l0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IGUuaG93TWFueSAtICh0LnNwbGl0UG9zaXRpb24ub2Zmc2V0IC0gZS5zb3VyY2VQb3NpdGlvbi5vZmZzZXQpO1xyXG4gICAgICAgICAgICAgICAgdC5ob3dNYW55IC09IGk7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5zcGxpdFBvc2l0aW9uLmhhc1NhbWVQYXJlbnRBcyhlLnRhcmdldFBvc2l0aW9uKSAmJiB0LnNwbGl0UG9zaXRpb24ub2Zmc2V0IDwgZS50YXJnZXRQb3NpdGlvbi5vZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICB0Lmhvd01hbnkgKz0gZS5ob3dNYW55XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0LnNwbGl0UG9zaXRpb24gPSBlLnNvdXJjZVBvc2l0aW9uLmNsb25lKCk7XHJcbiAgICAgICAgICAgICAgICB0Lmluc2VydGlvblBvc2l0aW9uID0gcm0uZ2V0SW5zZXJ0aW9uUG9zaXRpb24odC5zcGxpdFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb25zdCBvID0gdC5zcGxpdFBvc2l0aW9uLmlzRXF1YWwoZS50YXJnZXRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgIGlmIChvICYmIChpLmJhUmVsYXRpb24gPT0gXCJpbnNlcnRBdFNvdXJjZVwiIHx8IGkuYWJSZWxhdGlvbiA9PSBcInNwbGl0QmVmb3JlXCIpKSB7XHJcbiAgICAgICAgICAgICAgICB0Lmhvd01hbnkgKz0gZS5ob3dNYW55O1xyXG4gICAgICAgICAgICAgICAgdC5zcGxpdFBvc2l0aW9uID0gdC5zcGxpdFBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5RGVsZXRpb24oZS5zb3VyY2VQb3NpdGlvbiwgZS5ob3dNYW55KTtcclxuICAgICAgICAgICAgICAgIHQuaW5zZXJ0aW9uUG9zaXRpb24gPSBybS5nZXRJbnNlcnRpb25Qb3NpdGlvbih0LnNwbGl0UG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFt0XVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghZS5zb3VyY2VQb3NpdGlvbi5pc0VxdWFsKGUudGFyZ2V0UG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodC5zcGxpdFBvc2l0aW9uLmhhc1NhbWVQYXJlbnRBcyhlLnNvdXJjZVBvc2l0aW9uKSAmJiB0LnNwbGl0UG9zaXRpb24ub2Zmc2V0IDw9IGUuc291cmNlUG9zaXRpb24ub2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5ob3dNYW55IC09IGUuaG93TWFueVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHQuc3BsaXRQb3NpdGlvbi5oYXNTYW1lUGFyZW50QXMoZS50YXJnZXRQb3NpdGlvbikgJiYgdC5zcGxpdFBvc2l0aW9uLm9mZnNldCA8IGUudGFyZ2V0UG9zaXRpb24ub2Zmc2V0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5ob3dNYW55ICs9IGUuaG93TWFueVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQuc3BsaXRQb3NpdGlvbi5zdGlja2luZXNzID0gXCJ0b05vbmVcIjtcclxuICAgICAgICAgICAgdC5zcGxpdFBvc2l0aW9uID0gdC5zcGxpdFBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5TW92ZU9wZXJhdGlvbihlKTtcclxuICAgICAgICAgICAgdC5zcGxpdFBvc2l0aW9uLnN0aWNraW5lc3MgPSBcInRvTmV4dFwiO1xyXG4gICAgICAgICAgICBpZiAodC5ncmF2ZXlhcmRQb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdC5pbnNlcnRpb25Qb3NpdGlvbiA9IHQuaW5zZXJ0aW9uUG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlNb3ZlT3BlcmF0aW9uKGUpXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0Lmluc2VydGlvblBvc2l0aW9uID0gcm0uZ2V0SW5zZXJ0aW9uUG9zaXRpb24odC5zcGxpdFBvc2l0aW9uKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBbdF1cclxuICAgICAgICB9KTtcclxuICAgICAgICBYTyhybSwgcm0sICh0LCBlLCBpKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0LnNwbGl0UG9zaXRpb24uaXNFcXVhbChlLnNwbGl0UG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXQuZ3JhdmV5YXJkUG9zaXRpb24gJiYgIWUuZ3JhdmV5YXJkUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW25ldyBTbSgwKV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh0LmdyYXZleWFyZFBvc2l0aW9uICYmIGUuZ3JhdmV5YXJkUG9zaXRpb24gJiYgdC5ncmF2ZXlhcmRQb3NpdGlvbi5pc0VxdWFsKGUuZ3JhdmV5YXJkUG9zaXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtuZXcgU20oMCldXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoaS5hYlJlbGF0aW9uID09IFwic3BsaXRCZWZvcmVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHQuaG93TWFueSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdC5ncmF2ZXlhcmRQb3NpdGlvbiA9IHQuZ3JhdmV5YXJkUG9zaXRpb24uX2dldFRyYW5zZm9ybWVkQnlTcGxpdE9wZXJhdGlvbihlKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQuZ3JhdmV5YXJkUG9zaXRpb24gJiYgZS5ncmF2ZXlhcmRQb3NpdGlvbiAmJiB0LmdyYXZleWFyZFBvc2l0aW9uLmlzRXF1YWwoZS5ncmF2ZXlhcmRQb3NpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSB0LnNwbGl0UG9zaXRpb24ucm9vdC5yb290TmFtZSA9PSBcIiRncmF2ZXlhcmRcIjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBlLnNwbGl0UG9zaXRpb24ucm9vdC5yb290TmFtZSA9PSBcIiRncmF2ZXlhcmRcIjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHIgPSBuICYmICFvO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcyA9IG8gJiYgIW47XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhID0gcyB8fCAhciAmJiBpLmFJc1N0cm9uZztcclxuICAgICAgICAgICAgICAgIGlmIChhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmhvd01hbnkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5wdXNoKG5ldyBaZyhlLm1vdmVUYXJnZXRQb3NpdGlvbiwgZS5ob3dNYW55LCBlLnNwbGl0UG9zaXRpb24sIDApKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodC5ob3dNYW55KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkucHVzaChuZXcgWmcodC5zcGxpdFBvc2l0aW9uLCB0Lmhvd01hbnksIHQubW92ZVRhcmdldFBvc2l0aW9uLCAwKSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtuZXcgU20oMCldXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQuZ3JhdmV5YXJkUG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHQuZ3JhdmV5YXJkUG9zaXRpb24gPSB0LmdyYXZleWFyZFBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5U3BsaXRPcGVyYXRpb24oZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodC5zcGxpdFBvc2l0aW9uLmlzRXF1YWwoZS5pbnNlcnRpb25Qb3NpdGlvbikgJiYgaS5hYlJlbGF0aW9uID09IFwic3BsaXRCZWZvcmVcIikge1xyXG4gICAgICAgICAgICAgICAgdC5ob3dNYW55Kys7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3RdXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKGUuc3BsaXRQb3NpdGlvbi5pc0VxdWFsKHQuaW5zZXJ0aW9uUG9zaXRpb24pICYmIGkuYmFSZWxhdGlvbiA9PSBcInNwbGl0QmVmb3JlXCIpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSBlLmluc2VydGlvblBvc2l0aW9uLnBhdGguc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgIGkucHVzaCgwKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBuZXcgVWgoZS5pbnNlcnRpb25Qb3NpdGlvbi5yb290LCBpKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSBuZXcgWmcodC5pbnNlcnRpb25Qb3NpdGlvbiwgMSwgbiwgMCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW3QsIG9dXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHQuc3BsaXRQb3NpdGlvbi5oYXNTYW1lUGFyZW50QXMoZS5zcGxpdFBvc2l0aW9uKSAmJiB0LnNwbGl0UG9zaXRpb24ub2Zmc2V0IDwgZS5zcGxpdFBvc2l0aW9uLm9mZnNldCkge1xyXG4gICAgICAgICAgICAgICAgdC5ob3dNYW55IC09IGUuaG93TWFueVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHQuc3BsaXRQb3NpdGlvbiA9IHQuc3BsaXRQb3NpdGlvbi5fZ2V0VHJhbnNmb3JtZWRCeVNwbGl0T3BlcmF0aW9uKGUpO1xyXG4gICAgICAgICAgICB0Lmluc2VydGlvblBvc2l0aW9uID0gcm0uZ2V0SW5zZXJ0aW9uUG9zaXRpb24odC5zcGxpdFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgcmV0dXJuIFt0XVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBmdW5jdGlvbiBjSSh0LCBlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0LnRhcmdldFBvc2l0aW9uLl9nZXRUcmFuc2Zvcm1lZEJ5RGVsZXRpb24oZS5zb3VyY2VQb3NpdGlvbiwgZS5ob3dNYW55KSA9PT0gbnVsbFxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZnVuY3Rpb24gbEkodCwgZSkge1xyXG4gICAgICAgICAgICBjb25zdCBpID0gW107XHJcbiAgICAgICAgICAgIGZvciAobGV0IG4gPSAwOyBuIDwgdC5sZW5ndGg7IG4rKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHRbbl07XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gbmV3IFpnKG8uc3RhcnQsIG8uZW5kLm9mZnNldCAtIG8uc3RhcnQub2Zmc2V0LCBlLCAwKTtcclxuICAgICAgICAgICAgICAgIGkucHVzaChyKTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGUgPSBuICsgMTsgZSA8IHQubGVuZ3RoOyBlKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB0W2VdID0gdFtlXS5fZ2V0VHJhbnNmb3JtZWRCeU1vdmUoci5zb3VyY2VQb3NpdGlvbiwgci50YXJnZXRQb3NpdGlvbiwgci5ob3dNYW55KVswXVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZSA9IGUuX2dldFRyYW5zZm9ybWVkQnlNb3ZlKHIuc291cmNlUG9zaXRpb24sIHIudGFyZ2V0UG9zaXRpb24sIHIuaG93TWFueSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3MgZEkgZXh0ZW5kcyBqdyB7XHJcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKHQpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyKHQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fc3RhY2sgPSBbXTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZWRCYXRjaGVzID0gbmV3IFdlYWtTZXQ7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZWZyZXNoKCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0VuYWJsZWQgPSB0aGlzLl9zdGFjay5sZW5ndGggPiAwXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGFkZEJhdGNoKHQpIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSB0aGlzLmVkaXRvci5tb2RlbC5kb2N1bWVudC5zZWxlY3Rpb247XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0ge3JhbmdlczogZS5oYXNPd25SYW5nZSA/IEFycmF5LmZyb20oZS5nZXRSYW5nZXMoKSkgOiBbXSwgaXNCYWNrd2FyZDogZS5pc0JhY2t3YXJkfTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3N0YWNrLnB1c2goe2JhdGNoOiB0LCBzZWxlY3Rpb246IGl9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGNsZWFyU3RhY2soKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFjayA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoKClcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgX3Jlc3RvcmVTZWxlY3Rpb24odCwgZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbiA9IHRoaXMuZWRpdG9yLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IG4uZG9jdW1lbnQ7XHJcbiAgICAgICAgICAgICAgICBjb25zdCByID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGUgb2YgdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHQgPSB1SShlLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gdC5maW5kKHQgPT4gdC5zdGFydC5yb290ICE9IG8uZ3JhdmV5YXJkKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByLnB1c2gobilcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoci5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgICAgICBuLmNoYW5nZSh0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdC5zZXRTZWxlY3Rpb24ociwge2JhY2t3YXJkOiBlfSlcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfdW5kbyh0LCBlKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpID0gdGhpcy5lZGl0b3IubW9kZWw7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5kb2N1bWVudDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2NyZWF0ZWRCYXRjaGVzLmFkZChlKTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0Lm9wZXJhdGlvbnMuc2xpY2UoKS5maWx0ZXIodCA9PiB0LmlzRG9jdW1lbnRPcGVyYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgby5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHQgb2Ygbykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0LmJhc2VWZXJzaW9uICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCByID0gQXJyYXkuZnJvbShuLmhpc3RvcnkuZ2V0T3BlcmF0aW9ucyhvKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcyA9IGlJKFt0LmdldFJldmVyc2VkKCldLCByLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZVJlbGF0aW9uczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQ6IHRoaXMuZWRpdG9yLm1vZGVsLmRvY3VtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYWRXaXRoTm9PcHM6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3JjZVdlYWtSZW1vdmU6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBhID0gcy5vcGVyYXRpb25zQTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG8gb2YgYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlLmFkZE9wZXJhdGlvbihvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaS5hcHBseU9wZXJhdGlvbihvKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbi5oaXN0b3J5LnNldE9wZXJhdGlvbkFzVW5kb25lKHQsIG8pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmdW5jdGlvbiB1SSh0LCBlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0LmdldFRyYW5zZm9ybWVkQnlPcGVyYXRpb25zKGUpO1xyXG4gICAgICAgICAgICBpLnNvcnQoKHQsIGUpID0+IHQuc3RhcnQuaXNCZWZvcmUoZS5zdGFydCkgPyAtMSA6IDEpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCB0ID0gMTsgdCA8IGkubGVuZ3RoOyB0KyspIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGUgPSBpW3QgLSAxXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpW3RdO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuZW5kLmlzVG91Y2hpbmcobi5zdGFydCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBlLmVuZCA9IG4uZW5kO1xyXG4gICAgICAgICAgICAgICAgICAgIGkuc3BsaWNlKHQsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIHQtLVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBoSSBleHRlbmRzIGRJIHtcclxuICAgICAgICAgICAgZXhlY3V0ZSh0ID0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQgPyB0aGlzLl9zdGFjay5maW5kSW5kZXgoZSA9PiBlLmJhdGNoID09IHQpIDogdGhpcy5fc3RhY2subGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGkgPSB0aGlzLl9zdGFjay5zcGxpY2UoZSwgMSlbMF07XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuID0gdGhpcy5lZGl0b3IubW9kZWwuY3JlYXRlQmF0Y2goXCJ0cmFuc3BhcmVudFwiKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuZWRpdG9yLm1vZGVsLmVucXVldWVDaGFuZ2UobiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VuZG8oaS5iYXRjaCwgbik7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yLm1vZGVsLmRvY3VtZW50Lmhpc3RvcnkuZ2V0T3BlcmF0aW9ucyhpLmJhdGNoLmJhc2VWZXJzaW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXN0b3JlU2VsZWN0aW9uKGkuc2VsZWN0aW9uLnJhbmdlcywgaS5zZWxlY3Rpb24uaXNCYWNrd2FyZCwgdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5maXJlKFwicmV2ZXJ0XCIsIGkuYmF0Y2gsIG4pXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHRoaXMucmVmcmVzaCgpXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIGZJIGV4dGVuZHMgZEkge1xyXG4gICAgICAgICAgICBleGVjdXRlKCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuX3N0YWNrLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHRoaXMuZWRpdG9yLm1vZGVsLmNyZWF0ZUJhdGNoKFwidHJhbnNwYXJlbnRcIik7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmVkaXRvci5tb2RlbC5lbnF1ZXVlQ2hhbmdlKGUsICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBpID0gdC5iYXRjaC5vcGVyYXRpb25zW3QuYmF0Y2gub3BlcmF0aW9ucy5sZW5ndGggLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBuID0gaS5iYXNlVmVyc2lvbiArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMuZWRpdG9yLm1vZGVsLmRvY3VtZW50Lmhpc3RvcnkuZ2V0T3BlcmF0aW9ucyhuKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9yZXN0b3JlU2VsZWN0aW9uKHQuc2VsZWN0aW9uLnJhbmdlcywgdC5zZWxlY3Rpb24uaXNCYWNrd2FyZCwgbyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdW5kbyh0LmJhdGNoLCBlKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnJlZnJlc2goKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyBnSSBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiVW5kb0VkaXRpbmdcIlxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBjb25zdHJ1Y3Rvcih0KSB7XHJcbiAgICAgICAgICAgICAgICBzdXBlcih0KTtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JhdGNoUmVnaXN0cnkgPSBuZXcgV2Vha1NldFxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fdW5kb0NvbW1hbmQgPSBuZXcgaEkodCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWRvQ29tbWFuZCA9IG5ldyBmSSh0KTtcclxuICAgICAgICAgICAgICAgIHQuY29tbWFuZHMuYWRkKFwidW5kb1wiLCB0aGlzLl91bmRvQ29tbWFuZCk7XHJcbiAgICAgICAgICAgICAgICB0LmNvbW1hbmRzLmFkZChcInJlZG9cIiwgdGhpcy5fcmVkb0NvbW1hbmQpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5saXN0ZW5Ubyh0Lm1vZGVsLCBcImFwcGx5T3BlcmF0aW9uXCIsICh0LCBlKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaSA9IGVbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpLmlzRG9jdW1lbnRPcGVyYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBpLmJhdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IG8gPSB0aGlzLl9yZWRvQ29tbWFuZC5fY3JlYXRlZEJhdGNoZXMuaGFzKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHIgPSB0aGlzLl91bmRvQ29tbWFuZC5fY3JlYXRlZEJhdGNoZXMuaGFzKG4pO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHMgPSB0aGlzLl9iYXRjaFJlZ2lzdHJ5LmhhcyhuKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocyB8fCBuLnR5cGUgPT0gXCJ0cmFuc3BhcmVudFwiICYmICFvICYmICFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91bmRvQ29tbWFuZC5hZGRCYXRjaChuKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl91bmRvQ29tbWFuZC5hZGRCYXRjaChuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZG9Db21tYW5kLmNsZWFyU3RhY2soKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2JhdGNoUmVnaXN0cnkuYWRkKG4pXHJcbiAgICAgICAgICAgICAgICB9LCB7cHJpb3JpdHk6IFwiaGlnaGVzdFwifSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKHRoaXMuX3VuZG9Db21tYW5kLCBcInJldmVydFwiLCAodCwgZSwgaSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZG9Db21tYW5kLmFkZEJhdGNoKGkpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHQua2V5c3Ryb2tlcy5zZXQoXCJDVFJMK1pcIiwgXCJ1bmRvXCIpO1xyXG4gICAgICAgICAgICAgICAgdC5rZXlzdHJva2VzLnNldChcIkNUUkwrWVwiLCBcInJlZG9cIik7XHJcbiAgICAgICAgICAgICAgICB0LmtleXN0cm9rZXMuc2V0KFwiQ1RSTCtTSElGVCtaXCIsIFwicmVkb1wiKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbUkgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNNS4wNDIgOS4zNjdsMi4xODkgMS44MzdhLjc1Ljc1IDAgMCAxLS45NjUgMS4xNDlsLTMuNzg4LTMuMThhLjc0Ny43NDcgMCAwIDEtLjIxLS4yODQuNzUuNzUgMCAwIDEgLjE3LS45NDVMNi4yMyA0Ljc2MmEuNzUuNzUgMCAxIDEgLjk2NCAxLjE1TDQuODYzIDcuODY2aDguOTE3QS43NS43NSAwIDAgMSAxNCA3LjlhNCA0IDAgMSAxLTEuNDc3IDcuNzE4bC4zNDQtMS40ODlhMi41IDIuNSAwIDEgMCAxLjA5NC00LjczbC4wMDgtLjAzMkg1LjA0MnpcIi8+PC9zdmc+JztcclxuICAgICAgICB2YXIgcEkgPSAnPHN2ZyB2aWV3Qm94PVwiMCAwIDIwIDIwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxwYXRoIGQ9XCJNMTQuOTU4IDkuMzY3bC0yLjE4OSAxLjgzN2EuNzUuNzUgMCAwIDAgLjk2NSAxLjE0OWwzLjc4OC0zLjE4YS43NDcuNzQ3IDAgMCAwIC4yMS0uMjg0Ljc1Ljc1IDAgMCAwLS4xNy0uOTQ1TDEzLjc3IDQuNzYyYS43NS43NSAwIDEgMC0uOTY0IDEuMTVsMi4zMzEgMS45NTVINi4yMkEuNzUuNzUgMCAwIDAgNiA3LjlhNCA0IDAgMSAwIDEuNDc3IDcuNzE4bC0uMzQ0LTEuNDg5QTIuNSAyLjUgMCAxIDEgNi4wMzkgOS40bC0uMDA4LS4wMzJoOC45Mjd6XCIvPjwvc3ZnPic7XHJcblxyXG4gICAgICAgIGNsYXNzIGJJIGV4dGVuZHMgbXAge1xyXG4gICAgICAgICAgICBpbml0KCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgdCA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgZSA9IHQubG9jYWxlO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgaSA9IHQudDtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG4gPSBlLnVpTGFuZ3VhZ2VEaXJlY3Rpb24gPT0gXCJsdHJcIiA/IG1JIDogcEk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvID0gZS51aUxhbmd1YWdlRGlyZWN0aW9uID09IFwibHRyXCIgPyBwSSA6IG1JO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkQnV0dG9uKFwidW5kb1wiLCBpKFwibW9cIiksIFwiQ1RSTCtaXCIsIG4pO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWRkQnV0dG9uKFwicmVkb1wiLCBpKFwibXBcIiksIFwiQ1RSTCtZXCIsIG8pXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIF9hZGRCdXR0b24odCwgZSwgaSwgbikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbyA9IHRoaXMuZWRpdG9yO1xyXG4gICAgICAgICAgICAgICAgby51aS5jb21wb25lbnRGYWN0b3J5LmFkZCh0LCByID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzID0gby5jb21tYW5kcy5nZXQodCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYSA9IG5ldyBoYihyKTtcclxuICAgICAgICAgICAgICAgICAgICBhLnNldCh7bGFiZWw6IGUsIGljb246IG4sIGtleXN0cm9rZTogaSwgdG9vbHRpcDogdHJ1ZX0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGEuYmluZChcImlzRW5hYmxlZFwiKS50byhzLCBcImlzRW5hYmxlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RlblRvKGEsIFwiZXhlY3V0ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG8uZXhlY3V0ZSh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgby5lZGl0aW5nLnZpZXcuZm9jdXMoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjbGFzcyB3SSBleHRlbmRzIG1wIHtcclxuICAgICAgICAgICAgc3RhdGljIGdldCByZXF1aXJlcygpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbZ0ksIGJJXVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdGF0aWMgZ2V0IHBsdWdpbk5hbWUoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJVbmRvXCJcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY2xhc3Mga0kgZXh0ZW5kcyBtcCB7XHJcbiAgICAgICAgICAgIHN0YXRpYyBnZXQgcmVxdWlyZXMoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gW1J4LCBxTywgWU8sIGNQLCB3SV1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgc3RhdGljIGdldCBwbHVnaW5OYW1lKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiRXNzZW50aWFsc1wiXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNsYXNzIF9JIGV4dGVuZHMgRncge1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgX0kuYnVpbHRpblBsdWdpbnMgPSBbcmssIHVrLCB2aywgU2ssIHJfLCBwXywgQV8sIFJfLCBXXywgYnYsIGN5LCBmeSwgUnksIEt5LCB6eCwgV3gsIHZDLCBQQywgdFQsIHpULCBXVCwgd1AsIENQLCB2UCwga1AsIHlQLCBfUCwgeFAsIFJQLCBCUCwgSFAsIERFLCBsTywgZE8sIElPLCBMTywga0ksIFZfXVxyXG4gICAgfV0pW1wiZGVmYXVsdFwiXVxyXG59KSk7XHJcbiIsIm1vZHVsZS5leHBvcnRzID0gIHtcclxuICAgIGE6IFwiSW1hZ2UgdG9vbGJhclwiLFxyXG4gICAgYjogXCLQodC/0LXRhtGB0LjQvNCy0L7Qu9GLXCIsXHJcbiAgICBjOiBcImxlZnR3YXJkcyBkb3VibGUgYXJyb3dcIixcclxuICAgIGQ6IFwicmlnaHR3YXJkcyBkb3VibGUgYXJyb3dcIixcclxuICAgIGU6IFwidXB3YXJkcyBkb3VibGUgYXJyb3dcIixcclxuICAgIGY6IFwiZG93bndhcmRzIGRvdWJsZSBhcnJvd1wiLFxyXG4gICAgZzogXCJsZWZ0d2FyZHMgZGFzaGVkIGFycm93XCIsXHJcbiAgICBoOiBcInJpZ2h0d2FyZHMgZGFzaGVkIGFycm93XCIsXHJcbiAgICBpOiBcInVwd2FyZHMgZGFzaGVkIGFycm93XCIsXHJcbiAgICBqOiBcImRvd253YXJkcyBkYXNoZWQgYXJyb3dcIixcclxuICAgIGs6IFwibGVmdHdhcmRzIGFycm93IHRvIGJhclwiLFxyXG4gICAgbDogXCJyaWdodHdhcmRzIGFycm93IHRvIGJhclwiLFxyXG4gICAgbTogXCJ1cHdhcmRzIGFycm93IHRvIGJhclwiLFxyXG4gICAgbjogXCJkb3dud2FyZHMgYXJyb3cgdG8gYmFyXCIsXHJcbiAgICBvOiBcInVwIGRvd24gYXJyb3cgd2l0aCBiYXNlXCIsXHJcbiAgICBwOiBcImJhY2sgd2l0aCBsZWZ0d2FyZHMgYXJyb3cgYWJvdmVcIixcclxuICAgIHE6IFwiZW5kIHdpdGggbGVmdHdhcmRzIGFycm93IGFib3ZlXCIsXHJcbiAgICByOiBcIm9uIHdpdGggZXhjbGFtYXRpb24gbWFyayB3aXRoIGxlZnQgcmlnaHQgYXJyb3cgYWJvdmVcIixcclxuICAgIHM6IFwic29vbiB3aXRoIHJpZ2h0d2FyZHMgYXJyb3cgYWJvdmVcIixcclxuICAgIHQ6IFwidG9wIHdpdGggdXB3YXJkcyBhcnJvdyBhYm92ZVwiLFxyXG4gICAgdTogXCJEb2xsYXIgc2lnblwiLFxyXG4gICAgdjogXCJFdXJvIHNpZ25cIixcclxuICAgIHc6IFwiWWVuIHNpZ25cIixcclxuICAgIHg6IFwiUG91bmQgc2lnblwiLFxyXG4gICAgeTogXCJDZW50IHNpZ25cIixcclxuICAgIHo6IFwiRXVyby1jdXJyZW5jeSBzaWduXCIsXHJcbiAgICBhYTogXCJDb2xvbiBzaWduXCIsXHJcbiAgICBhYjogXCJDcnV6ZWlybyBzaWduXCIsXHJcbiAgICBhYzogXCJGcmVuY2ggZnJhbmMgc2lnblwiLFxyXG4gICAgYWQ6IFwiTGlyYSBzaWduXCIsXHJcbiAgICBhZTogXCJDdXJyZW5jeSBzaWduXCIsXHJcbiAgICBhZjogXCJCaXRjb2luIHNpZ25cIixcclxuICAgIGFnOiBcIk1pbGwgc2lnblwiLFxyXG4gICAgYWg6IFwiTmFpcmEgc2lnblwiLFxyXG4gICAgYWk6IFwiUGVzZXRhIHNpZ25cIixcclxuICAgIGFqOiBcIlJ1cGVlIHNpZ25cIixcclxuICAgIGFrOiBcIldvbiBzaWduXCIsXHJcbiAgICBhbDogXCJOZXcgc2hlcWVsIHNpZ25cIixcclxuICAgIGFtOiBcIkRvbmcgc2lnblwiLFxyXG4gICAgYW46IFwiS2lwIHNpZ25cIixcclxuICAgIGFvOiBcIlR1Z3JpayBzaWduXCIsXHJcbiAgICBhcDogXCJEcmFjaG1hIHNpZ25cIixcclxuICAgIGFxOiBcIkdlcm1hbiBwZW5ueSBzaWduXCIsXHJcbiAgICBhcjogXCJQZXNvIHNpZ25cIixcclxuICAgIGFzOiBcIkd1YXJhbmkgc2lnblwiLFxyXG4gICAgYXQ6IFwiQXVzdHJhbCBzaWduXCIsXHJcbiAgICBhdTogXCJIcnl2bmlhIHNpZ25cIixcclxuICAgIGF2OiBcIkNlZGkgc2lnblwiLFxyXG4gICAgYXc6IFwiTGl2cmUgdG91cm5vaXMgc2lnblwiLFxyXG4gICAgYXg6IFwiU3Blc21pbG8gc2lnblwiLFxyXG4gICAgYXk6IFwiVGVuZ2Ugc2lnblwiLFxyXG4gICAgYXo6IFwiSW5kaWFuIHJ1cGVlIHNpZ25cIixcclxuICAgIGJhOiBcIlR1cmtpc2ggbGlyYSBzaWduXCIsXHJcbiAgICBiYjogXCJOb3JkaWMgbWFyayBzaWduXCIsXHJcbiAgICBiYzogXCJNYW5hdCBzaWduXCIsXHJcbiAgICBiZDogXCJSdWJsZSBzaWduXCIsXHJcbiAgICBiZTogXCJMYXRpbiBjYXBpdGFsIGxldHRlciBhIHdpdGggbWFjcm9uXCIsXHJcbiAgICBiZjogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgYSB3aXRoIG1hY3JvblwiLFxyXG4gICAgYmc6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgYSB3aXRoIGJyZXZlXCIsXHJcbiAgICBiaDogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgYSB3aXRoIGJyZXZlXCIsXHJcbiAgICBiaTogXCJMYXRpbiBjYXBpdGFsIGxldHRlciBhIHdpdGggb2dvbmVrXCIsXHJcbiAgICBiajogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgYSB3aXRoIG9nb25la1wiLFxyXG4gICAgYms6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgYyB3aXRoIGFjdXRlXCIsXHJcbiAgICBibDogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgYyB3aXRoIGFjdXRlXCIsXHJcbiAgICBibTogXCJMYXRpbiBjYXBpdGFsIGxldHRlciBjIHdpdGggY2lyY3VtZmxleFwiLFxyXG4gICAgYm46IFwiTGF0aW4gc21hbGwgbGV0dGVyIGMgd2l0aCBjaXJjdW1mbGV4XCIsXHJcbiAgICBibzogXCJMYXRpbiBjYXBpdGFsIGxldHRlciBjIHdpdGggZG90IGFib3ZlXCIsXHJcbiAgICBicDogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgYyB3aXRoIGRvdCBhYm92ZVwiLFxyXG4gICAgYnE6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgYyB3aXRoIGNhcm9uXCIsXHJcbiAgICBicjogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgYyB3aXRoIGNhcm9uXCIsXHJcbiAgICBiczogXCJMYXRpbiBjYXBpdGFsIGxldHRlciBkIHdpdGggY2Fyb25cIixcclxuICAgIGJ0OiBcIkxhdGluIHNtYWxsIGxldHRlciBkIHdpdGggY2Fyb25cIixcclxuICAgIGJ1OiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIGQgd2l0aCBzdHJva2VcIixcclxuICAgIGJ2OiBcIkxhdGluIHNtYWxsIGxldHRlciBkIHdpdGggc3Ryb2tlXCIsXHJcbiAgICBidzogXCJMYXRpbiBjYXBpdGFsIGxldHRlciBlIHdpdGggbWFjcm9uXCIsXHJcbiAgICBieDogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgZSB3aXRoIG1hY3JvblwiLFxyXG4gICAgYnk6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgZSB3aXRoIGJyZXZlXCIsXHJcbiAgICBiejogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgZSB3aXRoIGJyZXZlXCIsXHJcbiAgICBjYTogXCJMYXRpbiBjYXBpdGFsIGxldHRlciBlIHdpdGggZG90IGFib3ZlXCIsXHJcbiAgICBjYjogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgZSB3aXRoIGRvdCBhYm92ZVwiLFxyXG4gICAgY2M6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgZSB3aXRoIG9nb25la1wiLFxyXG4gICAgY2Q6IFwiTGF0aW4gc21hbGwgbGV0dGVyIGUgd2l0aCBvZ29uZWtcIixcclxuICAgIGNlOiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIGUgd2l0aCBjYXJvblwiLFxyXG4gICAgY2Y6IFwiTGF0aW4gc21hbGwgbGV0dGVyIGUgd2l0aCBjYXJvblwiLFxyXG4gICAgY2c6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgZyB3aXRoIGNpcmN1bWZsZXhcIixcclxuICAgIGNoOiBcIkxhdGluIHNtYWxsIGxldHRlciBnIHdpdGggY2lyY3VtZmxleFwiLFxyXG4gICAgY2k6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgZyB3aXRoIGJyZXZlXCIsXHJcbiAgICBjajogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgZyB3aXRoIGJyZXZlXCIsXHJcbiAgICBjazogXCJMYXRpbiBjYXBpdGFsIGxldHRlciBnIHdpdGggZG90IGFib3ZlXCIsXHJcbiAgICBjbDogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgZyB3aXRoIGRvdCBhYm92ZVwiLFxyXG4gICAgY206IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgZyB3aXRoIGNlZGlsbGFcIixcclxuICAgIGNuOiBcIkxhdGluIHNtYWxsIGxldHRlciBnIHdpdGggY2VkaWxsYVwiLFxyXG4gICAgY286IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgaCB3aXRoIGNpcmN1bWZsZXhcIixcclxuICAgIGNwOiBcIkxhdGluIHNtYWxsIGxldHRlciBoIHdpdGggY2lyY3VtZmxleFwiLFxyXG4gICAgY3E6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgaCB3aXRoIHN0cm9rZVwiLFxyXG4gICAgY3I6IFwiTGF0aW4gc21hbGwgbGV0dGVyIGggd2l0aCBzdHJva2VcIixcclxuICAgIGNzOiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIGkgd2l0aCB0aWxkZVwiLFxyXG4gICAgY3Q6IFwiTGF0aW4gc21hbGwgbGV0dGVyIGkgd2l0aCB0aWxkZVwiLFxyXG4gICAgY3U6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgaSB3aXRoIG1hY3JvblwiLFxyXG4gICAgY3Y6IFwiTGF0aW4gc21hbGwgbGV0dGVyIGkgd2l0aCBtYWNyb25cIixcclxuICAgIGN3OiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIGkgd2l0aCBicmV2ZVwiLFxyXG4gICAgY3g6IFwiTGF0aW4gc21hbGwgbGV0dGVyIGkgd2l0aCBicmV2ZVwiLFxyXG4gICAgY3k6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgaSB3aXRoIG9nb25la1wiLFxyXG4gICAgY3o6IFwiTGF0aW4gc21hbGwgbGV0dGVyIGkgd2l0aCBvZ29uZWtcIixcclxuICAgIGRhOiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIGkgd2l0aCBkb3QgYWJvdmVcIixcclxuICAgIGRiOiBcIkxhdGluIHNtYWxsIGxldHRlciBkb3RsZXNzIGlcIixcclxuICAgIGRjOiBcIkxhdGluIGNhcGl0YWwgbGlnYXR1cmUgaWpcIixcclxuICAgIGRkOiBcIkxhdGluIHNtYWxsIGxpZ2F0dXJlIGlqXCIsXHJcbiAgICBkZTogXCJMYXRpbiBjYXBpdGFsIGxldHRlciBqIHdpdGggY2lyY3VtZmxleFwiLFxyXG4gICAgZGY6IFwiTGF0aW4gc21hbGwgbGV0dGVyIGogd2l0aCBjaXJjdW1mbGV4XCIsXHJcbiAgICBkZzogXCJMYXRpbiBjYXBpdGFsIGxldHRlciBrIHdpdGggY2VkaWxsYVwiLFxyXG4gICAgZGg6IFwiTGF0aW4gc21hbGwgbGV0dGVyIGsgd2l0aCBjZWRpbGxhXCIsXHJcbiAgICBkaTogXCJMYXRpbiBzbWFsbCBsZXR0ZXIga3JhXCIsXHJcbiAgICBkajogXCJMYXRpbiBjYXBpdGFsIGxldHRlciBsIHdpdGggYWN1dGVcIixcclxuICAgIGRrOiBcIkxhdGluIHNtYWxsIGxldHRlciBsIHdpdGggYWN1dGVcIixcclxuICAgIGRsOiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIGwgd2l0aCBjZWRpbGxhXCIsXHJcbiAgICBkbTogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgbCB3aXRoIGNlZGlsbGFcIixcclxuICAgIGRuOiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIGwgd2l0aCBjYXJvblwiLFxyXG4gICAgZG86IFwiTGF0aW4gc21hbGwgbGV0dGVyIGwgd2l0aCBjYXJvblwiLFxyXG4gICAgZHA6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgbCB3aXRoIG1pZGRsZSBkb3RcIixcclxuICAgIGRxOiBcIkxhdGluIHNtYWxsIGxldHRlciBsIHdpdGggbWlkZGxlIGRvdFwiLFxyXG4gICAgZHI6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgbCB3aXRoIHN0cm9rZVwiLFxyXG4gICAgZHM6IFwiTGF0aW4gc21hbGwgbGV0dGVyIGwgd2l0aCBzdHJva2VcIixcclxuICAgIGR0OiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIG4gd2l0aCBhY3V0ZVwiLFxyXG4gICAgZHU6IFwiTGF0aW4gc21hbGwgbGV0dGVyIG4gd2l0aCBhY3V0ZVwiLFxyXG4gICAgZHY6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgbiB3aXRoIGNlZGlsbGFcIixcclxuICAgIGR3OiBcIkxhdGluIHNtYWxsIGxldHRlciBuIHdpdGggY2VkaWxsYVwiLFxyXG4gICAgZHg6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgbiB3aXRoIGNhcm9uXCIsXHJcbiAgICBkeTogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgbiB3aXRoIGNhcm9uXCIsXHJcbiAgICBkejogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgbiBwcmVjZWRlZCBieSBhcG9zdHJvcGhlXCIsXHJcbiAgICBlYTogXCJMYXRpbiBjYXBpdGFsIGxldHRlciBlbmdcIixcclxuICAgIGViOiBcIkxhdGluIHNtYWxsIGxldHRlciBlbmdcIixcclxuICAgIGVjOiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIG8gd2l0aCBtYWNyb25cIixcclxuICAgIGVkOiBcIkxhdGluIHNtYWxsIGxldHRlciBvIHdpdGggbWFjcm9uXCIsXHJcbiAgICBlZTogXCJMYXRpbiBjYXBpdGFsIGxldHRlciBvIHdpdGggYnJldmVcIixcclxuICAgIGVmOiBcIkxhdGluIHNtYWxsIGxldHRlciBvIHdpdGggYnJldmVcIixcclxuICAgIGVnOiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIG8gd2l0aCBkb3VibGUgYWN1dGVcIixcclxuICAgIGVoOiBcIkxhdGluIHNtYWxsIGxldHRlciBvIHdpdGggZG91YmxlIGFjdXRlXCIsXHJcbiAgICBlaTogXCJMYXRpbiBjYXBpdGFsIGxpZ2F0dXJlIG9lXCIsXHJcbiAgICBlajogXCJMYXRpbiBzbWFsbCBsaWdhdHVyZSBvZVwiLFxyXG4gICAgZWs6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgciB3aXRoIGFjdXRlXCIsXHJcbiAgICBlbDogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgciB3aXRoIGFjdXRlXCIsXHJcbiAgICBlbTogXCJMYXRpbiBjYXBpdGFsIGxldHRlciByIHdpdGggY2VkaWxsYVwiLFxyXG4gICAgZW46IFwiTGF0aW4gc21hbGwgbGV0dGVyIHIgd2l0aCBjZWRpbGxhXCIsXHJcbiAgICBlbzogXCJMYXRpbiBjYXBpdGFsIGxldHRlciByIHdpdGggY2Fyb25cIixcclxuICAgIGVwOiBcIkxhdGluIHNtYWxsIGxldHRlciByIHdpdGggY2Fyb25cIixcclxuICAgIGVxOiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIHMgd2l0aCBhY3V0ZVwiLFxyXG4gICAgZXI6IFwiTGF0aW4gc21hbGwgbGV0dGVyIHMgd2l0aCBhY3V0ZVwiLFxyXG4gICAgZXM6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgcyB3aXRoIGNpcmN1bWZsZXhcIixcclxuICAgIGV0OiBcIkxhdGluIHNtYWxsIGxldHRlciBzIHdpdGggY2lyY3VtZmxleFwiLFxyXG4gICAgZXU6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgcyB3aXRoIGNlZGlsbGFcIixcclxuICAgIGV2OiBcIkxhdGluIHNtYWxsIGxldHRlciBzIHdpdGggY2VkaWxsYVwiLFxyXG4gICAgZXc6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgcyB3aXRoIGNhcm9uXCIsXHJcbiAgICBleDogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgcyB3aXRoIGNhcm9uXCIsXHJcbiAgICBleTogXCJMYXRpbiBjYXBpdGFsIGxldHRlciB0IHdpdGggY2VkaWxsYVwiLFxyXG4gICAgZXo6IFwiTGF0aW4gc21hbGwgbGV0dGVyIHQgd2l0aCBjZWRpbGxhXCIsXHJcbiAgICBmYTogXCJMYXRpbiBjYXBpdGFsIGxldHRlciB0IHdpdGggY2Fyb25cIixcclxuICAgIGZiOiBcIkxhdGluIHNtYWxsIGxldHRlciB0IHdpdGggY2Fyb25cIixcclxuICAgIGZjOiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIHQgd2l0aCBzdHJva2VcIixcclxuICAgIGZkOiBcIkxhdGluIHNtYWxsIGxldHRlciB0IHdpdGggc3Ryb2tlXCIsXHJcbiAgICBmZTogXCJMYXRpbiBjYXBpdGFsIGxldHRlciB1IHdpdGggdGlsZGVcIixcclxuICAgIGZmOiBcIkxhdGluIHNtYWxsIGxldHRlciB1IHdpdGggdGlsZGVcIixcclxuICAgIGZnOiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIHUgd2l0aCBtYWNyb25cIixcclxuICAgIGZoOiBcIkxhdGluIHNtYWxsIGxldHRlciB1IHdpdGggbWFjcm9uXCIsXHJcbiAgICBmaTogXCJMYXRpbiBjYXBpdGFsIGxldHRlciB1IHdpdGggYnJldmVcIixcclxuICAgIGZqOiBcIkxhdGluIHNtYWxsIGxldHRlciB1IHdpdGggYnJldmVcIixcclxuICAgIGZrOiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIHUgd2l0aCByaW5nIGFib3ZlXCIsXHJcbiAgICBmbDogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgdSB3aXRoIHJpbmcgYWJvdmVcIixcclxuICAgIGZtOiBcIkxhdGluIGNhcGl0YWwgbGV0dGVyIHUgd2l0aCBkb3VibGUgYWN1dGVcIixcclxuICAgIGZuOiBcIkxhdGluIHNtYWxsIGxldHRlciB1IHdpdGggZG91YmxlIGFjdXRlXCIsXHJcbiAgICBmbzogXCJMYXRpbiBjYXBpdGFsIGxldHRlciB1IHdpdGggb2dvbmVrXCIsXHJcbiAgICBmcDogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgdSB3aXRoIG9nb25la1wiLFxyXG4gICAgZnE6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgdyB3aXRoIGNpcmN1bWZsZXhcIixcclxuICAgIGZyOiBcIkxhdGluIHNtYWxsIGxldHRlciB3IHdpdGggY2lyY3VtZmxleFwiLFxyXG4gICAgZnM6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgeSB3aXRoIGNpcmN1bWZsZXhcIixcclxuICAgIGZ0OiBcIkxhdGluIHNtYWxsIGxldHRlciB5IHdpdGggY2lyY3VtZmxleFwiLFxyXG4gICAgZnU6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgeSB3aXRoIGRpYWVyZXNpc1wiLFxyXG4gICAgZnY6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgeiB3aXRoIGFjdXRlXCIsXHJcbiAgICBmdzogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgeiB3aXRoIGFjdXRlXCIsXHJcbiAgICBmeDogXCJMYXRpbiBjYXBpdGFsIGxldHRlciB6IHdpdGggZG90IGFib3ZlXCIsXHJcbiAgICBmeTogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgeiB3aXRoIGRvdCBhYm92ZVwiLFxyXG4gICAgZno6IFwiTGF0aW4gY2FwaXRhbCBsZXR0ZXIgeiB3aXRoIGNhcm9uXCIsXHJcbiAgICBnYTogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgeiB3aXRoIGNhcm9uXCIsXHJcbiAgICBnYjogXCJMYXRpbiBzbWFsbCBsZXR0ZXIgbG9uZyBzXCIsXHJcbiAgICBnYzogXCJMZXNzLXRoYW4gc2lnblwiLFxyXG4gICAgZ2Q6IFwiR3JlYXRlci10aGFuIHNpZ25cIixcclxuICAgIGdlOiBcIkxlc3MtdGhhbiBvciBlcXVhbCB0b1wiLFxyXG4gICAgZ2Y6IFwiR3JlYXRlci10aGFuIG9yIGVxdWFsIHRvXCIsXHJcbiAgICBnZzogXCJFbiBkYXNoXCIsXHJcbiAgICBnaDogXCJFbSBkYXNoXCIsXHJcbiAgICBnaTogXCJNYWNyb25cIixcclxuICAgIGdqOiBcIk92ZXJsaW5lXCIsXHJcbiAgICBnazogXCJEZWdyZWUgc2lnblwiLFxyXG4gICAgZ2w6IFwiTWludXMgc2lnblwiLFxyXG4gICAgZ206IFwiUGx1cy1taW51cyBzaWduXCIsXHJcbiAgICBnbjogXCJEaXZpc2lvbiBzaWduXCIsXHJcbiAgICBnbzogXCJGcmFjdGlvbiBzbGFzaFwiLFxyXG4gICAgZ3A6IFwiTXVsdGlwbGljYXRpb24gc2lnblwiLFxyXG4gICAgZ3E6IFwiTGF0aW4gc21hbGwgbGV0dGVyIGYgd2l0aCBob29rXCIsXHJcbiAgICBncjogXCJJbnRlZ3JhbFwiLFxyXG4gICAgZ3M6IFwiTi1hcnkgc3VtbWF0aW9uXCIsXHJcbiAgICBndDogXCJJbmZpbml0eVwiLFxyXG4gICAgZ3U6IFwiU3F1YXJlIHJvb3RcIixcclxuICAgIGd2OiBcIlRpbGRlIG9wZXJhdG9yXCIsXHJcbiAgICBndzogXCJBcHByb3hpbWF0ZWx5IGVxdWFsIHRvXCIsXHJcbiAgICBneDogXCJBbG1vc3QgZXF1YWwgdG9cIixcclxuICAgIGd5OiBcIk5vdCBlcXVhbCB0b1wiLFxyXG4gICAgZ3o6IFwiSWRlbnRpY2FsIHRvXCIsXHJcbiAgICBoYTogXCJFbGVtZW50IG9mXCIsXHJcbiAgICBoYjogXCJOb3QgYW4gZWxlbWVudCBvZlwiLFxyXG4gICAgaGM6IFwiQ29udGFpbnMgYXMgbWVtYmVyXCIsXHJcbiAgICBoZDogXCJOLWFyeSBwcm9kdWN0XCIsXHJcbiAgICBoZTogXCJMb2dpY2FsIGFuZFwiLFxyXG4gICAgaGY6IFwiTG9naWNhbCBvclwiLFxyXG4gICAgaGc6IFwiTm90IHNpZ25cIixcclxuICAgIGhoOiBcIkludGVyc2VjdGlvblwiLFxyXG4gICAgaGk6IFwiVW5pb25cIixcclxuICAgIGhqOiBcIlBhcnRpYWwgZGlmZmVyZW50aWFsXCIsXHJcbiAgICBoazogXCJGb3IgYWxsXCIsXHJcbiAgICBobDogXCJUaGVyZSBleGlzdHNcIixcclxuICAgIGhtOiBcIkVtcHR5IHNldFwiLFxyXG4gICAgaG46IFwiTmFibGFcIixcclxuICAgIGhvOiBcIkFzdGVyaXNrIG9wZXJhdG9yXCIsXHJcbiAgICBocDogXCJQcm9wb3J0aW9uYWwgdG9cIixcclxuICAgIGhxOiBcIkFuZ2xlXCIsXHJcbiAgICBocjogXCJWdWxnYXIgZnJhY3Rpb24gb25lIHF1YXJ0ZXJcIixcclxuICAgIGhzOiBcIlZ1bGdhciBmcmFjdGlvbiBvbmUgaGFsZlwiLFxyXG4gICAgaHQ6IFwiVnVsZ2FyIGZyYWN0aW9uIHRocmVlIHF1YXJ0ZXJzXCIsXHJcbiAgICBodTogXCJTaW5nbGUgbGVmdC1wb2ludGluZyBhbmdsZSBxdW90YXRpb24gbWFya1wiLFxyXG4gICAgaHY6IFwiU2luZ2xlIHJpZ2h0LXBvaW50aW5nIGFuZ2xlIHF1b3RhdGlvbiBtYXJrXCIsXHJcbiAgICBodzogXCJMZWZ0LXBvaW50aW5nIGRvdWJsZSBhbmdsZSBxdW90YXRpb24gbWFya1wiLFxyXG4gICAgaHg6IFwiUmlnaHQtcG9pbnRpbmcgZG91YmxlIGFuZ2xlIHF1b3RhdGlvbiBtYXJrXCIsXHJcbiAgICBoeTogXCJMZWZ0IHNpbmdsZSBxdW90YXRpb24gbWFya1wiLFxyXG4gICAgaHo6IFwiUmlnaHQgc2luZ2xlIHF1b3RhdGlvbiBtYXJrXCIsXHJcbiAgICBpYTogXCJMZWZ0IGRvdWJsZSBxdW90YXRpb24gbWFya1wiLFxyXG4gICAgaWI6IFwiUmlnaHQgZG91YmxlIHF1b3RhdGlvbiBtYXJrXCIsXHJcbiAgICBpYzogXCJTaW5nbGUgbG93LTkgcXVvdGF0aW9uIG1hcmtcIixcclxuICAgIGlkOiBcIkRvdWJsZSBsb3ctOSBxdW90YXRpb24gbWFya1wiLFxyXG4gICAgaWU6IFwiSW52ZXJ0ZWQgZXhjbGFtYXRpb24gbWFya1wiLFxyXG4gICAgaWY6IFwiSW52ZXJ0ZWQgcXVlc3Rpb24gbWFya1wiLFxyXG4gICAgaWc6IFwiVHdvIGRvdCBsZWFkZXJcIixcclxuICAgIGloOiBcIkhvcml6b250YWwgZWxsaXBzaXNcIixcclxuICAgIGlpOiBcIkRvdWJsZSBkYWdnZXJcIixcclxuICAgIGlqOiBcIlBlciBtaWxsZSBzaWduXCIsXHJcbiAgICBpazogXCJQZXIgdGVuIHRob3VzYW5kIHNpZ25cIixcclxuICAgIGlsOiBcIkRvdWJsZSBleGNsYW1hdGlvbiBtYXJrXCIsXHJcbiAgICBpbTogXCJRdWVzdGlvbiBleGNsYW1hdGlvbiBtYXJrXCIsXHJcbiAgICBpbjogXCJFeGNsYW1hdGlvbiBxdWVzdGlvbiBtYXJrXCIsXHJcbiAgICBpbzogXCJEb3VibGUgcXVlc3Rpb24gbWFya1wiLFxyXG4gICAgaXA6IFwiQ29weXJpZ2h0IHNpZ25cIixcclxuICAgIGlxOiBcIlJlZ2lzdGVyZWQgc2lnblwiLFxyXG4gICAgaXI6IFwiVHJhZGUgbWFyayBzaWduXCIsXHJcbiAgICBpczogXCJTZWN0aW9uIHNpZ25cIixcclxuICAgIGl0OiBcIlBhcmFncmFwaCBzaWduXCIsXHJcbiAgICBpdTogXCJSZXZlcnNlZCBwYXJhZ3JhcGggc2lnblwiLFxyXG4gICAgaXY6IFwiVGFibGUgdG9vbGJhclwiLFxyXG4gICAgaXc6IFwi0JLRi9GA0LDQstC90LjQstCw0L3QuNC1INC/0L4g0LvQtdCy0L7QvNGDINC60YDQsNGOXCIsXHJcbiAgICBpeDogXCLQktGL0YDQsNCy0L3QuNCy0LDQvdC40LUg0L/QviDQv9GA0LDQstC+0LzRgyDQutGA0LDRjlwiLFxyXG4gICAgaXk6IFwi0JLRi9GA0LDQstC90LjQstCw0L3QuNC1INC/0L4g0YbQtdC90YLRgNGDXCIsXHJcbiAgICBpejogXCLQktGL0YDQsNCy0L3QuNCy0LDQvdC40LUg0L/QviDRiNC40YDQuNC90LVcIixcclxuICAgIGphOiBcItCS0YvRgNCw0LLQvdC40LLQsNC90LjQtSDRgtC10LrRgdGC0LBcIixcclxuICAgIGpiOiBcItCS0YvRgNCw0LLQvdC40LLQsNC90LjQtVwiLFxyXG4gICAgamM6IFwi0KbQuNGC0LDRgtCwXCIsXHJcbiAgICBqZDogXCLQktGL0LHRgNCw0YLRjCDQt9Cw0LPQvtC70L7QstC+0LpcIixcclxuICAgIGplOiBcItCX0LDQs9C+0LvQvtCy0L7QulwiLFxyXG4gICAgamY6IFwi0JPQvtGA0LjQt9C+0L3RgtCw0LvRjNC90LDRjyDQu9C40L3QuNGPXCIsXHJcbiAgICBqZzogXCLQo9Cy0LXQu9C40YfQuNGC0Ywg0L7RgtGB0YLRg9C/XCIsXHJcbiAgICBqaDogXCLQo9C80LXQvdGM0YjQuNGC0Ywg0L7RgtGB0YLRg9C/XCIsXHJcbiAgICBqaTogXCLQltC40YDQvdGL0LlcIixcclxuICAgIGpqOiBcItCa0YPRgNGB0LjQslwiLFxyXG4gICAgams6IFwi0JfQsNGH0LXRgNC60L3Rg9GC0YvQuVwiLFxyXG4gICAgamw6IFwi0J/QvtC00YHRgtGA0L7Rh9C90YvQuVwiLFxyXG4gICAgam06IFwi0J3QsNC00YHRgtGA0L7Rh9C90YvQuVwiLFxyXG4gICAgam46IFwi0J/QvtC00YfQtdGA0LrQvdGD0YLRi9C5XCIsXHJcbiAgICBqbzogXCLQodC10LzQtdC50YHRgtCy0L4g0YjRgNC40YTRgtC+0LJcIixcclxuICAgIGpwOiBcItCf0L4g0YPQvNC+0LvRh9Cw0L3QuNGOXCIsXHJcbiAgICBqcTogXCLQoNCw0LfQvNC10YAg0YjRgNC40YTRgtCwXCIsXHJcbiAgICBqcjogXCLQntGH0LXQvdGMINC80LXQu9C60LjQuVwiLFxyXG4gICAganM6IFwi0JzQtdC70LrQuNC5XCIsXHJcbiAgICBqdDogXCLQmtGA0YPQv9C90YvQuVwiLFxyXG4gICAganU6IFwi0J7Rh9C10L3RjCDQutGA0YPQv9C90YvQuVwiLFxyXG4gICAganY6IFwi0KbQstC10YIg0YjRgNC40YTRgtCwXCIsXHJcbiAgICBqdzogXCLQptCy0LXRgiDRhNC+0L3QsFwiLFxyXG4gICAgang6IFwi0JLQuNC00LbQtdGCINC40LfQvtCx0YDQsNC20LXQvdC40LlcIixcclxuICAgIGp5OiBcItCe0YDQuNCz0LjQvdCw0LvRjNC90YvQuSDRgNCw0LfQvNC10YAg0LjQt9C+0LHRgNCw0LbQtdC90LjRj1wiLFxyXG4gICAgano6IFwi0JHQvtC60L7QstC+0LUg0LjQt9C+0LHRgNCw0LbQtdC90LjQtVwiLFxyXG4gICAga2E6IFwi0JLRi9GA0LDQstC90LjQstCw0L3QuNC1INC/0L4g0LvQtdCy0L7QvNGDINC60YDQsNGOXCIsXHJcbiAgICBrYjogXCLQktGL0YDQsNCy0L3QuNCy0LDQvdC40LUg0L/QviDRhtC10L3RgtGA0YNcIixcclxuICAgIGtjOiBcItCS0YvRgNCw0LLQvdC40LLQsNC90LjQtSDQv9C+INC/0YDQsNCy0L7QvNGDINC60YDQsNGOXCIsXHJcbiAgICBrZDogXCLQktGB0YLQsNCy0LjRgtGMINC40LfQvtCx0YDQsNC20LXQvdC40LVcIixcclxuICAgIGtlOiBcItCX0LDQs9GA0YPQt9C60LAg0L3QtSDQstGL0L/QvtC70L3QtdC90LBcIixcclxuICAgIGtmOiBcIldpZGdldCB0b29sYmFyXCIsXHJcbiAgICBrZzogXCLQodCy0L7QudGB0YLQstCwINGC0LDQsdC70LjRhtGLXCIsXHJcbiAgICBraDogXCLQodCy0L7QudGB0YLQstCwINGP0YfQtdC50LrQuFwiLFxyXG4gICAga2k6IFwi0JLRgdGC0LDQstC40YLRjCDRgtCw0LHQu9C40YbRg1wiLFxyXG4gICAga2o6IFwi0KHRgtC+0LvQsdC10YYg0LfQsNCz0L7Qu9C+0LLQutC+0LJcIixcclxuICAgIGtrOiBcItCS0YHRgtCw0LLQuNGC0Ywg0YHRgtC+0LvQsdC10YYg0YHQu9C10LLQsFwiLFxyXG4gICAga2w6IFwi0JLRgdGC0LDQstC40YLRjCDRgdGC0L7Qu9Cx0LXRhiDRgdC/0YDQsNCy0LBcIixcclxuICAgIGttOiBcItCj0LTQsNC70LjRgtGMINGB0YLQvtC70LHQtdGGXCIsXHJcbiAgICBrbjogXCLQodGC0L7Qu9Cx0LXRhlwiLFxyXG4gICAga286IFwi0KHRgtGA0L7QutCwINC30LDQs9C+0LvQvtCy0LrQvtCyXCIsXHJcbiAgICBrcDogXCLQktGB0YLQsNCy0LjRgtGMINGB0YLRgNC+0LrRgyDQvdC40LbQtVwiLFxyXG4gICAga3E6IFwi0JLRgdGC0LDQstC40YLRjCDRgdGC0YDQvtC60YMg0LLRi9GI0LVcIixcclxuICAgIGtyOiBcItCj0LTQsNC70LjRgtGMINGB0YLRgNC+0LrRg1wiLFxyXG4gICAga3M6IFwi0KHRgtGA0L7QutCwXCIsXHJcbiAgICBrdDogXCLQntCx0YrQtdC00LjQvdC40YLRjCDRgSDRj9GH0LXQudC60L7QuSDRgdCy0LXRgNGF0YNcIixcclxuICAgIGt1OiBcItCe0LHRitC10LTQuNC90LjRgtGMINGBINGP0YfQtdC50LrQvtC5INGB0L/RgNCw0LLQsFwiLFxyXG4gICAga3Y6IFwi0J7QsdGK0LXQtNC40L3QuNGC0Ywg0YEg0Y/Rh9C10LnQutC+0Lkg0YHQvdC40LfRg1wiLFxyXG4gICAga3c6IFwi0J7QsdGK0LXQtNC40L3QuNGC0Ywg0YEg0Y/Rh9C10LnQutC+0Lkg0YHQu9C10LLQsFwiLFxyXG4gICAga3g6IFwi0KDQsNC30LTQtdC70LjRgtGMINGP0YfQtdC50LrRgyDQstC10YDRgtC40LrQsNC70YzQvdC+XCIsXHJcbiAgICBreTogXCLQoNCw0LfQtNC10LvQuNGC0Ywg0Y/Rh9C10LnQutGDINCz0L7RgNC40LfQvtC90YLQsNC70YzQvdC+XCIsXHJcbiAgICBrejogXCLQntCx0YrQtdC00LjQvdC40YLRjCDRj9GH0LXQudC60LhcIixcclxuICAgIGxhOiBcItCj0LHRgNCw0YLRjCDRhNC+0YDQvNCw0YLQuNGA0L7QstCw0L3QuNC1XCIsXHJcbiAgICBsYjogXCLQmNC00ZHRgiDQt9Cw0LPRgNGD0LfQutCwXCIsXHJcbiAgICBsYzogXCLQndGD0LzQtdGA0L7QstCw0L3QvdGL0Lkg0YHQv9C40YHQvtC6XCIsXHJcbiAgICBsZDogXCLQnNCw0YDQutC40YDQvtCy0LDQvdC90YvQuSDRgdC/0LjRgdC+0LpcIixcclxuICAgIGxlOiBcIkNoYXJhY3RlciBjYXRlZ29yaWVzXCIsXHJcbiAgICBsZjogXCLQodGB0YvQu9C60LBcIixcclxuICAgIGxnOiBcIkRyb3Bkb3duIHRvb2xiYXJcIixcclxuICAgIGxoOiBcItCg0LXQtNCw0LrRgtC40YDQvtCy0LDRgtGMINCw0LvRjNGC0LXRgNC90LDRgtC40LLQvdGL0Lkg0YLQtdC60YHRglwiLFxyXG4gICAgbGk6IFwi0KPQsdGA0LDRgtGMINGG0LLQtdGCXCIsXHJcbiAgICBsajogXCLQptCy0LXRgiDRgdGC0YDQsNC90LjRhtGLXCIsXHJcbiAgICBsazogXCLQo9Cx0YDQsNGC0Ywg0YHRgdGL0LvQutGDXCIsXHJcbiAgICBsbDogXCLQoNC10LTQsNC60YLQuNGA0L7QstCw0YLRjCDRgdGB0YvQu9C60YNcIixcclxuICAgIGxtOiBcItCe0YLQutGA0YvRgtGMINGB0YHRi9C70LrRgyDQsiDQvdC+0LLQvtC5INCy0LrQu9Cw0LTQutC1XCIsXHJcbiAgICBsbjogXCLQlNC70Y8g0Y3RgtC+0Lkg0YHRgdGL0LvQutC4INC90LUg0YPRgdGC0LDQvdC+0LLQu9C10L0g0LDQtNGA0LXRgSBVUkxcIixcclxuICAgIGxvOiBcItCh0L7RhdGA0LDQvdC40YLRjFwiLFxyXG4gICAgbHA6IFwi0J7RgtC80LXQvdCwXCIsXHJcbiAgICBscTogXCLQodGB0YvQu9C60LAgVVJMXCIsXHJcbiAgICBscjogXCJFZGl0b3IgdG9vbGJhclwiLFxyXG4gICAgbHM6IFwi0JTRgNGD0LPQuNC1INC40L3RgdGC0YDRg9C80LXQvdGC0YtcIixcclxuICAgIGx0OiBcItCQ0LvRjNGC0LXRgNC90LDRgtC40LLQvdGL0Lkg0YLQtdC60YHRglwiLFxyXG4gICAgbHU6IFwiJTAgb2YgJTFcIixcclxuICAgIGx2OiBcIlByZXZpb3VzXCIsXHJcbiAgICBsdzogXCJOZXh0XCIsXHJcbiAgICBseDogXCLQp9GR0YDQvdGL0LlcIixcclxuICAgIGx5OiBcItCi0ZHQvNC90L4t0YHQtdGA0YvQuVwiLFxyXG4gICAgbHo6IFwi0KHQtdGA0YvQuVwiLFxyXG4gICAgbWE6IFwi0KHQstC10YLQu9C+LdGB0LXRgNGL0LlcIixcclxuICAgIG1iOiBcItCR0LXQu9GL0LlcIixcclxuICAgIG1jOiBcItCa0YDQsNGB0L3Ri9C5XCIsXHJcbiAgICBtZDogXCLQntGA0LDQvdC20LXQstGL0LlcIixcclxuICAgIG1lOiBcItCW0ZHQu9GC0YvQuVwiLFxyXG4gICAgbWY6IFwi0KHQsNC70LDRgtC+0LLRi9C5XCIsXHJcbiAgICBtZzogXCLQl9C10LvRkdC90YvQuVwiLFxyXG4gICAgbWg6IFwi0JDQutCy0LDQvNCw0YDQuNC90L7QstGL0LlcIixcclxuICAgIG1pOiBcItCR0LjRgNGO0LfQvtCy0YvQuVwiLFxyXG4gICAgbWo6IFwi0JPQvtC70YPQsdC+0LlcIixcclxuICAgIG1rOiBcItCh0LjQvdC40LlcIixcclxuICAgIG1sOiBcItCk0LjQvtC70LXRgtC+0LLRi9C5XCIsXHJcbiAgICBtbTogXCJPcGVuIGluIGEgbmV3IHRhYlwiLFxyXG4gICAgbW46IFwiRG93bmxvYWRhYmxlXCIsXHJcbiAgICBtbzogXCLQntGC0LzQtdC90LjRgtGMXCIsXHJcbiAgICBtcDogXCLQn9C+0LLRgtC+0YDQuNGC0YxcIixcclxuICAgIG1xOiBcItCd0LXRglwiLFxyXG4gICAgbXI6IFwi0KHQv9C70L7RiNC90LDRj1wiLFxyXG4gICAgbXM6IFwi0KLQvtGH0LrQuFwiLFxyXG4gICAgbXQ6IFwi0J/Rg9C90LrRgtC40YBcIixcclxuICAgIG11OiBcItCU0LLQvtC50L3QsNGPXCIsXHJcbiAgICBtdjogXCJHcm9vdmVcIixcclxuICAgIG13OiBcIlJpZGdlXCIsXHJcbiAgICBteDogXCJJbnNldFwiLFxyXG4gICAgbXk6IFwiT3V0c2V0XCIsXHJcbiAgICBtejogJ1RoZSBjb2xvciBpcyBpbnZhbGlkLiBUcnkgXCIjRkYwMDAwXCIgb3IgXCJyZ2IoMjU1LDAsMClcIiBvciBcInJlZFwiLicsXHJcbiAgICBuYTogJ1RoZSB2YWx1ZSBpcyBpbnZhbGlkLiBUcnkgXCIxMHB4XCIgb3IgXCIyZW1cIiBvciBzaW1wbHkgXCIyXCIuJyxcclxuICAgIG5iOiBcItCT0YDQsNC90LjRhtCwXCIsXHJcbiAgICBuYzogXCLQodGC0LjQu9GMXCIsXHJcbiAgICBuZDogXCLQqNC40YDQuNC90LBcIixcclxuICAgIG5lOiBcItCm0LLQtdGCXCIsXHJcbiAgICBuZjogXCLQptCy0LXRgiDRhNC+0L3QsFwiLFxyXG4gICAgbmc6IFwi0JPQsNCx0LDRgNC40YLRi1wiLFxyXG4gICAgbmg6IFwi0JLRi9GB0L7RgtCwXCIsXHJcbiAgICBuaTogXCLQntGC0YHRgtGD0L/Ri1wiLFxyXG4gICAgbmo6IFwi0JLRi9GA0LDQstC90LjQstCw0L3QuNC1INCyINGP0YfQtdC50LrQtVwiLFxyXG4gICAgbms6IFwiSG9yaXpvbnRhbCB0ZXh0IGFsaWdubWVudCB0b29sYmFyXCIsXHJcbiAgICBubDogXCJWZXJ0aWNhbCB0ZXh0IGFsaWdubWVudCB0b29sYmFyXCIsXHJcbiAgICBubTogXCJBbGlnbiBjZWxsIHRleHQgdG8gdGhlIGxlZnRcIixcclxuICAgIG5uOiBcIkFsaWduIGNlbGwgdGV4dCB0byB0aGUgY2VudGVyXCIsXHJcbiAgICBubzogXCJBbGlnbiBjZWxsIHRleHQgdG8gdGhlIHJpZ2h0XCIsXHJcbiAgICBucDogXCJKdXN0aWZ5IGNlbGwgdGV4dFwiLFxyXG4gICAgbnE6IFwiQWxpZ24gY2VsbCB0ZXh0IHRvIHRoZSB0b3BcIixcclxuICAgIG5yOiBcIkFsaWduIGNlbGwgdGV4dCB0byB0aGUgbWlkZGxlXCIsXHJcbiAgICBuczogXCJBbGlnbiBjZWxsIHRleHQgdG8gdGhlIGJvdHRvbVwiLFxyXG4gICAgbnQ6IFwi0JLRi9GA0LDQstC90LjQstCw0L3QuNC1XCIsXHJcbiAgICBudTogXCLQktGL0YDQsNCy0L3QuNCy0LDQvdC40LVcIixcclxuICAgIG52OiBcItCf0L4g0LvQtdCy0L7QvNGDINC60YDQsNGOXCIsXHJcbiAgICBudzogXCLQn9C+INGG0LXQvdGC0YDRg1wiLFxyXG4gICAgbng6IFwi0J/QviDQv9GA0LDQstC+0LzRgyDQutGA0LDRjlwiLFxyXG4gICAgbnk6IFwi0J/QsNGA0LDQs9GA0LDRhFwiLFxyXG4gICAgbno6IFwi0JfQsNCz0L7Qu9C+0LLQvtC6IDFcIixcclxuICAgIG9hOiBcItCX0LDQs9C+0LvQvtCy0L7QuiAyXCIsXHJcbiAgICBvYjogXCLQl9Cw0LPQvtC70L7QstC+0LogM1wiLFxyXG4gICAgb2M6IFwi0JfQsNCz0L7Qu9C+0LLQvtC6IDRcIixcclxuICAgIG9kOiBcItCX0LDQs9C+0LvQvtCy0L7QuiA1XCIsXHJcbiAgICBvZTogXCLQl9Cw0LPQvtC70L7QstC+0LogNlwiLFxyXG4gICAgb2Y6IFwi0KDQtdC00LDQutGC0L7RgCwgJTBcIlxyXG59OyIsInZhciBjc3MgPSBcIi5jb250YWluZXIsXFxuLmNvbnRhaW5lci1mbHVpZCB7XFxuICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxuICBtYXJnaW4tbGVmdDogYXV0bztcXG59XFxuLmNvbnRhaW5lci1mbHVpZCB7XFxuICBwYWRkaW5nLXJpZ2h0OiAycmVtO1xcbiAgcGFkZGluZy1sZWZ0OiAycmVtO1xcbn1cXG4ucm93IHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICBkaXNwbGF5OiAtd2Via2l0LWJveDtcXG4gIGRpc3BsYXk6IC1tcy1mbGV4Ym94O1xcbiAgZGlzcGxheTogZmxleDtcXG4gIC13ZWJraXQtYm94LWZsZXg6IDA7XFxuICAtbXMtZmxleDogMCAxIGF1dG87XFxuICBmbGV4OiAwIDEgYXV0bztcXG4gIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogbm9ybWFsO1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgLW1zLWZsZXgtd3JhcDogd3JhcDtcXG4gIGZsZXgtd3JhcDogd3JhcDtcXG4gIG1hcmdpbi1yaWdodDogLS41cmVtO1xcbiAgbWFyZ2luLWxlZnQ6IC0uNXJlbTtcXG59XFxuLnJvdy5yZXZlcnNlIHtcXG4gIC13ZWJraXQtYm94LW9yaWVudDogaG9yaXpvbnRhbDtcXG4gIC13ZWJraXQtYm94LWRpcmVjdGlvbjogcmV2ZXJzZTtcXG4gIC1tcy1mbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7XFxufVxcbi5jb2wucmV2ZXJzZSB7XFxuICAtd2Via2l0LWJveC1vcmllbnQ6IHZlcnRpY2FsO1xcbiAgLXdlYmtpdC1ib3gtZGlyZWN0aW9uOiByZXZlcnNlO1xcbiAgLW1zLWZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZTtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZTtcXG59XFxuLmNvbC14cyxcXG4uY29sLXhzLTEsXFxuLmNvbC14cy0xMCxcXG4uY29sLXhzLTExLFxcbi5jb2wteHMtMTIsXFxuLmNvbC14cy0yLFxcbi5jb2wteHMtMyxcXG4uY29sLXhzLTQsXFxuLmNvbC14cy01LFxcbi5jb2wteHMtNixcXG4uY29sLXhzLTcsXFxuLmNvbC14cy04LFxcbi5jb2wteHMtOSxcXG4uY29sLXhzLW9mZnNldC0wLFxcbi5jb2wteHMtb2Zmc2V0LTEsXFxuLmNvbC14cy1vZmZzZXQtMTAsXFxuLmNvbC14cy1vZmZzZXQtMTEsXFxuLmNvbC14cy1vZmZzZXQtMTIsXFxuLmNvbC14cy1vZmZzZXQtMixcXG4uY29sLXhzLW9mZnNldC0zLFxcbi5jb2wteHMtb2Zmc2V0LTQsXFxuLmNvbC14cy1vZmZzZXQtNSxcXG4uY29sLXhzLW9mZnNldC02LFxcbi5jb2wteHMtb2Zmc2V0LTcsXFxuLmNvbC14cy1vZmZzZXQtOCxcXG4uY29sLXhzLW9mZnNldC05IHtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxuICAtd2Via2l0LWJveC1mbGV4OiAwO1xcbiAgLW1zLWZsZXg6IDAgMCBhdXRvO1xcbiAgZmxleDogMCAwIGF1dG87XFxuICBwYWRkaW5nLXJpZ2h0OiAuNXJlbTtcXG4gIHBhZGRpbmctbGVmdDogLjVyZW07XFxufVxcbi5jb2wteHMge1xcbiAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gIC1tcy1mbGV4LXBvc2l0aXZlOiAxO1xcbiAgZmxleC1ncm93OiAxO1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDA7XFxuICBmbGV4LWJhc2lzOiAwO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbn1cXG4uY29sLXhzLTEge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDguMzMzMzMzMzMlO1xcbiAgZmxleC1iYXNpczogOC4zMzMzMzMzMyU7XFxuICBtYXgtd2lkdGg6IDguMzMzMzMzMzMlO1xcbn1cXG4uY29sLXhzLTIge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDE2LjY2NjY2NjY3JTtcXG4gIGZsZXgtYmFzaXM6IDE2LjY2NjY2NjY3JTtcXG4gIG1heC13aWR0aDogMTYuNjY2NjY2NjclO1xcbn1cXG4uY29sLXhzLTMge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDI1JTtcXG4gIGZsZXgtYmFzaXM6IDI1JTtcXG4gIG1heC13aWR0aDogMjUlO1xcbn1cXG4uY29sLXhzLTQge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDMzLjMzMzMzMzMzJTtcXG4gIGZsZXgtYmFzaXM6IDMzLjMzMzMzMzMzJTtcXG4gIG1heC13aWR0aDogMzMuMzMzMzMzMzMlO1xcbn1cXG4uY29sLXhzLTUge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDQxLjY2NjY2NjY3JTtcXG4gIGZsZXgtYmFzaXM6IDQxLjY2NjY2NjY3JTtcXG4gIG1heC13aWR0aDogNDEuNjY2NjY2NjclO1xcbn1cXG4uY29sLXhzLTYge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDUwJTtcXG4gIGZsZXgtYmFzaXM6IDUwJTtcXG4gIG1heC13aWR0aDogNTAlO1xcbn1cXG4uY29sLXhzLTcge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDU4LjMzMzMzMzMzJTtcXG4gIGZsZXgtYmFzaXM6IDU4LjMzMzMzMzMzJTtcXG4gIG1heC13aWR0aDogNTguMzMzMzMzMzMlO1xcbn1cXG4uY29sLXhzLTgge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDY2LjY2NjY2NjY3JTtcXG4gIGZsZXgtYmFzaXM6IDY2LjY2NjY2NjY3JTtcXG4gIG1heC13aWR0aDogNjYuNjY2NjY2NjclO1xcbn1cXG4uY29sLXhzLTkge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDc1JTtcXG4gIGZsZXgtYmFzaXM6IDc1JTtcXG4gIG1heC13aWR0aDogNzUlO1xcbn1cXG4uY29sLXhzLTEwIHtcXG4gIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiA4My4zMzMzMzMzMyU7XFxuICBmbGV4LWJhc2lzOiA4My4zMzMzMzMzMyU7XFxuICBtYXgtd2lkdGg6IDgzLjMzMzMzMzMzJTtcXG59XFxuLmNvbC14cy0xMSB7XFxuICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogOTEuNjY2NjY2NjclO1xcbiAgZmxleC1iYXNpczogOTEuNjY2NjY2NjclO1xcbiAgbWF4LXdpZHRoOiA5MS42NjY2NjY2NyU7XFxufVxcbi5jb2wteHMtMTIge1xcbiAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDEwMCU7XFxuICBmbGV4LWJhc2lzOiAxMDAlO1xcbiAgbWF4LXdpZHRoOiAxMDAlO1xcbn1cXG4uY29sLXhzLW9mZnNldC0wIHtcXG4gIG1hcmdpbi1sZWZ0OiAwO1xcbn1cXG4uY29sLXhzLW9mZnNldC0xIHtcXG4gIG1hcmdpbi1sZWZ0OiA4LjMzMzMzMzMzJTtcXG59XFxuLmNvbC14cy1vZmZzZXQtMiB7XFxuICBtYXJnaW4tbGVmdDogMTYuNjY2NjY2NjclO1xcbn1cXG4uY29sLXhzLW9mZnNldC0zIHtcXG4gIG1hcmdpbi1sZWZ0OiAyNSU7XFxufVxcbi5jb2wteHMtb2Zmc2V0LTQge1xcbiAgbWFyZ2luLWxlZnQ6IDMzLjMzMzMzMzMzJTtcXG59XFxuLmNvbC14cy1vZmZzZXQtNSB7XFxuICBtYXJnaW4tbGVmdDogNDEuNjY2NjY2NjclO1xcbn1cXG4uY29sLXhzLW9mZnNldC02IHtcXG4gIG1hcmdpbi1sZWZ0OiA1MCU7XFxufVxcbi5jb2wteHMtb2Zmc2V0LTcge1xcbiAgbWFyZ2luLWxlZnQ6IDU4LjMzMzMzMzMzJTtcXG59XFxuLmNvbC14cy1vZmZzZXQtOCB7XFxuICBtYXJnaW4tbGVmdDogNjYuNjY2NjY2NjclO1xcbn1cXG4uY29sLXhzLW9mZnNldC05IHtcXG4gIG1hcmdpbi1sZWZ0OiA3NSU7XFxufVxcbi5jb2wteHMtb2Zmc2V0LTEwIHtcXG4gIG1hcmdpbi1sZWZ0OiA4My4zMzMzMzMzMyU7XFxufVxcbi5jb2wteHMtb2Zmc2V0LTExIHtcXG4gIG1hcmdpbi1sZWZ0OiA5MS42NjY2NjY2NyU7XFxufVxcbi5zdGFydC14cyB7XFxuICAtd2Via2l0LWJveC1wYWNrOiBzdGFydDtcXG4gIC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgdGV4dC1hbGlnbjogc3RhcnQ7XFxufVxcbi5jZW50ZXIteHMge1xcbiAgLXdlYmtpdC1ib3gtcGFjazogY2VudGVyO1xcbiAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5lbmQteHMge1xcbiAgLXdlYmtpdC1ib3gtcGFjazogZW5kO1xcbiAgLW1zLWZsZXgtcGFjazogZW5kO1xcbiAganVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcXG4gIHRleHQtYWxpZ246IGVuZDtcXG59XFxuLnRvcC14cyB7XFxuICAtd2Via2l0LWJveC1hbGlnbjogc3RhcnQ7XFxuICAtbXMtZmxleC1hbGlnbjogc3RhcnQ7XFxuICBhbGlnbi1pdGVtczogZmxleC1zdGFydDtcXG59XFxuLm1pZGRsZS14cyB7XFxuICAtd2Via2l0LWJveC1hbGlnbjogY2VudGVyO1xcbiAgLW1zLWZsZXgtYWxpZ246IGNlbnRlcjtcXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcbi5ib3R0b20teHMge1xcbiAgLXdlYmtpdC1ib3gtYWxpZ246IGVuZDtcXG4gIC1tcy1mbGV4LWFsaWduOiBlbmQ7XFxuICBhbGlnbi1pdGVtczogZmxleC1lbmQ7XFxufVxcbi5hcm91bmQteHMge1xcbiAgLW1zLWZsZXgtcGFjazogZGlzdHJpYnV0ZTtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbn1cXG4uYmV0d2Vlbi14cyB7XFxuICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xcbiAgLW1zLWZsZXgtcGFjazoganVzdGlmeTtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcXG59XFxuLmZpcnN0LXhzIHtcXG4gIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDA7XFxuICAtbXMtZmxleC1vcmRlcjogLTE7XFxuICBvcmRlcjogLTE7XFxufVxcbi5sYXN0LXhzIHtcXG4gIC13ZWJraXQtYm94LW9yZGluYWwtZ3JvdXA6IDI7XFxuICAtbXMtZmxleC1vcmRlcjogMTtcXG4gIG9yZGVyOiAxO1xcbn1cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6NDhlbSkge1xcbiAgLmNvbnRhaW5lciB7XFxuICAgIHdpZHRoOiA0OXJlbTtcXG4gIH1cXG5cXG4gIC5jb2wtc20sXFxuICAuY29sLXNtLTEsXFxuICAuY29sLXNtLTEwLFxcbiAgLmNvbC1zbS0xMSxcXG4gIC5jb2wtc20tMTIsXFxuICAuY29sLXNtLTIsXFxuICAuY29sLXNtLTMsXFxuICAuY29sLXNtLTQsXFxuICAuY29sLXNtLTUsXFxuICAuY29sLXNtLTYsXFxuICAuY29sLXNtLTcsXFxuICAuY29sLXNtLTgsXFxuICAuY29sLXNtLTksXFxuICAuY29sLXNtLW9mZnNldC0wLFxcbiAgLmNvbC1zbS1vZmZzZXQtMSxcXG4gIC5jb2wtc20tb2Zmc2V0LTEwLFxcbiAgLmNvbC1zbS1vZmZzZXQtMTEsXFxuICAuY29sLXNtLW9mZnNldC0xMixcXG4gIC5jb2wtc20tb2Zmc2V0LTIsXFxuICAuY29sLXNtLW9mZnNldC0zLFxcbiAgLmNvbC1zbS1vZmZzZXQtNCxcXG4gIC5jb2wtc20tb2Zmc2V0LTUsXFxuICAuY29sLXNtLW9mZnNldC02LFxcbiAgLmNvbC1zbS1vZmZzZXQtNyxcXG4gIC5jb2wtc20tb2Zmc2V0LTgsXFxuICAuY29sLXNtLW9mZnNldC05IHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gICAgLW1zLWZsZXg6IDAgMCBhdXRvO1xcbiAgICBmbGV4OiAwIDAgYXV0bztcXG4gICAgcGFkZGluZy1yaWdodDogLjVyZW07XFxuICAgIHBhZGRpbmctbGVmdDogLjVyZW07XFxuICB9XFxuXFxuICAuY29sLXNtIHtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gICAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XFxuICAgIGZsZXgtZ3JvdzogMTtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDA7XFxuICAgIGZsZXgtYmFzaXM6IDA7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gIH1cXG5cXG4gIC5jb2wtc20tMSB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiA4LjMzMzMzMzMzJTtcXG4gICAgZmxleC1iYXNpczogOC4zMzMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogOC4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLXNtLTIge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogMTYuNjY2NjY2NjclO1xcbiAgICBmbGV4LWJhc2lzOiAxNi42NjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogMTYuNjY2NjY2NjclO1xcbiAgfVxcblxcbiAgLmNvbC1zbS0zIHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDI1JTtcXG4gICAgZmxleC1iYXNpczogMjUlO1xcbiAgICBtYXgtd2lkdGg6IDI1JTtcXG4gIH1cXG5cXG4gIC5jb2wtc20tNCB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiAzMy4zMzMzMzMzMyU7XFxuICAgIGZsZXgtYmFzaXM6IDMzLjMzMzMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiAzMy4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLXNtLTUge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogNDEuNjY2NjY2NjclO1xcbiAgICBmbGV4LWJhc2lzOiA0MS42NjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogNDEuNjY2NjY2NjclO1xcbiAgfVxcblxcbiAgLmNvbC1zbS02IHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDUwJTtcXG4gICAgZmxleC1iYXNpczogNTAlO1xcbiAgICBtYXgtd2lkdGg6IDUwJTtcXG4gIH1cXG5cXG4gIC5jb2wtc20tNyB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiA1OC4zMzMzMzMzMyU7XFxuICAgIGZsZXgtYmFzaXM6IDU4LjMzMzMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiA1OC4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLXNtLTgge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogNjYuNjY2NjY2NjclO1xcbiAgICBmbGV4LWJhc2lzOiA2Ni42NjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogNjYuNjY2NjY2NjclO1xcbiAgfVxcblxcbiAgLmNvbC1zbS05IHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDc1JTtcXG4gICAgZmxleC1iYXNpczogNzUlO1xcbiAgICBtYXgtd2lkdGg6IDc1JTtcXG4gIH1cXG5cXG4gIC5jb2wtc20tMTAge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogODMuMzMzMzMzMzMlO1xcbiAgICBmbGV4LWJhc2lzOiA4My4zMzMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogODMuMzMzMzMzMzMlO1xcbiAgfVxcblxcbiAgLmNvbC1zbS0xMSB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiA5MS42NjY2NjY2NyU7XFxuICAgIGZsZXgtYmFzaXM6IDkxLjY2NjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA5MS42NjY2NjY2NyU7XFxuICB9XFxuXFxuICAuY29sLXNtLTEyIHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDEwMCU7XFxuICAgIGZsZXgtYmFzaXM6IDEwMCU7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gIH1cXG5cXG4gIC5jb2wtc20tb2Zmc2V0LTAge1xcbiAgICBtYXJnaW4tbGVmdDogMDtcXG4gIH1cXG5cXG4gIC5jb2wtc20tb2Zmc2V0LTEge1xcbiAgICBtYXJnaW4tbGVmdDogOC4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLXNtLW9mZnNldC0yIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDE2LjY2NjY2NjY3JTtcXG4gIH1cXG5cXG4gIC5jb2wtc20tb2Zmc2V0LTMge1xcbiAgICBtYXJnaW4tbGVmdDogMjUlO1xcbiAgfVxcblxcbiAgLmNvbC1zbS1vZmZzZXQtNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAzMy4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLXNtLW9mZnNldC01IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDQxLjY2NjY2NjY3JTtcXG4gIH1cXG5cXG4gIC5jb2wtc20tb2Zmc2V0LTYge1xcbiAgICBtYXJnaW4tbGVmdDogNTAlO1xcbiAgfVxcblxcbiAgLmNvbC1zbS1vZmZzZXQtNyB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1OC4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLXNtLW9mZnNldC04IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDY2LjY2NjY2NjY3JTtcXG4gIH1cXG5cXG4gIC5jb2wtc20tb2Zmc2V0LTkge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlO1xcbiAgfVxcblxcbiAgLmNvbC1zbS1vZmZzZXQtMTAge1xcbiAgICBtYXJnaW4tbGVmdDogODMuMzMzMzMzMzMlO1xcbiAgfVxcblxcbiAgLmNvbC1zbS1vZmZzZXQtMTEge1xcbiAgICBtYXJnaW4tbGVmdDogOTEuNjY2NjY2NjclO1xcbiAgfVxcblxcbiAgLnN0YXJ0LXNtIHtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazogc3RhcnQ7XFxuICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxuICAgIHRleHQtYWxpZ246IHN0YXJ0O1xcbiAgfVxcblxcbiAgLmNlbnRlci1zbSB7XFxuICAgIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXG4gICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgfVxcblxcbiAgLmVuZC1zbSB7XFxuICAgIC13ZWJraXQtYm94LXBhY2s6IGVuZDtcXG4gICAgLW1zLWZsZXgtcGFjazogZW5kO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbiAgICB0ZXh0LWFsaWduOiBlbmQ7XFxuICB9XFxuXFxuICAudG9wLXNtIHtcXG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IHN0YXJ0O1xcbiAgICAtbXMtZmxleC1hbGlnbjogc3RhcnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgfVxcblxcbiAgLm1pZGRsZS1zbSB7XFxuICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB9XFxuXFxuICAuYm90dG9tLXNtIHtcXG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IGVuZDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGVuZDtcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xcbiAgfVxcblxcbiAgLmFyb3VuZC1zbSB7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGRpc3RyaWJ1dGU7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbiAgfVxcblxcbiAgLmJldHdlZW4tc20ge1xcbiAgICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xcbiAgICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICB9XFxuXFxuICAuZmlyc3Qtc20ge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAwO1xcbiAgICAtbXMtZmxleC1vcmRlcjogLTE7XFxuICAgIG9yZGVyOiAtMTtcXG4gIH1cXG5cXG4gIC5sYXN0LXNtIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMjtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDE7XFxuICAgIG9yZGVyOiAxO1xcbiAgfVxcbn1cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6NjRlbSkge1xcbiAgLmNvbnRhaW5lciB7XFxuICAgIHdpZHRoOiA2NXJlbTtcXG4gIH1cXG5cXG4gIC5jb2wtbWQsXFxuICAuY29sLW1kLTEsXFxuICAuY29sLW1kLTEwLFxcbiAgLmNvbC1tZC0xMSxcXG4gIC5jb2wtbWQtMTIsXFxuICAuY29sLW1kLTIsXFxuICAuY29sLW1kLTMsXFxuICAuY29sLW1kLTQsXFxuICAuY29sLW1kLTUsXFxuICAuY29sLW1kLTYsXFxuICAuY29sLW1kLTcsXFxuICAuY29sLW1kLTgsXFxuICAuY29sLW1kLTksXFxuICAuY29sLW1kLW9mZnNldC0wLFxcbiAgLmNvbC1tZC1vZmZzZXQtMSxcXG4gIC5jb2wtbWQtb2Zmc2V0LTEwLFxcbiAgLmNvbC1tZC1vZmZzZXQtMTEsXFxuICAuY29sLW1kLW9mZnNldC0xMixcXG4gIC5jb2wtbWQtb2Zmc2V0LTIsXFxuICAuY29sLW1kLW9mZnNldC0zLFxcbiAgLmNvbC1tZC1vZmZzZXQtNCxcXG4gIC5jb2wtbWQtb2Zmc2V0LTUsXFxuICAuY29sLW1kLW9mZnNldC02LFxcbiAgLmNvbC1tZC1vZmZzZXQtNyxcXG4gIC5jb2wtbWQtb2Zmc2V0LTgsXFxuICAuY29sLW1kLW9mZnNldC05IHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gICAgLW1zLWZsZXg6IDAgMCBhdXRvO1xcbiAgICBmbGV4OiAwIDAgYXV0bztcXG4gICAgcGFkZGluZy1yaWdodDogLjVyZW07XFxuICAgIHBhZGRpbmctbGVmdDogLjVyZW07XFxuICB9XFxuXFxuICAuY29sLW1kIHtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gICAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XFxuICAgIGZsZXgtZ3JvdzogMTtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDA7XFxuICAgIGZsZXgtYmFzaXM6IDA7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gIH1cXG5cXG4gIC5jb2wtbWQtMSB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiA4LjMzMzMzMzMzJTtcXG4gICAgZmxleC1iYXNpczogOC4zMzMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogOC4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLW1kLTIge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogMTYuNjY2NjY2NjclO1xcbiAgICBmbGV4LWJhc2lzOiAxNi42NjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogMTYuNjY2NjY2NjclO1xcbiAgfVxcblxcbiAgLmNvbC1tZC0zIHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDI1JTtcXG4gICAgZmxleC1iYXNpczogMjUlO1xcbiAgICBtYXgtd2lkdGg6IDI1JTtcXG4gIH1cXG5cXG4gIC5jb2wtbWQtNCB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiAzMy4zMzMzMzMzMyU7XFxuICAgIGZsZXgtYmFzaXM6IDMzLjMzMzMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiAzMy4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLW1kLTUge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogNDEuNjY2NjY2NjclO1xcbiAgICBmbGV4LWJhc2lzOiA0MS42NjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogNDEuNjY2NjY2NjclO1xcbiAgfVxcblxcbiAgLmNvbC1tZC02IHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDUwJTtcXG4gICAgZmxleC1iYXNpczogNTAlO1xcbiAgICBtYXgtd2lkdGg6IDUwJTtcXG4gIH1cXG5cXG4gIC5jb2wtbWQtNyB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiA1OC4zMzMzMzMzMyU7XFxuICAgIGZsZXgtYmFzaXM6IDU4LjMzMzMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiA1OC4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLW1kLTgge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogNjYuNjY2NjY2NjclO1xcbiAgICBmbGV4LWJhc2lzOiA2Ni42NjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogNjYuNjY2NjY2NjclO1xcbiAgfVxcblxcbiAgLmNvbC1tZC05IHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDc1JTtcXG4gICAgZmxleC1iYXNpczogNzUlO1xcbiAgICBtYXgtd2lkdGg6IDc1JTtcXG4gIH1cXG5cXG4gIC5jb2wtbWQtMTAge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogODMuMzMzMzMzMzMlO1xcbiAgICBmbGV4LWJhc2lzOiA4My4zMzMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogODMuMzMzMzMzMzMlO1xcbiAgfVxcblxcbiAgLmNvbC1tZC0xMSB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiA5MS42NjY2NjY2NyU7XFxuICAgIGZsZXgtYmFzaXM6IDkxLjY2NjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA5MS42NjY2NjY2NyU7XFxuICB9XFxuXFxuICAuY29sLW1kLTEyIHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDEwMCU7XFxuICAgIGZsZXgtYmFzaXM6IDEwMCU7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gIH1cXG5cXG4gIC5jb2wtbWQtb2Zmc2V0LTAge1xcbiAgICBtYXJnaW4tbGVmdDogMDtcXG4gIH1cXG5cXG4gIC5jb2wtbWQtb2Zmc2V0LTEge1xcbiAgICBtYXJnaW4tbGVmdDogOC4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLW1kLW9mZnNldC0yIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDE2LjY2NjY2NjY3JTtcXG4gIH1cXG5cXG4gIC5jb2wtbWQtb2Zmc2V0LTMge1xcbiAgICBtYXJnaW4tbGVmdDogMjUlO1xcbiAgfVxcblxcbiAgLmNvbC1tZC1vZmZzZXQtNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAzMy4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLW1kLW9mZnNldC01IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDQxLjY2NjY2NjY3JTtcXG4gIH1cXG5cXG4gIC5jb2wtbWQtb2Zmc2V0LTYge1xcbiAgICBtYXJnaW4tbGVmdDogNTAlO1xcbiAgfVxcblxcbiAgLmNvbC1tZC1vZmZzZXQtNyB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1OC4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLW1kLW9mZnNldC04IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDY2LjY2NjY2NjY3JTtcXG4gIH1cXG5cXG4gIC5jb2wtbWQtb2Zmc2V0LTkge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlO1xcbiAgfVxcblxcbiAgLmNvbC1tZC1vZmZzZXQtMTAge1xcbiAgICBtYXJnaW4tbGVmdDogODMuMzMzMzMzMzMlO1xcbiAgfVxcblxcbiAgLmNvbC1tZC1vZmZzZXQtMTEge1xcbiAgICBtYXJnaW4tbGVmdDogOTEuNjY2NjY2NjclO1xcbiAgfVxcblxcbiAgLnN0YXJ0LW1kIHtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazogc3RhcnQ7XFxuICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxuICAgIHRleHQtYWxpZ246IHN0YXJ0O1xcbiAgfVxcblxcbiAgLmNlbnRlci1tZCB7XFxuICAgIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXG4gICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgfVxcblxcbiAgLmVuZC1tZCB7XFxuICAgIC13ZWJraXQtYm94LXBhY2s6IGVuZDtcXG4gICAgLW1zLWZsZXgtcGFjazogZW5kO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbiAgICB0ZXh0LWFsaWduOiBlbmQ7XFxuICB9XFxuXFxuICAudG9wLW1kIHtcXG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IHN0YXJ0O1xcbiAgICAtbXMtZmxleC1hbGlnbjogc3RhcnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgfVxcblxcbiAgLm1pZGRsZS1tZCB7XFxuICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB9XFxuXFxuICAuYm90dG9tLW1kIHtcXG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IGVuZDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGVuZDtcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xcbiAgfVxcblxcbiAgLmFyb3VuZC1tZCB7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGRpc3RyaWJ1dGU7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbiAgfVxcblxcbiAgLmJldHdlZW4tbWQge1xcbiAgICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xcbiAgICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICB9XFxuXFxuICAuZmlyc3QtbWQge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAwO1xcbiAgICAtbXMtZmxleC1vcmRlcjogLTE7XFxuICAgIG9yZGVyOiAtMTtcXG4gIH1cXG5cXG4gIC5sYXN0LW1kIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMjtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDE7XFxuICAgIG9yZGVyOiAxO1xcbiAgfVxcbn1cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6NzVlbSkge1xcbiAgLmNvbnRhaW5lciB7XFxuICAgIHdpZHRoOiA3NnJlbTtcXG4gIH1cXG5cXG4gIC5jb2wtbGcsXFxuICAuY29sLWxnLTEsXFxuICAuY29sLWxnLTEwLFxcbiAgLmNvbC1sZy0xMSxcXG4gIC5jb2wtbGctMTIsXFxuICAuY29sLWxnLTIsXFxuICAuY29sLWxnLTMsXFxuICAuY29sLWxnLTQsXFxuICAuY29sLWxnLTUsXFxuICAuY29sLWxnLTYsXFxuICAuY29sLWxnLTcsXFxuICAuY29sLWxnLTgsXFxuICAuY29sLWxnLTksXFxuICAuY29sLWxnLW9mZnNldC0wLFxcbiAgLmNvbC1sZy1vZmZzZXQtMSxcXG4gIC5jb2wtbGctb2Zmc2V0LTEwLFxcbiAgLmNvbC1sZy1vZmZzZXQtMTEsXFxuICAuY29sLWxnLW9mZnNldC0xMixcXG4gIC5jb2wtbGctb2Zmc2V0LTIsXFxuICAuY29sLWxnLW9mZnNldC0zLFxcbiAgLmNvbC1sZy1vZmZzZXQtNCxcXG4gIC5jb2wtbGctb2Zmc2V0LTUsXFxuICAuY29sLWxnLW9mZnNldC02LFxcbiAgLmNvbC1sZy1vZmZzZXQtNyxcXG4gIC5jb2wtbGctb2Zmc2V0LTgsXFxuICAuY29sLWxnLW9mZnNldC05IHtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMDtcXG4gICAgLW1zLWZsZXg6IDAgMCBhdXRvO1xcbiAgICBmbGV4OiAwIDAgYXV0bztcXG4gICAgcGFkZGluZy1yaWdodDogLjVyZW07XFxuICAgIHBhZGRpbmctbGVmdDogLjVyZW07XFxuICB9XFxuXFxuICAuY29sLWxnIHtcXG4gICAgLXdlYmtpdC1ib3gtZmxleDogMTtcXG4gICAgLW1zLWZsZXgtcG9zaXRpdmU6IDE7XFxuICAgIGZsZXgtZ3JvdzogMTtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDA7XFxuICAgIGZsZXgtYmFzaXM6IDA7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gIH1cXG5cXG4gIC5jb2wtbGctMSB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiA4LjMzMzMzMzMzJTtcXG4gICAgZmxleC1iYXNpczogOC4zMzMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogOC4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLWxnLTIge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogMTYuNjY2NjY2NjclO1xcbiAgICBmbGV4LWJhc2lzOiAxNi42NjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogMTYuNjY2NjY2NjclO1xcbiAgfVxcblxcbiAgLmNvbC1sZy0zIHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDI1JTtcXG4gICAgZmxleC1iYXNpczogMjUlO1xcbiAgICBtYXgtd2lkdGg6IDI1JTtcXG4gIH1cXG5cXG4gIC5jb2wtbGctNCB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiAzMy4zMzMzMzMzMyU7XFxuICAgIGZsZXgtYmFzaXM6IDMzLjMzMzMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiAzMy4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLWxnLTUge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogNDEuNjY2NjY2NjclO1xcbiAgICBmbGV4LWJhc2lzOiA0MS42NjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogNDEuNjY2NjY2NjclO1xcbiAgfVxcblxcbiAgLmNvbC1sZy02IHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDUwJTtcXG4gICAgZmxleC1iYXNpczogNTAlO1xcbiAgICBtYXgtd2lkdGg6IDUwJTtcXG4gIH1cXG5cXG4gIC5jb2wtbGctNyB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiA1OC4zMzMzMzMzMyU7XFxuICAgIGZsZXgtYmFzaXM6IDU4LjMzMzMzMzMzJTtcXG4gICAgbWF4LXdpZHRoOiA1OC4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLWxnLTgge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogNjYuNjY2NjY2NjclO1xcbiAgICBmbGV4LWJhc2lzOiA2Ni42NjY2NjY2NyU7XFxuICAgIG1heC13aWR0aDogNjYuNjY2NjY2NjclO1xcbiAgfVxcblxcbiAgLmNvbC1sZy05IHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDc1JTtcXG4gICAgZmxleC1iYXNpczogNzUlO1xcbiAgICBtYXgtd2lkdGg6IDc1JTtcXG4gIH1cXG5cXG4gIC5jb2wtbGctMTAge1xcbiAgICAtbXMtZmxleC1wcmVmZXJyZWQtc2l6ZTogODMuMzMzMzMzMzMlO1xcbiAgICBmbGV4LWJhc2lzOiA4My4zMzMzMzMzMyU7XFxuICAgIG1heC13aWR0aDogODMuMzMzMzMzMzMlO1xcbiAgfVxcblxcbiAgLmNvbC1sZy0xMSB7XFxuICAgIC1tcy1mbGV4LXByZWZlcnJlZC1zaXplOiA5MS42NjY2NjY2NyU7XFxuICAgIGZsZXgtYmFzaXM6IDkxLjY2NjY2NjY3JTtcXG4gICAgbWF4LXdpZHRoOiA5MS42NjY2NjY2NyU7XFxuICB9XFxuXFxuICAuY29sLWxnLTEyIHtcXG4gICAgLW1zLWZsZXgtcHJlZmVycmVkLXNpemU6IDEwMCU7XFxuICAgIGZsZXgtYmFzaXM6IDEwMCU7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gIH1cXG5cXG4gIC5jb2wtbGctb2Zmc2V0LTAge1xcbiAgICBtYXJnaW4tbGVmdDogMDtcXG4gIH1cXG5cXG4gIC5jb2wtbGctb2Zmc2V0LTEge1xcbiAgICBtYXJnaW4tbGVmdDogOC4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLWxnLW9mZnNldC0yIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDE2LjY2NjY2NjY3JTtcXG4gIH1cXG5cXG4gIC5jb2wtbGctb2Zmc2V0LTMge1xcbiAgICBtYXJnaW4tbGVmdDogMjUlO1xcbiAgfVxcblxcbiAgLmNvbC1sZy1vZmZzZXQtNCB7XFxuICAgIG1hcmdpbi1sZWZ0OiAzMy4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLWxnLW9mZnNldC01IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDQxLjY2NjY2NjY3JTtcXG4gIH1cXG5cXG4gIC5jb2wtbGctb2Zmc2V0LTYge1xcbiAgICBtYXJnaW4tbGVmdDogNTAlO1xcbiAgfVxcblxcbiAgLmNvbC1sZy1vZmZzZXQtNyB7XFxuICAgIG1hcmdpbi1sZWZ0OiA1OC4zMzMzMzMzMyU7XFxuICB9XFxuXFxuICAuY29sLWxnLW9mZnNldC04IHtcXG4gICAgbWFyZ2luLWxlZnQ6IDY2LjY2NjY2NjY3JTtcXG4gIH1cXG5cXG4gIC5jb2wtbGctb2Zmc2V0LTkge1xcbiAgICBtYXJnaW4tbGVmdDogNzUlO1xcbiAgfVxcblxcbiAgLmNvbC1sZy1vZmZzZXQtMTAge1xcbiAgICBtYXJnaW4tbGVmdDogODMuMzMzMzMzMzMlO1xcbiAgfVxcblxcbiAgLmNvbC1sZy1vZmZzZXQtMTEge1xcbiAgICBtYXJnaW4tbGVmdDogOTEuNjY2NjY2NjclO1xcbiAgfVxcblxcbiAgLnN0YXJ0LWxnIHtcXG4gICAgLXdlYmtpdC1ib3gtcGFjazogc3RhcnQ7XFxuICAgIC1tcy1mbGV4LXBhY2s6IHN0YXJ0O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtc3RhcnQ7XFxuICAgIHRleHQtYWxpZ246IHN0YXJ0O1xcbiAgfVxcblxcbiAgLmNlbnRlci1sZyB7XFxuICAgIC13ZWJraXQtYm94LXBhY2s6IGNlbnRlcjtcXG4gICAgLW1zLWZsZXgtcGFjazogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgfVxcblxcbiAgLmVuZC1sZyB7XFxuICAgIC13ZWJraXQtYm94LXBhY2s6IGVuZDtcXG4gICAgLW1zLWZsZXgtcGFjazogZW5kO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGZsZXgtZW5kO1xcbiAgICB0ZXh0LWFsaWduOiBlbmQ7XFxuICB9XFxuXFxuICAudG9wLWxnIHtcXG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IHN0YXJ0O1xcbiAgICAtbXMtZmxleC1hbGlnbjogc3RhcnQ7XFxuICAgIGFsaWduLWl0ZW1zOiBmbGV4LXN0YXJ0O1xcbiAgfVxcblxcbiAgLm1pZGRsZS1sZyB7XFxuICAgIC13ZWJraXQtYm94LWFsaWduOiBjZW50ZXI7XFxuICAgIC1tcy1mbGV4LWFsaWduOiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICB9XFxuXFxuICAuYm90dG9tLWxnIHtcXG4gICAgLXdlYmtpdC1ib3gtYWxpZ246IGVuZDtcXG4gICAgLW1zLWZsZXgtYWxpZ246IGVuZDtcXG4gICAgYWxpZ24taXRlbXM6IGZsZXgtZW5kO1xcbiAgfVxcblxcbiAgLmFyb3VuZC1sZyB7XFxuICAgIC1tcy1mbGV4LXBhY2s6IGRpc3RyaWJ1dGU7XFxuICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xcbiAgfVxcblxcbiAgLmJldHdlZW4tbGcge1xcbiAgICAtd2Via2l0LWJveC1wYWNrOiBqdXN0aWZ5O1xcbiAgICAtbXMtZmxleC1wYWNrOiBqdXN0aWZ5O1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IHNwYWNlLWJldHdlZW47XFxuICB9XFxuXFxuICAuZmlyc3QtbGcge1xcbiAgICAtd2Via2l0LWJveC1vcmRpbmFsLWdyb3VwOiAwO1xcbiAgICAtbXMtZmxleC1vcmRlcjogLTE7XFxuICAgIG9yZGVyOiAtMTtcXG4gIH1cXG5cXG4gIC5sYXN0LWxnIHtcXG4gICAgLXdlYmtpdC1ib3gtb3JkaW5hbC1ncm91cDogMjtcXG4gICAgLW1zLWZsZXgtb3JkZXI6IDE7XFxuICAgIG9yZGVyOiAxO1xcbiAgfVxcbn1cXG5cIjsgKHJlcXVpcmUoXCJicm93c2VyaWZ5LWNzc1wiKS5jcmVhdGVTdHlsZShjc3MsIHsgXCJocmVmXCI6IFwiZGVwZW5kZW5jaWVzXFxcXGZsZXhib3hncmlkXFxcXGZsZXhib3hncmlkLm1pbi5jc3NcIiB9LCB7IFwiaW5zZXJ0QXRcIjogXCJib3R0b21cIiB9KSk7IG1vZHVsZS5leHBvcnRzID0gY3NzOyIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gYXRvYSAoYSwgbikgeyByZXR1cm4gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYSwgbik7IH1cbiIsIid1c2Ugc3RyaWN0Jztcbi8vIEZvciBtb3JlIGluZm9ybWF0aW9uIGFib3V0IGJyb3dzZXIgZmllbGQsIGNoZWNrIG91dCB0aGUgYnJvd3NlciBmaWVsZCBhdCBodHRwczovL2dpdGh1Yi5jb20vc3Vic3RhY2svYnJvd3NlcmlmeS1oYW5kYm9vayNicm93c2VyLWZpZWxkLlxuXG52YXIgc3R5bGVFbGVtZW50c0luc2VydGVkQXRUb3AgPSBbXTtcblxudmFyIGluc2VydFN0eWxlRWxlbWVudCA9IGZ1bmN0aW9uKHN0eWxlRWxlbWVudCwgb3B0aW9ucykge1xuICAgIHZhciBoZWFkID0gZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnaGVhZCcpWzBdO1xuICAgIHZhciBsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCA9IHN0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wW3N0eWxlRWxlbWVudHNJbnNlcnRlZEF0VG9wLmxlbmd0aCAtIDFdO1xuXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgb3B0aW9ucy5pbnNlcnRBdCA9IG9wdGlvbnMuaW5zZXJ0QXQgfHwgJ2JvdHRvbSc7XG5cbiAgICBpZiAob3B0aW9ucy5pbnNlcnRBdCA9PT0gJ3RvcCcpIHtcbiAgICAgICAgaWYgKCFsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcCkge1xuICAgICAgICAgICAgaGVhZC5pbnNlcnRCZWZvcmUoc3R5bGVFbGVtZW50LCBoZWFkLmZpcnN0Q2hpbGQpO1xuICAgICAgICB9IGVsc2UgaWYgKGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKSB7XG4gICAgICAgICAgICBoZWFkLmluc2VydEJlZm9yZShzdHlsZUVsZW1lbnQsIGxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wLm5leHRTaWJsaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGhlYWQuYXBwZW5kQ2hpbGQoc3R5bGVFbGVtZW50KTtcbiAgICAgICAgfVxuICAgICAgICBzdHlsZUVsZW1lbnRzSW5zZXJ0ZWRBdFRvcC5wdXNoKHN0eWxlRWxlbWVudCk7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmluc2VydEF0ID09PSAnYm90dG9tJykge1xuICAgICAgICBoZWFkLmFwcGVuZENoaWxkKHN0eWxlRWxlbWVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHZhbHVlIGZvciBwYXJhbWV0ZXIgXFwnaW5zZXJ0QXRcXCcuIE11c3QgYmUgXFwndG9wXFwnIG9yIFxcJ2JvdHRvbVxcJy4nKTtcbiAgICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICAvLyBDcmVhdGUgYSA8bGluaz4gdGFnIHdpdGggb3B0aW9uYWwgZGF0YSBhdHRyaWJ1dGVzXG4gICAgY3JlYXRlTGluazogZnVuY3Rpb24oaHJlZiwgYXR0cmlidXRlcykge1xuICAgICAgICB2YXIgaGVhZCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbiAgICAgICAgdmFyIGxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaW5rJyk7XG5cbiAgICAgICAgbGluay5ocmVmID0gaHJlZjtcbiAgICAgICAgbGluay5yZWwgPSAnc3R5bGVzaGVldCc7XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgIGlmICggISBhdHRyaWJ1dGVzLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IGF0dHJpYnV0ZXNba2V5XTtcbiAgICAgICAgICAgIGxpbmsuc2V0QXR0cmlidXRlKCdkYXRhLScgKyBrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGhlYWQuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgfSxcbiAgICAvLyBDcmVhdGUgYSA8c3R5bGU+IHRhZyB3aXRoIG9wdGlvbmFsIGRhdGEgYXR0cmlidXRlc1xuICAgIGNyZWF0ZVN0eWxlOiBmdW5jdGlvbihjc3NUZXh0LCBhdHRyaWJ1dGVzLCBleHRyYU9wdGlvbnMpIHtcbiAgICAgICAgZXh0cmFPcHRpb25zID0gZXh0cmFPcHRpb25zIHx8IHt9O1xuXG4gICAgICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIHN0eWxlLnR5cGUgPSAndGV4dC9jc3MnO1xuXG4gICAgICAgIGZvciAodmFyIGtleSBpbiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBpZiAoICEgYXR0cmlidXRlcy5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgdmFsdWUgPSBhdHRyaWJ1dGVzW2tleV07XG4gICAgICAgICAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ2RhdGEtJyArIGtleSwgdmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHN0eWxlLnNoZWV0KSB7IC8vIGZvciBqc2RvbSBhbmQgSUU5K1xuICAgICAgICAgICAgc3R5bGUuaW5uZXJIVE1MID0gY3NzVGV4dDtcbiAgICAgICAgICAgIHN0eWxlLnNoZWV0LmNzc1RleHQgPSBjc3NUZXh0O1xuICAgICAgICAgICAgaW5zZXJ0U3R5bGVFbGVtZW50KHN0eWxlLCB7IGluc2VydEF0OiBleHRyYU9wdGlvbnMuaW5zZXJ0QXQgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc3R5bGUuc3R5bGVTaGVldCkgeyAvLyBmb3IgSUU4IGFuZCBiZWxvd1xuICAgICAgICAgICAgaW5zZXJ0U3R5bGVFbGVtZW50KHN0eWxlLCB7IGluc2VydEF0OiBleHRyYU9wdGlvbnMuaW5zZXJ0QXQgfSk7XG4gICAgICAgICAgICBzdHlsZS5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3NUZXh0O1xuICAgICAgICB9IGVsc2UgeyAvLyBmb3IgQ2hyb21lLCBGaXJlZm94LCBhbmQgU2FmYXJpXG4gICAgICAgICAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3NUZXh0KSk7XG4gICAgICAgICAgICBpbnNlcnRTdHlsZUVsZW1lbnQoc3R5bGUsIHsgaW5zZXJ0QXQ6IGV4dHJhT3B0aW9ucy5pbnNlcnRBdCB9KTtcbiAgICAgICAgfVxuICAgIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB0aWNreSA9IHJlcXVpcmUoJ3RpY2t5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVib3VuY2UgKGZuLCBhcmdzLCBjdHgpIHtcbiAgaWYgKCFmbikgeyByZXR1cm47IH1cbiAgdGlja3koZnVuY3Rpb24gcnVuICgpIHtcbiAgICBmbi5hcHBseShjdHggfHwgbnVsbCwgYXJncyB8fCBbXSk7XG4gIH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGF0b2EgPSByZXF1aXJlKCdhdG9hJyk7XG52YXIgZGVib3VuY2UgPSByZXF1aXJlKCcuL2RlYm91bmNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZW1pdHRlciAodGhpbmcsIG9wdGlvbnMpIHtcbiAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuICB2YXIgZXZ0ID0ge307XG4gIGlmICh0aGluZyA9PT0gdW5kZWZpbmVkKSB7IHRoaW5nID0ge307IH1cbiAgdGhpbmcub24gPSBmdW5jdGlvbiAodHlwZSwgZm4pIHtcbiAgICBpZiAoIWV2dFt0eXBlXSkge1xuICAgICAgZXZ0W3R5cGVdID0gW2ZuXTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZ0W3R5cGVdLnB1c2goZm4pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpbmc7XG4gIH07XG4gIHRoaW5nLm9uY2UgPSBmdW5jdGlvbiAodHlwZSwgZm4pIHtcbiAgICBmbi5fb25jZSA9IHRydWU7IC8vIHRoaW5nLm9mZihmbikgc3RpbGwgd29ya3MhXG4gICAgdGhpbmcub24odHlwZSwgZm4pO1xuICAgIHJldHVybiB0aGluZztcbiAgfTtcbiAgdGhpbmcub2ZmID0gZnVuY3Rpb24gKHR5cGUsIGZuKSB7XG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGlmIChjID09PSAxKSB7XG4gICAgICBkZWxldGUgZXZ0W3R5cGVdO1xuICAgIH0gZWxzZSBpZiAoYyA9PT0gMCkge1xuICAgICAgZXZ0ID0ge307XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBldCA9IGV2dFt0eXBlXTtcbiAgICAgIGlmICghZXQpIHsgcmV0dXJuIHRoaW5nOyB9XG4gICAgICBldC5zcGxpY2UoZXQuaW5kZXhPZihmbiksIDEpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpbmc7XG4gIH07XG4gIHRoaW5nLmVtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGFyZ3MgPSBhdG9hKGFyZ3VtZW50cyk7XG4gICAgcmV0dXJuIHRoaW5nLmVtaXR0ZXJTbmFwc2hvdChhcmdzLnNoaWZ0KCkpLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICB9O1xuICB0aGluZy5lbWl0dGVyU25hcHNob3QgPSBmdW5jdGlvbiAodHlwZSkge1xuICAgIHZhciBldCA9IChldnRbdHlwZV0gfHwgW10pLnNsaWNlKDApO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYXJncyA9IGF0b2EoYXJndW1lbnRzKTtcbiAgICAgIHZhciBjdHggPSB0aGlzIHx8IHRoaW5nO1xuICAgICAgaWYgKHR5cGUgPT09ICdlcnJvcicgJiYgb3B0cy50aHJvd3MgIT09IGZhbHNlICYmICFldC5sZW5ndGgpIHsgdGhyb3cgYXJncy5sZW5ndGggPT09IDEgPyBhcmdzWzBdIDogYXJnczsgfVxuICAgICAgZXQuZm9yRWFjaChmdW5jdGlvbiBlbWl0dGVyIChsaXN0ZW4pIHtcbiAgICAgICAgaWYgKG9wdHMuYXN5bmMpIHsgZGVib3VuY2UobGlzdGVuLCBhcmdzLCBjdHgpOyB9IGVsc2UgeyBsaXN0ZW4uYXBwbHkoY3R4LCBhcmdzKTsgfVxuICAgICAgICBpZiAobGlzdGVuLl9vbmNlKSB7IHRoaW5nLm9mZih0eXBlLCBsaXN0ZW4pOyB9XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB0aGluZztcbiAgICB9O1xuICB9O1xuICByZXR1cm4gdGhpbmc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY3VzdG9tRXZlbnQgPSByZXF1aXJlKCdjdXN0b20tZXZlbnQnKTtcbnZhciBldmVudG1hcCA9IHJlcXVpcmUoJy4vZXZlbnRtYXAnKTtcbnZhciBkb2MgPSBnbG9iYWwuZG9jdW1lbnQ7XG52YXIgYWRkRXZlbnQgPSBhZGRFdmVudEVhc3k7XG52YXIgcmVtb3ZlRXZlbnQgPSByZW1vdmVFdmVudEVhc3k7XG52YXIgaGFyZENhY2hlID0gW107XG5cbmlmICghZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIpIHtcbiAgYWRkRXZlbnQgPSBhZGRFdmVudEhhcmQ7XG4gIHJlbW92ZUV2ZW50ID0gcmVtb3ZlRXZlbnRIYXJkO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgYWRkOiBhZGRFdmVudCxcbiAgcmVtb3ZlOiByZW1vdmVFdmVudCxcbiAgZmFicmljYXRlOiBmYWJyaWNhdGVFdmVudFxufTtcblxuZnVuY3Rpb24gYWRkRXZlbnRFYXN5IChlbCwgdHlwZSwgZm4sIGNhcHR1cmluZykge1xuICByZXR1cm4gZWwuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBmbiwgY2FwdHVyaW5nKTtcbn1cblxuZnVuY3Rpb24gYWRkRXZlbnRIYXJkIChlbCwgdHlwZSwgZm4pIHtcbiAgcmV0dXJuIGVsLmF0dGFjaEV2ZW50KCdvbicgKyB0eXBlLCB3cmFwKGVsLCB0eXBlLCBmbikpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFdmVudEVhc3kgKGVsLCB0eXBlLCBmbiwgY2FwdHVyaW5nKSB7XG4gIHJldHVybiBlbC5yZW1vdmVFdmVudExpc3RlbmVyKHR5cGUsIGZuLCBjYXB0dXJpbmcpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFdmVudEhhcmQgKGVsLCB0eXBlLCBmbikge1xuICB2YXIgbGlzdGVuZXIgPSB1bndyYXAoZWwsIHR5cGUsIGZuKTtcbiAgaWYgKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIGVsLmRldGFjaEV2ZW50KCdvbicgKyB0eXBlLCBsaXN0ZW5lcik7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmFicmljYXRlRXZlbnQgKGVsLCB0eXBlLCBtb2RlbCkge1xuICB2YXIgZSA9IGV2ZW50bWFwLmluZGV4T2YodHlwZSkgPT09IC0xID8gbWFrZUN1c3RvbUV2ZW50KCkgOiBtYWtlQ2xhc3NpY0V2ZW50KCk7XG4gIGlmIChlbC5kaXNwYXRjaEV2ZW50KSB7XG4gICAgZWwuZGlzcGF0Y2hFdmVudChlKTtcbiAgfSBlbHNlIHtcbiAgICBlbC5maXJlRXZlbnQoJ29uJyArIHR5cGUsIGUpO1xuICB9XG4gIGZ1bmN0aW9uIG1ha2VDbGFzc2ljRXZlbnQgKCkge1xuICAgIHZhciBlO1xuICAgIGlmIChkb2MuY3JlYXRlRXZlbnQpIHtcbiAgICAgIGUgPSBkb2MuY3JlYXRlRXZlbnQoJ0V2ZW50Jyk7XG4gICAgICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgICB9IGVsc2UgaWYgKGRvYy5jcmVhdGVFdmVudE9iamVjdCkge1xuICAgICAgZSA9IGRvYy5jcmVhdGVFdmVudE9iamVjdCgpO1xuICAgIH1cbiAgICByZXR1cm4gZTtcbiAgfVxuICBmdW5jdGlvbiBtYWtlQ3VzdG9tRXZlbnQgKCkge1xuICAgIHJldHVybiBuZXcgY3VzdG9tRXZlbnQodHlwZSwgeyBkZXRhaWw6IG1vZGVsIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdyYXBwZXJGYWN0b3J5IChlbCwgdHlwZSwgZm4pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXBwZXIgKG9yaWdpbmFsRXZlbnQpIHtcbiAgICB2YXIgZSA9IG9yaWdpbmFsRXZlbnQgfHwgZ2xvYmFsLmV2ZW50O1xuICAgIGUudGFyZ2V0ID0gZS50YXJnZXQgfHwgZS5zcmNFbGVtZW50O1xuICAgIGUucHJldmVudERlZmF1bHQgPSBlLnByZXZlbnREZWZhdWx0IHx8IGZ1bmN0aW9uIHByZXZlbnREZWZhdWx0ICgpIHsgZS5yZXR1cm5WYWx1ZSA9IGZhbHNlOyB9O1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uID0gZS5zdG9wUHJvcGFnYXRpb24gfHwgZnVuY3Rpb24gc3RvcFByb3BhZ2F0aW9uICgpIHsgZS5jYW5jZWxCdWJibGUgPSB0cnVlOyB9O1xuICAgIGUud2hpY2ggPSBlLndoaWNoIHx8IGUua2V5Q29kZTtcbiAgICBmbi5jYWxsKGVsLCBlKTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gd3JhcCAoZWwsIHR5cGUsIGZuKSB7XG4gIHZhciB3cmFwcGVyID0gdW53cmFwKGVsLCB0eXBlLCBmbikgfHwgd3JhcHBlckZhY3RvcnkoZWwsIHR5cGUsIGZuKTtcbiAgaGFyZENhY2hlLnB1c2goe1xuICAgIHdyYXBwZXI6IHdyYXBwZXIsXG4gICAgZWxlbWVudDogZWwsXG4gICAgdHlwZTogdHlwZSxcbiAgICBmbjogZm5cbiAgfSk7XG4gIHJldHVybiB3cmFwcGVyO1xufVxuXG5mdW5jdGlvbiB1bndyYXAgKGVsLCB0eXBlLCBmbikge1xuICB2YXIgaSA9IGZpbmQoZWwsIHR5cGUsIGZuKTtcbiAgaWYgKGkpIHtcbiAgICB2YXIgd3JhcHBlciA9IGhhcmRDYWNoZVtpXS53cmFwcGVyO1xuICAgIGhhcmRDYWNoZS5zcGxpY2UoaSwgMSk7IC8vIGZyZWUgdXAgYSB0YWQgb2YgbWVtb3J5XG4gICAgcmV0dXJuIHdyYXBwZXI7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZCAoZWwsIHR5cGUsIGZuKSB7XG4gIHZhciBpLCBpdGVtO1xuICBmb3IgKGkgPSAwOyBpIDwgaGFyZENhY2hlLmxlbmd0aDsgaSsrKSB7XG4gICAgaXRlbSA9IGhhcmRDYWNoZVtpXTtcbiAgICBpZiAoaXRlbS5lbGVtZW50ID09PSBlbCAmJiBpdGVtLnR5cGUgPT09IHR5cGUgJiYgaXRlbS5mbiA9PT0gZm4pIHtcbiAgICAgIHJldHVybiBpO1xuICAgIH1cbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZXZlbnRtYXAgPSBbXTtcbnZhciBldmVudG5hbWUgPSAnJztcbnZhciByb24gPSAvXm9uLztcblxuZm9yIChldmVudG5hbWUgaW4gZ2xvYmFsKSB7XG4gIGlmIChyb24udGVzdChldmVudG5hbWUpKSB7XG4gICAgZXZlbnRtYXAucHVzaChldmVudG5hbWUuc2xpY2UoMikpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZXZlbnRtYXA7XG4iLCJcbnZhciBOYXRpdmVDdXN0b21FdmVudCA9IGdsb2JhbC5DdXN0b21FdmVudDtcblxuZnVuY3Rpb24gdXNlTmF0aXZlICgpIHtcbiAgdHJ5IHtcbiAgICB2YXIgcCA9IG5ldyBOYXRpdmVDdXN0b21FdmVudCgnY2F0JywgeyBkZXRhaWw6IHsgZm9vOiAnYmFyJyB9IH0pO1xuICAgIHJldHVybiAgJ2NhdCcgPT09IHAudHlwZSAmJiAnYmFyJyA9PT0gcC5kZXRhaWwuZm9vO1xuICB9IGNhdGNoIChlKSB7XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG4vKipcbiAqIENyb3NzLWJyb3dzZXIgYEN1c3RvbUV2ZW50YCBjb25zdHJ1Y3Rvci5cbiAqXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ3VzdG9tRXZlbnQuQ3VzdG9tRXZlbnRcbiAqXG4gKiBAcHVibGljXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSB1c2VOYXRpdmUoKSA/IE5hdGl2ZUN1c3RvbUV2ZW50IDpcblxuLy8gSUUgPj0gOVxuJ2Z1bmN0aW9uJyA9PT0gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUV2ZW50ID8gZnVuY3Rpb24gQ3VzdG9tRXZlbnQgKHR5cGUsIHBhcmFtcykge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICBpZiAocGFyYW1zKSB7XG4gICAgZS5pbml0Q3VzdG9tRXZlbnQodHlwZSwgcGFyYW1zLmJ1YmJsZXMsIHBhcmFtcy5jYW5jZWxhYmxlLCBwYXJhbXMuZGV0YWlsKTtcbiAgfSBlbHNlIHtcbiAgICBlLmluaXRDdXN0b21FdmVudCh0eXBlLCBmYWxzZSwgZmFsc2UsIHZvaWQgMCk7XG4gIH1cbiAgcmV0dXJuIGU7XG59IDpcblxuLy8gSUUgPD0gOFxuZnVuY3Rpb24gQ3VzdG9tRXZlbnQgKHR5cGUsIHBhcmFtcykge1xuICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50T2JqZWN0KCk7XG4gIGUudHlwZSA9IHR5cGU7XG4gIGlmIChwYXJhbXMpIHtcbiAgICBlLmJ1YmJsZXMgPSBCb29sZWFuKHBhcmFtcy5idWJibGVzKTtcbiAgICBlLmNhbmNlbGFibGUgPSBCb29sZWFuKHBhcmFtcy5jYW5jZWxhYmxlKTtcbiAgICBlLmRldGFpbCA9IHBhcmFtcy5kZXRhaWw7XG4gIH0gZWxzZSB7XG4gICAgZS5idWJibGVzID0gZmFsc2U7XG4gICAgZS5jYW5jZWxhYmxlID0gZmFsc2U7XG4gICAgZS5kZXRhaWwgPSB2b2lkIDA7XG4gIH1cbiAgcmV0dXJuIGU7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBjYWNoZSA9IHt9O1xudmFyIHN0YXJ0ID0gJyg/Ol58XFxcXHMpJztcbnZhciBlbmQgPSAnKD86XFxcXHN8JCknO1xuXG5mdW5jdGlvbiBsb29rdXBDbGFzcyAoY2xhc3NOYW1lKSB7XG4gIHZhciBjYWNoZWQgPSBjYWNoZVtjbGFzc05hbWVdO1xuICBpZiAoY2FjaGVkKSB7XG4gICAgY2FjaGVkLmxhc3RJbmRleCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgY2FjaGVbY2xhc3NOYW1lXSA9IGNhY2hlZCA9IG5ldyBSZWdFeHAoc3RhcnQgKyBjbGFzc05hbWUgKyBlbmQsICdnJyk7XG4gIH1cbiAgcmV0dXJuIGNhY2hlZDtcbn1cblxuZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbGFzc05hbWUpIHtcbiAgdmFyIGN1cnJlbnQgPSBlbC5jbGFzc05hbWU7XG4gIGlmICghY3VycmVudC5sZW5ndGgpIHtcbiAgICBlbC5jbGFzc05hbWUgPSBjbGFzc05hbWU7XG4gIH0gZWxzZSBpZiAoIWxvb2t1cENsYXNzKGNsYXNzTmFtZSkudGVzdChjdXJyZW50KSkge1xuICAgIGVsLmNsYXNzTmFtZSArPSAnICcgKyBjbGFzc05hbWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcm1DbGFzcyAoZWwsIGNsYXNzTmFtZSkge1xuICBlbC5jbGFzc05hbWUgPSBlbC5jbGFzc05hbWUucmVwbGFjZShsb29rdXBDbGFzcyhjbGFzc05hbWUpLCAnICcpLnRyaW0oKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGFkZDogYWRkQ2xhc3MsXG4gIHJtOiBybUNsYXNzXG59O1xuIiwidmFyIGNzcyA9IFwiLmd1LW1pcnJvciB7XFxuICBwb3NpdGlvbjogZml4ZWQhaW1wb3J0YW50O1xcbiAgbWFyZ2luOiAwIWltcG9ydGFudDtcXG4gIHotaW5kZXg6IDk5OTkhaW1wb3J0YW50O1xcbiAgb3BhY2l0eTogLjg7XFxuICAtbXMtZmlsdGVyOiBcXFwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0LkFscGhhKE9wYWNpdHk9ODApXFxcIjtcXG4gIGZpbHRlcjogYWxwaGEob3BhY2l0eT04MCk7XFxufVxcbi5ndS1oaWRlIHtcXG4gIGRpc3BsYXk6IG5vbmUhaW1wb3J0YW50O1xcbn1cXG4uZ3UtdW5zZWxlY3RhYmxlIHtcXG4gIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmUhaW1wb3J0YW50O1xcbiAgLW1vei11c2VyLXNlbGVjdDogbm9uZSFpbXBvcnRhbnQ7XFxuICAtbXMtdXNlci1zZWxlY3Q6IG5vbmUhaW1wb3J0YW50O1xcbiAgdXNlci1zZWxlY3Q6IG5vbmUhaW1wb3J0YW50O1xcbn1cXG4uZ3UtdHJhbnNpdCB7XFxuICBvcGFjaXR5OiAuMjtcXG4gIC1tcy1maWx0ZXI6IFxcXCJwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnQuQWxwaGEoT3BhY2l0eT0yMClcXFwiO1xcbiAgZmlsdGVyOiBhbHBoYShvcGFjaXR5PTIwKTtcXG59XFxuXCI7IChyZXF1aXJlKFwiYnJvd3NlcmlmeS1jc3NcIikuY3JlYXRlU3R5bGUoY3NzLCB7IFwiaHJlZlwiOiBcIm5vZGVfbW9kdWxlc1xcXFxkcmFndWxhXFxcXGRpc3RcXFxcZHJhZ3VsYS5taW4uY3NzXCIgfSwgeyBcImluc2VydEF0XCI6IFwiYm90dG9tXCIgfSkpOyBtb2R1bGUuZXhwb3J0cyA9IGNzczsiLCIndXNlIHN0cmljdCc7XG5cbnZhciBlbWl0dGVyID0gcmVxdWlyZSgnY29udHJhL2VtaXR0ZXInKTtcbnZhciBjcm9zc3ZlbnQgPSByZXF1aXJlKCdjcm9zc3ZlbnQnKTtcbnZhciBjbGFzc2VzID0gcmVxdWlyZSgnLi9jbGFzc2VzJyk7XG52YXIgZG9jID0gZG9jdW1lbnQ7XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jLmRvY3VtZW50RWxlbWVudDtcblxuZnVuY3Rpb24gZHJhZ3VsYSAoaW5pdGlhbENvbnRhaW5lcnMsIG9wdGlvbnMpIHtcbiAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gIGlmIChsZW4gPT09IDEgJiYgQXJyYXkuaXNBcnJheShpbml0aWFsQ29udGFpbmVycykgPT09IGZhbHNlKSB7XG4gICAgb3B0aW9ucyA9IGluaXRpYWxDb250YWluZXJzO1xuICAgIGluaXRpYWxDb250YWluZXJzID0gW107XG4gIH1cbiAgdmFyIF9taXJyb3I7IC8vIG1pcnJvciBpbWFnZVxuICB2YXIgX3NvdXJjZTsgLy8gc291cmNlIGNvbnRhaW5lclxuICB2YXIgX2l0ZW07IC8vIGl0ZW0gYmVpbmcgZHJhZ2dlZFxuICB2YXIgX29mZnNldFg7IC8vIHJlZmVyZW5jZSB4XG4gIHZhciBfb2Zmc2V0WTsgLy8gcmVmZXJlbmNlIHlcbiAgdmFyIF9tb3ZlWDsgLy8gcmVmZXJlbmNlIG1vdmUgeFxuICB2YXIgX21vdmVZOyAvLyByZWZlcmVuY2UgbW92ZSB5XG4gIHZhciBfaW5pdGlhbFNpYmxpbmc7IC8vIHJlZmVyZW5jZSBzaWJsaW5nIHdoZW4gZ3JhYmJlZFxuICB2YXIgX2N1cnJlbnRTaWJsaW5nOyAvLyByZWZlcmVuY2Ugc2libGluZyBub3dcbiAgdmFyIF9jb3B5OyAvLyBpdGVtIHVzZWQgZm9yIGNvcHlpbmdcbiAgdmFyIF9yZW5kZXJUaW1lcjsgLy8gdGltZXIgZm9yIHNldFRpbWVvdXQgcmVuZGVyTWlycm9ySW1hZ2VcbiAgdmFyIF9sYXN0RHJvcFRhcmdldCA9IG51bGw7IC8vIGxhc3QgY29udGFpbmVyIGl0ZW0gd2FzIG92ZXJcbiAgdmFyIF9ncmFiYmVkOyAvLyBob2xkcyBtb3VzZWRvd24gY29udGV4dCB1bnRpbCBmaXJzdCBtb3VzZW1vdmVcblxuICB2YXIgbyA9IG9wdGlvbnMgfHwge307XG4gIGlmIChvLm1vdmVzID09PSB2b2lkIDApIHsgby5tb3ZlcyA9IGFsd2F5czsgfVxuICBpZiAoby5hY2NlcHRzID09PSB2b2lkIDApIHsgby5hY2NlcHRzID0gYWx3YXlzOyB9XG4gIGlmIChvLmludmFsaWQgPT09IHZvaWQgMCkgeyBvLmludmFsaWQgPSBpbnZhbGlkVGFyZ2V0OyB9XG4gIGlmIChvLmNvbnRhaW5lcnMgPT09IHZvaWQgMCkgeyBvLmNvbnRhaW5lcnMgPSBpbml0aWFsQ29udGFpbmVycyB8fCBbXTsgfVxuICBpZiAoby5pc0NvbnRhaW5lciA9PT0gdm9pZCAwKSB7IG8uaXNDb250YWluZXIgPSBuZXZlcjsgfVxuICBpZiAoby5jb3B5ID09PSB2b2lkIDApIHsgby5jb3B5ID0gZmFsc2U7IH1cbiAgaWYgKG8uY29weVNvcnRTb3VyY2UgPT09IHZvaWQgMCkgeyBvLmNvcHlTb3J0U291cmNlID0gZmFsc2U7IH1cbiAgaWYgKG8ucmV2ZXJ0T25TcGlsbCA9PT0gdm9pZCAwKSB7IG8ucmV2ZXJ0T25TcGlsbCA9IGZhbHNlOyB9XG4gIGlmIChvLnJlbW92ZU9uU3BpbGwgPT09IHZvaWQgMCkgeyBvLnJlbW92ZU9uU3BpbGwgPSBmYWxzZTsgfVxuICBpZiAoby5kaXJlY3Rpb24gPT09IHZvaWQgMCkgeyBvLmRpcmVjdGlvbiA9ICd2ZXJ0aWNhbCc7IH1cbiAgaWYgKG8uaWdub3JlSW5wdXRUZXh0U2VsZWN0aW9uID09PSB2b2lkIDApIHsgby5pZ25vcmVJbnB1dFRleHRTZWxlY3Rpb24gPSB0cnVlOyB9XG4gIGlmIChvLm1pcnJvckNvbnRhaW5lciA9PT0gdm9pZCAwKSB7IG8ubWlycm9yQ29udGFpbmVyID0gZG9jLmJvZHk7IH1cblxuICB2YXIgZHJha2UgPSBlbWl0dGVyKHtcbiAgICBjb250YWluZXJzOiBvLmNvbnRhaW5lcnMsXG4gICAgc3RhcnQ6IG1hbnVhbFN0YXJ0LFxuICAgIGVuZDogZW5kLFxuICAgIGNhbmNlbDogY2FuY2VsLFxuICAgIHJlbW92ZTogcmVtb3ZlLFxuICAgIGRlc3Ryb3k6IGRlc3Ryb3ksXG4gICAgY2FuTW92ZTogY2FuTW92ZSxcbiAgICBkcmFnZ2luZzogZmFsc2VcbiAgfSk7XG5cbiAgaWYgKG8ucmVtb3ZlT25TcGlsbCA9PT0gdHJ1ZSkge1xuICAgIGRyYWtlLm9uKCdvdmVyJywgc3BpbGxPdmVyKS5vbignb3V0Jywgc3BpbGxPdXQpO1xuICB9XG5cbiAgZXZlbnRzKCk7XG5cbiAgcmV0dXJuIGRyYWtlO1xuXG4gIGZ1bmN0aW9uIGlzQ29udGFpbmVyIChlbCkge1xuICAgIHJldHVybiBkcmFrZS5jb250YWluZXJzLmluZGV4T2YoZWwpICE9PSAtMSB8fCBvLmlzQ29udGFpbmVyKGVsKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV2ZW50cyAocmVtb3ZlKSB7XG4gICAgdmFyIG9wID0gcmVtb3ZlID8gJ3JlbW92ZScgOiAnYWRkJztcbiAgICB0b3VjaHkoZG9jdW1lbnRFbGVtZW50LCBvcCwgJ21vdXNlZG93bicsIGdyYWIpO1xuICAgIHRvdWNoeShkb2N1bWVudEVsZW1lbnQsIG9wLCAnbW91c2V1cCcsIHJlbGVhc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gZXZlbnR1YWxNb3ZlbWVudHMgKHJlbW92ZSkge1xuICAgIHZhciBvcCA9IHJlbW92ZSA/ICdyZW1vdmUnIDogJ2FkZCc7XG4gICAgdG91Y2h5KGRvY3VtZW50RWxlbWVudCwgb3AsICdtb3VzZW1vdmUnLCBzdGFydEJlY2F1c2VNb3VzZU1vdmVkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG1vdmVtZW50cyAocmVtb3ZlKSB7XG4gICAgdmFyIG9wID0gcmVtb3ZlID8gJ3JlbW92ZScgOiAnYWRkJztcbiAgICBjcm9zc3ZlbnRbb3BdKGRvY3VtZW50RWxlbWVudCwgJ3NlbGVjdHN0YXJ0JywgcHJldmVudEdyYWJiZWQpOyAvLyBJRThcbiAgICBjcm9zc3ZlbnRbb3BdKGRvY3VtZW50RWxlbWVudCwgJ2NsaWNrJywgcHJldmVudEdyYWJiZWQpO1xuICB9XG5cbiAgZnVuY3Rpb24gZGVzdHJveSAoKSB7XG4gICAgZXZlbnRzKHRydWUpO1xuICAgIHJlbGVhc2Uoe30pO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJldmVudEdyYWJiZWQgKGUpIHtcbiAgICBpZiAoX2dyYWJiZWQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBncmFiIChlKSB7XG4gICAgX21vdmVYID0gZS5jbGllbnRYO1xuICAgIF9tb3ZlWSA9IGUuY2xpZW50WTtcblxuICAgIHZhciBpZ25vcmUgPSB3aGljaE1vdXNlQnV0dG9uKGUpICE9PSAxIHx8IGUubWV0YUtleSB8fCBlLmN0cmxLZXk7XG4gICAgaWYgKGlnbm9yZSkge1xuICAgICAgcmV0dXJuOyAvLyB3ZSBvbmx5IGNhcmUgYWJvdXQgaG9uZXN0LXRvLWdvZCBsZWZ0IGNsaWNrcyBhbmQgdG91Y2ggZXZlbnRzXG4gICAgfVxuICAgIHZhciBpdGVtID0gZS50YXJnZXQ7XG4gICAgdmFyIGNvbnRleHQgPSBjYW5TdGFydChpdGVtKTtcbiAgICBpZiAoIWNvbnRleHQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgX2dyYWJiZWQgPSBjb250ZXh0O1xuICAgIGV2ZW50dWFsTW92ZW1lbnRzKCk7XG4gICAgaWYgKGUudHlwZSA9PT0gJ21vdXNlZG93bicpIHtcbiAgICAgIGlmIChpc0lucHV0KGl0ZW0pKSB7IC8vIHNlZSBhbHNvOiBodHRwczovL2dpdGh1Yi5jb20vYmV2YWNxdWEvZHJhZ3VsYS9pc3N1ZXMvMjA4XG4gICAgICAgIGl0ZW0uZm9jdXMoKTsgLy8gZml4ZXMgaHR0cHM6Ly9naXRodWIuY29tL2JldmFjcXVhL2RyYWd1bGEvaXNzdWVzLzE3NlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOyAvLyBmaXhlcyBodHRwczovL2dpdGh1Yi5jb20vYmV2YWNxdWEvZHJhZ3VsYS9pc3N1ZXMvMTU1XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gc3RhcnRCZWNhdXNlTW91c2VNb3ZlZCAoZSkge1xuICAgIGlmICghX2dyYWJiZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHdoaWNoTW91c2VCdXR0b24oZSkgPT09IDApIHtcbiAgICAgIHJlbGVhc2Uoe30pO1xuICAgICAgcmV0dXJuOyAvLyB3aGVuIHRleHQgaXMgc2VsZWN0ZWQgb24gYW4gaW5wdXQgYW5kIHRoZW4gZHJhZ2dlZCwgbW91c2V1cCBkb2Vzbid0IGZpcmUuIHRoaXMgaXMgb3VyIG9ubHkgaG9wZVxuICAgIH1cbiAgICAvLyB0cnV0aHkgY2hlY2sgZml4ZXMgIzIzOSwgZXF1YWxpdHkgZml4ZXMgIzIwN1xuICAgIGlmIChlLmNsaWVudFggIT09IHZvaWQgMCAmJiBlLmNsaWVudFggPT09IF9tb3ZlWCAmJiBlLmNsaWVudFkgIT09IHZvaWQgMCAmJiBlLmNsaWVudFkgPT09IF9tb3ZlWSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoby5pZ25vcmVJbnB1dFRleHRTZWxlY3Rpb24pIHtcbiAgICAgIHZhciBjbGllbnRYID0gZ2V0Q29vcmQoJ2NsaWVudFgnLCBlKTtcbiAgICAgIHZhciBjbGllbnRZID0gZ2V0Q29vcmQoJ2NsaWVudFknLCBlKTtcbiAgICAgIHZhciBlbGVtZW50QmVoaW5kQ3Vyc29yID0gZG9jLmVsZW1lbnRGcm9tUG9pbnQoY2xpZW50WCwgY2xpZW50WSk7XG4gICAgICBpZiAoaXNJbnB1dChlbGVtZW50QmVoaW5kQ3Vyc29yKSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGdyYWJiZWQgPSBfZ3JhYmJlZDsgLy8gY2FsbCB0byBlbmQoKSB1bnNldHMgX2dyYWJiZWRcbiAgICBldmVudHVhbE1vdmVtZW50cyh0cnVlKTtcbiAgICBtb3ZlbWVudHMoKTtcbiAgICBlbmQoKTtcbiAgICBzdGFydChncmFiYmVkKTtcblxuICAgIHZhciBvZmZzZXQgPSBnZXRPZmZzZXQoX2l0ZW0pO1xuICAgIF9vZmZzZXRYID0gZ2V0Q29vcmQoJ3BhZ2VYJywgZSkgLSBvZmZzZXQubGVmdDtcbiAgICBfb2Zmc2V0WSA9IGdldENvb3JkKCdwYWdlWScsIGUpIC0gb2Zmc2V0LnRvcDtcblxuICAgIGNsYXNzZXMuYWRkKF9jb3B5IHx8IF9pdGVtLCAnZ3UtdHJhbnNpdCcpO1xuICAgIHJlbmRlck1pcnJvckltYWdlKCk7XG4gICAgZHJhZyhlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNhblN0YXJ0IChpdGVtKSB7XG4gICAgaWYgKGRyYWtlLmRyYWdnaW5nICYmIF9taXJyb3IpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzQ29udGFpbmVyKGl0ZW0pKSB7XG4gICAgICByZXR1cm47IC8vIGRvbid0IGRyYWcgY29udGFpbmVyIGl0c2VsZlxuICAgIH1cbiAgICB2YXIgaGFuZGxlID0gaXRlbTtcbiAgICB3aGlsZSAoZ2V0UGFyZW50KGl0ZW0pICYmIGlzQ29udGFpbmVyKGdldFBhcmVudChpdGVtKSkgPT09IGZhbHNlKSB7XG4gICAgICBpZiAoby5pbnZhbGlkKGl0ZW0sIGhhbmRsZSkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgaXRlbSA9IGdldFBhcmVudChpdGVtKTsgLy8gZHJhZyB0YXJnZXQgc2hvdWxkIGJlIGEgdG9wIGVsZW1lbnRcbiAgICAgIGlmICghaXRlbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBzb3VyY2UgPSBnZXRQYXJlbnQoaXRlbSk7XG4gICAgaWYgKCFzb3VyY2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKG8uaW52YWxpZChpdGVtLCBoYW5kbGUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG1vdmFibGUgPSBvLm1vdmVzKGl0ZW0sIHNvdXJjZSwgaGFuZGxlLCBuZXh0RWwoaXRlbSkpO1xuICAgIGlmICghbW92YWJsZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBpdGVtOiBpdGVtLFxuICAgICAgc291cmNlOiBzb3VyY2VcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuTW92ZSAoaXRlbSkge1xuICAgIHJldHVybiAhIWNhblN0YXJ0KGl0ZW0pO1xuICB9XG5cbiAgZnVuY3Rpb24gbWFudWFsU3RhcnQgKGl0ZW0pIHtcbiAgICB2YXIgY29udGV4dCA9IGNhblN0YXJ0KGl0ZW0pO1xuICAgIGlmIChjb250ZXh0KSB7XG4gICAgICBzdGFydChjb250ZXh0KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzdGFydCAoY29udGV4dCkge1xuICAgIGlmIChpc0NvcHkoY29udGV4dC5pdGVtLCBjb250ZXh0LnNvdXJjZSkpIHtcbiAgICAgIF9jb3B5ID0gY29udGV4dC5pdGVtLmNsb25lTm9kZSh0cnVlKTtcbiAgICAgIGRyYWtlLmVtaXQoJ2Nsb25lZCcsIF9jb3B5LCBjb250ZXh0Lml0ZW0sICdjb3B5Jyk7XG4gICAgfVxuXG4gICAgX3NvdXJjZSA9IGNvbnRleHQuc291cmNlO1xuICAgIF9pdGVtID0gY29udGV4dC5pdGVtO1xuICAgIF9pbml0aWFsU2libGluZyA9IF9jdXJyZW50U2libGluZyA9IG5leHRFbChjb250ZXh0Lml0ZW0pO1xuXG4gICAgZHJha2UuZHJhZ2dpbmcgPSB0cnVlO1xuICAgIGRyYWtlLmVtaXQoJ2RyYWcnLCBfaXRlbSwgX3NvdXJjZSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZhbGlkVGFyZ2V0ICgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBmdW5jdGlvbiBlbmQgKCkge1xuICAgIGlmICghZHJha2UuZHJhZ2dpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGl0ZW0gPSBfY29weSB8fCBfaXRlbTtcbiAgICBkcm9wKGl0ZW0sIGdldFBhcmVudChpdGVtKSk7XG4gIH1cblxuICBmdW5jdGlvbiB1bmdyYWIgKCkge1xuICAgIF9ncmFiYmVkID0gZmFsc2U7XG4gICAgZXZlbnR1YWxNb3ZlbWVudHModHJ1ZSk7XG4gICAgbW92ZW1lbnRzKHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVsZWFzZSAoZSkge1xuICAgIHVuZ3JhYigpO1xuXG4gICAgaWYgKCFkcmFrZS5kcmFnZ2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgaXRlbSA9IF9jb3B5IHx8IF9pdGVtO1xuICAgIHZhciBjbGllbnRYID0gZ2V0Q29vcmQoJ2NsaWVudFgnLCBlKTtcbiAgICB2YXIgY2xpZW50WSA9IGdldENvb3JkKCdjbGllbnRZJywgZSk7XG4gICAgdmFyIGVsZW1lbnRCZWhpbmRDdXJzb3IgPSBnZXRFbGVtZW50QmVoaW5kUG9pbnQoX21pcnJvciwgY2xpZW50WCwgY2xpZW50WSk7XG4gICAgdmFyIGRyb3BUYXJnZXQgPSBmaW5kRHJvcFRhcmdldChlbGVtZW50QmVoaW5kQ3Vyc29yLCBjbGllbnRYLCBjbGllbnRZKTtcbiAgICBpZiAoZHJvcFRhcmdldCAmJiAoKF9jb3B5ICYmIG8uY29weVNvcnRTb3VyY2UpIHx8ICghX2NvcHkgfHwgZHJvcFRhcmdldCAhPT0gX3NvdXJjZSkpKSB7XG4gICAgICBkcm9wKGl0ZW0sIGRyb3BUYXJnZXQpO1xuICAgIH0gZWxzZSBpZiAoby5yZW1vdmVPblNwaWxsKSB7XG4gICAgICByZW1vdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FuY2VsKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZHJvcCAoaXRlbSwgdGFyZ2V0KSB7XG4gICAgdmFyIHBhcmVudCA9IGdldFBhcmVudChpdGVtKTtcbiAgICBpZiAoX2NvcHkgJiYgby5jb3B5U29ydFNvdXJjZSAmJiB0YXJnZXQgPT09IF9zb3VyY2UpIHtcbiAgICAgIHBhcmVudC5yZW1vdmVDaGlsZChfaXRlbSk7XG4gICAgfVxuICAgIGlmIChpc0luaXRpYWxQbGFjZW1lbnQodGFyZ2V0KSkge1xuICAgICAgZHJha2UuZW1pdCgnY2FuY2VsJywgaXRlbSwgX3NvdXJjZSwgX3NvdXJjZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRyYWtlLmVtaXQoJ2Ryb3AnLCBpdGVtLCB0YXJnZXQsIF9zb3VyY2UsIF9jdXJyZW50U2libGluZyk7XG4gICAgfVxuICAgIGNsZWFudXAoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZSAoKSB7XG4gICAgaWYgKCFkcmFrZS5kcmFnZ2luZykge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgaXRlbSA9IF9jb3B5IHx8IF9pdGVtO1xuICAgIHZhciBwYXJlbnQgPSBnZXRQYXJlbnQoaXRlbSk7XG4gICAgaWYgKHBhcmVudCkge1xuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGl0ZW0pO1xuICAgIH1cbiAgICBkcmFrZS5lbWl0KF9jb3B5ID8gJ2NhbmNlbCcgOiAncmVtb3ZlJywgaXRlbSwgcGFyZW50LCBfc291cmNlKTtcbiAgICBjbGVhbnVwKCk7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwgKHJldmVydCkge1xuICAgIGlmICghZHJha2UuZHJhZ2dpbmcpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHJldmVydHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCA/IHJldmVydCA6IG8ucmV2ZXJ0T25TcGlsbDtcbiAgICB2YXIgaXRlbSA9IF9jb3B5IHx8IF9pdGVtO1xuICAgIHZhciBwYXJlbnQgPSBnZXRQYXJlbnQoaXRlbSk7XG4gICAgdmFyIGluaXRpYWwgPSBpc0luaXRpYWxQbGFjZW1lbnQocGFyZW50KTtcbiAgICBpZiAoaW5pdGlhbCA9PT0gZmFsc2UgJiYgcmV2ZXJ0cykge1xuICAgICAgaWYgKF9jb3B5KSB7XG4gICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoX2NvcHkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfc291cmNlLmluc2VydEJlZm9yZShpdGVtLCBfaW5pdGlhbFNpYmxpbmcpO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaW5pdGlhbCB8fCByZXZlcnRzKSB7XG4gICAgICBkcmFrZS5lbWl0KCdjYW5jZWwnLCBpdGVtLCBfc291cmNlLCBfc291cmNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZHJha2UuZW1pdCgnZHJvcCcsIGl0ZW0sIHBhcmVudCwgX3NvdXJjZSwgX2N1cnJlbnRTaWJsaW5nKTtcbiAgICB9XG4gICAgY2xlYW51cCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2xlYW51cCAoKSB7XG4gICAgdmFyIGl0ZW0gPSBfY29weSB8fCBfaXRlbTtcbiAgICB1bmdyYWIoKTtcbiAgICByZW1vdmVNaXJyb3JJbWFnZSgpO1xuICAgIGlmIChpdGVtKSB7XG4gICAgICBjbGFzc2VzLnJtKGl0ZW0sICdndS10cmFuc2l0Jyk7XG4gICAgfVxuICAgIGlmIChfcmVuZGVyVGltZXIpIHtcbiAgICAgIGNsZWFyVGltZW91dChfcmVuZGVyVGltZXIpO1xuICAgIH1cbiAgICBkcmFrZS5kcmFnZ2luZyA9IGZhbHNlO1xuICAgIGlmIChfbGFzdERyb3BUYXJnZXQpIHtcbiAgICAgIGRyYWtlLmVtaXQoJ291dCcsIGl0ZW0sIF9sYXN0RHJvcFRhcmdldCwgX3NvdXJjZSk7XG4gICAgfVxuICAgIGRyYWtlLmVtaXQoJ2RyYWdlbmQnLCBpdGVtKTtcbiAgICBfc291cmNlID0gX2l0ZW0gPSBfY29weSA9IF9pbml0aWFsU2libGluZyA9IF9jdXJyZW50U2libGluZyA9IF9yZW5kZXJUaW1lciA9IF9sYXN0RHJvcFRhcmdldCA9IG51bGw7XG4gIH1cblxuICBmdW5jdGlvbiBpc0luaXRpYWxQbGFjZW1lbnQgKHRhcmdldCwgcykge1xuICAgIHZhciBzaWJsaW5nO1xuICAgIGlmIChzICE9PSB2b2lkIDApIHtcbiAgICAgIHNpYmxpbmcgPSBzO1xuICAgIH0gZWxzZSBpZiAoX21pcnJvcikge1xuICAgICAgc2libGluZyA9IF9jdXJyZW50U2libGluZztcbiAgICB9IGVsc2Uge1xuICAgICAgc2libGluZyA9IG5leHRFbChfY29weSB8fCBfaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiB0YXJnZXQgPT09IF9zb3VyY2UgJiYgc2libGluZyA9PT0gX2luaXRpYWxTaWJsaW5nO1xuICB9XG5cbiAgZnVuY3Rpb24gZmluZERyb3BUYXJnZXQgKGVsZW1lbnRCZWhpbmRDdXJzb3IsIGNsaWVudFgsIGNsaWVudFkpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZWxlbWVudEJlaGluZEN1cnNvcjtcbiAgICB3aGlsZSAodGFyZ2V0ICYmICFhY2NlcHRlZCgpKSB7XG4gICAgICB0YXJnZXQgPSBnZXRQYXJlbnQodGFyZ2V0KTtcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldDtcblxuICAgIGZ1bmN0aW9uIGFjY2VwdGVkICgpIHtcbiAgICAgIHZhciBkcm9wcGFibGUgPSBpc0NvbnRhaW5lcih0YXJnZXQpO1xuICAgICAgaWYgKGRyb3BwYWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICB2YXIgaW1tZWRpYXRlID0gZ2V0SW1tZWRpYXRlQ2hpbGQodGFyZ2V0LCBlbGVtZW50QmVoaW5kQ3Vyc29yKTtcbiAgICAgIHZhciByZWZlcmVuY2UgPSBnZXRSZWZlcmVuY2UodGFyZ2V0LCBpbW1lZGlhdGUsIGNsaWVudFgsIGNsaWVudFkpO1xuICAgICAgdmFyIGluaXRpYWwgPSBpc0luaXRpYWxQbGFjZW1lbnQodGFyZ2V0LCByZWZlcmVuY2UpO1xuICAgICAgaWYgKGluaXRpYWwpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7IC8vIHNob3VsZCBhbHdheXMgYmUgYWJsZSB0byBkcm9wIGl0IHJpZ2h0IGJhY2sgd2hlcmUgaXQgd2FzXG4gICAgICB9XG4gICAgICByZXR1cm4gby5hY2NlcHRzKF9pdGVtLCB0YXJnZXQsIF9zb3VyY2UsIHJlZmVyZW5jZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZHJhZyAoZSkge1xuICAgIGlmICghX21pcnJvcikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICB2YXIgY2xpZW50WCA9IGdldENvb3JkKCdjbGllbnRYJywgZSk7XG4gICAgdmFyIGNsaWVudFkgPSBnZXRDb29yZCgnY2xpZW50WScsIGUpO1xuICAgIHZhciB4ID0gY2xpZW50WCAtIF9vZmZzZXRYO1xuICAgIHZhciB5ID0gY2xpZW50WSAtIF9vZmZzZXRZO1xuXG4gICAgX21pcnJvci5zdHlsZS5sZWZ0ID0geCArICdweCc7XG4gICAgX21pcnJvci5zdHlsZS50b3AgPSB5ICsgJ3B4JztcblxuICAgIHZhciBpdGVtID0gX2NvcHkgfHwgX2l0ZW07XG4gICAgdmFyIGVsZW1lbnRCZWhpbmRDdXJzb3IgPSBnZXRFbGVtZW50QmVoaW5kUG9pbnQoX21pcnJvciwgY2xpZW50WCwgY2xpZW50WSk7XG4gICAgdmFyIGRyb3BUYXJnZXQgPSBmaW5kRHJvcFRhcmdldChlbGVtZW50QmVoaW5kQ3Vyc29yLCBjbGllbnRYLCBjbGllbnRZKTtcbiAgICB2YXIgY2hhbmdlZCA9IGRyb3BUYXJnZXQgIT09IG51bGwgJiYgZHJvcFRhcmdldCAhPT0gX2xhc3REcm9wVGFyZ2V0O1xuICAgIGlmIChjaGFuZ2VkIHx8IGRyb3BUYXJnZXQgPT09IG51bGwpIHtcbiAgICAgIG91dCgpO1xuICAgICAgX2xhc3REcm9wVGFyZ2V0ID0gZHJvcFRhcmdldDtcbiAgICAgIG92ZXIoKTtcbiAgICB9XG4gICAgdmFyIHBhcmVudCA9IGdldFBhcmVudChpdGVtKTtcbiAgICBpZiAoZHJvcFRhcmdldCA9PT0gX3NvdXJjZSAmJiBfY29weSAmJiAhby5jb3B5U29ydFNvdXJjZSkge1xuICAgICAgaWYgKHBhcmVudCkge1xuICAgICAgICBwYXJlbnQucmVtb3ZlQ2hpbGQoaXRlbSk7XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciByZWZlcmVuY2U7XG4gICAgdmFyIGltbWVkaWF0ZSA9IGdldEltbWVkaWF0ZUNoaWxkKGRyb3BUYXJnZXQsIGVsZW1lbnRCZWhpbmRDdXJzb3IpO1xuICAgIGlmIChpbW1lZGlhdGUgIT09IG51bGwpIHtcbiAgICAgIHJlZmVyZW5jZSA9IGdldFJlZmVyZW5jZShkcm9wVGFyZ2V0LCBpbW1lZGlhdGUsIGNsaWVudFgsIGNsaWVudFkpO1xuICAgIH0gZWxzZSBpZiAoby5yZXZlcnRPblNwaWxsID09PSB0cnVlICYmICFfY29weSkge1xuICAgICAgcmVmZXJlbmNlID0gX2luaXRpYWxTaWJsaW5nO1xuICAgICAgZHJvcFRhcmdldCA9IF9zb3VyY2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChfY29weSAmJiBwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKGl0ZW0pO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAocmVmZXJlbmNlID09PSBudWxsICYmIGNoYW5nZWQpIHx8XG4gICAgICByZWZlcmVuY2UgIT09IGl0ZW0gJiZcbiAgICAgIHJlZmVyZW5jZSAhPT0gbmV4dEVsKGl0ZW0pXG4gICAgKSB7XG4gICAgICBfY3VycmVudFNpYmxpbmcgPSByZWZlcmVuY2U7XG4gICAgICBkcm9wVGFyZ2V0Lmluc2VydEJlZm9yZShpdGVtLCByZWZlcmVuY2UpO1xuICAgICAgZHJha2UuZW1pdCgnc2hhZG93JywgaXRlbSwgZHJvcFRhcmdldCwgX3NvdXJjZSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIG1vdmVkICh0eXBlKSB7IGRyYWtlLmVtaXQodHlwZSwgaXRlbSwgX2xhc3REcm9wVGFyZ2V0LCBfc291cmNlKTsgfVxuICAgIGZ1bmN0aW9uIG92ZXIgKCkgeyBpZiAoY2hhbmdlZCkgeyBtb3ZlZCgnb3ZlcicpOyB9IH1cbiAgICBmdW5jdGlvbiBvdXQgKCkgeyBpZiAoX2xhc3REcm9wVGFyZ2V0KSB7IG1vdmVkKCdvdXQnKTsgfSB9XG4gIH1cblxuICBmdW5jdGlvbiBzcGlsbE92ZXIgKGVsKSB7XG4gICAgY2xhc3Nlcy5ybShlbCwgJ2d1LWhpZGUnKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNwaWxsT3V0IChlbCkge1xuICAgIGlmIChkcmFrZS5kcmFnZ2luZykgeyBjbGFzc2VzLmFkZChlbCwgJ2d1LWhpZGUnKTsgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVuZGVyTWlycm9ySW1hZ2UgKCkge1xuICAgIGlmIChfbWlycm9yKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciByZWN0ID0gX2l0ZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgX21pcnJvciA9IF9pdGVtLmNsb25lTm9kZSh0cnVlKTtcbiAgICBfbWlycm9yLnN0eWxlLndpZHRoID0gZ2V0UmVjdFdpZHRoKHJlY3QpICsgJ3B4JztcbiAgICBfbWlycm9yLnN0eWxlLmhlaWdodCA9IGdldFJlY3RIZWlnaHQocmVjdCkgKyAncHgnO1xuICAgIGNsYXNzZXMucm0oX21pcnJvciwgJ2d1LXRyYW5zaXQnKTtcbiAgICBjbGFzc2VzLmFkZChfbWlycm9yLCAnZ3UtbWlycm9yJyk7XG4gICAgby5taXJyb3JDb250YWluZXIuYXBwZW5kQ2hpbGQoX21pcnJvcik7XG4gICAgdG91Y2h5KGRvY3VtZW50RWxlbWVudCwgJ2FkZCcsICdtb3VzZW1vdmUnLCBkcmFnKTtcbiAgICBjbGFzc2VzLmFkZChvLm1pcnJvckNvbnRhaW5lciwgJ2d1LXVuc2VsZWN0YWJsZScpO1xuICAgIGRyYWtlLmVtaXQoJ2Nsb25lZCcsIF9taXJyb3IsIF9pdGVtLCAnbWlycm9yJyk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVNaXJyb3JJbWFnZSAoKSB7XG4gICAgaWYgKF9taXJyb3IpIHtcbiAgICAgIGNsYXNzZXMucm0oby5taXJyb3JDb250YWluZXIsICdndS11bnNlbGVjdGFibGUnKTtcbiAgICAgIHRvdWNoeShkb2N1bWVudEVsZW1lbnQsICdyZW1vdmUnLCAnbW91c2Vtb3ZlJywgZHJhZyk7XG4gICAgICBnZXRQYXJlbnQoX21pcnJvcikucmVtb3ZlQ2hpbGQoX21pcnJvcik7XG4gICAgICBfbWlycm9yID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRJbW1lZGlhdGVDaGlsZCAoZHJvcFRhcmdldCwgdGFyZ2V0KSB7XG4gICAgdmFyIGltbWVkaWF0ZSA9IHRhcmdldDtcbiAgICB3aGlsZSAoaW1tZWRpYXRlICE9PSBkcm9wVGFyZ2V0ICYmIGdldFBhcmVudChpbW1lZGlhdGUpICE9PSBkcm9wVGFyZ2V0KSB7XG4gICAgICBpbW1lZGlhdGUgPSBnZXRQYXJlbnQoaW1tZWRpYXRlKTtcbiAgICB9XG4gICAgaWYgKGltbWVkaWF0ZSA9PT0gZG9jdW1lbnRFbGVtZW50KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgcmV0dXJuIGltbWVkaWF0ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJlZmVyZW5jZSAoZHJvcFRhcmdldCwgdGFyZ2V0LCB4LCB5KSB7XG4gICAgdmFyIGhvcml6b250YWwgPSBvLmRpcmVjdGlvbiA9PT0gJ2hvcml6b250YWwnO1xuICAgIHZhciByZWZlcmVuY2UgPSB0YXJnZXQgIT09IGRyb3BUYXJnZXQgPyBpbnNpZGUoKSA6IG91dHNpZGUoKTtcbiAgICByZXR1cm4gcmVmZXJlbmNlO1xuXG4gICAgZnVuY3Rpb24gb3V0c2lkZSAoKSB7IC8vIHNsb3dlciwgYnV0IGFibGUgdG8gZmlndXJlIG91dCBhbnkgcG9zaXRpb25cbiAgICAgIHZhciBsZW4gPSBkcm9wVGFyZ2V0LmNoaWxkcmVuLmxlbmd0aDtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIGVsO1xuICAgICAgdmFyIHJlY3Q7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgZWwgPSBkcm9wVGFyZ2V0LmNoaWxkcmVuW2ldO1xuICAgICAgICByZWN0ID0gZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIGlmIChob3Jpem9udGFsICYmIChyZWN0LmxlZnQgKyByZWN0LndpZHRoIC8gMikgPiB4KSB7IHJldHVybiBlbDsgfVxuICAgICAgICBpZiAoIWhvcml6b250YWwgJiYgKHJlY3QudG9wICsgcmVjdC5oZWlnaHQgLyAyKSA+IHkpIHsgcmV0dXJuIGVsOyB9XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnNpZGUgKCkgeyAvLyBmYXN0ZXIsIGJ1dCBvbmx5IGF2YWlsYWJsZSBpZiBkcm9wcGVkIGluc2lkZSBhIGNoaWxkIGVsZW1lbnRcbiAgICAgIHZhciByZWN0ID0gdGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgaWYgKGhvcml6b250YWwpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmUoeCA+IHJlY3QubGVmdCArIGdldFJlY3RXaWR0aChyZWN0KSAvIDIpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc29sdmUoeSA+IHJlY3QudG9wICsgZ2V0UmVjdEhlaWdodChyZWN0KSAvIDIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlc29sdmUgKGFmdGVyKSB7XG4gICAgICByZXR1cm4gYWZ0ZXIgPyBuZXh0RWwodGFyZ2V0KSA6IHRhcmdldDtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc0NvcHkgKGl0ZW0sIGNvbnRhaW5lcikge1xuICAgIHJldHVybiB0eXBlb2Ygby5jb3B5ID09PSAnYm9vbGVhbicgPyBvLmNvcHkgOiBvLmNvcHkoaXRlbSwgY29udGFpbmVyKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0b3VjaHkgKGVsLCBvcCwgdHlwZSwgZm4pIHtcbiAgdmFyIHRvdWNoID0ge1xuICAgIG1vdXNldXA6ICd0b3VjaGVuZCcsXG4gICAgbW91c2Vkb3duOiAndG91Y2hzdGFydCcsXG4gICAgbW91c2Vtb3ZlOiAndG91Y2htb3ZlJ1xuICB9O1xuICB2YXIgcG9pbnRlcnMgPSB7XG4gICAgbW91c2V1cDogJ3BvaW50ZXJ1cCcsXG4gICAgbW91c2Vkb3duOiAncG9pbnRlcmRvd24nLFxuICAgIG1vdXNlbW92ZTogJ3BvaW50ZXJtb3ZlJ1xuICB9O1xuICB2YXIgbWljcm9zb2Z0ID0ge1xuICAgIG1vdXNldXA6ICdNU1BvaW50ZXJVcCcsXG4gICAgbW91c2Vkb3duOiAnTVNQb2ludGVyRG93bicsXG4gICAgbW91c2Vtb3ZlOiAnTVNQb2ludGVyTW92ZSdcbiAgfTtcbiAgaWYgKGdsb2JhbC5uYXZpZ2F0b3IucG9pbnRlckVuYWJsZWQpIHtcbiAgICBjcm9zc3ZlbnRbb3BdKGVsLCBwb2ludGVyc1t0eXBlXSwgZm4pO1xuICB9IGVsc2UgaWYgKGdsb2JhbC5uYXZpZ2F0b3IubXNQb2ludGVyRW5hYmxlZCkge1xuICAgIGNyb3NzdmVudFtvcF0oZWwsIG1pY3Jvc29mdFt0eXBlXSwgZm4pO1xuICB9IGVsc2Uge1xuICAgIGNyb3NzdmVudFtvcF0oZWwsIHRvdWNoW3R5cGVdLCBmbik7XG4gICAgY3Jvc3N2ZW50W29wXShlbCwgdHlwZSwgZm4pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdoaWNoTW91c2VCdXR0b24gKGUpIHtcbiAgaWYgKGUudG91Y2hlcyAhPT0gdm9pZCAwKSB7IHJldHVybiBlLnRvdWNoZXMubGVuZ3RoOyB9XG4gIGlmIChlLndoaWNoICE9PSB2b2lkIDAgJiYgZS53aGljaCAhPT0gMCkgeyByZXR1cm4gZS53aGljaDsgfSAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2JldmFjcXVhL2RyYWd1bGEvaXNzdWVzLzI2MVxuICBpZiAoZS5idXR0b25zICE9PSB2b2lkIDApIHsgcmV0dXJuIGUuYnV0dG9uczsgfVxuICB2YXIgYnV0dG9uID0gZS5idXR0b247XG4gIGlmIChidXR0b24gIT09IHZvaWQgMCkgeyAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9qcXVlcnkvYmxvYi85OWU4ZmYxYmFhN2FlMzQxZTk0YmI4OWMzZTg0NTcwYzdjM2FkOWVhL3NyYy9ldmVudC5qcyNMNTczLUw1NzVcbiAgICByZXR1cm4gYnV0dG9uICYgMSA/IDEgOiBidXR0b24gJiAyID8gMyA6IChidXR0b24gJiA0ID8gMiA6IDApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE9mZnNldCAoZWwpIHtcbiAgdmFyIHJlY3QgPSBlbC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgcmV0dXJuIHtcbiAgICBsZWZ0OiByZWN0LmxlZnQgKyBnZXRTY3JvbGwoJ3Njcm9sbExlZnQnLCAncGFnZVhPZmZzZXQnKSxcbiAgICB0b3A6IHJlY3QudG9wICsgZ2V0U2Nyb2xsKCdzY3JvbGxUb3AnLCAncGFnZVlPZmZzZXQnKVxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRTY3JvbGwgKHNjcm9sbFByb3AsIG9mZnNldFByb3ApIHtcbiAgaWYgKHR5cGVvZiBnbG9iYWxbb2Zmc2V0UHJvcF0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGdsb2JhbFtvZmZzZXRQcm9wXTtcbiAgfVxuICBpZiAoZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCkge1xuICAgIHJldHVybiBkb2N1bWVudEVsZW1lbnRbc2Nyb2xsUHJvcF07XG4gIH1cbiAgcmV0dXJuIGRvYy5ib2R5W3Njcm9sbFByb3BdO1xufVxuXG5mdW5jdGlvbiBnZXRFbGVtZW50QmVoaW5kUG9pbnQgKHBvaW50LCB4LCB5KSB7XG4gIHZhciBwID0gcG9pbnQgfHwge307XG4gIHZhciBzdGF0ZSA9IHAuY2xhc3NOYW1lO1xuICB2YXIgZWw7XG4gIHAuY2xhc3NOYW1lICs9ICcgZ3UtaGlkZSc7XG4gIGVsID0gZG9jLmVsZW1lbnRGcm9tUG9pbnQoeCwgeSk7XG4gIHAuY2xhc3NOYW1lID0gc3RhdGU7XG4gIHJldHVybiBlbDtcbn1cblxuZnVuY3Rpb24gbmV2ZXIgKCkgeyByZXR1cm4gZmFsc2U7IH1cbmZ1bmN0aW9uIGFsd2F5cyAoKSB7IHJldHVybiB0cnVlOyB9XG5mdW5jdGlvbiBnZXRSZWN0V2lkdGggKHJlY3QpIHsgcmV0dXJuIHJlY3Qud2lkdGggfHwgKHJlY3QucmlnaHQgLSByZWN0LmxlZnQpOyB9XG5mdW5jdGlvbiBnZXRSZWN0SGVpZ2h0IChyZWN0KSB7IHJldHVybiByZWN0LmhlaWdodCB8fCAocmVjdC5ib3R0b20gLSByZWN0LnRvcCk7IH1cbmZ1bmN0aW9uIGdldFBhcmVudCAoZWwpIHsgcmV0dXJuIGVsLnBhcmVudE5vZGUgPT09IGRvYyA/IG51bGwgOiBlbC5wYXJlbnROb2RlOyB9XG5mdW5jdGlvbiBpc0lucHV0IChlbCkgeyByZXR1cm4gZWwudGFnTmFtZSA9PT0gJ0lOUFVUJyB8fCBlbC50YWdOYW1lID09PSAnVEVYVEFSRUEnIHx8IGVsLnRhZ05hbWUgPT09ICdTRUxFQ1QnIHx8IGlzRWRpdGFibGUoZWwpOyB9XG5mdW5jdGlvbiBpc0VkaXRhYmxlIChlbCkge1xuICBpZiAoIWVsKSB7IHJldHVybiBmYWxzZTsgfSAvLyBubyBwYXJlbnRzIHdlcmUgZWRpdGFibGVcbiAgaWYgKGVsLmNvbnRlbnRFZGl0YWJsZSA9PT0gJ2ZhbHNlJykgeyByZXR1cm4gZmFsc2U7IH0gLy8gc3RvcCB0aGUgbG9va3VwXG4gIGlmIChlbC5jb250ZW50RWRpdGFibGUgPT09ICd0cnVlJykgeyByZXR1cm4gdHJ1ZTsgfSAvLyBmb3VuZCBhIGNvbnRlbnRFZGl0YWJsZSBlbGVtZW50IGluIHRoZSBjaGFpblxuICByZXR1cm4gaXNFZGl0YWJsZShnZXRQYXJlbnQoZWwpKTsgLy8gY29udGVudEVkaXRhYmxlIGlzIHNldCB0byAnaW5oZXJpdCdcbn1cblxuZnVuY3Rpb24gbmV4dEVsIChlbCkge1xuICByZXR1cm4gZWwubmV4dEVsZW1lbnRTaWJsaW5nIHx8IG1hbnVhbGx5KCk7XG4gIGZ1bmN0aW9uIG1hbnVhbGx5ICgpIHtcbiAgICB2YXIgc2libGluZyA9IGVsO1xuICAgIGRvIHtcbiAgICAgIHNpYmxpbmcgPSBzaWJsaW5nLm5leHRTaWJsaW5nO1xuICAgIH0gd2hpbGUgKHNpYmxpbmcgJiYgc2libGluZy5ub2RlVHlwZSAhPT0gMSk7XG4gICAgcmV0dXJuIHNpYmxpbmc7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0RXZlbnRIb3N0IChlKSB7XG4gIC8vIG9uIHRvdWNoZW5kIGV2ZW50LCB3ZSBoYXZlIHRvIHVzZSBgZS5jaGFuZ2VkVG91Y2hlc2BcbiAgLy8gc2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNzE5MjU2My90b3VjaGVuZC1ldmVudC1wcm9wZXJ0aWVzXG4gIC8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vYmV2YWNxdWEvZHJhZ3VsYS9pc3N1ZXMvMzRcbiAgaWYgKGUudGFyZ2V0VG91Y2hlcyAmJiBlLnRhcmdldFRvdWNoZXMubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGUudGFyZ2V0VG91Y2hlc1swXTtcbiAgfVxuICBpZiAoZS5jaGFuZ2VkVG91Y2hlcyAmJiBlLmNoYW5nZWRUb3VjaGVzLmxlbmd0aCkge1xuICAgIHJldHVybiBlLmNoYW5nZWRUb3VjaGVzWzBdO1xuICB9XG4gIHJldHVybiBlO1xufVxuXG5mdW5jdGlvbiBnZXRDb29yZCAoY29vcmQsIGUpIHtcbiAgdmFyIGhvc3QgPSBnZXRFdmVudEhvc3QoZSk7XG4gIHZhciBtaXNzTWFwID0ge1xuICAgIHBhZ2VYOiAnY2xpZW50WCcsIC8vIElFOFxuICAgIHBhZ2VZOiAnY2xpZW50WScgLy8gSUU4XG4gIH07XG4gIGlmIChjb29yZCBpbiBtaXNzTWFwICYmICEoY29vcmQgaW4gaG9zdCkgJiYgbWlzc01hcFtjb29yZF0gaW4gaG9zdCkge1xuICAgIGNvb3JkID0gbWlzc01hcFtjb29yZF07XG4gIH1cbiAgcmV0dXJuIGhvc3RbY29vcmRdO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRyYWd1bGE7XG4iLCIvLyBzaGltIGZvciB1c2luZyBwcm9jZXNzIGluIGJyb3dzZXJcbnZhciBwcm9jZXNzID0gbW9kdWxlLmV4cG9ydHMgPSB7fTtcblxuLy8gY2FjaGVkIGZyb20gd2hhdGV2ZXIgZ2xvYmFsIGlzIHByZXNlbnQgc28gdGhhdCB0ZXN0IHJ1bm5lcnMgdGhhdCBzdHViIGl0XG4vLyBkb24ndCBicmVhayB0aGluZ3MuICBCdXQgd2UgbmVlZCB0byB3cmFwIGl0IGluIGEgdHJ5IGNhdGNoIGluIGNhc2UgaXQgaXNcbi8vIHdyYXBwZWQgaW4gc3RyaWN0IG1vZGUgY29kZSB3aGljaCBkb2Vzbid0IGRlZmluZSBhbnkgZ2xvYmFscy4gIEl0J3MgaW5zaWRlIGFcbi8vIGZ1bmN0aW9uIGJlY2F1c2UgdHJ5L2NhdGNoZXMgZGVvcHRpbWl6ZSBpbiBjZXJ0YWluIGVuZ2luZXMuXG5cbnZhciBjYWNoZWRTZXRUaW1lb3V0O1xudmFyIGNhY2hlZENsZWFyVGltZW91dDtcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG4oZnVuY3Rpb24gKCkge1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgY2xlYXJUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBkZWZhdWx0Q2xlYXJUaW1lb3V0O1xuICAgIH1cbn0gKCkpXG5mdW5jdGlvbiBydW5UaW1lb3V0KGZ1bikge1xuICAgIGlmIChjYWNoZWRTZXRUaW1lb3V0ID09PSBzZXRUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICAvLyBpZiBzZXRUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkU2V0VGltZW91dCA9PT0gZGVmYXVsdFNldFRpbW91dCB8fCAhY2FjaGVkU2V0VGltZW91dCkgJiYgc2V0VGltZW91dCkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dChmdW4sIDApO1xuICAgIH0gY2F0Y2goZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwobnVsbCwgZnVuLCAwKTtcbiAgICAgICAgfSBjYXRjaChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yXG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKHRoaXMsIGZ1biwgMCk7XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuZnVuY3Rpb24gcnVuQ2xlYXJUaW1lb3V0KG1hcmtlcikge1xuICAgIGlmIChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGNsZWFyVGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICAvLyBpZiBjbGVhclRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRDbGVhclRpbWVvdXQgPT09IGRlZmF1bHRDbGVhclRpbWVvdXQgfHwgIWNhY2hlZENsZWFyVGltZW91dCkgJiYgY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgcmV0dXJuIGNsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCAgdHJ1c3QgdGhlIGdsb2JhbCBvYmplY3Qgd2hlbiBjYWxsZWQgbm9ybWFsbHlcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbChudWxsLCBtYXJrZXIpO1xuICAgICAgICB9IGNhdGNoIChlKXtcbiAgICAgICAgICAgIC8vIHNhbWUgYXMgYWJvdmUgYnV0IHdoZW4gaXQncyBhIHZlcnNpb24gb2YgSS5FLiB0aGF0IG11c3QgaGF2ZSB0aGUgZ2xvYmFsIG9iamVjdCBmb3IgJ3RoaXMnLCBob3BmdWxseSBvdXIgY29udGV4dCBjb3JyZWN0IG90aGVyd2lzZSBpdCB3aWxsIHRocm93IGEgZ2xvYmFsIGVycm9yLlxuICAgICAgICAgICAgLy8gU29tZSB2ZXJzaW9ucyBvZiBJLkUuIGhhdmUgZGlmZmVyZW50IHJ1bGVzIGZvciBjbGVhclRpbWVvdXQgdnMgc2V0VGltZW91dFxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKHRoaXMsIG1hcmtlcik7XG4gICAgICAgIH1cbiAgICB9XG5cblxuXG59XG52YXIgcXVldWUgPSBbXTtcbnZhciBkcmFpbmluZyA9IGZhbHNlO1xudmFyIGN1cnJlbnRRdWV1ZTtcbnZhciBxdWV1ZUluZGV4ID0gLTE7XG5cbmZ1bmN0aW9uIGNsZWFuVXBOZXh0VGljaygpIHtcbiAgICBpZiAoIWRyYWluaW5nIHx8ICFjdXJyZW50UXVldWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIGlmIChjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLmNvbmNhdChxdWV1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgIH1cbiAgICBpZiAocXVldWUubGVuZ3RoKSB7XG4gICAgICAgIGRyYWluUXVldWUoKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRyYWluUXVldWUoKSB7XG4gICAgaWYgKGRyYWluaW5nKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIHRpbWVvdXQgPSBydW5UaW1lb3V0KGNsZWFuVXBOZXh0VGljayk7XG4gICAgZHJhaW5pbmcgPSB0cnVlO1xuXG4gICAgdmFyIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZShsZW4pIHtcbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gW107XG4gICAgICAgIHdoaWxlICgrK3F1ZXVlSW5kZXggPCBsZW4pIHtcbiAgICAgICAgICAgIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50UXVldWVbcXVldWVJbmRleF0ucnVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcXVldWVJbmRleCA9IC0xO1xuICAgICAgICBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgfVxuICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBydW5DbGVhclRpbWVvdXQodGltZW91dCk7XG59XG5cbnByb2Nlc3MubmV4dFRpY2sgPSBmdW5jdGlvbiAoZnVuKSB7XG4gICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpO1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgcXVldWUucHVzaChuZXcgSXRlbShmdW4sIGFyZ3MpKTtcbiAgICBpZiAocXVldWUubGVuZ3RoID09PSAxICYmICFkcmFpbmluZykge1xuICAgICAgICBydW5UaW1lb3V0KGRyYWluUXVldWUpO1xuICAgIH1cbn07XG5cbi8vIHY4IGxpa2VzIHByZWRpY3RpYmxlIG9iamVjdHNcbmZ1bmN0aW9uIEl0ZW0oZnVuLCBhcnJheSkge1xuICAgIHRoaXMuZnVuID0gZnVuO1xuICAgIHRoaXMuYXJyYXkgPSBhcnJheTtcbn1cbkl0ZW0ucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLmZ1bi5hcHBseShudWxsLCB0aGlzLmFycmF5KTtcbn07XG5wcm9jZXNzLnRpdGxlID0gJ2Jyb3dzZXInO1xucHJvY2Vzcy5icm93c2VyID0gdHJ1ZTtcbnByb2Nlc3MuZW52ID0ge307XG5wcm9jZXNzLmFyZ3YgPSBbXTtcbnByb2Nlc3MudmVyc2lvbiA9ICcnOyAvLyBlbXB0eSBzdHJpbmcgdG8gYXZvaWQgcmVnZXhwIGlzc3Vlc1xucHJvY2Vzcy52ZXJzaW9ucyA9IHt9O1xuXG5mdW5jdGlvbiBub29wKCkge31cblxucHJvY2Vzcy5vbiA9IG5vb3A7XG5wcm9jZXNzLmFkZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3Mub25jZSA9IG5vb3A7XG5wcm9jZXNzLm9mZiA9IG5vb3A7XG5wcm9jZXNzLnJlbW92ZUxpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlQWxsTGlzdGVuZXJzID0gbm9vcDtcbnByb2Nlc3MuZW1pdCA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRMaXN0ZW5lciA9IG5vb3A7XG5wcm9jZXNzLnByZXBlbmRPbmNlTGlzdGVuZXIgPSBub29wO1xuXG5wcm9jZXNzLmxpc3RlbmVycyA9IGZ1bmN0aW9uIChuYW1lKSB7IHJldHVybiBbXSB9XG5cbnByb2Nlc3MuYmluZGluZyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmJpbmRpbmcgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcblxucHJvY2Vzcy5jd2QgPSBmdW5jdGlvbiAoKSB7IHJldHVybiAnLycgfTtcbnByb2Nlc3MuY2hkaXIgPSBmdW5jdGlvbiAoZGlyKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdwcm9jZXNzLmNoZGlyIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn07XG5wcm9jZXNzLnVtYXNrID0gZnVuY3Rpb24oKSB7IHJldHVybiAwOyB9O1xuIiwidmFyIHNpID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJywgdGljaztcbmlmIChzaSkge1xuICB0aWNrID0gZnVuY3Rpb24gKGZuKSB7IHNldEltbWVkaWF0ZShmbik7IH07XG59IGVsc2Uge1xuICB0aWNrID0gZnVuY3Rpb24gKGZuKSB7IHNldFRpbWVvdXQoZm4sIDApOyB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHRpY2s7IiwidmFyIG5leHRUaWNrID0gcmVxdWlyZSgncHJvY2Vzcy9icm93c2VyLmpzJykubmV4dFRpY2s7XG52YXIgYXBwbHkgPSBGdW5jdGlvbi5wcm90b3R5cGUuYXBwbHk7XG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgaW1tZWRpYXRlSWRzID0ge307XG52YXIgbmV4dEltbWVkaWF0ZUlkID0gMDtcblxuLy8gRE9NIEFQSXMsIGZvciBjb21wbGV0ZW5lc3NcblxuZXhwb3J0cy5zZXRUaW1lb3V0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldFRpbWVvdXQsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJUaW1lb3V0KTtcbn07XG5leHBvcnRzLnNldEludGVydmFsID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBuZXcgVGltZW91dChhcHBseS5jYWxsKHNldEludGVydmFsLCB3aW5kb3csIGFyZ3VtZW50cyksIGNsZWFySW50ZXJ2YWwpO1xufTtcbmV4cG9ydHMuY2xlYXJUaW1lb3V0ID1cbmV4cG9ydHMuY2xlYXJJbnRlcnZhbCA9IGZ1bmN0aW9uKHRpbWVvdXQpIHsgdGltZW91dC5jbG9zZSgpOyB9O1xuXG5mdW5jdGlvbiBUaW1lb3V0KGlkLCBjbGVhckZuKSB7XG4gIHRoaXMuX2lkID0gaWQ7XG4gIHRoaXMuX2NsZWFyRm4gPSBjbGVhckZuO1xufVxuVGltZW91dC5wcm90b3R5cGUudW5yZWYgPSBUaW1lb3V0LnByb3RvdHlwZS5yZWYgPSBmdW5jdGlvbigpIHt9O1xuVGltZW91dC5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHtcbiAgdGhpcy5fY2xlYXJGbi5jYWxsKHdpbmRvdywgdGhpcy5faWQpO1xufTtcblxuLy8gRG9lcyBub3Qgc3RhcnQgdGhlIHRpbWUsIGp1c3Qgc2V0cyB1cCB0aGUgbWVtYmVycyBuZWVkZWQuXG5leHBvcnRzLmVucm9sbCA9IGZ1bmN0aW9uKGl0ZW0sIG1zZWNzKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSBtc2Vjcztcbn07XG5cbmV4cG9ydHMudW5lbnJvbGwgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcbiAgaXRlbS5faWRsZVRpbWVvdXQgPSAtMTtcbn07XG5cbmV4cG9ydHMuX3VucmVmQWN0aXZlID0gZXhwb3J0cy5hY3RpdmUgPSBmdW5jdGlvbihpdGVtKSB7XG4gIGNsZWFyVGltZW91dChpdGVtLl9pZGxlVGltZW91dElkKTtcblxuICB2YXIgbXNlY3MgPSBpdGVtLl9pZGxlVGltZW91dDtcbiAgaWYgKG1zZWNzID49IDApIHtcbiAgICBpdGVtLl9pZGxlVGltZW91dElkID0gc2V0VGltZW91dChmdW5jdGlvbiBvblRpbWVvdXQoKSB7XG4gICAgICBpZiAoaXRlbS5fb25UaW1lb3V0KVxuICAgICAgICBpdGVtLl9vblRpbWVvdXQoKTtcbiAgICB9LCBtc2Vjcyk7XG4gIH1cbn07XG5cbi8vIFRoYXQncyBub3QgaG93IG5vZGUuanMgaW1wbGVtZW50cyBpdCBidXQgdGhlIGV4cG9zZWQgYXBpIGlzIHRoZSBzYW1lLlxuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSB0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSBcImZ1bmN0aW9uXCIgPyBzZXRJbW1lZGlhdGUgOiBmdW5jdGlvbihmbikge1xuICB2YXIgaWQgPSBuZXh0SW1tZWRpYXRlSWQrKztcbiAgdmFyIGFyZ3MgPSBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGZhbHNlIDogc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gIGltbWVkaWF0ZUlkc1tpZF0gPSB0cnVlO1xuXG4gIG5leHRUaWNrKGZ1bmN0aW9uIG9uTmV4dFRpY2soKSB7XG4gICAgaWYgKGltbWVkaWF0ZUlkc1tpZF0pIHtcbiAgICAgIC8vIGZuLmNhbGwoKSBpcyBmYXN0ZXIgc28gd2Ugb3B0aW1pemUgZm9yIHRoZSBjb21tb24gdXNlLWNhc2VcbiAgICAgIC8vIEBzZWUgaHR0cDovL2pzcGVyZi5jb20vY2FsbC1hcHBseS1zZWd1XG4gICAgICBpZiAoYXJncykge1xuICAgICAgICBmbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZuLmNhbGwobnVsbCk7XG4gICAgICB9XG4gICAgICAvLyBQcmV2ZW50IGlkcyBmcm9tIGxlYWtpbmdcbiAgICAgIGV4cG9ydHMuY2xlYXJJbW1lZGlhdGUoaWQpO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGlkO1xufTtcblxuZXhwb3J0cy5jbGVhckltbWVkaWF0ZSA9IHR5cGVvZiBjbGVhckltbWVkaWF0ZSA9PT0gXCJmdW5jdGlvblwiID8gY2xlYXJJbW1lZGlhdGUgOiBmdW5jdGlvbihpZCkge1xuICBkZWxldGUgaW1tZWRpYXRlSWRzW2lkXTtcbn07IiwibW9kdWxlLmV4cG9ydHM9e1xyXG4gIFwibmFtZVwiOiBcInBkZi1idWlsZGVyLTIwMjBcIixcclxuICBcInZlcnNpb25cIjogXCIwLjAuMTdcIixcclxuICBcImRlc2NyaXB0aW9uXCI6IFwiXCIsXHJcbiAgXCJtYWluXCI6IFwiaW5kZXguanNcIixcclxuICBcInNjcmlwdHNcIjoge1xyXG4gICAgXCJidWlsZC1hbGxcIjogXCJucG0gcnVuIGJ1aWxkLXBkZi1lZGl0b3IgJiYgbnBtIHJ1biBidWlsZC1tYW5hZ2VyICYgbnBtIHJ1biBkZXBsb3lcIixcclxuICAgIFwiYnVpbGQtcGRmLWVkaXRvclwiOiBcImJyb3dzZXJpZnkgLWQgc3JjL3BkZi1lZGl0b3IvUGRmRWRpdG9yLmpzID4gcHVibGljL3BkZi1lZGl0b3IvcGRmLWVkaXRvci5qc1wiLFxyXG4gICAgXCJidWlsZC1tYW5hZ2VyXCI6IFwiYnJvd3NlcmlmeSAtZCBzcmMvbWFuYWdlLWFwcGxpY2F0aW9uL01hbmFnZUFwcGxpY2F0aW9uLmpzID4gcHVibGljL21hbmFnZS1hcHBsaWNhdGlvbi9tYW5hZ2VyLmpzXCIsXHJcbiAgICBcImRlcGxveVwiOiBcInhjb3B5IC9TIC9ZICBcXFwiLi9wdWJsaWNcXFwiIFxcXCJDOi9Vc2Vycy9TdHJhbmdlcl9pbl90aGVfUS9JZGVhUHJvamVjdHMvaXRleHQtc2VydmVyL3N0YXRpY1xcXCJcIlxyXG4gIH0sXHJcbiAgXCJkZXZEZXBlbmRlbmNpZXNcIjoge1xyXG4gICAgXCJiYWJlbC1wcmVzZXQtZXMyMDE1XCI6IFwiXjYuMjQuMVwiLFxyXG4gICAgXCJicm93c2VyaWZ5XCI6IFwiXjE2LjIuM1wiLFxyXG4gICAgXCJicm93c2VyaWZ5LWNzc1wiOiBcIl4wLjE0LjBcIixcclxuICAgIFwiZXhwb3J0cy1sb2FkZXJcIjogXCJeMC43LjBcIixcclxuICAgIFwiZ3JhY2VmdWwtZnNcIjogXCJeNC4xLjEzXCIsXHJcbiAgICBcImltcG9ydHMtbG9hZGVyXCI6IFwiXjAuOC4wXCIsXHJcbiAgICBcInN0cmlwaWZ5XCI6IFwiXjYuMC4wXCJcclxuICB9LFxyXG4gIFwiYnJvd3NlcmlmeVwiOiB7XHJcbiAgICBcInRyYW5zZm9ybVwiOiBbXHJcbiAgICAgIFwiYnJvd3NlcmlmeS1jc3NcIlxyXG4gICAgXVxyXG4gIH0sXHJcbiAgXCJhdXRob3JcIjogXCJcIixcclxuICBcImxpY2Vuc2VcIjogXCJJU0NcIixcclxuICBcImRlcGVuZGVuY2llc1wiOiB7XHJcbiAgICBcImQzLXNlbGVjdGlvblwiOiBcIl4xLjQuMFwiLFxyXG4gICAgXCJkcmFndWxhXCI6IFwiXjMuNy4yXCJcclxuICB9XHJcbn1cclxuIiwiLy8gdmFyIElubGluZUVkaXRvciA9IHJlcXVpcmUoJy4uLy4uL2RlcGVuZGVuY2llcy9ja2VkaXRvci9ja2VkaXRvcjUtaW5saW5lLWZ1bGwvYnVpbGQvY2tlZGl0b3InKVxyXG52YXIgQmFsbG9vbkVkaXRvciA9IHJlcXVpcmUoJy4uLy4uL2RlcGVuZGVuY2llcy9ja2VkaXRvci9ja2VkaXRvci1iYWxvb24vYnVpbGQvY2tlZGl0b3InKVxyXG4vLyByZXF1aXJlKCcuLi8uLi9kZXBlbmRlbmNpZXMvY2tlZGl0b3IvY2tlZGl0b3I1LWlubGluZS1mdWxsL2J1aWxkL3RyYW5zbGF0aW9ucy9ydScpXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cclxuICAgIHJlbW92ZVRleHRFZGl0b3I6IGZ1bmN0aW9uIHJlbW92ZShlbCkge1xyXG5cclxuICAgIH0sXHJcblxyXG4gICAgaW5pdFRleHRFZGl0b3I6IGZ1bmN0aW9uIChlbCkge1xyXG4gICAgICAgIGNrRWRpdG9yKGVsKVxyXG4gICAgfVxyXG59O1xyXG5cclxuXHJcbmZ1bmN0aW9uIGNrRWRpdG9yKGVsKSB7XHJcblxyXG4gICAgaWYoIWVsIHx8IGVsLmNsYXNzTGlzdC5jb250YWlucygnaW5pdGlhbGl6ZWQnKSlcclxuICAgICAgICByZXR1cm5cclxuICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2luaXRpYWxpemVkJyk7XHJcbiAgICAvLyBJbmxpbmVFZGl0b3JcclxuICAgIEJhbGxvb25FZGl0b3JcclxuICAgICAgICAuY3JlYXRlKGVsLCB7XHJcblxyXG4gICAgICAgICAgICB0b29sYmFyOiB7XHJcbiAgICAgICAgICAgICAgICBpdGVtczogW1xyXG4gICAgICAgICAgICAgICAgICAgICd1bmRvJyxcclxuICAgICAgICAgICAgICAgICAgICAncmVkbycsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3wnLFxyXG4gICAgICAgICAgICAgICAgICAgICdib2xkJyxcclxuICAgICAgICAgICAgICAgICAgICAnaXRhbGljJyxcclxuICAgICAgICAgICAgICAgICAgICAndW5kZXJsaW5lJyxcclxuICAgICAgICAgICAgICAgICAgICAnc3RyaWtldGhyb3VnaCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3N1YnNjcmlwdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3N1cGVyc2NyaXB0JyxcclxuICAgICAgICAgICAgICAgICAgICAvLyAnYmxvY2tRdW90ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gJ2J1bGxldGVkTGlzdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gJ251bWJlcmVkTGlzdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3wnLFxyXG4gICAgICAgICAgICAgICAgICAgICdhbGlnbm1lbnQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdpbmRlbnQnLFxyXG4gICAgICAgICAgICAgICAgICAgICdvdXRkZW50JyxcclxuICAgICAgICAgICAgICAgICAgICAnZm9udEZhbWlseScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2ZvbnRTaXplJyxcclxuICAgICAgICAgICAgICAgICAgICAnZm9udEJhY2tncm91bmRDb2xvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2ZvbnRDb2xvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgJ3wnLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICdpbWFnZVVwbG9hZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gJ2luc2VydFRhYmxlJyxcclxuICAgICAgICAgICAgICAgICAgICAnc3BlY2lhbENoYXJhY3RlcnMnLFxyXG4gICAgICAgICAgICAgICAgICAgICdob3Jpem9udGFsTGluZScsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2xpbmsnXHJcbiAgICAgICAgICAgICAgICBdXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxhbmd1YWdlOiAncnUnLFxyXG4gICAgICAgICAgICBpbWFnZToge1xyXG4gICAgICAgICAgICAgICAgLy8gWW91IG5lZWQgdG8gY29uZmlndXJlIHRoZSBpbWFnZSB0b29sYmFyLCB0b28sIHNvIGl0IHVzZXMgdGhlIG5ldyBzdHlsZSBidXR0b25zLlxyXG4gICAgICAgICAgICAgICAgdG9vbGJhcjogW1xyXG4gICAgICAgICAgICAgICAgICAgICdpbWFnZVVwbG9hZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gJ2ltYWdlVGV4dEFsdGVybmF0aXZlJyxcclxuICAgICAgICAgICAgICAgICAgICAvLyAnfCcsXHJcbiAgICAgICAgICAgICAgICAgICAgJ2ltYWdlU3R5bGU6YWxpZ25MZWZ0JyxcclxuICAgICAgICAgICAgICAgICAgICAnaW1hZ2VTdHlsZTpmdWxsJyxcclxuICAgICAgICAgICAgICAgICAgICAnaW1hZ2VTdHlsZTphbGlnblJpZ2h0J1xyXG4gICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgIHN0eWxlczogW1xyXG4gICAgICAgICAgICAgICAgICAgICdmdWxsJyxcclxuICAgICAgICAgICAgICAgICAgICAnYWxpZ25MZWZ0JyxcclxuICAgICAgICAgICAgICAgICAgICAnYWxpZ25SaWdodCdcclxuICAgICAgICAgICAgICAgIF1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGFibGU6IHtcclxuICAgICAgICAgICAgICAgIGNvbnRlbnRUb29sYmFyOiBbXHJcbiAgICAgICAgICAgICAgICAgICAgJ3RhYmxlQ29sdW1uJyxcclxuICAgICAgICAgICAgICAgICAgICAndGFibGVSb3cnLFxyXG4gICAgICAgICAgICAgICAgICAgICdtZXJnZVRhYmxlQ2VsbHMnLFxyXG4gICAgICAgICAgICAgICAgICAgICd0YWJsZUNlbGxQcm9wZXJ0aWVzJyxcclxuICAgICAgICAgICAgICAgICAgICAndGFibGVQcm9wZXJ0aWVzJ1xyXG4gICAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsaWNlbnNlS2V5OiAnJyxcclxuXHJcbiAgICAgICAgfSkudGhlbihlZGl0b3IgPT4ge1xyXG4gICAgICAgICAgICBlbC5lZGl0b3IgPSBlZGl0b3I7XHJcbiAgICAgICAgfSlcclxufVxyXG4iLCJsZXQgcGFnZVN0eWxlcyA9IHJlcXVpcmUoJy4vcGFnZS1zdHlsZXMnKTtcclxuXHJcbmZ1bmN0aW9uIGZpeFBhZ2VCcmVha3NfYnlfQVN0YW5pc2xhdnNreSh0bXApIHtcclxuICAgIGxldCBzID0gdG1wLnF1ZXJ5U2VsZWN0b3IoJy5wYWdlLmNvbnRhaW5lcicpLnN0eWxlO1xyXG4gICAgcy5oZWlnaHQgPSAnMjAwcHgnO1xyXG4gICAgcy5kaXNwbGF5ID0gJ3RhYmxlLWNlbGwnXHJcbn1cclxuXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGh0bWwpIHtcclxuICAgIGxldCB0bXAgPSB0bXBFbGVtZW50KGh0bWwpO1xyXG4gICAgZml4UGFnZUJyZWFrc19ieV9BU3RhbmlzbGF2c2t5KHRtcCk7XHJcbiAgICBmaXhGbGV4KHRtcCk7XHJcbiAgICBmaXhJbWFnZXNBbGlnbih0bXApO1xyXG4gICAgZml4VGFibGVzQWxpZ24odG1wKTtcclxuICAgIHBhZ2VCcmVha3ModG1wKTtcclxuICAgIHJldHVybiBwYWdlKHRtcCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhZ2UoZWwpIHtcclxuICAgIHJldHVybiBgXHJcbiAgICAgICAgPGh0bWw+XHJcbiAgICAgICAgICAgIDxoZWFkPiR7c3R5bGUoKX08L2hlYWQ+XHJcbiAgICAgICAgICAgIDxib2R5PiR7ZWwuaW5uZXJIVE1MfTwvYm9keT5cclxuICAgICAgICA8L2h0bWw+XHJcbiAgICBgO1xyXG59XHJcblxyXG5mdW5jdGlvbiBzdHlsZSgpIHtcclxuICAgIHJldHVybiBgXHJcbiAgICAgICAgJHtwYWdlU3R5bGVzfVxyXG4gICAgICAgIDxzdHlsZT5cclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgZmlndXJlID4gaW1nIHtcclxuICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwIGF1dG87XHJcbiAgICAgICAgICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XHJcbiAgICAgICAgICAgICAgICBtaW4td2lkdGg6IDUwcHg7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZmlndXJlLmltYWdlLmltYWdlX3Jlc2l6ZWQgaW1nIHtcclxuICAgICAgICAgICAgICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgLmltYWdlLXN0eWxlLWFsaWduLWxlZnQge1xyXG4gICAgICAgICAgICAgICAgZmxvYXQ6IGxlZnQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAuaW1hZ2Utc3R5bGUtYWxpZ24tcmlnaHQge1xyXG4gICAgICAgICAgICAgICAgZmxvYXQ6IHJpZ2h0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIDwvc3R5bGU+XHJcbiAgICBgO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYWdlQnJlYWtzKHRtcCkge1xyXG4gICAgdG1wLnF1ZXJ5U2VsZWN0b3JBbGwoJy5wYWdlLWJyZWFrJykuZm9yRWFjaChlbCA9PiB7XHJcbiAgICAgICAgZWwuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgncGFnZS1icmVhaycpXHJcbiAgICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBmaXhGbGV4KGVsKSB7XHJcbiAgICBlbC5xdWVyeVNlbGVjdG9yQWxsKCcucm93JykuZm9yRWFjaChyb3cgPT4ge1xyXG4gICAgICAgIGxldCBjb2x1bW5zID0gcm93LnF1ZXJ5U2VsZWN0b3JBbGwoJy5jb2wteHMnKVxyXG4gICAgICAgIGNvbHVtbnMuZm9yRWFjaChjb2wgPT4ge1xyXG4gICAgICAgICAgICBsZXQgcyA9IGNvbC5zdHlsZTtcclxuICAgICAgICAgICAgcy5kaXNwbGF5ID0gJ2lubGluZS1ibG9jayc7XHJcbiAgICAgICAgICAgIHMuZmxvYXQgPSBcImxlZnRcIjtcclxuICAgICAgICAgICAgcy5taW5XaWR0aCA9IHMud2lkdGggPSAxMDAgLyBjb2x1bW5zLmxlbmd0aCArICclJztcclxuICAgICAgICAgICAgcy52ZXJ0aWNhbEFsaWduID0gJ3RvcCc7XHJcbiAgICAgICAgICAgIC8vIHMucGFkZGluZyA9IFwiMCAzcHhcIjtcclxuICAgICAgICAgICAgLy8gcy5iYWNrZ3JvdW5kQ29sb3IgPSBgaHNsKCR7TWF0aC5yYW5kb20oKSozNjB9LDU1JSw4NSUpYFxyXG4gICAgICAgIH0pXHJcbiAgICB9KVxyXG59XHJcblxyXG5mdW5jdGlvbiBmaXhJbWFnZXNBbGlnbihlbCkge1xyXG4gICAgZWwucXVlcnlTZWxlY3RvckFsbCgnZmlndXJlLmltYWdlJykuZm9yRWFjaChpbWdCbG9jayA9PiB7XHJcbiAgICAgICAgbGV0IGNlbnRlckFsaWduID0gIWltZ0Jsb2NrLmNsYXNzTGlzdC5jb250YWlucygnaW1hZ2Utc3R5bGUtYWxpZ24tbGVmdCcpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICYmICFpbWdCbG9jay5jbGFzc0xpc3QuY29udGFpbnMoJ2ltYWdlLXN0eWxlLWFsaWduLXJpZ2h0Jyk7XHJcbiAgICAgICAgaWYgKGNlbnRlckFsaWduKVxyXG4gICAgICAgICAgICBpbWdCbG9jay5wYXJlbnROb2RlLnN0eWxlLnRleHRBbGlnbiA9IFwiY2VudGVyXCJcclxuICAgIH0pXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGZpeFRhYmxlc0FsaWduKGVsKSB7XHJcbiAgICBlbC5xdWVyeVNlbGVjdG9yQWxsKCdmaWd1cmUudGFibGUnKS5mb3JFYWNoKHRhYmxlQmxvY2sgPT4ge1xyXG4gICAgICAgIGxldCBjZW50ZXJBbGlnbiA9ICF0YWJsZUJsb2NrLnN0eWxlLmZsb2F0O1xyXG4gICAgICAgIGlmICghY2VudGVyQWxpZ24pIHJldHVyblxyXG4gICAgICAgIHRhYmxlQmxvY2sucGFyZW50Tm9kZS5zdHlsZS50ZXh0QWxpZ24gPSBcImNlbnRlclwiXHJcbiAgICAgICAgdGFibGVCbG9jay5zdHlsZS5kaXNwbGF5ID0gXCJpbmxpbmUtYmxvY2tcIlxyXG4gICAgfSlcclxufVxyXG5cclxuZnVuY3Rpb24gdG1wRWxlbWVudChodG1sKSB7XHJcbiAgICBsZXQgdG1wID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICB0bXAuaW5uZXJIVE1MID0gaHRtbDtcclxuICAgIHJldHVybiB0bXA7XHJcbn0iLCJsZXQgZmlsbCA9ICcjNDMyYzEyJ1xyXG5cclxubGV0IG1vdmUgPSBgXHJcbiAgICA8cGF0aCBkPVwiTTM1Mi4yMDEgNDI1Ljc3NWwtNzkuMTk2IDc5LjE5NmMtOS4zNzMgOS4zNzMtMjQuNTY4IDkuMzczLTMzLjk0MSBcclxuICAgICAgICAwbC03OS4xOTYtNzkuMTk2Yy0xNS4xMTktMTUuMTE5LTQuNDExLTQwLjk3MSAxNi45NzEtNDAuOTdoNTEuMTYyTDIyOCAyODRIMTI3LjE5NnY1MS4xNjJjMCBcclxuICAgICAgICAyMS4zODItMjUuODUxIDMyLjA5LTQwLjk3MSAxNi45NzFMNy4wMjkgMjcyLjkzN2MtOS4zNzMtOS4zNzMtOS4zNzMtMjQuNTY5IDAtMzMuOTQxTDg2LjIyNSBcclxuICAgICAgICAxNTkuOGMxNS4xMTktMTUuMTE5IDQwLjk3MS00LjQxMSA0MC45NzEgMTYuOTcxVjIyOEgyMjhWMTI3LjE5NmgtNTEuMjNjLTIxLjM4MiBcclxuICAgICAgICAwLTMyLjA5LTI1Ljg1MS0xNi45NzEtNDAuOTcxbDc5LjE5Ni03OS4xOTZjOS4zNzMtOS4zNzMgMjQuNTY4LTkuMzczIDMzLjk0MSAwbDc5LjE5NiA3OS4xOTZjMTUuMTE5IFxyXG4gICAgICAgIDE1LjExOSA0LjQxMSA0MC45NzEtMTYuOTcxIDQwLjk3MWgtNTEuMTYyVjIyOGgxMDAuODA0di01MS4xNjJjMC0yMS4zODIgMjUuODUxLTMyLjA5IFxyXG4gICAgICAgIDQwLjk3LTE2Ljk3MWw3OS4xOTYgNzkuMTk2YzkuMzczIDkuMzczIDkuMzczIDI0LjU2OSAwIDMzLjk0MUw0MjUuNzczIDM1Mi4yYy0xNS4xMTkgMTUuMTE5LTQwLjk3MSBcclxuICAgICAgICA0LjQxMS00MC45Ny0xNi45NzFWMjg0SDI4NHYxMDAuODA0aDUxLjIzYzIxLjM4MiAwIDMyLjA5IDI1Ljg1MSAxNi45NzEgNDAuOTcxelwiLz5cclxuYDtcclxuXHJcbmxldCBjb3B5ID0gYFxyXG4gICAgPHBhdGggZmlsbD1cIiR7ZmlsbH1cIiBkPVwiTTMyMCA0NDh2NDBjMCAxMy4yNTUtMTAuNzQ1IDI0LTI0IDI0SDI0Yy0xMy4yNTUgXHJcbiAgICAgICAgMC0yNC0xMC43NDUtMjQtMjRWMTIwYzAtMTMuMjU1IDEwLjc0NS0yNCAyNC0yNGg3MnYyOTZjMCBcclxuICAgICAgICAzMC44NzkgMjUuMTIxIDU2IDU2IDU2aDE2OHptMC0zNDRWMEgxNTJjLTEzLjI1NSAwLTI0IDEwLjc0NS0yNCAyNHYzNjhjMCBcclxuICAgICAgICAxMy4yNTUgMTAuNzQ1IDI0IDI0IDI0aDI3MmMxMy4yNTUgMCAyNC0xMC43NDUgMjQtMjRWMTI4SDM0NGMtMTMuMiBcclxuICAgICAgICAwLTI0LTEwLjgtMjQtMjR6bTEyMC45NzEtMzEuMDI5TDM3NS4wMjkgNy4wMjlBMjQgMjQgMCAwIDAgMzU4LjA1OSBcclxuICAgICAgICAwSDM1MnY5Nmg5NnYtNi4wNTlhMjQgMjQgMCAwIDAtNy4wMjktMTYuOTd6XCIvPlxyXG5gO1xyXG5cclxubGV0IGRlbCA9IGBcclxuICAgIDxwYXRoIGZpbGw9XCIke2ZpbGx9XCIgZD1cIk04MSAgODEgbDM1MCAgMzUwIGwtNDAgNDAgbC0zNTAgLTM1MHpcIi8+XHJcbiAgICA8cGF0aCBmaWxsPVwiJHtmaWxsfVwiIGQ9XCJNNDExIDgxIGwtMzUwIDM1MCBsNDAgIDQwIGwzNTAgIC0zNTB6XCIvPlxyXG5gO1xyXG5cclxubGV0IGRvd24gPSBgXHJcbiAgICA8cGF0aCBmaWxsPVwiJHtmaWxsfVwiIGQ9XCJNNTAgMTUwIGwyMDAgMjAwIGwyMDAgLTIwMHpcIi8+XHJcbmA7XHJcblxyXG5sZXQgdXAgPSBgXHJcbiAgICA8cGF0aCBmaWxsPVwiJHtmaWxsfVwiIGQ9XCJNNTAgMzUwIGwyMDAgLTIwMCBsMjAwIDIwMHpcIi8+XHJcbmA7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIG1vdmU6ICh3LCBoKSA9PiBzdmcodywgaCwgbW92ZSwgWy01MCwgLTUwLCA2MTIsIDYxMl0pLFxyXG4gICAgY29weTogKHcsIGgpID0+IHN2Zyh3LCBoLCBjb3B5KSxcclxuICAgIGRlbDogKHcsIGgpID0+IHN2Zyh3LCBoLCBkZWwpLFxyXG4gICAgdXA6ICh3LCBoKSA9PiBzdmcodywgaCwgdXApLFxyXG4gICAgZG93bjogKHcsIGgpID0+IHN2Zyh3LCBoLGRvd24pXHJcbn07XHJcblxyXG5mdW5jdGlvbiBzdmcodywgaCwgaHRtbCwgdmIpIHtcclxuICAgIHZiID0gdmIgfHwgWy01MCwgLTUwLCA1NDgsIDYxMl07XHJcbiAgICByZXR1cm4gYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIFxyXG4gICAgICAgICAgICAgICAgdmlld0JveD1cIiR7dmJ9XCIgXHJcbiAgICAgICAgICAgICAgICB3aWR0aD1cIiR7d31weFwiICBcclxuICAgICAgICAgICAgICAgIGhlaWdodD1cIiR7aH1weFwiPlxyXG4gICAgICAgICAgICAke2h0bWx9XHJcbiAgICAgICAgPC9zdmc+YFxyXG59IiwicmVxdWlyZSgnLi9wZGYtZWRpdG9yLmNzcycpO1xyXG5yZXF1aXJlKCcuLi8uLi9kZXBlbmRlbmNpZXMvZmxleGJveGdyaWQvZmxleGJveGdyaWQubWluLmNzcycpO1xyXG5sZXQgdmVyID0gcmVxdWlyZSgnLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvblxyXG5cclxubGV0IGRuZCA9IHJlcXVpcmUoJy4vZG5kJylcclxubGV0IGh0bWxUZW1wbGF0ZSA9IHJlcXVpcmUoJy4vaHRtbC10ZW1wbGF0ZScpO1xyXG5sZXQgVGV4dEVkaXRvciA9IHJlcXVpcmUoJy4vQ2tFZGl0b3I1Jyk7XHJcbmxldCBibG9ja3MgPSByZXF1aXJlKCcuL2Jsb2NrcycpO1xyXG5sZXQgc3ZnT3ZlcmxheSA9IHJlcXVpcmUoJy4vc3ZnT3ZlcmxheS9zdmdPdmVybGF5Jyk7XHJcbmxldCBkb2N1bWVudENsZWFuZXIgPSByZXF1aXJlKCcuL2RvY3VtZW50Q2xlYW5lcicpO1xyXG5sZXQgZm9ySXRleHRGb3JtYXR0ZXIgPSByZXF1aXJlKCcuL0Zvckl0ZXh0Rm9ybWF0dGVyJyk7XHJcbmxldCBtb3VzZW92ZXJCdXR0b25zID0gcmVxdWlyZSgnLi9tb3VzZW92ZXJCdXR0b25zJyk7XHJcbmxldCBwYWdlU3R5bGVzID0gcmVxdWlyZSgnLi9wYWdlLXN0eWxlcycpO1xyXG5sZXQgVGVtcGxhdGVzRmFjdG9yeSA9IHJlcXVpcmUoJy4vVGVtcGxhdGVzRmFjdG9yeScpO1xyXG5sZXQgcGFnZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuL3BhZ2VQcm9wZXJ0aWVzJylcclxubGV0IHRlbXBsYXRlc0ZhY3RvcnkgPSBuZXcgVGVtcGxhdGVzRmFjdG9yeSgpO1xyXG5cclxuY2xhc3MgUGRmRWRpdG9yIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcihwcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgdGhpcy5wcm9wZXJ0aWVzID0gcHJvcGVydGllcyB8fCB7fTtcclxuICAgICAgICB0aGlzLnByb3BlcnRpZXMuYmxvY2tQcm9wZXJ0aWVzID0gdGhpcy5wcm9wZXJ0aWVzLmJsb2NrUHJvcGVydGllcyB8fCB7fVxyXG4gICAgICAgIHRoaXMucHJvcGVydGllcy5idXR0b25zU2l6ZSA9IHRoaXMucHJvcGVydGllcy5idXR0b25zU2l6ZSB8fCAyNTtcclxuICAgICAgICB0aGlzLmluaXRQZGZFZGl0b3IoKTtcclxuICAgICAgICB0aGlzLndyaXRlVmVyc2lvbigpO1xyXG4gICAgICAgIGRuZC5pbml0RG5EKHRoaXMpXHJcblxyXG4gICAgICAgIHRoaXMuaW5pdENvbGxhcHNlUGFuZWxzKClcclxuICAgICAgICB0aGlzLmluaXRDbGVhckJsb2NrU2VsZWN0aW9uT25DbGlja0luTWlsa0xpc3RlbmVyKCk7XHJcblxyXG4gICAgICAgIGJsb2Nrcy5pbml0QmxvY2tzKHRoaXMpO1xyXG4gICAgICAgIHN2Z092ZXJsYXkuaW5pdFN2Z092ZXJsYXkodGhpcyk7XHJcblxyXG5cclxuICAgICAgICBhZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLm1hbmFnZUhvdmVyU3RhdGUoKVxyXG4gICAgICAgICAgICB0aGlzLnJlbW92ZUVtcHR5Um93cygpXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcGFnZVByb3BlcnRpZXMuaW5pdFBhZ2VQcm9wZXJ0aWVzKHRoaXMpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdwZGYtZWRpdG9yOiAnICsgdmVyKVxyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUVtcHR5Um93cygpIHtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgbGV0IGFsbEJsb2NrcyA9IHRoaXMudGFyZ2V0RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGRmLWVkaXRvciAucGFnZSA+IC50ZW1wbGF0ZScpO1xyXG4gICAgICAgICAgICBhbGxCbG9ja3MuZm9yRWFjaChiID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghYi5maXJzdENoaWxkKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhck5vdE5lZWRlZFJvd3MoYi5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgICAgIGlmIChiLmNoaWxkRWxlbWVudENvdW50ID09PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgIGIuZmlyc3RDaGlsZC5jbGFzc0xpc3QucmVtb3ZlKCdlbXB0eS1kcm9wLXpvbmUnKVxyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMubWFuYWdlRXh0cmFSb3dzKGIuZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hcmtFbXB0eVJvd3MoYi5maXJzdENoaWxkKTtcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIGluaXRQZGZFZGl0b3IoKSB7XHJcbiAgICAgICAgbGV0IHRhcmdldEVsZW1lbnQgPSB0aGlzLnByb3BlcnRpZXMudGFyZ2V0O1xyXG4gICAgICAgIGlmICh0eXBlb2YgdGFyZ2V0RWxlbWVudCA9PT0gXCJzdHJpbmdcIilcclxuICAgICAgICAgICAgdGFyZ2V0RWxlbWVudCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0RWxlbWVudCk7XHJcbiAgICAgICAgdGFyZ2V0RWxlbWVudC5pbm5lckhUTUwgPSBodG1sVGVtcGxhdGUodGhpcy5wcm9wZXJ0aWVzKTtcclxuICAgICAgICB0YXJnZXRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaWRlUGFuZWwgI2Jsb2NrcycpXHJcbiAgICAgICAgICAgIC5pbm5lckhUTUwgPSB0ZW1wbGF0ZXNGYWN0b3J5LmNyZWF0ZUJsb2NrcygpO1xyXG4gICAgICAgIHRhcmdldEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnNpZGVQYW5lbCAjZWxlbWVudHMnKVxyXG4gICAgICAgICAgICAuaW5uZXJIVE1MID0gdGVtcGxhdGVzRmFjdG9yeS5jcmVhdGVFbGVtZW50cygpO1xyXG4gICAgICAgIHRhcmdldEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJyxcclxuICAgICAgICAgICAgZSA9PiBtb3VzZW92ZXJCdXR0b25zLm1hbmFnZShlLCB0aGlzKSk7XHJcblxyXG4gICAgICAgIHRoaXMudGFyZ2V0RWxlbWVudCA9IHRhcmdldEVsZW1lbnQ7XHJcbiAgICB9XHJcblxyXG4gICAgd3JpdGVWZXJzaW9uKCl7XHJcbiAgICAgICAgbGV0IHBhZ2UgPSB0aGlzLnRhcmdldEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBhZ2UnKTtcclxuICAgICAgICBpZiAoIXBhZ2UuZ2V0QXR0cmlidXRlKCdjcmVhdGVkLXZlcicpKVxyXG4gICAgICAgICAgICBwYWdlLnNldEF0dHJpYnV0ZSgnY3JlYXRlZC12ZXInLCB2ZXIpO1xyXG4gICAgICAgIHBhZ2Uuc2V0QXR0cmlidXRlKCdsYXN0LWVkaXRlZC12ZXInLCB2ZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIGluaXRDbGVhckJsb2NrU2VsZWN0aW9uT25DbGlja0luTWlsa0xpc3RlbmVyKCkge1xyXG4gICAgICAgIHRoaXMudGFyZ2V0RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGVudCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBjbGVhciA9IFsnY29udGVudCcsICdwYWdlJ10uZmluZChjID0+IGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyhjKSlcclxuICAgICAgICAgICAgY2xlYXIgfD0gZS50YXJnZXQucXVlcnlTZWxlY3RvcignLnBhZ2UtYnJlYWsnKTtcclxuICAgICAgICAgICAgaWYgKGNsZWFyKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jbGlja09uQmxvY2sobnVsbClcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0Q29sbGFwc2VQYW5lbHMoKSB7XHJcbiAgICAgICAgdGhpcy50YXJnZXRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5ncm91cE5hbWUnKS5mb3JFYWNoKGdyb3VwTmFtZSA9PiB7XHJcbiAgICAgICAgICAgIGdyb3VwTmFtZS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGdyb3VwTmFtZS5jbGFzc0xpc3QudG9nZ2xlKCdjb2xsYXBzZWQnKVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBtYW5hZ2VIb3ZlclN0YXRlKHRhcmdldCkge1xyXG4gICAgICAgIGlmICh0YXJnZXQgPT09IHRoaXMubGFzdEhvdmVyKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgdGhpcy5sYXN0SG92ZXIgPSB0YXJnZXQ7XHJcbiAgICAgICAgdGhpcy50YXJnZXRFbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wYWdlLmNvbnRhaW5lciA+IC50ZW1wbGF0ZScpXHJcbiAgICAgICAgICAgIC5mb3JFYWNoKHRwbCA9PiB0cGwuY2xhc3NMaXN0LnJlbW92ZSgnaG92ZXItc3RhdGUnKSlcclxuICAgICAgICBpZiAoIXRhcmdldClcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgdGFyZ2V0LmNsYXNzTGlzdC5hZGQoJ2hvdmVyLXN0YXRlJylcclxuXHJcbiAgICB9XHJcblxyXG4gICAgbWFya0VtcHR5Um93cyh0YXJnZXQpIHtcclxuICAgICAgICBpZiAoIXRhcmdldClcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgnLmRyb3B6b25lJykuZm9yRWFjaChkeiA9PiB7XHJcbiAgICAgICAgICAgIGxldCBzaW5nbGUgPSBkei5wYXJlbnROb2RlLiBxdWVyeVNlbGVjdG9yQWxsKCcuZHJvcHpvbmUnKS5sZW5ndGggPT09IDE7XHJcbiAgICAgICAgICAgIGxldCBlbXB0eSA9IGR6LmlubmVySFRNTC50cmltKCkgPT09ICcnO1xyXG4gICAgICAgICAgICBkei5jbGFzc0xpc3QudG9nZ2xlKCdlbXB0eS1kcm9wLXpvbmUnLCBlbXB0eSAmJiAhc2luZ2xlKVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG1hbmFnZUV4dHJhUm93cyh0YXJnZXQpIHtcclxuICAgICAgICBpZiAoIXRhcmdldClcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgdHJ5IHsgLy8gY29uc29sZS5sb2coJ21hbmFnZUV4dHJhUm93cycpXHJcblxyXG4gICAgICAgICAgICBsZXQgZmlyc3QgPSBbLi4udGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgnLmRyb3B6b25lJyldLnNoaWZ0KClcclxuICAgICAgICAgICAgaWYgKGZpcnN0ICYmIGZpcnN0LmlubmVySFRNTC50cmltKCkgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5uZXdEcm9wWm9uZSgpLCBmaXJzdCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgbGV0IGxhc3QgPSBbLi4udGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgnLmRyb3B6b25lJyldLnBvcCgpXHJcbiAgICAgICAgICAgIGlmIChsYXN0ICYmIGxhc3QuaW5uZXJIVE1MLnRyaW0oKSAhPT0gJycpIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmFwcGVuZCh0aGlzLm5ld0Ryb3Bab25lKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGUpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyTm90TmVlZGVkUm93cyh0YXJnZXQpIHtcclxuICAgICAgICBpZiAoIXRhcmdldClcclxuICAgICAgICAgICAgcmV0dXJuXHJcbiAgICAgICAgdHJ5IHsgLy8gY29uc29sZS5sb2coJ2NsZWFyTm90TmVlZGVkUm93cycpXHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQucGFyZW50Tm9kZS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSAmJiB0YXJnZXQuaW5uZXJIVE1MID09PSAnJylcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICBsZXQgZHJvcFpvbmVzID0gdGFyZ2V0LnBhcmVudE5vZGUucXVlcnlTZWxlY3RvckFsbCgnLmRyb3B6b25lJyk7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZHJvcFpvbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZHJvcFpvbmVzLmxlbmd0aCA+IDEgJiYgZHJvcFpvbmVzW2ldLmlubmVySFRNTC50cmltKCkgPT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZHJvcFpvbmVzW2ldLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRuZC5yZW1vdmVFbGVtZW50KGRyb3Bab25lc1tpXSlcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgICAgY29uc29sZS5lcnJvcihlKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBpc01vZGlmaWVkKCl7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5pdGlhbCAhPT0gdGhpcy5nZXREb2N1bWVudCgpO1xyXG4gICAgfVxyXG5cclxuICAgIG5ld0Ryb3Bab25lKCkge1xyXG4gICAgICAgIGxldCBkeiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgICAgIGR6LmNsYXNzTmFtZSA9ICdkcm9wem9uZSByb3cnO1xyXG4gICAgICAgIHRoaXMuaW5pdER6KGR6KTtcclxuICAgICAgICByZXR1cm4gZHpcclxuICAgIH1cclxuXHJcbiAgICBpbml0RWRpdG9yKGVsKSB7XHJcbiAgICAgICAgdGhpcy5yZW1vdmVCeVNlbCgnLmR6LWJ1dHRvbnMsIC50ZW1wbGF0ZS1idXR0b25zJyk7XHJcbiAgICAgICAgVGV4dEVkaXRvci5pbml0VGV4dEVkaXRvcihlbClcclxuICAgIH1cclxuXHJcbiAgICBpbml0RHooZHJvcFpvbmUpIHtcclxuICAgICAgICBkbmQucHVzaEVsZW1lbnQoZHJvcFpvbmUpO1xyXG4gICAgICAgIGRyb3Bab25lLmNsYXNzTGlzdC5yZW1vdmUoJ29yaWdpbicpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlbW92ZUJ5U2VsKHNlbCkge1xyXG4gICAgICAgIHRoaXMudGFyZ2V0RWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbClcclxuICAgICAgICAgICAgLmZvckVhY2goZSA9PiBlLnJlbW92ZSgpKTtcclxuICAgIH1cclxuXHJcbiAgICBjbGlja09uQmxvY2soZWwpIHtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkQmxvY2sgPSBlbDtcclxuICAgICAgICBibG9ja3MuaGFuZGxlQ2xpY2soZWwpO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHB1YmxpYyBhcGlcclxuXHJcbiAgICBnZXREb2N1bWVudCgpIHtcclxuICAgICAgICBsZXQgcGFnZUNvbnRlbnQgPSB0aGlzLnRhcmdldEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBhZ2UnKS5vdXRlckhUTUw7XHJcbiAgICAgICAgcmV0dXJuIGRvY3VtZW50Q2xlYW5lci5jbGVhbihwYWdlQ29udGVudCkuaW5uZXJIVE1MO1xyXG4gICAgfVxyXG5cclxuICAgIGZvckl0ZXh0KGh0bWwpe1xyXG4gICAgICAgIHJldHVybiBmb3JJdGV4dEZvcm1hdHRlcihodG1sIHx8IHRoaXMuZ2V0RG9jdW1lbnQoKSlcclxuICAgIH1cclxuXHJcbiAgICBsb2FkRG9jdW1lbnQoZGF0YSkge1xyXG4gICAgICAgIGlmICghZGF0YSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHRoaXMuaW5pdGlhbCA9IGRhdGE7XHJcbiAgICAgICAgbGV0IGNvbnRlbnQgPSB0aGlzLnRhcmdldEVsZW1lbnQucXVlcnlTZWxlY3RvcignLmNvbnRlbnQnKTtcclxuICAgICAgICBjb250ZW50LmlubmVySFRNTCA9IHBhZ2VTdHlsZXMgKyBkYXRhO1xyXG4gICAgICAgIGNvbnRlbnQucXVlcnlTZWxlY3RvckFsbCgnLmhlYWRlckJsb2NrLCAudGV4dEJsb2NrLCAuaW1nQmxvY2ssIC50YWJsZUJsb2NrJykuZm9yRWFjaChlbCA9PiB7XHJcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2FkZF9lZGl0b3JfaGVyZScpXHJcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ2NrLWVkaXRvcl9fZWRpdGFibGVfaW5saW5lJylcclxuICAgICAgICB9KVxyXG4gICAgICAgIGxldCB0ZW1wbGF0ZXMgPSBjb250ZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy50ZW1wbGF0ZScpO1xyXG4gICAgICAgIHRlbXBsYXRlcy5mb3JFYWNoKHRwbCA9PiBibG9ja3MuaW5pdFRlbXBsYXRlKHRwbCwgJy5kcm9wem9uZScpKTtcclxuXHJcbiAgICAgICAgY29udGVudC5xdWVyeVNlbGVjdG9yQWxsKCcucGFnZSA+IC50ZW1wbGF0ZScpLmZvckVhY2goYmxvY2sgPT4ge1xyXG4gICAgICAgICAgICBpZighYmxvY2suZmlyc3RDaGlsZClyZXR1cm5cclxuICAgICAgICAgICAgdGhpcy5tYW5hZ2VFeHRyYVJvd3MoYmxvY2suZmlyc3RDaGlsZCk7XHJcbiAgICAgICAgICAgIHRoaXMubWFya0VtcHR5Um93cyhibG9jay5maXJzdENoaWxkKTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBkbmQucHVzaEVsZW1lbnQoY29udGVudC5xdWVyeVNlbGVjdG9yKCcucGFnZScpKTtcclxuICAgICAgICBwYWdlUHJvcGVydGllcy5pbml0UGFnZVByb3BlcnRpZXModGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UGFnZVN0eWxlcygpe1xyXG4gICAgICAgIHJldHVybiBwYWdlU3R5bGVzO1xyXG4gICAgfVxyXG59XHJcblxyXG53aW5kb3cuUGRmRWRpdG9yID0gUGRmRWRpdG9yOyIsImNsYXNzIFRlbXBsYXRlc0ZhY3Rvcnkge1xyXG5cclxuICAgIGNyZWF0ZUJsb2NrcygpIHtcclxuICAgICAgICBsZXQgcm93ID0gYDxkaXYgY2xhc3M9J2Ryb3B6b25lIG9yaWdpbiByb3cnPjwvZGl2PmA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlVGVtcGxhdGUocm93KSArIHRoaXMuY3JlYXRlVGVtcGxhdGUodGhpcy5wYWdlQnJlYWtCbG9jaygpKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgIGNyZWF0ZVRlbXBsYXRlKGNvbnRlbnQsIGNvbCkge1xyXG4gICAgICAgIHJldHVybiBgPGRpdiBjbGFzcz0ndGVtcGxhdGUgJHtjb2w/J2NvbC14cyc6Jyd9Jz4ke2NvbnRlbnR9PC9kaXY+YDtcclxuICAgIH1cclxuXHJcbiAgICAgaW1nQmxvY2soKSB7XHJcbiAgICAgICAgbGV0IHN2ZyA9IGA8c3ZnIHByZXNlcnZlQXNwZWN0UmF0aW89J3hNaWRZTWlkIG1lZXQnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aWR0aD0nMTAwcHgnIGhlaWdodD0nMTAwcHgnIHZpZXdib3g9JzAgMCAxMDAgMTAwJz5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICA8cGF0aCBzdHJva2U9J2JsYWNrJyBmaWxsPSdub25lJyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkPSdNMTAsOTB2LTIwbDMwLC0zMGwxNSwxNWwzNSwtMzV2NzB6IE01LDVoOTB2OTBoLTkweiBNMzAsMTBhMTAsMTAsMCwxLDAsMC4wMDEsMHonPjwvcGF0aD5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPC9zdmc+YDtcclxuICAgICAgICByZXR1cm4gYDxpbWcgZHJhZ2dhYmxlPVwiZmFsc2VcIiBjbGFzcz1cImltZ1wiIHdpZHRoPVwiMTAwcHhcIiBoZWlnaHQ9XCIxMDBweFwiICBzcmM9XCJkYXRhOmltYWdlL3N2Zyt4bWw7YmFzZTY0LCR7YnRvYShzdmcpfVwiID5gO1xyXG4gICAgfVxyXG5cclxuICAgICB0ZXh0QmxvY2soKSB7XHJcbiAgICAgICAgcmV0dXJuIGA8c3Bhbj5cclxuICAgICAgICAgICAgICAgICAgICDQldGB0LvQuCDRgyDQvNC10L3RjyDQvNC90L7Qs9C+INCa0KYg0LXRgdGC0YwsINGPINC40LzQtdGOINC/0YDQsNCy0L4g0L3QvtGB0LjRgtGMINC80LDQu9C40L3QvtCy0YvQtSDRiNGC0LDQvdGLLCBcclxuICAgICAgICAgICAgICAgICAgICDQuCDQv9C10YDQtdC00L4g0LzQvdC+0Lkg0Lgg0L/QsNGG0LDQuiDQtNC+0LvQttC10L0gMiDRgNCw0LfQsCDQv9GA0LjRgdC10LTQsNGC0YwsINC4INGH0LDRgtC70LDQvdC40L0g0LrRgyDQtNC10LvQsNGC0YwsIFxyXG4gICAgICAgICAgICAgICAgICAgINC4INGN0YbQuNC70L7QvyDQvNC10L3RjyDQvdC1INC40LzQtdC10YIg0L/RgNCw0LLQsCDQsdC40YLRjCDQv9C+INC90L7Rh9Cw0LwsINC90LjQutC+0LPQtNCwIVxyXG4gICAgICAgICAgICAgICAgPC9zcGFuPmBcclxuICAgIH1cclxuXHJcbiAgICAgdGFibGVCbG9jaygpIHtcclxuICAgICAgICBsZXQgdCA9IHRoaXMudGQoKTtcclxuICAgICAgICB0ICs9IHQgKyB0ICsgdDtcclxuICAgICAgICB0ID0gYDx0cj4ke3R9PC90cj5gO1xyXG4gICAgICAgIHQgKz0gdCArIHQ7XHJcbiAgICAgICAgcmV0dXJuIGA8dGFibGUgc3R5bGU9XCJib3JkZXI6IDEuNXB4IHNvbGlkXCI+PHRib2R5PiR7dH08L3Rib2R5PjwvdGFibGU+YFxyXG4gICAgfVxyXG5cclxuICAgIHRkKCkge1xyXG4gICAgICAgIHJldHVybiBgPHRkIHN0eWxlPVwiYm9yZGVyOiAxLjVweCBzb2xpZFwiPjwvdGQ+YFxyXG4gICAgfVxyXG5cclxuICAgICBoZWFkZXJCbG9jaygpIHtcclxuICAgICAgICByZXR1cm4gYDxwIHN0eWxlPVwidGV4dC1hbGlnbjpjZW50ZXI7XCI+PHNwYW4gY2xhc3M9XCJ0ZXh0LWh1Z2VcIj48c3Ryb25nPtCX0LDQs9C+0LvQvtCy0L7Qujwvc3Ryb25nPjwvc3Bhbj48L3A+YDtcclxuICAgIH1cclxuXHJcbiAgICAgcGFnZUJyZWFrQmxvY2soKSB7XHJcbiAgICAgICAgcmV0dXJuIGA8ZGl2IGNsYXNzPVwicGFnZS1icmVha1wiIHN0eWxlPVwicGFnZS1icmVhay1hZnRlcjogYWx3YXlzXCI+0YDQsNC30YDRi9CyINGB0YLRgNCw0L3QuNGG0Ys8L2Rpdj5gO1xyXG4gICAgfVxyXG5cclxuICAgICBjcmVhdGVFbGVtZW50cygpIHtcclxuICAgICAgICByZXR1cm4gIFtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXJCbG9jayxcclxuICAgICAgICAgICAgdGhpcy50ZXh0QmxvY2ssXHJcbiAgICAgICAgICAgIHRoaXMuaW1nQmxvY2ssXHJcbiAgICAgICAgICAgIHRoaXMudGFibGVCbG9ja1xyXG4gICAgICAgIF0ubWFwKGZuID0+IHtcclxuICAgICAgICAgICAgbGV0IGNvbnRlbnQgPSBgPGRpdiBjbGFzcz1cIiR7Zm4ubmFtZX0gYWRkX2VkaXRvcl9oZXJlXCI+JHtmbi5jYWxsKHRoaXMpfTwvZGl2PmA7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNyZWF0ZVRlbXBsYXRlKGNvbnRlbnQsIHRydWUpXHJcbiAgICAgICAgfSkuam9pbignJylcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBUZW1wbGF0ZXNGYWN0b3J5OyIsImxldCB0ZW1wbGF0ZXMgPSB7XHJcblxyXG4gICAgYmxvY2tfbmFtZSA6IGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwic3ViLWxhYmVsXCI+0J3QsNC30LLQsNC90LjQtSDQsdC70L7QutCwPC9kaXY+XHJcbiAgICAgICAgPGlucHV0IHR5cGU9XCJ0ZXh0XCIgaWQ9XCJibG9ja19uYW1lXCI+XHJcbiAgICBgLFxyXG5cclxuICAgIGJsb2NrX2Rlc2NyIDogYFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJzdWItbGFiZWxcIj7QntC/0LjRgdCw0L3QuNC1INCx0LvQvtC60LA8L2Rpdj5cclxuICAgICAgICA8dGV4dGFyZWEgaWQ9XCJibG9ja19kZXNjclwiPjwvdGV4dGFyZWE+XHJcbiAgICBgLFxyXG5cclxuICAgIGJsb2NrX25vX2VkaXQ6IGBcclxuICAgICAgICA8YnI+XHJcbiAgICAgICAgPGlucHV0IGlkPVwiYmxvY2tfbm9fZWRpdFwiIHR5cGU9XCJjaGVja2JveFwiPlxyXG4gICAgICAgIDxsYWJlbCBmb3I9XCJibG9ja19ub19lZGl0XCIgY2xhc3M9XCJzdWItbGFiZWxcIj7QoNCw0LfRgNC10YjQuNGC0Ywg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjQtTwvbGFiZWw+XHJcbiAgICBgLFxyXG4gICAgYmxvY2tfbm9fbW92ZTogYFxyXG4gICAgICAgIDxicj5cclxuICAgICAgICA8aW5wdXQgaWQ9XCJibG9ja19ub19tb3ZlXCIgdHlwZT1cImNoZWNrYm94XCI+XHJcbiAgICAgICAgPGxhYmVsIGZvcj1cImJsb2NrX25vX21vdmVcIiBjbGFzcz1cInN1Yi1sYWJlbFwiPtCg0LDQt9GA0LXRiNC40YLRjCDQv9C10YDQtdC80LXRidC10L3QuNC1PC9sYWJlbD4gICAgIFxyXG4gICAgYCxcclxuXHJcbiAgICBibG9ja19ub19jb3B5OiBgXHJcbiAgICAgICAgPGJyPlxyXG4gICAgICAgIDxpbnB1dCBpZD1cImJsb2NrX25vX2NvcHlcIiB0eXBlPVwiY2hlY2tib3hcIj5cclxuICAgICAgICA8bGFiZWwgZm9yPVwiYmxvY2tfbm9fY29weVwiICBjbGFzcz1cInN1Yi1sYWJlbFwiPtCg0LDQt9GA0LXRiNC40YLRjCDQutC+0L/QuNGA0L7QstCw0L3QuNC1PC9sYWJlbD5cclxuICAgIGAsXHJcbiAgICBibG9ja19hdHRhY2hfYnV0dG9uOmBcclxuICAgICAgICA8YnI+XHJcbiAgICAgICAgPGJyPlxyXG4gICAgICAgIDxidXR0b24+0J/RgNC40LrRgNC10L/QuNGC0Ywg0LjQtyDQsdCw0LfRizwvYnV0dG9uPlxyXG4gICAgYFxyXG59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHJcbiAgICBodG1sVGVtcGxhdGU6IHByb3BlcnRpZXMgPT4gYFxyXG4gICAgICAgICA8ZGl2IHN0eWxlPVwicGFkZGluZzogIDAgMTBweDsgY29sb3I6d2hpdGU7IHdpZHRoOjEwMCVcIj5cclxuICAgICAgICAgICAgJHtPYmplY3QuZW50cmllcyhwcm9wZXJ0aWVzLmJsb2NrUHJvcGVydGllcykubWFwKHByb3BlcnR5QmxvY2spLmpvaW4oJycpfVxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgYCxcclxuXHJcbn07XHJcblxyXG5mdW5jdGlvbiBwcm9wZXJ0eUJsb2NrKGVudHJ5KSB7XHJcbiAgICByZXR1cm4gZW50cnlbMV0gIT09IGZhbHNlID8gdGVtcGxhdGVzW2VudHJ5WzBdXSA6ICcnO1xyXG59IiwiXHJcbmxldCAgZG9jdW1lbnRDbGVhbmVyID0gcmVxdWlyZShcIi4vZG9jdW1lbnRDbGVhbmVyXCIpXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG5cclxuICAgIHBkZkVkaXRvcjogbnVsbCxcclxuXHJcbiAgICBuZXdCbG9ja05hbWVUZXh0OiAn0J3QvtCy0YvQuSDQsdC70L7QuiAnLFxyXG5cclxuICAgIHByb3BlcnR5S2V5czoge1xyXG4gICAgICAgIGJsb2NrX25hbWU6ICdibG9ja19uYW1lJyxcclxuICAgICAgICBibG9ja19kZXNjcjogJ2Jsb2NrX2Rlc2NyJyxcclxuICAgICAgICBibG9ja19ub19lZGl0OiAnYmxvY2tfbm9fZWRpdCcsXHJcbiAgICAgICAgYmxvY2tfbm9fbW92ZTogJ2Jsb2NrX25vX21vdmUnLFxyXG4gICAgICAgIGJsb2NrX25vX2NvcHk6ICdibG9ja19ub19jb3B5JyxcclxuICAgIH0sXHJcblxyXG4gICAgaW5pdEJsb2NrcyhwZGZFZGl0b3Ipe1xyXG4gICAgICAgIHRoaXMucGRmRWRpdG9yID0gcGRmRWRpdG9yO1xyXG4gICAgICAgIHRoaXMuaW5pdEJsb2NrRWRpdG9ycygpXHJcbiAgICB9LFxyXG5cclxuICAgIGhhbmRsZUNsaWNrKGVsKSB7XHJcbiAgICAgICAgbGV0IHBkZkVkaXRvciA9IHRoaXMucGRmRWRpdG9yO1xyXG5cclxuICAgICAgICBpZiAoIXBkZkVkaXRvci5wcm9wZXJ0aWVzLnByb3BlcnRpZXNQYWdlKVxyXG4gICAgICAgICAgICByZXR1cm5cclxuXHJcbiAgICAgICAgaWYgKCFlbCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQga2V5cyA9IHRoaXMucHJvcGVydHlLZXlzO1xyXG5cclxuICAgICAgICBba2V5cy4gYmxvY2tfbmFtZSwga2V5cy4gYmxvY2tfZGVzY3JdLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgaWYgKHBkZkVkaXRvci5wcm9wZXJ0aWVzLmJsb2NrUHJvcGVydGllc1trZXldKVxyXG4gICAgICAgICAgICAgICAgcGRmRWRpdG9yLnRhcmdldEVsZW1lbnQucXVlcnlTZWxlY3RvcignIycra2V5KS52YWx1ZSA9IGVsLmdldEF0dHJpYnV0ZShrZXkpXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIFtrZXlzLiBibG9ja19ub19lZGl0LCBrZXlzLiBibG9ja19ub19tb3ZlLCBrZXlzLmJsb2NrX25vX2NvcHldLmZvckVhY2goa2V5ID0+IHtcclxuICAgICAgICAgICAgaWYgKHBkZkVkaXRvci5wcm9wZXJ0aWVzLmJsb2NrUHJvcGVydGllc1trZXldKVxyXG4gICAgICAgICAgICAgICAgcGRmRWRpdG9yLnRhcmdldEVsZW1lbnQucXVlcnlTZWxlY3RvcignIycra2V5KS5jaGVja2VkID0gXCJ0cnVlXCIgIT09IGVsLmdldEF0dHJpYnV0ZShrZXkpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICBjb3B5QmxvY2soZSkge1xyXG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgbGV0IHRwbCA9IGUudGFyZ2V0LmNsb3Nlc3QoJy50ZW1wbGF0ZScpO1xyXG4gICAgICAgIGxldCBjbG9uZWQgPSB0cGwuY2xvbmVOb2RlKHRydWUpO1xyXG5cclxuICAgICAgICB0cGwucGFyZW50RWxlbWVudC5pbnNlcnRCZWZvcmUoY2xvbmVkLCB0cGwpO1xyXG4gICAgICAgIHRwbC5wYXJlbnRFbGVtZW50Lmluc2VydEJlZm9yZSh0cGwsIGNsb25lZCk7IC8vIHN0dXBpZCBoYWNrXHJcbiAgICAgICAgY2xvbmVkLmlkID0gXCJcIjtcclxuICAgICAgICBsZXQgbmFtZSA9IHRoaXMucHJvcGVydHlLZXlzLmJsb2NrX25hbWU7XHJcbiAgICAgICAgY2xvbmVkLnNldEF0dHJpYnV0ZShuYW1lLCBjbG9uZWQuZ2V0QXR0cmlidXRlKG5hbWUpICsgJyDQutC+0L/QuNGPJylcclxuICAgICAgICB0aGlzLmluaXRUZW1wbGF0ZShjbG9uZWQsICcuZHJvcHpvbmUnKTtcclxuXHJcbiAgICAgICAgY2xvbmVkLnF1ZXJ5U2VsZWN0b3JBbGwoJ2Rpdi5hZGRfZWRpdG9yX2hlcmUnKS5mb3JFYWNoKGVsID0+e1xyXG4gICAgICAgICAgICBlbC5jbGFzc0xpc3QucmVtb3ZlKCdpbml0aWFsaXplZCcpO1xyXG4gICAgICAgICAgICB0aGlzLnBkZkVkaXRvci5pbml0RWRpdG9yKGVsKTtcclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBkb2N1bWVudENsZWFuZXIucmVtb3ZlSW1hZ2VXaWRnZXRUZXh0KGNsb25lZCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGluaXRUZW1wbGF0ZShlbCwgZHJvcFpvbmVTZWxlY3Rvcikge1xyXG4gICAgICAgIGlmIChlbC5xdWVyeVNlbGVjdG9yKCcuZHJvcHpvbmUnKSkge1xyXG5cclxuICAgICAgICAgICAgaWYgKCFlbC5pZClcclxuICAgICAgICAgICAgICAgIGVsLmlkID0gJ2Jsb2NrXycgKyB0aGlzLnJuZCgpICsgdGhpcy5ybmQoKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBuYW1lID0gdGhpcy5wcm9wZXJ0eUtleXMuYmxvY2tfbmFtZTtcclxuICAgICAgICAgICAgaWYgKCFlbC5nZXRBdHRyaWJ1dGUobmFtZSkpXHJcbiAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUobmFtZSwgdGhpcy5maW5kTmV4dE51bWJlcigpKTtcclxuXHJcbiAgICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5wZGZFZGl0b3IuY2xpY2tPbkJsb2NrKGVsKSk7XHJcbiAgICAgICAgICAgIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoZHJvcFpvbmVTZWxlY3RvcikuZm9yRWFjaChkeiA9PiB0aGlzLnBkZkVkaXRvci5pbml0RHooZHopKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnBkZkVkaXRvci5pbml0RWRpdG9yKGVsLnF1ZXJ5U2VsZWN0b3IoJ2Rpdi5hZGRfZWRpdG9yX2hlcmUnKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBybmQoKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cmluZygyKTtcclxuICAgIH0sXHJcblxyXG4gICAgZmluZE5leHROdW1iZXIoKSB7XHJcbiAgICAgICAgbGV0IG51bWJlcnMgPSBbLi4udGhpcy5wZGZFZGl0b3IudGFyZ2V0RWxlbWVudCAucXVlcnlTZWxlY3RvckFsbCgnLnBhZ2UgPiAudGVtcGxhdGUnKV0ubWFwKGVsID0+IHtcclxuICAgICAgICAgICAgbGV0IG5hbWUgPSBlbC5nZXRBdHRyaWJ1dGUodGhpcy5wcm9wZXJ0eUtleXMuYmxvY2tfbmFtZSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuYW1lICYmIHBhcnNlSW50KG5hbWUuc3BsaXQodGhpcy5uZXdCbG9ja05hbWVUZXh0KS5wb3AoKSk7XHJcbiAgICAgICAgfSkuZmlsdGVyKG4gPT4gbik7XHJcbiAgICAgICAgbGV0IGkgPSAxO1xyXG4gICAgICAgIGZvciAoOyBpIDwgMWU1OyBpKyspXHJcbiAgICAgICAgICAgIGlmIChudW1iZXJzLmluZGV4T2YoaSkgPT09IC0xKVxyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubmV3QmxvY2tOYW1lVGV4dCArIGk7XHJcbiAgICB9LFxyXG5cclxuICAgIGluaXRCbG9ja0VkaXRvcnMoKSB7XHJcbiAgICAgICAgbGV0ICBwZGZFZGl0b3IgPSB0aGlzLnBkZkVkaXRvcjtcclxuICAgICAgICBpZiAoIXBkZkVkaXRvci5wcm9wZXJ0aWVzLnByb3BlcnRpZXNQYWdlKVxyXG4gICAgICAgICAgICByZXR1cm5cclxuXHJcbiAgICAgICAgT2JqZWN0LnZhbHVlcyh0aGlzLnByb3BlcnR5S2V5cykuZm9yRWFjaChmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICAgICAgaWYgKHBkZkVkaXRvci5wcm9wZXJ0aWVzLmJsb2NrUHJvcGVydGllc1tpZF0pXHJcbiAgICAgICAgICAgICAgICBwZGZFZGl0b3IudGFyZ2V0RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjJytpZCkub25pbnB1dCA9IG9uSW5wdXQ7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGZ1bmN0aW9uIG9uSW5wdXQoKSB7XHJcbiAgICAgICAgICAgIGlmICghcGRmRWRpdG9yLnNlbGVjdGVkQmxvY2sgfHwgIXBkZkVkaXRvci5wcm9wZXJ0aWVzLmJsb2NrUHJvcGVydGllc1t0aGlzLmlkXSlcclxuICAgICAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhzZWxmLnNlbGVjdGVkRHJvcHpvbmUpXHJcbiAgICAgICAgICAgIHBkZkVkaXRvci5zZWxlY3RlZEJsb2NrLnNldEF0dHJpYnV0ZSh0aGlzLmlkLFxyXG4gICAgICAgICAgICAgICAgdGhpcy50eXBlID09PSAnY2hlY2tib3gnID8gIXRoaXMuY2hlY2tlZCA6IHRoaXMudmFsdWVcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgaWYgKHRoaXMuaWQgIT09ICdibG9ja19ub19lZGl0JylcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgcGRmRWRpdG9yLnNlbGVjdGVkQmxvY2tcclxuICAgICAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCcuYWRkX2VkaXRvcl9oZXJlJylcclxuICAgICAgICAgICAgICAgIC5mb3JFYWNoKGVsID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5jaGVja2VkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScsIHRydWUpXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NvbnRlbnRlZGl0YWJsZScpXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuIiwicmVxdWlyZSgnLi4vLi4vbm9kZV9tb2R1bGVzL2RyYWd1bGEvZGlzdC9kcmFndWxhLm1pbi5jc3MnKTtcclxubGV0IGRyYWd1bGEgPSByZXF1aXJlKCdkcmFndWxhJyk7XHJcbmxldCBibG9ja3MgPSByZXF1aXJlKCcuL2Jsb2NrcycpO1xyXG5cclxubGV0IGRyYWtlO1xyXG5sZXQgcGRmRWRpdG9yO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIGluaXREbkQocGRmRWRpdG9ySW5zdGFuY2UpIHtcclxuICAgICAgICBwZGZFZGl0b3IgPSBwZGZFZGl0b3JJbnN0YW5jZTtcclxuICAgICAgICBkcmFrZSA9IGRyYWd1bGEoW1xyXG4gICAgICAgICAgICBwZGZFZGl0b3IudGFyZ2V0RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcjYmxvY2tzJyksXHJcbiAgICAgICAgICAgIHBkZkVkaXRvci50YXJnZXRFbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlbGVtZW50cycpLFxyXG4gICAgICAgICAgICBwZGZFZGl0b3IudGFyZ2V0RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucGFnZScpXHJcbiAgICAgICAgXSwge1xyXG4gICAgICAgICAgICByZW1vdmVPblNwaWxsOiB0cnVlLFxyXG4gICAgICAgICAgICBjb3B5OiBmdW5jdGlvbiAoZWwsIHNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHNvdXJjZS5jbGFzc0xpc3QuY29udGFpbnMoJ3RlbXBsYXRlcycpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhY2NlcHRzOiAoZWwsIHRhcmdldCkgPT4gZHJvcEFjY2VwdHMoZWwsIHRhcmdldCksXHJcbiAgICAgICAgICAgIG1vdmVzOiBmdW5jdGlvbiAoZWwsIGNvbnRhaW5lciwgaGFuZGxlKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFuZGxlLmNsYXNzTGlzdC5jb250YWlucygnaGFuZGxlJykgfHxcclxuICAgICAgICAgICAgICAgICAgICBjb250YWluZXIuY2xhc3NMaXN0LmNvbnRhaW5zKCd0ZW1wbGF0ZXMnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBkcmFrZS5vbignZHJhZycsIGUgPT4gZHJhZ1N0YXJ0KGUpKTtcclxuICAgICAgICBkcmFrZS5vbignZHJvcCcsIChlbCwgdGFyZ2V0KSA9PiBoYW5kbGVEcm9wKGVsLCB0YXJnZXQpKTtcclxuICAgIH0sXHJcbiAgICBwdXNoRWxlbWVudChlbGVtZW50KSB7XHJcbiAgICAgICAgZHJha2UuY29udGFpbmVycy5wdXNoKGVsZW1lbnQpXHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlRWxlbWVudChlbGVtZW50KSB7XHJcbiAgICAgICAgZHJha2UuY29udGFpbmVycy5zcGxpY2UoIGRyYWtlLmNvbnRhaW5lcnMuaW5kZXhPZihlbGVtZW50KSwgMSApO1xyXG4gICAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gZHJhZ1N0YXJ0KGUpe1xyXG5cclxufVxyXG5cclxuZnVuY3Rpb24gZHJvcEFjY2VwdHMoZWwsIHRhcmdldCkge1xyXG4gICAgbGV0IHQgPSB0YXJnZXQuY2xhc3NMaXN0O1xyXG4gICAgaWYgKHQuY29udGFpbnMoJ3RlbXBsYXRlcycpKVxyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGlmIChlbC5xdWVyeVNlbGVjdG9yKCcuZHJvcHpvbmUnKSB8fCBlbC5xdWVyeVNlbGVjdG9yKCcucGFnZS1icmVhaycpKSB7XHJcbiAgICAgICAgcmV0dXJuIHQuY29udGFpbnMoJ3BhZ2UnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbGV0IGNhbkVkaXQgPSB0LmNvbnRhaW5zKCdkcm9wem9uZScpICYmXHJcbiAgICAgICAgICAgIHRhcmdldC5wYXJlbnROb2RlLmdldEF0dHJpYnV0ZSgnYmxvY2tfbm9fZWRpdCcpICE9PSAndHJ1ZSc7XHJcbiAgICAgICAgY2FuRWRpdCAmJiBwZGZFZGl0b3IubWFuYWdlSG92ZXJTdGF0ZSh0YXJnZXQucGFyZW50Tm9kZSwgdHJ1ZSk7XHJcbiAgICAgICAgcmV0dXJuIGNhbkVkaXQ7XHJcbiAgICB9XHJcbn1cclxuXHJcblxyXG5mdW5jdGlvbiBoYW5kbGVEcm9wKGVsLCB0YXJnZXQpIHtcclxuICAgIGlmICghdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncGFnZScpKXtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgcGRmRWRpdG9yLmNsZWFyTm90TmVlZGVkUm93cyh0YXJnZXQpO1xyXG4gICAgICAgICAgICBwZGZFZGl0b3IubWFuYWdlRXh0cmFSb3dzKHRhcmdldCk7XHJcbiAgICAgICAgICAgIHBkZkVkaXRvci5tYXJrRW1wdHlSb3dzKHRhcmdldCk7XHJcbiAgICAgICAgfSwgMTApO1xyXG4gICAgfVxyXG4gICAgcGRmRWRpdG9yLmNsaWNrT25CbG9jayhwZGZFZGl0b3Iuc2VsZWN0ZWRCbG9jaylcclxuICAgIGJsb2Nrcy5pbml0VGVtcGxhdGUoZWwsICcub3JpZ2luJyk7XHJcbn1cclxuXHJcbiIsIm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgY2xlYW46IGZ1bmN0aW9uIChwYWdlQ29udGVudCkge1xyXG4gICAgICAgIGxldCB0bXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICB0bXAuaW5uZXJIVE1MID0gcGFnZUNvbnRlbnQ7XHJcbiAgICAgICAgcmVtb3ZlRWxlbWVudHModG1wKTtcclxuICAgICAgICBjbGVhbkNsYXNzZXModG1wKTtcclxuICAgICAgICBjbGVhbkF0dHJpYnV0ZXModG1wKTtcclxuICAgICAgICByZW1vdmVFbXB0eUNsYXNzQXR0cih0bXApO1xyXG4gICAgICAgIHJlbW92ZUltYWdlV2lkZ2V0VGV4dCh0bXApO1xyXG4gICAgICAgIC8vIHB1bGxVcEZpZ3VyZVRhZ0NoaWxkcmVuKHRtcClcclxuICAgICAgICAvLyBjb25zb2xlLmxvZyh0bXAuaW5uZXJIVE1MKVxyXG4gICAgICAgIHJldHVybiB0bXA7XHJcbiAgICB9LFxyXG4gICAgcmVtb3ZlSW1hZ2VXaWRnZXRUZXh0XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZUVtcHR5Q2xhc3NBdHRyKHRtcCkge1xyXG4gICAgdG1wLnF1ZXJ5U2VsZWN0b3JBbGwoYFtjbGFzcz1cIlwiXWApXHJcbiAgICAgICAgLmZvckVhY2goZWwgPT4gZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpKTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlRWxlbWVudHModG1wKSB7XHJcbiAgICB0bXAucXVlcnlTZWxlY3RvckFsbChbXHJcbiAgICAgICAgJ3N0eWxlJyxcclxuICAgICAgICAnLmNrLXdpZGdldF9fc2VsZWN0aW9uLWhhbmRsZScsXHJcbiAgICAgICAgJy5jay13aWRnZXRfX3Jlc2l6ZXInLFxyXG4gICAgICAgICcuZHotYnV0dG9ucycsXHJcbiAgICAgICAgJy50ZW1wbGF0ZS1idXR0b25zJyxcclxuICAgICAgICAnLmVtcHR5LWRyb3Atem9uZTpmaXJzdC1jaGlsZCcsXHJcbiAgICAgICAgJy5lbXB0eS1kcm9wLXpvbmU6bGFzdC1jaGlsZCdcclxuICAgIF0uam9pbignLCAnKSkuZm9yRWFjaChlbCA9PiBlbC5yZW1vdmUoKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNsZWFuQ2xhc3Nlcyh0bXApIHtcclxuICAgIFtcclxuICAgICAgICAnaW5pdGlhbGl6ZWQnLFxyXG4gICAgICAgICdjay1ibHVycmVkJyxcclxuICAgICAgICAnY2snLFxyXG4gICAgICAgICdjay1jb250ZW50JyxcclxuICAgICAgICAnY2stZWRpdG9yX19lZGl0YWJsZScsXHJcbiAgICAgICAgJ2NrLXJvdW5kZWQtY29ybmVycycsXHJcbiAgICAgICAgJ2NrLWVkaXRvcl9fZWRpdGFibGVfaW5saW5lJyxcclxuICAgICAgICAnY2stZWRpdG9yX19uZXN0ZWQtZWRpdGFibGUnLFxyXG4gICAgICAgICdjay13aWRnZXQnLFxyXG4gICAgICAgICdjay13aWRnZXRfd2l0aC1yZXNpemVyJyxcclxuICAgICAgICAnY2std2lkZ2V0X3NlbGVjdGVkJyxcclxuICAgICAgICAnY2std2lkZ2V0X3dpdGgtc2VsZWN0aW9uLWhhbmRsZScsXHJcbiAgICAgICAgJ2FkZF9lZGl0b3JfaGVyZSdcclxuICAgIF0uZm9yRWFjaChjID0+IHRtcC5xdWVyeVNlbGVjdG9yQWxsKCcuJyArIGMpXHJcbiAgICAgICAgLmZvckVhY2goZWwgPT4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKSkpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBjbGVhbkF0dHJpYnV0ZXModG1wKSB7XHJcbiAgICBbXHJcbiAgICAgICAgJ2FyaWEtbGFiZWwnLFxyXG4gICAgICAgICdjb250ZW50ZWRpdGFibGUnLFxyXG4gICAgICAgICdyb2xlJyxcclxuICAgICAgICAnbGFuZycsXHJcbiAgICAgICAgJ2RpcicsXHJcbiAgICAgICAgJ2RhdGEtY2tlLWZpbGxlcidcclxuICAgIF0uZm9yRWFjaChhdHRyID0+IHRtcC5xdWVyeVNlbGVjdG9yQWxsKGBbJHthdHRyfV1gKVxyXG4gICAgICAgIC5mb3JFYWNoKGVsID0+IGVsLnJlbW92ZUF0dHJpYnV0ZShhdHRyKSkpXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZUltYWdlV2lkZ2V0VGV4dCh0bXApIHtcclxuICAgIHRtcC5xdWVyeVNlbGVjdG9yQWxsKCdwLCBkaXYnKVxyXG4gICAgICAgIC5mb3JFYWNoKGVsID0+IGVsLmlubmVySFRNTCA9PT0gJ9CS0LjQtNC20LXRgiDQuNC30L7QsdGA0LDQttC10L3QuNC5JyAmJiBlbC5yZW1vdmUoKSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHB1bGxVcEZpZ3VyZVRhZ0NoaWxkcmVuKHRtcCkge1xyXG4gICAgdG1wLnF1ZXJ5U2VsZWN0b3JBbGwoJ2ZpZ3VyZScpXHJcbiAgICAgICAgLmZvckVhY2goZiA9PiB7XHJcbiAgICAgICAgICAgIGYucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoZi5maXJzdENoaWxkLCBmKTtcclxuICAgICAgICAgICAgZi5yZW1vdmUoKVxyXG4gICAgICAgIH0pXHJcblxyXG59IiwibGV0IHRhYnMgPSByZXF1aXJlKCcuL3RhYnMnKVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBwcm9wZXJ0aWVzID0+IGBcclxuXHJcbiAgICAke3JlcXVpcmUoJy4vbW91c2VvdmVyQnV0dG9ucycpLnN0eWxlcyhwcm9wZXJ0aWVzKX1cclxuICAgIFxyXG4gICAgJHt0YWJzLnN0eWxlcyhwcm9wZXJ0aWVzKX1cclxuICAgIFxyXG4gICAgPGRpdiBjbGFzcz1cInBkZi1lZGl0b3Igd3JhcHBlclwiPlxyXG4gICAgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cInNpZGVQYW5lbCBiZzFcIj5cclxuICAgICAgICBcclxuICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAke3RhYnMuY3JlYXRlVGViKCdzdHJ1Y3R1cmUnLCAn0KHRgtGA0YPQutGC0YPRgNCwJywgdHJ1ZSl9XHJcbiAgICAgICAgICAgICAgICAke3RhYnMuY3JlYXRlVGViKCdwcm9wZXJ0aWVzJywgJ9Ch0LLQvtC50YHRgtCy0LAnKX1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBkZi1lZGl0b3ItdGFiLWNvbnRlbnQgc3RydWN0dXJlXCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImdyb3VwTmFtZVwiPtCR0LvQvtC60Lg8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiYmxvY2tzXCIgY2xhc3M9XCJ0ZW1wbGF0ZXNcIj48L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZ3JvdXBOYW1lXCI+0K3Qu9C10LzQtdC90YLRizwvZGl2PlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJlbGVtZW50c1wiIGNsYXNzPVwidGVtcGxhdGVzXCI+PC9kaXY+XHJcbiAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBkZi1lZGl0b3ItdGFiLWNvbnRlbnQgcHJvcGVydGllc1wiPlxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJncm91cE5hbWVcIj7QodCy0L7QudGB0YLQstCwINGB0YLRgNCw0L3QuNGG0Ys8L2Rpdj5cclxuICAgICAgICAgICAgICAgICAgICAke3JlcXVpcmUoJy4vcGFnZVByb3BlcnRpZXMnKS5odG1sVGVtcGxhdGUocHJvcGVydGllcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgJHtwcm9wZXJ0aWVzLnByb3BlcnRpZXNQYWdlID8gYFxyXG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZ3JvdXBOYW1lXCI+0KHQstC+0LnRgdGC0LLQsCDQsdC70L7QutCwPC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR7cmVxdWlyZSgnLi9ibG9ja1Byb3BlcnRpZXMnKS5odG1sVGVtcGxhdGUocHJvcGVydGllcyl9XHJcbiAgICAgICAgICAgICAgICAgICAgYCA6ICcnfVxyXG4gICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICA8L2Rpdj4gXHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgXHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNvbnRlbnRcIj5cclxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBhZ2UgY29udGFpbmVyXCI+JHtyZXF1aXJlKCcuL3BhZ2Utc3R5bGVzJyl9PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcblxyXG4gICAgICAgICR7cmVxdWlyZSgnLi9zdmdPdmVybGF5L3N2Z092ZXJsYXknKS5odG1sVGVtcGxhdGUocHJvcGVydGllcyl9XHJcblxyXG4gICAgPC9kaXY+XHJcbmA7XHJcbiIsImxldCBJY29ucyA9IHJlcXVpcmUoJy4vSWNvbnMnKTtcclxubGV0IGJsb2NrcyA9IHJlcXVpcmUoJy4vYmxvY2tzJyk7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICAgIG1hbmFnZTogZnVuY3Rpb24oZSwgcGRmRWRpdG9yKSB7XHJcbiAgICAgICAgaWYgKGUudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygnaGFuZGxlJykpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBlbGVtZW50QnV0dG9ucyhlLCBwZGZFZGl0b3IsIGJsb2NrQnV0dG9ucyhlLCBwZGZFZGl0b3IpKTtcclxuICAgIH0sXHJcbiAgICBzdHlsZXM6IHByb3BzID0+IGBcclxuICAgICAgICA8c3R5bGU+XHJcbiAgICAgICAgICAgIC5wZGYtZWRpdG9yIC5wYWdlIC50ZW1wbGF0ZTpob3ZlciAgLmR6LWJ1dHRvbnMsXHJcbiAgICAgICAgICAgIC5wZGYtZWRpdG9yIC5wYWdlIC50ZW1wbGF0ZTpob3ZlciAgLnRlbXBsYXRlLWJ1dHRvbnMge1xyXG4gICAgICAgICAgICAgICAgb3BhY2l0eTogMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgIC5kei1idXR0b25zLCAudGVtcGxhdGUtYnV0dG9ucyB7XHJcbiAgICAgICAgICAgICAgICB6LWluZGV4OiAxMTE7XHJcbiAgICAgICAgICAgIH0gXHJcbiAgICAgICAgICAgIC5kei1idXR0b25zID4gZGl2IHtcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKCR7NjArcHJvcHMuYnV0dG9uc1NpemV9cHgsMCk7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNTBweDtcclxuICAgICAgICAgICAgICAgIHVzZXItc2VsZWN0OiBub25lO1xyXG4gICAgICAgICAgICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XHJcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5kei1idXR0b25zIHN2ZywgLnRlbXBsYXRlLWJ1dHRvbnMgc3Zne1xyXG4gICAgICAgICAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGl2LmR6LWJ1dHRvbnMge1xyXG4gICAgICAgICAgICAgICAgbWFyZ2luLWxlZnQ6IDcwMHB4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC5kei1idXR0b25zLCAudGVtcGxhdGUtYnV0dG9ucyB7XHJcbiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwO1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xyXG4gICAgICAgICAgICAgICAgb3ZlcmZsb3c6IHZpc2libGU7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogMHB4O1xyXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiAwcHg7XHJcbiAgICAgICAgICAgICAgICBsaW5lLWhlaWdodDowO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC50ZW1wbGF0ZS1idXR0b25zIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKCR7LTEwLXByb3BzLmJ1dHRvbnNTaXplfXB4LCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAudGVtcGxhdGUtYnV0dG9ucyA+IGRpdiB7XHJcbiAgICAgICAgICAgICAgICB3aWR0aDogNDBweDtcclxuICAgICAgICAgICAgICAgIGhlaWdodDogNjBweDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIDwvc3R5bGU+XHJcbiAgICBgXHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJsb2NrQnV0dG9ucyhlLCBwZGZFZGl0b3IpIHtcclxuICAgIGxldCBzaXplID0gcGRmRWRpdG9yLnByb3BlcnRpZXMuYnV0dG9uc1NpemVcclxuICAgIGxldCBjbG9zZXN0RHogPSBlLnRhcmdldC5jbG9zZXN0KCcucGFnZSAudGVtcGxhdGU6bm90KC5jb2wteHMpJyk7XHJcbiAgICBjbG9zZXN0RHogPSBjbG9zZXN0RHogfHwgZS50YXJnZXQuY2xcclxuICAgIGlmIChjbG9zZXN0RHogIT09IHBkZkVkaXRvci5tb3VzZU92ZXJEeikge1xyXG4gICAgICAgIHBkZkVkaXRvci5yZW1vdmVCeVNlbCgnLmR6LWJ1dHRvbnMnKTtcclxuICAgICAgICBwZGZFZGl0b3IubW91c2VPdmVyRHogPSBjbG9zZXN0RHo7XHJcbiAgICAgICAgaWYgKGNsb3Nlc3REeikge1xyXG4gICAgICAgICAgICBsZXQgdGIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgdGIuY2xhc3NMaXN0LmFkZCgnZHotYnV0dG9ucycpO1xyXG5cclxuICAgICAgICAgICAgbGV0IGNhbk1vdmUgPSBjbG9zZXN0RHouZ2V0QXR0cmlidXRlKCdibG9ja19ub19tb3ZlJykgIT09ICd0cnVlJztcclxuICAgICAgICAgICAgbGV0IGNhbkNvcHkgPSBjbG9zZXN0RHouZ2V0QXR0cmlidXRlKCdibG9ja19ub19jb3B5JykgIT09ICd0cnVlJztcclxuICAgICAgICAgICAgaWYgKGUudGFyZ2V0LnF1ZXJ5U2VsZWN0b3IoJy5wYWdlLWJyZWFrJykpXHJcbiAgICAgICAgICAgICAgICBjYW5Db3B5ID0gMDtcclxuICAgICAgICAgICAgdGIuaW5uZXJIVE1MID0gYFxyXG4gICAgICAgICAgICAgICAgICAgIDxkaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR7Y2FuTW92ZSA/IGA8c3BhbiBjbGFzcz0naGFuZGxlJz4ke0ljb25zLm1vdmUoc2l6ZSwgc2l6ZSl9PC9zcGFuPmAgOiAnJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHtjYW5Db3B5ID8gYDxzcGFuIGNsYXNzPSdjb3B5Jz4ke0ljb25zLmNvcHkoc2l6ZSwgc2l6ZSl9PC9zcGFuPmAgOiAnJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHtjYW5Nb3ZlID8gYDxzcGFuIGNsYXNzPSdkZWwnPiR7SWNvbnMuZGVsKHNpemUsIHNpemUpfTwvc3Bhbj5gIDogJyd9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR7Y2FuTW92ZSA/IGA8c3BhbiBjbGFzcz0ndXAnPiR7SWNvbnMudXAoc2l6ZSwgc2l6ZSl9PC9zcGFuPmAgOiAnJ31cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHtjYW5Nb3ZlID8gYDxzcGFuIGNsYXNzPSdkb3duJz4ke0ljb25zLmRvd24oc2l6ZSwgc2l6ZSl9PC9zcGFuPmAgOiAnJ31cclxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgICAgICAgIGA7XHJcbiAgICAgICAgICAgIGNsb3Nlc3REei5pbnNlcnRCZWZvcmUodGIsIGNsb3Nlc3REei5maXJzdENoaWxkKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBjb3B5ID0gdGIucXVlcnlTZWxlY3RvcignLmNvcHknKVxyXG4gICAgICAgICAgICBjb3B5ICYmIChjb3B5Lm9uY2xpY2sgPSBlID0+IGJsb2Nrcy5jb3B5QmxvY2soZSkpXHJcblxyXG4gICAgICAgICAgICBsZXQgZGVsID0gdGIucXVlcnlTZWxlY3RvcignLmRlbCcpXHJcbiAgICAgICAgICAgIGRlbCAmJiAoZGVsLm9uY2xpY2sgPSBlID0+IHtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgdHBsID0gZS50YXJnZXQuY2xvc2VzdCgnLnRlbXBsYXRlJyk7XHJcbiAgICAgICAgICAgICAgICB0cGwucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgbGV0IHVwID0gdGIucXVlcnlTZWxlY3RvcignLnVwJylcclxuICAgICAgICAgICAgdXAgJiYgKHVwLm9uY2xpY2sgPSBlID0+IHtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgdHBsID0gZS50YXJnZXQuY2xvc2VzdCgnLnRlbXBsYXRlJyk7XHJcbiAgICAgICAgICAgICAgICBpZiAodHBsLnByZXZpb3VzU2libGluZyAmJiB0cGwucHJldmlvdXNTaWJsaW5nLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiZGl2XCIpXHJcbiAgICAgICAgICAgICAgICAgICB0cGwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodHBsLCB0cGwucHJldmlvdXNTaWJsaW5nKVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGxldCBkb3duID0gdGIucXVlcnlTZWxlY3RvcignLmRvd24nKVxyXG4gICAgICAgICAgICBkb3duICYmIChkb3duLm9uY2xpY2sgPSBlID0+IHtcclxuICAgICAgICAgICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBsZXQgdHBsID0gZS50YXJnZXQuY2xvc2VzdCgnLnRlbXBsYXRlJyk7XHJcbiAgICAgICAgICAgICAgICB0cGwucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodHBsLCB0cGwubmV4dFNpYmxpbmcubmV4dFNpYmxpbmcpXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjbG9zZXN0RHo7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGVsZW1lbnRCdXR0b25zKGUsIHBkZkVkaXRvciwgY2xvc2VzdER6KSB7XHJcbiAgICBsZXQgc2l6ZSA9IHBkZkVkaXRvci5wcm9wZXJ0aWVzLmJ1dHRvbnNTaXplXHJcbiAgICBsZXQgY2xvc2VzdFRwbCA9IGUudGFyZ2V0LmNsb3Nlc3QoJy5wYWdlIC50ZW1wbGF0ZS5jb2wteHMnKTtcclxuICAgIGlmIChjbG9zZXN0VHBsICE9PSBwZGZFZGl0b3IubW91c2VPdmVyVHBsKSB7XHJcbiAgICAgICAgcGRmRWRpdG9yLnJlbW92ZUJ5U2VsKCcudGVtcGxhdGUtYnV0dG9ucycpO1xyXG4gICAgICAgIHBkZkVkaXRvci5tb3VzZU92ZXJUcGwgPSBjbG9zZXN0VHBsO1xyXG4gICAgICAgIGxldCBjYW5FZGl0ID0gY2xvc2VzdER6ICYmIGNsb3Nlc3REei5nZXRBdHRyaWJ1dGUoJ2Jsb2NrX25vX2VkaXQnKSAhPT0gJ3RydWUnO1xyXG4gICAgICAgIGlmIChjbG9zZXN0VHBsICYmIGNhbkVkaXQpIHtcclxuICAgICAgICAgICAgbGV0IGNsb3Nlc3RUcGwxID0gZS50YXJnZXQuY2xvc2VzdCgnLnBhZ2UgLnRlbXBsYXRlLmNvbC14czpub3QoLm1jZS1lZGl0LWZvY3VzKScpO1xyXG4gICAgICAgICAgICBsZXQgdGIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICAgICAgdGIuY2xhc3NMaXN0LmFkZCgndGVtcGxhdGUtYnV0dG9ucycpO1xyXG4gICAgICAgICAgICB0Yi5pbm5lckhUTUwgPSBgXHJcbiAgICAgICAgICAgICAgICAgICAgPGRpdj5cclxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0naGFuZGxlJz4ke0ljb25zLm1vdmUoc2l6ZSwgc2l6ZSl9PC9kaXY+XHJcbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICAgICAgICBgO1xyXG4gICAgICAgICAgICBjbG9zZXN0VHBsMS5pbnNlcnRCZWZvcmUodGIsIGNsb3Nlc3RUcGwxLmZpcnN0Q2hpbGQpXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5cclxuIiwibW9kdWxlLmV4cG9ydHMgPSBgXHJcbjxzdHlsZT5cclxucCB7XHJcbiAgICBtYXJnaW4tYmxvY2stc3RhcnQ6IDAhaW1wb3J0YW50O1xyXG4gICAgbWFyZ2luLWJsb2NrLWVuZDogMCAhaW1wb3J0YW50O1xyXG59XHJcbi5wYWdlIHtcclxuICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcclxuICAgIG1pbi1oZWlnaHQ6IDExMTBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgYmFja2dyb3VuZDogd2hpdGU7XHJcbiAgICB0ZXh0LWFsaWduOiBsZWZ0O1xyXG4gICAgcGFkZGluZzogNXB4O1xyXG59XHJcbi50ZW1wbGF0ZSB7XHJcbiAgICBjb2xvcjogYmxhY2s7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIHBhZGRpbmc6IDBweDtcclxufVxyXG4ucGFnZSA+IC50ZW1wbGF0ZTpub3QoOmxhc3QtY2hpbGQpIHtcclxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcclxufVxyXG5kaXYuZHJvcHpvbmUucm93IHtcclxuICAgIG1pbi1oZWlnaHQ6IDM1cHg7XHJcbiAgICBtYXJnaW46IDA7XHJcbiAgICB0cmFuc2l0aW9uOiAzMDBtcztcclxufVxyXG5kaXYuZHJvcHpvbmUucm93LmVtcHR5LWRyb3Atem9uZSB7XHJcbiAgICAgbWluLWhlaWdodDogMHB4O1xyXG4gICAgIG9wYWNpdHk6IDA7XHJcbn1cclxuZGl2LnRlbXBsYXRlLmhvdmVyLXN0YXRlIGRpdi5kcm9wem9uZS5yb3cuZW1wdHktZHJvcC16b25lIHtcclxuICAgICBtaW4taGVpZ2h0OiAyNXB4O1xyXG4gICAgIG9wYWNpdHk6IDE7XHJcbiAgICAgYmFja2dyb3VuZC1jb2xvcjogIzAwMDI7XHJcbn1cclxuLnBhZ2UgLnBhZ2UtYnJlYWsge1xyXG4gICAgbWFyZ2luLWxlZnQ6IC0yMHB4O1xyXG4gICAgbWFyZ2luLXJpZ2h0OiAtMjBweDtcclxuICAgIGJhY2tncm91bmQ6IHZhcigtLWJnLWNvbCk7XHJcbiAgICBjb2xvcjogb3JhbmdlO1xyXG59XHJcbi5wYWdlLWJyZWFrIHtcclxuICAgIGJhY2tncm91bmQ6ICNlZWU7XHJcbiAgICBoZWlnaHQ6IDM1cHg7XHJcbiAgICBwb2ludGVyLWV2ZW50czpub25lO1xyXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xyXG4gICAgbGluZS1oZWlnaHQ6IDM1cHg7XHJcbn1cclxuIC5jay13aWRnZXRfX3NlbGVjdGlvbi1oYW5kbGUge1xyXG4gICAgZGlzcGxheTogbm9uZTtcclxuIH1cclxuIC5jay13aWRnZXRfd2l0aC1zZWxlY3Rpb24taGFuZGxle1xyXG4gICAgbWFyZ2luLXRvcDogMTVweCAhaW1wb3J0YW50O1xyXG4gfVxyXG4gLmNrLXdpZGdldF9fc2VsZWN0aW9uLWhhbmRsZSAuY2suY2staWNvbiB7XHJcbiAgICBvcGFjaXR5OiAwO1xyXG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XHJcbiB9XHJcbiAvKi50ZW1wbGF0ZS5jb2wteHMgeyovXHJcbiAvKiAgIHBhZGRpbmc6IDJweCFpbXBvcnRhbnQ7Ki9cclxuIC8qfSovXHJcbiAvKi5kcm9wem9uZSA+IC50ZW1wbGF0ZSB7Ki9cclxuIC8qICAgaGVpZ2h0OiAxMDAlOyovXHJcbiAvKn0qL1xyXG4gLnBhZ2UgdGFibGUge1xyXG4gICAgYm9yZGVyLWNvbGxhcHNlOiBjb2xsYXBzZTtcclxuIH1cclxuIC5wYWdlIHRhYmxlIHRkIHtcclxuICAgIG1pbi13aWR0aDogNDBweDtcclxuIH1cclxuIFxyXG5AcGFnZSB7XHJcbiAgICBtYXJnaW46IDBweDtcclxufVxyXG5cclxuLmNvbnRlbnQgLnBhZ2UuY29udGFpbmVyIGRpdi5hZGRfZWRpdG9yX2hlcmV7XHJcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG59XHJcbjwvc3R5bGU+XHJcbmAuc3BsaXQoJ1xcbicpLmpvaW4oJycpLnNwbGl0KCcgICAgJykuam9pbignJyk7IiwibW9kdWxlLmV4cG9ydHMgPSB7XHJcblxyXG4gICAgaHRtbFRlbXBsYXRlIDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBgXHJcbiAgICAgICAgICAgIDxkaXYgc3R5bGU9XCJwYWRkaW5nOiAxMHB4OyBmb250LXNpemU6IDE2cHg7IGNvbG9yOiAjOTk5O2ZvbnQtZmFtaWx5OiBBcmlhbCwgc2Fucy1zZXJpZjtcIj5cclxuICAgICAgICAgICAgICAgIDxzcGFuIHN0eWxlPVwiY29sb3I6IGxpZ2h0Z3JheVwiPtCf0L7Qu9GPPC9zcGFuPiZuYnNwOzxicj5cclxuICAgICAgICAgICAgICAgICR7cGFkKFwicGRmLWVkaXRvci1wYWdlLXBhZC1sZWZ0XCIsIFwi0KHQu9C10LLQsFwiKX1cclxuICAgICAgICAgICAgICAgICR7cGFkKFwicGRmLWVkaXRvci1wYWdlLXBhZC10b3BcIiwgXCLQodCy0LXRgNGF0YNcIil9XHJcbiAgICAgICAgICAgICAgICAke3BhZChcInBkZi1lZGl0b3ItcGFnZS1wYWQtcmlnaHRcIiwgXCLQodC/0YDQsNCy0LBcIil9XHJcbiAgICAgICAgICAgICAgICAke3BhZChcInBkZi1lZGl0b3ItcGFnZS1wYWQtYm90dG9tXCIsIFwi0KHQvdC40LfRg1wiKX1cclxuICAgICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgYDtcclxuICAgIH0sXHJcblxyXG4gICAgaW5pdFBhZ2VQcm9wZXJ0aWVzKHBkZkVkaXRvcikge1xyXG4gICAgICAgIHRoaXMucGRmRWRpdG9yID0gcGRmRWRpdG9yO1xyXG4gICAgICAgIGxldCB0YXJnZXRFbGVtZW50ID0gdGhpcy5wZGZFZGl0b3IudGFyZ2V0RWxlbWVudDtcclxuICAgICAgICB0YXJnZXRFbGVtZW50XHJcbiAgICAgICAgICAgIC5xdWVyeVNlbGVjdG9yQWxsKCcucGRmLWVkaXRvci1wYWdlLXBhZGRpbmcnKVxyXG4gICAgICAgICAgICAuZm9yRWFjaChpbnB1dCA9PiB7XHJcbiAgICAgICAgICAgICAgICBsZXQgcGFnZSA9IHRhcmdldEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnBhZ2UnKTtcclxuICAgICAgICAgICAgICAgIGlucHV0LnZhbHVlID0gcGFnZS5oYXNBdHRyaWJ1dGUoaW5wdXQuaWQpID8gcGFnZS5nZXRBdHRyaWJ1dGUoaW5wdXQuaWQpIDogNTtcclxuICAgICAgICAgICAgICAgIGlucHV0Lm9uaW5wdXQgPSAoKSA9PiBwYWdlLnNldEF0dHJpYnV0ZShpbnB1dC5pZCwgaW5wdXQudmFsdWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgIH0sXHJcbn1cclxuXHJcbmZ1bmN0aW9uIHBhZChuYW1lLCB0aXRsZSkge1xyXG4gICAgcmV0dXJuIGBcclxuICAgICAgICA8bGFiZWwgZm9yPVwiJHtuYW1lfVwiIHN0eWxlPVwiZGlzcGxheTppbmxpbmUtYmxvY2s7IHdpZHRoOjcwcHhcIj4ke3RpdGxlfTwvbGFiZWw+XHJcbiAgICAgICAgPGlucHV0IGNsYXNzPVwicGRmLWVkaXRvci1wYWdlLXBhZGRpbmdcIiBpZD1cIiR7bmFtZX1cIiB0eXBlPVwibnVtYmVyXCIgc3R5bGU9XCJ3aWR0aDogNTBweFwiPjxicj5cclxuICAgIGA7XHJcbn0iLCJ2YXIgY3NzID0gXCIucGRmLWVkaXRvci53cmFwcGVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgLS1iZy1jb2w6ICM0NDQ7XFxufVxcbi5wZGYtZWRpdG9yIC5jb250ZW50IHtcXG4gIGZsZXgtZ3JvdzogMTtcXG4gIGJhY2tncm91bmQ6IHZhcigtLWJnLWNvbCk7XFxuICBvdmVyZmxvdy15OiBzY3JvbGw7XFxuICBwYWRkaW5nOiA1MHB4IDIwcHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5wZGYtZWRpdG9yIC5wYWdlIHtcXG4gIGJveC1zaGFkb3c6IDFweCAxcHggNHB4IDFweCAjMjIyNjtcXG59XFxuLnBkZi1lZGl0b3IgLnNpZGVQYW5lbCxcXG4ucGRmLWVkaXRvciAucHJvcHNQYW5lbCB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgd2lkdGg6IDM2MHB4O1xcbiAgLypiYWNrZ3JvdW5kOiAjNDQ0OyovXFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYm9yZGVyLWxlZnQ6IDFweCBzb2xpZCBncmF5O1xcbiAgYm9yZGVyLXJpZ2h0OiAxcHggc29saWQgZ3JheTtcXG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XFxufVxcbi5wZGYtZWRpdG9yIC50ZW1wbGF0ZXMge1xcbiAgLypmbGV4LWdyb3c6IDE7Ki9cXG4gIC8qb3ZlcmZsb3cteTogYXV0bzsqL1xcbiAgLypvdmVyZmxvdy14OiBoaWRkZW47Ki9cXG4gIHBhZGRpbmc6IDEwcHggMjVweDtcXG59XFxuLnBkZi1lZGl0b3IgLnRlbXBsYXRlcyAudGVtcGxhdGUge1xcbiAgbWFyZ2luLWJvdHRvbTogNXB4O1xcbiAgLypwYWRkaW5nOiAgNXB4IDA7Ki9cXG59XFxuLnBkZi1lZGl0b3IgLmJ1dHRvbnMge1xcbiAgcGFkZGluZzogNXB4IDVweCAwIDVweDtcXG59XFxuLnBkZi1lZGl0b3IgLmJ1dHRvbnMgYnV0dG9uIHtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgYm9yZGVyLXJhZGl1czogMTFweDtcXG59XFxuLnBkZi1lZGl0b3IgLnRlbXBsYXRlIHtcXG4gIHRyYW5zaXRpb246IDAuMnM7XFxufVxcbi5wZGYtZWRpdG9yICNlbGVtZW50cyAudGVtcGxhdGUge1xcbiAgdHJhbnNpdGlvbjogMC4ycztcXG4gIGJhY2tncm91bmQ6ICNlZWU7XFxufVxcbi5wZGYtZWRpdG9yIC5zaWRlUGFuZWwgLmRyb3B6b25lIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNlZWU7XFxuICBtaW4taGVpZ2h0OiAzNXB4O1xcbn1cXG4ucGRmLWVkaXRvciAuc2lkZVBhbmVsIC50ZW1wbGF0ZTpob3ZlciB7XFxuICB0cmFuc2Zvcm06IHNjYWxlKDEuMSk7XFxuICBjdXJzb3I6IG1vdmU7XFxufVxcbi5kcm9wem9uZSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDAwMTtcXG4gIC8qYm9yZGVyOiAxcHggc29saWQgIzAwMDM7Ki9cXG59XFxuLypkaXYuZHJvcHpvbmUucm93OmZpcnN0LWNoaWxkLCovXFxuLypkaXYuZHJvcHpvbmUucm93Omxhc3QtY2hpbGQgeyovXFxuLyogICAgbWluLWhlaWdodDogMDsqL1xcbi8qfSovXFxuLmhhbmRsZSB7XFxuICBjdXJzb3I6IG1vdmU7XFxufVxcbi5jb3B5IHtcXG4gIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuLmhhbmRsZSxcXG4uY29weSxcXG4uZGVsLFxcbi51cCxcXG4uZG93biB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NCwgMTc3LCA2MiwgMC40KTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGJvcmRlci1yYWRpdXM6IDE1JTtcXG4gIHRyYW5zaXRpb246IDAuMnM7XFxuICBtYXJnaW46IDJweDtcXG59XFxuLmhhbmRsZTpob3ZlcixcXG4uY29weTpob3ZlcixcXG4uZGVsOmhvdmVyLFxcbi51cDpob3ZlcixcXG4uZG93bjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiByZ2JhKDI1NCwgMTc3LCA2MiwgMC44KTtcXG4gIC8qYmFja2dyb3VuZC1jb2xvcjogcmdiKDE4NywgMTM1LCA2NCk7Ki9cXG59XFxuLmR6LWJ1dHRvbnMsXFxuLnRlbXBsYXRlLWJ1dHRvbnMge1xcbiAgb3BhY2l0eTogMDtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIG92ZXJmbG93OiB2aXNpYmxlO1xcbiAgd2lkdGg6IDBweDtcXG4gIGhlaWdodDogMHB4O1xcbiAgbGluZS1oZWlnaHQ6IDA7XFxufVxcbi50ZW1wbGF0ZS1idXR0b25zIHtcXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC00MHB4LCAwKTtcXG59XFxuLnRlbXBsYXRlLWJ1dHRvbnMgPiBkaXYge1xcbiAgd2lkdGg6IDQwcHg7XFxuICBoZWlnaHQ6IDYwcHg7XFxuICAvKmJhY2tncm91bmQ6IHJlYmVjY2FwdXJwbGU7Ki9cXG59XFxuZGl2LmR6LWJ1dHRvbnMge1xcbiAgbWFyZ2luLWxlZnQ6IDcwMHB4O1xcbn1cXG4uc3ZnLW92ZXJsYXkge1xcbiAgcG9zaXRpb246IGZpeGVkO1xcbiAgdG9wOiAwO1xcbiAgbGVmdDogMDtcXG4gIHBvaW50ZXItZXZlbnRzOiBub25lO1xcbn1cXG50YWJsZSB0ZCB7XFxuICBtaW4td2lkdGg6IDUwcHg7XFxuICBoZWlnaHQ6IDIwcHg7XFxuICBib3JkZXI6IDFweCBzb2xpZCBibGFjaztcXG59XFxuLnRhYmxlQmxvY2sge1xcbiAgcGFkZGluZy10b3A6IDNweDtcXG4gIHBhZGRpbmctYm90dG9tOiAzcHg7XFxufVxcbi5zdWItbGFiZWwge1xcbiAgZm9udC1zaXplOiAxNnB4O1xcbiAgY29sb3I6ICM5OTk7XFxuICBmb250LWZhbWlseTogQXJpYWwsIHNhbnMtc2VyaWY7XFxufVxcbi5zdWItbGFiZWw6Zmlyc3QtY2hpbGQge1xcbiAgcGFkZGluZy10b3A6IDVweDtcXG59XFxuLnNpZGVQYW5lbCAjZWxlbWVudHMgPiBkaXYudGVtcGxhdGUge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMXB4IGdyYXk7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5zaWRlUGFuZWwgI2VsZW1lbnRzICA+IGRpdi50ZW1wbGF0ZSB7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxufVxcbi5zaWRlUGFuZWwgI2VsZW1lbnRzICB0YWJsZSB7XFxuICBtYXJnaW4tdG9wOiA1cHg7XFxuICBtYXJnaW4tYm90dG9tOiA1cHg7XFxufVxcbi5zaWRlUGFuZWwgI2VsZW1lbnRzICBpbWcge1xcbiAgbWFyZ2luLWJvdHRvbTogLTRweDtcXG59XFxuZGl2LnRlbXBsYXRlICB0YWJsZSB7XFxuICBib3JkZXItY29sbGFwc2U6IGNvbGxhcHNlO1xcbn1cXG4uc2lkZVBhbmVsIHRleHRhcmVhIHtcXG4gIHdpZHRoOiAzMzNweDtcXG4gIGhlaWdodDogODRweDtcXG59XFxuLnNpZGVQYW5lbCBidXR0b24sXFxuLnNpZGVQYW5lbCBpbnB1dFt0eXBlPVxcXCJ0ZXh0XFxcIl0ge1xcbiAgaGVpZ2h0OiAyOHB4O1xcbiAgd2lkdGg6IDMzN3B4O1xcbn1cXG4vKi5zaWRlUGFuZWwgYnV0dG9uIHsqL1xcbi8qICAgIG91dGxpbmU6IG5vbmU7Ki9cXG4vKiAgICBwYWRkaW5nLXRvcDogNXB4OyovXFxuLyogICAgYm9yZGVyLXJhZGl1czogNXB4OyovXFxuLyogICAgYm9yZGVyOiAxcHggc29saWQgb3JhbmdlOyovXFxuLyogICAgYmFja2dyb3VuZDogIzQ0NDsqL1xcbi8qICAgIGNvbG9yOiB3aGl0ZTsqL1xcbi8qfSovXFxuLnNpZGVQYW5lbCB0ZXh0YXJlYSxcXG4uc2lkZVBhbmVsIGlucHV0W3R5cGU9XFxcInRleHRcXFwiXSB7XFxuICBib3JkZXItcmFkaXVzOiA0cHg7XFxuICBiYWNrZ3JvdW5kOiAjNDQ0O1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgYm9yZGVyOiAxcHggc29saWQgIzk5OTtcXG4gIG1hcmdpbi1ib3R0b206IDVweDtcXG59XFxuLmdyb3VwTmFtZSB7XFxuICB3aWR0aDogMzYwcHg7XFxuICBwYWRkaW5nLWxlZnQ6IDE1cHg7XFxuICBib3JkZXItdG9wOiAxcHggc29saWQgZ3JheTtcXG4gIGJvcmRlci1ib3R0b206IDFweCBzb2xpZCBncmF5O1xcbiAgLyp0ZXh0LWFsaWduOiBjZW50ZXI7Ki9cXG4gIGZvbnQtc2l6ZTogMjBweDtcXG4gIGxpbmUtaGVpZ2h0OiAzMHB4O1xcbiAgZm9udC1mYW1pbHk6IEFyaWFsLCBzYW5zLXNlcmlmO1xcbiAgY29sb3I6ICM5OTk7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG4uZ3JvdXBOYW1lICsgZGl2IHtcXG4gIHRyYW5zaXRpb246IDMwMG1zO1xcbiAgbWF4LWhlaWdodDogMTAwdmg7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbn1cXG4uZ3JvdXBOYW1lLmNvbGxhcHNlZCArIGRpdiB7XFxuICBtYXgtaGVpZ2h0OiAwO1xcbiAgbWluLWhlaWdodDogMCAhaW1wb3J0YW50O1xcbiAgcGFkZGluZy10b3A6IDA7XFxuICBwYWRkaW5nLWJvdHRvbTogMDtcXG4gIG92ZXJmbG93OiBoaWRkZW47XFxufVxcbi5ncm91cE5hbWU6YWZ0ZXIge1xcbiAgY29udGVudDogdXJsKFxcXCJkYXRhOmltYWdlL3N2Zyt4bWw7dXRmOCw8c3ZnIHhtbG5zPSdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Zycgd2lkdGg9JzMwJyBoZWlnaHQ9JzMwJz48Y2lyY2xlIGZpbGw9JyUyMzc3NycgY3g9JzE1JyBjeT0nMTUnIHI9JzEwJyAvPjxwb2x5bGluZSBzdHJva2Utd2lkdGg9JzMnIHBvaW50cz0nMTAgMTMgMTUgMTggMjAgMTMnIGZpbGw9J25vbmUnIHN0cm9rZT0nJTIzNDQ0Jy8+PC9zdmc+XFxcIik7XFxuICB0cmFuc2l0aW9uOiAzMDBtcztcXG4gIGZsb2F0OiByaWdodDtcXG4gIG1hcmdpbi1yaWdodDogMTBweDtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIGxpbmUtaGVpZ2h0OiAwcHg7XFxufVxcbi5ncm91cE5hbWUuY29sbGFwc2VkOmFmdGVyIHtcXG4gIHRyYW5zZm9ybTogcm90YXRlKDkwZGVnKSBzY2FsZSgtMSwtMSk7XFxufVxcbi5zaWRlUGFuZWwgdGFibGUge1xcbiAgLypwYWRkaW5nOiA1cHg7Ki9cXG4gIG1hcmdpbi1sZWZ0OiA0MHB4O1xcbn1cXG4uc2lkZVBhbmVsIHRyOm50aC1jaGlsZCgyKSB0ZDpudGgtY2hpbGQoMykge1xcbiAgYmFja2dyb3VuZDogbGlnaHRncmF5O1xcbn1cXG4ucGRmLWVkaXRvciAucGFnZSB7XFxuICB3aWR0aDogODAwcHg7XFxufVxcblwiOyAocmVxdWlyZShcImJyb3dzZXJpZnktY3NzXCIpLmNyZWF0ZVN0eWxlKGNzcywgeyBcImhyZWZcIjogXCJzcmNcXFxccGRmLWVkaXRvclxcXFxwZGYtZWRpdG9yLmNzc1wiIH0sIHsgXCJpbnNlcnRBdFwiOiBcImJvdHRvbVwiIH0pKTsgbW9kdWxlLmV4cG9ydHMgPSBjc3M7IiwibW9kdWxlLmV4cG9ydHMgPSB7XHJcblxyXG4gICAgaHRtbFRlbXBsYXRlOiBwcm9wZXJ0aWVzID0+IGBcclxuICAgICAgICAgPHBhdGggZmlsbD1cIm5vbmVcIiBzdHJva2U9XCIjZmY2ZTFiXCI+PC9wYXRoPlxyXG4gICAgYCxcclxuXHJcbiAgICBpbml0Q29tcG9uZW50KHBhcmVudENvbXBvbmVudCkge1xyXG4gICAgICAgIHRoaXMuYmxvY2tTZWxlY3Rpb25GcmFtZSA9IHBhcmVudENvbXBvbmVudC5xdWVyeVNlbGVjdG9yKCdwYXRoJyk7XHJcbiAgICB9LFxyXG5cclxuICAgIHVwZGF0ZUNvbXBvbmVudChwZGZFZGl0b3IpIHtcclxuICAgICAgICBpZiAoIXBkZkVkaXRvci5zZWxlY3RlZEJsb2NrKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ibG9ja1NlbGVjdGlvbkZyYW1lLnJlbW92ZUF0dHJpYnV0ZSgnZCcpO1xyXG4gICAgICAgIGxldCByID0gcGRmRWRpdG9yLnNlbGVjdGVkQmxvY2suZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdGhpcy5ibG9ja1NlbGVjdGlvbkZyYW1lLnNldEF0dHJpYnV0ZSgnZCcsYE0ke3IueH0sJHtyLnl9aCR7ci53aWR0aH12JHtyLmhlaWdodCsyfWgtJHtyLndpZHRofXpgKVxyXG4gICAgfVxyXG59IiwibGV0IGJsb2NrcyA9IHJlcXVpcmUoJy4uL2Jsb2NrcycpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblxyXG4gICAgaHRtbFRlbXBsYXRlKHByb3BlcnRpZXMpIHtcclxuICAgICAgICByZXR1cm4gKHRoaXMuZW5hYmxlZCA9IHByb3BlcnRpZXMuZmxvYXRpbmdCbG9ja05hbWUpID8gYFxyXG4gICAgICAgICAgICA8Zz5cclxuICAgICAgICAgICAgICAgIDxyZWN0IHk9XCItMzBcIiByeD1cIjVcIiBoZWlnaHQ9XCIyNVwiIGZpbGw9XCJyZ2IoMTg3LCAxMzUsIDY0KVwiPjwvcmVjdD5cclxuICAgICAgICAgICAgICAgIDx0ZXh0IHk9XCItMTBcIiB4PVwiMTBcIj48L3RleHQ+XHJcbiAgICAgICAgICAgIDwvZz5cclxuICAgICAgICBgIDogJyc7XHJcbiAgICB9LFxyXG5cclxuICAgIGluaXRDb21wb25lbnQocGFyZW50Q29tcG9uZW50KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpXHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIHRoaXMuYmxvY2tOYW1lR3JvdXAgPSBwYXJlbnRDb21wb25lbnQucXVlcnlTZWxlY3RvcignLnN2Zy1vdmVybGF5IGcgZycpO1xyXG4gICAgICAgIHRoaXMuYmxvY2tOYW1lQmcgPSBwYXJlbnRDb21wb25lbnQucXVlcnlTZWxlY3RvcignLnN2Zy1vdmVybGF5IGcgZyByZWN0Jyk7XHJcbiAgICAgICAgdGhpcy5ibG9ja05hbWVUZXh0ID0gcGFyZW50Q29tcG9uZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdmctb3ZlcmxheSBnIGcgdGV4dCcpO1xyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGVDb21wb25lbnQocGRmRWRpdG9yKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmVuYWJsZWQpXHJcbiAgICAgICAgICAgIHJldHVyblxyXG4gICAgICAgIGxldCBzZWxlY3RlZEJsb2NrID0gcGRmRWRpdG9yLnNlbGVjdGVkQmxvY2s7XHJcbiAgICAgICAgaWYgKCFzZWxlY3RlZEJsb2NrKVxyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5ibG9ja05hbWVHcm91cC5zZXRBdHRyaWJ1dGUoYHRyYW5zZm9ybWAsIGB0cmFuc2xhdGUoMCwtMTAwMClgKTtcclxuICAgICAgICBsZXQgciA9IHNlbGVjdGVkQmxvY2suZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdGhpcy5ibG9ja05hbWVHcm91cC5zZXRBdHRyaWJ1dGUoYHRyYW5zZm9ybWAsIGB0cmFuc2xhdGUoJHtyLnh9LCR7ci55fSlgKTtcclxuICAgICAgICB0aGlzLmJsb2NrTmFtZVRleHQudGV4dENvbnRlbnQgPSBzZWxlY3RlZEJsb2NrLmdldEF0dHJpYnV0ZShibG9ja3MucHJvcGVydHlLZXlzLmJsb2NrX25hbWUpO1xyXG4gICAgICAgIHIgPSB0aGlzLmJsb2NrTmFtZVRleHQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgdGhpcy5ibG9ja05hbWVCZy5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgci53aWR0aCArIDIwKTtcclxuICAgIH1cclxufSIsImxldCBmbG9hdGluZ0Jsb2NrTmFtZSA9IHJlcXVpcmUoJy4vZmxvYXRpbmdCbG9ja05hbWUnKTtcclxubGV0IGJsb2NrU2VsZWN0aW9uID0gcmVxdWlyZSgnLi9ibG9ja1NlbGVjdGlvbicpO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcblxyXG4gICAgaHRtbFRlbXBsYXRlOiBwcm9wZXJ0aWVzID0+IGBcclxuICAgICAgICA8c3ZnIGNsYXNzPVwic3ZnLW92ZXJsYXlcIj5cclxuICAgICAgICAgICAgPGRlZnM+XHJcbiAgICAgICAgICAgICAgICA8Y2xpcFBhdGggaWQ9XCJlZGl0b3JfY2xpcF9yZWN0XCI+XHJcbiAgICAgICAgICAgICAgICAgICAgPHBvbHlnb24+PC9wb2x5Z29uPlxyXG4gICAgICAgICAgICAgICAgPC9jbGlwUGF0aD5cclxuICAgICAgICAgICAgPC9kZWZzPlxyXG4gICAgICAgICAgICA8ZyBjbGlwLXBhdGg9XCJ1cmwoI2VkaXRvcl9jbGlwX3JlY3QpXCI+XHJcbiAgICAgICAgICAgICAgICAke2Jsb2NrU2VsZWN0aW9uLmh0bWxUZW1wbGF0ZShwcm9wZXJ0aWVzKX1cclxuICAgICAgICAgICAgICAgICR7ZmxvYXRpbmdCbG9ja05hbWUuaHRtbFRlbXBsYXRlKHByb3BlcnRpZXMpfVxyXG4gICAgICAgICAgICA8L2c+XHJcbiAgICAgICAgPC9zdmc+XHJcbiAgICBgLFxyXG5cclxuICAgIGluaXRTdmdPdmVybGF5OiBmdW5jdGlvbiAocGRmRWRpdG9yKSB7XHJcbiAgICAgICAgdGhpcy5wZGZFZGl0b3IgPSBwZGZFZGl0b3I7XHJcbiAgICAgICAgdGhpcy5vdmVybGF5ID0gcGRmRWRpdG9yLnRhcmdldEVsZW1lbnQucXVlcnlTZWxlY3RvcignLnN2Zy1vdmVybGF5Jyk7XHJcbiAgICAgICAgdGhpcy5vdmVybGF5Q2xpcFBvbHlnb24gPSB0aGlzLm92ZXJsYXkucXVlcnlTZWxlY3RvcignI2VkaXRvcl9jbGlwX3JlY3QgcG9seWdvbicpO1xyXG4gICAgICAgIGJsb2NrU2VsZWN0aW9uLmluaXRDb21wb25lbnQodGhpcy5vdmVybGF5KTtcclxuICAgICAgICBmbG9hdGluZ0Jsb2NrTmFtZS5pbml0Q29tcG9uZW50KHRoaXMub3ZlcmxheSk7XHJcbiAgICAgICAgdGhpcy51cGRhdGVDb21wb25lbnQodGhpcy5wZGZFZGl0b3IpO1xyXG4gICAgfSxcclxuXHJcbiAgICB1cGRhdGVDb21wb25lbnQocGRmRWRpdG9yKSB7XHJcblxyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZSgoKSA9PiB0aGlzLnVwZGF0ZUNvbXBvbmVudChwZGZFZGl0b3IpKTtcclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLnBkZkVkaXRvciAudGFyZ2V0RWxlbWVudC5xdWVyeVNlbGVjdG9yKCcucGRmLWVkaXRvciAuY29udGVudCcpKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIHRoaXMub3ZlcmxheS5zZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnLGAwIDAgJHtpbm5lcldpZHRofSAke2lubmVySGVpZ2h0fWApO1xyXG4gICAgICAgIHRoaXMub3ZlcmxheS5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgaW5uZXJXaWR0aCk7XHJcbiAgICAgICAgdGhpcy5vdmVybGF5LnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgaW5uZXJIZWlnaHQpO1xyXG5cclxuICAgICAgICBsZXQgciA9IHRoaXMucGRmRWRpdG9yLnRhcmdldEVsZW1lbnQgLnF1ZXJ5U2VsZWN0b3IoJy5wZGYtZWRpdG9yIC5jb250ZW50JykuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgICAgICAgbGV0IHNjcm9sbFdpZHRoID0gMTc7XHJcbiAgICAgICAgbGV0IHB0cyA9IFtcclxuICAgICAgICAgICAgci54LCByLnksXHJcbiAgICAgICAgICAgIHIueCArIHIud2lkdGggLSBzY3JvbGxXaWR0aCwgci55LFxyXG4gICAgICAgICAgICByLnggKyByLndpZHRoIC0gc2Nyb2xsV2lkdGgsIHIueSArIHIuaGVpZ2h0LFxyXG4gICAgICAgICAgICByLngsIHIueSArIHIuaGVpZ2h0XHJcbiAgICAgICAgXTtcclxuICAgICAgICB0aGlzLm92ZXJsYXlDbGlwUG9seWdvbi5zZXRBdHRyaWJ1dGUoJ3BvaW50cycsIHB0cy5qb2luKCcgJykpO1xyXG5cclxuICAgICAgICBibG9ja1NlbGVjdGlvbi51cGRhdGVDb21wb25lbnQodGhpcy5wZGZFZGl0b3IpXHJcbiAgICAgICAgZmxvYXRpbmdCbG9ja05hbWUudXBkYXRlQ29tcG9uZW50KHRoaXMucGRmRWRpdG9yKVxyXG4gICAgfVxyXG5cclxufSIsIm1vZHVsZS5leHBvcnRzID0ge1xyXG4gICAgc3R5bGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGBcclxuICAgICAgICAgICAgPHN0eWxlPlxyXG4gICAgICAgICAgICAgICAgLnBkZi1lZGl0b3ItdGFiIHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogbGlnaHRncmF5O1xyXG4gICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IHRhYmxlLWNlbGw7XHJcbiAgICAgICAgICAgICAgICAgICAgbWF4LXdpZHRoOiAxMDBweDtcclxuICAgICAgICAgICAgICAgICAgICBwYWRkaW5nOiA1cHg7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnNvcjogcG9pbnRlcjtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC5wZGYtZWRpdG9yLXRhYi1jb250ZW50IHtcclxuICAgICAgICAgICAgICAgICAgICBkaXNwbGF5OiBub25lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICNzdHJ1Y3R1cmU6Y2hlY2tlZCArIC5wZGYtZWRpdG9yLXRhYiwgXHJcbiAgICAgICAgICAgICAgICAgI3Byb3BlcnRpZXM6Y2hlY2tlZCArIC5wZGYtZWRpdG9yLXRhYntcclxuICAgICAgICAgICAgICAgICAgICBjb2xvcjogd2hpdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgY3Vyc29yOiBkZWZhdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmY1O1xyXG4gICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAjc3RydWN0dXJlOmNoZWNrZWQgfiAuc3RydWN0dXJlLFxyXG4gICAgICAgICAgICAgICAgICNwcm9wZXJ0aWVzOmNoZWNrZWQgfiAucHJvcGVydGllcyB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrICFpbXBvcnRhbnQ7XHJcbiAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICA8L3N0eWxlPlxyXG4gICAgICAgIGBcclxuICAgIH0sXHJcblxyXG4gICAgY3JlYXRlVGViOiBmdW5jdGlvbiAobmFtZSwgdGl0bGUsIGNoZWNrZWQpIHtcclxuICAgICAgICByZXR1cm4gYFxyXG4gICAgICAgICAgICA8aW5wdXQgaWQ9XCIke25hbWV9XCIgXHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCIgXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZT1cInBkZi1lZGl0b3ItdGFic1wiIFxyXG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPVwiZGlzcGxheTogbm9uZVwiICR7Y2hlY2tlZD8nY2hlY2tlZD1cInRydWVcIic6Jyd9ID5cclxuICAgICAgICAgICAgPGxhYmVsIGNsYXNzPVwicGRmLWVkaXRvci10YWJcIiBmb3I9XCIke25hbWV9XCI+JHt0aXRsZX08L2xhYmVsPlxyXG4gICAgICAgIGBcclxuICAgIH1cclxufSJdfQ==
