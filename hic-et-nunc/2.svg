<!-- author https://t.me/strangerintheq -->
<svg xmlns="http://www.w3.org/2000/svg" version="1.1">
    <foreignObject width="532" height="266">
        <canvas id="svg-nft-002" xmlns="http://www.w3.org/1999/xhtml"></canvas>
    </foreignObject>
    <script type="text/javascript">
        let w, h,
            c = document.getElementById('svg-nft-002'),
            g = c.getContext('webgl'),
            p = g.createProgram()

        shader(`
            attribute vec2 v;
            void main() {
                gl_Position = vec4(v, 0.0, 1.0);
            }
        `, g.VERTEX_SHADER)
        shader(`
            precision highp float;
            uniform float time;
            uniform vec2 resolution;
            float rand(float n){
                return fract(sin(n) * 43758.5453123);
            }
            float noise(float p){
                float fl = floor(p), fc = fract(p);
                return mix(rand(fl), rand(fl + 1.0), fc);
            }
            float superformula(float phi, float m, float n1, float n2, float n3, float a, float b){
                vec2 r = vec2(m) * phi / 4.;
                r = vec2(cos(r.x), sin(r.y));
                r = pow(abs(r/vec2(a, b)), vec2(n2, n3));
                return pow(r.x + r.y, -1. / n1);
            }
            float map(in vec3 p) {
                float m = 12.*noise(p.y);
                float n1 = 1.17;
                float n2 = sin(p.y)*noise(cos(time))*3.;
                float n3 = 1.87*noise(p.y+31.)+noise(sin(p.y));
                float a = sin(p.y)*noise(cos(time*.3))*3.;
                float b = 1.3;
                float phi = atan(p.z, p.x);
                float v = length(p.xz) - superformula(phi, m, n1, n2, n3, a, b);
                return smoothstep(-0.1,.0, v)*0.5 - smoothstep(0.,.1, v)*0.5;
            }
            void main() {
                vec2 uv = (gl_FragCoord.xy - resolution.xy*.5)*2.5;
                vec3 ro = vec3(0.0, time*4.0, 0.0 );
                vec3 rd = normalize(vec3(uv.y, resolution.y, uv.x));
                for( float i=0.0; i!=256.0; i++ ) {
                    gl_FragColor = .99 * gl_FragColor;
                    vec3 p = ro + i*rd*0.01;
                    float c = map(p);
                    float l = length(p);
                    gl_FragColor.rgb += vec3(
                        pow(c, 1.0 + sin(l-time)),
                        c,
                        pow(c, 1.0 + cos(time+l))
                    ) * 0.09;
                }
                gl_FragColor = vec4( clamp( gl_FragColor.rgb, 0.0, 1.0 ), 1. );
            }
        `, g.FRAGMENT_SHADER)
        g.linkProgram(p)
        g.useProgram(p)

        let v = g.getAttribLocation(p, "v"),
            r = g.getUniformLocation(p, 'resolution'),
            t = g.getUniformLocation(p, 'time')

        g.bindBuffer(g.ARRAY_BUFFER, g.createBuffer())
        g.bufferData(g.ARRAY_BUFFER, new Float32Array([-1,3,-1,-1,3,-1]), g.STATIC_DRAW)
        g.vertexAttribPointer(v, 2, g.FLOAT, 0, 0, 0)
        g.enableVertexAttribArray(v)

        let fo = c.parentNode;

        requestAnimationFrame(function draw(i) {
            if (w !== innerWidth || h !== innerHeight) {
                w = c.width = innerWidth
                h = c.height = innerHeight
                g.viewport(0, 0, w, h)
                g.uniform2f(r, w, h)
                fo.setAttribute('width', w)
                fo.setAttribute('height', h)
                fo.parentNode.setAttribute('viewBox', [0, 0, w, h])
            }
            g.uniform1f(t, i/1000)
            g.drawArrays(g.TRIANGLES,0,3)
            requestAnimationFrame(draw)
        })

        function shader(src,a) {
            let s = g.createShader(a)
            g.shaderSource(s,src)
            g.compileShader(s)
            g.attachShader(p,s)
        }
    </script>
</svg>