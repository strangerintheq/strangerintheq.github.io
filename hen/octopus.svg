<!-- author https://t.me/strangerintheq -->
<svg xmlns="http://www.w3.org/2000/svg" version="1.1" width="100vh" height="100%">
    <foreignObject width="100%" height="100%">
        <canvas id="canvas" width="1000" height="1000" xmlns="http://www.w3.org/1999/xhtml" style="width:100vh; height:100vw"></canvas>
    </foreignObject>
    <style>
        svg {
            background-color: black;
        }
    </style>
    <script type="text/javascript">

        (function () {

        let rnd = n => (Math.random()-0.5)*(n||1);

        const canvas = document.querySelector('canvas');
        const ctx = canvas.getContext("2d");
        ctx.translate(500,500)

        let branches, iteration, lightness, saturation, colorStep;

        function newSeg(s, dir, da, w){
        return {
        da,
        col: iteration/colorStep+s.col,
        width: w||s.width - 0.02,
        pts: [s.pts[2], s.pts[3]],
        dir: dir+da,
        len: s.len,
        sw: s.sw
        };
        }

        function grow(x, y) {
        iteration = 0;
        lightness = 40 + Math.random()*20
        saturation = 40 + Math.random()*20
        colorStep = 100 + Math.random()*200

        let deltaAngleSeed = rnd();
        let branchesCount = 4+Math.floor(Math.random()*5);
        let lengthSeed = 0.7 + rnd(0.5);

        branches = Array(branchesCount).fill(0)
        .map((e,i) => newBranch(i));

        ctx.clearRect(-1e5,-1e5, 2e5,2e5)
        requestAnimationFrame(growIteration);

        function newBranch(i) {
        const color = rnd(360)
        const direction = Math.PI/branchesCount*i*2 + rnd() + deltaAngleSeed;
        return {
        col: color,
        pts: [x, y],
        dir: direction,
        len: lengthSeed,
        width: 13,
        sw: 1.01 + rnd(0.02)
        }
        }
        }

        function growStep(count){
        for (var j=0; j!== count; j++, iteration++){
        branches = branches.flat().map(s => {
        calcSegment(s);
        paintSegment(s);
        return growAlgorithm(s);
        });
        }
        }

        function growAlgorithm(s){

        let result = []

        if(  0> s.width)
        return result;

        let sw = rnd(0.05)

        if (s.width > 1 &amp;&amp; rnd() > 0.495) {
            let dir = 0.5 + rnd(0.5);
            let w = s.width/1.7 + rnd() + 0.5;
            result.push(newSeg(s, s.dir+dir + rnd(0.3), sw, w));
            result.push(newSeg(s, s.dir-dir+ rnd(0.3),-sw, w));
            if (rnd() > 0.4)
                result.push(newSeg(s, s.dir,-sw, w));
        } else if (rnd() > 0.495) {
        result.push(newSeg(s, s.dir, sw));
        } else {
        result.push(newSeg(s, s.dir, (s.da||0)*s.sw));
        }

        return result;
        }

        function calcSegment(s){
        let x = s.pts[0] + Math.cos(s.dir)*s.len;
        let y = s.pts[1] + Math.sin(s.dir)*s.len;
        if (Math.random()>0.999)
        s.width += Math.random()*2
        s.pts.push(x,y)
        }

        function growIteration(){
        if (branches.length)
        requestAnimationFrame(growIteration);

        growStep(11)
        }

        function paintSegment(s){
        ctx.lineWidth = s.width;
        ctx.lineCap ="round"
        ctx.strokeStyle=`hsl(${s.col},${saturation}%,${lightness}%)`;
        ctx.beginPath();
        ctx.moveTo(s.pts[0], s.pts[1])
        ctx.lineTo(s.pts[2], s.pts[3]);
        ctx.stroke();
        }

        addEventListener('click', () => grow(0,0));

        grow(0,0)
        })();

    </script>
</svg>
