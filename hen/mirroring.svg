<!-- author https://t.me/strangerintheq -->
<svg xmlns="http://www.w3.org/2000/svg" version="1.1">
    <foreignObject>
        <canvas id="canvas" xmlns="http://www.w3.org/1999/xhtml"></canvas>
    </foreignObject>
    <script type="text/javascript">
        let w, h, pause = false,
        c = document.getElementById('canvas'),
        gl = c.getContext('webgl'),
        p = gl.createProgram()

        shader(`attribute vec2 vertex;void main() {gl_Position = vec4(vertex,0.0,1.0);}`, gl.VERTEX_SHADER)
        shader(`

            precision highp float;
            uniform float time;
            uniform vec2 resolution;
            uniform vec4 random;

            vec2 mirror(vec2 uv) {
                float count = 2.0 + floor(random.w*3.);
                float a = 3.1415/count/2.;
                float cs = cos(a), sn = sin(a);
                mat2 rot = mat2(cs, -sn, sn, cs);
                for (float i = 0.0; i&lt;10.; i++ ) {
                    if (i > count )
                        break;
                    uv = abs(uv*rot) - 0.01;
                }
                return uv;
            }

            void main() {
                vec2 uv = gl_FragCoord.xy/resolution-0.5;
                uv.x *= resolution.x/resolution.y;
                float a = time*0.03 + random.x*1000.;
                float cs = cos(a);
                float sn = sin(a);
                uv *= mat2(cs, -sn, sn, cs);
                for(float i=1.; i&lt;31.; i++) {
                    if (i>10.+random.z*20.)
                        break;
                    uv = mirror(uv);

                    uv -= i*0.1 + random.w*0.1;
                }
                uv *= 5. + 25.*random.x;
                vec2 index = floor(uv);

                float t = time + random.y*100.;
                uv = fract(uv);

                vec4 r = (random-0.5)*0.1;
                float f = fract(uv.x+t*0.2)-0.5;

                float y = smoothstep(0.15, 0.2, abs(sin(uv.y+time/2.)));



                vec3 c = vec3(

        smoothstep(0.1, 0.05, abs(f+r.x))*y,
        smoothstep(0.1, 0.05, abs(f+r.y))*y,
        smoothstep(0.1, 0.05, abs(f+r.z))*y

                );
                gl_FragColor = vec4(vec3(c), 1.0);
            }

        `, gl.FRAGMENT_SHADER)

        gl.linkProgram(p)
        gl.useProgram(p)

        let vertex = gl.getAttribLocation(p, "vertex"),
            resolution = gl.getUniformLocation(p, 'resolution'),
            time = gl.getUniformLocation(p, 'time');
            random = gl.getUniformLocation(p, 'random');

        gl.bindBuffer(gl.ARRAY_BUFFER, gl.createBuffer())
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array([-1,3,-1,-1,3,-1]), gl.STATIC_DRAW)
        gl.vertexAttribPointer(vertex, 2, gl.FLOAT, 0, 0, 0)
        gl.enableVertexAttribArray(vertex)
        let fo = c.parentNode;

        addEventListener('click', randomize);

        addEventListener('keyup', (e) => {
            if (e.code === 'Space')
                pause = !pause;
        })
        randomize();

        function randomize(){
            gl.uniform4f(random, Math.random(), Math.random(), Math.random(), Math.random())
        }

        let timeValue = 0;
        let prev = 0;
        requestAnimationFrame(function draw(i) {

            if (!pause)
                timeValue += i - prev

            prev = i;

            if (w !== innerWidth || h !== innerHeight) {
                w = c.width = innerWidth
                h = c.height = innerHeight
                gl.viewport(0, 0, w, h)
                gl.uniform2f(resolution, w, h)
                fo.setAttribute('width', w)
                fo.setAttribute('height', h)
                fo.parentNode.setAttribute('viewBox', [0, 0, w, h])
            }
            gl.uniform1f(time, timeValue/1000)
            gl.drawArrays(gl.TRIANGLES,0,3)
            requestAnimationFrame(draw)
        })

        function shader(src,a) {
            let s = gl.createShader(a)
            gl.shaderSource(s,src)
            gl.compileShader(s)
            gl.attachShader(p,s)
        }

    </script>
</svg>